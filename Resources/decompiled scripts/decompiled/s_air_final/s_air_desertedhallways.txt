void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U74 = 0;
    l_U75 = 0;
    l_U76 = 1500;
    l_U86 = -1;
    l_U87 = {64536, 64536, 64536};
    l_U126 = 0;
    l_U127 = 1;
    l_U128 = 1;
    l_U129 = 0;
    l_U216 = 1500;
    l_U217 = 2000;
    l_U563 = 45000;
    l_U564 = 70000;
    l_U697 = 0;
    l_U698 = 0;
    l_U699 = 1;
    sub_446( "AT", "Script s_air_DesertedHallways.sc is starting up...", 0 );
    sub_495();
    l_U126 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
        sub_623();
        if (l_U129 == 0)
        {
            sub_8468();
        }
        WAIT( 0 );
    }
    sub_3078();
    sub_39998();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_air_DesertedHallways" );
    sub_446( "AT", "Script s_air_DesertedHallways.sc is terminating...", 0 );
    return;
}

void sub_446(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    return;
}

void sub_495()
{
    l_U721[0] = 2004595611;
    l_U721[1] = -1409914275;
    l_U721[2] = -24365917;
    l_U721[3] = -90187428;
    l_U721[4] = 1798479363;
    l_U721[5] = -1489459326;
    l_U721[6] = g_U825;
    return;
}

void sub_623()
{
    if (g_U830 == 2)
    {
        switch (l_U129)
        {
            case 0:
            if ((sub_778()) || (IS_PED_DEAD( sub_705() )))
            {
                l_U129 = 1;
                sub_446( "AT", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if (sub_1272())
            {
                l_U129 = 3;
            }
            else if ((sub_1312( 0 )) == 1)
            {
                l_U129 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD( sub_705() )))
            {
                l_U129 = 3;
                sub_446( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
            sub_446( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD( sub_705() ))) AND (NOT (IS_PLAYER_DEAD( sub_727() ))))
            {
                SET_PLAYER_CONTROL( sub_727(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK( sub_705() ))
                {
                    SET_PED_FORCED_TO_WALK( sub_705(), 0 );
                }
            }
            if ((g_U861[3]._fU40 != 4) AND (g_U861[3]._fU40 != 0))
            {
                sub_446( "GA", "Shutting down script for DEPARTURES.", 0 );
                sub_2928( ref g_U861[3] );
                SET_EXITFLAG_FOR_SCRIPT( g_U861[3]._fU32 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            if (CUTSCENE_IS_LOADED( "MID_03_FIN_concat" ))
            {
                CLEAR_NAMED_CUTSCENE( "MID_03_FIN_concat" );
            }
            sub_3078();
            l_U129 = 4;
            sub_446( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
            sub_446( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            sub_4169( ref l_U90, sub_705() );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "MILO_ap_mhalls", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "MILO_ap_mhalls", 0 ), GET_HASH_KEY( ref g_U2254 ) );
            l_U128 = 0;
            l_U129 = 5;
            sub_446( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
            sub_446( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U126 = 1;
            l_U129 = 0;
            sub_446( "AT", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

int sub_705()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED( sub_727() );
    }
    return 0;
}

void sub_727()
{
    return GET_PLAYER_ID();
}

int sub_778()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD( sub_705() )))
        {
            SET_PED_FORCED_TO_WALK( sub_705(), 0 );
            SET_PLAYER_FORCED_AIM( sub_727(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE( sub_727(), 1 );
            if ((IS_PED_VISIBLE( sub_705() )) == 0)
            {
                SET_PED_VISIBLE( sub_705(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

void sub_1272()
{
    return g_U648;
}

int sub_1312(int iParam0)
{
    iParam0 = 1;
    switch (l_U75)
    {
        case 0:
        if (NOT (sub_1373( ref l_U77 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_705() )))
            {
                l_U76 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
            sub_1483( ref l_U77, l_U76, 1, 1 );
            sub_1619( ref l_U77 );
        }
        if (sub_1739( ref l_U77 ))
        {
            sub_446( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_705() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD( sub_727() )))
            {
                SET_PLAYER_CONTROL( sub_727(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U75 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U75 = 2;
            }
            else
            {
                l_U75 = 3;
            }
        }
        break;
        case 2:
        sub_446( "NS", "Player will QUIT", 0 );
        sub_2226();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
        sub_446( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        sub_2226();
        return 1;
        break;
    }
    return 0;
}

int sub_1373(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_1483(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

void sub_1619(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

int sub_1739(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

void sub_2226()
{
    sub_446( "NS", "P_PostFailRetryCleanup", 0 );
    sub_2276( ref l_U77 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD( sub_727() )))
    {
        SET_PLAYER_CONTROL( sub_727(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U74 = 0;
    l_U74 = l_U74;
    l_U75 = 0;
    return;
}

void sub_2276(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

void sub_2928(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

void sub_3078()
{
    sub_446( "AT", "P_CLEANUP_DESERTEDHALLWAYS", 0 );
    sub_3132( ref l_U513 );
    sub_3165( g_U751._fU0 );
    ISEQ_TERMINATE( 713966355 );
    sub_3260( 713966355, ref g_U1368 );
    ISEQ_TERMINATE( 1888524188 );
    sub_3260( 1888524188, ref g_U1368 );
    ISEQ_TERMINATE( -527946023 );
    sub_3260( -527946023, ref g_U1368 );
    if (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "FINALE_ONESHOT_02" ))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
    if (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "FINALE_ONESHOT_03" ))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    sub_3772( l_U519 );
    sub_3772( l_U520 );
    sub_3772( l_U521 );
    sub_3772( l_U522 );
    sub_3772( l_U523 );
    sub_3856( ref l_U218 );
    if ((CUTSCENE_NAMED_IS_LOADING( "MID_02_FIN" )) || (CUTSCENE_IS_LOADED( "MID_02_FIN" )))
    {
        CLEAR_NAMED_CUTSCENE( "MID_02_FIN" );
    }
    return;
}

void sub_3132(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_3165( (uParam0^)[I] );
    }
    return;
}

void sub_3165(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

void sub_3260(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_3372( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

int sub_3372(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else if ((uParam1^)[I] == iParam0)
        {
            (uParam1^)[I] = nil;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            Result = I;
        }
        else
        {
            (uParam1^)[I] = nil;
        };;;
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

void sub_3772(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

void sub_3856(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_3890( (uParam0^)[I] );
    }
    return;
}

void sub_3890(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

void sub_4169(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

    sub_446( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
    sub_4353( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
        sub_5430( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 = sub_5722( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
        sub_6082( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 = sub_5722( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
        sub_6082( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 = sub_5722( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
        sub_6082( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 = sub_6367( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
        sub_6082( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 = sub_6367( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
        sub_6082( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if ((sub_6860( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
    sub_7021( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING( sub_705(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
    sub_446( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

void sub_4353(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 = sub_4385( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

int sub_4385(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

void sub_5430(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

void sub_5722(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                }
            }
        }
    }
    else
    {
        sub_6038( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

void sub_6038(unknown uParam0)
{
    return;
}

void sub_6082(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

void sub_6367(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                }
            }
        }
    }
    else
    {
        sub_6038( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

int sub_6860(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

void sub_7021(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 = sub_4385( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
    sub_7093( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

void sub_7093(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

void sub_8468()
{
    int iVar2;
    int I;
    int J;

    iVar2 = l_U126;
    switch (l_U126)
    {
        case 0: break;
        case 1:
        sub_446( "AT", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
        sub_8648();
        sub_8931();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U126 = 2;
        sub_446( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
        sub_446( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        sub_12313();
        sub_14778();
        l_U126 = 3;
        sub_446( "AT", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if ((sub_18641( ref g_U1429 )) AND ((sub_18450( ref g_U1368 )) AND ((sub_18329( ref g_U1247 )) AND (sub_18209( ref g_U1030 )))))
        {
            g_U831[2] = 1;
            if ((NOT l_U90._fU0) AND (g_U829 == 2))
            {
                sub_446( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
                l_U126 = 4;
            }
            else
            {
                sub_446( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
                l_U126 = 6;
            }
        }
        break;
        case 4:
        sub_446( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        l_U128 = 0;
        g_U846[2] = 1;
        if ((sub_19010( ref l_U90 )) == 0)
        {
            sub_6367( sub_705(), 57534114, 50, 0, 0 );
            sub_5722( sub_705(), -1464892298, 0, 50, 0 );
            sub_5722( sub_705(), -612753081, 1, 50, 0 );
            l_U126 = 5;
            sub_446( "CR", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U126 = 6;
            sub_446( "CR", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD( sub_705() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER( sub_705(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER( sub_705(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( sub_705(), 0, 0 ) ))))
            {
                g_U830 = 3;
                sub_19539( ref l_U90, g_U830, sub_705(), g_U2014[2], g_U2129[2], g_U2168[2], g_U2207[2], 0 );
                l_U126 = 6;
                sub_446( "GA", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
            }
        }
        break;
        case 6:
        if (l_U127)
        {
            l_U290 = 1;
        }
        if (sub_23232())
        {
            l_U126 = 7;
            sub_446( "GA", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
        }
        break;
        case 7:
        if (g_U846[2])
        {
            if (l_U128)
            {
                if (CUTSCENE_IS_LOADED( "MID_02_FIN" ))
                {
                    sub_446( "AT", "eCheckpointState = CP_MID_02", 0 );
                    l_U126 = 8;
                }
                else
                {
                    sub_446( "AT", "Waiting for MID_02 to load ...", 0 );
                }
            }
            else
            {
                sub_446( "AT", "eCheckpointState = CP_MID_02", 0 );
                l_U126 = 8;
            }
        }
        break;
        case 8:
        if (l_U127)
        {
            sub_25854();
            sub_30461( ref l_U643, "MID_02_FIN", 26900, 26917, 27656, 28911, 28976, 30138, 250, 0 );
            sub_30873( ref l_U643, "MILO_ap_mhalls", ref g_U2254 );
            if (l_U128)
            {
                l_U643._fU4 = 2;
            }
            else
            {
                l_U643._fU4 = 7;
            }
        }
        if (sub_30966( ref l_U643 ))
        {
            if (g_U830 != 2)
            {
                g_U830 = 2;
                sub_19539( ref l_U90, g_U830, sub_705(), g_U2014[2], g_U2129[2], g_U2168[2], g_U2207[2], 1 );
            }
            sub_17845( "14_FIN_RANDOM1_CONCAT", 0 );
            l_U126 = 9;
            sub_446( "AT", "eCheckpointState = CP_GAMEPLAY", 0 );
        }
        break;
        case 9:
        if (((g_U861[1]._fU40 == 4) || (g_U861[1]._fU40 == 0)) AND (NOT g_U861[3]._fU36))
        {
            sub_33115( ref g_U861[3] );
        }
        if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( l_U408._fU0, l_U408._fU4 ) ))
        {
            if (DOOR_GET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( l_U408._fU0, l_U408._fU4 ) ))
            {
                DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( l_U408._fU0, l_U408._fU4 ), 0 );
            }
        }
        sub_33250( ref l_U218, -1054867456, 0, 1 );
        if (NOT l_U304)
        {
            if (sub_33408())
            {
                sub_33996();
                sub_446( "GA", "Playing audio music one shot FINALE_ONESHOT_02", 0 );
                AUDIO_MUSIC_PLAY_ONESHOT();
                l_U304 = 1;
            }
        }
        if ((NOT l_U305) AND (sub_34544( l_U352 )))
        {
            sub_446( "AT", "Enemies can enter bathroom.", 0 );
            for ( I = 0; I < l_U218; I++ )
            {
                sub_25020( ref l_U351, l_U218[I], 1 );
            }
            l_U305 = 1;
        }
        else if ((l_U305) AND (NOT (sub_34544( l_U352 ))))
        {
            sub_446( "AT", "Enemies must leave bathroom.", 0 );
            for ( J = 0; J < l_U218; J++ )
            {
                sub_34824( ref l_U351, l_U218[J] );
            }
            l_U305 = 0;
        }
        if (sub_34906( ref l_U306, 0 ))
        {
            if ((NOT (IS_PED_DEAD( sub_705() ))) AND (NOT (IS_PED_DEAD( l_U218[2] ))))
            {
                SET_PED_FLAG_LOCK_TO_COVER( l_U218[2], 0 );
                TASK_COMBAT_PED( l_U218[2], sub_705() );
            }
            AUDIO_MUSIC_REQUEST_ONESHOT( "FINALE_ONESHOT_03", 0 );
        }
        if (sub_34906( ref l_U327, 0 ))
        {
            if (NOT (IS_PED_DEAD( sub_705() )))
            {
                if (NOT (IS_PED_DEAD( l_U218[3] )))
                {
                    SET_PED_FLAG_LOCK_TO_COVER( l_U218[3], 0 );
                    TASK_COMBAT_PED( l_U218[3], sub_705() );
                    SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218[3], 0 );
                }
                if (NOT (IS_PED_DEAD( l_U218[4] )))
                {
                    SET_PED_FLAG_LOCK_TO_COVER( l_U218[4], 0 );
                    TASK_COMBAT_PED( l_U218[4], sub_705() );
                    SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218[4], 0 );
                }
            }
        }
        if ((sub_35290( ref l_U218 )) == 1)
        {
            sub_35381( ref l_U218 );
        }
        if ((NOT l_U524) AND (((ABSF( sub_35522( ref l_U408 ) )) > 0.10000000) || (sub_34906( ref l_U130, 0 ))))
        {
            sub_35619();
            PLAY_IMAGEFX( "DISTORT_INTERLACE_MIDDLE_RIGHT", 4, 1 );
            if (CUTSCENE_IS_LOADED( "14_FIN_RANDOM1_concat" ))
            {
                CLEAR_NAMED_CUTSCENE( "14_FIN_RANDOM1_concat" );
                l_U698 = 1;
            }
            if (l_U698 == 0)
            {
                sub_17845( "MID_03_FIN_concat", 0 );
            }
            l_U524 = 1;
        }
        if (l_U698 == 1)
        {
            if ((CUTSCENE_IS_LOADED( "14_FIN_RANDOM1_concat" )) == 0)
            {
                sub_17845( "MID_03_FIN_concat", 0 );
            }
        }
        if (sub_36458( ref l_U193, sub_705(), 0 ))
        {
            PLAY_IMAGEFX( "FLASH_WHITE_3", 4, 1 );
        }
        if (sub_34906( ref l_U151, 0 ))
        {
            sub_29034( ref l_U408, 0 );
            l_U214 = 1;
        }
        if (l_U214)
        {
            sub_36623();
        }
        if (l_U699 == 1)
        {
            if (IS_BULLET_CAMERA_TO_GAMEPLAY_ALLOWED())
            {
                if ((sub_35290( ref l_U218 )) == 0)
                {
                    if (sub_34562( sub_705(), l_U373 ))
                    {
                        sub_446( "NS", "Enabling bullet-cam to gameplay.", 0 );
                        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
                        l_U699 = 0;
                    }
                }
            }
        }
        if (HAS_EXPLORATION_ITEM_BEEN_FOUND( "sfav0_Anders2" ))
        {
            if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ((sub_35290( ref l_U218 )) == 0))
            {
                if (sub_34906( ref l_U373, 0 ))
                {
                    sub_37520( ref l_U670, "14_FIN_RANDOM1_CONCAT", 26900, 36966, 37304, 37322, 250, 0 );
                    l_U670._fU4 = 2;
                    l_U697 = 1;
                }
            }
        }
        if (l_U697 == 1)
        {
            if (sub_30966( ref l_U670 ))
            {
                sub_1619( ref l_U700 );
                l_U697 = 0;
            }
        }
        if ((HAS_CUTSCENE_FINISHED()) AND ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ((NOT (sub_37754( sub_705() ))) AND ((sub_35290( ref l_U218 )) == 0))))
        {
            sub_37825();
        }
        if (sub_34906( ref l_U172, 0 ))
        {
            sub_446( "AT", "eCheckpointState = CP_FINISHED", 0 );
            g_U846[3] = 1;
            l_U126 = 10;
        }
        break;
        case 10:
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        l_U126 = 0;
        sub_446( "AT", "eCheckpointState = CP_IDLE", 0 );
        break;
    }
    if (l_U126 != iVar2)
    {
        l_U127 = 1;
    }
    else
    {
        l_U127 = 0;
    }
    return;
}

void sub_8648()
{
    sub_446( "AT", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U127 = 1;
    l_U720 = 0;
    l_U304 = 0;
    l_U524 = 0;
    l_U215 = 0;
    l_U305 = 0;
    l_U214 = 0;
    l_U697 = 0;
    l_U698 = 0;
    l_U699 = 1;
    l_U709 = 0;
    sub_1483( ref l_U700, 1500, 1, 0 );
    sub_8780( ref l_U525 );
    sub_8848( ref l_U535 );
    sub_8848( ref l_U544 );
    sub_8848( ref l_U554 );
    sub_8848( ref l_U569 );
    l_U553 = 0;
    l_U578 = 0;
    l_U568 = 0;
    return;
}

void sub_8780(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

void sub_8848(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

void sub_8931()
{
    sub_446( "AT", "P_SET_STATIC_DATA", 0 );
    sub_9010( ref l_U224[0], 7.97000000, -143.80000000, 4.43000000, 5.00000000, -1481985412, 7, 3, 2, 0, 0 );
    sub_9010( ref l_U224[1], 7.93262200, -159.88480000, 4.42978000, 207.33750000, 2086003218, 7, 3, 2, 0, 0 );
    sub_9010( ref l_U224[2], 4.72185600, -148.13770000, 4.42978000, 284.09670000, -850069950, 7, 3, 2, 0, 0 );
    sub_9010( ref l_U224[3], -6.34552200, -146.32850000, 4.41817200, 206.84620000, -666693278, 7, 3, 2, 0, 0 );
    sub_9010( ref l_U224[4], -5.55468600, -150.56040000, 4.40778400, 257.14690000, 1764689719, 7, 3, 2, 0, 0 );
    sub_9359( ref l_U130, "TRIGGER_VIG02", -22.82000000, -151.59000000, 4.38000000, 0.61000000, 1.39000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_9359( ref l_U193, "TB_ImageFX_VIG02", -28.86000000, -155.10000000, 4.38000000, 2.00000000, 2.00000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_9359( ref l_U151, "TB_CLOSE_BATHROOM_DOOR", -27.30000000, -151.65000000, 4.38000000, 2.93000000, 10.90000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_9359( ref l_U172, "TRIGGER_END_HALLWAYS", -36.43000000, -151.94000000, 4.38000000, 3.06000000, 12.27000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_9359( ref l_U306, "TB_UNLOCK_ENEMIES1", 7.93000000, -143.42000000, 4.44000000, 4.00000000, 2.10000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_9359( ref l_U327, "TB_UNLOCK_ENEMIES2", 0.70000000, -148.70000000, 4.44000000, 2.49000000, 2.97000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_9359( ref l_U352, "TB_PLAYER_IN_BATHROOM", -6.52000000, -139.42000000, 0.00000000, 15.49000000, 9.57000000, 8.07000000, 0.00043874, 0.00000000, 0.00000000, 1 );
    sub_9359( ref l_U600, "TB_BACK_OFFICE_SPEECH", 13.46000000, -146.20000000, 4.51000000, 5.27000000, 13.95000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_9359( ref l_U621, "TB_BACK_BATHROOM_SPEECH", -29.36000000, -151.67000000, 4.51000000, 11.29000000, 11.00000000, 3.00000000, 0.00044622, 0.00000000, 90.00000000, 1 );
    sub_9359( ref l_U579, "TB_BACK_DOOR_SPEECH", -16.19000000, -149.95000000, 4.44000000, 6.59000000, 8.76000000, 3.64000000, 0.00000000, 0.00000000, 90.00000000, 1 );
    sub_9359( ref l_U373, "TB_START_LOCKERROOM_CUT", -1.67000000, -140.12000000, 0.00000000, 1.47000000, 1.56000000, 8.07000000, 0.00043874, 0.00000000, 0.00000000, 1 );
    sub_10311( ref l_U348, "TETH_TO_HALLWAYS_1", -2.78000000, -153.65000000, 0.00000000, 38.02000000, 18.27000000, 8.07000000, 0.00043874, 0.00000000, 0.00000000, 1 );
    sub_10311( ref l_U349, "TETH_TO_HALLWAYS_2", 9.31000000, -139.42000000, 0.00000000, 15.97000000, 18.27000000, 8.07000000, 0.00043874, 0.00000000, 0.00000000, 1 );
    sub_10311( ref l_U350, "TETH_TO_HALLWAYS_3", 1.02000000, -130.80000000, 0.00000000, 34.80000000, 4.44000000, 8.07000000, 0.00043874, 0.00000000, 0.00000000, 1 );
    sub_10311( ref l_U351, "TETH_TO_HALLWAYS_4", -6.52000000, -139.42000000, 0.00000000, 15.49000000, 9.57000000, 8.07000000, 0.00043874, 0.00000000, 0.00000000, 1 );
    sub_10637( ref l_U394, -1922786508, 18.07309000, -131.86230000, 3.73785000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10637( ref l_U401, 1393752228, 18.07309000, -129.46590000, 3.73785000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10637( ref l_U408, 160797987, -22.81339000, -151.00030000, 5.52200000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10781( ref l_U408, 65446, 0 );
    sub_10637( ref l_U422, -270116481, 3.99842000, -131.90530000, 3.76038000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10998( ref l_U422, 1 );
    sub_10637( ref l_U415, -2112979507, 3.99842000, -129.50070000, 3.76035000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10998( ref l_U415, 1 );
    sub_10637( ref l_U429, 1155617511, 10.05162000, -140.17040000, 5.56070000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10781( ref l_U429, -70.00000000, 70.00000000 );
    sub_11251( ref l_U429, 1 );
    sub_10637( ref l_U436, 1155617511, 10.06162000, -146.16040000, 5.56070000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10781( ref l_U436, -70.00000000, 70.00000000 );
    sub_11251( ref l_U436, 1 );
    sub_10637( ref l_U450, -270116481, 9.66369000, -153.18320000, 5.53038000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10637( ref l_U443, -2112979507, 7.25910000, -153.18320000, 5.53035000, 0.00000000, 0.00000000, 0.00000000 );
    sub_11483( ref l_U443, ref l_U450 );
    sub_11522( ref l_U450, 1 );
    sub_11522( ref l_U443, 1 );
    sub_10637( ref l_U464, -270116481, -5.30550000, -151.27560000, 5.56119000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10637( ref l_U457, -2112979507, -7.70648000, -151.27760000, 5.55797000, 0.00000000, 0.00000000, 0.00000000 );
    sub_11483( ref l_U457, ref l_U464 );
    sub_10637( ref l_U471, 160797987, 10.00310000, -157.13060000, 5.52978000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10637( ref l_U485, 1393752228, 9.66261000, -162.22240000, 5.52978000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10637( ref l_U478, -758884735, 7.25238000, -162.22240000, 5.52978000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10998( ref l_U471, 1 );
    sub_10998( ref l_U485, 1 );
    sub_10998( ref l_U478, 1 );
    sub_10637( ref l_U492, 2026809072, -1.43120000, -140.81750000, 5.49670000, 0.00000000, 0.00000000, 0.00000000 );
    sub_10998( ref l_U492, 1 );
    sub_10637( ref l_U499, 1856048740, -14.10721000, -147.50900000, 5.53014000, 0, 0, 0 );
    sub_10781( ref l_U499, -100.00000000, 0.00000000 );
    sub_10637( ref l_U506, 1856048740, -14.10721000, -149.90680000, 5.53014000, 0, 0, 0 );
    sub_10781( ref l_U506, 0.00000000, 100.00000000 );
    l_U292[0] = 57534114;
    l_U292[1] = 57534114;
    l_U292[2] = -1464892298;
    l_U292[3] = -612753081;
    l_U292[4] = -1464892298;
    l_U565[0] = "SAIR_MSHTHTF1";
    l_U565[1] = "SAIR_MSHTHTF2";
    return;
}

void sub_9010(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

void sub_9359(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_10311(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_10637(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

void sub_10781(int iParam0, float fParam1, float fParam2)
{
    if ((sub_10793( iParam0 )) == 0)
    {
        sub_10859( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        ;
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

int sub_10793(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_10859(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

void sub_10998(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if ((sub_10793( iParam0 )) == 0)
    {
        sub_10859( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

void sub_11251(int iParam0, unknown uParam1)
{
    if ((sub_10793( iParam0 )) == 0)
    {
        sub_10859( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

void sub_11483(unknown uParam0, unknown uParam1)
{
    sub_10781( uParam0, 0, 90 );
    sub_10781( uParam1, 65446, 0 );
    sub_11522( uParam0, 1 );
    sub_11522( uParam1, 1 );
    return;
}

void sub_11522(int iParam0, unknown uParam1)
{
    if ((sub_10793( iParam0 )) == 0)
    {
        sub_10859( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

void sub_12313()
{
    sub_446( "AT", "P_REQUEST_DESERTEDHALLWAYS_PERSISTENT_ASSETS start", 0 );
    sub_12395( ref l_U721, ref g_U1030 );
    sub_13804( 57534114, ref g_U1247 );
    sub_13804( -1464892298, ref g_U1247 );
    sub_13804( -612753081, ref g_U1247 );
    return;
}

void sub_12395(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_12430( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_12430(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 = sub_12465( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
            sub_12596( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

int sub_12465(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                sub_12596( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                sub_12596( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    sub_12596( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_13244( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                sub_12596( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_12596( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_12596(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_12616( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

int sub_12616(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            if ((uParam1^)[I] == iParam0)
            {
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
        else
        {
            (uParam1^)[I] = nil;
            Result = I;
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

void sub_13244(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

void sub_13804(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_13825( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
        sub_13957( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_13825(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                sub_13957( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                sub_13957( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    sub_13957( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_13244( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                sub_13957( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_13957( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_13957(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_12616( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_14778()
{
    sub_446( "AT", "P_REQUEST_DESERTEDHALLWAYS_NONPERSISTENT_ASSETS start", 0 );
    sub_14864( 713966355, ref g_U1368 );
    sub_14864( 1888524188, ref g_U1368 );
    sub_14864( -527946023, ref g_U1368 );
    sub_16838( "LEVEL_S_FIN_CP_02", ref g_U1429 );
    if ((l_U128) AND (g_U829 != 2))
    {
        sub_17845( "MID_02_FIN", 0 );
    }
    else
    {
        sub_17845( "14_FIN_RANDOM1_CONCAT", 0 );
    }
    return;
}

void sub_14864(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 = sub_14899( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
            sub_15051( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

int sub_14899(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                sub_15051( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                sub_15051( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        sub_15051( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                        sub_15051( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        sub_13244( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        sub_13244( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                sub_15051( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                sub_15051( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_15051(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_12616( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_16838(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_16859( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
        sub_16996( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_16859(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                sub_16996( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                sub_16996( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    sub_16996( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                    sub_13244( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                sub_16996( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
            sub_16996( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_16996(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_12616( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_17845(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                WAIT( 0 );
            }
        }
    }
    return;
}

int sub_18209(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_18329(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_18450(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

int sub_18641(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_19010(unknown uParam0)
{
    sub_446( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
            sub_4169( uParam0, sub_705() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

void sub_19539(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

    sub_446( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
        sub_446( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
        sub_7021( iParam1 );
        sub_19798( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
            sub_20249( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
            sub_20249( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_20481( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
            sub_20249( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_20481( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_20481( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
            sub_20249( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_20481( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_20481( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_20481( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
            sub_20249( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_20481( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_20481( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_20481( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if (sub_20481( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
            sub_22039( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
    sub_446( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

void sub_19798(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 = sub_4385( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
        sub_446( "TEH", "Ending context", 0 );
        sub_446( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

void sub_20249(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

void sub_20481(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

void sub_22039(int iParam0)
{
    sub_6038( "CHECKPOINT DATA" );
    sub_22078( iParam0->_fU4 );
    sub_22101( iParam0->_fU16 );
    sub_22101( iParam0->_fU20 );
    sub_22101( iParam0->_fU24 );
    sub_22144( iParam0->_fU28 );
    sub_22144( iParam0->_fU56 );
    sub_22144( iParam0->_fU60 );
    sub_22144( iParam0->_fU64 );
    sub_22144( iParam0->_fU68 );
    sub_22144( iParam0->_fU72 );
    sub_22144( iParam0->_fU76 );
    sub_22144( iParam0->_fU80 );
    sub_22144( iParam0->_fU84 );
    sub_22144( iParam0->_fU88 );
    sub_22144( iParam0->_fU92 );
    sub_22101( iParam0->_fU32 );
    sub_22144( iParam0->_fU36 );
    sub_22144( iParam0->_fU40 );
    sub_22144( iParam0->_fU44 );
    sub_22101( iParam0->_fU136 );
    sub_22349( iParam0->_fU140 );
    sub_22144( iParam0->_fU52 );
    sub_6038( "---nRightHolsterAttachmentEnabled: " );
    sub_22144( iParam0->_fU96 );
    sub_6038( "---nRightHolsterAttachmentToggled: " );
    sub_22144( iParam0->_fU100 );
    sub_6038( "---nLeftHolsterAttachmentEnabled: " );
    sub_22144( iParam0->_fU104 );
    sub_6038( "---nLeftHolsterAttachmentToggled: " );
    sub_22144( iParam0->_fU108 );
    sub_6038( "---nRifleHolsterAttachmentEnabled: " );
    sub_22144( iParam0->_fU112 );
    sub_6038( "---nRifleHolsterAttachmentToggled: " );
    sub_22144( iParam0->_fU116 );
    sub_6038( "---nRightHandAttachmentEnabled: " );
    sub_22144( iParam0->_fU120 );
    sub_6038( "---nRightHandAttachmentToggled: " );
    sub_22144( iParam0->_fU124 );
    sub_6038( "---nLeftHandAttachmentEnabled: " );
    sub_22144( iParam0->_fU128 );
    sub_6038( "---nLeftHandAttachmentToggled: " );
    sub_22144( iParam0->_fU132 );
    sub_22144( l_U1 );
    sub_22144( 144 );
    return;
}

void sub_22078(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return;
}

void sub_22101(unknown uParam0)
{
    return;
}

void sub_22144(unknown uParam0)
{
    return;
}

void sub_22349(boolean bParam0)
{
    if (bParam0)
    {
        ;
    }
    return;
}

int sub_23232()
{
    char[64] cVar2;
    unknown uVar18;

    switch (l_U290)
    {
        case 1:
        sub_446( "AT", "e_DH_SpawnUFE = ENTITY_STATE_INIT", 0 );
        l_U291 = 0;
        sub_23349( ref l_U298, 1056964608, 0 );
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U298._fU0, 1 );
        l_U290 = 2;
        sub_446( "AT", "e_DH_SpawnUFE = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_DH_UFE[", 64 );
        ConcatString(ref cVar2, l_U291, 64);
        ConcatString(ref cVar2, "]", 64);
        l_U218[l_U291] = sub_23649( ref l_U224[l_U291] );
        sub_24488( l_U218[l_U291], ref l_U298 );
        uVar18 = sub_6367( l_U218[l_U291], l_U292[l_U291], 25000, 0, 0 );
        if (NOT (IS_PED_DEAD( l_U218[l_U291] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218[l_U291], 1 );
            SET_PED_AI_TEMPLATE( l_U218[l_U291], "AIT_EXPERT" );
            if (l_U291 < 3)
            {
                SET_ROOM_FOR_PED_BY_NAME( l_U218[l_U291], ref g_U2254 );
            }
            else
            {
                SET_ROOM_FOR_PED_BY_NAME( l_U218[l_U291], "ap_lckhall" );
            }
            SET_PED_COMBAT_RANGE_MAX( l_U218[l_U291], 15.00000000 );
            SET_PED_COMBAT_RANGE_MIN( l_U218[l_U291], 1.00000000 );
            SET_PED_CAN_AVOID_DEATH_ZONES( l_U218[l_U291], 0 );
        }
        sub_25020( ref l_U348, l_U218[l_U291], 1 );
        sub_25020( ref l_U349, l_U218[l_U291], 1 );
        sub_25020( ref l_U350, l_U218[l_U291], 1 );
        l_U291++;
        if (l_U291 >= l_U218)
        {
            l_U290 = 3;
            sub_446( "AT", "e_DH_SpawnUFE = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
        sub_25248( ref l_U218, "Hallway" );
        sub_25346( ref l_U218 );
        l_U290 = 4;
        sub_446( "AT", "e_DH_SpawnUFE = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

void sub_23349(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
        }
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

void sub_23649(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
        sub_23819( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
    sub_24288( iParam0->_fU40 );
    sub_24368( iParam0->_fU40 );
    return iParam0->_fU40;
}

void sub_23819(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
        sub_6038( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_24288(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

void sub_24368(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

void sub_24488(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
        sub_6038( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
            sub_23349( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
            sub_23349( iParam1, 1056964608, 0 );
        }
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

void sub_25020(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

void sub_25248(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

void sub_25346(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_25377( (uParam0^)[I] );
    }
    return;
}

void sub_25377(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

void sub_25854()
{
    sub_446( "AT", "P_CREATE_PLACEMENTS", 0 );
    l_U513[0] = sub_25941( -4072149, 12.02000000, -152.36000000, 5.18700000, 0.00000000, 0.00000000, 0.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U513[0] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U513[0], ref g_U2254 );
    }
    l_U513[2] = sub_25941( -4072149, -11.97000000, -137.89000000, 5.06000000, 0.00000000, 0.00000000, 30.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U513[2] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U513[2], ref g_U2262 );
    }
    sub_26173();
    return;
}

void sub_25941(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    return Result;
}

void sub_26173()
{
    sub_446( "CO", "P_CREATE_S_AIR_GG_RG_03", 0 );
    sub_26281( ref g_U751, g_U825, -1097784413, 21328399, 0.17000000, -135.58000000, 4.48000000, 1.50000000, 0.00000000, 1.00000000, "ap_lckrm" );
    sub_26410( ref g_U751 );
    return;
}

void sub_26281(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
        sub_446( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

void sub_26410(int iParam0)
{
    sub_446( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if ((sub_26471( iParam0->_fU12 )) == 1)
        {
            sub_446( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
            sub_446( "CO", "has never been collected.", 0 );
        }
        if ((sub_26471( iParam0->_fU12 )) == 0)
        {
            sub_3165( iParam0->_fU0 );
            iParam0->_fU0 = sub_25941( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                    sub_446( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
        sub_446( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

int sub_26471(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

int sub_26900()
{
    return 1;
}

void sub_26917()
{
    unknown uVar2;

    sub_446( "AT", "P_MID_02_REGISTER", 0 );
    if (NOT (IS_PED_DEAD( sub_705() )))
    {
        CUTSCENE_REGISTER_PED_TELEPORT( sub_705(), g_U2014[2], g_U2129[2] );
        CUTSCENE_REGISTER_SET_PLAYER_IN_COVER( "GenCover", "11F0ECBE_C5841A20_Corner2", 1, 0 );
        CUTSCENE_SET_COVER_CAMERA_DIRECTION( g_U2168[2], g_U2207[2] );
        uVar2 = sub_27076();
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_Clt1911_Aa_H", 0 );
        }
        ISEQ_REGISTER_ENTITY( -527946023, "Max", sub_705(), 0 );
        CUTSCENE_REGISTER_ISEQ( -527946023 );
    }
    if (NOT (IS_PED_DEAD( l_U218[0] )))
    {
        ISEQ_REGISTER_ENTITY( 1888524188, "GMED0", l_U218[0], 0 );
        CUTSCENE_REGISTER_ISEQ( 1888524188 );
    }
    REGISTER_HIDE_ENTITY_AT_POSITION( l_U394._fU0, l_U394._fU4 );
    REGISTER_HIDE_ENTITY_AT_POSITION( l_U401._fU0, l_U401._fU4 );
    return;
}

int sub_27076()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD( sub_705() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND( sub_705(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if ((sub_27139( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND( sub_705(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER( sub_705(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER( sub_705(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

int sub_27139(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

void sub_27656()
{
    unknown uVar2;

    if (l_U643._fU52)
    {
        sub_27686( ref l_U729, 1, 1 );
        sub_28768( l_U729, 0 );
        uVar2 = sub_27076();
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            SELECT_WEAPON_TO_HAND( sub_705(), uVar2, 0, 1 );
        }
    }
    return;
}

void sub_27686(int iParam0, int iParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;

    sub_27698( iParam0 );
    if ((IS_PED_DEAD( sub_705() )) == 0)
    {
        uVar5 = GET_WEAPON_FROM_HAND( sub_705(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            if ((sub_27139( uVar5 )) == 1)
            {
                ref iParam0->_fU0->_fU0 = uVar5;
                ref iParam0->_fU0->_fU4 = GET_WEAPON_TYPE( uVar5 );
            }
            else if ((sub_27921( uVar5 )) == 1)
            {
                ref iParam0->_fU24->_fU0 = uVar5;
                ref iParam0->_fU24->_fU4 = GET_WEAPON_TYPE( uVar5 );
            }
        }
        uVar6 = GET_WEAPON_FROM_HAND( sub_705(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar6 )) == 1)
        {
            ref iParam0->_fU12->_fU0 = uVar6;
            ref iParam0->_fU12->_fU4 = GET_WEAPON_TYPE( uVar6 );
        }
        uVar7 = GET_WEAPON_FROM_HOLSTER( sub_705(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
        {
            ref iParam0->_fU36->_fU0 = uVar7;
            ref iParam0->_fU36->_fU4 = GET_WEAPON_TYPE( uVar7 );
        }
        uVar8 = GET_WEAPON_FROM_HOLSTER( sub_705(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar8 )) == 1)
        {
            ref iParam0->_fU48->_fU0 = uVar8;
            ref iParam0->_fU48->_fU4 = GET_WEAPON_TYPE( uVar8 );
        }
        uVar9 = GET_WEAPON_FROM_HOLSTER( sub_705(), 2 );
        if ((GET_DOES_WEAPON_EXIST( uVar9 )) == 1)
        {
            ref iParam0->_fU60->_fU0 = uVar9;
            ref iParam0->_fU60->_fU4 = GET_WEAPON_TYPE( uVar9 );
        }
    }
    if (iParam1 == 0)
    {
        if ((IS_PED_DEAD( sub_705() )) == 0)
        {
            uVar10 = GET_WEAPON_FROM_HAND( sub_705(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar10 )) == 1)
            {
                SELECT_WEAPON_TO_HAND( sub_705(), 0, 0, uParam2 );
            }
            uVar11 = GET_WEAPON_FROM_HAND( sub_705(), 1, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar11 )) == 1)
            {
                SELECT_WEAPON_TO_HAND( sub_705(), 0, 1, uParam2 );
            }
        }
    }
    else if (iParam1 == 1)
    {
        if ((IS_PED_DEAD( sub_705() )) == 0)
        {
            uVar12 = GET_WEAPON_FROM_HAND( sub_705(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar12 )) == 1)
            {
                if ((sub_27921( uVar12 )) == 1)
                {
                    SELECT_WEAPON_TO_HAND( sub_705(), 0, 0, uParam2 );
                }
            }
            uVar13 = GET_WEAPON_FROM_HAND( sub_705(), 1, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar13 )) == 1)
            {
                SELECT_WEAPON_TO_HAND( sub_705(), 0, 1, uParam2 );
            }
        }
    }
    return;
}

void sub_27698(int iParam0)
{
    ref iParam0->_fU0->_fU0 = 0;
    ref iParam0->_fU0->_fU4 = 0;
    ref iParam0->_fU12->_fU0 = 0;
    ref iParam0->_fU12->_fU4 = 0;
    ref iParam0->_fU24->_fU0 = 0;
    ref iParam0->_fU24->_fU4 = 0;
    ref iParam0->_fU36->_fU0 = 0;
    ref iParam0->_fU36->_fU4 = 0;
    ref iParam0->_fU48->_fU0 = 0;
    ref iParam0->_fU48->_fU4 = 0;
    ref iParam0->_fU60->_fU0 = 0;
    ref iParam0->_fU60->_fU4 = 0;
    return;
}

int sub_27921(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == -2075384407) || ((iVar3 == 10648147) || ((iVar3 == 1224272620) || ((iVar3 == 1478009203) || ((iVar3 == 1964270085) || ((iVar3 == -110877124) || ((iVar3 == 427207702) || ((iVar3 == 319712764) || ((iVar3 == 514118749) || ((iVar3 == -184942895) || ((iVar3 == -168327769) || ((iVar3 == 434544317) || ((iVar3 == -1659006841) || ((iVar3 == 930042831) || ((iVar3 == 1001413062) || ((iVar3 == 377623895) || ((iVar3 == -1312131151) || ((iVar3 == -1787162676) || ((iVar3 == 724901397) || ((iVar3 == 57534114) || ((iVar3 == 840671040) || ((iVar3 == 1308526797) || ((iVar3 == -1074756423) || ((iVar3 == 1992962408) || (iVar3 == -1013714740)))))))))))))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

void sub_28768(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18)
{
    unknown uVar21;
    unknown uVar22;

    uVar21 = uParam0._fU24._fU0;
    if ((GET_DOES_WEAPON_EXIST( uVar21 )) == 1)
    {
        SET_WEAPON_VISIBLE( uVar21, uParam18 );
    }
    uVar22 = uParam0._fU60._fU0;
    if ((GET_DOES_WEAPON_EXIST( uVar22 )) == 1)
    {
        SET_WEAPON_VISIBLE( uVar22, uParam18 );
    }
    return;
}

int sub_28911()
{
    sub_446( "SP", "P_MID_02_POST_CUTSCENE", 0 );
    sub_28768( l_U729, 1 );
    return 1;
}

void sub_28976()
{
    int I;

    sub_446( "AT", "P_PREPARE_MID_02_FIN_BLENDOUT", 0 );
    sub_29034( ref l_U394, 1 );
    sub_29034( ref l_U401, 1 );
    sub_10998( ref l_U394, 1 );
    sub_10998( ref l_U401, 1 );
    sub_29193( 1, 0, 0, 0 );
    sub_29356( ref l_U218 );
    if (NOT (ISEQ_QUERY_STATE( 1888524188, 3 )))
    {
        if (NOT (IS_PED_DEAD( l_U218[0] )))
        {
            ISEQ_REGISTER_ENTITY( 1888524188, "GMED0", l_U218[0], 0 );
        }
        ISEQ_START( 1888524188 );
    }
    for ( I = 0; I < l_U218; I++ )
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218[I], 0 );
    }
    if (NOT (ISEQ_QUERY_STATE( -527946023, 3 )))
    {
        ISEQ_REGISTER_ENTITY( -527946023, "Max", sub_705(), 0 );
        SNAP_PLAYER_TO_COVERPOINT( sub_727(), "GenCover", "11F0ECBE_C5841A20_Corner2", 0 );
        sub_29748( sub_705(), g_U2014[2], g_U2129[2] );
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2168[2], 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2207[2], 1065353216, 0 );
        ISEQ_START( -527946023 );
    }
    CAMERA_PLAY_ANIMATED( "LEVEL_S_FIN_CP_02", "B_OUT_MID_02_FIN_PSTL_CAM", 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0, 0 );
    if (NOT AUDIO_IS_MUSIC_PLAYING())
    {
        sub_446( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_1 mood. Fade in 0 sec", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_1", "FINALE_01_1", 0.00000000, 0, 4000, -1082130432, 0 );
    }
    AUDIO_MUSIC_REQUEST_ONESHOT( "FINALE_ONESHOT_02", 0 );
    return;
}

void sub_29034(int iParam0, int iParam1)
{
    if ((sub_10793( iParam0 )) == 0)
    {
        sub_10859( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

void sub_29193(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD( sub_705() )))
        {
            SET_PLAYER_CONTROL( sub_727(), 0, uParam2 );
            SET_PED_DUCKING( sub_705(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY( sub_705() );
            }
            SET_PED_INVINCIBLE( sub_705(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

void sub_29356(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_29387( (uParam0^)[I] );
    }
    return;
}

void sub_29387(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

void sub_29748(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

int sub_30138()
{
    if (l_U643._fU52)
    {
        sub_30169( ref l_U544, 1000 );
        DO_SCREEN_FADE_IN( 0 );
    }
    if (CAMERA_ANIMATED_CURRENT_TIME() > l_U217)
    {
        if (NOT l_U215)
        {
            sub_446( "AT", "Stopping animated blendout camera.", 0 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2168[2], 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2207[2], 1065353216, 0 );
            CAMERA_ANIMATED_STOP( l_U216, 1 );
            l_U215 = 1;
        }
    }
    if ((l_U215) AND ((ISEQ_QUERY_ENTITY_STATE( -527946023, "Max", 6 )) || (ISEQ_QUERY_ENTITY_STATE( -527946023, "Max", 5 ))))
    {
        sub_446( "AT", "Blendout returning as finished!", 0 );
        return 1;
    }
    return 0;
}

void sub_30169(unknown uParam0, unknown uParam1)
{
    sub_1483( uParam0, uParam1, 1, 0 );
    sub_1619( uParam0 );
    return;
}

void sub_30461(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    sub_446( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return sub_30582( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 30546, 30562, uParam8 );
}

void sub_30546()
{
    return;
}

int sub_30562()
{
    return 1;
}

void sub_30582(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

void sub_30873(int iParam0, unknown uParam1, unknown uParam2)
{
    iParam0->_fU68 = 1;
    iParam0->_fU72 = 1;
    iParam0->_fU76 = uParam1;
    iParam0->_fU80 = uParam2;
    iParam0->_fU24 = 1;
    return;
}

void sub_30966(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
            sub_446( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
            sub_446( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                sub_446( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
            sub_446( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
            sub_446( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
            sub_446( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
            sub_17845( iParam0->_fU0, 0 );
            sub_446( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
            sub_29193( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
        sub_29193( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
        sub_446( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                sub_32207( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
        sub_29193( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
            sub_32556( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
        sub_32556( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

void sub_32207(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD( sub_705() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND( sub_705(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND( sub_705(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_705(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_705(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_705(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

void sub_32556(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD( sub_705() )))
    {
        SET_PLAYER_CONTROL( sub_727(), 1, 0 );
        SET_PED_INVINCIBLE( sub_705(), 0 );
        if (bParam0)
        {
            sub_32637();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

void sub_32637()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD( sub_705() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND( sub_705(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND( sub_705(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_705(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_705(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

void sub_33115(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

void sub_33250(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_33287( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

void sub_33287(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                sub_3890( uParam0 );
            }
        }
    }
    return;
}

int sub_33408()
{
    unknown uVar2;

    if (NOT (IS_PED_DEAD( sub_705() )))
    {
        uVar2 = sub_705();
        if (HAS_SHOT_BEEN_FIRED_IN_AREA( g_U2014[3], 25.00000000, 1, ref uVar2 ))
        {
            sub_446( "AT", "Shots fired! Alerting UFE!", 0 );
            return 1;
        }
        if ((IS_PED_DEAD( l_U218[0] )) || (sub_33532( ref l_U218[0], sub_705(), 1, 1, 1, 1, 1 )))
        {
            sub_446( "AT", "pi_DH_UFE[0] is aware of Max! Alerting UFE!", 0 );
            return 1;
        }
    }
    return 0;
}

int sub_33532(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, int iParam6)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        if ((uParam3) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 1 )))
        {
            if (iParam6 == 1)
            {
                sub_446( "MF", "ped has SEEN target ped", 0 );
            }
            return 1;
        }
        else if ((uParam4) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 8 )))
        {
            if (iParam6 == 1)
            {
                sub_446( "MF", "ped has BEEN SHOT AT by target ped", 0 );
            }
            return 1;
        }
        else if ((uParam2) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 2 )))
        {
            if (iParam6 == 1)
            {
                sub_446( "MF", "ped has HEARD target ped", 0 );
            }
            return 1;
        }
        else if ((uParam5) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 4 )))
        {
            if (iParam6 == 1)
            {
                sub_446( "MF", "ped has BEEN TOLD ABOUT target ped", 0 );
            }
            return 1;
        };;;;
    }
    return 0;
}

void sub_33996()
{
    sub_446( "AT", "P_ACTIVATE_HALLWAY_UFE", 0 );
    if (NOT (IS_PED_DEAD( sub_705() )))
    {
        if (NOT (IS_PED_DEAD( l_U218[0] )))
        {
            TASK_COMBAT_PED( l_U218[0], sub_705() );
        }
        if (NOT (IS_PED_DEAD( l_U218[1] )))
        {
            TASK_COMBAT_MOVE_TO_COVER_COORDS( l_U218[1], 9.42000000, -148.69000000, 4.44000000, sub_705() );
        }
        if (NOT (IS_PED_DEAD( l_U218[2] )))
        {
            TASK_COMBAT_MOVE_TO_COVER( l_U218[2], "GenCover", "11F0ECBE_F27807F8_Corner2", 0 );
            SET_PED_FLAG_LOCK_TO_COVER( l_U218[2], 1 );
        }
        if (NOT (IS_PED_DEAD( l_U218[3] )))
        {
            TASK_COMBAT_MOVE_TO_COVER( l_U218[3], "GenCover", "11F0ECBE_821FA7B9_Corner2", 0 );
            SET_PED_FLAG_LOCK_TO_COVER( l_U218[3], 1 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218[3], 1 );
        }
        if (NOT (IS_PED_DEAD( l_U218[4] )))
        {
            TASK_COMBAT_MOVE_TO_COVER( l_U218[4], "ap_sec2", "Corner_Position05", 0 );
            SET_PED_FLAG_LOCK_TO_COVER( l_U218[4], 1 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218[4], 1 );
        }
    }
    return;
}

void sub_34544(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return sub_34562( sub_705(), uParam0 );
}

int sub_34562(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

void sub_34824(int iParam0, unknown uParam1)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_REMOVE_BOX( uParam1, iParam0->_fU0 );
    }
    return;
}

void sub_34906(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 = sub_34562( sub_705(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

void sub_35290(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

void sub_35381(unknown uParam0)
{
    int I;

    if ((sub_35290( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

void sub_35522(int iParam0)
{
    int iVar3;
    float Result;

    if ((sub_10793( iParam0 )) == 0)
    {
        sub_10859( iParam0 );
    }
    iVar3 = 0;
    Result = 0.00000000;
    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar3, ref Result );
    return Result;
}

void sub_35619()
{
    sub_446( "AT", "P_ACTIVATE_VIG02", 0 );
    l_U520 = sub_35699( -24365917, -30.64000000, -151.30000000, 5.23000000, 0.00000000, 0.00000000, 90.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U520 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U520, ref g_U2270 );
    }
    l_U521 = sub_35699( -90187428, -30.55000000, -151.00000000, 5.25400000, 0.00000000, -90.00000000, 140.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U521 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U521, ref g_U2270 );
    }
    l_U522 = sub_35699( 1798479363, -30.44000000, -151.30000000, 5.20000000, 0.00000000, 0.00000000, 90.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U522 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U522, ref g_U2270 );
    }
    l_U523 = sub_35699( -1489459326, -30.90000000, -151.30000000, 5.23300000, 90.00000000, 180.00000000, 110.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U523 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U523, ref g_U2270 );
    }
    return;
}

void sub_35699(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
        sub_23819( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

void sub_36458(int iParam0, unknown uParam1, unknown uParam2)
{
    if (iParam0->_fU68 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU68 = sub_34562( uParam1, (iParam0^) );
        if ((iParam0->_fU68) AND (uParam2))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU68;
}

void sub_36623()
{
    int I;

    for ( I = 0; I < l_U218; I++ )
    {
        if ((NOT (IS_PED_DEAD( l_U218[I] ))) AND (DOES_PED_EXIST( l_U218[I] )))
        {
            if (NOT (IS_PED_ON_SCREEN( l_U218[I], 1 )))
            {
                sub_3890( l_U218[I] );
            }
        }
    }
    return;
}

void sub_36966()
{
    sub_446( "NS", "P_14_FIN_RANDOM1_CONCAT_REGISTER", 0 );
    sub_37023( 0 );
    if ((NOT (IS_PLAYER_DEAD( sub_727() ))) AND (NOT (IS_PED_DEAD( sub_705() ))))
    {
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( sub_705(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_LOCO" );
        CUTSCENE_REGISTER_PED_TELEPORT( sub_705(), -3.55700900, -142.74620000, 4.44546100, 124.96790000 );
        SET_PLAYER_CONTROL( sub_727(), 0, 0 );
    }
    sub_32207( 0 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "Andr_Suit", -432012223 );
    CUTSCENE_ENABLE_SKIP( 0 );
    return;
}

void sub_37023(unknown uParam0)
{
    int I;

    for ( I = 0; I <= 3; I++ )
    {
        if (IS_SCRIPTED_CONVERSATION_ONGOING( I ))
        {
            if ((g_U1[I] <= 8) AND (g_U1[I] >= 4))
            {
                STOP_SCRIPTED_CONVERSATION( I, uParam0, 0 );
            }
        }
    }
    return;
}

void sub_37304()
{
    return;
}

int sub_37322()
{
    sub_446( "NS", "F_14_FIN_RANDOM1_CONCAT_PostCutscene", 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( 0, 1065353216, 0 );
    if (NOT (IS_PLAYER_DEAD( sub_727() )))
    {
        SET_PLAYER_CONTROL( sub_727(), 1, 0 );
    }
    sub_32207( 1 );
    if (NOT (HAS_EXPLORATION_ITEM_BEEN_FOUND( "sair_Anders3" )))
    {
        FOUND_EXPLORATION_ITEM( "sair_Anders3" );
    }
    return 1;
}

void sub_37520(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    sub_446( "MSWW", "CutSys_CreateStandaloneCutscene", "###" );
    return sub_30582( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam7, 0, 37597, 37615, 0, 30546, 30562, uParam6 );
}

void sub_37597()
{
    return;
}

int sub_37615()
{
    return 1;
}

int sub_37754(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return IS_ANY_SPEECH_PLAYING( uParam0 );
    }
    return 0;
}

void sub_37825()
{
    int iVar2;
    int I;

    if ((NOT (sub_1739( ref l_U535 ))) AND (l_U535._fU20))
    {
        return;
    }
    if (NOT l_U553)
    {
        sub_30169( ref l_U554, 2000 );
        sub_446( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_2 mood. Fade in 7 sec", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_2", "FINALE_01_2", 0.00000000, 7000, 3000, -1082130432, 0 );
        sub_446( "GA", "Playing audio music one shot FINALE_ONESHOT_03", 0 );
        AUDIO_MUSIC_PLAY_ONESHOT();
        l_U553 = 1;
    }
    if (NOT sub_38112())
    {
        if (sub_1739( ref l_U700 ))
        {
            sub_38212( "SAIR_MX3RDENC", ref l_U710 );
        }
    }
    if (NOT l_U700._fU20)
    {
        if (NOT sub_38112())
        {
            if (sub_1739( ref l_U554 ))
            {
                sub_39310( "SAIR_AMKECR" );
                return;
            }
        }
        if (l_U554._fU16)
        {
            if (NOT l_U569._fU20)
            {
                sub_30169( ref l_U569, GET_RANDOM_INT_IN_RANGE( l_U563, l_U564 ) );
            }
            if (sub_1739( ref l_U569 ))
            {
                if (l_U568 < l_U565)
                {
                    sub_39310( l_U565[l_U568] );
                    l_U568++;
                    sub_30169( ref l_U569, GET_RANDOM_INT_IN_RANGE( l_U563, l_U564 ) );
                    return;
                }
            }
            if (NOT l_U578)
            {
                if ((IS_SPHERE_VISIBLE( -22.58000000, -152.09000000, 5.41000000, 0.10000000, 1 )) AND (sub_34562( sub_705(), l_U579 )))
                {
                    sub_39310( "SAIR_MSDTDR" );
                    l_U578 = 1;
                    return;
                }
            }
            if (sub_36458( ref l_U600, sub_705(), 0 ))
            {
                sub_39310( "SAIR_MSWTG" );
                return;
            }
            if (sub_36458( ref l_U621, sub_705(), 0 ))
            {
                sub_39310( "SAIR_METBTRM" );
                return;
            }
            iVar2 = 0;
            for ( I = 0; I < l_U513; I++ )
            {
                if (DOES_PLACEMENT_EXIST( l_U513[I] ))
                {
                    iVar2++;
                }
            }
            if (((GET_RANDOM_FLOAT_IN_RANGE( 0.00000000, 1.00000000 )) < 0.50000000) AND (iVar2 < l_U642))
            {
                sub_39310( "SAIR_MFFKNPLS" );
            }
            l_U642 = iVar2;
        }
    }
    return;
}

void sub_38112()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

void sub_38212(unknown uParam0, unknown uParam1)
{
    sub_8780( uParam1 );
    sub_38245( 0, sub_705(), "MAX", uParam1, 2, 0 );
    sub_38245( 1, sub_705(), "MAX", uParam1, 2, 0 );
    sub_38470( uParam0, uParam1, 8, 1 );
    return;
}

void sub_38245(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

void sub_38470(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return sub_38494( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

void sub_38494(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return sub_38549( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

int sub_38549(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT (sub_38584( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
    sub_39078( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

int sub_38584(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

void sub_39078(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

void sub_39310(unknown uParam0)
{
    sub_38212( uParam0, ref l_U525 );
    sub_30169( ref l_U535, 8000 );
    return;
}

void sub_39998()
{
    sub_446( "AT", "P_RELEASE_DESERTEDHALLWAYS_ASSETS", 0 );
    sub_40063( ref l_U721, ref g_U1030 );
    sub_40342( 57534114, ref g_U1247 );
    sub_40342( -1464892298, ref g_U1247 );
    sub_40342( -612753081, ref g_U1247 );
    sub_40548( "LEVEL_S_FIN_CP_02", ref g_U1429 );
    return;
}

void sub_40063(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_40098( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_40098(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_3372( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

void sub_40342(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 = sub_3372( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_40548(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_3372( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

