void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U40 = 0;
    l_U41 = 0;
    l_U42 = 1500;
    l_U52 = {0, 0, 0};
    StrCopy( ref l_U55, "DUMMY", 32 );
    l_U63 = 1;
    l_U68 = 0;
    l_U69 = 0;
    l_U70 = 0;
    l_U73 = 0;
    l_U118 = -1;
    l_U119 = {64536, 64536, 64536};
    l_U123 = 0;
    l_U169 = 0;
    l_U171 = 0;
    l_U383 = {-39.42100000, 3.16200000, 6.05000000};
    l_U386 = 154.80000000;
    l_U759 = 0;
    sub_408( "SP", "Script s_pana_Deck2.sc is starting up...", 0 );
    sub_457();
    l_U169 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
        sub_654();
        if (l_U171 == 0)
        {
            sub_10285();
        }
        WAIT( 0 );
    }
    sub_4173();
    sub_44628();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_pana_Deck2" );
    sub_408( "SP", "Script s_pana_Deck2.sc is terminating...", 0 );
    return;
}

void sub_408(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    return;
}

void sub_457()
{
    sub_408( "GA", "P_2D_SETUP_DATA_ARRAYS start", 0 );
    l_U161[0] = g_U1518;
    l_U161[1] = g_U1528;
    l_U161[2] = g_U1583;
    l_U161[3] = -1409914275;
    l_U166[0] = -612753081;
    l_U166[1] = -1404433099;
    sub_408( "GA", "P_2D_SETUP_DATA_ARRAYS end", 0 );
    return;
}

void sub_654()
{
    if (g_U834 == 5)
    {
        switch (l_U171)
        {
            case 0:
            sub_737( 1 );
            if ((l_U759 == 1) || ((sub_2051()) || (IS_PED_DEAD( sub_747() ))))
            {
                l_U171 = 1;
                sub_408( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if (sub_2553())
            {
                if ((g_U835[6]._fU40 != 4) AND (g_U835[6]._fU40 != 0))
                {
                    sub_408( "GA", "Shutting down script for top deck.", 0 );
                    sub_2670( ref g_U835[6] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U835[6]._fU32 );
                }
                l_U171 = 3;
            }
            else if ((sub_2735( 0 )) == 1)
            {
                if ((g_U835[6]._fU40 != 4) AND (g_U835[6]._fU40 != 0))
                {
                    sub_408( "GA", "Shutting down script for top deck.", 0 );
                    sub_2670( ref g_U835[6] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U835[6]._fU32 );
                }
                l_U171 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD( sub_747() )))
            {
                l_U171 = 3;
                sub_408( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
            sub_408( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD( sub_747() ))) AND (NOT (IS_PLAYER_DEAD( sub_769() ))))
            {
                SET_PLAYER_CONTROL( sub_769(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK( sub_747() ))
                {
                    SET_PED_FORCED_TO_WALK( sub_747(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            sub_4173();
            LOAD_SCENE( -60.36033000, 4.03825700, 6.08244300 );
            LOAD_SCENE( -9.51633800, 3.89024600, 13.19525000 );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "Deck2exit", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "Deck2exit", 0 ), GET_HASH_KEY( ref g_U3271 ) );
            STREAM_HELPERS_REQUEST_AT_LOC( g_U980[5], 0 );
            sub_5717( g_U980[5], g_U1086[5], g_U1158[5], g_U1122[5] );
            sub_5839( 1 );
            l_U171 = 4;
            sub_408( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
            sub_408( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U125._fU0)
            {
                sub_6037( ref l_U125, sub_747() );
            }
            l_U171 = 5;
            sub_408( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
            sub_408( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U169 = 1;
            if (NOT (IS_PLAYER_DEAD( sub_769() )))
            {
                SET_PLAYER_CONTROL( sub_769(), 1, 0 );
            }
            l_U171 = 0;
            sub_408( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

int sub_737(int iParam0)
{
    if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND (NOT (IS_PED_DEAD( sub_747() )))))
    {
        if ((IS_PED_IN_WATER( sub_747() )) == 1)
        {
            if (NOT g_U3626._fU32)
            {
                sub_878();
            }
            if (iParam0 == 1)
            {
                sub_1703();
            }
            sub_1761( 1, 1 );
            return 1;
        }
    }
    return 0;
}

int sub_747()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED( sub_769() );
    }
    return 0;
}

void sub_769()
{
    return GET_PLAYER_ID();
}

void sub_878()
{
    sub_408( "MF", "P_GBL_QUICK_GAMEPLAY_CAM_COPY - START", 0 );
    sub_946( ref g_U3626, 50 );
    sub_1279( 0, 0, 0, 1 );
    sub_1442( ref g_U3626 );
    sub_408( "MF", "P_GBL_QUICK_GAMEPLAY_CAM_COPY - END", 0 );
    return;
}

void sub_946(int iParam0, unknown uParam1)
{
    iParam0->_fU4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_GAMEPLAY_CAM_ROT()};
    iParam0->_fU16 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_GAMEPLAY_CAM_COORD()};
    iParam0->_fU28 = GET_GAMEPLAY_CAM_FOV();
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam1;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU96 = 0;
    sub_1069( iParam0 + 48, uParam1, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U703, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

void sub_1069(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

void sub_1279(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD( sub_747() )))
        {
            SET_PLAYER_CONTROL( sub_769(), 0, uParam2 );
            SET_PED_DUCKING( sub_747(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY( sub_747() );
            }
            SET_PED_INVINCIBLE( sub_747(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

void sub_1442(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
    sub_1497( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

void sub_1497(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

void sub_1703()
{
    SET_PAD_SHAKE( 0, 100, 250 );
    WAIT( 90 );
    SET_PED_HEALTH( sub_747(), 0, 0 );
    return;
}

void sub_1761(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD( sub_747() )))
    {
        SET_PLAYER_CONTROL( sub_769(), 1, 0 );
        SET_PED_INVINCIBLE( sub_747(), 0 );
        if (bParam0)
        {
            sub_1842();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

void sub_1842()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD( sub_747() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND( sub_747(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND( sub_747(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_747(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_747(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

int sub_2051()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD( sub_747() )))
        {
            SET_PED_FORCED_TO_WALK( sub_747(), 0 );
            SET_PLAYER_FORCED_AIM( sub_769(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE( sub_769(), 1 );
            if ((IS_PED_VISIBLE( sub_747() )) == 0)
            {
                SET_PED_VISIBLE( sub_747(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

void sub_2553()
{
    return g_U648;
}

void sub_2670(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

int sub_2735(int iParam0)
{
    iParam0 = 1;
    switch (l_U41)
    {
        case 0:
        if (NOT (sub_2796( ref l_U43 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_747() )))
            {
                l_U42 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
            sub_1069( ref l_U43, l_U42, 1, 1 );
            sub_1497( ref l_U43 );
        }
        if (sub_2924( ref l_U43 ))
        {
            sub_408( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_747() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD( sub_769() )))
            {
                SET_PLAYER_CONTROL( sub_769(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U41 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U41 = 2;
            }
            else
            {
                l_U41 = 3;
            }
        }
        break;
        case 2:
        sub_408( "NS", "Player will QUIT", 0 );
        sub_3411();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
        sub_408( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        sub_3411();
        return 1;
        break;
    }
    return 0;
}

int sub_2796(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

int sub_2924(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

void sub_3411()
{
    sub_408( "NS", "P_PostFailRetryCleanup", 0 );
    sub_3461( ref l_U43 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD( sub_769() )))
    {
        SET_PLAYER_CONTROL( sub_769(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U40 = 0;
    l_U40 = l_U40;
    l_U41 = 0;
    return;
}

void sub_3461(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

void sub_4173()
{
    sub_408( "GA", "P_CLEANUP_2D start", 0 );
    SET_BCAM_STR_HELPER_TRACK_PLAYER( 0 );
    sub_4229( g_U4175, 0 );
    sub_4392( ref g_U4175 );
    g_U4177 = 0;
    ISEQ_TERMINATE( -396548175 );
    sub_4597( -396548175, ref g_U1878 );
    ISEQ_TERMINATE( 505353008 );
    sub_4597( 505353008, ref g_U1878 );
    ISEQ_TERMINATE( 2061552818 );
    sub_4597( 2061552818, ref g_U1878 );
    ISEQ_TERMINATE( 1082972171 );
    sub_4597( 1082972171, ref g_U1878 );
    ISEQ_TERMINATE( 797357567 );
    sub_4597( 797357567, ref g_U1878 );
    ISEQ_TERMINATE( -890990590 );
    sub_4597( -890990590, ref g_U1878 );
    sub_5100( l_U172 );
    sub_5100( l_U173 );
    sub_5158( l_U369 );
    sub_5236( ref l_U387 );
    sub_5236( ref l_U521 );
    sub_5158( l_U761 );
    sub_5158( l_U798 );
    sub_5323();
    if ((AUDIO_MUSIC_IS_ONESHOT_PREPARED( "PANAMA_OS_2" )) || (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "PANAMA_OS_4" )))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
    sub_408( "GA", "P_CLEANUP_2D end", 0 );
    return;
}

void sub_4229(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
        sub_408( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
        sub_408( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

void sub_4392(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
        sub_408( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
        sub_408( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

void sub_4597(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_4709( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

int sub_4709(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else if ((uParam1^)[I] == iParam0)
        {
            (uParam1^)[I] = nil;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            Result = I;
        }
        else
        {
            (uParam1^)[I] = nil;
        };;;
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

void sub_5100(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

void sub_5158(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

void sub_5236(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_5158( (uParam0^)[I] );
    }
    return;
}

void sub_5323()
{
    sub_408( "CCB", "P_STOP_SP_CHALLENGES", 0 );
    sub_408( "CCB", "Stopping the Panama_Second_Deck context...", 0 );
    END_CONTEXT( "Panama_Second_Deck" );
    return;
}

void sub_5717(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    unknown uVar8;

    uVar8 = sub_747();
    sub_5743( uVar8, uParam0, uParam3 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam4, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( uParam5, 1065353216, 0 );
    return;
}

void sub_5743(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

void sub_5839(unknown uParam0)
{
    unknown uVar3;

    uVar3 = sub_747();
    sub_5859( ref uVar3, uParam0 );
    return;
}

void sub_5859(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        FREEZE_PED_POSITION( (uParam0^), uParam1 );
    }
    return;
}

void sub_6037(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

    sub_408( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
    sub_6221( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
        sub_7298( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 = sub_7590( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
        sub_7950( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 = sub_7590( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
        sub_7950( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 = sub_7590( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
        sub_7950( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 = sub_8235( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
        sub_7950( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 = sub_8235( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
        sub_7950( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if ((sub_8728( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
    sub_8889( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING( sub_747(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
    sub_408( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

void sub_6221(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 = sub_6253( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

int sub_6253(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

void sub_7298(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

void sub_7590(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                }
            }
        }
    }
    else
    {
        sub_7906( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

void sub_7906(unknown uParam0)
{
    return;
}

void sub_7950(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

void sub_8235(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                }
            }
        }
    }
    else
    {
        sub_7906( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

int sub_8728(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

void sub_8889(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 = sub_6253( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
    sub_8961( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

void sub_8961(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

void sub_10285()
{
    int iVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    iVar2 = l_U169;
    sub_10302();
    switch (l_U169)
    {
        case 0: break;
        case 1:
        sub_408( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
        sub_10861();
        sub_11109();
        sub_13793();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U169 = 2;
        sub_408( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
        sub_408( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        sub_14392();
        sub_19686();
        l_U169 = 3;
        sub_408( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if ((sub_22464( ref g_U3026 )) AND ((sub_22273( ref g_U1878 )) AND ((sub_22146( ref g_U1975 )) AND ((sub_22025( ref g_U1829 )) AND (sub_21905( ref g_U1588 ))))))
        {
            if ((NOT l_U125._fU0) AND (g_U833 == 5))
            {
                l_U169 = 4;
                sub_408( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U169 = 6;
                sub_408( "SP", "eCheckpointState = CP_2D_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
        sub_408( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U1230[5] = 1;
        sub_22826( ref g_U3777[10], 1 );
        sub_23032( ref g_U3777[10], 1 );
        sub_22826( ref g_U3777[9], 1 );
        AUD_SET_IS_POWER_ON( 0 );
        if (NOT (IS_PED_DEAD( sub_747() )))
        {
            FREEZE_PED_POSITION( sub_747(), 0 );
        }
        if ((sub_23216( ref l_U125 )) == 0)
        {
            sub_8235( sub_747(), -1404433099, 200, 0, 0 );
            sub_7590( sub_747(), -612753081, 0, 200, 0 );
            l_U169 = 5;
            sub_408( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U169 = 6;
            sub_408( "SP", "eCheckpointState = CP_2D_PRE_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD( sub_747() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER( sub_747(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( sub_747(), 0, 0 ) )))
            {
                l_U169 = 6;
                sub_408( "GA", "eCheckpointState = CP_2D_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if (l_U170)
        {
            sub_23732( 0, 0 );
            sub_24595();
        }
        if (sub_24849( ref l_U387, ref l_U393, -1, 0, 0, 0, 1 ))
        {
            sub_26307();
            l_U169 = 7;
            sub_408( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        break;
        case 7:
        if (g_U1230[5])
        {
            if (NOT l_U125._fU0)
            {
                g_U834 = 5;
                sub_28508( ref l_U125, g_U834, sub_747(), g_U980[5], g_U1086[5], g_U1158[5], g_U1122[5], 1 );
            }
            sub_32109();
            DO_SCREEN_FADE_IN( 0 );
            sub_32514();
            l_U169 = 8;
            sub_408( "GA", "eCheckpointState = CP_2D_GAMEPLAY", 0 );
        }
        break;
        case 8:
        if (l_U170)
        {
            sub_32721();
            sub_33046();
            SET_BCAM_STR_HELPER_TRACK_PLAYER( 1 );
            sub_5839( 0 );
        }
        sub_33207( ref l_U387, 0.00000000, 1, 0 );
        sub_33207( ref l_U521, 0.00000000, 1, 0 );
        sub_33244( l_U761, 0.00000000, 1, 0 );
        sub_33244( l_U798, 0.00000000, 1, 0 );
        sub_33404();
        sub_34801();
        if (g_U4177 == 1)
        {
            if (NOT (IS_OBJECT_PLAYING_ANIM( g_U4171, "P_LockGate", "pa_doors" )))
            {
                sub_408( "GA", "Stop lock2 sound.", 0 );
                sub_4229( g_U4175, 0 );
                sub_4392( ref g_U4175 );
                g_U4177 = 0;
            }
        }
        if (NOT l_U465)
        {
            if (sub_35769( ref l_U466, 0 ))
            {
                sub_35870();
                sub_36153();
                sub_1497( ref l_U488 );
                sub_1497( ref l_U497 );
                l_U465 = 1;
            }
        }
        if ((sub_2924( ref l_U488 )) == 1)
        {
            sub_36339();
            sub_36491( l_U387[2] );
            sub_1497( ref l_U506 );
        }
        if (l_U465 == 1)
        {
            if (l_U487 == 0)
            {
                if (sub_36737( ref l_U387, sub_747(), 0, 1, 1, 1, 1 ))
                {
                    sub_36491( l_U387[0] );
                    sub_36491( l_U387[1] );
                    l_U487 = 1;
                    sub_408( "CR", "MUSIC: Playing: PANAMA_FINAL, Mood: PANAMA_FINAL_2_6", 0 );
                    AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2_6", "PANAMA_FINAL_2_6", 0, 3000, -1, -1082130432, 0 );
                    sub_408( "CR", "Playing audio music one shot PANAMA_OS_4", 0 );
                    AUDIO_MUSIC_PLAY_ONESHOT();
                }
            }
        }
        if (l_U487 == 1)
        {
            if ((sub_2924( ref l_U497 )) == 1)
            {
                sub_37447();
            }
        }
        if ((sub_2924( ref l_U506 )) == 1)
        {
            sub_37848();
        }
        if (sub_38086( ref l_U387[0], 47, 1 ))
        {
            SET_PED_AS_ONE_SHOT_KILL( l_U387[0], 0 );
        }
        if (sub_38086( ref l_U387[1], 47, 1 ))
        {
            SET_PED_AS_ONE_SHOT_KILL( l_U387[1], 0 );
        }
        if (sub_38086( ref l_U387[2], 47, 1 ))
        {
            SET_PED_AS_ONE_SHOT_KILL( l_U387[2], 0 );
        }
        if (NOT l_U515)
        {
            if (((sub_35091( ref l_U521 )) > 0) || ((sub_38338( l_U572 )) || (sub_38338( l_U593 ))))
            {
                sub_38398();
                l_U515 = 1;
            }
        }
        else
        {
            sub_38589();
        }
        if (sub_38954( ref l_U217, 0 ))
        {
            sub_408( "CR", "MUSIC: Playing PANAMA_FINAL Mood: PANAMA_FINAL_2_3_6", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2_3_6", "PANAMA_FINAL_2_3_6", 0.00000000, 3000, -1, -1082130432, 0 );
        }
        if ((NOT (sub_10429( l_U761, l_U776 ))) AND (NOT (IS_PED_DEAD( l_U761 ))))
        {
            RESET_PED_TETHERING( l_U761 );
        }
        if (NOT l_U520)
        {
            if ((l_U487) || ((sub_38338( l_U572 )) || (sub_38338( l_U593 ))))
            {
                sub_408( "GA", "Player has activated the bar fight.", 0 );
                sub_39461();
                l_U520 = 1;
            }
        }
        else if ((sub_24849( ref l_U521, ref l_U525, -1, 1, 1, 0, 1 )) == 1)
        {
            sub_39849();
            sub_40528();
            sub_1497( ref l_U615 );
            sub_1497( ref l_U624 );
        }
        if (NOT l_U614)
        {
            if (sub_34882( ref l_U521, 1 ))
            {
                if ((sub_2924( ref l_U615 )) || ((IS_PED_DEAD( l_U761 )) || ((sub_35091( ref l_U521 )) > 0)))
                {
                    sub_40869();
                    l_U614 = 1;
                }
            }
        }
        if (sub_2924( ref l_U624 ))
        {
            sub_41171();
        }
        if ((sub_41550()) AND (NOT l_U797))
        {
            l_U797 = 1;
            sub_41655();
            sub_42066();
        }
        if (sub_42348( ref l_U633, sub_747(), 0 ))
        {
            sub_42446();
        }
        if ((sub_35769( ref l_U996, 0 )) == 1)
        {
            sub_42532( ref g_U835[6] );
            sub_42601( "SCRIPT_MISSION\S_PANA_REPEL_GMED_FWD", ref g_U3026 );
        }
        if (((sub_26638( l_U798, 0 )) == 0) AND (((IS_PED_DEAD( l_U761 )) == 1) AND (((sub_34869( ref l_U521, 1 )) == 1) AND ((sub_34869( ref l_U387, 1 )) == 1))))
        {
            sub_42532( ref g_U835[6] );
            sub_42601( "SCRIPT_MISSION\S_PANA_REPEL_GMED_FWD", ref g_U3026 );
            if (l_U358 == 0)
            {
                sub_408( "CR", "MUSIC: Playing: PANAMA_FINAL, Mood: PANAMA_FINAL_2", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2", "PANAMA_FINAL_2", 0.00000000, -1, 6000, -1082130432, 0 );
                sub_408( "CR", "Playing audio music one shot PANAMA_OS_2", 0 );
                AUDIO_MUSIC_PLAY_ONESHOT();
                sub_1497( ref l_U359 );
                l_U358 = 1;
            }
        }
        if ((NOT l_U368) AND (sub_2924( ref l_U359 )))
        {
            sub_33679( "SPAN_MKFEVR", ref g_U1246 );
            l_U368 = 1;
            sub_408( "CR", "Playing monologue - SPAN_MKFEVR - I was on a ghost ship, in a ghost canal...", 0 );
        }
        if ((sub_35769( ref l_U1017, 0 )) == 1)
        {
            sub_408( "GA", "Close the yacht door behind the player.", 0 );
            sub_43330( ref g_U3890[1], 0 );
            sub_43397( ref g_U3890[1], 1 );
            sub_22826( ref g_U3890[1], 0 );
            DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3890[1]._fU0, g_U3890[1]._fU4 ), 0 );
        }
        if (l_U1017._fU64)
        {
            if (NOT (DOOR_GET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3890[1]._fU0, g_U3890[1]._fU4 ) )))
            {
                DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3890[1]._fU0, g_U3890[1]._fU4 ), 0 );
            }
            uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( sub_747() )};
            if ((uVar3._fU0 > -8.40000000) || (sub_38338( l_U1017 )))
            {
                if (NOT (IS_SPHERE_VISIBLE( g_U3890[1]._fU4, 1.00000000, 0 )))
                {
                    sub_408( "SA", "Shutting 2nd Deck door.", 0 );
                    sub_22826( ref g_U3890[1], 1 );
                }
                if (sub_43733( g_U3890[1], 1008981770 ))
                {
                    sub_23032( ref g_U3890[1], 1 );
                    g_U1230[6] = 1;
                    l_U169 = 9;
                    sub_408( "GA", "eCheckpointState = CP_FINISHED", 0 );
                }
            }
        }
        break;
        case 9:
        if (g_U834 == 6)
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U169 = 0;
            sub_408( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    sub_44007();
    if (l_U169 != iVar2)
    {
        l_U170 = 1;
    }
    else
    {
        l_U170 = 0;
    }
    return;
}

void sub_10302()
{
    switch (l_U1038)
    {
        case 0:
        sub_408( "CCB", "eTakeABow - STATE_CHALLENGE_IDLE", 0 );
        l_U1038 = 1;
        break;
        case 1:
        if (l_U169 >= 8)
        {
            if (sub_10429( sub_747(), l_U1039 ))
            {
                if (SCRIPT_VAR_HASH_EXISTS( 256773409 ))
                {
                    sub_408( "CCB", "The player left the bow of the ship...", 0 );
                    SCRIPT_VAR_HASH_SET_INT( 256773409, 1 );
                }
                else
                {
                    sub_408( "CCB", "The TakeABow script variable is NOT valid!!!", 0 );
                }
                sub_408( "CCB", "eTakeABow - STATE_CHALLENGE_COMPLETE", 0 );
                l_U1038 = 2;
            }
        }
        break;
        case 2: break;
    }
    return;
}

int sub_10429(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

void sub_10861()
{
    sub_408( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U170 = 1;
    l_U465 = 0;
    l_U487 = 0;
    sub_1069( ref l_U488, 2000, 1, 0 );
    sub_1069( ref l_U497, 1500, 1, 0 );
    sub_1069( ref l_U506, 1500, 1, 0 );
    l_U515 = 0;
    l_U358 = 0;
    l_U368 = 0;
    sub_1069( ref l_U359, 2750, 1, 0 );
    l_U520 = 0;
    l_U614 = 0;
    sub_1069( ref l_U615, 10000, 1, 0 );
    sub_1069( ref l_U624, 3000, 1, 0 );
    l_U797 = 0;
    l_U759 = 0;
    sub_408( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

void sub_11109()
{
    sub_408( "GA", "P_SET_STATIC_DATA start", 0 );
    sub_11181( ref l_U370, l_U383, l_U386, -1013219818, 5, 2, 0, 0, 0 );
    sub_11181( ref l_U393[0], -58.06900000, -0.53700000, 4.30100000, 65446, 572100371, 7, 3, 2, 0, 0 );
    sub_11181( ref l_U393[1], -58.54400000, 8.12500000, 4.20600000, 65446, -501919160, 7, 3, 2, 0, 0 );
    sub_11181( ref l_U393[2], -55.82300000, 9.22700000, 4.37600000, 65446, 567034152, 7, 3, 2, 0, 0 );
    sub_11181( ref l_U393[3], -39.30000000, -4.52700000, 3.75000000, 90, 306406384, 7, 3, 2, 0, 0 );
    sub_11181( ref l_U393[4], -32.84100000, 12.54600000, 4.15000000, 90, -333100553, 7, 3, 2, 0, 0 );
    sub_11181( ref l_U525[0], -11.12809000, 2.46557700, 5.25403100, 78.72780000, -118136450, 7, 3, 2, 0, 0 );
    sub_11181( ref l_U525[1], -9.71000000, 7.13000000, 5.30000000, 111.14550000, 548293019, 7, 3, 2, 0, 0 );
    sub_11181( ref l_U525[2], -10.22000000, 0.31000000, 5.25000000, 84.93000000, -985197946, 7, 3, 2, 0, 0 );
    sub_11181( ref l_U762, -12.52352000, 9.64017600, 9.06201400, 90.00000000, 227068575, 7, 3, 2, 0, 0 );
    sub_11181( ref l_U799, -9.71000000, 8.63000000, 5.30000000, 84.93000000, 788843665, 7, 3, 2, 0, 0 );
    sub_11792( ref l_U466, "Trigger_Spawn_Grapple_Rebels", -42.73000000, 5.37000000, 2.08000000, 5.29000000, 7.73000000, 2.42000000, 0.00000000, 0.00000000, -34.00000000, 1 );
    sub_11792( ref l_U572, "Trigger_Spawn_Bar_RebelsL", -49.08000000, 7.47000000, 3.46000000, 2.70000000, 3.44000000, 2.42000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11792( ref l_U593, "Trigger_Spawn_Bar_RebelsR", -49.08000000, -0.16000000, 3.46000000, 2.70000000, 3.44000000, 2.42000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11792( ref l_U812[0], "Trigger_SpawnArea01", -16.99000000, 3.91000000, 5.04000000, 4.02000000, 2.77000000, 3.20000000, 0.00088825, 0.00000000, 0.00000000, 1 );
    sub_11792( ref l_U812[1], "Trigger_SpawnArea02", -11.82000000, 3.87000000, 5.04000000, 6.48000000, 10.26000000, 3.20000000, 0.00088825, 0.00000000, 0.00000000, 1 );
    sub_12212( ref l_U855, ref l_U812 );
    sub_11792( ref l_U633, "Trigger_Entered_Bar", -27.69000000, 3.92000000, 5.04000000, 3.69000000, 12.07000000, 3.20000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11792( ref l_U996, "Trigger_Start_3rdDeck", -33.06000000, 3.92000000, 4.97000000, 12.00000000, 24.42000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11792( ref l_U1017, "tb_2D_TopDeckArea", 2.28000000, 11.07000000, 4.77000000, 27.62000000, 3.26000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11792( ref l_U776, "tb2ND_RooftopRebel", -20.63000000, 3.98000000, 8.01000000, 20.23000000, 13.62000000, 3.20000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11792( ref l_U174[0], "tb2ND_MaxUpstairsLeft", -49.08000000, 7.47000000, 3.46000000, 2.70000000, 3.44000000, 2.42000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11792( ref l_U174[1], "tb2ND_MaxUpstairsRight", -49.08000000, -0.16000000, 3.46000000, 2.70000000, 3.44000000, 2.42000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_12212( ref l_U217, ref l_U174 );
    sub_11792( ref l_U654, "tbKillBox01", -36.49000000, 14.30000000, -0.50000000, 31.78000000, 6.42000000, 6.68000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11792( ref l_U675, "tbKillBox02", -36.51000000, -7.04000000, -0.50000000, 31.78000000, 6.42000000, 6.68000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11792( ref l_U696, "tbKillBox03", -62.30000000, -1.80000000, -0.50000000, 31.78000000, 6.42000000, 6.68000000, 0.00000000, 0.00000000, -20.74000000, 1 );
    sub_11792( ref l_U717, "tbKillBox04", -63.47000000, 9.38000000, -0.50000000, 31.78000000, 6.42000000, 6.68000000, 0.00000000, 0.00000000, 19.14000000, 1 );
    sub_13334( ref l_U516, "DeckTether", -37.65000000, 3.98000000, 5.14000000, 20.55000000, 13.23000000, 3.20000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_13334( ref l_U519, "GrappleTether", -54.14000000, 3.79000000, 4.04000000, 7.15000000, 7.90000000, 2.42000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_13334( ref l_U517, "LeftStairsTether", -49.31000000, 7.82000000, 4.04000000, 3.98000000, 2.30000000, 2.42000000, 0.00000000, 0.00000000, 16.00000000, 1 );
    sub_13334( ref l_U518, "RightStairsTether", -49.31000000, -0.23000000, 4.04000000, 3.90000000, 2.30000000, 2.42000000, 0.00000000, 0.00000000, -14.00000000, 1 );
    sub_13334( ref l_U571, "BarTether", -23.97000000, 3.98000000, 5.04000000, 7.23000000, 9.62000000, 3.20000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_13334( ref l_U775, "RoofTether", -27.63000000, 3.98000000, 8.01000000, 7.23000000, 9.62000000, 3.20000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_408( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

void sub_11181(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

void sub_11792(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_12212(int iParam0, unknown uParam1)
{
    int iVar4;
    int I;

    iVar4 = (uParam1^);
    if (iVar4 > 6)
    {
        sub_408( "[SA]", "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
        SCRIPT_ASSERT( "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
    }
    for ( I = 0; I < iVar4; I++ )
    {
        iParam0->_fU0[I] = {(uParam1^)[I]};
    }
    iParam0->_fU508 = iVar4;
    iParam0->_fU548 = 0;
    iParam0->_fU552 = 0;
    iParam0->_fU556 = 0;
    iParam0->_fU560 = 0;
    return;
}

void sub_13334(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_13793()
{
    sub_408( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
    l_U1038 = 0;
    sub_11792( ref l_U1039, "TRIGGER_TAKE_A_BOW", -54.97000000, 3.90000000, 2.95000000, 20.00000000, 12.00000000, 5.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    if (NOT (SCRIPT_VAR_HASH_EXISTS( 256773409 )))
    {
        sub_408( "CCB", "Creating the TakeABow script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( 256773409 );
        if (SCRIPT_VAR_HASH_EXISTS( 256773409 ))
        {
            sub_408( "CCB", "The TakeABow script variable was successfully created...", 0 );
        }
        else
        {
            sub_408( "CCB", "The TakeABow script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
        sub_408( "CCB", "The TakeABow script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( 256773409, 0 );
    }
    return;
}

void sub_14392()
{
    sub_408( "GA", "P_REQUEST_2D_PERSISTENT_ASSETS start", 0 );
    sub_14452();
    sub_16397( ref l_U161, ref g_U1588 );
    sub_17539( ref l_U166, ref g_U1829 );
    sub_18539( ref g_U3079, ref g_U3026 );
    sub_18539( "SCRIPT_MISSION\S_PANA_REPEL_GMED_FWD", ref g_U3026 );
    sub_14530( "LEVEL_S_PAN_CP_04", ref g_U1975 );
    sub_14530( "LEVEL_S_PAN_BOW", ref g_U1975 );
    sub_408( "GA", "P_REQUEST_2D_PERSISTENT_ASSETS end", 0 );
    return;
}

void sub_14452()
{
    sub_408( "CR", "P_GLOBAL_LOAD_PISTOL_ANIMS - Start", 0 );
    sub_14530( "NPC_PSTL_CORE", ref g_U1975 );
    sub_14530( "NPC_PSTL_COVER", ref g_U1975 );
    sub_14530( "NPC_PSTL_COVER_ENTER", ref g_U1975 );
    sub_14530( "NPC_PSTL_COVER_RELOAD", ref g_U1975 );
    sub_14530( "NPC_PSTL_DODGE", ref g_U1975 );
    sub_14530( "NPC_PSTL_FLAVOR", ref g_U1975 );
    sub_14530( "NPC_PSTL_FULLBODY", ref g_U1975 );
    sub_14530( "NPC_PSTL_RELOAD", ref g_U1975 );
    sub_14530( "NPC_PSTL_SEARCH", ref g_U1975 );
    sub_14530( "NPC_PSTL_STAIRS", ref g_U1975 );
    sub_14530( "NPC_PSTL_REACT", ref g_U1975 );
    sub_14530( "AMED_PSTL_PRONE", ref g_U1975 );
    sub_14530( "PLGE_PSTL_CROUCH", ref g_U1975 );
    sub_14530( "PLGE_PSTL_CORE", ref g_U1975 );
    sub_14530( "PLGE_PSTL_CORE_RELOAD", ref g_U1975 );
    sub_14530( "PLGE_PSTL_HANDSIG", ref g_U1975 );
    sub_14530( "PLGE_PSTL_ACTIONS", ref g_U1975 );
    sub_14530( "PLGE_PSTL_KNEE", ref g_U1975 );
    sub_14530( "PLGE_PSTL_COVER", ref g_U1975 );
    sub_14530( "PLGE_PSTL_REACT", ref g_U1975 );
    sub_14530( "PLGE_PSTL_COVER_EXIT", ref g_U1975 );
    sub_408( "CR", "P_GLOBAL_LOAD_PISTOL_ANIMS - End", 0 );
    return;
}

void sub_14530(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_14551( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
        sub_14688( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_14551(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                sub_14688( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                sub_14688( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    sub_14688( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                    sub_15359( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                sub_14688( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
            sub_14688( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_14688(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_14710( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

int sub_14710(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            if ((uParam1^)[I] == iParam0)
            {
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
        else
        {
            (uParam1^)[I] = nil;
            Result = I;
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

void sub_15359(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

void sub_16397(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_16432( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_16432(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 = sub_16467( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
            sub_16598( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

int sub_16467(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                sub_16598( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                sub_16598( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    sub_16598( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_15359( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                sub_16598( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_16598( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_16598(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_14710( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_17539(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_17574( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_17574(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_17595( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
        sub_17727( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_17595(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                sub_17727( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                sub_17727( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    sub_17727( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_15359( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                sub_17727( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_17727( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_17727(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_14710( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_18539(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_18560( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
        sub_18698( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_18560(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                sub_18698( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                sub_18698( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    sub_18698( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                    sub_15359( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                sub_18698( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
            sub_18698( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_18698(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_14710( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_19686()
{
    sub_408( "GA", "P_REQUEST_2D_NONPERSISTENT_ASSETS start", 0 );
    sub_19758( -396548175, ref g_U1878 );
    sub_19758( 505353008, ref g_U1878 );
    sub_19758( 2061552818, ref g_U1878 );
    sub_19758( 1082972171, ref g_U1878 );
    sub_19758( 797357567, ref g_U1878 );
    sub_19758( -890990590, ref g_U1878 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_4", 0 );
    sub_408( "GA", "P_REQUEST_2D_NONPERSISTENT_ASSETS end", 0 );
    return;
}

void sub_19758(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 = sub_19793( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
            sub_19945( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

int sub_19793(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                sub_19945( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                sub_19945( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        sub_19945( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                        sub_19945( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        sub_15359( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        sub_15359( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                sub_19945( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                sub_19945( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_19945(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_14710( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

int sub_21905(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_22025(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_22146(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_22273(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

int sub_22464(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

void sub_22826(int iParam0, int iParam1)
{
    if ((sub_22838( iParam0 )) == 0)
    {
        sub_22904( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

int sub_22838(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_22904(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

void sub_23032(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if ((sub_22838( iParam0 )) == 0)
    {
        sub_22904( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

int sub_23216(unknown uParam0)
{
    sub_408( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
            sub_6037( uParam0, sub_747() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

void sub_23732(int iParam0, int iParam1)
{
    sub_408( "MF", "P_GLOBAL_CREATE_LOCKS start", "###" );
    sub_23793( g_U4167 );
    g_U4167 = sub_23862( g_U1583, g_U4168, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4167 ))
    {
        FREEZE_OBJECT_POSITION( g_U4167, 1 );
        if (iParam0 == 1)
        {
            PLAY_OBJECT_ANIM( g_U4167, "P_LockGate", "pa_doors", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( g_U4167, "P_LockGate", "pa_doors", 1.00000000 );
        }
    }
    sub_23793( g_U4171 );
    g_U4171 = sub_23862( g_U1583, g_U4172, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U4171 )) == 1)
    {
        FREEZE_OBJECT_POSITION( g_U4171, 1 );
        if (iParam1 == 1)
        {
            PLAY_OBJECT_ANIM( g_U4171, "P_LockGate", "pa_doors", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( g_U4171, "P_LockGate", "pa_doors", 1.00000000 );
        }
    }
    sub_408( "MF", "P_GLOBAL_CREATE_LOCKS end", "###" );
    return;
}

void sub_23793(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

void sub_23862(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
        sub_23972( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

void sub_23972(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
        sub_7906( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_24595()
{
    sub_408( "MF", "P_CREATE_PICKUPS start", 0 );
    l_U173 = sub_24685( -4072149, -12.90000000, 6.30000000, 5.88000000, 0.00000000, 0.00000000, 70.00000000, 1, 1, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U173, ref g_U3287 );
    sub_408( "MF", "P_CREATE_PICKUPS end", 0 );
    return;
}

void sub_24685(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    return Result;
}

int sub_24849(unknown uParam0, unknown uParam1, int iParam2, boolean bParam3, boolean bParam4, int iParam5, unknown uParam6)
{
    int iVar9;
    int iVar10;
    int Result;

    iVar9 = sub_24863( uParam0, uParam1 );
    if (iParam2 == -1)
    {
        iVar10 = (uParam0^);
    }
    else
    {
        iVar10 = iParam2;
    }
    if (iVar9 < iVar10)
    {
        if ((uParam1^)[iVar9]._fU16 == 0)
        {
            SCRIPT_ASSERT( "Invalid Ped Struct!  No Model Defined! Aborting Ped Spawn", 0 );
            sub_408( "MF", "Invalid Ped Struct!  No Model Defined! Aborting Ped Spawn", 0 );
            sub_25162( iVar9 );
            return 0;
        }
        if (NOT (DOES_PED_EXIST( (uParam0^)[iVar9] )))
        {
            sub_23972( (uParam1^)[iVar9]._fU16, uParam6 );
            (uParam0^)[iVar9] = sub_25229( ref (uParam1^)[iVar9] );
            if (NOT bParam4)
            {
                SET_PED_VISIBLE( (uParam0^)[iVar9], bParam4 );
                sub_7906( "SPAWNING INVISIBLE PED!!!" );
            }
            if (iParam5 == 1)
            {
                sub_25963( (uParam0^)[iVar9] );
                sub_7906( "Deactivating Ped..." );
            }
        }
    }
    if (bParam3)
    {
        if (iVar9 == (iVar10 - 1))
        {
            sub_408( "MF", "F_HANDLE_PED_ARRAY_SPAWN: Returning true Once.  If you see this looping, you likely have unitialized ped model data in your pedstruct array.", 0 );
            Result = 1;
        }
        return Result;
    }
    else if (iVar9 >= iVar10)
    {
        return 1;
    }
    return 0;
}

void sub_24863(unknown uParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = (uParam1^);
    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (DOES_PED_EXIST( (uParam0^)[I] )))
        {
            if ((uParam1^)[I]._fU16 != 0)
            {
                if (I < Result)
                {
                    Result = I;
                }
            }
        }
    }
    return Result;
}

void sub_25162(unknown uParam0)
{
    return;
}

void sub_25229(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
        sub_23972( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
    sub_25708( iParam0->_fU40 );
    sub_25788( iParam0->_fU40 );
    return iParam0->_fU40;
}

void sub_25708(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

void sub_25788(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

void sub_25963(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

void sub_26307()
{
    int I;

    sub_26327( ref l_U459, 1.00000000, 0 );
    sub_26518( ref l_U387, "Rappeller - " );
    for ( I = 0; I < l_U387; I++ )
    {
        if (sub_26638( l_U387[I], 0 ))
        {
            sub_26759( l_U387[I], ref l_U459 );
            SET_PED_ALERTNESS( l_U387[I], 3 );
            SET_PED_DIES_INSTANTLY_IN_WATER( l_U387[I], 1 );
            sub_27062( ref l_U387[I] );
        }
    }
    if (sub_26638( l_U387[0], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U387[0], ref g_U1488 );
        SET_PED_COMBAT_RANGE_MIN( l_U387[0], 7 );
        SET_PED_COMBAT_RANGE_MAX( l_U387[0], 15 );
        SET_PED_COMBAT_MOVEMENT( l_U387[0], 1 );
        sub_8235( l_U387[0], -612753081, 25000, 0, 0 );
        SET_PED_AS_ONE_SHOT_KILL( l_U387[0], 1 );
    }
    if (sub_26638( l_U387[1], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U387[1], ref g_U1504 );
        SET_PED_COMBAT_RANGE_MIN( l_U387[1], 5 );
        SET_PED_COMBAT_RANGE_MAX( l_U387[1], 15 );
        SET_PED_COMBAT_MOVEMENT( l_U387[1], 1 );
        sub_8235( l_U387[1], -1404433099, 25000, 0, 0 );
        SET_PED_AS_ONE_SHOT_KILL( l_U387[1], 1 );
    }
    if (sub_26638( l_U387[2], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U387[2], ref g_U1480 );
        SET_PED_COMBAT_RANGE_MIN( l_U387[2], 4 );
        SET_PED_COMBAT_RANGE_MAX( l_U387[2], 6 );
        SET_PED_COMBAT_MOVEMENT( l_U387[2], 2 );
        sub_8235( l_U387[2], -1404433099, 25000, 0, 0 );
        SET_PED_AS_ONE_SHOT_KILL( l_U387[2], 1 );
    }
    if (sub_26638( l_U387[3], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U387[3], ref g_U1488 );
        SET_PED_COMBAT_RANGE_MIN( l_U387[3], 7 );
        SET_PED_COMBAT_RANGE_MAX( l_U387[3], 15 );
        sub_8235( l_U387[3], -612753081, 25000, 0, 0 );
        SET_PED_AS_ONE_SHOT_KILL( l_U387[3], 1 );
        SET_PED_PRIMARY_LOOKAT( l_U387[3], sub_747() );
    }
    if (sub_26638( l_U387[4], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U387[4], ref g_U1488 );
        SET_PED_COMBAT_RANGE_MIN( l_U387[4], 7 );
        SET_PED_COMBAT_RANGE_MAX( l_U387[4], 15 );
        sub_8235( l_U387[4], -1404433099, 25000, 0, 0 );
        SET_PED_AS_ONE_SHOT_KILL( l_U387[4], 1 );
    }
    ISEQ_REGISTER_ENTITY( -396548175, "s_pan_rappel_gmed1", l_U387[0], 0 );
    ISEQ_REGISTER_ENTITY( 505353008, "s_pan_rappel_gmed2", l_U387[1], 0 );
    ISEQ_REGISTER_ENTITY( 2061552818, "s_pan_rappel_gmed3", l_U387[2], 0 );
    ISEQ_REGISTER_ENTITY( 1082972171, "s_pan_rappel_gmed1", l_U387[3], 0 );
    ISEQ_REGISTER_ENTITY( 797357567, "s_pan_rappel_gmed1", l_U387[4], 0 );
    ISEQ_START( -396548175 );
    ISEQ_START( 505353008 );
    ISEQ_START( 2061552818 );
    ISEQ_START( 1082972171 );
    ISEQ_START( 797357567 );
    sub_5743( l_U387[0], l_U393[0]._fU0, l_U393[0]._fU12 );
    sub_5743( l_U387[1], l_U393[1]._fU0, l_U393[1]._fU12 );
    sub_5743( l_U387[2], l_U393[2]._fU0, l_U393[2]._fU12 );
    sub_5743( l_U387[3], l_U393[3]._fU0, l_U393[3]._fU12 );
    sub_5743( l_U387[4], l_U393[4]._fU0, l_U393[4]._fU12 );
    sub_28299( ref l_U387 );
    return;
}

void sub_26327(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
        }
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

void sub_26518(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

void sub_26638(unknown uParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((DOES_PED_EXIST( uParam0 )) == 1)
    {
        Result = 1;
    }
    else
    {
        Result = 0;
    }
    if (Result == 1)
    {
        if ((IS_PED_DEAD( uParam0 )) == 1)
        {
            if (iParam1 == 1)
            {
                Result = 1;
            }
            else
            {
                Result = 0;
            }
        }
        else
        {
            Result = 1;
        }
    }
    return Result;
}

void sub_26759(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
        sub_7906( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
            sub_26327( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
            sub_26327( iParam1, 1056964608, 0 );
        }
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

void sub_27062(unknown uParam0)
{
    sub_27080( ref l_U571, (uParam0^), 1 );
    sub_27080( ref l_U516, (uParam0^), 1 );
    sub_27080( ref l_U517, (uParam0^), 1 );
    sub_27080( ref l_U518, (uParam0^), 1 );
    sub_27080( ref l_U519, (uParam0^), 1 );
    return;
}

void sub_27080(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

void sub_28299(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_25963( (uParam0^)[I] );
    }
    return;
}

void sub_28508(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

    sub_408( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
        sub_408( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
        sub_8889( iParam1 );
        sub_28767( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
            sub_29218( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
            sub_29218( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_29450( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
            sub_29218( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_29450( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_29450( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
            sub_29218( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_29450( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_29450( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_29450( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
            sub_29218( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_29450( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_29450( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_29450( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if (sub_29450( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
            sub_31008( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
    sub_408( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

void sub_28767(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 = sub_6253( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
        sub_408( "TEH", "Ending context", 0 );
        sub_408( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

void sub_29218(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

void sub_29450(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

void sub_31008(int iParam0)
{
    sub_7906( "CHECKPOINT DATA" );
    sub_31047( iParam0->_fU4 );
    sub_31070( iParam0->_fU16 );
    sub_31070( iParam0->_fU20 );
    sub_31070( iParam0->_fU24 );
    sub_25162( iParam0->_fU28 );
    sub_25162( iParam0->_fU56 );
    sub_25162( iParam0->_fU60 );
    sub_25162( iParam0->_fU64 );
    sub_25162( iParam0->_fU68 );
    sub_25162( iParam0->_fU72 );
    sub_25162( iParam0->_fU76 );
    sub_25162( iParam0->_fU80 );
    sub_25162( iParam0->_fU84 );
    sub_25162( iParam0->_fU88 );
    sub_25162( iParam0->_fU92 );
    sub_31070( iParam0->_fU32 );
    sub_25162( iParam0->_fU36 );
    sub_25162( iParam0->_fU40 );
    sub_25162( iParam0->_fU44 );
    sub_31070( iParam0->_fU136 );
    sub_31305( iParam0->_fU140 );
    sub_25162( iParam0->_fU52 );
    sub_7906( "---nRightHolsterAttachmentEnabled: " );
    sub_25162( iParam0->_fU96 );
    sub_7906( "---nRightHolsterAttachmentToggled: " );
    sub_25162( iParam0->_fU100 );
    sub_7906( "---nLeftHolsterAttachmentEnabled: " );
    sub_25162( iParam0->_fU104 );
    sub_7906( "---nLeftHolsterAttachmentToggled: " );
    sub_25162( iParam0->_fU108 );
    sub_7906( "---nRifleHolsterAttachmentEnabled: " );
    sub_25162( iParam0->_fU112 );
    sub_7906( "---nRifleHolsterAttachmentToggled: " );
    sub_25162( iParam0->_fU116 );
    sub_7906( "---nRightHandAttachmentEnabled: " );
    sub_25162( iParam0->_fU120 );
    sub_7906( "---nRightHandAttachmentToggled: " );
    sub_25162( iParam0->_fU124 );
    sub_7906( "---nLeftHandAttachmentEnabled: " );
    sub_25162( iParam0->_fU128 );
    sub_7906( "---nLeftHandAttachmentToggled: " );
    sub_25162( iParam0->_fU132 );
    sub_25162( l_U1 );
    sub_25162( 144 );
    return;
}

void sub_31047(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return;
}

void sub_31070(unknown uParam0)
{
    return;
}

void sub_31305(boolean bParam0)
{
    if (bParam0)
    {
        ;
    }
    return;
}

void sub_32109()
{
    sub_408( "MF", "P_GLOBAL_LOCK_2_GATES_OPEN: START", 0 );
    if (DOES_OBJECT_EXIST( g_U4171 ))
    {
        PLAY_OBJECT_ANIM( g_U4171, "P_LockGate", "pa_doors", 0.00000000, 0, 1 );
        SET_OBJECT_ANIM_CURRENT_TIME( g_U4171, "P_LockGate", "pa_doors", 0.00000000 );
        SET_OBJECT_ANIM_SPEED( g_U4171, "P_LockGate", "pa_doors", 1.00000000 );
        START_PARTICLE_FX_NON_LOOPED_ON_OBJECT( "Pana_Water_LockGate_01_S", g_U4171, 0.00000000, 0.00000000, -1.39000000, 0.00000000, 0.00000000, 0.00000000, 1.00000000 );
        sub_4229( g_U4175, 0 );
        sub_4392( ref g_U4175 );
        g_U4175 = GET_SOUND_ID();
        PLAY_SOUND_FROM_OBJECT( g_U4175, "CANAL_LOCK", g_U4171 );
        g_U4177 = 1;
    }
    sub_408( "MF", "P_GLOBAL_LOCK_2_GATES_OPEN: END", 0 );
    return;
}

void sub_32514()
{
    sub_408( "CCB", "P_START_SP_CHALLENGES", 0 );
    sub_408( "CCB", "Starting the Panama_Second_Deck context...", 0 );
    START_CONTEXT( "Panama_Second_Deck" );
    return;
}

void sub_32721()
{
    sub_408( "MF", "P_CREATE_DEAD_HOTTUB_BODY - START", 0 );
    l_U369 = sub_25229( ref l_U370 );
    if (sub_26638( l_U369, 0 ))
    {
        ISEQ_REGISTER_ENTITY( -890990590, "DeadGirl", l_U369, 0 );
        ISEQ_START( -890990590 );
        ENABLE_PED_PAIN( l_U369, 0 );
        SET_PED_INVINCIBLE( l_U369, 1 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U369, 1 );
        FREEZE_PED_POSITION( l_U369, 1 );
        SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( l_U369, 1 );
        STOP_PED_SPEAKING( l_U369, 1 );
        SET_PED_CAN_BE_TARGETTED( l_U369, 0 );
        SET_FREEZE_PED_AIM( l_U369, 1 );
        SET_PED_COLLISION( l_U369, 0 );
        SET_PED_AIM_LOCKONABLE( l_U369, 0 );
        SET_PED_BLOODSPRAY_ENABLE( l_U369, 0 );
    }
    sub_408( "MF", "P_CREATE_DEAD_HOTTUB_BODY - END", 0 );
    return;
}

void sub_33046()
{
    sub_408( "CR", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - START", 0 );
    g_U4062 = GET_PAYNEKILLER_AMT();
    sub_408( "CR", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - END", 0 );
    return;
}

void sub_33207(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_33244( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

void sub_33244(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                sub_5158( uParam0 );
            }
        }
    }
    return;
}

void sub_33404()
{
    if (NOT (sub_2796( ref g_U4052 )))
    {
        sub_33438( ref g_U4052, g_U4061 );
    }
    if (((g_U4052._fU16) || (sub_2924( ref g_U4052 ))) AND (sub_33474()))
    {
        sub_408( "MF", "Playing Speech: SPAN_MXFNDS1", 0 );
        sub_33679( ref g_U4063, ref g_U1246 );
        sub_3461( ref g_U4052 );
    }
    return;
}

void sub_33438(unknown uParam0, unknown uParam1)
{
    sub_1069( uParam0, uParam1, 1, 0 );
    sub_1497( uParam0 );
    return;
}

int sub_33474()
{
    if (GET_PAYNEKILLER_AMT() > g_U4062)
    {
        sub_408( "CR", "Player picked up Payne Killers!", 0 );
        sub_25162( g_U4062 );
        sub_25162( GET_PAYNEKILLER_AMT() );
        g_U4062 = GET_PAYNEKILLER_AMT();
        return 1;
    }
    g_U4062 = GET_PAYNEKILLER_AMT();
    return 0;
}

void sub_33679(unknown uParam0, unknown uParam1)
{
    sub_33691( uParam1 );
    sub_33771( 0, sub_747(), "MAX", uParam1, 2, 0 );
    sub_33771( 1, sub_747(), "MAX", uParam1, 2, 0 );
    sub_33996( uParam0, uParam1, 8, 1 );
    return;
}

void sub_33691(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

void sub_33771(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

void sub_33996(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return sub_34020( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

void sub_34020(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return sub_34075( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

int sub_34075(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT (sub_34110( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
    sub_34604( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

int sub_34110(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

void sub_34604(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

void sub_34801()
{
    if ((IS_PED_DEAD( l_U798 )) AND ((sub_34869( ref l_U387, 0 )) AND (sub_34815( ref l_U761 ))))
    {
        sub_35234( ref l_U521 );
        AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_2", 0 );
    }
    if ((IS_PED_DEAD( l_U798 )) AND ((sub_34869( ref l_U387, 0 )) AND (sub_34869( ref l_U521, 0 ))))
    {
        if (sub_26638( l_U761, 0 ))
        {
            SET_PED_CAN_TRIGGER_BULLET_CAM( l_U761, 1 );
            AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_2", 0 );
        }
    }
    if ((IS_PED_DEAD( l_U798 )) AND ((sub_34815( ref l_U761 )) AND (sub_34869( ref l_U521, 0 ))))
    {
        sub_35234( ref l_U387 );
        AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_2", 0 );
    }
    if ((sub_34815( ref l_U761 )) AND ((sub_34869( ref l_U387, 0 )) AND (sub_34869( ref l_U521, 0 ))))
    {
        if (sub_26638( l_U798, 0 ))
        {
            SET_PED_CAN_TRIGGER_BULLET_CAM( l_U798, 1 );
            AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_2", 0 );
        }
    }
    return;
}

int sub_34815(unknown uParam0)
{
    if ((IS_PED_DEAD( (uParam0^) )) AND (DOES_PED_EXIST( (uParam0^) )))
    {
        return 1;
    }
    return 0;
}

int sub_34869(unknown uParam0, boolean bParam1)
{
    if ((sub_34882( uParam0, 0 )) == 1)
    {
        if (NOT bParam1)
        {
            if ((sub_34991( uParam0 )) == 0)
            {
                return 1;
            }
        }
        if (bParam1)
        {
            if ((sub_35091( uParam0 )) == (uParam0^))
            {
                return 1;
            }
        }
    }
    return 0;
}

void sub_34882(unknown uParam0, boolean bParam1)
{
    int I;
    int Result;

    Result = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if ((DOES_PED_EXIST( (uParam0^)[I] )) == 1)
        {
            Result = 1;
            if (NOT bParam1)
            {
                return 1;
            }
        }
        else
        {
            Result = 0;
        }
    }
    return Result;
}

void sub_34991(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

void sub_35091(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            if (IS_PED_DEAD( (uParam0^)[I] ))
            {
                Result++;
            }
        }
    }
    return Result;
}

void sub_35234(unknown uParam0)
{
    int I;

    if ((sub_34991( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

void sub_35769(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 = sub_10429( sub_747(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

void sub_35870()
{
    sub_408( "MF", "P_2ND_GRAPPLE_REBEL_A_CLIMB: START", 0 );
    sub_35936( l_U387[0] );
    sub_36047( l_U387[0], 47, 1000 );
    sub_408( "MF", "P_2ND_GRAPPLE_REBEL_A_CLIMB: END", 0 );
    return;
}

void sub_35936(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

void sub_36047(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        PED_SET_ACTION_INTENTION( uParam0, uParam1, uParam2, l_U52 );
    }
    return;
}

void sub_36153()
{
    sub_408( "MF", "P_2ND_GRAPPLE_REBEL_B_CLIMB: START", 0 );
    sub_35936( l_U387[1] );
    sub_36047( l_U387[1], 47, 1000 );
    sub_408( "MF", "P_2ND_GRAPPLE_REBEL_B_CLIMB: START", 0 );
    return;
}

void sub_36339()
{
    sub_408( "MF", "P_2ND_GRAPPLE_REBEL_C_CLIMB: START", 0 );
    sub_35936( l_U387[2] );
    sub_36047( l_U387[2], 47, 1000 );
    sub_408( "MF", "P_2ND_GRAPPLE_REBEL_C_CLIMB: END", 0 );
    return;
}

void sub_36491(unknown uParam0)
{
    unknown uVar3;

    sub_408( "MF", "P_2ND_GRAPPLE_REBELS_ATTACK - START", 0 );
    OPEN_SEQUENCE_TASK( ref uVar3 );
    TASK_SHOOT_AT_PED( 0, sub_747(), 2000, 0, 0, 0, 0 );
    TASK_COMBAT_PED( 0, sub_747() );
    CLOSE_SEQUENCE_TASK( uVar3 );
    if ((sub_26638( uParam0, 0 )) == 1)
    {
        TASK_PERFORM_SEQUENCE( uParam0, uVar3 );
    }
    CLEAR_SEQUENCE_TASK( uVar3 );
    sub_408( "MF", "P_2ND_GRAPPLE_REBELS_ATTACK - END", 0 );
    return;
}

int sub_36737(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if ((sub_36782( ref (uParam0^)[I], uParam1, uParam2, uParam3, uParam4, uParam5, uParam6 )) == 1)
        {
            return 1;
        }
    }
    return 0;
}

int sub_36782(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, int iParam6)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        if ((uParam3) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 1 )))
        {
            if (iParam6 == 1)
            {
                sub_408( "MF", "ped has SEEN target ped", 0 );
            }
            return 1;
        }
        else if ((uParam4) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 8 )))
        {
            if (iParam6 == 1)
            {
                sub_408( "MF", "ped has BEEN SHOT AT by target ped", 0 );
            }
            return 1;
        }
        else if ((uParam2) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 2 )))
        {
            if (iParam6 == 1)
            {
                sub_408( "MF", "ped has HEARD target ped", 0 );
            }
            return 1;
        }
        else if ((uParam5) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 4 )))
        {
            if (iParam6 == 1)
            {
                sub_408( "MF", "ped has BEEN TOLD ABOUT target ped", 0 );
            }
            return 1;
        };;;;
    }
    return 0;
}

void sub_37447()
{
    sub_408( "MF", "P_2ND_GRAPPLE_REBELS_A_B_SPEECH: START", 0 );
    sub_37514( ref g_U1246, 0 );
    sub_33691( ref g_U1246 );
    sub_33771( 1, l_U387[0], "M11_REBL_19_Avg", ref g_U1246, 2, 0 );
    sub_33771( 2, l_U387[1], "M11_REBL_20_Mus", ref g_U1246, 2, 0 );
    sub_33996( "SPAN_VIG072A", ref g_U1246, 8, 1 );
    sub_408( "MF", "P_2ND_GRAPPLE_REBELS_A_B_SPEECH: END", 0 );
    return;
}

void sub_37514(int iParam0, unknown uParam1)
{
    if (NOT (sub_37528( (iParam0^) )))
    {
        ;
    }
    else if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (iParam0->_fU8 == g_U6[iParam0->_fU4])
        {
            STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
        }
    }
    return;
}

boolean sub_37528(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

void sub_37848()
{
    sub_408( "MF", "P_2ND_GRAPPLE_REBELS_A_B_SPEECH: START", 0 );
    sub_37514( ref g_U1246, 0 );
    sub_33691( ref g_U1246 );
    sub_33771( 0, l_U387[2], "M11_REBL_18_Mus", ref g_U1246, 2, 0 );
    sub_33771( 1, sub_747(), "MAX", ref g_U1246, 2, 0 );
    sub_33996( "SPAN_VIG071A", ref g_U1246, 8, 1 );
    sub_408( "MF", "P_2ND_GRAPPLE_REBELS_A_B_SPEECH: END", 0 );
    return;
}

int sub_38086(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if ((sub_38101( (uParam0^), uParam1 )) == 1)
    {
        if (bParam2)
        {
            sub_38167( uParam0, uParam1 );
        }
        return 1;
    }
    return 0;
}

int sub_38101(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return PED_GET_ACTION_INTENTION_STATUS( uParam0, uParam1 );
    }
    return 0;
}

void sub_38167(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        PED_FINISH_ACTION_INTENTION( (uParam0^), uParam1 );
    }
    return;
}

void sub_38338(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return sub_10429( sub_747(), uParam0 );
}

void sub_38398()
{
    sub_408( "GA", "P_2ND_START_GRAPPLE_REBELS_D_E start", 0 );
    sub_35936( l_U387[3] );
    sub_36047( l_U387[3], 47, 1000 );
    sub_35936( l_U387[4] );
    sub_36047( l_U387[4], 47, 1000 );
    sub_408( "GA", "P_2ND_START_GRAPPLE_REBELS_D_E end", 0 );
    return;
}

void sub_38589()
{
    if (NOT (IS_PED_DEAD( sub_747() )))
    {
        if (NOT (IS_PED_DEAD( l_U387[3] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U387[3], 48 )) == 3)
            {
                sub_408( "GA", "Repel D combat player", 0 );
                SET_PED_AS_ONE_SHOT_KILL( l_U387[3], 0 );
                REGISTER_TARGET( l_U387[3], sub_747() );
                TASK_SHOOT_AT_PED( l_U387[3], sub_747(), 2000, 0, 0, 0, 0 );
                PED_FINISH_ACTION_INTENTION( l_U387[3], 48 );
            }
        }
        if (NOT (IS_PED_DEAD( l_U387[4] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U387[4], 48 )) == 3)
            {
                sub_408( "GA", "Repel E combat player", 0 );
                SET_PED_AS_ONE_SHOT_KILL( l_U387[4], 0 );
                REGISTER_TARGET( l_U387[4], sub_747() );
                TASK_SHOOT_AT_PED( l_U387[4], sub_747(), 2000, 0, 0, 0, 0 );
                PED_FINISH_ACTION_INTENTION( l_U387[4], 48 );
            }
        }
    }
    return;
}

void sub_38954(int iParam0, unknown uParam1)
{
    if (iParam0->_fU548)
    {
        return 0;
    }
    else
    {
        iParam0->_fU548 = sub_38989( iParam0, uParam1 );
    }
    return iParam0->_fU548;
}

void sub_38989(int iParam0, unknown uParam1)
{
    int Result;
    int I;
    int J;

    Result = 0;
    if (NOT (IS_PED_DEAD( sub_747() )))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            if (sub_38338( iParam0->_fU0[I] ))
            {
                Result = 1;
            }
        }
    }
    if ((uParam1) AND (Result))
    {
        for ( J = 0; J < iParam0->_fU508; J++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[J]._fU0, 0 );
        }
    }
    iParam0->_fU548 = 1;
    return Result;
}

void sub_39461()
{
    unknown uVar2;

    sub_408( "MF", "P_2ND_ROOFTOP_REBEL_START: START", 0 );
    l_U761 = sub_25229( ref l_U762 );
    OPEN_SEQUENCE_TASK( ref uVar2 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
    TASK_FOLLOW_NAV_MESH_TO_COORD( 0, -24.69212000, 4.05878800, 8.88159800, 3, 20000, 1048576000, 0, 0 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    TASK_COMBAT_PED( 0, sub_747() );
    CLOSE_SEQUENCE_TASK( uVar2 );
    if (sub_26638( l_U761, 0 ))
    {
        sub_8235( l_U761, -612753081, 25000, 0, 0 );
        SET_PED_ALERTNESS( l_U761, 3 );
        SET_PED_AI_TEMPLATE( l_U761, ref g_U1480 );
        SET_PED_COMBAT_RANGE_MIN( l_U761, 7 );
        SET_PED_COMBAT_RANGE_MAX( l_U761, 40 );
        SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U761, 1 );
        sub_27080( ref l_U775, l_U761, 1 );
        TASK_PERFORM_SEQUENCE( l_U761, uVar2 );
    }
    CLEAR_SEQUENCE_TASK( uVar2 );
    sub_408( "MF", "P_2ND_ROOFTOP_REBEL_START: END", 0 );
    return;
}

void sub_39849()
{
    int I;

    sub_408( "MF", "P_2ND_BAR_REBELS_SETUP: START", 0 );
    sub_26327( ref l_U565, 1.00000000, 0 );
    sub_26518( ref l_U521, "pi2ND_BarRebels" );
    for ( I = 0; I < l_U521; I++ )
    {
        if (sub_26638( l_U521[I], 0 ))
        {
            sub_26759( l_U521[I], ref l_U565 );
            SET_PED_ALERTNESS( l_U521[I], 3 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U521[I], 1 );
            if ((sub_26638( sub_747(), 0 )) == 1)
            {
                REGISTER_TARGET( l_U521[I], sub_747() );
            }
            SET_ROOM_FOR_PED_BY_NAME( l_U521[I], ref g_U3287 );
            REGISTER_TARGET( l_U521[I], sub_747() );
        }
    }
    if (sub_26638( l_U521[0], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U521[0], ref g_U1488 );
        SET_PED_COMBAT_RANGE_MIN( l_U521[0], 10 );
        SET_PED_COMBAT_RANGE_MAX( l_U521[0], 15 );
        sub_8235( l_U521[0], -612753081, 25000, 0, 0 );
    }
    if (sub_26638( l_U521[1], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U521[1], ref g_U1472 );
        SET_PED_COMBAT_RANGE_MIN( l_U521[1], 6 );
        SET_PED_COMBAT_RANGE_MAX( l_U521[1], 17 );
        sub_8235( l_U521[1], -612753081, 25000, 0, 0 );
        sub_27080( ref l_U571, l_U521[1], 3 );
        SET_PED_FREEZE_PROCESSING( l_U521[1], 1 );
    }
    if (sub_26638( l_U521[2], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U521[2], ref g_U1472 );
        SET_PED_COMBAT_RANGE_MIN( l_U521[2], 5 );
        SET_PED_COMBAT_RANGE_MAX( l_U521[2], 17 );
        sub_8235( l_U521[2], -612753081, 25000, 0, 0 );
        sub_27080( ref l_U571, l_U521[2], 1 );
        SET_PED_FREEZE_PROCESSING( l_U521[2], 1 );
    }
    sub_408( "MF", "P_2ND_BAR_REBELS_SETUP: END", 0 );
    return;
}

void sub_40528()
{
    unknown uVar2;
    unknown uVar3;

    sub_408( "MF", "P_2ND_BAR_REBELS_FIRST_WAVE_ATTACK: START", 0 );
    OPEN_SEQUENCE_TASK( ref uVar3 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
    TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, -31.58000000, 8.40000000, 5.30000000, sub_747(), 3, 1, 1056964608, 0, 1, 0 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    TASK_COMBAT_PED( 0, sub_747() );
    CLOSE_SEQUENCE_TASK( uVar3 );
    if (sub_26638( l_U521[0], 0 ))
    {
        TASK_PERFORM_SEQUENCE( l_U521[0], uVar3 );
    }
    CLEAR_SEQUENCE_TASK( uVar3 );
    sub_408( "MF", "P_2ND_BAR_REBELS_FIRST_WAVE_ATTACK: END", 0 );
    return;
}

void sub_40869()
{
    int I;

    sub_408( "GA", "P_2ND_BAR_FIGHT_HAS_STARTED start", 0 );
    for ( I = 0; I < l_U521; I++ )
    {
        sub_40951( l_U521[I] );
    }
    sub_41024( ref l_U521[0] );
    sub_41024( ref l_U521[1] );
    sub_27080( ref l_U571, l_U521[2], 1 );
    sub_408( "GA", "P_2ND_BAR_FIGHT_HAS_STARTED end", 0 );
    return;
}

void sub_40951(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        RESET_PED_TETHERING( uParam0 );
    }
    return;
}

void sub_41024(unknown uParam0)
{
    sub_27080( ref l_U571, (uParam0^), 1 );
    sub_27080( ref l_U516, (uParam0^), 1 );
    return;
}

void sub_41171()
{
    int I;
    unknown uVar3;

    sub_408( "MF", "P_2ND_BAR_REBELS_SECOND_WAVE_ATTACK: START", 0 );
    for ( I = 1; I <= (l_U521 - 1); I++ )
    {
        SET_PED_FREEZE_PROCESSING( l_U521[I], 0 );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        if (I == 1)
        {
            TASK_FOLLOW_NAV_MESH_TO_COORD( 0, -25.00000000, 3.01000000, 5.30000000, 3, 20000, 1048576000, 0, 0 );
        }
        else if (I == 2)
        {
            TASK_PAUSE( 0, 200 );
            TASK_FOLLOW_NAV_MESH_TO_COORD( 0, -20.72000000, 3.99000000, 5.30000000, 3, 20000, 1048576000, 0, 0 );
        }
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0, sub_747() );
        CLOSE_SEQUENCE_TASK( uVar3 );
        if (sub_26638( l_U521[I], 0 ))
        {
            TASK_PERFORM_SEQUENCE( l_U521[I], uVar3 );
        }
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    sub_408( "MF", "P_2ND_BAR_REBELS_SECOND_WAVE_ATTACK: END", 0 );
    return;
}

int sub_41550()
{
    int iVar2;

    iVar2 = (sub_34991( ref l_U521 )) + (sub_34991( ref l_U387 ));
    if (NOT (sub_34815( ref l_U761 )))
    {
        iVar2++;
    }
    if (iVar2 > 1)
    {
        return 0;
    }
    if (sub_38989( ref l_U855, 0 ))
    {
        return 0;
    }
    return 1;
}

void sub_41655()
{
    unknown uVar2;
    unknown uVar3;

    sub_408( "SA", "P_2ND_BAR_SPAWN_REINFORCEMENTS start", 0 );
    l_U798 = sub_25229( ref l_U799 );
    if (sub_26638( l_U798, 0 ))
    {
        sub_26759( l_U798, ref l_U565 );
        SET_PED_ALERTNESS( l_U798, 3 );
        SET_ROOM_FOR_PED_BY_NAME( l_U798, ref g_U3287 );
        REGISTER_TARGET( l_U798, sub_747() );
        SET_PED_AI_TEMPLATE( l_U798, ref g_U1472 );
        SET_PED_COMBAT_RANGE_MIN( l_U798, 6 );
        SET_PED_COMBAT_RANGE_MAX( l_U798, 17 );
        sub_8235( l_U798, -1404433099, 25000, 0, 0 );
        if (NOT l_U633._fU64)
        {
            sub_27080( ref l_U571, l_U798, 1 );
        }
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, -20.72000000, 3.99000000, 5.30000000, sub_747(), 3, 1, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0, sub_747() );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( l_U798, uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    sub_408( "SA", "P_2ND_BAR_SPAWN_REINFORCEMENTS end", 0 );
    return;
}

void sub_42066()
{
    sub_408( "MF", "P_2ND_CLEAR_BULLET_CAM_FROM_REBELS - START", 0 );
    sub_42136( ref l_U521 );
    sub_42136( ref l_U387 );
    if (sub_26638( l_U761, 0 ))
    {
        if (GET_PED_CAN_TRIGGER_BULLET_CAM( l_U761 ))
        {
            SET_PED_CAN_TRIGGER_BULLET_CAM( l_U761, 0 );
        }
    }
    sub_408( "MF", "P_2ND_CLEAR_BULLET_CAM_FROM_REBELS - END", 0 );
    return;
}

void sub_42136(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 0 );
            sub_25162( I );
        }
    }
    return;
}

void sub_42348(int iParam0, unknown uParam1, unknown uParam2)
{
    if (iParam0->_fU68 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU68 = sub_10429( uParam1, (iParam0^) );
        if ((iParam0->_fU68) AND (uParam2))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU68;
}

void sub_42446()
{
    sub_40951( l_U521[2] );
    sub_41024( ref l_U521[2] );
    sub_40951( l_U798 );
    sub_41024( ref l_U798 );
    return;
}

void sub_42532(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

void sub_42601(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_4709( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_43330(int iParam0, unknown uParam1)
{
    if ((sub_22838( iParam0 )) == 0)
    {
        sub_22904( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

void sub_43397(int iParam0, unknown uParam1)
{
    if ((sub_22838( iParam0 )) == 0)
    {
        sub_22904( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

int sub_43733(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, float fParam7)
{
    if ((ABSF( sub_43744( ref uParam0 ) )) < fParam7)
    {
        return 1;
        break;
    }
    return 0;
}

void sub_43744(int iParam0)
{
    int iVar3;
    float Result;

    if ((sub_22838( iParam0 )) == 0)
    {
        sub_22904( iParam0 );
    }
    iVar3 = 0;
    Result = 0.00000000;
    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar3, ref Result );
    return Result;
}

void sub_44007()
{
    if (((sub_42348( ref l_U717, sub_747(), 0 )) == 1) || (((sub_42348( ref l_U696, sub_747(), 0 )) == 1) || (((sub_42348( ref l_U675, sub_747(), 0 )) == 1) || ((sub_42348( ref l_U654, sub_747(), 0 )) == 1))))
    {
        sub_408( "kja", "Player Hit the Kill Box", 0 );
        SET_PED_INVINCIBLE( sub_747(), 1 );
        sub_44145( 0 );
        sub_44238( 0 );
        BULLET_CAMERA_PRELOAD_TEXT_BINK( "MISS_DEATH_FALL_01A", 1 );
        l_U760 = CREATE_CAM( "DEFAULT_BULLET_CAMERA", 1 );
        SETUP_BULLET_CAMERA_SCENE( l_U760, "MISS_DEATH_FALL_01A", 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, "", "" );
        SET_CAM_ACTIVE( l_U760, 1 );
        STREAM_HELPERS_REQUEST_AT_LOC( g_U980[5], 1 );
        l_U759 = 1;
    }
    return;
}

void sub_44145(unknown uParam0)
{
    int I;

    for ( I = 0; I <= 3; I++ )
    {
        if (IS_SCRIPTED_CONVERSATION_ONGOING( I ))
        {
            if ((g_U1[I] <= 8) AND (g_U1[I] >= 4))
            {
                STOP_SCRIPTED_CONVERSATION( I, uParam0, 0 );
            }
        }
    }
    return;
}

void sub_44238(unknown uParam0)
{
    int I;

    for ( I = 0; I <= 3; I++ )
    {
        if (IS_SCRIPTED_CONVERSATION_ONGOING( I ))
        {
            if ((g_U1[I] <= 3) AND (g_U1[I] >= 1))
            {
                STOP_SCRIPTED_CONVERSATION( I, uParam0, 0 );
            }
        }
    }
    return;
}

void sub_44628()
{
    sub_408( "SP", "P_RELEASE_2D_ASSETS start", 0 );
    sub_44677();
    sub_45554( ref l_U161, ref g_U1588 );
    sub_45832( ref l_U166, ref g_U1829 );
    sub_42601( ref g_U3079, ref g_U3026 );
    sub_42601( "SCRIPT_MISSION\S_PANA_REPEL_GMED_FWD", ref g_U3026 );
    sub_44757( "LEVEL_S_PAN_CP_04", ref g_U1975 );
    sub_44757( "LEVEL_S_PAN_BOW", ref g_U1975 );
    sub_408( "SP", "P_RELEASE_2D_ASSETS end", 0 );
    return;
}

void sub_44677()
{
    sub_408( "CR", "P_GLOBAL_UNLOAD_PISTOL_ANIMS - Start", 0 );
    sub_44757( "NPC_PSTL_CORE", ref g_U1975 );
    sub_44757( "NPC_PSTL_COVER", ref g_U1975 );
    sub_44757( "NPC_PSTL_COVER_ENTER", ref g_U1975 );
    sub_44757( "NPC_PSTL_COVER_RELOAD", ref g_U1975 );
    sub_44757( "NPC_PSTL_DODGE", ref g_U1975 );
    sub_44757( "NPC_PSTL_FLAVOR", ref g_U1975 );
    sub_44757( "NPC_PSTL_FULLBODY", ref g_U1975 );
    sub_44757( "NPC_PSTL_RELOAD", ref g_U1975 );
    sub_44757( "NPC_PSTL_SEARCH", ref g_U1975 );
    sub_44757( "NPC_PSTL_STAIRS", ref g_U1975 );
    sub_44757( "NPC_PSTL_REACT", ref g_U1975 );
    sub_44757( "AMED_PSTL_PRONE", ref g_U1975 );
    sub_44757( "PLGE_PSTL_CROUCH", ref g_U1975 );
    sub_44757( "PLGE_PSTL_CORE", ref g_U1975 );
    sub_44757( "PLGE_PSTL_CORE_RELOAD", ref g_U1975 );
    sub_44757( "PLGE_PSTL_HANDSIG", ref g_U1975 );
    sub_44757( "PLGE_PSTL_ACTIONS", ref g_U1975 );
    sub_44757( "PLGE_PSTL_KNEE", ref g_U1975 );
    sub_44757( "PLGE_PSTL_COVER", ref g_U1975 );
    sub_44757( "PLGE_PSTL_REACT", ref g_U1975 );
    sub_44757( "PLGE_PSTL_COVER_EXIT", ref g_U1975 );
    sub_408( "CR", "P_GLOBAL_UNLOAD_PISTOL_ANIMS - End", 0 );
    return;
}

void sub_44757(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_4709( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_45554(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_45589( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_45589(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_4709( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

void sub_45832(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_45867( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_45867(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 = sub_4709( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

