void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U55 = {0, 0, 0};
    StrCopy( ref l_U58, "DUMMY", 32 );
    l_U66 = 1;
    l_U71 = 0;
    l_U72 = 0;
    l_U73 = 0;
    l_U76 = 0;
    l_U122 = 0;
    l_U123 = 0;
    l_U124 = 1500;
    l_U212 = "PED_DEF";
    l_U254 = 1.00000000;
    l_U266 = 0;
    l_U307 = 0;
    l_U336 = 12;
    l_U383 = 0;
    l_U385 = 0;
    l_U877 = -1;
    l_U882 = {1001.41700000, -48.13000000, 8.78000000};
    l_U885 = {1001.18000000, -47.98000000, 9.08000000};
    l_U888 = {1001.18000000, -47.77000000, 9.08000000};
    l_U918 = {1035.88000000, -49.30000000, 9.04000000};
    l_U947 = 0;
    l_U948 = 0;
     /* WRITESCRIPTLOG */ sub_567( "AT", "Script s_police_killHouse.sc is starting up...", 0 );
     /* P_SETUP_ASSET_ARRAYS */ sub_685();
    l_U383 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_818();
        if (l_U385 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_11859();
        }
         /* P_HANDLE_KH_DEBUG_WIDGET */ sub_43880();
        WAIT( 0 );
    }
     /* P_CLEANUP_KILLHOUSE */ sub_6126();
     /* P_RELEASE_KILLHOUSE_ASSETS */ sub_44406();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_police_killHouse" );
     /* WRITESCRIPTLOG */ sub_567( "AT", "Script s_police_killHouse.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_567(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_SETUP_ASSET_ARRAYS */ void sub_685()
{
     /* WRITESCRIPTLOG */ sub_567( "AT", "P_SETUP_ASSET_ARRAYS", 0 );
    l_U924[0] = -893441735;
    l_U924[1] = -36467684;
    l_U924[2] = 1007533882;
    return;
}

/* P_HANDLE_FAILURE */ void sub_818()
{
    if (g_U821 == 15)
    {
        switch (l_U385)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1020()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() )))
            {
                l_U385 = 1;
                 /* WRITESCRIPTLOG */ sub_567( "AT", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
             /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1539( 1 );
            if ( /* IS_RESTART_ACTIVE */ sub_4630())
            {
                l_U385 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_4690( 0 )) == 1)
            {
                l_U385 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() )))
            {
                l_U385 = 3;
                 /* WRITESCRIPTLOG */ sub_567( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_567( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_957() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_957(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_919() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_919(), 0 );
                }
            }
            if ((g_U862[16]._fU40 != 4) AND (g_U862[16]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_567( "CR", "Shutting down script for MCE_SHOOT_RANGE.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_6000( ref g_U862[16] );
                SET_EXITFLAG_FOR_SCRIPT( g_U862[16]._fU32 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            AUDIO_MUSIC_STOP_ONESHOT();
             /* P_CLEANUP_KILLHOUSE */ sub_6126();
             /* P_FORCE_SCENE_TO_LOAD */ sub_6749( 15 );
            l_U385 = 4;
             /* WRITESCRIPTLOG */ sub_567( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_567( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_7183( ref l_U347,  /* PLAYER_PED_ID */ sub_919() );
            l_U385 = 5;
             /* WRITESCRIPTLOG */ sub_567( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_567( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U383 = 1;
            l_U385 = 0;
             /* WRITESCRIPTLOG */ sub_567( "AT", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_919()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_957() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_957()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1020()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_919(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_957(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_957(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_919() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_919(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ void sub_1539(boolean bParam0)
{
    int iVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() )))
    {
        if (NOT (IS_PED_IN_COMBAT(  /* PLAYER_PED_ID */ sub_919() )))
        {
            if ((NOT l_U327._fU16) AND (NOT l_U327._fU20))
            {
                 /* WRITESCRIPTLOG */ sub_567( "AT", "Starting painkiller dialogue timer.", 0 );
                 /* CREATETIMER */ sub_1703( ref l_U327, 3500, 1, 0 );
                 /* STARTTIMER */ sub_1853( ref l_U327 );
            }
            if ((l_U327._fU16) AND ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_1982()))
            {
                 /* WRITESCRIPTLOG */ sub_567( "AT", "Dialogue detected. Restarting painkiller dialogue timer.", 0 );
                 /* CREATETIMER */ sub_1703( ref l_U327, 3500, 1, 0 );
                 /* STARTTIMER */ sub_1853( ref l_U327 );
            }
            iVar3 = GET_PAYNEKILLER_AMT();
            if (iVar3 > l_U336)
            {
                if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_1982()))
                {
                    if ((l_U327._fU16) || ( /* ISTIMERDONE */ sub_2219( ref l_U327 )))
                    {
                        if (g_U4303 < 6)
                        {
                            if ((GET_RANDOM_INT_IN_RANGE( 0, 500 )) < 300)
                            {
                                 /* WRITESCRIPTLOG */ sub_567( "GA", "Playing painkiller monologue.", 0 );
                                 /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2486( ref l_U337 );
                                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2597( 0,  /* PLAYER_PED_ID */ sub_919(), "MAX", ref l_U337, 2, 0 );
                                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2597( 1,  /* PLAYER_PED_ID */ sub_919(), "MAX", ref l_U337, 2, 0 );
                                 /* PLAY_SINGLE_SPEECH */ sub_2867( "SPOL_PLFNDPL", ref l_U337, 8, 1 );
                                g_U4303++;
                            }
                            else
                            {
                                 /* WRITESCRIPTLOG */ sub_567( "GA", "Not playing painkiller speech, failed random chance test.", 0 );
                            }
                        }
                        else
                        {
                             /* WRITESCRIPTLOG */ sub_567( "GA", "Not Playing painkiller speech, already played all 6 lines.", 0 );
                        }
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_567( "GA", "Not playing painkiller speech, not long enough since last dialogue.", 0 );
                    }
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_567( "GA", "Not playing painkiller speech, another speech is currently playing.", 0 );
                }
            }
            l_U336 = iVar3;
        }
        if ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_4115( l_U337 ))
        {
            if (NOT HAS_CUTSCENE_FINISHED())
            {
                 /* WRITESCRIPTLOG */ sub_567( "GA", "Killing painkiller speech for cutscene playing.", 0 );
                 /* KILL_SPEECH */ sub_4417( ref l_U337, 0 );
            }
        }
    }
    if (bParam0)
    {
         /* CREATETIMER */ sub_1703( ref l_U327, 20000, 1, 0 );
         /* STARTTIMER */ sub_1853( ref l_U327 );
    }
    return;
}

/* CREATETIMER */ void sub_1703(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_1853(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* IS_ANY_SPEECH_CURRENTLY_PLAYING */ void sub_1982()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

/* ISTIMERDONE */ int sub_2219(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_2486(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_2597(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_2867(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_2912( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_2912(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_2999( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_2999(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_3051( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_3569( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_3051(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_3569(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_4115(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_4158( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_4158(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* KILL_SPEECH */ void sub_4417(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_4158( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

/* IS_RESTART_ACTIVE */ void sub_4630()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_4690(int iParam0)
{
    iParam0 = 1;
    switch (l_U123)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_4772( ref l_U125 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() )))
            {
                l_U124 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1703( ref l_U125, l_U124, 1, 1 );
             /* STARTTIMER */ sub_1853( ref l_U125 );
        }
        if ( /* ISTIMERDONE */ sub_2219( ref l_U125 ))
        {
             /* WRITESCRIPTLOG */ sub_567( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_957() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_957(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U123 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U123 = 2;
            }
            else
            {
                l_U123 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_567( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_5255();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_567( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_5255();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_4772(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_5255()
{
     /* WRITESCRIPTLOG */ sub_567( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_5330( ref l_U125 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_957() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_957(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U122 = 0;
    l_U122 = l_U122;
    l_U123 = 0;
    return;
}

/* RESETTIMER */ void sub_5330(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_6000(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_KILLHOUSE */ void sub_6126()
{
     /* WRITESCRIPTLOG */ sub_567( "AT", "P_CLEANUP_KILLHOUSE", 0 );
     /* CLEANPEDARRAY */ sub_6195( ref l_U584 );
     /* CLEANPEDARRAY */ sub_6195( ref l_U527 );
     /* CLEANPED */ sub_6245( l_U610 );
     /* CLEANPLACEMENTARRAY */ sub_6372( ref l_U879 );
     /* CLEANPLACEMENTARRAY */ sub_6372( ref l_U915 );
     /* CLEANPLACEMENT */ sub_6427( l_U923 );
     /* CLEANOBJECT */ sub_6530( l_U881 );
     /* CLEANOBJECT */ sub_6530( l_U917 );
     /* P_STOP_DOOR_ALARM_SFX */ sub_6594();
    return;
}

/* CLEANPEDARRAY */ void sub_6195(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_6245( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_6245(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_6372(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_6427( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_6427(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* CLEANOBJECT */ void sub_6530(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* P_STOP_DOOR_ALARM_SFX */ void sub_6594()
{
    if (l_U877 != -1)
    {
        STOP_SOUND( l_U877, 0 );
        RELEASE_SOUND_ID( l_U877 );
        l_U877 = -1;
         /* WRITESCRIPTLOG */ sub_567( "AT", "Stopping and releasing FIRING_RANGE_CEASE_FIRE!", 0 );
    }
    return;
}

/* P_FORCE_SCENE_TO_LOAD */ void sub_6749(unknown uParam0)
{
    char[64] cVar3;
    unknown uVar19;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() )))
    {
         /* TELEPORTPED */ sub_6825(  /* PLAYER_PED_ID */ sub_919(), g_U2953[uParam0], g_U3083[uParam0] );
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_919(), 1 );
        if (NOT (IS_STRING_NULL( ref g_U1091[uParam0]._fU0 )))
        {
            StrCopy( ref cVar3, "Loading room: ", 64 );
            ConcatString(ref cVar3, ref g_U1091[uParam0]._fU0, 64);
            PRINTSTRING( ref cVar3 );
            PRINTNL();
            uVar19 = GET_INTERIOR_FROM_NAME( ref g_U1091[uParam0]._fU64, 0 );
            SET_INTERIOR_ACTIVE( uVar19, 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( uVar19, GET_HASH_KEY( ref g_U1091[uParam0]._fU0 ) );
        }
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_919(), 0 );
    }
    return;
}

/* TELEPORTPED */ void sub_6825(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_7183(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_567( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_7402( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_8566( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8880( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9359( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8880( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9359( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8880( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9359( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9675( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9359( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9675( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9359( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_10247( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_10449( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_919(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_567( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_7402(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7464( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_7464(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_8566(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_8880(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9284( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_9284(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_9359(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_9675(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9284( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_10247(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_10449(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7464( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_10547( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_10547(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_11859()
{
    int iVar2;
    int iVar3;
    unknown uVar4;
    float fVar5;

    iVar2 = l_U383;
    switch (l_U383)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_12049();
         /* P_SET_STATIC_DATA */ sub_12523();
         /* P_CREATE_KILLHOUSE_PLACEMENTS */ sub_15598();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U383 = 2;
         /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_KILLHOUSE_PERSISTENT_ASSETS */ sub_16657();
         /* P_REQUEST_KILLHOUSE_NONPERSISTENT_ASSETS */ sub_23632();
        l_U383 = 3;
         /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_24655( ref g_U2613 )) AND (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_24281( ref g_U2889 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_23884( ref g_U2468 ))))
        {
            g_U822[15] = 1;
            if ((NOT l_U347._fU0) AND (g_U820 == 15))
            {
                 /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
                l_U383 = 4;
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
                l_U383 = 6;
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U842[15] = 1;
        if (NOT ( /* HAS_SAVEFILE_LOADED */ sub_25293( ref l_U347 )))
        {
             /* F_GIVEPEDWEAPON */ sub_9675(  /* PLAYER_PED_ID */ sub_919(), 57534114, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8880(  /* PLAYER_PED_ID */ sub_919(), -862236369, 0, 200, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8880(  /* PLAYER_PED_ID */ sub_919(), -862236369, 1, 200, 0 );
            SET_PAYNEKILLER_AMT( 7 );
            l_U383 = 5;
             /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U383 = 6;
             /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_919(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_919(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_919(), 0, 0 ) ))))
            {
                g_U821 = 15;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_25851( ref l_U347, g_U821,  /* PLAYER_PED_ID */ sub_919(), g_U2953[15], g_U3083[15], g_U3127[15], g_U3171[15], 1 );
                l_U383 = 6;
                 /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
            }
        }
        break;
        case 6:
        if (l_U384)
        {
            l_U555 = 1;
            l_U407 = 1;
            l_U881 =  /* CREATEOBJECTNOOFFSET */ sub_30557( -36467684, l_U882, 0, 0, 90.00000000, 0, 0, 0 );
            if (DOES_OBJECT_EXIST( l_U881 ))
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U881, "MloRoom_range" );
                FREEZE_OBJECT_POSITION( l_U881, 1 );
            }
            l_U917 =  /* CREATEOBJECTNOOFFSET */ sub_30557( 1007533882, l_U918, 0, 0, 0, 0, 0, 0 );
            if (DOES_OBJECT_EXIST( l_U917 ))
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U917, "MloRoom_Killhouse" );
                FREEZE_OBJECT_POSITION( l_U917, 1 );
            }
        }
        if ( /* F_SETUP_GROUND_LEVEL_ENEMIES */ sub_31263())
        {
            l_U383 = 7;
             /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        break;
        case 7:
        if ((NOT (CUTSCENE_IS_LOADED( ref g_U3485 ))) AND (g_U842[15]))
        {
             /* NIS_POST_SETUP */ sub_34606( 1, 1 );
            DO_SCREEN_FADE_IN( 0 );
            if (IS_DEATH_PANEL_WIPE_ALLOWED())
            {
                DO_SCREEN_FADE_IN( 0 );
            }
            SET_WEATHER_TYPE_NOW_PERSIST( "SUNNY" );
             /* P_CLOSEDOOR */ sub_12201( ref g_U4121, 0 );
             /* P_CLOSEDOOR */ sub_12201( ref g_U4128, 0 );
             /* P_SET_DOORS_ONE_WAY */ sub_34981( ref g_U4121, ref g_U4128 );
             /* TAKE_PAINKILLER_ARRAY_SNAPSHOT */ sub_35360( ref l_U879, ref l_U891 );
            if (g_U821 != 15)
            {
                g_U821 = 15;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_25851( ref l_U347, g_U821,  /* PLAYER_PED_ID */ sub_919(), g_U2953[15], g_U3083[15], g_U3127[15], g_U3171[15], 1 );
            }
            if (NOT AUDIO_IS_MUSIC_PLAYING())
            {
                 /* WRITESCRIPTLOG */ sub_567( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_6", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_6", "PRECINCT_01_1_6", 0, -1, 7000, -1082130432, 0 );
            }
             /* P_DEACTIVATEPEDARRAY */ sub_34233( ref l_U527 );
             /* P_DEACTIVATEPEDARRAY */ sub_34233( ref l_U584 );
            l_U383 = 8;
             /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_HANDLE_KILLHOUSE_GAMEPLAY", 0 );
        }
        break;
        case 8:
        if (l_U384)
        {
             /* WRITESCRIPTLOG */ sub_567( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_6 fade in over 4 seconds, old music out over 8 seconds", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_6", "PRECINCT_01_1_6", 0, -1, -1, -1082130432, 0 );
        }
        if ( /* F_SETUP_SNIPERS */ sub_36080())
        {
             /* P_HANDLE_SNIPER_POSITIONS */ sub_37767();
        }
        iVar3 = ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_38139( ref l_U527 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_38139( ref l_U584 ));
        if (DOES_PED_EXIST( l_U610 ))
        {
            if (NOT (IS_PED_DEAD( l_U610 )))
            {
                iVar3++;
            }
        }
        if (NOT l_U878)
        {
            if ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_38139( ref l_U527 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_38139( ref l_U584 ))) < 5)
            {
                 /* WRITESCRIPTLOG */ sub_567( "AT", "Enemies at 50%. Switching music.", 0 );
                 /* WRITESCRIPTLOG */ sub_567( "AT", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_5", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_5", "PRECINCT_01_1_5", 0, 10000, 10000, -1082130432, 0 );
                l_U878 = 1;
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U894, 0 ))
        {
            l_U893 = 1;
        }
        if (NOT l_U893)
        {
            if ( /* UPDATE_PILL_VO */ sub_38586( "SPOL_PLFNDPL", ref l_U879, ref l_U891 ))
            {
                 /* WRITESCRIPTLOG */ sub_567( "SBA", "Playing Pill monologue for puiKillHousePainkillers", "..." );
                l_U893 = 1;
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U634, 0 ))
        {
             /* P_ACTIVATEPED */ sub_37229( l_U527[0] );
             /* P_ACTIVATEPED */ sub_37229( l_U527[1] );
             /* P_TASK_ENEMY_TO_COMBAT */ sub_39171( ref l_U527[0] );
             /* P_TASK_SNAP_ENEMY_TO_COVER */ sub_39393( ref l_U527[1], "floor4", "Corner_Position137", 0 );
        }
        if (NOT l_U554)
        {
            if (((IS_PED_DEAD( l_U527[1] )) AND (IS_PED_DEAD( l_U527[0] ))) || ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U655, 0 )))
            {
                 /* P_ACTIVATEPED */ sub_37229( l_U527[2] );
                 /* P_ACTIVATEPED */ sub_37229( l_U527[3] );
                 /* PED_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS */ sub_39711( ref l_U527[2], 0 );
                 /* PED_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS */ sub_39711( ref l_U527[3], 0 );
                 /* PED_TASK_ATTACK_MOVE */ sub_39846( l_U527[2], 1013.58000000, -60.09000000, 4.80000000, 4, 40, -1082130432, 3 );
                 /* PED_TASK_ATTACK_MOVE */ sub_39846( l_U527[3], 1011.97300000, -59.32400000, 4.80000000, 4, 40, -1082130432, 3 );
                 /* PED_SET_REGISTER_TARGET_PLAYER */ sub_39976( ref l_U527[2] );
                 /* PED_SET_REGISTER_TARGET_PLAYER */ sub_39976( ref l_U527[3] );
                 /* WRITESCRIPTLOG */ sub_567( "SBA", "Expanded tethers for peds 2 and 3", 0 );
                 /* P_TETHERPED */ sub_33737( ref l_U806[0], l_U527[2], 1 );
                 /* P_TETHERPED */ sub_33737( ref l_U806[1], l_U527[2], 1 );
                 /* P_TETHERPED */ sub_33737( ref l_U806[2], l_U527[2], 1 );
                 /* P_TETHERPED */ sub_33737( ref l_U806[4], l_U527[2], 1 );
                 /* P_TETHERPED */ sub_33737( ref l_U806[8], l_U527[2], 1 );
                 /* P_TETHERPED */ sub_33737( ref l_U806[1], l_U527[3], 1 );
                 /* P_TETHERPED */ sub_33737( ref l_U806[2], l_U527[3], 1 );
                 /* P_TETHERPED */ sub_33737( ref l_U806[4], l_U527[3], 1 );
                l_U554 = 1;
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U676, 0 ))
        {
             /* P_ACTIVATEPED */ sub_37229( l_U527[4] );
             /* P_ACTIVATEPED */ sub_37229( l_U527[5] );
             /* P_ACTIVATEPED */ sub_37229( l_U527[6] );
             /* P_TASK_SNAP_ENEMY_TO_COVER */ sub_39393( ref l_U527[4], "floor4", "Corner_Position71", 0 );
             /* P_TASK_SNAP_ENEMY_TO_COVER */ sub_39393( ref l_U527[5], "gencover", "5FBC25E3_5116CF77_Popover1", 0 );
             /* P_TASK_SNAP_ENEMY_TO_COVER */ sub_39393( ref l_U527[6], "floor4", "Corner_Position79", 0 );
             /* P_CREATE_LAST_CHARGER_ENEMY */ sub_40555();
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U697, 0 ))
        {
             /* P_ACTIVATEPED */ sub_37229( l_U584[0] );
            TOGGLE_WEAPON_ATTACHMENT( GET_WEAPON_FROM_HAND( l_U584[0], 0, 0 ), 13, 1 );
            REGISTER_TARGET( l_U584[0],  /* PLAYER_PED_ID */ sub_919() );
            SET_LOCKED_TARGET( l_U584[0],  /* PLAYER_PED_ID */ sub_919() );
            TASK_COMBAT_PED( l_U584[0],  /* PLAYER_PED_ID */ sub_919() );
             /* CLEANPED */ sub_6245( l_U527[7] );
             /* P_ACTIVATEPED */ sub_37229( l_U527[8] );
             /* P_TASK_SNAP_ENEMY_TO_COVER */ sub_39393( ref l_U527[8], "GenCover", "5FBC25E3_B9E77F47_Corner1", 0 );
        }
         /* P_FREE_UP_LAST_ENEMIES */ sub_41298();
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U611, 0 ))
        {
             /* P_DEPLOY_LAST_CHARGER */ sub_41551();
        }
        if (NOT l_U632)
        {
            if ( /* F_ISPEDINTRIGGERBOX */ sub_36233( l_U610, l_U781 ))
            {
                SET_PED_INVINCIBLE( l_U610, 0 );
                SET_PED_NO_RAGDOLL_TO_BULLET_UNLESS_DEAD( l_U610, 0 );
                l_U632 = 1;
            }
        }
        else if (NOT l_U633)
        {
            if ((( /* F_GETDOOROPENRATIO */ sub_42188( ref g_U4009 )) > -0.05000000) AND (( /* F_GETDOOROPENRATIO */ sub_42188( ref g_U4009 )) < 0.05000000))
            {
                 /* WRITESCRIPTLOG */ sub_567( "SBA", "Setting Killhouse exit one-way", 0 );
                 /* P_SETDOORMINMAXLIMIT */ sub_35021( ref g_U4009, 0.00000000, 75.00000000 );
                if (NOT (IS_PED_DEAD( l_U610 )))
                {
                    SET_PED_INVINCIBLE( l_U610, 0 );
                    SET_PED_NO_RAGDOLL_TO_BULLET_UNLESS_DEAD( l_U610, 0 );
                }
                l_U633 = 1;
            }
        }
        if (iVar3 == 1)
        {
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_42435( ref l_U527 );
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_42435( ref l_U584 );
            if (NOT (IS_PED_DEAD( l_U610 )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( l_U610 )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( l_U610, 1 );
                }
            }
        }
        if (iVar3 == 0)
        {
            if ((NOT l_U938._fU16) AND (NOT l_U938._fU20))
            {
                 /* STARTTIMER */ sub_1853( ref l_U938 );
                 /* TAKE_PAINKILLER_ARRAY_SNAPSHOT */ sub_35360( ref l_U915, ref l_U921 );
            }
            if ( /* F_CAN_AMBIENT_SPEECH_PLAY */ sub_42715())
            {
                if ( /* ISTIMERDONE */ sub_2219( ref l_U938 ))
                {
                     /* P_SPEECH_PLAY_MONOLOGUE */ sub_42826( "SPOL_DWKLHSE", ref l_U928 );
                }
            }
             /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1539( 0 );
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U386, 0 ))
        {
             /* P_PLAY_DOOR_ALARM_SFX */ sub_42952();
        }
        if ( /* F_ISPLAYERINTRIGGERBOX */ sub_43104( l_U386 ))
        {
            if ( /* HASTIMERBEENACTIVATED */ sub_4772( ref l_U938 ))
            {
                 /* RESETTIMER */ sub_5330( ref l_U938 );
            }
            if (l_U877 != -1)
            {
                if ( /* F_DOESDOOREXIST */ sub_12227( ref g_U4009 ))
                {
                    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( g_U4009._fU0, g_U4009._fU4, ref uVar4, ref fVar5 );
                    if ((uVar4) || ((fVar5 > -0.10000000) AND (fVar5 < 0.10000000)))
                    {
                         /* WRITESCRIPTLOG */ sub_567( "AT", "Door closed! Playing ALL CLEAR!", 0 );
                         /* P_STOP_DOOR_ALARM_SFX */ sub_6594();
                        PLAY_SOUND_FROM_COORD( -1, "PRISONER_EXCHANGE_DOOR_BUTTON", g_U4009._fU4 );
                         /* P_SETDOORMINMAXLIMIT */ sub_35021( ref g_U4009, 0.00000000, 75.00000000 );
                        if (NOT (IS_PED_DEAD( l_U610 )))
                        {
                            SET_PED_INVINCIBLE( l_U610, 0 );
                            SET_PED_NO_RAGDOLL_TO_BULLET_UNLESS_DEAD( l_U610, 0 );
                        }
                        l_U633 = 1;
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_567( "at", "door is not closed", 0 );
                    }
                }
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U835, 0 ))
        {
            g_U862[16]._fU36 = 1;
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U856, 0 ))
        {
            g_U842[16] = 1;
             /* STARTTIMER */ sub_1853( ref l_U826 );
            l_U383 = 9;
             /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 9:
        if ( /* ISTIMERDONE */ sub_2219( ref l_U826 ))
        {
             /* P_STOP_DOOR_ALARM_SFX */ sub_6594();
        }
        if (NOT l_U633)
        {
            if ((( /* F_GETDOOROPENRATIO */ sub_42188( ref g_U4009 )) > -0.10000000) AND (( /* F_GETDOOROPENRATIO */ sub_42188( ref g_U4009 )) < 0.10000000))
            {
                 /* WRITESCRIPTLOG */ sub_567( "SBA", "Setting Killhouse exit one-way", 0 );
                 /* P_SETDOORMINMAXLIMIT */ sub_35021( ref g_U4009, 0.00000000, 75.00000000 );
                if (NOT (IS_PED_DEAD( l_U610 )))
                {
                    SET_PED_INVINCIBLE( l_U610, 0 );
                    SET_PED_NO_RAGDOLL_TO_BULLET_UNLESS_DEAD( l_U610, 0 );
                }
                l_U633 = 1;
            }
        }
        if (g_U821 == 16)
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U383 = 0;
             /* WRITESCRIPTLOG */ sub_567( "AT", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U383 != iVar2)
    {
        l_U384 = 1;
    }
    else
    {
        l_U384 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_12049()
{
     /* WRITESCRIPTLOG */ sub_567( "AT", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U384 = 1;
    l_U878 = 0;
    l_U553 = 0;
    l_U554 = 0;
    l_U596 = 0;
    l_U893 = 0;
    l_U632 = 0;
    l_U633 = 0;
    l_U407 = 0;
    l_U408 = 0;
    l_U555 = 0;
    l_U556 = 0;
     /* P_CLOSEDOOR */ sub_12201( ref g_U4009, 1 );
     /* P_CLOSEDOOR */ sub_12201( ref g_U3995, 1 );
     /* P_CLOSEDOOR */ sub_12201( ref g_U4002, 1 );
     /* CREATETIMER */ sub_1703( ref l_U826, 2500, 1, 0 );
     /* CREATETIMER */ sub_1703( ref l_U817, 3000, 1, 0 );
     /* CREATETIMER */ sub_1703( ref l_U938, 9000, 1, 0 );
    return;
}

/* P_CLOSEDOOR */ void sub_12201(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_12227( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12311( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_12227(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_12311(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SET_STATIC_DATA */ void sub_12523()
{
     /* WRITESCRIPTLOG */ sub_567( "AT", "P_SET_STATIC_DATA", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12622( ref l_U409[0], 1012.87200000, -62.79350000, 4.80023100, 165.71180000, -1983305255, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12622( ref l_U409[1], 1012.52000000, -62.13309000, 4.80022900, 199.83940000, -88105423, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12622( ref l_U409[2], 1010.65600000, -54.30459000, 4.80019600, 100.00000000, 171162196, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12622( ref l_U409[3], 1013.85900000, -52.66032000, 4.80021000, 119.60970000, 496943840, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12622( ref l_U409[4], 1020.45400000, -57.17445000, 4.80026100, 10.48268000, 1492281543, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12622( ref l_U409[5], 1024.73600000, -62.81292000, 4.80027800, 51.68561000, 1080155410, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12622( ref l_U409[6], 1025.53200000, -65.92851000, 4.80027900, 76.40356000, 1139881660, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12622( ref l_U409[7], 1025.58600000, -68.85862000, 4.80027700, 298.48010000, -1952390290, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12622( ref l_U409[8], 1031.67400000, -70.87954000, 4.80029700, 30.00000000, -679538760, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12622( ref l_U557[0], 1031.53600000, -61.52093000, 7.70716800, 104.97100000, 1326067522, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12622( ref l_U557[1], 1022.69000000, -68.45000000, 8.76000000, 82.95000000, -2023785959, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12622( ref l_U597, 1034.74400000, -47.64400000, 7.80000000, 180, -411727246, 7, 3, 2, 0, 0 );
    l_U593[0] = 1;
    l_U593[1] = 2;
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U894, "TRIG_ENTERING_KILLHOUSE", 1003.46000000, -50.11000000, 7.50000000, 4.70000000, 2.77000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U634, "TRIGGER_ENEMIES1", 1010.22000000, -68.44000000, 4.77000000, 9.34000000, 2.47000000, 5.59000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U655, "TRIGGER_ENEMIES1A", 1013.20000000, -60.57200000, 4.77000000, 3.00000000, 5.00000000, 5.59000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U676, "TRIGGER_ENEMIES2", 1007.82000000, -56.27000000, 4.77000000, 3.00000000, 4.00000000, 5.59000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U697, "TRIGGER_ENEMIES3", 1012.99000000, -53.71000000, 4.77000000, 5.00000000, 5.00000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U718, "TRIGGER_LAST_ENEMIES", 1019.57000000, -56.11000000, 4.77000000, 3.00000000, 10.00000000, 5.59000000, 0.00000000, 0.00000000, -10.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U739, "TRIGGER_SNIPERPOS1", 1010.87000000, -70.34000000, 4.72000000, 6.00000000, 5.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U760, "TRIGGER_SNIPERPOS2", 1022.04000000, -61.81000000, 4.72000000, 12.00000000, 21.98000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U781, "TRIGGER_SNIPERPOS3", 1032.81000000, -61.81000000, 4.72000000, 9.00000000, 21.98000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U611, "TB_DEPLOY_CHARGER", 1034.59000000, -65.47000000, 4.77000000, 2.00000000, 5.03000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U386, "TB_TRIGGER_ALARM", 1034.83000000, -48.29000000, 7.68000000, 2.00000000, 2.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U835, "TB_START_SR", 1035.10000000, -63.40000000, 4.77000000, 2.00000000, 4.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13321( ref l_U856, "TB_END_KILLHOUSE", 1037.04000000, -44.37000000, 7.68000000, 5.00000000, 7.41000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U805, "TETH_LONE_SNIPER", 1032.14000000, -60.95000000, 7.49000000, 5.00000000, 2.20000000, 4.00000000, 0.00000000, 0.00000000, 84.30000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U802, "TETH_SNIPERS_FIRST", 1018.87500000, -67.61423000, 8.76532400, 1.50000000, 4.80000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U803, "TETH_SNIPERS_SECOND", 1020.81600000, -65.36088000, 8.76533400, 5.00000000, 1.50000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U804, "TETH_SNIPERS_THIRD", 1022.81100000, -67.29227000, 8.76533400, 1.50000000, 4.80000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U806[0], "TETH_GROUND_0", 1014.69000000, -68.21000000, 4.76000000, 8.70000000, 6.50000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U806[1], "TETH_GROUND_1", 1013.44000000, -62.49000000, 4.76000000, 3.00000000, 4.00000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U806[2], "TETH_GROUND_2", 1010.80000000, -58.68000000, 4.76000000, 4.80000000, 9.80000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U806[3], "TETH_GROUND_3", 1010.80000000, -53.83000000, 4.76000000, 5.00000000, 9.80000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U806[4], "TETH_GROUND_4", 1023.55000000, -55.28000000, 4.76000000, 8.00000000, 16.00000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U806[5], "TETH_GROUND_5", 1026.45000000, -61.80000000, 4.76000000, 5.50000000, 7.50000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U806[6], "TETH_GROUND_6", 1027.13000000, -68.48000000, 4.76000000, 8.30000000, 6.50000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U806[7], "TETH_GROUND_7", 1032.14000000, -70.45000000, 4.76000000, 4.20000000, 4.20000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U806[8], "TETH_GROUND_8", 1007.00000000, -67.92725000, 4.80018800, 10.00000000, 9.00000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14409( ref l_U816, "TETH_GROUND_LAST", 1033.32000000, -61.90000000, 4.76000000, 8.00000000, 20.79000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    l_U543[0] = 434544317;
    l_U543[1] = 1964270085;
    l_U543[2] = 1964270085;
    l_U543[3] = 57534114;
    l_U543[4] = 1964270085;
    l_U543[5] = 434544317;
    l_U543[6] = 1964270085;
    l_U543[7] = 1964270085;
    l_U543[8] = 57534114;
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_12622(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_13321(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_14409(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATE_KILLHOUSE_PLACEMENTS */ void sub_15598()
{
     /* WRITESCRIPTLOG */ sub_567( "AT", "P_CREATE_KILLHOUSE_PLACEMENTS", 0 );
    l_U879[0] =  /* CREATEPLACEMENT */ sub_15717( -4072149, l_U885, 0.00000000, 0.00000000, 60.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U879[0] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U879[0], "MloRoom_range" );
    }
    l_U915[0] =  /* CREATEPLACEMENT */ sub_15717( -4072149, 1035.98000000, -49.05000000, 9.06000000, 0, 0, 0, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U915[0] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U915[0], "MloRoom_Killhouse" );
    }
    l_U923 = CREATE_AMMOBAG_PLACEMENT_ROTATE( 1028.75000000, -65.43000000, 4.80000000, 0.00000000, 0.00000000, 2.30000000, 10.00000000, 3.00000000, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U923 ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U923, "MloRoom_Killhouse" );
         /* P_SETUP_AMMO_BAG_DEFAULTS */ sub_16162( l_U923 );
    }
    return;
}

/* CREATEPLACEMENT */ void sub_15717(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_SETUP_AMMO_BAG_DEFAULTS */ void sub_16162(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        SET_AMMOBAG_REGEN_TIME( uParam0, 10.00000000 );
        SET_AMMOBAG_REGEN_RANGE( uParam0, 3.00000000 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1088031219, 45 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 954369040, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1138793073, 95 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1087746638, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1295933220, 30 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1383321053, 85 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1481241171, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1889644301, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -790090695, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1742569970, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1575030772, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1622373246, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 558118158, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1701914198, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1126469201, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 936600426, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 205668857, 0 );
    }
    return;
}

/* P_REQUEST_KILLHOUSE_PERSISTENT_ASSETS */ void sub_16657()
{
     /* WRITESCRIPTLOG */ sub_567( "AT", "P_REQUEST_KILLHOUSE_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_16772( ref l_U924, ref g_U2468 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_19694( ref g_U3537, ref g_U2889 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21597( 434544317, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21597( 1964270085, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21597( 10648147, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21597( 57534114, ref g_U2613 );
     /* WRITESCRIPTLOG */ sub_567( "AT", "P_REQUEST_KILLHOUSE_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_16772(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_16845( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_16845(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_16912( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17170( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_16912(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17170( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17170( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17170( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18701( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17170( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17170( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_17170(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17231( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_17231(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_18701(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_19694(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_19747( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20002( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_19747(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20002( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20002( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20002( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18701( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20002( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20002( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_20002(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17231( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_21597(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_21651( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21912( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_21651(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21912( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21912( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21912( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18701( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21912( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21912( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_21912(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17231( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_KILLHOUSE_NONPERSISTENT_ASSETS */ void sub_23632()
{
     /* WRITESCRIPTLOG */ sub_567( "AT", "P_REQUEST_KILLHOUSE_NONPERSISTENT_ASSETS start", 0 );
     /* WRITESCRIPTLOG */ sub_567( "AT", "P_REQUEST_KILLHOUSE_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_23884(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_24281(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_24655(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_25293(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_567( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_7183( uParam0,  /* PLAYER_PED_ID */ sub_919() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_25851(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_567( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_567( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_10449( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_26142( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_26619( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_26619( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_26879( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_26619( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_26879( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_26879( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_26619( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_26879( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_26879( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_26879( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_26619( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_26879( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_26879( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_26879( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_26879( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_28459( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_567( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_26142(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7464( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_567( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_567( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_26619(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_26879(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_28459(int iParam0)
{
     /* WRITE_STRING */ sub_9284( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_28547( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_28624( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_28624( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_28624( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_28624( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_28624( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_29494( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU52 );
     /* WRITE_STRING */ sub_9284( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU96 );
     /* WRITE_STRING */ sub_9284( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU100 );
     /* WRITE_STRING */ sub_9284( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU104 );
     /* WRITE_STRING */ sub_9284( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU108 );
     /* WRITE_STRING */ sub_9284( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU112 );
     /* WRITE_STRING */ sub_9284( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU116 );
     /* WRITE_STRING */ sub_9284( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU120 );
     /* WRITE_STRING */ sub_9284( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU124 );
     /* WRITE_STRING */ sub_9284( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU128 );
     /* WRITE_STRING */ sub_9284( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_28793( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_28793( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_28793( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_28547(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_28624(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_28793(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_29494(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_30557(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_30690( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* LOADMODEL */ void sub_30690(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_9284( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* F_SETUP_GROUND_LEVEL_ENEMIES */ int sub_31263()
{
    char[64] cVar2;
    unknown uVar18;

    switch (l_U407)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_567( "AT", "eSpawnGroundEnemies = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_31411( ref l_U537, 1056964608, 0 );
        l_U408 = 0;
        l_U407 = 2;
         /* WRITESCRIPTLOG */ sub_567( "AT", "eSpawnGroundEnemies = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating piGroundEnemies[", 64 );
        ConcatString(ref cVar2, l_U408, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        l_U527[l_U408] =  /* CREATEPED */ sub_31935( ref l_U409[l_U408] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_32671( l_U527[l_U408], ref l_U537 );
        if (NOT (IS_PED_DEAD( l_U527[l_U408] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U527[l_U408], 1 );
            SET_PED_ALERTNESS( l_U527[l_U408], 3 );
            TASK_STAND_STILL( l_U527[l_U408], -1 );
            SET_ROOM_FOR_PED_BY_NAME( l_U527[l_U408], "MloRoom_Killhouse" );
            SET_PED_AI_TEMPLATE( l_U527[l_U408], "AIT_EXPERT" );
        }
        uVar18 =  /* F_GIVEPEDWEAPON */ sub_9675( l_U527[l_U408], l_U543[l_U408], 25000, 0, 0 );
        if (l_U543[l_U408] != 1964270085)
        {
             /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_33272( ref uVar18, 14, 1 );
        }
        l_U408++;
        if (l_U408 >= l_U527)
        {
            l_U407 = 3;
             /* WRITESCRIPTLOG */ sub_567( "AT", "eSpawnGroundEnemies = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U537._fU0, 1 );
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_33550( ref l_U527, "GroundEnemies" );
         /* P_SETUP_GROUND_ENEMY_TETHERS */ sub_33680();
         /* P_DEACTIVATEPEDARRAY */ sub_34233( ref l_U527 );
        l_U407 = 4;
         /* WRITESCRIPTLOG */ sub_567( "AT", "eSpawnGroundEnemies = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_31411(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* CREATEPED */ void sub_31935(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_30690( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_32426( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_32527( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_32426(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_32527(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_32671(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_9284( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_31411( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_31411( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ void sub_33272(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (GET_DOES_WEAPON_EXIST( (uParam0^) ))
    {
        if (bParam2)
        {
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
        else
        {
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_33550(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_SETUP_GROUND_ENEMY_TETHERS */ void sub_33680()
{
     /* P_TETHERPED */ sub_33737( ref l_U806[0], l_U527[0], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[1], l_U527[0], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[2], l_U527[0], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[8], l_U527[0], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[0], l_U527[1], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[1], l_U527[1], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[2], l_U527[1], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[8], l_U527[1], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[3], l_U527[2], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[3], l_U527[3], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[4], l_U527[4], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[5], l_U527[4], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[4], l_U527[5], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[5], l_U527[5], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[4], l_U527[6], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[5], l_U527[6], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[6], l_U527[7], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[7], l_U527[7], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[6], l_U527[8], 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[7], l_U527[8], 1 );
    return;
}

/* P_TETHERPED */ void sub_33737(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_DEACTIVATEPEDARRAY */ void sub_34233(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_34287( (uParam0^)[I] );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_34287(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* NIS_POST_SETUP */ void sub_34606(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_957(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_919(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_34704();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_34704()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_919(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_919(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_919(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_919(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_SET_DOORS_ONE_WAY */ void sub_34981(unknown uParam0, unknown uParam1)
{
     /* P_SETDOORMINMAXLIMIT */ sub_35021( uParam0, 0, 90 );
     /* P_SETDOORMINMAXLIMIT */ sub_35021( uParam1, 65446, 0 );
     /* P_SETDOORAUTOCLOSE */ sub_35256( uParam0, 1 );
     /* P_SETDOORAUTOCLOSE */ sub_35256( uParam1, 1 );
    return;
}

/* P_SETDOORMINMAXLIMIT */ void sub_35021(int iParam0, float fParam1, float fParam2)
{
    if (( /* F_DOESDOOREXIST */ sub_12227( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12311( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        PRINTSTRING( "[SP]### Error: Door fMinLimit greater than fMaxLimit (default min:-81.0 max:81.0) ###" );
        PRINTNL();
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

/* P_SETDOORAUTOCLOSE */ void sub_35256(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_12227( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12311( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* TAKE_PAINKILLER_ARRAY_SNAPSHOT */ void sub_35360(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if (DOES_PLACEMENT_EXIST( (uParam0^)[I] ))
        {
             /* WRITESCRIPTLOG */ sub_567( "RJM", "DO_ANY_PAINKILLERS_STILL_EXIST - Found a pill in there, we can still play some V.O.", 0 );
            (uParam1^)[I] = 1;
        }
        else
        {
            (uParam1^)[I] = 0;
        }
    }
    return;
}

/* F_SETUP_SNIPERS */ int sub_36080()
{
    unknown uVar2;
    char[64] cVar3;

    switch (l_U555)
    {
        case 1:
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U739, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_567( "AT", "eSpawnSnipers = ENTITY_STATE_INIT", 0 );
             /* P_SETUP_AI_GROUP */ sub_31411( ref l_U587, 1056964608, 0 );
            l_U556 = 0;
            l_U555 = 2;
             /* WRITESCRIPTLOG */ sub_567( "AT", "eSpawnSnipers = ENTITY_STATE_CREATING", 0 );
        }
        break;
        case 2:
        StrCopy( ref cVar3, "Creating psSnipers[", 64 );
        ConcatString(ref cVar3, l_U556, 64);
        ConcatString(ref cVar3, "]", 64);
        PRINTSTRING( ref cVar3 );
        l_U584[l_U556] =  /* CREATEPED */ sub_31935( ref l_U557[l_U556] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_32671( l_U584[l_U556], ref l_U587 );
        uVar2 =  /* F_GIVEPEDWEAPON */ sub_9675( l_U584[l_U556], 10648147, 25000, 0, 0 );
        ENABLE_WEAPON_ATTACHMENT( uVar2, 13, 1 );
        SET_LASER_SIGHT_ATTACHMENT( uVar2, -938171172 );
        if (NOT (IS_PED_DEAD( l_U584[l_U556] )))
        {
             /* P_DEACTIVATEPED */ sub_34287( l_U584[l_U556] );
            SET_PED_AI_TEMPLATE( l_U584[l_U556], "AIT_SNIPER" );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U584[l_U556], 1 );
            SET_PED_COMBAT_ATTRIBUTES( l_U584[l_U556], 16, 0 );
            SET_PED_EMOTION_STATE( l_U584[l_U556], 3 );
            SET_PED_ALERTNESS( l_U584[l_U556], 3 );
            SET_PED_FLAG_BLOCK_BLINDFIRE_IN_COVER( l_U584[l_U556], 1 );
            SET_PED_FLAG_BLOCK_LEANFIRE_IN_COVER( l_U584[l_U556], 1 );
            SET_PED_PINNED_DOWN( l_U584[l_U556], 0, -1 );
            SET_PED_COMBAT_ATTRIBUTES( l_U584[l_U556], 1, 0 );
            SET_PED_IGNORE_LOS_CHECKS( l_U584[l_U556], 0 );
            SET_PED_FLAG_BLOCK_GORE_REACTION( l_U584[l_U556], 1 );
            SET_ROOM_FOR_PED_BY_NAME( l_U584[l_U556], "MloRoom_Killhouse" );
            SET_PED_ACCURACY( l_U584[l_U556], 31186664 );
        }
        l_U556++;
        if (l_U556 >= l_U584)
        {
            l_U555 = 3;
             /* WRITESCRIPTLOG */ sub_567( "AT", "eSpawnSnipers = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_33550( ref l_U584, "Sniper" );
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U587._fU0, 0 );
        SET_GROUP_MAX_NUMS_FIRING( l_U587._fU0, ref l_U593 );
         /* P_TETHERPED */ sub_33737( ref l_U805, l_U584[0], 1 );
         /* P_TETHERPED */ sub_33737( ref l_U802, l_U584[1], 1 );
         /* WRITESCRIPTLOG */ sub_567( "AT", "FIRST TIME Moving snipers to position 1.", 0 );
         /* P_ACTIVATEPED */ sub_37229( l_U584[1] );
        if (NOT (IS_PED_DEAD( l_U584[1] )))
        {
            uVar2 = GET_WEAPON_FROM_HAND( l_U584[1], 0, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uVar2, 13, 1 );
            REGISTER_TARGET( l_U584[1],  /* PLAYER_PED_ID */ sub_919() );
            SET_LOCKED_TARGET( l_U584[1],  /* PLAYER_PED_ID */ sub_919() );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U584[1], 0 );
        }
         /* P_SNIPER_MOVE_FORWARD */ sub_37461( ref l_U584[1], l_U802 );
        l_U760._fU64 = 0;
        l_U781._fU64 = 0;
         /* CREATETIMER */ sub_1703( ref l_U817, 2000, 1, 0 );
         /* STARTTIMER */ sub_1853( ref l_U817 );
        l_U555 = 4;
         /* WRITESCRIPTLOG */ sub_567( "AT", "eSpawnSnipers = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_36157(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_36233(  /* PLAYER_PED_ID */ sub_919(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* F_ISPEDINTRIGGERBOX */ int sub_36233(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_ACTIVATEPED */ void sub_37229(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_SNIPER_MOVE_FORWARD */ void sub_37461(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
         /* P_REMOVEALLTETHERSFROMPED */ sub_37538( (uParam0^) );
         /* P_TETHERPED */ sub_33737( ref uParam1, (uParam0^), 1 );
    }
    return;
}

/* P_REMOVEALLTETHERSFROMPED */ void sub_37538(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        RESET_PED_TETHERING( uParam0 );
    }
    return;
}

/* P_HANDLE_SNIPER_POSITIONS */ void sub_37767()
{
    if ( /* ISTIMERDONE */ sub_2219( ref l_U817 ))
    {
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U739, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_567( "AT", "Moving snipers to position 1.", 0 );
             /* P_SNIPER_MOVE_FORWARD */ sub_37461( ref l_U584[1], l_U802 );
            l_U739._fU64 = 0;
            l_U781._fU64 = 0;
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U760, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_567( "AT", "Moving snipers to position 2.", 0 );
             /* P_SNIPER_MOVE_FORWARD */ sub_37461( ref l_U584[1], l_U803 );
            l_U739._fU64 = 0;
            l_U781._fU64 = 0;
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U781, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_567( "AT", "Moving snipers to position 3.", 0 );
             /* P_SNIPER_MOVE_FORWARD */ sub_37461( ref l_U584[1], l_U804 );
            l_U739._fU64 = 0;
            l_U760._fU64 = 0;
        }
         /* CREATETIMER */ sub_1703( ref l_U817, 2000, 1, 0 );
         /* STARTTIMER */ sub_1853( ref l_U817 );
    }
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_38139(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* UPDATE_PILL_VO */ int sub_38586(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    if ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_957() )) == 0)
    {
        if (( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_1982()) == 0)
        {
            for ( I = 0; I <= ((uParam1^) - 1); I++ )
            {
                if ((uParam2^)[I])
                {
                    if ((HAS_PLACEMENT_BEEN_COLLECTED( (uParam1^)[I] )) || (NOT (DOES_PLACEMENT_EXIST( (uParam1^)[I] ))))
                    {
                        (uParam2^)[I] = 0;
                        if (TIME_SINCE_LAST_MONOLOGUE() > 5000)
                        {
                             /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2486( ref l_U317 );
                             /* P_SPEECH_PLAY_MAX_MONOLOGUE */ sub_38746( uParam0, ref l_U317 );
                            return 1;
                        }
                    }
                }
            }
        }
    }
    return 0;
}

/* P_SPEECH_PLAY_MAX_MONOLOGUE */ void sub_38746(unknown uParam0, unknown uParam1)
{
     /* WRITESCRIPTLOG */ sub_567( "SBA", "P_SPEECH_PLAY_MAX_MONOLOGUE", "***" );
    if ( /* IS_MAX_VALID */ sub_38833())
    {
         /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2486( uParam1 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2597( 0,  /* PLAYER_PED_ID */ sub_919(), "MAX", uParam1, 2, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2597( 1,  /* PLAYER_PED_ID */ sub_919(), "MAX", uParam1, 2, 0 );
         /* PLAY_SINGLE_SPEECH */ sub_2867( uParam0, uParam1, 8, 1 );
    }
    return;
}

/* IS_MAX_VALID */ int sub_38833()
{
    if ( /* IS_PED_VALID */ sub_38863(  /* PLAYER_PED_ID */ sub_919() ))
    {
        return 1;
    }
    return 0;
}

/* IS_PED_VALID */ int sub_38863(unknown uParam0)
{
    if ((NOT (IS_PED_DEAD( uParam0 ))) AND (DOES_PED_EXIST( uParam0 )))
    {
        return 1;
    }
    return 0;
}

/* P_TASK_ENEMY_TO_COMBAT */ void sub_39171(unknown uParam0)
{
    unknown uVar3;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        SET_PED_FREEZE_PROCESSING( (uParam0^), 0 );
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_919() );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar3 );
        REGISTER_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_919() );
        SET_LOCKED_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_919() );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    return;
}

/* P_TASK_SNAP_ENEMY_TO_COVER */ void sub_39393(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_919() ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        SET_PED_FREEZE_PROCESSING( (uParam0^), 0 );
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar6 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_SNAP_TO_COVER( 0, uParam1, uParam2,  /* PLAYER_PED_ID */ sub_919() );
        CLOSE_SEQUENCE_TASK( uVar6 );
        if (bParam3)
        {
            SET_PED_FLAG_LOCK_TO_COVER( (uParam0^), 1 );
        }
        else
        {
            SET_PED_FLAG_LOCK_TO_COVER( (uParam0^), 0 );
        }
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar6 );
        REGISTER_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_919() );
        SET_LOCKED_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_919() );
        CLEAR_SEQUENCE_TASK( uVar6 );
    }
    return;
}

/* PED_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS */ void sub_39711(unknown uParam0, unknown uParam1)
{
    if ( /* IS_PED_VALID */ sub_38863( (uParam0^) ))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( (uParam0^), uParam1 );
    }
    return;
}

/* PED_TASK_ATTACK_MOVE */ void sub_39846(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    if ( /* IS_PED_VALID */ sub_38863( uParam0 ))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( uParam0 );
        TASK_ATTACK_MOVE( uParam0, uParam1, uParam4, uParam5, uParam6, uParam7 );
    }
    return;
}

/* PED_SET_REGISTER_TARGET_PLAYER */ void sub_39976(unknown uParam0)
{
    if (( /* IS_MAX_VALID */ sub_38833()) AND ( /* IS_PED_VALID */ sub_38863( (uParam0^) )))
    {
         /* PED_SET_REGISTER_TARGET */ sub_40045( uParam0,  /* PLAYER_PED_ID */ sub_919() );
    }
    return;
}

/* PED_SET_REGISTER_TARGET */ void sub_40045(unknown uParam0, unknown uParam1)
{
    if (( /* IS_PED_VALID */ sub_38863( uParam1 )) AND ( /* IS_PED_VALID */ sub_38863( (uParam0^) )))
    {
        REGISTER_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* P_CREATE_LAST_CHARGER_ENEMY */ void sub_40555()
{
     /* WRITESCRIPTLOG */ sub_567( "SBA", "P_CREATE_LAST_CHARGER_ENEMY", 0 );
     /* PED_INITIALIZE */ sub_40672( ref l_U597, ref l_U610, 57534114, "AIT_EXPERT", 0, 25000, 3, 0, 25000 );
     /* PED_SET_ROOM_BY_NAME */ sub_40947( ref l_U610, g_U3461 );
    SET_PED_INVINCIBLE( l_U610, 1 );
    SET_PED_NO_RAGDOLL_TO_BULLET_UNLESS_DEAD( l_U610, 1 );
     /* P_DEACTIVATEPED */ sub_34287( l_U610 );
     /* P_SETDOORMINMAXLIMIT */ sub_35021( ref g_U4009, -85.00000000, 75.00000000 );
    DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U4009._fU0, g_U4009._fU4 ), 0 );
    return;
}

/* PED_INITIALIZE */ void sub_40672(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, int iParam7, unknown uParam8)
{
    unknown uVar11;

     /* CLEANPED */ sub_6245( (uParam1^) );
    (uParam1^) =  /* CREATEPED */ sub_31935( uParam0 );
    if ( /* IS_PED_VALID */ sub_38863( (uParam1^) ))
    {
        uVar11 =  /* F_GIVEPEDWEAPON */ sub_9675( (uParam1^), uParam2, uParam5, 0, 1 );
        if (iParam7 != 0)
        {
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8880( (uParam1^), iParam7, 0, uParam8, 0 );
        }
        SET_PED_AI_TEMPLATE( (uParam1^), uParam3 );
        SET_PED_ALERTNESS( (uParam1^), uParam6 );
        switch (uParam4)
        {
            case 0: break;
            case 1:
            ENABLE_WEAPON_ATTACHMENT( uVar11, 13, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uVar11, 13, 1 );
            break;
            case 2:
            ENABLE_WEAPON_ATTACHMENT( uVar11, 14, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uVar11, 14, 1 );
            break;
            case 3:
            ENABLE_WEAPON_ATTACHMENT( uVar11, 12, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uVar11, 12, 1 );
            break;
        }
    }
    return;
}

/* PED_SET_ROOM_BY_NAME */ void sub_40947(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    if ( /* IS_PED_VALID */ sub_38863( (uParam0^) ))
    {
        SET_ROOM_FOR_PED_BY_NAME( (uParam0^), ref uParam1 );
    }
    return;
}

/* P_FREE_UP_LAST_ENEMIES */ void sub_41298()
{
    if (NOT l_U553)
    {
        if (((IS_PED_DEAD( l_U584[0] )) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_38139( ref l_U527 )) <= 2)) || ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_36157( ref l_U718, 0 )))
        {
             /* WRITESCRIPTLOG */ sub_567( "SBA", "P_FREE_UP_LAST_ENEMIES: Go go go...  GO!", 0 );
            if (NOT (IS_PED_DEAD( l_U527[8] )))
            {
                RESET_PED_TETHERING( l_U527[8] );
                TASK_ATTACK_MOVE( l_U527[8], 1026.66200000, -61.98876000, 4.80030500, 2, 1101004800, -1082130432, 3 );
            }
            l_U553 = 1;
        }
    }
    return;
}

/* P_DEPLOY_LAST_CHARGER */ void sub_41551()
{
     /* WRITESCRIPTLOG */ sub_567( "SBA", "P_DEPLOY_LAST_CHARGER: Send in the last guy", 0 );
     /* P_ACTIVATEPED */ sub_37229( l_U610 );
     /* PED_TASK_RUN_TO_LOCATION_AND_COMBAT_PLAYER */ sub_41674( ref l_U610, 1034.91000000, -53.48791000, 7.81206200, 3 );
     /* P_TETHERPED */ sub_33737( ref l_U816, l_U610, 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[6], l_U610, 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[5], l_U610, 1 );
     /* P_TETHERPED */ sub_33737( ref l_U806[4], l_U610, 1 );
    return;
}

/* PED_TASK_RUN_TO_LOCATION_AND_COMBAT_PLAYER */ void sub_41674(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    unknown uVar7;

    if ( /* IS_PED_VALID */ sub_38863( (uParam0^) ))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        CLEAR_LOCKED_TARGET( (uParam0^) );
         /* PED_SET_REGISTER_TARGET_PLAYER */ sub_39976( uParam0 );
         /* PED_SET_LOCKED_ON_PLAYER */ sub_41771( uParam0 );
        OPEN_SEQUENCE_TASK( ref uVar7 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, uParam1, uParam4, 20000, 1048576000, 0, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        if ( /* IS_MAX_VALID */ sub_38833())
        {
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_919() );
        }
        CLOSE_SEQUENCE_TASK( uVar7 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar7 );
        CLEAR_SEQUENCE_TASK( uVar7 );
    }
    return;
}

/* PED_SET_LOCKED_ON_PLAYER */ void sub_41771(unknown uParam0)
{
    if (( /* IS_MAX_VALID */ sub_38833()) AND ( /* IS_PED_VALID */ sub_38863( (uParam0^) )))
    {
         /* PED_SET_LOCKED_ON_PED */ sub_41834( uParam0,  /* PLAYER_PED_ID */ sub_919() );
    }
    return;
}

/* PED_SET_LOCKED_ON_PED */ void sub_41834(unknown uParam0, unknown uParam1)
{
    if (( /* IS_PED_VALID */ sub_38863( uParam1 )) AND ( /* IS_PED_VALID */ sub_38863( (uParam0^) )))
    {
        SET_LOCKED_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* F_GETDOOROPENRATIO */ void sub_42188(int iParam0)
{
    int iVar3;
    float Result;

    if (( /* F_DOESDOOREXIST */ sub_12227( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12311( iParam0 );
    }
    iVar3 = 0;
    Result = 0.00000000;
    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar3, ref Result );
    return Result;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_42435(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_38139( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* F_CAN_AMBIENT_SPEECH_PLAY */ int sub_42715()
{
    if ((l_U327._fU16) || ( /* ISTIMERDONE */ sub_2219( ref l_U327 )))
    {
        return 1;
    }
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_42826(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2486( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2597( 0,  /* PLAYER_PED_ID */ sub_919(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2597( 1,  /* PLAYER_PED_ID */ sub_919(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_2867( uParam0, uParam1, 8, 1 );
    return;
}

/* P_PLAY_DOOR_ALARM_SFX */ void sub_42952()
{
    l_U877 = GET_SOUND_ID();
    PLAY_SOUND_FROM_COORD( l_U877, "FIRING_RANGE_CEASE_FIRE", g_U4009._fU4 );
     /* WRITESCRIPTLOG */ sub_567( "AT", "Playing FIRING_RANGE_CEASE_FIRE!", 0 );
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_43104(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_36233(  /* PLAYER_PED_ID */ sub_919(), uParam0 );
}

/* P_HANDLE_KH_DEBUG_WIDGET */ void sub_43880()
{
    if (NOT l_U947)
    {
        START_WIDGET_GROUP( "Placments" );
        ADD_WIDGET_BOOL( "Create Placements", ref l_U948 );
        START_WIDGET_GROUP( "Medicine Cabinet" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U882._fU0, 55536, 10000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U882._fU4, 55536, 10000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U882._fU8, 55536, 10000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Pill 1" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U885._fU0, 55536, 10000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U885._fU4, 55536, 10000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U885._fU8, 55536, 10000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Pill 2" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U888._fU0, 55536, 10000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U888._fU4, 55536, 10000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U888._fU8, 55536, 10000, 0.10000000 );
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        l_U947 = 1;
    }
    if (l_U948)
    {
         /* P_CLEANUP_KILLHOUSE */ sub_6126();
         /* P_CREATE_KILLHOUSE_PLACEMENTS */ sub_15598();
        l_U948 = 0;
    }
    return;
}

/* P_RELEASE_KILLHOUSE_ASSETS */ void sub_44406()
{
     /* WRITESCRIPTLOG */ sub_567( "AT", "P_RELEASE_KILLHOUSE_ASSETS", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_44493( ref l_U924, ref g_U2468 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_45723( ref g_U3537, ref g_U2889 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_46071( 434544317, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_46071( 1964270085, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_46071( 10648147, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_46071( 57534114, ref g_U2613 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_44493(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_44566( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_44566(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_44710( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_44710(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_45723(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_44710( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_46071(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_44710( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

