void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U55 = {0, 0, 0};
    StrCopy( ref l_U58, "DUMMY", 32 );
    l_U66 = 1;
    l_U71 = 0;
    l_U72 = 0;
    l_U73 = 0;
    l_U76 = 0;
    l_U140 = 0;
    l_U141 = 0;
    l_U142 = 1500;
    l_U213 = 0;
    l_U215 = 1;
    l_U216 = 0;
    l_U217 = 0;
    l_U245 = 1900;
    l_U246 = 2000;
    l_U348 = 2250;
    l_U358 = 600;
    l_U368 = 1850;
    l_U378 = 3000;
    l_U389 = -1;
    l_U550 = -1;
    l_U575 = 0;
    l_U576 = 1000;
    l_U586 = 8000;
    l_U596 = 4000;
    l_U606 = 150;
    l_U799 = 0;
    l_U1005 = 0;
    l_U1006 = 0;
    l_U1007 = 0;
     /* WRITESCRIPTLOG */ sub_550( "SP", "Script s_police_parking.sc is starting up...", 0 );
     /* P_PL_POPULATE_SCRIPT_ARRAYS */ sub_668();
    l_U213 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_1387();
        if (l_U217 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_11597();
        }
         /* P_PL_DEBUG_TUNING_WIDGET */ sub_72562();
        WAIT( 0 );
    }
     /* P_CLEANUP_PL */ sub_4040();
     /* P_RELEASE_PL_ASSETS */ sub_73191();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_police_parking" );
     /* WRITESCRIPTLOG */ sub_550( "SP", "Script s_police_parking.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_550(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_PL_POPULATE_SCRIPT_ARRAYS */ void sub_668()
{
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_POPULATE_SCRIPT_ARRAYS start", 0 );
    l_U188[0] = -417930772;
    l_U188[1] = 474775165;
    l_U188[2] = -1256275333;
    l_U188[3] = 242268567;
    l_U188[4] = 2038070575;
    l_U188[5] = 1071653504;
    l_U188[6] = 975934894;
    l_U188[7] = -79812758;
    l_U188[8] = 159958015;
    l_U188[9] = 409035184;
    l_U188[10] = 905223382;
    l_U188[11] = 1155021469;
    l_U188[12] = 1376670985;
    l_U188[13] = 1634530246;
    l_U188[14] = 2125082180;
    l_U188[15] = -1905799745;
    l_U188[16] = g_U814;
    l_U188[17] = 1322684573;
    l_U207[0] = -862236369;
    l_U207[1] = 434544317;
    l_U207[2] = 1308526797;
    l_U207[3] = 377623895;
    l_U207[4] = -1659006841;
    l_U416[0] = {30.73000000, -58.93000000, -2.61500000};
    l_U432[0] = -175.00000000;
    l_U438[0] = 2038070575;
    l_U416[1] = {22.10000000, -60.17918000, -3.46054200};
    l_U432[1] = 0.00000000;
    l_U438[1] = 2038070575;
    l_U416[2] = {37.54500000, -60.25700000, -3.46054200};
    l_U432[2] = 0.00000000;
    l_U438[2] = 2038070575;
    l_U416[3] = {27.97720000, -50.84369000, -3.46054200};
    l_U432[3] = 95.00000000;
    l_U438[3] = 2038070575;
    l_U416[4] = {20.00700000, -51.18000000, -2.61500000};
    l_U432[4] = 285.00000000;
    l_U438[4] = 1071653504;
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_POPULATE_SCRIPT_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_1387()
{
    if (g_U821 == 4)
    {
        switch (l_U217)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1589()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
            {
                l_U217 = 1;
                 /* WRITESCRIPTLOG */ sub_550( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_2107())
            {
                l_U217 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_2167( 0 )) == 1)
            {
                l_U217 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
            {
                l_U217 = 3;
                 /* WRITESCRIPTLOG */ sub_550( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_550( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1526() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1526(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1488() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1488(), 0 );
                }
            }
            if ((g_U862[5]._fU40 != 4) AND (g_U862[5]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_550( "CR", "Shutting down script for MCE_UPPER_PARKING.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_3914( ref g_U862[5] );
                SET_EXITFLAG_FOR_SCRIPT( g_U862[5]._fU32 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            AUDIO_MUSIC_STOP_ONESHOT();
             /* P_CLEANUP_PL */ sub_4040();
            l_U217 = 4;
             /* WRITESCRIPTLOG */ sub_550( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_550( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_6915( ref l_U152,  /* PLAYER_PED_ID */ sub_1488() );
            l_U217 = 5;
             /* WRITESCRIPTLOG */ sub_550( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_550( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U213 = 1;
            l_U215 = 0;
            l_U217 = 0;
             /* WRITESCRIPTLOG */ sub_550( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_1488()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1526() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1526()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1589()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1488(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1526(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1526(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1488() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1488(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_2107()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_2167(int iParam0)
{
    iParam0 = 1;
    switch (l_U141)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_2249( ref l_U143 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
            {
                l_U142 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_2383( ref l_U143, l_U142, 1, 1 );
             /* STARTTIMER */ sub_2533( ref l_U143 );
        }
        if ( /* ISTIMERDONE */ sub_2666( ref l_U143 ))
        {
             /* WRITESCRIPTLOG */ sub_550( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1526() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1526(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U141 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U141 = 2;
            }
            else
            {
                l_U141 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_550( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_3167();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_550( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_3167();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_2249(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_2383(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2533(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2666(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_3167()
{
     /* WRITESCRIPTLOG */ sub_550( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_3242( ref l_U143 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1526() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1526(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U140 = 0;
    l_U140 = l_U140;
    l_U141 = 0;
    return;
}

/* RESETTIMER */ void sub_3242(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_3914(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_PL */ void sub_4040()
{
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_CLEANUP_PL start", 0 );
    if ((CUTSCENE_NAMED_IS_LOADING( "MID_05_PP_concat" )) || (CUTSCENE_IS_LOADED( "MID_05_PP_concat" )))
    {
         /* WRITESCRIPTLOG */ sub_550( "AT", "Purging loaded cutscene.", 0 );
        CLEAR_NAMED_CUTSCENE( "MID_05_PP_concat" );
    }
    RESET_PED_MODEL_LOD_DISTANCES( -417930772 );
    RESET_PED_MODEL_LOD_DISTANCES( 1322684573 );
     /* P_SAFE_STOP_SOUND */ sub_4249( l_U389, 0 );
     /* P_SAFE_RELEASE_SOUND_ID */ sub_4432( ref l_U389 );
     /* P_SAFE_REMOVE_PARTICLE_FX */ sub_4640( ref l_U575 );
    ISEQ_TERMINATE( 984386305 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4731( 984386305, ref g_U2662 );
    ISEQ_TERMINATE( 1507052255 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4731( 1507052255, ref g_U2662 );
     /* CLEANPEDARRAY */ sub_5824( ref l_U328 );
     /* CLEANPED */ sub_5874( l_U564 );
     /* CLEANPEDARRAY */ sub_5824( ref l_U685 );
     /* CLEANPEDARRAY */ sub_5824( ref l_U785 );
     /* CLEANPEDARRAY */ sub_5824( ref l_U831 );
     /* CLEANVEHICLE */ sub_6020( l_U248 );
     /* CLEANVEHICLEARRAY */ sub_6093( ref l_U410 );
     /* CLEANOBJECTARRAY */ sub_6175( ref l_U337 );
     /* CLEANOBJECT */ sub_6227( g_U4334 );
     /* CLEANOBJECT */ sub_6227( l_U388 );
     /* CLEANPLACEMENT */ sub_6325( l_U399 );
     /* CLEANPLACEMENTARRAY */ sub_6389( ref l_U400 );
     /* CLEANPLACEMENTARRAY */ sub_6389( ref l_U403 );
     /* CLEANPLACEMENT */ sub_6325( g_U703._fU0 );
     /* P_STOP_SP_CHALLENGES */ sub_6489();
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U444[0]._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U444[1]._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U444[2]._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U444[3]._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U444[4]._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U835._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U856._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U984._fU0 );
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_CLEANUP_PL end", 0 );
    return;
}

/* P_SAFE_STOP_SOUND */ void sub_4249(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
         /* WRITESCRIPTLOG */ sub_550( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_550( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

/* P_SAFE_RELEASE_SOUND_ID */ void sub_4432(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
         /* WRITESCRIPTLOG */ sub_550( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_550( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

/* P_SAFE_REMOVE_PARTICLE_FX */ void sub_4640(unknown uParam0)
{
    if ((uParam0^) != 0)
    {
        REMOVE_PARTICLE_FX( (uParam0^) );
        (uParam0^) = 0;
    }
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_4731(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4869( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_4869(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* CLEANPEDARRAY */ void sub_5824(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_5874( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_5874(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANVEHICLE */ void sub_6020(unknown uParam0)
{
    if (IS_VEHICLE_DEAD( uParam0 ))
    {
        ;
    }
    if (DOES_VEHICLE_EXIST( uParam0 ))
    {
        DELETE_VEHICLE( ref uParam0 );
    }
    return;
}

/* CLEANVEHICLEARRAY */ void sub_6093(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANVEHICLE */ sub_6020( (uParam0^)[I] );
    }
    return;
}

/* CLEANOBJECTARRAY */ void sub_6175(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANOBJECT */ sub_6227( (uParam0^)[I] );
    }
    return;
}

/* CLEANOBJECT */ void sub_6227(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_6325(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_6389(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_6325( (uParam0^)[I] );
    }
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_6489()
{
     /* WRITESCRIPTLOG */ sub_550( "CCB", "P_STOP_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_550( "CCB", "Stopping the Precinct_Parking context...", 0 );
    END_CONTEXT( "Precinct_Parking" );
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_6915(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_550( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_7134( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_8298( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8612( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9091( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8612( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9091( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8612( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9091( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9407( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9091( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9407( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9091( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_9979( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_10181( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1488(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_550( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_7134(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7196( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_7196(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_8298(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_8612(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9016( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_9016(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_9091(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_9407(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9016( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_9979(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_10181(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7196( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_10279( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_10279(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_11597()
{
    int iVar2;

    iVar2 = l_U213;
     /* P_HANDLE_SP_CHALLENGES */ sub_11632();
    switch (l_U213)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_550( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_14364();
         /* P_SET_STATIC_DATA */ sub_14790();
         /* P_INITIALIZE_SP_CHALLENGES */ sub_17385();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U213 = 2;
         /* WRITESCRIPTLOG */ sub_550( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_550( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        g_U822[4] = 0;
         /* P_REQUEST_PL_PERSISTENT_ASSETS */ sub_19999();
         /* P_REQUEST_PL_NONPERSISTENT_ASSETS */ sub_30897();
        l_U213 = 3;
         /* WRITESCRIPTLOG */ sub_550( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_36266( ref g_U2662 )) AND (( /* F_STREAMREQ_ACTION_TREE_IS_LOADED */ sub_35888( ref g_U2827 )) AND (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_35514( ref g_U2889 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_35123( ref g_U2741 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_34721( ref g_U2613 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_34324( ref g_U2468 )))))))
        {
            if ((NOT l_U152._fU0) AND (g_U820 == 4))
            {
                l_U213 = 4;
                 /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U213 = 6;
                 /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_PRE_CREATE_PL_PEDS", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U842[4] = 1;
        l_U215 = 0;
        if (NOT ( /* HAS_SAVEFILE_LOADED */ sub_36915( ref l_U152 )))
        {
             /* F_GIVEPEDWEAPON */ sub_9407(  /* PLAYER_PED_ID */ sub_1488(), 1308526797, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8612(  /* PLAYER_PED_ID */ sub_1488(), -862236369, 0, 200, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8612(  /* PLAYER_PED_ID */ sub_1488(), -862236369, 1, 200, 0 );
            l_U213 = 5;
             /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U213 = 6;
             /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_PRE_CREATE_PL_PEDS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1488(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1488(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1488(), 0, 0 ) ))))
            {
                g_U821 = 4;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_37467( ref l_U152, g_U821,  /* PLAYER_PED_ID */ sub_1488(), g_U2953[4], g_U3083[4], g_U3127[4], g_U3171[4], 1 );
                l_U213 = 6;
                 /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_PRE_CREATE_PL_PEDS", 0 );
            }
        }
        break;
        case 6:
        if (l_U214)
        {
            l_U617 = 1;
        }
        if ((l_U617 != 4) AND (l_U617 != 0))
        {
             /* P_PL_CREATE_PRISONERS */ sub_42166();
        }
        if (l_U617 == 4)
        {
            l_U213 = 7;
             /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_PRE_CREATE_PL_VEHICLES", 0 );
        }
        break;
        case 7:
        if (l_U214)
        {
            l_U408 = 1;
        }
        if ((l_U408 != 4) AND (l_U408 != 0))
        {
             /* P_PL_CREATE_PARKED_VEHICLES */ sub_45042();
        }
        if ((l_U408 == 4) AND (NOT (DOES_VEHICLE_EXIST( l_U248 ))))
        {
             /* P_PL_CREATE_CAVIERAO */ sub_46857();
        }
        if ((DOES_VEHICLE_EXIST( l_U248 )) AND (l_U408 == 4))
        {
            l_U213 = 8;
             /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_PRE_CREATE_PL_PROPS", 0 );
        }
        break;
        case 8:
         /* P_PL_CREATE_PROPS */ sub_48011();
         /* P_PL_CREATE_PLACEMENTS */ sub_48493();
         /* P_CLOSEDOOR */ sub_16919( ref g_U3722, 1 );
        l_U213 = 9;
         /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        break;
        case 9:
        if (l_U214)
        {
            g_U822[4] = 1;
        }
        if (g_U842[4])
        {
            if (l_U215)
            {
                if (CUTSCENE_IS_LOADED( "MID_05_PP_concat" ))
                {
                    l_U216 = 1;
                    l_U213 = 10;
                     /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_HANDLE_MID_05_PP", 0 );
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_550( "GA", "Waiting for MID_05_PP_concat to load", 0 );
                }
            }
            else if (IS_DEATH_PANEL_WIPE_ALLOWED())
            {
                DO_SCREEN_FADE_IN( 0 );
            }
            if (NOT l_U216)
            {
                 /* P_DROP_PRE_RIOT_PRECINCT_STREAMHELPERS */ sub_50389();
                l_U216 = 1;
            }
             /* WRITESCRIPTLOG */ sub_550( "GA", "Force music PRECINCT_FINAL mood PRECINCT_01_1_5", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_5", "", 0, -1, -1, -1082130432, 0 );
            l_U213 = 10;
             /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_HANDLE_MID_05_PP", 0 );;
        }
        break;
        case 10:
        if (l_U214)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_57307( ref l_U218, "MID_05_PP_concat", 50848, 51856, 53586, 54678, 54727, 56269, 250, 0 );
             /* CUTSYS_SETCUTSCENELOADEXTERIORONSKIP */ sub_57842( ref l_U218, g_U2953[4] );
            if (l_U215)
            {
                l_U218._fU4 = 2;
                l_U335 = 1;
            }
            else
            {
                l_U218._fU4 = 7;
            }
        }
         /* P_PL_HANDLE_CAV_SHOOTING */ sub_57969();
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_58882( ref l_U218 ))
        {
             /* NIS_RETURN_TO_GAMEPLAY_CAM */ sub_61105( 0, 0, 0, g_U3127[4], g_U3171[4], 0 );
            if (g_U821 != 4)
            {
                g_U821 = 4;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_37467( ref l_U152, g_U821,  /* PLAYER_PED_ID */ sub_1488(), g_U2953[4], g_U3083[4], g_U3127[4], g_U3171[4], 1 );
            }
             /* WRITESCRIPTLOG */ sub_550( "AT", "Preloading PRECINCT_ONESHOT_2.", 0 );
            AUDIO_MUSIC_REQUEST_ONESHOT( "PRECINCT_ONESHOT_2", 0 );
             /* P_START_SP_CHALLENGES */ sub_61376();
            l_U213 = 11;
             /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_GAMEPLAY_CAV_COMBAT", 0 );
        }
        break;
        case 11:
        if (l_U214)
        {
            ENABLE_NORMAL_LINE( "floor1", "GrabSpline214", 0 );
             /* CREATETIMER */ sub_2383( ref l_U587, l_U586, 1, 0 );
             /* STARTTIMER */ sub_2533( ref l_U587 );
            l_U616 = 1;
             /* STARTTIMER */ sub_2533( ref l_U895 );
        }
         /* P_PL_PROTOTYPE_SINGLE_SHOT_LAW */ sub_61684();
         /* P_PL_HANDLE_CAV_SHOOTING */ sub_57969();
         /* P_HANDLE_HINT_DIALOGUE */ sub_62658();
        if ((DOES_VEHICLE_EXIST( l_U248 )) AND (NOT (IS_PED_DEAD( l_U564 ))))
        {
            if ((IS_VEHICLE_ON_FIRE( l_U248 )) || (IS_VEHICLE_DEAD( l_U248 )))
            {
                 /* WRITESCRIPTLOG */ sub_550( "GA", "Killed the driver, the cav is dead or on fire.", 0 );
                 /* P_KILL_PED */ sub_56807( l_U564 );
            }
        }
        if ((NOT (IS_CONTROL_PRESSED( 0, 6 ))) AND (IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_1488() )))
        {
            l_U550 =  /* F_PL_GET_VEHICLE_COVER_IDX */ sub_64609();
        }
        else
        {
            l_U550 = -1;
        }
        if ((NOT IS_BULLET_CAMERA_ACTIVE()) AND (IS_VEHICLE_DEAD( l_U248 )))
        {
            START_PARTICLE_FX_NON_LOOPED_AT_COORD( "PO_Cav_Lrg_Explo_S", 4.48000000, -52.83000000, 1.24000000, 0.00000000, 0.00000000, 0.00000000, 1065353216 );
            l_U575 = START_PARTICLE_FX_LOOPED_ON_VEHICLE( "Exp_Cav_constant_Fire_01_S", l_U248, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 1065353216 );
             /* WRITESCRIPTLOG */ sub_550( "AT", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_3_5", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_3_5", "", 0, 4000, -1, -1082130432, 0 );
             /* WRITESCRIPTLOG */ sub_550( "AT", "Playing music one shot PRECINCT_ONESHOT_2", 0 );
            AUDIO_MUSIC_PLAY_ONESHOT();
             /* P_START_CHECKPOINT_THREAD */ sub_65162( ref g_U862[5] );
            l_U213 = 12;
             /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_GAMEPLAY_POST_CAV_COMBAT", 0 );
        }
        break;
        case 12:
        if (l_U214)
        {
             /* STARTTIMER */ sub_2533( ref l_U390 );
            if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( g_U3736._fU0, g_U3736._fU4 ) ))
            {
                DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3736._fU0, g_U3736._fU4 ), 0 );
            }
            if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( g_U3729._fU0, g_U3729._fU4 ) ))
            {
                DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3729._fU0, g_U3729._fU4 ), 0 );
            }
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
            {
                SET_PED_EMOTION_STATE(  /* PLAYER_PED_ID */ sub_1488(), 3 );
            }
        }
         /* P_PL_PROTOTYPE_SINGLE_SHOT_LAW */ sub_61684();
        if ( /* ISTIMERDONE */ sub_2666( ref l_U390 ))
        {
             /* P_PL_OPEN_SLIDING_GATE */ sub_65484();
            ENABLE_NORMAL_LINE( "floor1", "GrabSpline214", 1 );
            l_U691 = 1;
        }
        if (l_U389 != -1)
        {
            if (NOT ( /* F_IS_OBJECT_PLAYING_ANIM */ sub_65846( g_U4334, "po_anim", "slidinggate" )))
            {
                 /* WRITESCRIPTLOG */ sub_550( "GA", "Sliding gate has closed, stopping sound.", 0 );
                 /* P_SAFE_STOP_SOUND */ sub_4249( l_U389, 0 );
                 /* P_SAFE_RELEASE_SOUND_ID */ sub_4432( ref l_U389 );
            }
        }
        if ((l_U691 != 4) AND (l_U691 != 0))
        {
             /* P_PL_START_LOWER_ENEMIES */ sub_66030();
        }
        if (l_U691 == 4)
        {
            ;
        }
        if (NOT l_U834)
        {
            if ( /* F_PL_CAN_START_VIG_04 */ sub_69163())
            {
                l_U802 = 1;
                l_U834 = 1;
            }
        }
        if ((l_U802 != 4) AND (l_U802 != 0))
        {
             /* P_PL_CREATE_AND_START_VIG_04_PEDS */ sub_69369();
        }
        if (NOT (IS_PED_DEAD( l_U831[0] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U831[0], 47 )) == 1)
            {
                 /* WRITESCRIPTLOG */ sub_550( "GA", "Force killing the VIG_04 rioter.", 0 );
                 /* P_KILL_PED */ sub_56807( l_U831[0] );
            }
        }
        if ((l_U802 == 4) AND ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62074( ref l_U831 )) == 0) AND ((l_U691 == 4) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62074( ref l_U785 )) == 0))))
        {
            if ((NOT l_U877._fU16) AND (NOT l_U877._fU20))
            {
                 /* STARTTIMER */ sub_2533( ref l_U877 );
                 /* STARTTIMER */ sub_2533( ref l_U904 );
            }
            if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_62896()))
            {
                if ( /* ISTIMERDONE */ sub_2666( ref l_U877 ))
                {
                     /* P_SPEECH_PLAY_MONOLOGUE */ sub_63028( "SPOL_PLGUTSR", ref l_U913 );
                }
                if ( /* ISTIMERDONE */ sub_2666( ref l_U904 ))
                {
                     /* P_SPEECH_PLAY_MONOLOGUE */ sub_63028( "SPOL_PLDWDPK", ref l_U943 );
                }
            }
        }
        if ((NOT l_U799) AND (l_U691 == 4))
        {
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62074( ref l_U785 )) < 6)
            {
                 /* P_PL_LOWER_SECOND_WAVE */ sub_70943();
                l_U799 = 1;
            }
        }
        if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( g_U3750._fU0, g_U3750._fU4 ) ))
        {
            if (DOOR_GET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3750._fU0, g_U3750._fU4 ) ))
            {
                DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3750._fU0, g_U3750._fU4 ), 0 );
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOX */ sub_69203( l_U984 ))
        {
            g_U842[5] = 1;
            l_U1005 = 1;
            l_U213 = 13;
             /* WRITESCRIPTLOG */ sub_550( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 13:
        if (g_U821 == 5)
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U213 = 0;
             /* WRITESCRIPTLOG */ sub_550( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U213 != iVar2)
    {
        l_U214 = 1;
    }
    else
    {
        l_U214 = 0;
    }
    return;
}

/* P_HANDLE_SP_CHALLENGES */ void sub_11632()
{
    if ((l_U213 < 13) AND (l_U213 >= 11))
    {
         /* P_HANDLE_VEHICLE_CHALLENGES */ sub_11695( ref l_U410, ref l_U976 );
    }
    switch (l_U954)
    {
        case 0:
        if (l_U213 >= 11)
        {
            if ( /* F_IS_NUM_BOOL_ARRAY_TRUE */ sub_12047( ref l_U976, 1 ))
            {
                 /* CREATETIMER */ sub_2383( ref l_U958, 60000, 1, 0 );
                 /* STARTTIMER */ sub_2533( ref l_U958 );
                 /* WRITESCRIPTLOG */ sub_550( "CCB", "eRoadRage - STATE_CHALLENGE_IDLE", 0 );
                l_U954 = 1;
            }
        }
        break;
        case 1:
        if ( /* ISTIMERDONE */ sub_2666( ref l_U958 ))
        {
             /* WRITESCRIPTLOG */ sub_550( "CCB", "The player failed the RoadRage challenge...", 0 );
             /* WRITESCRIPTLOG */ sub_550( "CCB", "eRoadRage - STATE_CHALLENGE_COMPLETE", 0 );
            l_U954 = 2;
        }
        else if ( /* F_IS_NUM_BOOL_ARRAY_TRUE */ sub_12047( ref l_U976, 8 ))
        {
            if (SCRIPT_VAR_HASH_EXISTS( -374404319 ))
            {
                 /* WRITESCRIPTLOG */ sub_550( "CCB", "The player passed the RoadRage challenge......", 0 );
                SCRIPT_VAR_HASH_SET_INT( -374404319, 1 );
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_550( "CCB", "The RoadRage script variable is NOT valid!!!", 0 );
            }
             /* WRITESCRIPTLOG */ sub_550( "CCB", "eRoadRage - STATE_CHALLENGE_COMPLETE", 0 );
            l_U954 = 2;
        }
        break;
        case 2: break;
    }
    switch (l_U955)
    {
        case 0:
         /* WRITESCRIPTLOG */ sub_550( "CCB", "eStylesForMiles - STATE_CHALLENGE_IDLE", 0 );
        l_U955 = 1;
        break;
        case 1:
        if (l_U213 >= 11)
        {
            if (NOT ( /* F_IS_NUM_BOOL_ARRAY_TRUE */ sub_12047( ref l_U976, 3 )))
            {
                if (l_U982)
                {
                     /* WRITESCRIPTLOG */ sub_550( "CCB", "The player failed the StylesForMiles challenge...", 0 );
                     /* WRITESCRIPTLOG */ sub_550( "CCB", "eStylesForMiles - STATE_CHALLENGE_COMPLETE", 0 );
                    l_U955 = 2;
                }
            }
            else if ( /* F_IS_NUM_BOOL_ARRAY_TRUE */ sub_12047( ref l_U976, 3 ))
            {
                if (l_U982)
                {
                    if (SCRIPT_VAR_HASH_EXISTS( -1747927955 ))
                    {
                         /* WRITESCRIPTLOG */ sub_550( "CCB", "The player passed the StylesForMiles challenge...", 0 );
                        SCRIPT_VAR_HASH_SET_INT( -1747927955, 1 );
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_550( "CCB", "The StylesForMiles script variable is NOT valid!!!", 0 );
                    }
                     /* WRITESCRIPTLOG */ sub_550( "CCB", "eStylesForMiles - STATE_CHALLENGE_COMPLETE", 0 );
                    l_U955 = 2;
                }
            }
        }
        break;
        case 2: break;
    }
    switch (l_U956)
    {
        case 0:
         /* WRITESCRIPTLOG */ sub_550( "CCB", "eStuntHunt - STATE_CHALLENGE_IDLE", 0 );
        l_U956 = 1;
        break;
        case 1:
        if (l_U213 >= 11)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
            {
                if (NOT IS_PLAYER_SHOOTDODGING())
                {
                    if (l_U982)
                    {
                         /* WRITESCRIPTLOG */ sub_550( "CCB", "The player failed the StuntHunt challenge...", 0 );
                         /* WRITESCRIPTLOG */ sub_550( "CCB", "eStuntHunt - STATE_CHALLENGE_COMPLETE", 0 );
                        l_U956 = 2;
                    }
                }
                else if (l_U982)
                {
                    if (SCRIPT_VAR_HASH_EXISTS( 2096559626 ))
                    {
                         /* WRITESCRIPTLOG */ sub_550( "CCB", "The player passed the StuntHunt challenge...", 0 );
                        SCRIPT_VAR_HASH_SET_INT( 2096559626, 1 );
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_550( "CCB", "The StuntHunt script variable is NOT valid!!!", 0 );
                    }
                     /* WRITESCRIPTLOG */ sub_550( "CCB", "eStuntHunt - STATE_CHALLENGE_COMPLETE", 0 );
                    l_U956 = 2;
                }
            }
        }
        break;
        case 2: break;
    }
    switch (l_U957)
    {
        case 0: break;
        case 1:
        if ( /* ISTIMERDONE */ sub_2666( ref l_U967 ))
        {
             /* WRITESCRIPTLOG */ sub_550( "CCB", "The player failed the ColdLaws challenge... Restarting the challenge...", 0 );
             /* WRITESCRIPTLOG */ sub_550( "CCB", "eColdLaws - STATE_CHALLENGE_INIT", 0 );
            l_U957 = 0;
        }
        else if (((STAT_HASH_GET_INT( -1857458609 )) >= 1) AND ((STAT_HASH_EXISTS( -1857458609 )) AND (ARE_SP_STATS_LOADED())))
        {
            if (SCRIPT_VAR_HASH_EXISTS( -686553382 ))
            {
                 /* WRITESCRIPTLOG */ sub_550( "CCB", "The player passed the ColdLaws challenge...", 0 );
                SCRIPT_VAR_HASH_SET_INT( -686553382, 1 );
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_550( "CCB", "The ColdLaws script variable is NOT valid!!!", 0 );
            }
             /* WRITESCRIPTLOG */ sub_550( "CCB", "eColdLaws - STATE_CHALLENGE_COMPLETE", 0 );
            l_U957 = 2;
        }
        break;
        case 2: break;
    }
    return;
}

/* P_HANDLE_VEHICLE_CHALLENGES */ void sub_11695(unknown uParam0, unknown uParam1)
{
    int J;
    int I;
    int iVar6;

    for ( J = 0; J <= ((uParam0^) - 1); J++ )
    {
        for ( I = 0; I <= 5; I++ )
        {
            if (NOT (uParam1^)[J])
            {
                if (IS_VEHICLE_DEAD( (uParam0^)[J] ))
                {
                    (uParam1^)[J] = 1;
                    iVar6++;
                    DISPLAYF( "[CCB] ### The vehicle {} is destroyed... ###", 1, 513, J );
                }
            }
        }
    }
    if (NOT l_U982)
    {
        if (IS_VEHICLE_DEAD( l_U248 ))
        {
            l_U982 = 1;
            DISPLAYF( "[CCB] ### The Cavierao vehicle is destroyed... ###", 0 );
        }
    }
    return;
}

/* F_IS_NUM_BOOL_ARRAY_TRUE */ int sub_12047(unknown uParam0, int iParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I])
        {
            iVar5++;
        }
    }
    if (iVar5 >= iParam1)
    {
        DISPLAYF( "[CCB] ### The current iCount value is: {} ###", 1, 513, iVar5 );
        return 1;
        break;
    }
    return 0;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_14364()
{
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U214 = 1;
    l_U335 = 0;
    l_U336 = 0;
    l_U347 = 0;
     /* CREATETIMER */ sub_2383( ref l_U349, 250, 1, 0 );
     /* CREATETIMER */ sub_2383( ref l_U359, l_U358, 1, 0 );
     /* CREATETIMER */ sub_2383( ref l_U369, l_U368, 1, 0 );
     /* CREATETIMER */ sub_2383( ref l_U379, l_U378, 1, 0 );
    l_U616 = 0;
     /* RESETTIMER */ sub_3242( ref l_U577 );
     /* RESETTIMER */ sub_3242( ref l_U587 );
     /* RESETTIMER */ sub_3242( ref l_U597 );
     /* CREATETIMER */ sub_2383( ref l_U607, l_U606, 1, 0 );
    l_U408 = 0;
    l_U409 = 0;
    l_U617 = 0;
    l_U618 = 0;
     /* CREATETIMER */ sub_2383( ref l_U390, 4000, 1, 0 );
    l_U691 = 0;
    l_U692 = 0;
    l_U800 = -1;
    l_U550 = -1;
    l_U247 = 0;
    l_U799 = 0;
    l_U565 = 0;
    l_U802 = 0;
    l_U803 = 0;
    l_U834 = 0;
     /* CREATETIMER */ sub_2383( ref l_U877, 2000, 1, 0 );
     /* CREATETIMER */ sub_2383( ref l_U904, 20000, 1, 0 );
     /* CREATETIMER */ sub_2383( ref l_U886, 1000, 1, 0 );
     /* CREATETIMER */ sub_2383( ref l_U895, 20000, 1, 0 );
    l_U953 = 0;
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_14790()
{
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U249[0], -0.58000000, -42.87000000, -3.39000000, 180.00000000, 1650723322, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U249[1], -1.14000000, -42.87000000, -3.39000000, 180.00000000, 399418022, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U249[2], -1.70000000, -42.87000000, -3.39000000, 180.00000000, -2074049608, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U249[3], -0.58000000, -42.07000000, -3.39000000, 180.00000000, 1335931320, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U249[4], -1.14000000, -42.07000000, -3.39000000, 180.00000000, -1534374152, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U249[5], -1.70000000, -42.07000000, -3.39000000, 180.00000000, 1803364834, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U551, -9.04978900, -43.37607000, 0.21509400, 271.77170000, 832372478, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U619[0], 29.14000000, -53.20000000, -3.20000000, 97.35225000, 338687601, 8, 4, 2, 3, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U619[1], 35.57700000, -56.53900000, -3.46049200, 45.00000000, 1335931320, 8, 4, 2, 3, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U619[2], 36.17935000, -52.09092000, -3.20000000, 82.82000000, 655671171, 8, 4, 2, 3, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U619[3], -6.23000000, -53.48000000, -3.20000000, 0.00000000, -995129327, 8, 4, 2, 3, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U619[4], -7.39000000, -57.43000000, -3.46000000, -90.00000000, -365059922, 8, 4, 2, 3, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U693[0], -0.72000000, -42.89000000, -3.39000000, 180.00000000, 832372478, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U693[1], -2.27000000, -38.98000000, -3.39000000, 180.00000000, -1861476591, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U693[2], -2.26950100, -44.79160000, -3.46047600, 180.00000000, 836374566, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U693[3], -2.77513100, -41.63424000, -3.32461400, 168.00000000, -1628022437, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U693[4], -0.38679400, -45.00127000, -3.39954100, 180.00000000, -1492323321, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U693[5], -0.38679400, -44.06765000, -3.39954100, 180.00000000, -1804954141, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U693[6], -0.38679400, -43.06765000, -3.39954100, 180.00000000, -1443937733, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U804[0], -1.12000000, -36.80000000, -3.39000000, 120.00000000, 331247629, 8, 4, 2, 3, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14897( ref l_U804[1], -1.12000000, -33.77000000, -3.39000000, 180.00000000, -2074049608, 7, 3, 2, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_16019( ref l_U444[0], "tb_PL_ParkedVehicle_CoverTrigger_0", 32.52300000, -58.93100000, -3.40000000, 1.50000000, 4.00000000, 1.50000000, 0.00000000, 0.00000000, -175.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16019( ref l_U444[1], "tb_PL_ParkedVehicle_CoverTrigger_1", 24.28679000, -60.17918000, -3.40000000, 1.50000000, 4.00000000, 1.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16019( ref l_U444[2], "tb_PL_ParkedVehicle_CoverTrigger_2", 39.30617000, -60.25690000, -3.40000000, 1.50000000, 4.00000000, 1.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16019( ref l_U444[3], "tb_PL_ParkedVehicle_CoverTrigger_3", 30.97720000, -50.84369000, -3.40000000, 2.00000000, 1.50000000, 1.50000000, 0.00000000, 0.00000000, 95.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16019( ref l_U444[4], "tb_PL_ParkedVehicle_CoverTrigger_4", 23.00700000, -50.43000000, -3.40000000, 2.25000000, 1.50000000, 1.50000000, 0.00000000, 0.00000000, 285.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16019( ref l_U835, "tb_PL_NearStairwellLowerDoor", -3.52000000, -42.71000000, -3.40000000, 8.00000000, 9.91000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16019( ref l_U856, "tb_PL_FarStairwellLowerDoor", -7.19000000, -44.82000000, -3.40000000, 15.00000000, 15.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16019( ref l_U984, "TB_PL_ENDPARKING", 3.89000000, -30.43000000, -0.10000000, 5.73000000, 3.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_16840( ref l_U801, "teth_PL_LowerParkingLot", 24.45000000, -52.01000000, -3.65000000, 76.03000000, 25.30000000, 3.31000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CLOSEDOOR */ sub_16919( ref g_U3729, 1 );
     /* P_CLOSEDOOR */ sub_16919( ref g_U3736, 1 );
     /* P_SETDOORLOCKED */ sub_17186( ref g_U3729, 1 );
     /* P_SETDOORLOCKED */ sub_17186( ref g_U3736, 1 );
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_14897(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_16019(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_16840(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CLOSEDOOR */ void sub_16919(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_16945( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_17029( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_16945(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_17029(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORLOCKED */ void sub_17186(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_16945( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_17029( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* P_INITIALIZE_SP_CHALLENGES */ void sub_17385()
{
     /* WRITESCRIPTLOG */ sub_550( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
    l_U954 = 0;
    l_U955 = 0;
    l_U956 = 0;
    l_U982 = 0;
     /* P_RESET_BOOL_ARRAY */ sub_17493( ref l_U976 );
    l_U957 = 0;
    if (ARE_SP_STATS_LOADED())
    {
        if (STAT_EXISTS( "SP_MY_ROCKETS_SHOT_OUT_OF_AIR" ))
        {
            l_U983 = STAT_GET_INT( "SP_MY_ROCKETS_SHOT_OUT_OF_AIR" );
            DISPLAYF( "[CCB] ### The current SP_MY_ROCKETS_SHOT_OUT_OF_AIR value is: {} ###", 1, 513, l_U983 );
        }
        else
        {
            DISPLAYF( "[CCB] ### The SP_MY_ROCKETS_SHOT_OUT_OF_AIR stat does NOT exist!!! ###", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### The stats are NOT loaded!!! ###", 0 );
    }
    if (NOT (SCRIPT_VAR_HASH_EXISTS( -686553382 )))
    {
         /* WRITESCRIPTLOG */ sub_550( "CCB", "Creating the ColdLaws script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( -686553382 );
        DISPLAYF( "[CCB] ### The current ColdLaws value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -686553382 ) );
        if (SCRIPT_VAR_HASH_EXISTS( -686553382 ))
        {
             /* WRITESCRIPTLOG */ sub_550( "CCB", "The ColdLaws script variable was successfully created...", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_550( "CCB", "The ColdLaws script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_550( "CCB", "The ColdLaws script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( -686553382, 0 );
        DISPLAYF( "[CCB] ### The current ColdLaws value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -686553382 ) );
    }
    if (NOT (SCRIPT_VAR_HASH_EXISTS( -374404319 )))
    {
         /* WRITESCRIPTLOG */ sub_550( "CCB", "Creating the RoadRage script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( -374404319 );
        DISPLAYF( "[CCB] ### The current RoadRage value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -374404319 ) );
        if (SCRIPT_VAR_HASH_EXISTS( -374404319 ))
        {
             /* WRITESCRIPTLOG */ sub_550( "CCB", "The RoadRage script variable was successfully created...", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_550( "CCB", "The RoadRage script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_550( "CCB", "The RoadRage script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( -374404319, 0 );
        DISPLAYF( "[CCB] ### The current RoadRage value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -374404319 ) );
    }
    if (NOT (SCRIPT_VAR_HASH_EXISTS( -1747927955 )))
    {
         /* WRITESCRIPTLOG */ sub_550( "CCB", "Creating the StylesForMiles script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( -1747927955 );
        DISPLAYF( "[CCB] ### The current StylesForMiles value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -1747927955 ) );
        if (SCRIPT_VAR_HASH_EXISTS( -1747927955 ))
        {
             /* WRITESCRIPTLOG */ sub_550( "CCB", "The StylesForMiles script variable was successfully created...", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_550( "CCB", "The StylesForMiles script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_550( "CCB", "The StylesForMiles script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( -1747927955, 0 );
        DISPLAYF( "[CCB] ### The current StylesForMiles value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -1747927955 ) );
    }
    if (NOT (SCRIPT_VAR_HASH_EXISTS( 2096559626 )))
    {
         /* WRITESCRIPTLOG */ sub_550( "CCB", "Creating the StuntHunt script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( 2096559626 );
        DISPLAYF( "[CCB] ### The current StuntHunt value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 2096559626 ) );
        if (SCRIPT_VAR_HASH_EXISTS( 2096559626 ))
        {
             /* WRITESCRIPTLOG */ sub_550( "CCB", "The StuntHunt script variable was successfully created...", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_550( "CCB", "The StuntHunt script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_550( "CCB", "The StuntHunt script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( 2096559626, 0 );
        DISPLAYF( "[CCB] ### The current StuntHunt value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 2096559626 ) );
    }
    return;
}

/* P_RESET_BOOL_ARRAY */ void sub_17493(unknown uParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_550( "CCB", "P_RESET_BOOL_ARRAY", 0 );
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = 0;
    }
    return;
}

/* P_REQUEST_PL_PERSISTENT_ASSETS */ void sub_19999()
{
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_REQUEST_PL_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_20100( ref l_U188, ref g_U2468 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_23022( ref l_U207, ref g_U2613 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_25053( ref g_U3553, ref g_U2741 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_25053( "veh@std", ref g_U2741 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_25053( "LEVEL_S_POLICE_CP_04", ref g_U2741 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_26987( ref g_U3505, ref g_U2889 );
     /* P_STREAMREQ_ACTION_TREE_INSERT */ sub_28911( "Vehicle/Vehicle_Car.act", ref g_U2827 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_25053( "MPED_RPG_CORE", ref g_U2741 );
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_REQUEST_PL_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_20100(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_20173( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_20173(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_20240( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20498( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_20240(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20498( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20498( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20498( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_22029( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20498( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20498( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_20498(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20559( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_20559(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_22029(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_23022(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_23096( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_23096(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_23150( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23411( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_23150(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23411( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23411( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23411( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_22029( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23411( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23411( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_23411(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20559( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_25053(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_25105( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25357( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_25105(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25357( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25357( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25357( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_22029( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25357( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25357( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_25357(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20559( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_26987(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_27040( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_27295( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_27040(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_27295( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_27295( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_27295( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_22029( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_27295( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_27295( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_27295(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20559( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ACTION_TREE_INSERT */ void sub_28911(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ACTION_TREE_IS_INDEX_AVAILABLE */ sub_28965( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ACTION_TREE asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ sub_29223( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ACTION_TREE_IS_INDEX_AVAILABLE */ int sub_28965(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ACTION_TREE is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ACTION_TREE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ sub_29223( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ACTION_TREE is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ACTION_TREE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ sub_29223( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_ACTION_TREE_LOADED( uParam0 ))
                {
                    DISPLAYF( "[CCB] ### The ACTION_TREE is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ACTION_TREE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ sub_29223( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ACTION_TREE is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ACTION_TREE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_22029( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ACTION_TREE is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ACTION_TREE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ sub_29223( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_ACTION_TREE_LOADED( uParam0 ))
        {
            DISPLAYF( "[CCB] ### The ACTION_TREE is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ACTION_TREE is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ACTION_TREE: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ sub_29223( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ACTION_TREE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ void sub_29223(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20559( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ACTION_TREE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_PL_NONPERSISTENT_ASSETS */ void sub_30897()
{
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_REQUEST_PL_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_31005( 984386305, ref g_U2662 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_31005( 1507052255, ref g_U2662 );
    if ((l_U215) AND (g_U820 != 4))
    {
         /* LOADSEAMLESSCUTSCENE */ sub_33852( "MID_05_PP_concat", 0 );
    }
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_REQUEST_PL_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_31005(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_31066( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_31316( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_31066(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_31316( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_31316( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_31316( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_31316( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_22029( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_22029( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_31316( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_31316( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_31316(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20559( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_33852(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_34324(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_34721(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_35123(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_35514(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ACTION_TREE_IS_LOADED */ int sub_35888(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_36266(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_36915(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_550( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_6915( uParam0,  /* PLAYER_PED_ID */ sub_1488() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_37467(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_550( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_550( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_10181( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_37758( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_38235( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_38235( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_38495( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_38235( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_38495( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_38495( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_38235( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_38495( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_38495( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_38495( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_38235( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_38495( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_38495( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_38495( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_38495( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_40075( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_550( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_37758(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7196( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_550( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_550( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_38235(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_38495(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_40075(int iParam0)
{
     /* WRITE_STRING */ sub_9016( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_40163( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_40240( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_40240( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_40240( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_40240( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_40240( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_41110( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU52 );
     /* WRITE_STRING */ sub_9016( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU96 );
     /* WRITE_STRING */ sub_9016( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU100 );
     /* WRITE_STRING */ sub_9016( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU104 );
     /* WRITE_STRING */ sub_9016( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU108 );
     /* WRITE_STRING */ sub_9016( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU112 );
     /* WRITE_STRING */ sub_9016( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU116 );
     /* WRITE_STRING */ sub_9016( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU120 );
     /* WRITE_STRING */ sub_9016( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU124 );
     /* WRITE_STRING */ sub_9016( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU128 );
     /* WRITE_STRING */ sub_9016( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_40409( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_40409( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_40409( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_40163(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_40240(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_40409(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_41110(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_PL_CREATE_PRISONERS */ void sub_42166()
{
    int[5] iVar2;
    int I;

    array(ref iVar2, 5);
    iVar2[0] = 12;
    iVar2[1] = 1;
    iVar2[2] = 4;
    iVar2[3] = 3;
    iVar2[4] = 8;
    switch (l_U617)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_PrisonerSpawn = ENTITY_STATE_INIT", 0 );
        l_U618 = 0;
        l_U617 = 2;
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_PrisonerSpawn = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        l_U685[l_U618] =  /* CREATEPED */ sub_42406( ref l_U619[l_U618] );
        if (NOT (IS_PED_DEAD( l_U685[l_U618] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U685[l_U618], 1 );
            SET_PED_VISIBLE( l_U685[l_U618], 0 );
        }
        l_U618++;
        if (l_U618 >= 5)
        {
            l_U617 = 3;
             /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_PrisonerSpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_43552( ref l_U685, "pi_PL_Prisoner" );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U685[0], -862236369, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U685[1], -862236369, 25000, 0, 0 );
        for ( I = 0; I <= 4; I++ )
        {
            if (I != 1)
            {
                 /* P_CREATE_DEAD_BODY */ sub_43771( l_U685[I], iVar2[I] );
            }
        }
         /* P_DEACTIVATEPED */ sub_44735( l_U685[1] );
        l_U617 = 4;
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_PrisonerSpawn = ENTITY_STATE_COMPLETE", 0 );
        break;
    }
    return;
}

/* CREATEPED */ void sub_42406(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_42588( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_43137( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_43238( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_42588(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_9016( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_43137(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_43238(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_43552(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_CREATE_DEAD_BODY */ void sub_43771(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
         /* WRITE_STRING */ sub_9016( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_44735(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* P_PL_CREATE_PARKED_VEHICLES */ void sub_45042()
{
    switch (l_U408)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_ParkedVehiclesSpawn = ENTITY_STATE_INIT", 0 );
        l_U409 = 0;
        l_U408 = 2;
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_ParkedVehiclesSpawn = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        l_U410[l_U409] =  /* CREATEVEHICLE */ sub_45295( l_U438[l_U409], l_U416[l_U409], l_U432[l_U409], 0, 0, 0 );
        if (NOT (IS_VEHICLE_DEAD( l_U410[l_U409] )))
        {
            SET_VEHICLE_EXPLODES_ONLY_FROM_PROJECTILE_EXPLOSIONS( l_U410[l_U409], 1 );
            SET_VEHICLE_ONLY_DAMAGED_BY_PLAYER( l_U410[l_U409], 1 );
            SET_VEHICLE_PROOFS( l_U410[l_U409], 1, 1, 1, 1, 1 );
            SET_VEHICLE_FREEZE_AFTER_BLOWING_UP( l_U410[l_U409], 1 );
            SET_VEHICLE_ON_GROUND_PROPERLY( l_U410[l_U409] );
            if (l_U438[l_U409] == 1071653504)
            {
                SET_VEHICLE_EXTRA( l_U410[l_U409], 1, 0 );
                SET_VEHICLE_EXTRA( l_U410[l_U409], 2, 0 );
                SET_VEHICLE_EXTRA( l_U410[l_U409], 3, 0 );
                SET_VEHICLE_EXTRA( l_U410[l_U409], 4, 0 );
                SET_VEHICLE_EXTRA( l_U410[l_U409], 5, 0 );
                SET_VEHICLE_EXTRA( l_U410[l_U409], 6, 0 );
                SET_VEHICLE_EXTRA( l_U410[l_U409], 7, 0 );
                SET_VEHICLE_EXTRA( l_U410[l_U409], 8, 0 );
            }
            if (l_U438[l_U409] == 2038070575)
            {
                SET_VEHICLE_EXTRA( l_U410[l_U409], 4, 0 );
            }
        }
        l_U409++;
        if (l_U409 >= 5)
        {
            l_U408 = 3;
             /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_ParkedVehiclesSpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
        if (NOT (IS_VEHICLE_DEAD( l_U410[4] )))
        {
            SET_VEHICLE_COLOUR_COMBINATION( l_U410[4], 1 );
        }
        if (NOT (IS_VEHICLE_DEAD( l_U410[0] )))
        {
            SET_VEHICLE_EXTRA( l_U410[0], 4, 0 );
            SET_VEHICLE_EXTRA( l_U410[0], 1, 0 );
            SET_VEHICLE_EXTRA( l_U410[0], 2, 1 );
            SET_VEHICLE_EXTRA( l_U410[0], 3, 1 );
            SET_VEHICLE_EXTRA( l_U410[0], 5, 1 );
            SET_VEHICLE_EXTRA( l_U410[0], 6, 1 );
            SET_VEHICLE_EXTRA( l_U410[0], 7, 1 );
            SET_VEHICLE_EXTRA( l_U410[0], 8, 1 );
        }
        if (NOT (IS_VEHICLE_DEAD( l_U410[1] )))
        {
            SET_VEHICLE_EXTRA( l_U410[1], 4, 0 );
            SET_VEHICLE_EXTRA( l_U410[1], 2, 0 );
            SET_VEHICLE_EXTRA( l_U410[1], 1, 1 );
            SET_VEHICLE_EXTRA( l_U410[1], 3, 1 );
            SET_VEHICLE_EXTRA( l_U410[1], 5, 1 );
            SET_VEHICLE_EXTRA( l_U410[1], 6, 1 );
            SET_VEHICLE_EXTRA( l_U410[1], 7, 1 );
            SET_VEHICLE_EXTRA( l_U410[1], 8, 1 );
        }
        if (NOT (IS_VEHICLE_DEAD( l_U410[2] )))
        {
            SET_VEHICLE_EXTRA( l_U410[2], 4, 0 );
            SET_VEHICLE_EXTRA( l_U410[2], 3, 0 );
            SET_VEHICLE_EXTRA( l_U410[2], 1, 1 );
            SET_VEHICLE_EXTRA( l_U410[2], 2, 1 );
            SET_VEHICLE_EXTRA( l_U410[2], 5, 1 );
            SET_VEHICLE_EXTRA( l_U410[2], 6, 1 );
            SET_VEHICLE_EXTRA( l_U410[2], 7, 1 );
            SET_VEHICLE_EXTRA( l_U410[2], 8, 1 );
        }
        if (NOT (IS_VEHICLE_DEAD( l_U410[3] )))
        {
            SET_VEHICLE_EXTRA( l_U410[3], 4, 0 );
            SET_VEHICLE_EXTRA( l_U410[3], 8, 0 );
            SET_VEHICLE_EXTRA( l_U410[3], 1, 1 );
            SET_VEHICLE_EXTRA( l_U410[3], 2, 1 );
            SET_VEHICLE_EXTRA( l_U410[3], 3, 1 );
            SET_VEHICLE_EXTRA( l_U410[3], 5, 1 );
            SET_VEHICLE_EXTRA( l_U410[3], 6, 1 );
            SET_VEHICLE_EXTRA( l_U410[3], 7, 1 );
        }
        l_U408 = 4;
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_ParkedVehiclesSpawn = ENTITY_STATE_COMPLETE", 0 );
        break;
    }
    return;
}

/* CREATEVEHICLE */ void sub_45295(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, int iParam5, unknown uParam6, unknown uParam7)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a vehicle with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_42588( uParam0, 1 );
    }
    Result = CREATE_VEHICLE( uParam0, uParam1, uParam4, uParam6, uParam7 );
    if (iParam5 == 1)
    {
        while ((DOES_VEHICLE_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for vehicle to exist: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if (DOES_VEHICLE_EXIST( Result ))
    {
        SET_PETROLTANK_BURN_RATE( Result, 125.00000000 );
    }
    return Result;
}

/* P_PL_CREATE_CAVIERAO */ void sub_46857()
{
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_CREATE_CAVIERAO start", 0 );
    l_U248 =  /* CREATEVEHICLE */ sub_45295( 975934894, 2.03000000, -52.44000000, 0.60000000, 256.00000000, 0, 0, 0 );
    if (NOT (IS_VEHICLE_DEAD( l_U248 )))
    {
        SET_VEHICLE_ON_GROUND_PROPERLY( l_U248 );
        SET_VEHICLE_DOORS_LOCKED( l_U248, 2 );
        SET_VEHICLE_LIGHT_MULTIPLIER( l_U248, 0.20000000 );
        SET_VEHICLE_ONLY_DAMAGED_BY_PLAYER( l_U248, 1 );
        SET_VEHICLE_PROOFS( l_U248, 1, 1, 1, 1, 1 );
        SET_VEHICLE_FREEZE_AFTER_BLOWING_UP( l_U248, 1 );
        SET_VEHICLE_FIXED_WEAPON_ACCURACY( l_U248, 0.90000000, 0 );
        SET_VEHICLE_FIXED_WEAPON_DAMAGE( l_U248, 200, 0 );
        SET_VEHICLE_FIXED_WEAPON_FIRING_PATTERN_MODE( l_U248, 0, 0 );
        SET_VEHICLE_FIXED_WEAPON_FIRING_PATTERN_SET( l_U248, 0, GET_HASH_KEY( "FIRING_PATTERN_CAV_STEADY_FEW" ), 0, 0, 0, 0, 0, 0, 0, 0, 0 );
    }
    l_U564 =  /* CREATEPEDINVEHICLE */ sub_47195( ref l_U551, l_U248, -1, 0, 0 );
    if (NOT (IS_PED_DEAD( l_U564 )))
    {
        SET_PED_AI_TEMPLATE( l_U564, "AIT_EXPERT" );
        SET_PED_COMBAT_MOVEMENT( l_U564, 0 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U564, 1 );
        SET_PED_INVINCIBLE( l_U564, 1 );
        SET_PED_CAN_TRIGGER_BULLET_CAM( l_U564, 0 );
        SET_PED_FREEZE_PROCESSING( l_U564, 1 );
    }
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_CREATE_CAVIERAO end", 0 );
    return;
}

/* CREATEPEDINVEHICLE */ void sub_47195(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4)
{
    if ((HAS_MODEL_LOADED( iParam0->_fU16 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_42588( iParam0->_fU16, 1 );
    }
    if (((IS_VEHICLE_DEAD( uParam1 )) == 0) AND ((DOES_VEHICLE_EXIST( uParam1 )) == 1))
    {
        iParam0->_fU40 = CREATE_PED_INSIDE_VEHICLE( uParam1, iParam0->_fU24, iParam0->_fU16, uParam2, uParam4, iParam0->_fU48 );
    }
    else
    {
        SCRIPT_ASSERT( "The vehicle your trying to create a ped inside of is not valid!!!", 0 );
    }
    if (iParam3 == 1)
    {
        while ((DOES_PED_EXIST( iParam0->_fU40 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for ped created inside a vehicle to exist... ###", 0 );
            WAIT( 0 );
        }
    }
     /* SETPEDDEFAULTSTATS */ sub_43137( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_43238( iParam0->_fU40 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        iParam0->_fU44 = 1;
    }
    return iParam0->_fU40;
}

/* P_PL_CREATE_PROPS */ void sub_48011()
{
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_CREATE_PROPS start", 0 );
    g_U4334 =  /* CREATEOBJECT */ sub_48098( -1256275333, g_U4335, g_U4338, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U4334 )) == 1)
    {
        FREEZE_OBJECT_POSITION( g_U4334, 1 );
        SET_OBJECT_AS_PATH_OBSTACLE( g_U4334 );
    }
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_CREATE_PROPS end", 0 );
    return;
}

/* CREATEOBJECT */ void sub_48098(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_42588( uParam0, 1 );
    }
    Result = CREATE_OBJECT( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_PL_CREATE_PLACEMENTS */ void sub_48493()
{
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_CREATE_PLACEMENTS start", 0 );
    l_U399 =  /* CREATEPLACEMENT */ sub_48615( -64228399, 35.30000000, -61.80000000, -3.40000000, 2.00000000, 0.00000000, 0.70000000, 0, 0, 0, 1119092736 );
    l_U403[0] =  /* CREATEPLACEMENT */ sub_48615( 1468647706, 32.53691000, -49.84233000, -3.46077500, 0.00000000, 0.00000000, 0.50000000, 0, 0, 0, 1119092736 );
    l_U403[1] =  /* CREATEPLACEMENT */ sub_48615( 1468647706, 30.32000000, -50.90000000, -3.15000000, -0.30000000, 0.90000000, 0.30000000, 1, 0, 0, 1119092736 );
    l_U403[2] =  /* CREATEPLACEMENT */ sub_48615( 1468647706, 36.94100000, -50.91000000, -3.40000000, 1.60000000, 0, -0.60000000, 0, 0, 0, 1119092736 );
    l_U403[3] =  /* CREATEPLACEMENT */ sub_48615( 1468647706, 34.45000000, -59.30000000, -3.05000000, -0.50000000, 1.20000000, 0.30000000, 1, 0, 0, 1119092736 );
    l_U400[0] = CREATE_AMMOBAG_PLACEMENT_ROTATE( 34.85000000, -61.90000000, -3.40000000, 0.00000000, 0.00000000, 0.00000000, 10.00000000, 3.00000000, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U400[0] ))
    {
        SET_AMMOBAG_AMMO_AMOUNT( l_U400[0], -1889644301, 6 );
    }
    l_U400[1] = CREATE_AMMOBAG_PLACEMENT_ROTATE( 30.76000000, -49.04000000, -3.35000000, 0.00000000, 0.00000000, 1.80000000, 10.00000000, 3.00000000, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U400[1] ))
    {
        SET_AMMOBAG_AMMO_AMOUNT( l_U400[1], -1889644301, 6 );
    }
     /* P_CREATE_S_POL_GG_RP_01 */ sub_49230();
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_CREATE_PLACEMENTS end", 0 );
    return;
}

/* CREATEPLACEMENT */ void sub_48615(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_CREATE_S_POL_GG_RP_01 */ void sub_49230()
{
     /* WRITESCRIPTLOG */ sub_550( "CO", "P_CREATE_S_POL_GG_RP_01", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_49358( ref g_U703, g_U814, 47113142, 747959537, -10.83000000, -60.45000000, -3.28000000, 1.50000000, 0.00000000, 1.00000000, "" );
     /* P_CREATECOLLECTIBLE */ sub_49515( ref g_U703 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_49358(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_550( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_49515(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_550( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_49598( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_550( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_550( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_49598( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_6325( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_48615( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_550( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_550( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_49598(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_DROP_PRE_RIOT_PRECINCT_STREAMHELPERS */ void sub_50389()
{
     /* WRITESCRIPTLOG */ sub_550( "CMT", "Removing pre-riot interiors...", 0 );
    SET_HELPER_ENABLED( "cs_13_01_B", 0, 0 );
    SET_HELPER_ENABLED( "cs_13_01_A", 0, 0 );
    SET_HELPER_ENABLED( "cs_13_01_C", 0, 0 );
    SET_HELPER_ENABLED( "MILO_cell_preriot_interior", 0, 1 );
    SET_HELPER_ENABLED( "exchange_pre_interior", 0, 1 );
    return;
}

/* F_PL_MID_05_PRECUTSCENESETUP */ int sub_50848()
{
    switch (l_U335)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_M5_Ped_Spawn = ENTITY_STATE_INIT", 0 );
         /* P_PL_CREATE_MID_05_WALL_RAYFIRE */ sub_50976();
        l_U336 = 0;
        l_U335 = 2;
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_M5_Ped_Spawn = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        l_U328[l_U336] =  /* CREATEPED */ sub_42406( ref l_U249[l_U336] );
        if (NOT (IS_PED_DEAD( l_U328[l_U336] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U328[l_U336], 1 );
        }
         /* P_DEACTIVATEPED */ sub_44735( l_U328[l_U336] );
        l_U336++;
        if (l_U336 >= 6)
        {
            l_U335 = 3;
             /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_M5_Ped_Spawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* F_GIVEPEDWEAPON */ sub_9407( l_U328[0], 1308526797, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U328[1], 1308526797, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U328[2], 1308526797, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U328[3], -862236369, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U328[4], -862236369, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U328[5], 377623895, 25000, 0, 0 );
        l_U335 = 4;
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_M5_Ped_Spawn = ENTITY_STATE_COMPLETE", 0 );
        break;
    }
    if (l_U335 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

/* P_PL_CREATE_MID_05_WALL_RAYFIRE */ void sub_50976()
{
    int[9] iVar2;
    int I;

     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_CREATE_MID_05_WALL_RAYFIRE start", 0 );
    array(ref iVar2, 9);
    iVar2[0] = -79812758;
    iVar2[1] = 159958015;
    iVar2[2] = 409035184;
    iVar2[3] = 905223382;
    iVar2[4] = 1155021469;
    iVar2[5] = 1376670985;
    iVar2[6] = 1634530246;
    iVar2[7] = 2125082180;
    iVar2[8] = -1905799745;
    for ( I = 0; I <= 8; I++ )
    {
        l_U337[I] =  /* CREATEOBJECT */ sub_48098( iVar2[I], 2.90000000, -46.82600000, -0.13900000, 0, 0, 0, 0, 0, 0 );
        if (DOES_OBJECT_EXIST( l_U337[I] ))
        {
            FREEZE_OBJECT_POSITION( l_U337[I], 1 );
            SET_OBJECT_COLLISION( l_U337[I], 0 );
        }
    }
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_CREATE_MID_05_WALL_RAYFIRE end", 0 );
    return;
}

/* P_PL_MID_05_CUTSCENEREGISTRATION */ void sub_51856()
{
    unknown uVar2;
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_MID_05_CutsceneRegistration start", 0 );
     /* P_ACTIVATEPEDARRAY */ sub_51957( ref l_U328 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1488(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            if ( /* IS_WEAPON_SINGLE_HANDED */ sub_52191( uVar2 ))
            {
                REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_Clt1911_Aa_H", 0 );
            }
            else
            {
                uVar3 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_52446();
                if (GET_DOES_WEAPON_EXIST( uVar3 ))
                {
                    REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar3, "W_PI_Clt1911_Aa_H", 0 );
                }
            }
        }
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_1488(), g_U2953[4], g_U3083[4] );
    }
    if (NOT (IS_PED_DEAD( l_U328[0] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U328[0], "P_UFE_Sold_A", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U328[0], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_AR_FAL_Aa_H", 1 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U328[1] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U328[1], "P_UFE_Sold_A^1", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U328[1], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_AR_FAL_Aa_H^1", 1 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U328[2] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U328[2], "P_UFE_Sold_A^2", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U328[2], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_AR_FAL_Aa_H^2", 1 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U328[3] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U328[3], "G_PP_Riot_B", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U328[3], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_Clt1911_Aa_H^1", 1 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U328[4] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U328[4], "G_PP_Riot_B^1", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U328[4], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_Clt1911_Aa_H^2", 1 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U328[5] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U328[5], "G_PP_Riot_B^2", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U328[5], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_SP_m72law_Aa_H", 1 );
        }
    }
    CUTSCENE_REGISTER_ISEQ( 984386305 );
    ISEQ_REGISTER_ENTITY( 984386305, "Max",  /* PLAYER_PED_ID */ sub_1488(), 0 );
    ISEQ_REGISTER_ENTITY( 984386305, "Prisoner", l_U685[1], 0 );
    CUTSCENE_ENABLE_SKIP( 0 );
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_MID_05_CutsceneRegistration end", 0 );
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_51957(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_52009( (uParam0^)[I] );
    }
    return;
}

/* P_ACTIVATEPED */ void sub_52009(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_52191(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_52446()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1488(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_52191( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1488(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1488(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1488(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* P_PL_MID_05_HANDLECUTSCENE */ void sub_53586()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;

    if (l_U218._fU52)
    {
        SET_WEATHER_TYPE_NOW_PERSIST( "RAIN" );
        if (IS_SCREEN_FADED_OUT())
        {
            DO_SCREEN_FADE_IN( 0 );
        }
        if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1526() ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() ))))
        {
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1526(), 1 );
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1488(), 0 );
        }
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
        {
            uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1488(), 0, 0 );
            if (GET_DOES_WEAPON_EXIST( uVar2 ))
            {
                if ( /* IS_WEAPON_SINGLE_HANDED */ sub_52191( uVar2 ))
                {
                    uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1488(), 1, 0 );
                    if (GET_DOES_WEAPON_EXIST( uVar3 ))
                    {
                        SET_WEAPON_VISIBLE( uVar3, 0 );
                    }
                    uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1488(), 2 );
                    if (GET_DOES_WEAPON_EXIST( uVar4 ))
                    {
                        SET_WEAPON_VISIBLE( uVar4, 0 );
                    }
                }
                else
                {
                    SET_WEAPON_VISIBLE( uVar2, 0 );
                }
            }
        }
         /* WRITESCRIPTLOG */ sub_550( "GA", "Force music PRECINCT_FINAL mood PRECINCT_01_1_5", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_5", "", 0, -1, -1, -1082130432, 0 );
         /* WRITESCRIPTLOG */ sub_550( "AT", "Disabling WALLA: S_POLICE_WZ_PARKING_LOT and AMBIENT: S_POLICE_ZONE_PARKING_LOT_GUNFIGHT", 0 );
        ENABLE_WALLA_ZONE( "S_POLICE_WZ_PARKING_LOT", 0 );
        ENABLE_AMBIENT_ZONE( "S_POLICE_ZONE_PARKING_LOT_GUNFIGHT", 0 );
    }
    if ((GET_CUTSCENE_TIME_MS() > l_U348) AND (NOT l_U347))
    {
         /* P_PL_ANIMATE_MID_05_WALL_RAYFIRE */ sub_54207();
        l_U347 = 1;
    }
    return;
}

/* P_PL_ANIMATE_MID_05_WALL_RAYFIRE */ void sub_54207()
{
    string[9] sVar2;
    int I;

     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_ANIMATE_MID_05_WALL_RAYFIRE start", 0 );
    array(ref sVar2, 9);
    sVar2[0] = "RF_PO_RL_ANIM01";
    sVar2[1] = "RF_PO_RL_ANIM02";
    sVar2[2] = "RF_PO_RL_ANIM03";
    sVar2[3] = "RF_PO_RL_ANIM04";
    sVar2[4] = "RF_PO_RL_ANIM05";
    sVar2[5] = "RF_PO_RL_ANIM06";
    sVar2[6] = "RF_PO_RL_ANIM07";
    sVar2[7] = "RF_PO_RL_ANIM08";
    sVar2[8] = "RF_PO_RL_ANIM09";
    for ( I = 0; I <= 8; I++ )
    {
        if (DOES_OBJECT_EXIST( l_U337[I] ))
        {
            PLAY_OBJECT_ANIM( l_U337[I], sVar2[I], "po_anim", 0.10000000, 0, 1 );
        }
    }
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_ANIMATE_MID_05_WALL_RAYFIRE end", 0 );
    return;
}

/* CUTSYS_DEFAULT_POSTCUTSCENE */ int sub_54678()
{
    return 1;
}

/* P_PL_START_MID_05_BLENDOUT */ void sub_54727()
{
    int I;

     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_START_MID_05_BLENDOUT start", 0 );
     /* CLEANPEDARRAY */ sub_5824( ref l_U328 );
     /* CLEANOBJECTARRAY */ sub_6175( ref l_U337 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_54839( -79812758, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_54839( 159958015, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_54839( 409035184, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_54839( 905223382, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_54839( 1155021469, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_54839( 1376670985, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_54839( 1634530246, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_54839( 2125082180, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_54839( -1905799745, ref g_U2468 );
     /* P_ACTIVATEPED */ sub_52009( l_U685[1] );
    if (NOT (IS_PED_DEAD( l_U564 )))
    {
        SET_PED_FREEZE_PROCESSING( l_U564, 0 );
    }
    for ( I = 0; I <= 4; I++ )
    {
        if ((NOT (IS_PED_DEAD( l_U685[I] ))) || (IS_PED_DEAD( l_U685[I] )))
        {
            SET_PED_VISIBLE( l_U685[I], 1 );
        }
    }
     /* P_PL_CREATE_FAKE_EXCHANGE_DOOR */ sub_55522();
    if ((NOT (IS_PED_DEAD( l_U685[1] ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() ))))
    {
        SET_PED_EMOTION_STATE(  /* PLAYER_PED_ID */ sub_1488(), 9 );
        if (NOT (ISEQ_QUERY_STATE( 984386305, 3 )))
        {
            ISEQ_REGISTER_ENTITY( 984386305, "Max",  /* PLAYER_PED_ID */ sub_1488(), 0 );
            ISEQ_REGISTER_ENTITY( 984386305, "Prisoner", l_U685[1], 0 );
             /* TELEPORTPED */ sub_55898(  /* PLAYER_PED_ID */ sub_1488(), g_U2953[4], g_U3083[4] );
             /* TELEPORTPED */ sub_55898( l_U685[1], l_U619[1]._fU0, l_U619[1]._fU12 );
            ISEQ_START( 984386305 );
        }
        SNAP_PLAYER_TO_COVERPOINT(  /* PLAYER_ID */ sub_1526(), "GenCover", "2C3CBEE5_E131D17B_Corner1", 1 );
    }
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U3127[4], 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U3171[4], 1065353216, 0 );
     /* STARTTIMER */ sub_2533( ref l_U359 );
     /* STARTTIMER */ sub_2533( ref l_U369 );
     /* STARTTIMER */ sub_2533( ref l_U379 );
    CAMERA_PLAY_ANIMATED( "LEVEL_S_POLICE_CP_04", "B_OUT_MID_05_PP_RIFLE_CAM", 0, 0, 0, 0, 0.00000000, 0, 0 );
    CUTSCENE_ENABLE_SKIP( 1 );
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_START_MID_05_BLENDOUT end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_54839(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4869( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_PL_CREATE_FAKE_EXCHANGE_DOOR */ void sub_55522()
{
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_CREATE_FAKE_EXCHANGE_DOOR start", 0 );
    l_U388 =  /* CREATEOBJECT */ sub_48098( 242268567, 55.46000000, -43.96600000, -3.45000000, 0.00000000, 0.00000000, 180.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U388 ))
    {
        FREEZE_OBJECT_POSITION( l_U388, 1 );
    }
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_CREATE_FAKE_EXCHANGE_DOOR end", 0 );
    return;
}

/* TELEPORTPED */ void sub_55898(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* F_PL_HANDLE_MID_05_BLENDOUT */ int sub_56269()
{
    int I;

    if (l_U218._fU52)
    {
        SET_WEATHER_TYPE_NOW_PERSIST( "RAIN" );
    }
    if (IS_SCREEN_FADED_OUT())
    {
        if ((NOT l_U349._fU20) AND (ISEQ_QUERY_STATE( 984386305, 3 )))
        {
             /* WRITESCRIPTLOG */ sub_550( "GA", "MID_05_PP blendout is playing, fading in screen.", 0 );
             /* STARTTIMER */ sub_2533( ref l_U349 );
        }
        if ( /* ISTIMERDONE */ sub_2666( ref l_U349 ))
        {
            DO_SCREEN_FADE_IN( 0 );
        }
    }
    if ( /* ISTIMERDONE */ sub_2666( ref l_U359 ))
    {
         /* WRITESCRIPTLOG */ sub_550( "GA", "Start Shooting Prisoner in MID_05_PP blendout.", 0 );
        l_U616 = 3;
    }
    if ( /* ISTIMERDONE */ sub_2666( ref l_U369 ))
    {
         /* WRITESCRIPTLOG */ sub_550( "GA", "Stop Shooting Prisoner in MID_05_PP blendout.", 0 );
        l_U616 = 0;
    }
    if ( /* ISTIMERDONE */ sub_2666( ref l_U379 ))
    {
         /* WRITESCRIPTLOG */ sub_550( "GA", "Start Shooting Max in MID_05_PP blendout.", 0 );
        l_U616 = 4;
    }
    if (NOT (IS_PED_DEAD( l_U685[1] )))
    {
        if ((PED_GET_ACTION_INTENTION_STATUS( l_U685[1], 47 )) == 3)
        {
             /* WRITESCRIPTLOG */ sub_550( "GA", "Killing MID_05_PP Blendout prisoner.", 0 );
             /* P_KILL_PED */ sub_56807( l_U685[1] );
        }
    }
    if (CAMERA_ANIMATED_CURRENT_TIME() > l_U245)
    {
        if (NOT l_U247)
        {
             /* WRITESCRIPTLOG */ sub_550( "AT", "Stopping animated blendout camera.", 0 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U3127[4], 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U3171[4], 1065353216, 0 );
            CAMERA_ANIMATED_STOP( l_U246, 1 );
            l_U247 = 1;
        }
    }
    if ((l_U247) AND ((ISEQ_QUERY_ENTITY_STATE( 984386305, "Max", 6 )) || (ISEQ_QUERY_ENTITY_STATE( 984386305, "Max", 5 ))))
    {
        if (NOT (IS_PED_DEAD( l_U685[1] )))
        {
             /* WRITESCRIPTLOG */ sub_550( "GA", "Somehow the prisoner didn't get killed.  Safety killing him now.", 0 );
             /* P_KILL_PED */ sub_56807( l_U685[1] );
        }
        if (NOT (IS_VEHICLE_DEAD( l_U248 )))
        {
            SET_VEHICLE_PROOFS( l_U248, 1, 0, 0, 1, 1 );
        }
        for ( I = 0; I < l_U410; I++ )
        {
            if (NOT (IS_VEHICLE_DEAD( l_U410[I] )))
            {
                SET_VEHICLE_PROOFS( l_U410[I], 0, 1, 0, 1, 1 );
            }
        }
        return 1;
    }
    return 0;
}

/* P_KILL_PED */ void sub_56807(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_57307(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_550( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_57531( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 57428, 57478, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_57428()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_57478()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_57531(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_SETCUTSCENELOADEXTERIORONSKIP */ void sub_57842(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    iParam0->_fU68 = 1;
    iParam0->_fU72 = 0;
    iParam0->_fU84 = {uParam1};
    iParam0->_fU24 = 1;
    return;
}

/* P_PL_HANDLE_CAV_SHOOTING */ void sub_57969()
{
    switch (l_U616)
    {
        case 0:
        if ( /* ISTIMERDONE */ sub_2666( ref l_U577 ))
        {
             /* WRITESCRIPTLOG */ sub_550( "GA", "Cav is starting to fire.", 0 );
             /* CREATETIMER */ sub_2383( ref l_U587, l_U586, 1, 0 );
             /* STARTTIMER */ sub_2533( ref l_U587 );
            l_U616 = 1;
        }
        break;
        case 1:
        if (l_U550 > -1)
        {
            if ( /* ISTIMERDONE */ sub_2666( ref l_U607 ))
            {
                if (NOT (IS_PED_DEAD( l_U564 )))
                {
                     /* P_PL_CAV_SHOOT_AT_CAR */ sub_58195( l_U550 );
                }
            }
        }
        else if ( /* ISTIMERDONE */ sub_2666( ref l_U607 ))
        {
            if (NOT (IS_PED_DEAD( l_U564 )))
            {
                if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
                {
                    REGISTER_TARGET( l_U564,  /* PLAYER_PED_ID */ sub_1488() );
                    TASK_VEHICLE_SHOOT_AT_PED( l_U564,  /* PLAYER_PED_ID */ sub_1488() );
                }
            }
        }
        if ((IS_ROCKET_IN_FLIGHT()) || ( /* ISTIMERDONE */ sub_2666( ref l_U587 )))
        {
             /* WRITESCRIPTLOG */ sub_550( "GA", "Stopping Cav Firing, start cool down.", 0 );
            if (NOT (IS_PED_DEAD( l_U564 )))
            {
                TASK_PAUSE( l_U564, l_U596 );
            }
             /* CREATETIMER */ sub_2383( ref l_U597, l_U596, 1, 0 );
             /* STARTTIMER */ sub_2533( ref l_U597 );
            l_U616 = 2;
        }
        break;
        case 2:
        if ( /* ISTIMERDONE */ sub_2666( ref l_U597 ))
        {
             /* WRITESCRIPTLOG */ sub_550( "GA", "Cool down done, start shooting.", 0 );
             /* CREATETIMER */ sub_2383( ref l_U587, l_U586, 1, 0 );
             /* STARTTIMER */ sub_2533( ref l_U587 );
            l_U616 = 1;
        }
        break;
        case 3:
        if ( /* ISTIMERDONE */ sub_2666( ref l_U607 ))
        {
            if (NOT (IS_PED_DEAD( l_U564 )))
            {
                if (NOT (IS_PED_DEAD( l_U685[1] )))
                {
                    REGISTER_TARGET( l_U564, l_U685[1] );
                    TASK_VEHICLE_SHOOT_AT_PED( l_U564, l_U685[1] );
                }
            }
        }
        break;
        case 4:
        if ( /* ISTIMERDONE */ sub_2666( ref l_U607 ))
        {
            if (NOT (IS_PED_DEAD( l_U564 )))
            {
                if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
                {
                    REGISTER_TARGET( l_U564,  /* PLAYER_PED_ID */ sub_1488() );
                    TASK_VEHICLE_SHOOT_AT_PED( l_U564,  /* PLAYER_PED_ID */ sub_1488() );
                }
            }
        }
        break;
    }
    if ((l_U607._fU16) || (NOT l_U607._fU20))
    {
         /* RESETTIMER */ sub_3242( ref l_U607 );
         /* STARTTIMER */ sub_2533( ref l_U607 );
    }
    return;
}

/* P_PL_CAV_SHOOT_AT_CAR */ void sub_58195(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    uVar3 = {l_U416[uParam0]};
    uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_1488() )};
    uVar3._fU4 = uVar6._fU4;
    uVar3._fU0 += 0.10000000;
    uVar3._fU8 += 0.10000000;
    TASK_VEHICLE_SHOOT_AT_COORD( l_U564, uVar3 );
    return;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_58882(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_550( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_550( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_550( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_550( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_550( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_550( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_33852( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_550( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_59773( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_59773( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_550( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_60317( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_59773( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_60697( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_60697( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* NIS_PRE_SETUP */ void sub_59773(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1526(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1488(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1488() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1488(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_60317(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1488(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1488(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1488(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1488(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1488(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_60697(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1526(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1488(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_60795();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_60795()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1488(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1488(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1488(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1488(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* NIS_RETURN_TO_GAMEPLAY_CAM */ void sub_61105(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, float fParam4, unknown uParam5)
{
    SET_CAM_SIDE_LEFT( uParam2 );
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam3, 1065353216, 0 );
    }
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( fParam4, 1065353216, 0 );
    }
    RENDER_SCRIPT_CAMS( 0, uParam1, uParam0, uParam5 );
    return;
}

/* P_START_SP_CHALLENGES */ void sub_61376()
{
     /* WRITESCRIPTLOG */ sub_550( "CCB", "P_START_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_550( "CCB", "Starting the Precinct_Parking context...", 0 );
    START_CONTEXT( "Precinct_Parking" );
    return;
}

/* P_PL_PROTOTYPE_SINGLE_SHOT_LAW */ void sub_61684()
{
    unknown uVar2;
    unknown uVar3;
    int iVar4;
    int I;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1488(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1488(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            if ((GET_WEAPON_TYPE( uVar2 )) == 377623895)
            {
                iVar4 = GET_WEAPON_AMMO_IN_CLIP( uVar2 );
                if (((GET_AMMO_IN_PED_WEAPON(  /* PLAYER_PED_ID */ sub_1488(), 377623895 )) + iVar4) > 1)
                {
                     /* WRITESCRIPTLOG */ sub_550( "GA", "Setting LAW to only have one shot.", 0 );
                    SET_PED_AMMO(  /* PLAYER_PED_ID */ sub_1488(), 377623895, 0 );
                    SET_AMMO_IN_CLIP(  /* PLAYER_PED_ID */ sub_1488(), 377623895, 1 );
                }
            }
        }
        if (l_U213 == 12)
        {
            if ((NOT l_U565) AND (IS_ROCKET_IN_FLIGHT()))
            {
                 /* WRITESCRIPTLOG */ sub_550( "AT", "Player fired rocket!", 0 );
                 /* CREATETIMER */ sub_2383( ref l_U566, 10000, 1, 0 );
                 /* STARTTIMER */ sub_2533( ref l_U566 );
                l_U565 = 1;
            }
            if (l_U565)
            {
                if ( /* ISTIMERDONE */ sub_2666( ref l_U566 ))
                {
                    l_U565 = 0;
                }
                if (NOT l_U566._fU16)
                {
                    if ((( /* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ sub_62211(  /* PLAYER_PED_ID */ sub_1488(), 1.26000000, -53.33000000, -3.42000000 )) > 20.00000000) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62074( ref l_U785 )) > 0))
                    {
                        if (IS_EXPLOSION_IN_SPHERE( -1, -5.25000000, -50.23000000, 0.00000000, 10.00000000 ))
                        {
                             /* WRITESCRIPTLOG */ sub_550( "AT", "BOOM!", 0 );
                            ADD_EXPLOSION( 1.26000000, -53.33000000, -3.42000000, 2, 1.00000000, 1, 0, 1065353216 );
                            ADD_EXPLOSION( 1.26000000, -53.33000000, -3.42000000, 3, 1.00000000, 1, 0, 1065353216 );
                            for ( I = 0; I < l_U785; I++ )
                            {
                                if (NOT (IS_PED_DEAD( l_U785[I] )))
                                {
                                    if (NOT (IS_PED_PROCESSING_FROZEN( l_U785[I] )))
                                    {
                                        if (( /* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ sub_62211( l_U785[I], 1.26000000, -53.33000000, -3.42000000 )) < 13.00000000)
                                        {
                                            APPLY_FORCE_TO_PED( l_U785[I], 2, 50.00000000, 50.00000000, 50.00000000, 0.00000000, 0.00000000, 0.10000000, 0, 1, 1, 1 );
                                             /* P_KILL_PED */ sub_56807( l_U785[I] );
                                        }
                                    }
                                }
                            }
                            l_U565 = 0;
                        }
                    }
                }
            }
        }
    }
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_62074(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ void sub_62211(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    else
    {
        return -1.00000000;
    }
    return VDIST( uVar6, uParam1 );
}

/* P_HANDLE_HINT_DIALOGUE */ void sub_62658()
{
    unknown uVar2;
    unknown uVar3;

    if (l_U616 != 1)
    {
        if (NOT l_U953)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
            {
                uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1488(), 0, 0 );
                if (GET_DOES_WEAPON_EXIST( uVar2 ))
                {
                    if (((GET_WEAPON_TYPE( uVar2 )) == -1659006841) || ((GET_WEAPON_TYPE( uVar2 )) == 377623895))
                    {
                        l_U953 = 1;
                    }
                    else if (DOES_VEHICLE_EXIST( l_U248 ))
                    {
                        uVar3 =  /* PLAYER_PED_ID */ sub_1488();
                        if (HAS_BULLET_IMPACTED_IN_AREA( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( l_U248 ), 15.00000000, ref uVar3 ))
                        {
                            if ((NOT l_U886._fU16) AND (NOT l_U886._fU20))
                            {
                                 /* STARTTIMER */ sub_2533( ref l_U886 );
                            }
                        }
                    }
                }
            }
            if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_62896()))
            {
                if ( /* ISTIMERDONE */ sub_2666( ref l_U886 ))
                {
                     /* P_SPEECH_PLAY_MONOLOGUE */ sub_63028( "SPOL_PLSHGN", ref l_U923 );
                    if (l_U895._fU20)
                    {
                         /* CREATETIMER */ sub_2383( ref l_U895, 15000, 1, 0 );
                         /* STARTTIMER */ sub_2533( ref l_U895 );
                    }
                }
                if ( /* ISTIMERDONE */ sub_2666( ref l_U895 ))
                {
                     /* P_SPEECH_PLAY_MONOLOGUE */ sub_63028( "SPOL_PLNPKUP", ref l_U933 );
                    if (l_U886._fU20)
                    {
                         /* CREATETIMER */ sub_2383( ref l_U886, 8000, 1, 0 );
                         /* STARTTIMER */ sub_2533( ref l_U886 );
                    }
                }
            }
        }
    }
    return;
}

/* IS_ANY_SPEECH_CURRENTLY_PLAYING */ void sub_62896()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_63028(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_63066( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_63175( 0,  /* PLAYER_PED_ID */ sub_1488(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_63175( 1,  /* PLAYER_PED_ID */ sub_1488(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_63428( uParam0, uParam1, 8, 1 );
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_63066(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_63175(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_63428(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_63473( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_63473(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_63560( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_63560(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_63612( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_64130( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_63612(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_64130(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* F_PL_GET_VEHICLE_COVER_IDX */ int sub_64609()
{
    int Result;

    for ( Result = 0; Result < l_U444; Result++ )
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_64679(  /* PLAYER_PED_ID */ sub_1488(), l_U444[Result] ))
        {
            return Result;
        }
    }
    return -1;
}

/* F_ISPEDINTRIGGERBOX */ int sub_64679(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_START_CHECKPOINT_THREAD */ void sub_65162(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* P_PL_OPEN_SLIDING_GATE */ void sub_65484()
{
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_OPEN_SLIDING_GATE start", 0 );
    if (DOES_OBJECT_EXIST( g_U4334 ))
    {
        PLAY_OBJECT_ANIM( g_U4334, "slidinggate", "po_anim", 1000.00000000, 0, 1 );
        SET_OBJECT_ANIM_SPEED( g_U4334, "slidinggate", "po_anim", 1.00000000 );
        SET_OBJECT_AS_NON_PATH_OBSTACLE( g_U4334 );
        l_U389 = GET_SOUND_ID();
        PLAY_SOUND_FROM_OBJECT( l_U389, "GARAGE_DOOR", g_U4334 );
    }
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_PL_OPEN_SLIDING_GATE end", 0 );
    return;
}

/* F_IS_OBJECT_PLAYING_ANIM */ int sub_65846(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if ((DOES_OBJECT_EXIST( uParam0 )) == 1)
    {
        if (IS_OBJECT_PLAYING_ANIM( uParam0, uParam2, uParam1 ))
        {
            return 1;
        }
    }
    return 0;
}

/* P_PL_START_LOWER_ENEMIES */ void sub_66030()
{
    vector[7] vVar2;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    int I;

    array(ref vVar2, 7);
    vVar2[0] = {16.59000000, -52.34000000, -3.40000000};
    vVar2[1] = {9.94000000, -52.77000000, -3.40000000};
    vVar2[2] = {12.19000000, -49.69000000, -3.40000000};
    vVar2[3] = {8.17000000, -54.31000000, -3.40000000};
    switch (l_U691)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_LowerEnemySpawn = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_66263( ref l_U793, 1056964608, 0 );
        l_U692 = 0;
        l_U691 = 2;
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_LowerEnemySpawn = ENTITY_STATE_INIT", 0 );
        break;
        case 2:
        l_U785[l_U692] =  /* CREATEPED */ sub_42406( ref l_U693[l_U692] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_66763( l_U785[l_U692], ref l_U793 );
        if (l_U692 < 4)
        {
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_67187( ref l_U785[l_U692], "AIT_EXPERT", -1, 40.00000000 );
        }
        else if (l_U692 == 4)
        {
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_67187( ref l_U785[l_U692], "AIT_EXPERT", -1, 6.00000000 );
        }
        else if (l_U692 == 5)
        {
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_67187( ref l_U785[l_U692], "AIT_EXPERT", -1, 10.00000000 );
        }
        else
        {
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_67187( ref l_U785[l_U692], "AIT_EXPERT", -1, 15.00000000 );
        }
        SET_PED_PATH_CAN_AVOID_LINE_OF_FIRE( l_U785[l_U692], 0 );
        SET_PED_CAN_AVOID_DEATH_ZONES( l_U785[l_U692], 0 );;
         /* P_TETHERPED */ sub_67513( ref l_U801, l_U785[l_U692], 1 );
        l_U692++;
        if (l_U692 >= 7)
        {
            l_U691 = 3;
             /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_LowerEnemySpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_43552( ref l_U785, "pi_PL_LowerEnemy" );
        SET_PED_MODEL_LOD_DISTANCES( -417930772, 10, 80 );
        SET_PED_MODEL_LOD_DISTANCES( 1322684573, 10, 80 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U785[0], 434544317, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U785[1], -862236369, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U785[2], -862236369, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U785[3], 1308526797, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U785[4], 434544317, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U785[5], -862236369, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_9407( l_U785[6], 1308526797, 25000, 0, 0 );
         /* P_DEACTIVATEPED */ sub_44735( l_U785[5] );
         /* P_DEACTIVATEPED */ sub_44735( l_U785[6] );
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() ))) AND (NOT (IS_PED_DEAD( l_U785[0] ))))
        {
            REGISTER_TARGET( l_U785[0],  /* PLAYER_PED_ID */ sub_1488() );
            OPEN_SEQUENCE_TASK( ref uVar24 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
            TASK_COMBAT_SNAP_TO_COVER_COORDS( 0, -12.46288000, -53.52878000, -3.46047600, 0 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1488() );
            CLOSE_SEQUENCE_TASK( uVar24 );
            TASK_PERFORM_SEQUENCE( l_U785[0], uVar24 );
            CLEAR_SEQUENCE_TASK( uVar24 );
        }
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() ))) AND (NOT (IS_PED_DEAD( l_U785[1] ))))
        {
            REGISTER_TARGET( l_U785[1],  /* PLAYER_PED_ID */ sub_1488() );
            OPEN_SEQUENCE_TASK( ref uVar25 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
            TASK_COMBAT_SNAP_TO_COVER_COORDS( 0, -10.33046000, -60.13684000, -3.46047600, 0 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1488() );
            CLOSE_SEQUENCE_TASK( uVar25 );
            TASK_PERFORM_SEQUENCE( l_U785[1], uVar25 );
            CLEAR_SEQUENCE_TASK( uVar25 );
        }
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() ))) AND (NOT (IS_PED_DEAD( l_U785[2] ))))
        {
            REGISTER_TARGET( l_U785[2],  /* PLAYER_PED_ID */ sub_1488() );
            OPEN_SEQUENCE_TASK( ref uVar26 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
            TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, 9.74000000, -48.89000000, -3.42000000,  /* PLAYER_PED_ID */ sub_1488(), 0, 10.00000000, -1.00000000, -1082130432, 3 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1488() );
            CLOSE_SEQUENCE_TASK( uVar26 );
            TASK_PERFORM_SEQUENCE( l_U785[2], uVar26 );
            CLEAR_SEQUENCE_TASK( uVar26 );
        }
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() ))) AND (NOT (IS_PED_DEAD( l_U785[3] ))))
        {
            REGISTER_TARGET( l_U785[3],  /* PLAYER_PED_ID */ sub_1488() );
            OPEN_SEQUENCE_TASK( ref uVar27 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
            TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, 8.25000000, -51.57000000, -3.42000000,  /* PLAYER_PED_ID */ sub_1488(), 0, 10.00000000, -1.00000000, -1082130432, 3 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1488() );
            CLOSE_SEQUENCE_TASK( uVar27 );
            TASK_PERFORM_SEQUENCE( l_U785[3], uVar27 );
            CLEAR_SEQUENCE_TASK( uVar27 );
        }
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() ))) AND (NOT (IS_PED_DEAD( l_U785[4] ))))
        {
            REGISTER_TARGET( l_U785[4],  /* PLAYER_PED_ID */ sub_1488() );
            OPEN_SEQUENCE_TASK( ref uVar28 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
            TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, 9.85000000, -56.70000000, -3.42000000,  /* PLAYER_PED_ID */ sub_1488(), 0, 10.00000000, -1.00000000, -1082130432, 3 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1488() );
            CLOSE_SEQUENCE_TASK( uVar28 );
            TASK_PERFORM_SEQUENCE( l_U785[4], uVar28 );
            CLEAR_SEQUENCE_TASK( uVar28 );
        }
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U793._fU0, 1 );
        l_U800 = PEDGROUPTASK_ADVANCE_CREATE( l_U793._fU0 );
        for ( I = 0; I <= 6; I++ )
        {
            if (NOT (IS_PED_DEAD( l_U785[I] )))
            {
                PEDGROUPTASK_ADVANCE_ASSIGNPED( l_U793._fU0, l_U800, l_U785[I] );
            }
        }
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() )))
        {
            PEDGROUPTASK_ADVANCE_SETTARGET_PED( l_U793._fU0, l_U800,  /* PLAYER_PED_ID */ sub_1488() );
        }
        PEDGROUPTASK_ADVANCE_SETNUMPEDSTOADVANCE( l_U793._fU0, l_U800, 2 );
        PEDGROUPTASK_ADVANCE_SETTIMETOIDLE( l_U793._fU0, l_U800, 2.50000000 );
        PEDGROUPTASK_ADVANCE_SETTIMETOHIDE( l_U793._fU0, l_U800, 2.50000000 );
        PEDGROUPTASK_ADVANCE_TRIGGER_MOVE( l_U793._fU0, l_U800 );
        l_U691 = 4;
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_LowerEnemySpawn = ENTITY_STATE_COMPLETE", 0 );
        break;
    }
    return;
}

/* P_SETUP_AI_GROUP */ void sub_66263(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_66763(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_9016( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_66263( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_66263( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_SET_PED_TEMPLATE_AND_RANGES */ void sub_67187(unknown uParam0, unknown uParam1, float fParam2, float fParam3)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    return;
}

/* P_TETHERPED */ void sub_67513(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* F_PL_CAN_START_VIG_04 */ int sub_69163()
{
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_69203( l_U835 ))
    {
        return 1;
    }
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_69203( l_U856 ))
    {
        if (IS_SPHERE_VISIBLE( 0.14000000, -38.00000000, -2.36000000, 0.50000000, 1 ))
        {
            return 1;
        }
    }
    return 0;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_69203(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_64679(  /* PLAYER_PED_ID */ sub_1488(), uParam0 );
}

/* P_PL_CREATE_AND_START_VIG_04_PEDS */ void sub_69369()
{
    unknown uVar2;

    switch (l_U802)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_V4PedSpawn = ENTITY_STATE_INIT", 0 );
        l_U803 = 0;
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_V4PedSpawn = ENTITY_STATE_CREATING", 0 );
        l_U802 = 2;
        break;
        case 2:
        l_U831[l_U803] =  /* CREATEPED */ sub_42406( ref l_U804[l_U803] );
        if (NOT (IS_PED_DEAD( l_U831[l_U803] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U831[l_U803], "f2_fire_escape" );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U831[l_U803], 1 );
        }
         /* P_DEACTIVATEPED */ sub_44735( l_U831[l_U803] );
        l_U803++;
        if (l_U803 >= 2)
        {
             /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_V4PedSpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
            l_U802 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_43552( ref l_U831, "pi_PL_V4Ped" );
         /* P_ACTIVATEPEDARRAY */ sub_51957( ref l_U831 );
        if (NOT (IS_PED_DEAD( l_U831[0] )))
        {
             /* TELEPORTPED */ sub_55898( l_U831[0], l_U804[0]._fU0, l_U804[0]._fU12 );
            ISEQ_REGISTER_ENTITY( 1507052255, "Rioter", l_U831[0], 0 );
            ISEQ_START( 1507052255 );
            SET_PED_AS_ONE_SHOT_KILL( l_U831[0], 1 );
            PLAY_PED_AMBIENT_SPEECH( l_U831[0], "SWEAR_ANGRY", 0, 0, 0, 0, 30000 );
        }
        if (NOT (IS_PED_DEAD( l_U831[1] )))
        {
             /* F_GIVEPEDWEAPON */ sub_9407( l_U831[1], 1308526797, 25000, 0, 0 );
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_66763( l_U831[1], ref l_U793 );
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_67187( ref l_U831[1], "AIT_EXPERT", -1, 6.00000000 );
            SET_PED_PATH_CAN_AVOID_LINE_OF_FIRE( l_U831[1], 0 );
            SET_PED_CAN_AVOID_DEATH_ZONES( l_U831[1], 0 );
             /* P_TETHERPED */ sub_67513( ref l_U801, l_U831[1], 1 );
            PEDGROUPTASK_ADVANCE_ASSIGNPED( l_U793._fU0, l_U800, l_U831[1] );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1488() ))) AND (NOT (IS_PED_DEAD( l_U831[0] ))))
            {
                OPEN_SEQUENCE_TASK( ref uVar2 );
                TASK_AIM_GUN_AT_PED( 0, l_U831[0], 1500, 0 );
                TASK_SHOOT_AT_PED( 0, l_U831[0], 1500, 0, 0, 0, 0 );
                TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
                TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, -1.30000000, -39.58000000, -3.40000000,  /* PLAYER_PED_ID */ sub_1488(), 1, 2.00000000, -1, -1082130432, 3 );
                TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1488() );
                CLOSE_SEQUENCE_TASK( uVar2 );
                REGISTER_TARGET( l_U831[1],  /* PLAYER_PED_ID */ sub_1488() );
                TASK_PERFORM_SEQUENCE( l_U831[1], uVar2 );
                CLEAR_SEQUENCE_TASK( uVar2 );
            }
        }
         /* P_SETDOORLOCKED */ sub_17186( ref g_U3729, 0 );
         /* P_SETDOORLOCKED */ sub_17186( ref g_U3736, 0 );
         /* P_SETDOORAUTOCLOSE */ sub_70379( ref g_U3729, 0 );
         /* P_SETDOORAUTOCLOSE */ sub_70379( ref g_U3736, 0 );
         /* P_SETDOORLATCH */ sub_70474( ref g_U3729, 1 );
         /* P_SETDOORLATCH */ sub_70474( ref g_U3736, 1 );
         /* WRITESCRIPTLOG */ sub_550( "GA", "e_PL_V4PedSpawn = ENTITY_STATE_COMPLETE", 0 );
        l_U802 = 4;
        break;
    }
    return;
}

/* P_SETDOORAUTOCLOSE */ void sub_70379(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_16945( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_17029( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_SETDOORLATCH */ void sub_70474(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_16945( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_17029( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_PL_LOWER_SECOND_WAVE */ void sub_70943()
{
    if ( /* MAL_COMPAREPLAYERPOSAXIS */ sub_70991( "X", "Less", 7 ))
    {
         /* MAL_TELEPORTPED */ sub_71314( l_U785[5], 41.92464000, -45.95383000, -3.39954200, 180 );
         /* MAL_TELEPORTPED */ sub_71314( l_U785[6], 42.77094000, -45.24760000, -3.41811900, 180 );
    }
     /* P_ACTIVATEPED */ sub_52009( l_U785[5] );
     /* P_ACTIVATEPED */ sub_52009( l_U785[6] );
     /* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ sub_71456( ref l_U785[5] );
     /* MAL_UNBLOCKANDCOMBATPLAYER */ sub_71744( ref l_U785[5], 2, 1 );
     /* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ sub_71456( ref l_U785[6] );
     /* MAL_UNBLOCKANDCOMBATPLAYER */ sub_71744( ref l_U785[6], 2, 1 );
    return;
}

/* MAL_COMPAREPLAYERPOSAXIS */ int sub_70991(unknown uParam0, unknown uParam1, float fParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    float fVar8;

    uVar5 = { /* MAL_GETPEDCOORDS */ sub_71033(  /* PLAYER_PED_ID */ sub_1488() )};
    if (ARE_STRINGS_EQUAL( uParam0, "X" ))
    {
        fVar8 = uVar5._fU0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "Y" ))
    {
        fVar8 = uVar5._fU4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "Z" ))
    {
        fVar8 = uVar5._fU8;
    };;;
    if (ARE_STRINGS_EQUAL( uParam1, "Greater" ))
    {
        if (fVar8 > fParam2)
        {
            return 1;
        }
    }
    else if (ARE_STRINGS_EQUAL( uParam1, "Less" ))
    {
        if (fVar8 < fParam2)
        {
            return 1;
        }
    }
    return 0;
}

/* MAL_GETPEDCOORDS */ vector sub_71033(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return "[dynamic result, ret vals = 3]";
        break;
        GET_PED_COORDS( uParam0 );
        "[doubled result, dropped if not asigned]";
        "[doubled result, dropped if not asigned]";
        break;
    }
    return vector( 0, 0, 0);
}

/* MAL_TELEPORTPED */ void sub_71314(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ void sub_71456(unknown uParam0)
{
     /* MAL_SETLOCKEDANDREGISTEREDONPED */ sub_71510( uParam0,  /* PLAYER_PED_ID */ sub_1488() );
    return;
}

/* MAL_SETLOCKEDANDREGISTEREDONPED */ void sub_71510(unknown uParam0, unknown uParam1)
{
     /* MAL_REGISTERTARGET */ sub_71558( uParam0, uParam1 );
     /* MAL_SETLOCKEDTARGET */ sub_71640( uParam0, uParam1 );
    return;
}

/* MAL_REGISTERTARGET */ void sub_71558(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        REGISTER_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_SETLOCKEDTARGET */ void sub_71640(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        SET_LOCKED_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_UNBLOCKANDCOMBATPLAYER */ void sub_71744(unknown uParam0, unknown uParam1, unknown uParam2)
{
     /* MAL_UNBLOCKANDCOMBATPED */ sub_71794( uParam0,  /* PLAYER_PED_ID */ sub_1488(), uParam1, uParam2 );
    return;
}

/* MAL_UNBLOCKANDCOMBATPED */ void sub_71794(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

     /* MAL_WRITESCRIPTLOG */ sub_71856( "MAL_UnblockAndCombatPed" );
    OPEN_SEQUENCE_TASK( ref uVar6 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
         /* MAL_WRITESCRIPTLOG */ sub_71856( "MAL_UnblockAndCombatPed: Victim is not dead" );
        TASK_COMBAT_PED( 0, uParam1 );
    }
    CLOSE_SEQUENCE_TASK( uVar6 );
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
         /* MAL_WRITESCRIPTLOG */ sub_71856( "MAL_UnblockAndCombatPed: Ped is not dead" );
        if (bParam3)
        {
            CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        }
        else
        {
            CLEAR_PED_TASKS( (uParam0^) );
        }
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam2 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar6 );
    }
    CLEAR_SEQUENCE_TASK( uVar6 );
    return;
}

/* MAL_WRITESCRIPTLOG */ void sub_71856(unknown uParam0)
{
    unknown uVar3;

    uVar3 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar3, 1537, "MSWW", 1537, uParam0, 1537, "###" );
    return;
}

/* P_PL_DEBUG_TUNING_WIDGET */ void sub_72562()
{
    if (NOT l_U1006)
    {
        START_WIDGET_GROUP( "Parking Lot Tuning" );
        ADD_WIDGET_BOOL( "Reset Checkpoint", ref l_U1007 );
        START_WIDGET_GROUP( "MID_05_PP" );
        ADD_WIDGET_INT_SLIDER( "Time to play the building explosion", ref l_U348, 0, 10000000, 50 );
        ADD_WIDGET_INT_SLIDER( "Start Shooting Prisoner", ref l_U358, 0, 100000, 50 );
        ADD_WIDGET_INT_SLIDER( "Stop Shooting Prisoner", ref l_U368, 0, 100000, 50 );
        ADD_WIDGET_INT_SLIDER( "Start Shooting Max", ref l_U378, 0, 100000, 50 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Cavierao Tuning" );
        ADD_WIDGET_INT_SLIDER( "Time between shots", ref l_U606, 0, 10000, 50 );
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Animated Camera Tuning" );
        ADD_WIDGET_INT_SLIDER( "Animated Camera Stop Time", ref l_U245, 0, 6000, 1 );
        ADD_WIDGET_INT_SLIDER( "Animated Camera Interp Time", ref l_U246, 0, 6000, 1 );
        STOP_WIDGET_GROUP();
        l_U1006 = 1;
    }
    if (l_U1007)
    {
         /* P_CLEANUP_PL */ sub_4040();
        CLEAR_AREA( g_U2953[4], 10000, 1 );
        l_U213 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        l_U1007 = 0;
    }
    return;
}

/* P_RELEASE_PL_ASSETS */ void sub_73191()
{
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_RELEASE_PL_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_73270( ref l_U188, ref g_U2468 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_73375( ref g_U3553, ref g_U2741 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_73375( "veh@std", ref g_U2741 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_73375( "LEVEL_S_POLICE_CP_04", ref g_U2741 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_73771( ref l_U207, ref g_U2613 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_74198( ref g_U3505, ref g_U2889 );
     /* P_STREAMREQ_ACTION_TREE_REMOVE */ sub_74567( "Vehicle/Vehicle_Car.act", ref g_U2827 );
     /* WRITESCRIPTLOG */ sub_550( "GA", "P_RELEASE_PL_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_73270(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_54839( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_73375(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4869( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_73771(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_73845( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_73845(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4869( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_74198(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4869( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ACTION_TREE_REMOVE */ void sub_74567(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4869( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ACTION_TREE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

