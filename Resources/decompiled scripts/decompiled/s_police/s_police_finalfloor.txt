void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U55 = {0, 0, 0};
    StrCopy( ref l_U58, "DUMMY", 32 );
    l_U66 = 1;
    l_U71 = 0;
    l_U72 = 0;
    l_U73 = 0;
    l_U76 = 0;
    l_U140 = 0;
    l_U141 = 0;
    l_U142 = 1500;
    l_U230 = "PED_DEF";
    l_U272 = 1.00000000;
    l_U284 = 0;
    l_U325 = 0;
    l_U381 = 0;
    l_U383 = 1;
    l_U384 = 0;
    l_U385 = "MID_16_pp_concat";
     /* WRITESCRIPTLOG */ sub_486( "AT", "Script s_police_finalFloor.sc is starting up...", 0 );
     /* P_SETUP_FINAL_FLOOR_ENEMY_DATA */ sub_604();
     /* P_SETUP_ASSET_ARRAYS */ sub_928();
    l_U381 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_1048();
        if (l_U384 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_10491();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_FINALFLOOR */ sub_3703( l_U910 );
     /* P_RELEASE_FINALFLOOR_ASSETS */ sub_52002();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_police_finalFloor" );
     /* WRITESCRIPTLOG */ sub_486( "AT", "Script s_police_finalFloor.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_486(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_SETUP_FINAL_FLOOR_ENEMY_DATA */ void sub_604()
{
    g_U4587[0] = 396010604;
    g_U4587[1] = 1139881660;
    g_U4550[0] = -1952390290;
    g_U4524[0] = 1326067522;
    g_U4524[1] = -2023785959;
    g_U4524[2] = -411727246;
    g_U4524[3] = 575998594;
    g_U4524[4] = -1326155815;
    g_U4441[0] = 1492281543;
    g_U4441[1] = 396010604;
    g_U4404[0] = 1492281543;
    g_U4582[0] = 57534114;
    g_U4582[1] = 57534114;
    g_U4546[0] = 57534114;
    g_U4516[0] = 57534114;
    g_U4516[1] = 57534114;
    g_U4516[2] = 434544317;
    g_U4516[3] = 1964270085;
    g_U4516[4] = 434544317;
    g_U4436[0] = 1964270085;
    g_U4436[1] = 1194438308;
    return;
}

/* P_SETUP_ASSET_ARRAYS */ void sub_928()
{
     /* WRITESCRIPTLOG */ sub_486( "AT", "P_SETUP_ASSET_ARRAYS", 0 );
    l_U889[0] = -893441735;
    l_U889[1] = -760991695;
    return;
}

/* P_HANDLE_FAILURE */ void sub_1048()
{
    if (g_U821 == 17)
    {
        switch (l_U384)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1250()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
            {
                l_U384 = 1;
                 /* WRITESCRIPTLOG */ sub_486( "AT", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_1768())
            {
                l_U384 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_1828( 0 )) == 1)
            {
                l_U384 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
            {
                l_U384 = 3;
                 /* WRITESCRIPTLOG */ sub_486( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_486( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1187() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1187(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1149() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1149(), 0 );
                }
            }
            if ((g_U862[18]._fU40 != 4) AND (g_U862[18]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_486( "CR", "Shutting down script for MCE_BOSS_FIGHT.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_3572( ref g_U862[18] );
                SET_EXITFLAG_FOR_SCRIPT( g_U862[18]._fU32 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            AUDIO_MUSIC_STOP_ONESHOT();
             /* P_CLEANUP_FINALFLOOR */ sub_3703( l_U910 );
             /* P_FORCE_SCENE_TO_LOAD */ sub_5375( 17 );
            l_U384 = 4;
             /* WRITESCRIPTLOG */ sub_486( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_486( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_5809( ref l_U345,  /* PLAYER_PED_ID */ sub_1149() );
            l_U383 = 0;
            l_U384 = 5;
             /* WRITESCRIPTLOG */ sub_486( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_486( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U381 = 1;
            l_U384 = 0;
             /* WRITESCRIPTLOG */ sub_486( "AT", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_1149()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1187() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1187()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1250()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1149(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1187(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1187(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1149() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1149(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_1768()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_1828(int iParam0)
{
    iParam0 = 1;
    switch (l_U141)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_1910( ref l_U143 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
            {
                l_U142 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_2044( ref l_U143, l_U142, 1, 1 );
             /* STARTTIMER */ sub_2194( ref l_U143 );
        }
        if ( /* ISTIMERDONE */ sub_2327( ref l_U143 ))
        {
             /* WRITESCRIPTLOG */ sub_486( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1187() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1187(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U141 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U141 = 2;
            }
            else
            {
                l_U141 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_486( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_2828();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_486( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_2828();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_1910(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_2044(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2194(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2327(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_2828()
{
     /* WRITESCRIPTLOG */ sub_486( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_2903( ref l_U143 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1187() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1187(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U140 = 0;
    l_U140 = l_U140;
    l_U141 = 0;
    return;
}

/* RESETTIMER */ void sub_2903(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_3572(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_FINALFLOOR */ void sub_3703(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_486( "AT", "P_CLEANUP_FINALFLOOR", 0 );
    if ((CUTSCENE_NAMED_IS_LOADING( l_U385 )) || (CUTSCENE_IS_LOADED( l_U385 )))
    {
         /* WRITESCRIPTLOG */ sub_486( "AT", "Purging loaded cutscene.", 0 );
        CLEAR_NAMED_CUTSCENE( l_U385 );
    }
    ISEQ_TERMINATE( 321495451 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3871( 321495451, ref g_U2662 );
    if (NOT bParam0)
    {
         /* WRITESCRIPTLOG */ sub_486( "AT", "Cleaning up enemies.", 0 );
         /* CLEANPEDARRAY */ sub_4980( ref g_U4579 );
         /* CLEANPEDARRAY */ sub_4980( ref g_U4510 );
         /* CLEANPEDARRAY */ sub_4980( ref g_U4544 );
         /* CLEANPEDARRAY */ sub_4980( ref g_U4433 );
    }
     /* CLEANPED */ sub_5030( l_U426 );
    if (NOT bParam0)
    {
         /* WRITESCRIPTLOG */ sub_486( "SA", "Cleaning up pain killers.", 0 );
         /* CLEANPLACEMENTARRAY */ sub_5222( ref g_U4378 );
         /* CLEANPLACEMENT */ sub_5277( g_U4385 );
    }
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_3871(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4009( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_4009(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* CLEANPEDARRAY */ void sub_4980(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_5030( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_5030(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_5222(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_5277( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_5277(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_FORCE_SCENE_TO_LOAD */ void sub_5375(unknown uParam0)
{
    char[64] cVar3;
    unknown uVar19;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
    {
         /* TELEPORTPED */ sub_5451(  /* PLAYER_PED_ID */ sub_1149(), g_U2953[uParam0], g_U3083[uParam0] );
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1149(), 1 );
        if (NOT (IS_STRING_NULL( ref g_U1091[uParam0]._fU0 )))
        {
            StrCopy( ref cVar3, "Loading room: ", 64 );
            ConcatString(ref cVar3, ref g_U1091[uParam0]._fU0, 64);
            PRINTSTRING( ref cVar3 );
            PRINTNL();
            uVar19 = GET_INTERIOR_FROM_NAME( ref g_U1091[uParam0]._fU64, 0 );
            SET_INTERIOR_ACTIVE( uVar19, 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( uVar19, GET_HASH_KEY( ref g_U1091[uParam0]._fU0 ) );
        }
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1149(), 0 );
    }
    return;
}

/* TELEPORTPED */ void sub_5451(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_5809(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_486( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_6028( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_7192( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7506( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7985( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7506( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7985( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7506( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7985( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8301( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7985( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8301( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7985( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_8873( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_9075( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1149(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_486( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_6028(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6090( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_6090(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_7192(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_7506(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_7910( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_7910(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_7985(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_8301(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_7910( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_8873(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_9075(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6090( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_9173( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_9173(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_10491()
{
    int iVar2;
    int iVar3;
    int iVar4;
    int iVar5;

    iVar2 = l_U381;
    switch (l_U381)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_10689();
         /* P_SET_STATIC_DATA */ sub_10868();
         /* P_CREATE_ALL_FINALFLOOR_PLACEMENTS */ sub_13053();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U381 = 2;
         /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_FINALFLOOR_PERSISTENT_ASSETS */ sub_14649();
         /* P_REQUEST_FINALFLOOR_NONPERSISTENT_ASSETS */ sub_21669();
        l_U381 = 3;
         /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_26282( ref g_U2662 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_25891( ref g_U2741 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_25489( ref g_U2613 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_25092( ref g_U2468 )))))
        {
            g_U822[17] = 1;
            if ((NOT l_U345._fU0) AND (g_U820 == 17))
            {
                 /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
                l_U381 = 4;
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
                l_U381 = 6;
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U842[17] = 1;
        l_U383 = 0;
        if (NOT ( /* HAS_SAVEFILE_LOADED */ sub_26938( ref l_U345 )))
        {
             /* F_GIVEPEDWEAPON */ sub_8301(  /* PLAYER_PED_ID */ sub_1149(), 57534114, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7506(  /* PLAYER_PED_ID */ sub_1149(), -862236369, 0, 200, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7506(  /* PLAYER_PED_ID */ sub_1149(), -862236369, 1, 200, 0 );
            SET_PAYNEKILLER_AMT( 7 );
            l_U381 = 5;
             /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U381 = 6;
             /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1149(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1149(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 0 ) ))))
            {
                g_U821 = 17;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_27496( ref l_U345, g_U821,  /* PLAYER_PED_ID */ sub_1149(), g_U2953[17], g_U3083[17], g_U3127[17], g_U3171[17], 1 );
                l_U381 = 6;
                 /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
            }
        }
        break;
        case 6:
        if (l_U382)
        {
            g_U4585 = 1;
            g_U4522 = 1;
            g_U4548 = 1;
            g_U4439 = 1;
        }
        if ( /* F_SETUP_FINAL_FLOOR_WAVE1 */ sub_32191())
        {
            if ( /* F_SETUP_FINAL_FLOOR_REINFORCEMENT */ sub_34097())
            {
                if ( /* F_SETUP_FINAL_FLOOR_ALCOVE_ENEMIES */ sub_34794())
                {
                    if ( /* F_SETUP_FINAL_FLOOR_TETHERED_ENEMIES */ sub_35449())
                    {
                        l_U381 = 7;
                         /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
                    }
                }
            }
        }
        break;
        case 7:
        if (g_U842[17])
        {
            if (l_U383)
            {
                if (CUTSCENE_IS_LOADED( l_U385 ))
                {
                     /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_HANDLE_MID_16", 0 );
                    l_U381 = 8;
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_486( "AT", "Waiting for MID_16_PP to load ...", 0 );
                }
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_HANDLE_MID_16", 0 );
                l_U381 = 8;
            }
        }
        break;
        case 8:
        if (l_U382)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
            {
                SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1187(), 1 );
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1149(), 0 );
            }
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_44026( ref l_U386, l_U385, 36437, 36604, 40157, 40449, 40550, 43863, 250, 0 );
             /* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ sub_44576( ref l_U386, ref g_U1091[17]._fU64, ref g_U1091[17]._fU0 );
            if (l_U383)
            {
                l_U386._fU4 = 2;
                l_U386._fU104 = 0;
            }
            else
            {
                l_U386._fU4 = 7;
            }
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_44718( ref l_U386 ))
        {
            if (g_U821 != 17)
            {
                g_U821 = 17;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_27496( ref l_U345, g_U821,  /* PLAYER_PED_ID */ sub_1149(), g_U2953[17], g_U3083[17], g_U3127[17], g_U3171[17], 1 );
            }
            l_U381 = 9;
             /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_HANDLE_FINAL_FLOOR_COMBAT", 0 );
        }
        break;
        case 9:
        if ((NOT g_U862[18]._fU36) AND ((g_U862[16]._fU40 == 4) || (g_U862[16]._fU40 == 0)))
        {
             /* WRITESCRIPTLOG */ sub_486( "BSW", "Final floor says it's time to launch bossfight script", 0 );
            g_U862[18]._fU36 = 1;
        }
        iVar3 = ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_47197( ref g_U4579 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_47197( ref g_U4510 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_47197( ref g_U4544 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_47197( ref g_U4433 ));
        if (NOT l_U428)
        {
            if (NOT ( /* F_ISPLAYERINTRIGGERREGION */ sub_47358( ref l_U607, 0 )))
            {
                l_U428 = 1;
                 /* P_ACTIVATE_AND_TASK_ALCOVE_ENEMIES */ sub_47674();
            }
        }
        if (NOT l_U429)
        {
            iVar4 = ( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_48097( ref g_U4579 )) + ( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_48097( ref g_U4544 ));
            if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_48247( ref l_U451, 0 )) || (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_48247( ref l_U430, 0 )) || (iVar4 >= 3)))
            {
                l_U429 = 1;
                 /* P_FINAL_FLOOR_ACTIVATE_AND_TASK_REINFORCEMENTS */ sub_48400();
                 /* P_FINAL_FLOOR_ACTIVATE_AND_TASK_TETHERED_ENEMIES */ sub_48859();
            }
        }
        if (NOT l_U427)
        {
            if (iVar3 <= 6)
            {
                 /* WRITESCRIPTLOG */ sub_486( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_4", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_4", "PRECINCT_01_4", 0, -1, 7000, -1082130432, 0 );
                l_U427 = 1;
            }
        }
        if (NOT l_U474)
        {
            iVar5 = (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_47197( ref g_U4579 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_47197( ref g_U4544 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_47197( ref g_U4510 ));
            if (iVar5 <= 0)
            {
                l_U474 = 1;
                 /* P_FINAL_FLOOR_UNTETHER_ENEMIES */ sub_49445();
            }
        }
        if (iVar3 == 1)
        {
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_49804( ref g_U4579 );
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_49804( ref g_U4544 );
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_49804( ref g_U4510 );
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_49804( ref g_U4433 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
            BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
        }
        else if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND (iVar3 == 0)))
        {
            l_U381 = 10;
             /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_FINISHED", 0 );
        }
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_50113( ref g_U4579, -1054867456, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_50113( ref g_U4544, -1054867456, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_50113( ref g_U4510, -1054867456, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_50113( ref g_U4433, -1054867456, 0, 1 );
        break;
        case 10:
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
         /* P_SET_POSITIONS_FOR_DEAD_PEDS */ sub_50379();
        g_U842[18] = 1;
        l_U910 = 1;
        l_U381 = 0;
         /* WRITESCRIPTLOG */ sub_486( "AT", "eCheckpointState = CP_IDLE", 0 );
        break;
    }
    if (l_U381 != iVar2)
    {
        l_U382 = 1;
    }
    else
    {
        l_U382 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_10689()
{
     /* WRITESCRIPTLOG */ sub_486( "AT", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U382 = 1;
    l_U428 = 0;
    l_U429 = 0;
    l_U474 = 0;
    l_U427 = 0;
    l_U910 = 0;
    g_U4585 = 0;
    g_U4586 = 0;
    g_U4548 = 0;
    g_U4549 = 0;
    g_U4522 = 0;
    g_U4523 = 0;
    g_U4439 = 0;
    g_U4440 = 0;
    g_U4402 = 0;
    g_U4403 = 0;
    return;
}

/* P_SET_STATIC_DATA */ void sub_10868()
{
    unknown[3] uVar2;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;
    unknown uVar45;
    unknown uVar46;
    unknown uVar47;
    unknown uVar48;
    unknown uVar49;
    unknown uVar50;
    unknown uVar51;
    unknown uVar52;
    unknown uVar53;
    unknown uVar54;
    unknown uVar55;
    unknown uVar56;
    unknown uVar57;
    unknown uVar58;
    unknown uVar59;
    unknown uVar60;
    unknown uVar61;
    unknown uVar62;
    unknown uVar63;
    unknown uVar64;
    unknown uVar65;
    unknown[6] uVar66;
    unknown uVar73;
    unknown uVar74;
    unknown uVar75;
    unknown uVar76;
    unknown uVar77;
    unknown uVar78;
    unknown uVar79;
    unknown uVar80;
    unknown uVar81;
    unknown uVar82;
    unknown uVar83;
    unknown uVar84;
    unknown uVar85;
    unknown uVar86;
    unknown uVar87;
    unknown uVar88;
    unknown uVar89;
    unknown uVar90;
    unknown uVar91;
    unknown uVar92;
    unknown uVar93;
    unknown uVar94;
    unknown uVar95;
    unknown uVar96;
    unknown uVar97;
    unknown uVar98;
    unknown uVar99;
    unknown uVar100;
    unknown uVar101;
    unknown uVar102;
    unknown uVar103;
    unknown uVar104;
    unknown uVar105;
    unknown uVar106;
    unknown uVar107;
    unknown uVar108;
    unknown uVar109;
    unknown uVar110;
    unknown uVar111;
    unknown uVar112;
    unknown uVar113;
    unknown uVar114;
    unknown uVar115;
    unknown uVar116;
    unknown uVar117;
    unknown uVar118;
    unknown uVar119;
    unknown uVar120;
    unknown uVar121;
    unknown uVar122;
    unknown uVar123;
    unknown uVar124;
    unknown uVar125;
    unknown uVar126;
    unknown uVar127;
    unknown uVar128;
    unknown uVar129;
    unknown uVar130;
    unknown uVar131;
    unknown uVar132;
    unknown uVar133;
    unknown uVar134;
    unknown uVar135;
    unknown uVar136;
    unknown uVar137;
    unknown uVar138;
    unknown uVar139;
    unknown uVar140;
    unknown uVar141;
    unknown uVar142;
    unknown uVar143;
    unknown uVar144;
    unknown uVar145;
    unknown uVar146;
    unknown uVar147;
    unknown uVar148;
    unknown uVar149;
    unknown uVar150;
    unknown uVar151;
    unknown uVar152;
    unknown uVar153;
    unknown uVar154;
    unknown uVar155;
    unknown uVar156;
    unknown uVar157;
    unknown uVar158;
    unknown uVar159;
    unknown uVar160;
    unknown uVar161;
    unknown uVar162;
    unknown uVar163;
    unknown uVar164;
    unknown uVar165;
    unknown uVar166;
    unknown uVar167;
    unknown uVar168;
    unknown uVar169;
    unknown uVar170;
    unknown uVar171;
    unknown uVar172;
    unknown uVar173;
    unknown uVar174;
    unknown uVar175;
    unknown uVar176;
    unknown uVar177;
    unknown uVar178;
    unknown uVar179;
    unknown uVar180;
    unknown uVar181;
    unknown uVar182;
    unknown uVar183;
    unknown uVar184;
    unknown uVar185;
    unknown uVar186;
    unknown uVar187;
    unknown uVar188;
    unknown uVar189;
    unknown uVar190;
    unknown uVar191;
    unknown uVar192;

     /* WRITESCRIPTLOG */ sub_486( "AT", "P_SET_STATIC_DATA", 0 );
     /* P_CREATEPEDSTRUCT */ sub_10964( ref l_U413, 1517.83000000, -4.55726000, 15.10020000, 180.00000000, -760991695, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11118( ref g_U4552[0], 1517.83000000, -4.55726000, 15.10020000, 180.00000000, g_U4587[0], 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11118( ref g_U4552[1], 1518.84000000, -4.66928000, 15.10020000, 180.00000000, g_U4587[1], 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11118( ref g_U4530[0], 1513.24700000, -2.63550000, 15.10020000, 180.00000000, g_U4550[0], 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11118( ref g_U4444[0], 1523.47000000, -26.89000000, 15.10000000, 9.80000000, g_U4524[0], 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11118( ref g_U4444[1], 1522.69800000, -30.13602000, 15.10018000, 6.90000000, g_U4524[1], 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11118( ref g_U4444[2], 1520.25900000, -41.04630000, 15.10018000, 98.00000000, g_U4524[2], 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11118( ref g_U4444[3], 1518.82500000, -41.26560000, 15.10018000, 98.00000000, g_U4524[3], 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11118( ref g_U4444[4], 1513.30400000, -41.66708000, 15.10018000, 98.00000000, g_U4524[4], 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11118( ref g_U4406[0], 1516.62300000, -41.23325000, 15.10018000, 98.00000000, g_U4441[0], 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11118( ref g_U4406[1], 1508.62700000, -39.54588000, 15.10018000, 98.00000000, g_U4441[1], 7, 3, 2, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_11747( ref l_U430, "TB_ACTIVATE_REINFORCEMENTS", 1517.90000000, -20.80000000, 15.00000000, 17.62000000, 21.07200000, 7.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11747( ref l_U451, "TB_ACTIVATE_REINFORCEMENTS_2", 1522.74000000, -7.31000000, 15.00000000, 6.00000000, 10.00000000, 5.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11747( ref l_U523, "TB_OFFICE_R", 1503.84000000, -15.50000000, 18.51000000, 7.24000000, 5.07500000, 3.00000000, 0.00000000, 0.00000000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11747( ref l_U502, "TB_OFFICE_L", 1503.84000000, -22.76000000, 18.51000000, 7.24000000, 5.00000000, 3.00000000, 0.00000000, 0.00000000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11747( ref l_U481, "TB_PLAYER_ON_BALCONY", 1507.65000000, -22.37000000, 18.51000000, 19.00000000, 2.60000000, 3.00000000, 0.00000000, 0.00000000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11747( ref l_U544, "TB_STAIRS_01", 1507.65000000, -12.48000000, 17.98000000, 4.83000000, 2.60000000, 3.00000000, 6.33858000, 36.08270000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11747( ref l_U565, "TB_STAIRS_02", 1507.65000000, -9.25000000, 16.93000000, 2.73000000, 2.89000000, 3.00000000, 0.00000000, 0.00000000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11747( ref l_U586, "TB_STAIRS_03", 1510.02000000, -9.24000000, 16.38000000, 4.83000000, 2.60000000, 3.00000000, 8.52985000, 36.08270000, 0.06000000, 1 );
    array(ref uVar2, 3);
    uVar2[0] = {l_U523};
    uVar2[1] = {l_U502};
    uVar2[2] = {l_U481};
     /* P_CREATETRIGGERREGION */ sub_12413( ref l_U607, ref uVar2 );
    array(ref uVar66, 6);
    uVar66[0] = {l_U523};
    uVar66[1] = {l_U502};
    uVar66[2] = {l_U481};
    uVar66[3] = {l_U544};
    uVar66[4] = {l_U565};
    uVar66[5] = {l_U586};
     /* P_CREATETRIGGERREGION */ sub_12413( ref l_U748, ref uVar66 );
     /* P_CREATETETHERBOX */ sub_12901( ref l_U472, "TETH_ROOM_BY_ARMORY", 1511.00000000, -37.58000000, 15.07000000, 7.12000000, 10.71000000, 3.00000000, 0.00000000, 0.00000000, -180.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12901( ref l_U473, "TETH_ARMORY", 1518.56000000, -37.58000000, 15.07000000, 7.12000000, 10.71000000, 3.00000000, 0.00000000, 0.00000000, 180.00000000, 1 );
    return;
}

/* P_CREATEPEDSTRUCT */ void sub_10964(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU12 = uParam4;
    iParam0->_fU16 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_11118(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_11747(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETRIGGERREGION */ void sub_12413(int iParam0, unknown uParam1)
{
    int iVar4;
    int I;

    iVar4 = (uParam1^);
    if (iVar4 > 6)
    {
         /* WRITESCRIPTLOG */ sub_486( "[SA]", "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
        SCRIPT_ASSERT( "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
    }
    for ( I = 0; I < iVar4; I++ )
    {
        iParam0->_fU0[I] = {(uParam1^)[I]};
    }
    iParam0->_fU508 = iVar4;
    iParam0->_fU548 = 0;
    iParam0->_fU552 = 0;
    iParam0->_fU556 = 0;
    iParam0->_fU560 = 0;
    return;
}

/* P_CREATETETHERBOX */ void sub_12901(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATE_ALL_FINALFLOOR_PLACEMENTS */ void sub_13053()
{
    int[6] iVar2;
    int I;

    array(ref iVar2, 6);
    for ( I = 0; I < 6; I++ )
    {
        iVar2[I] = 1;
    }
     /* P_CREATE_FINALFLOOR_PLACEMENTS */ sub_13140( ref iVar2 );
    return;
}

/* P_CREATE_FINALFLOOR_PLACEMENTS */ void sub_13140(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_486( "SWN", "P_CREATE_FinalFloor_PLACEMENTS", "###" );
    if (NOT ((uParam0^) == 6))
    {
        SCRIPT_ASSERT( "Array passed into P_CREATE_FINALFLOOR_PLACEMENTS is {0} long when it should be {1}!", 2, 513, (uParam0^), 513, 6 );
    }
    if ((uParam0^)[0])
    {
        g_U4378[0] =  /* CREATEPLACEMENT */ sub_13404( 809028259, 1521.74300000, -37.41500000, 16.27500000, 0.00000000, -1.20000000, 0.00000000, 1, 0, 0, 1119092736 );
        if (DOES_PLACEMENT_EXIST( g_U4378[0] ))
        {
            ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U4378[0], ref g_U3477 );
        }
    }
    if ((uParam0^)[1])
    {
        g_U4378[1] =  /* CREATEPLACEMENT */ sub_13404( -4072149, 1507.60000000, -33.14000000, 16.46000000, 0.00000000, 0.00000000, 0.00000000, 1, 0, 0, 1119092736 );
        if (DOES_PLACEMENT_EXIST( g_U4378[1] ))
        {
            ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U4378[1], ref g_U3477 );
        }
    }
    if ((uParam0^)[2])
    {
        g_U4378[2] =  /* CREATEPLACEMENT */ sub_13404( -4072149, 1502.46000000, -15.03900000, 19.45000000, 0.00000000, 0.00000000, 30.00000000, 1, 0, 0, 1119092736 );
        if (DOES_PLACEMENT_EXIST( g_U4378[2] ))
        {
            ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U4378[2], ref g_U3477 );
        }
    }
    if ((uParam0^)[3])
    {
        g_U4378[3] =  /* CREATEPLACEMENT */ sub_13404( -4072149, 1526.06000000, -15.24000000, 16.01000000, 0.00000000, 0.00000000, 0.00000000, 1, 0, 0, 1119092736 );
        if (DOES_PLACEMENT_EXIST( g_U4378[3] ))
        {
            ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U4378[3], ref g_U3477 );
        }
    }
    if ((uParam0^)[5])
    {
        g_U4378[5] =  /* CREATEPLACEMENT */ sub_13404( -4072149, 1514.28700000, -22.23200000, 15.73700000, 0.00000000, 0.00000000, 0.00000000, 1, 0, 0, 1119092736 );
        if (DOES_PLACEMENT_EXIST( g_U4378[5] ))
        {
            ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U4378[5], ref g_U3477 );
        }
    }
    g_U4385 = CREATE_AMMOBAG_PLACEMENT_ROTATE( 1524.50000000, -18.29600000, 16.00520000, 0.00000000, 0.00000000, 2.80000000, 10.00000000, 3.00000000, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( g_U4385 ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U4385, ref g_U3477 );
         /* P_SETUP_AMMO_BAG_DEFAULTS */ sub_14146( g_U4385 );
    }
    return;
}

/* CREATEPLACEMENT */ void sub_13404(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_SETUP_AMMO_BAG_DEFAULTS */ void sub_14146(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        SET_AMMOBAG_REGEN_TIME( uParam0, 10.00000000 );
        SET_AMMOBAG_REGEN_RANGE( uParam0, 3.00000000 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1088031219, 45 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 954369040, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1138793073, 95 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1087746638, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1295933220, 30 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1383321053, 85 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1481241171, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1889644301, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -790090695, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1742569970, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1575030772, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1622373246, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 558118158, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1701914198, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1126469201, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 936600426, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 205668857, 0 );
    }
    return;
}

/* P_REQUEST_FINALFLOOR_PERSISTENT_ASSETS */ void sub_14649()
{
     /* WRITESCRIPTLOG */ sub_486( "AT", "P_REQUEST_FINALFLOOR_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_14766( ref l_U889, ref g_U2468 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_17707( "LEVEL_S_POLICE_CP_15", ref g_U2741 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19591( 57534114, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19591( 1194438308, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19591( 1964270085, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19591( 434544317, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19591( -862236369, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19591( 10648147, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19591( 319712764, ref g_U2613 );
     /* WRITESCRIPTLOG */ sub_486( "AT", "P_REQUEST_FINALFLOOR_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_14766(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_14839( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_14839(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_14906( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_15164( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_14906(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_15164( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_15164( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_15164( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16695( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_15164( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_15164( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_15164(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_15225( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_15225(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_16695(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_17707(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_17759( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18011( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_17759(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18011( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18011( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18011( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16695( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18011( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18011( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_18011(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_15225( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_19591(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_19645( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_19906( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_19645(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_19906( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_19906( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_19906( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16695( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_19906( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_19906( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_19906(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_15225( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_FINALFLOOR_NONPERSISTENT_ASSETS */ void sub_21669()
{
     /* WRITESCRIPTLOG */ sub_486( "AT", "P_REQUEST_FINALFLOOR_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_21793( 321495451, ref g_U2662 );
    if ((l_U383) AND (g_U820 != 17))
    {
         /* LOADSEAMLESSCUTSCENE */ sub_24612( l_U385, 0 );
    }
     /* WRITESCRIPTLOG */ sub_486( "AT", "P_REQUEST_FINALFLOOR_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_21793(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_21854( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22104( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_21854(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22104( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22104( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22104( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22104( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_16695( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_16695( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22104( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22104( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_22104(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_15225( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_24612(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_25092(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_25489(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_25891(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_26282(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_26938(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_486( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_5809( uParam0,  /* PLAYER_PED_ID */ sub_1149() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_27496(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_486( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_486( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_9075( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_27787( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_28264( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_28264( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28524( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_28264( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28524( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28524( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_28264( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28524( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28524( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28524( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_28264( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28524( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28524( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28524( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28524( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_30104( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_486( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_27787(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6090( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_486( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_486( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_28264(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_28524(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_30104(int iParam0)
{
     /* WRITE_STRING */ sub_7910( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_30192( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_30269( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_30269( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_30269( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_30269( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_30269( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_31139( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU52 );
     /* WRITE_STRING */ sub_7910( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU96 );
     /* WRITE_STRING */ sub_7910( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU100 );
     /* WRITE_STRING */ sub_7910( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU104 );
     /* WRITE_STRING */ sub_7910( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU108 );
     /* WRITE_STRING */ sub_7910( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU112 );
     /* WRITE_STRING */ sub_7910( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU116 );
     /* WRITE_STRING */ sub_7910( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU120 );
     /* WRITE_STRING */ sub_7910( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU124 );
     /* WRITE_STRING */ sub_7910( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU128 );
     /* WRITE_STRING */ sub_7910( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_30438( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_30438( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_30438( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_30192(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_30269(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_30438(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_31139(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* F_SETUP_FINAL_FLOOR_WAVE1 */ int sub_32191()
{
    switch (g_U4585)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_486( "AT", "eSpawnFinalFloorWave1 = ENTITY_STATE_INIT", 0 );
        g_U4586 = 0;
        g_U4585 = 2;
         /* WRITESCRIPTLOG */ sub_486( "AT", "eSpawnFinalFloorWave1 = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        g_U4579[g_U4586] =  /* CREATEPED */ sub_32415( ref g_U4552[g_U4586] );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4579[g_U4586], 1 );
         /* F_GIVEPEDWEAPON */ sub_8301( g_U4579[g_U4586], g_U4582[g_U4586], 25000, 0, 0 );
         /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7506( g_U4579[g_U4586], -862236369, 0, 25000, 0 );
        TASK_STAND_STILL( g_U4579[g_U4586], -1 );
        SET_ROOM_FOR_PED_BY_NAME( g_U4579[g_U4586], ref g_U3477 );
        SET_PED_AI_TEMPLATE( g_U4579[g_U4586], "AIT_EXPERT" );
        SET_PED_ALERTNESS( g_U4579[g_U4586], 3 );
        g_U4586++;
        if (g_U4586 >= g_U4579)
        {
            g_U4585 = 3;
             /* WRITESCRIPTLOG */ sub_486( "AT", "eSpawnFinalFloorWave1 = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_33682( ref g_U4579, "FinalFloorWave1" );
         /* P_DEACTIVATEPEDARRAY */ sub_33816( ref g_U4579 );
        g_U4585 = 4;
         /* WRITESCRIPTLOG */ sub_486( "AT", "eSpawnFinalFloorWave1 = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* CREATEPED */ void sub_32415(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_32597( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_33146( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_33247( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_32597(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_7910( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_33146(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_33247(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_33682(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_DEACTIVATEPEDARRAY */ void sub_33816(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_33870( (uParam0^)[I] );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_33870(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* F_SETUP_FINAL_FLOOR_REINFORCEMENT */ int sub_34097()
{
    switch (g_U4522)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_486( "AT", "eSpawnFinalFloorReinforcement1 = ENTITY_STATE_INIT", 0 );
        g_U4523 = 0;
        g_U4522 = 2;
         /* WRITESCRIPTLOG */ sub_486( "AT", "eSpawnFinalFloorReinforcement1 = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        g_U4510[g_U4523] =  /* CREATEPED */ sub_32415( ref g_U4444[g_U4523] );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4510[g_U4523], 1 );
         /* F_GIVEPEDWEAPON */ sub_8301( g_U4510[g_U4523], g_U4516[g_U4523], 25000, 0, 0 );
         /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7506( g_U4510[g_U4523], -862236369, 0, 25000, 0 );
        TASK_STAND_STILL( g_U4510[g_U4523], -1 );
        SET_ROOM_FOR_PED_BY_NAME( g_U4510[g_U4523], ref g_U3477 );
        SET_PED_AI_TEMPLATE( g_U4510[g_U4523], "AIT_EXPERT" );
        SET_PED_ALERTNESS( g_U4510[g_U4523], 3 );
        g_U4523++;
        if (g_U4523 >= g_U4510)
        {
            g_U4522 = 3;
             /* WRITESCRIPTLOG */ sub_486( "AT", "eSpawnFinalFloorReinforcement1 = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_33682( ref g_U4510, "Reinforcement" );
         /* P_DEACTIVATEPEDARRAY */ sub_33816( ref g_U4510 );
        g_U4522 = 4;
         /* WRITESCRIPTLOG */ sub_486( "AT", "eSpawnFinalFloorReinforcement1 = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* F_SETUP_FINAL_FLOOR_ALCOVE_ENEMIES */ int sub_34794()
{
    switch (g_U4548)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_486( "SA", "e_FF_SpawnAlcove = ENTITY_STATE_INIT", 0 );
        g_U4549 = 0;
        g_U4548 = 2;
         /* WRITESCRIPTLOG */ sub_486( "SA", "e_FF_SpawnAlcove = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        g_U4544[g_U4549] =  /* CREATEPED */ sub_32415( ref g_U4530[g_U4549] );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4544[g_U4549], 1 );
         /* F_GIVEPEDWEAPON */ sub_8301( g_U4544[g_U4549], g_U4546[g_U4549], 25000, 0, 0 );
         /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7506( g_U4544[g_U4549], -862236369, 0, 25000, 0 );
        TASK_STAND_STILL( g_U4544[g_U4549], -1 );
        SET_ROOM_FOR_PED_BY_NAME( g_U4544[g_U4549], ref g_U3477 );
        SET_PED_AI_TEMPLATE( g_U4544[g_U4549], "AIT_EXPERT" );
        SET_PED_ALERTNESS( g_U4544[g_U4549], 3 );
        SET_PED_CAN_PLAY_LOCO_FLAVOR_STARTS( g_U4544[g_U4549], 0 );
        g_U4549++;
        if (g_U4549 >= g_U4544)
        {
            g_U4548 = 3;
             /* WRITESCRIPTLOG */ sub_486( "SA", "e_FF_SpawnAlcove = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_33682( ref g_U4544, "Alcove" );
         /* P_DEACTIVATEPEDARRAY */ sub_33816( ref g_U4544 );
        g_U4548 = 4;
         /* WRITESCRIPTLOG */ sub_486( "SA", "e_FF_SpawnAlcove = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* F_SETUP_FINAL_FLOOR_TETHERED_ENEMIES */ int sub_35449()
{
    switch (g_U4439)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_486( "SA", "e_FF_SpawnTethered = ENTITY_STATE_INIT", 0 );
        g_U4440 = 0;
        g_U4439 = 2;
         /* WRITESCRIPTLOG */ sub_486( "SA", "e_FF_SpawnTethered = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        g_U4433[g_U4440] =  /* CREATEPED */ sub_32415( ref g_U4406[g_U4440] );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4510[g_U4440], 1 );
         /* F_GIVEPEDWEAPON */ sub_8301( g_U4433[g_U4440], g_U4436[g_U4440], 25000, 0, 0 );
         /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7506( g_U4433[g_U4440], -862236369, 0, 25000, 0 );
        TASK_STAND_STILL( g_U4433[g_U4440], -1 );
        SET_ROOM_FOR_PED_BY_NAME( g_U4433[g_U4440], ref g_U3477 );
        SET_PED_AI_TEMPLATE( g_U4433[g_U4440], "AIT_EXPERT" );
        SET_PED_ALERTNESS( g_U4433[g_U4440], 3 );
        g_U4440++;
        if (g_U4440 >= g_U4433)
        {
            g_U4439 = 3;
             /* WRITESCRIPTLOG */ sub_486( "SA", "e_FF_SpawnTethered = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_33682( ref g_U4433, "Tethered" );
         /* P_DEACTIVATEPEDARRAY */ sub_33816( ref g_U4433 );
        g_U4439 = 4;
         /* WRITESCRIPTLOG */ sub_486( "SA", "e_FF_SpawnTethered = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* F_MID16PP_PRECUTSCENESETUP */ int sub_36437()
{
     /* WRITESCRIPTLOG */ sub_486( "AT", "F_MID16PP_PreCutsceneSetup", 0 );
    l_U426 =  /* CREATEPED */ sub_32415( ref l_U413 );
    if (NOT (IS_PED_DEAD( l_U426 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U426, 1 );
        SET_ROOM_FOR_PED_BY_NAME( l_U426, ref g_U3477 );
    }
    CUTSCENE_ENABLE_SKIP( 0 );
     /* P_DEACTIVATEPED */ sub_33870( l_U426 );
    return 1;
}

/* P_MID16PP_CUTSCENEREGISTRATION */ void sub_36604()
{
    unknown uVar2;

     /* WRITESCRIPTLOG */ sub_486( "AT", "P_MID16PP_CutsceneRegistration", 0 );
     /* P_ACTIVATEPED */ sub_36696( l_U426 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
    {
         /* P_PLAYER_HOLSTER_WEAPONS */ sub_36833( ref l_U892, 1, 1 );
         /* P_SET_TWO_HANDED_WEAPON_VISIBLE */ sub_38197( l_U892, 0 );
         /* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ sub_38330( 1 );
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_Clt1911_Aa_H", 0 );
        }
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_1149(), g_U2953[17], g_U3083[17] );
        CUTSCENE_REGISTER_SET_PLAYER_IN_COVER( "GenCover", "330E4C8C_6FEA6796_Popover1", 1, 1 );
        CUTSCENE_SET_COVER_CAMERA_DIRECTION( g_U3127[17], g_U3171[17] );
    }
    if (NOT (IS_PED_DEAD( l_U426 )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U426, "Bach_Unif", 1 );
    }
    if (NOT (IS_PED_DEAD( g_U4579[0] )))
    {
         /* P_ACTIVATEPED */ sub_36696( g_U4579[0] );
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4579[0], "P_UFE_Sold_G", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( g_U4579[0], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_AR_G36K_Aa_H", 0 );
        }
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U4579[0], "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_IDLE" );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4579[0], g_U4552[0]._fU0, g_U4552[0]._fU12 );
    }
    if (NOT (IS_PED_DEAD( g_U4579[1] )))
    {
         /* P_ACTIVATEPED */ sub_36696( g_U4579[1] );
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4579[1], "P_UFE_Sold_G^1", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( g_U4579[1], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_AR_G36K_Aa_H^1", 0 );
        }
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U4579[1], "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_IDLE" );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4579[1], g_U4552[1]._fU0, g_U4552[1]._fU12 );
    }
    if (NOT (IS_PED_DEAD( g_U4544[0] )))
    {
         /* P_ACTIVATEPED */ sub_36696( g_U4544[0] );
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4544[0], "P_UFE_Sold_G^2", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( g_U4544[0], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_AR_G36K_Aa_H^2", 0 );
        }
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U4544[0], "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_IDLE" );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4544[0], g_U4530[0]._fU0, g_U4530[0]._fU12 );
    }
    if (NOT (IS_PED_DEAD( g_U4510[0] )))
    {
         /* P_ACTIVATEPED */ sub_36696( g_U4510[0] );
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4510[0], "P_UFE_Sold_G^4", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( g_U4510[0], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_AR_G36K_Aa_H^4", 0 );
        }
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U4510[0], "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_IDLE" );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4510[0], g_U4444[0]._fU0, g_U4444[0]._fU12 );
    }
    if (NOT (IS_PED_DEAD( g_U4510[1] )))
    {
         /* P_ACTIVATEPED */ sub_36696( g_U4510[1] );
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4510[1], "P_UFE_Sold_G^5", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( g_U4510[1], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_AR_G36K_Aa_H^5", 0 );
        }
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U4510[1], "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_IDLE" );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4510[1], g_U4444[1]._fU0, g_U4444[1]._fU12 );
    }
    CUTSCENE_REGISTER_ISEQ( 321495451 );
    ISEQ_REGISTER_ENTITY( 321495451, "Max",  /* PLAYER_PED_ID */ sub_1149(), 0 );
    REGISTER_HIDE_ENTITY_AT_POSITION( g_U4282._fU0, g_U4282._fU4 );
    return;
}

/* P_ACTIVATEPED */ void sub_36696(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_PLAYER_HOLSTER_WEAPONS */ void sub_36833(int iParam0, int iParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;

     /* RESET_WEAPON_CONFIG */ sub_36872( iParam0 );
    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )) == 0)
    {
        uVar5 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_37073( uVar5 )) == 1)
            {
                ref iParam0->_fU0->_fU0 = uVar5;
                ref iParam0->_fU0->_fU4 = GET_WEAPON_TYPE( uVar5 );
            }
            else if (( /* IS_WEAPON_TWO_HANDED */ sub_37327( uVar5 )) == 1)
            {
                ref iParam0->_fU24->_fU0 = uVar5;
                ref iParam0->_fU24->_fU4 = GET_WEAPON_TYPE( uVar5 );
            }
        }
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar6 )) == 1)
        {
            ref iParam0->_fU12->_fU0 = uVar6;
            ref iParam0->_fU12->_fU4 = GET_WEAPON_TYPE( uVar6 );
        }
        uVar7 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1149(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
        {
            ref iParam0->_fU36->_fU0 = uVar7;
            ref iParam0->_fU36->_fU4 = GET_WEAPON_TYPE( uVar7 );
        }
        uVar8 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1149(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar8 )) == 1)
        {
            ref iParam0->_fU48->_fU0 = uVar8;
            ref iParam0->_fU48->_fU4 = GET_WEAPON_TYPE( uVar8 );
        }
        uVar9 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1149(), 2 );
        if ((GET_DOES_WEAPON_EXIST( uVar9 )) == 1)
        {
            ref iParam0->_fU60->_fU0 = uVar9;
            ref iParam0->_fU60->_fU4 = GET_WEAPON_TYPE( uVar9 );
        }
    }
    if (iParam1 == 0)
    {
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )) == 0)
        {
            uVar10 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar10 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 0, uParam2 );
            }
            uVar11 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 1, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar11 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 1, uParam2 );
            }
        }
    }
    else if (iParam1 == 1)
    {
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )) == 0)
        {
            uVar12 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar12 )) == 1)
            {
                if (( /* IS_WEAPON_TWO_HANDED */ sub_37327( uVar12 )) == 1)
                {
                    SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 0, uParam2 );
                }
            }
            uVar13 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 1, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar13 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 1, uParam2 );
            }
        }
    }
    return;
}

/* RESET_WEAPON_CONFIG */ void sub_36872(int iParam0)
{
    ref iParam0->_fU0->_fU0 = 0;
    ref iParam0->_fU0->_fU4 = 0;
    ref iParam0->_fU12->_fU0 = 0;
    ref iParam0->_fU12->_fU4 = 0;
    ref iParam0->_fU24->_fU0 = 0;
    ref iParam0->_fU24->_fU4 = 0;
    ref iParam0->_fU36->_fU0 = 0;
    ref iParam0->_fU36->_fU4 = 0;
    ref iParam0->_fU48->_fU0 = 0;
    ref iParam0->_fU48->_fU4 = 0;
    ref iParam0->_fU60->_fU0 = 0;
    ref iParam0->_fU60->_fU4 = 0;
    return;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_37073(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* IS_WEAPON_TWO_HANDED */ int sub_37327(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == -2075384407) || ((iVar3 == 10648147) || ((iVar3 == 1224272620) || ((iVar3 == 1478009203) || ((iVar3 == 1964270085) || ((iVar3 == -110877124) || ((iVar3 == 427207702) || ((iVar3 == 319712764) || ((iVar3 == 514118749) || ((iVar3 == -184942895) || ((iVar3 == -168327769) || ((iVar3 == 434544317) || ((iVar3 == -1659006841) || ((iVar3 == 930042831) || ((iVar3 == 1001413062) || ((iVar3 == 377623895) || ((iVar3 == -1312131151) || ((iVar3 == -1787162676) || ((iVar3 == 724901397) || ((iVar3 == 57534114) || ((iVar3 == 840671040) || ((iVar3 == 1308526797) || ((iVar3 == -1074756423) || ((iVar3 == 1992962408) || (iVar3 == -1013714740)))))))))))))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* P_SET_TWO_HANDED_WEAPON_VISIBLE */ void sub_38197(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18)
{
    unknown uVar21;
    unknown uVar22;

    uVar21 = uParam0._fU24._fU0;
    if ((GET_DOES_WEAPON_EXIST( uVar21 )) == 1)
    {
        SET_WEAPON_VISIBLE( uVar21, uParam18 );
    }
    uVar22 = uParam0._fU60._fU0;
    if ((GET_DOES_WEAPON_EXIST( uVar22 )) == 1)
    {
        SET_WEAPON_VISIBLE( uVar22, uParam18 );
    }
    return;
}

/* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ void sub_38330(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )) == 0)
    {
        iVar3 = 0;
        uVar4 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 0)
        {
            iVar3 = 1;
        }
        if ((( /* IS_WEAPON_SINGLE_HANDED */ sub_37073( uVar4 )) == 0) AND ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1))
        {
            iVar3 = 1;
        }
        if (iVar3 == 1)
        {
            uVar5 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_38478();
            if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_1149(), uVar5, 0, uParam0 );
            }
        }
    }
    return;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_38478()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_37073( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1149(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1149(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* P_MID16PP_HANDLECUTSCENE */ void sub_40157()
{
    if (l_U386._fU52)
    {
        SET_WEATHER_TYPE_NOW_PERSIST( "SUNNY" );
        if (IS_SCREEN_FADED_OUT())
        {
            DO_SCREEN_FADE_IN( 0 );
        }
        AUDIO_MUSIC_SUSPEND( 9000 );
    }
    if (GET_CUTSCENE_TIME_MS() > 10000)
    {
        if (NOT AUDIO_IS_MUSIC_PLAYING())
        {
             /* WRITESCRIPTLOG */ sub_486( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_4_6", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_4_6", "PRECINCT_01_4_6", 0, 7000, -1, -1082130432, 0 );
        }
    }
    if (GET_CUTSCENE_TIME_MS() > 15000)
    {
        CUTSCENE_ENABLE_SKIP( 1 );
    }
    return;
}

/* F_MID16PP_POSTCUTSCENE */ int sub_40449()
{
     /* WRITESCRIPTLOG */ sub_486( "AT", "F_MID16PP_PostCutscene", 0 );
     /* P_DEACTIVATEPEDARRAY */ sub_33816( ref g_U4544 );
     /* P_SET_TWO_HANDED_WEAPON_VISIBLE */ sub_38197( l_U892, 1 );
    return 1;
}

/* P_MID16PP_STARTBLENDOUT */ void sub_40550()
{
     /* WRITESCRIPTLOG */ sub_486( "GA", "P_FF_START_MID_16_PP_BLENDOUT start", 0 );
    if (l_U386._fU52)
    {
        SET_WEATHER_TYPE_NOW_PERSIST( "SUNNY" );
    }
    if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1187() ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() ))))
    {
        if (NOT (ISEQ_QUERY_STATE( 321495451, 3 )))
        {
            ISEQ_REGISTER_ENTITY( 321495451, "Max",  /* PLAYER_PED_ID */ sub_1149(), 0 );
             /* TELEPORTPED */ sub_5451(  /* PLAYER_PED_ID */ sub_1149(), g_U2953[17], g_U3083[17] );
            ISEQ_START( 321495451 );
            SNAP_PLAYER_TO_COVERPOINT(  /* PLAYER_ID */ sub_1187(), "GenCover", "330E4C8C_6FEA6796_Popover1", 1 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U3127[17], 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U3171[17], 1065353216, 0 );
            if (IS_DEATH_PANEL_WIPE_ALLOWED())
            {
                DO_SCREEN_FADE_IN( 0 );
            }
        }
    }
    CAMERA_PLAY_ANIMATED( "LEVEL_S_POLICE_CP_15", "B_OUT_MID_16_PP_RIFLE_MAX_CAMS_CAM", 0, 0, 0, 0, 0.00000000, 0, 0 );
     /* P_ACTIVATE_AND_TASK_FINAL_FLOOR_WAVE1 */ sub_40976();
     /* P_FINAL_FLOOR_ACTIVATE_AND_TASK_FIRST_REINFORCEMENTS */ sub_42355();
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_43228( -760991695, ref g_U2468 );
     /* WRITESCRIPTLOG */ sub_486( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_3", 0 );
    AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_4_6", "PRECINCT_01_4_6", 0, -1, -1, -1082130432, 0 );
     /* WRITESCRIPTLOG */ sub_486( "GA", "P_FF_START_MID_16_PP_BLENDOUT end", 0 );
    return;
}

/* P_ACTIVATE_AND_TASK_FINAL_FLOOR_WAVE1 */ void sub_40976()
{
    int I;

     /* WRITESCRIPTLOG */ sub_486( "AT", "P_ACTIVATE_AND_TASK_FINAL_FLOOR_WAVE1", 0 );
     /* P_ACTIVATEPEDARRAY */ sub_41081( ref g_U4579 );
     /* P_SEND_ENEMY_TO_COORDS_AND_COMBAT */ sub_41180( ref g_U4579[0], 1508.05200000, -13.46174000, 18.50214000 );
     /* P_SEND_ENEMY_TO_COORDS_AND_COMBAT */ sub_41180( ref g_U4579[1], 1507.18000000, -15.25865000, 18.50065000 );
    if (NOT (IS_PED_DEAD( g_U4579[0] )))
    {
        SET_PED_COMBAT_RANGE_MAX( g_U4579[0], 8.00000000 );
    }
    if (NOT (IS_PED_DEAD( g_U4579[1] )))
    {
        SET_PED_COMBAT_RANGE_MAX( g_U4579[1], 8.00000000 );
    }
    for ( I = 0; I < 2; I++ )
    {
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_41575( g_U4579[I], ref l_U475 );
    }
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_41081(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_36696( (uParam0^)[I] );
    }
    return;
}

/* P_SEND_ENEMY_TO_COORDS_AND_COMBAT */ void sub_41180(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown uVar6;

     /* WRITESCRIPTLOG */ sub_486( "AT", "P_SEND_ENEMY_TO_COORDS_AND_COMBAT", 0 );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar6 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, uParam1,  /* PLAYER_PED_ID */ sub_1149(), 1, 5.00000000, 10.00000000, -1082130432, 3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        CLOSE_SEQUENCE_TASK( uVar6 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar6 );
        REGISTER_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_1149() );
        SET_LOCKED_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_1149() );
        CLEAR_SEQUENCE_TASK( uVar6 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_41575(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_7910( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_41745( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_41745( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_SETUP_AI_GROUP */ void sub_41745(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* P_FINAL_FLOOR_ACTIVATE_AND_TASK_FIRST_REINFORCEMENTS */ void sub_42355()
{
     /* WRITESCRIPTLOG */ sub_486( "SBA", "P_FINAL_FLOOR_ACTIVATE_AND_TASK_FIRST_REINFORCEMENTS", 0 );
     /* P_SETDOORLOCKED */ sub_42492( ref g_U4177, 1 );
     /* P_ACTIVATEPED */ sub_36696( g_U4510[0] );
     /* P_ACTIVATEPED */ sub_36696( g_U4510[1] );
     /* PED_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS */ sub_42785( ref g_U4510[0], 0 );
     /* PED_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS */ sub_42785( ref g_U4510[1], 0 );
     /* PED_TASK_COMBAT_MOVE_TO_COVER */ sub_42996( g_U4510[0], "GenCover", "330E4C8C_7BCE862A_Popover1",  /* PLAYER_PED_ID */ sub_1149(), 1 );
     /* PED_TASK_COMBAT_MOVE_TO_COVER */ sub_42996( g_U4510[1], "GenCover", "330E4C8C_FB6A0563_Popover2",  /* PLAYER_PED_ID */ sub_1149(), 1 );
    return;
}

/* P_SETDOORLOCKED */ void sub_42492(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_42522( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_42606( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_42522(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_42606(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* PED_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS */ void sub_42785(unknown uParam0, unknown uParam1)
{
    if ( /* IS_PED_VALID */ sub_42841( (uParam0^) ))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( (uParam0^), uParam1 );
    }
    return;
}

/* IS_PED_VALID */ int sub_42841(unknown uParam0)
{
    if ((NOT (IS_PED_DEAD( uParam0 ))) AND (DOES_PED_EXIST( uParam0 )))
    {
        return 1;
    }
    return 0;
}

/* PED_TASK_COMBAT_MOVE_TO_COVER */ void sub_42996(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if ( /* IS_PED_VALID */ sub_42841( uParam0 ))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( uParam0 );
         /* PED_SET_LOCK_TO_COVER */ sub_43062( ref uParam0, uParam4 );
        TASK_COMBAT_MOVE_TO_COVER( uParam0, uParam1, uParam2, uParam3 );
    }
    return;
}

/* PED_SET_LOCK_TO_COVER */ void sub_43062(unknown uParam0, unknown uParam1)
{
    if ( /* IS_PED_VALID */ sub_42841( (uParam0^) ))
    {
        SET_PED_FLAG_LOCK_TO_COVER( (uParam0^), uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_43228(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4009( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_MID16PP_HANDLEBLENDOUT */ int sub_43863()
{
    if ((ISEQ_QUERY_STATE( 321495451, 3 )) AND (IS_SCREEN_FADED_OUT()))
    {
         /* WRITESCRIPTLOG */ sub_486( "GA", "MID_16_PP blendout is playing, fading in screen.", 0 );
        DO_SCREEN_FADE_IN( 0 );
    }
    if (NOT IS_ANIMATED_CAMERA_PLAYING())
    {
        return 1;
    }
    return 0;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_44026(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_486( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_44250( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 44147, 44197, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_44147()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_44197()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_44250(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ void sub_44576(int iParam0, unknown uParam1, unknown uParam2)
{
    iParam0->_fU68 = 1;
    iParam0->_fU72 = 1;
    iParam0->_fU76 = uParam1;
    iParam0->_fU80 = uParam2;
    iParam0->_fU24 = 1;
    return;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_44718(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_486( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_486( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_486( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_486( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_486( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_486( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_24612( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_486( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_45609( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_45609( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_486( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_46153( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_45609( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_46533( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_46533( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* NIS_PRE_SETUP */ void sub_45609(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1187(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1149(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1149() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1149(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_46153(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1149(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1149(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1149(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_46533(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1187(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1149(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_46631();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_46631()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1149(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1149(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1149(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_47197(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_ISPLAYERINTRIGGERREGION */ void sub_47358(int iParam0, unknown uParam1)
{
    int Result;
    int I;
    int J;

    Result = 0;
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() )))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            if ( /* F_ISPLAYERINTRIGGERBOX */ sub_47445( iParam0->_fU0[I] ))
            {
                Result = 1;
            }
        }
    }
    if ((uParam1) AND (Result))
    {
        for ( J = 0; J < iParam0->_fU508; J++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[J]._fU0, 0 );
        }
    }
    iParam0->_fU548 = 1;
    return Result;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_47445(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_47488(  /* PLAYER_PED_ID */ sub_1149(), uParam0 );
}

/* F_ISPEDINTRIGGERBOX */ int sub_47488(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_ACTIVATE_AND_TASK_ALCOVE_ENEMIES */ void sub_47674()
{
    int I;

     /* WRITESCRIPTLOG */ sub_486( "SA", "P_ACTIVATE_AND_TASK_ALCOVE_ENEMIES", 0 );
     /* P_ACTIVATEPEDARRAY */ sub_41081( ref g_U4544 );
    for ( I = 0; I < 1; I++ )
    {
        if (NOT (IS_PED_DEAD( g_U4544[I] )))
        {
            SET_PED_ALERTNESS( g_U4544[I], 3 );
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_41575( g_U4544[I], ref l_U475 );
        }
    }
     /* MAL_MOVETOPOINTWHILESHOOTINGATPLAYERTHENCOMBATPLAYER */ sub_47887( ref g_U4544[0], 1514.80200000, -7.53649600, 15.10016000, 1056964608, 1 );
    return;
}

/* MAL_MOVETOPOINTWHILESHOOTINGATPLAYERTHENCOMBATPLAYER */ void sub_47887(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    unknown uVar8;

    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        OPEN_SEQUENCE_TASK( ref uVar8 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, uParam1,  /* PLAYER_PED_ID */ sub_1149(), 3, 1, uParam4, 0, uParam5, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1149() );
        CLOSE_SEQUENCE_TASK( uVar8 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar8 );
        CLEAR_SEQUENCE_TASK( uVar8 );
    }
    return;
}

/* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ void sub_48097(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            if (IS_PED_DEAD( (uParam0^)[I] ))
            {
                Result++;
            }
        }
    }
    return Result;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_48247(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_47488(  /* PLAYER_PED_ID */ sub_1149(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* P_FINAL_FLOOR_ACTIVATE_AND_TASK_REINFORCEMENTS */ void sub_48400()
{
    int I;

     /* WRITESCRIPTLOG */ sub_486( "SA", "P_FINAL_FLOOR_ACTIVATE_AND_TASK_REINFORCEMENTS", 0 );
     /* P_ACTIVATEPEDARRAY */ sub_41081( ref g_U4510 );
     /* PED_SET_LOCK_TO_COVER */ sub_43062( ref g_U4510[0], 0 );
     /* PED_SET_LOCK_TO_COVER */ sub_43062( ref g_U4510[1], 0 );
     /* MAL_MOVETOPOINTTHENCOMBATPLAYER */ sub_48578( ref g_U4510[2], 1518.62300000, -30.56491000, 15.10018000, 0 );
     /* MAL_MOVETOPOINTTHENCOMBATPLAYER */ sub_48578( ref g_U4510[3], 1518.62300000, -30.56491000, 15.10018000, 0 );
     /* MAL_MOVETOPOINTTHENCOMBATPLAYER */ sub_48578( ref g_U4510[4], 1511.00300000, -31.13249000, 15.10018000, 0 );
    for ( I = 0; I < 5; I++ )
    {
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_41575( g_U4510[I], ref l_U475 );
    }
    return;
}

/* MAL_MOVETOPOINTTHENCOMBATPLAYER */ void sub_48578(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    unknown uVar7;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        OPEN_SEQUENCE_TASK( ref uVar7 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, uParam1, 3, 20000, 1048576000, 0, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, uParam4 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1149() );
        CLOSE_SEQUENCE_TASK( uVar7 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar7 );
        CLEAR_SEQUENCE_TASK( uVar7 );
    }
    return;
}

/* P_FINAL_FLOOR_ACTIVATE_AND_TASK_TETHERED_ENEMIES */ void sub_48859()
{
    int I;

     /* WRITESCRIPTLOG */ sub_486( "SA", "P_FINAL_FLOOR_ACTIVATE_AND_TASK_TETHERED_ENEMIES", 0 );
     /* P_ACTIVATEPEDARRAY */ sub_41081( ref g_U4433 );
     /* P_TETHERPED */ sub_49004( ref l_U472, g_U4433[1], 1 );
    for ( I = 0; I < 2; I++ )
    {
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() ))) AND (NOT (IS_PED_DEAD( g_U4433[I] ))))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4433[I], 0 );
            SET_PED_COMBAT_RANGE_MAX( g_U4433[I], 100.00000000 );
            TASK_COMBAT_PED( g_U4433[I],  /* PLAYER_PED_ID */ sub_1149() );
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_41575( g_U4433[I], ref l_U475 );
        }
    }
    return;
}

/* P_TETHERPED */ void sub_49004(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_FINAL_FLOOR_UNTETHER_ENEMIES */ void sub_49445()
{
    int I;

     /* WRITESCRIPTLOG */ sub_486( "SA", "P_FINAL_FLOOR_UNTETHER_ENEMIES", 0 );
     /* P_REMOVE_TETHERS_FROM_PED_ARRAY */ sub_49536( ref g_U4433 );
    for ( I = 0; I < 2; I++ )
    {
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1149() ))) AND (NOT (IS_PED_DEAD( g_U4433[I] ))))
        {
            SET_PED_COMBAT_RANGE_MAX( g_U4433[I], 50.00000000 );
        }
    }
    return;
}

/* P_REMOVE_TETHERS_FROM_PED_ARRAY */ void sub_49536(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_REMOVEALLTETHERSFROMPED */ sub_49601( (uParam0^)[I] );
    }
    return;
}

/* P_REMOVEALLTETHERSFROMPED */ void sub_49601(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        RESET_PED_TETHERING( uParam0 );
    }
    return;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_49804(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_47197( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_50113(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_50179( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_50179(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_5030( uParam0 );
            }
        }
    }
    return;
}

/* P_SET_POSITIONS_FOR_DEAD_PEDS */ void sub_50379()
{
    int I;
    char[64] cVar3;

    for ( I = 0; I < g_U4433; I++ )
    {
        if ((NOT (IS_PED_DEAD( g_U4433[I] ))) || (IS_PED_DEAD( g_U4433[I] )))
        {
            StrCopy( ref cVar3, "Setting new position for pi_FF_Tethered[", 64 );
            ConcatString(ref cVar3, I, 64);
            ConcatString(ref cVar3, "]", 64);
             /* WRITESCRIPTLOG */ sub_486( "AT", ref cVar3, 0 );
            g_U4406[I]._fU0 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( g_U4433[I] )};
            g_U4406[I]._fU12 = GET_PED_HEADING( g_U4433[I] );
            PRINTSTRING( "Position: <<" );
            PRINTFLOAT( g_U4406[I]._fU0._fU0 );
            PRINTSTRING( ", " );
            PRINTFLOAT( g_U4406[I]._fU0._fU4 );
            PRINTSTRING( ", " );
            PRINTFLOAT( g_U4406[I]._fU0._fU8 );
            PRINTSTRING( ">>" );
            PRINTNL();
            PRINTSTRING( "Heading: " );
            PRINTFLOAT( g_U4406[I]._fU12 );
            PRINTNL();
        }
    }
    for ( I = 0; I < g_U4510; I++ )
    {
        if ((NOT (IS_PED_DEAD( g_U4510[I] ))) || (IS_PED_DEAD( g_U4510[I] )))
        {
            StrCopy( ref cVar3, "Setting new position for pi_FF_Reinforcement[", 64 );
            ConcatString(ref cVar3, I, 64);
            ConcatString(ref cVar3, "]", 64);
             /* WRITESCRIPTLOG */ sub_486( "AT", ref cVar3, 0 );
            g_U4444[I]._fU0 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( g_U4510[I] )};
            g_U4444[I]._fU12 = GET_PED_HEADING( g_U4510[I] );
            PRINTSTRING( "Position: <<" );
            PRINTFLOAT( g_U4444[I]._fU0._fU0 );
            PRINTSTRING( ", " );
            PRINTFLOAT( g_U4444[I]._fU0._fU4 );
            PRINTSTRING( ", " );
            PRINTFLOAT( g_U4444[I]._fU0._fU8 );
            PRINTSTRING( ">>" );
            PRINTNL();
            PRINTSTRING( "Heading: " );
            PRINTFLOAT( g_U4444[I]._fU12 );
            PRINTNL();
        }
    }
    for ( I = 0; I < g_U4544; I++ )
    {
        if ((NOT (IS_PED_DEAD( g_U4544[I] ))) || (IS_PED_DEAD( g_U4544[I] )))
        {
            StrCopy( ref cVar3, "Setting new position for pi_FF_Alcove[", 64 );
            ConcatString(ref cVar3, I, 64);
            ConcatString(ref cVar3, "]", 64);
             /* WRITESCRIPTLOG */ sub_486( "AT", ref cVar3, 0 );
            g_U4530[I]._fU0 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( g_U4544[I] )};
            g_U4530[I]._fU12 = GET_PED_HEADING( g_U4544[I] );
            PRINTSTRING( "Position: <<" );
            PRINTFLOAT( g_U4530[I]._fU0._fU0 );
            PRINTSTRING( ", " );
            PRINTFLOAT( g_U4530[I]._fU0._fU4 );
            PRINTSTRING( ", " );
            PRINTFLOAT( g_U4530[I]._fU0._fU8 );
            PRINTSTRING( ">>" );
            PRINTNL();
            PRINTSTRING( "Heading: " );
            PRINTFLOAT( g_U4530[I]._fU12 );
            PRINTNL();
        }
    }
    for ( I = 0; I < g_U4579; I++ )
    {
        if ((NOT (IS_PED_DEAD( g_U4579[I] ))) || (IS_PED_DEAD( g_U4579[I] )))
        {
            StrCopy( ref cVar3, "Setting new position for piFinalFloorWave1[", 64 );
            ConcatString(ref cVar3, I, 64);
            ConcatString(ref cVar3, "]", 64);
             /* WRITESCRIPTLOG */ sub_486( "AT", ref cVar3, 0 );
            g_U4552[I]._fU0 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( g_U4579[I] )};
            g_U4552[I]._fU12 = GET_PED_HEADING( g_U4579[I] );
            PRINTSTRING( "Position: <<" );
            PRINTFLOAT( g_U4552[I]._fU0._fU0 );
            PRINTSTRING( ", " );
            PRINTFLOAT( g_U4552[I]._fU0._fU4 );
            PRINTSTRING( ", " );
            PRINTFLOAT( g_U4552[I]._fU0._fU8 );
            PRINTSTRING( ">>" );
            PRINTNL();
            PRINTSTRING( "Heading: " );
            PRINTFLOAT( g_U4552[I]._fU12 );
            PRINTNL();
        }
    }
    return;
}

/* P_RELEASE_FINALFLOOR_ASSETS */ void sub_52002()
{
     /* WRITESCRIPTLOG */ sub_486( "AT", "P_RELEASE_FINALFLOOR_ASSETS", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_52091( ref l_U889, ref g_U2468 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_52215( "LEVEL_S_POLICE_CP_15", ref g_U2741 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_52561( 57534114, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_52561( 1194438308, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_52561( 1964270085, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_52561( 434544317, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_52561( -862236369, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_52561( 10648147, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_52561( 319712764, ref g_U2613 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_52091(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_43228( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_52215(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4009( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_52561(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4009( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

