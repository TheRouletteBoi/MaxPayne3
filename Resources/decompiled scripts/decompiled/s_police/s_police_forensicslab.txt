void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U73 = {0, 0, 0};
    StrCopy( ref l_U76, "DUMMY", 32 );
    l_U84 = 1;
    l_U89 = 0;
    l_U90 = 0;
    l_U91 = 0;
    l_U94 = 0;
    l_U140 = 0;
    l_U141 = 0;
    l_U142 = 1500;
    l_U153 = 0;
    l_U164 = 12;
    l_U211 = 0;
    l_U212 = 1;
    l_U213 = 0;
    l_U449 = 0;
    l_U770 = -1;
    l_U771 = -1;
    l_U772 = -1;
    l_U773 = -1;
    l_U1066 = 700;
     /* WRITESCRIPTLOG */ sub_477( "AT", "Script s_police_forensicsLab.sc is starting up...", 0 );
     /* P_SETUP_ASSET_ARRAYS */ sub_595();
    l_U211 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_780();
        if (l_U213 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_13063();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_FORENSICSLAB */ sub_6100();
     /* P_RELEASE_FORENSICSLAB_ASSETS */ sub_52287();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_police_forensicsLab" );
     /* WRITESCRIPTLOG */ sub_477( "AT", "Script s_police_forensicsLab.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_477(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_SETUP_ASSET_ARRAYS */ void sub_595()
{
     /* WRITESCRIPTLOG */ sub_477( "AT", "P_SETUP_ASSET_ARRAYS", 0 );
    l_U795[0] = -1124233802;
    l_U795[1] = 540890112;
    l_U795[2] = -641956622;
    l_U795[3] = -2054968096;
    l_U795[4] = 1081787387;
    l_U795[5] = 1427923174;
    l_U795[6] = -1763692608;
    return;
}

/* P_HANDLE_FAILURE */ void sub_780()
{
    if (g_U821 == 12)
    {
        switch (l_U213)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_982()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )))
            {
                l_U213 = 1;
                 /* WRITESCRIPTLOG */ sub_477( "AT", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
             /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1501( 1 );
            if ( /* IS_RESTART_ACTIVE */ sub_4592())
            {
                l_U213 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_4652( 0 )) == 1)
            {
                l_U213 = 2;
            }
            break;
            case 2:
            if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() ))) AND (NOT IS_LAST_MAN_STANDING_ACTIVE())))
            {
                l_U213 = 3;
                 /* WRITESCRIPTLOG */ sub_477( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_477( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_919() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_919(), 0, 0 );
                if (NOT (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_881() )))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_881(), 0 );
                }
            }
            if ((g_U862[13]._fU40 != 4) AND (g_U862[13]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_477( "CR", "Shutting down script for MCE_MPM.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_5974( ref g_U862[13] );
                SET_EXITFLAG_FOR_SCRIPT( g_U862[13]._fU32 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            AUDIO_MUSIC_STOP_ONESHOT();
             /* P_CLEANUP_FORENSICSLAB */ sub_6100();
             /* P_FORCE_SCENE_TO_LOAD */ sub_7953( 12 );
            l_U213 = 4;
             /* WRITESCRIPTLOG */ sub_477( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_477( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_8387( ref l_U175,  /* PLAYER_PED_ID */ sub_881() );
            l_U213 = 5;
             /* WRITESCRIPTLOG */ sub_477( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_477( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U211 = 1;
            l_U213 = 0;
             /* WRITESCRIPTLOG */ sub_477( "AT", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_881()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_919() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_919()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_982()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_881(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_919(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_919(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_881() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_881(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ void sub_1501(boolean bParam0)
{
    int iVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )))
    {
        if (NOT (IS_PED_IN_COMBAT(  /* PLAYER_PED_ID */ sub_881() )))
        {
            if ((NOT l_U155._fU16) AND (NOT l_U155._fU20))
            {
                 /* WRITESCRIPTLOG */ sub_477( "AT", "Starting painkiller dialogue timer.", 0 );
                 /* CREATETIMER */ sub_1665( ref l_U155, 3500, 1, 0 );
                 /* STARTTIMER */ sub_1815( ref l_U155 );
            }
            if ((l_U155._fU16) AND ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_1944()))
            {
                 /* WRITESCRIPTLOG */ sub_477( "AT", "Dialogue detected. Restarting painkiller dialogue timer.", 0 );
                 /* CREATETIMER */ sub_1665( ref l_U155, 3500, 1, 0 );
                 /* STARTTIMER */ sub_1815( ref l_U155 );
            }
            iVar3 = GET_PAYNEKILLER_AMT();
            if (iVar3 > l_U164)
            {
                if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_1944()))
                {
                    if ((l_U155._fU16) || ( /* ISTIMERDONE */ sub_2181( ref l_U155 )))
                    {
                        if (g_U4303 < 6)
                        {
                            if ((GET_RANDOM_INT_IN_RANGE( 0, 500 )) < 300)
                            {
                                 /* WRITESCRIPTLOG */ sub_477( "GA", "Playing painkiller monologue.", 0 );
                                 /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2448( ref l_U165 );
                                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2559( 0,  /* PLAYER_PED_ID */ sub_881(), "MAX", ref l_U165, 2, 0 );
                                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2559( 1,  /* PLAYER_PED_ID */ sub_881(), "MAX", ref l_U165, 2, 0 );
                                 /* PLAY_SINGLE_SPEECH */ sub_2829( "SPOL_PLFNDPL", ref l_U165, 8, 1 );
                                g_U4303++;
                            }
                            else
                            {
                                 /* WRITESCRIPTLOG */ sub_477( "GA", "Not playing painkiller speech, failed random chance test.", 0 );
                            }
                        }
                        else
                        {
                             /* WRITESCRIPTLOG */ sub_477( "GA", "Not Playing painkiller speech, already played all 6 lines.", 0 );
                        }
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_477( "GA", "Not playing painkiller speech, not long enough since last dialogue.", 0 );
                    }
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_477( "GA", "Not playing painkiller speech, another speech is currently playing.", 0 );
                }
            }
            l_U164 = iVar3;
        }
        if ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_4077( l_U165 ))
        {
            if (NOT HAS_CUTSCENE_FINISHED())
            {
                 /* WRITESCRIPTLOG */ sub_477( "GA", "Killing painkiller speech for cutscene playing.", 0 );
                 /* KILL_SPEECH */ sub_4379( ref l_U165, 0 );
            }
        }
    }
    if (bParam0)
    {
         /* CREATETIMER */ sub_1665( ref l_U155, 20000, 1, 0 );
         /* STARTTIMER */ sub_1815( ref l_U155 );
    }
    return;
}

/* CREATETIMER */ void sub_1665(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_1815(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* IS_ANY_SPEECH_CURRENTLY_PLAYING */ void sub_1944()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

/* ISTIMERDONE */ int sub_2181(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_2448(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_2559(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_2829(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_2874( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_2874(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_2961( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_2961(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_3013( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_3531( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_3013(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_3531(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_4077(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_4120( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_4120(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* KILL_SPEECH */ void sub_4379(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_4120( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

/* IS_RESTART_ACTIVE */ void sub_4592()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_4652(int iParam0)
{
    iParam0 = 1;
    switch (l_U141)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_4734( ref l_U143 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )))
            {
                l_U142 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1665( ref l_U143, l_U142, 1, 1 );
             /* STARTTIMER */ sub_1815( ref l_U143 );
        }
        if ( /* ISTIMERDONE */ sub_2181( ref l_U143 ))
        {
             /* WRITESCRIPTLOG */ sub_477( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_919() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_919(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U141 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U141 = 2;
            }
            else
            {
                l_U141 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_477( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_5217();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_477( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_5217();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_4734(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_5217()
{
     /* WRITESCRIPTLOG */ sub_477( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_5292( ref l_U143 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_919() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_919(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U140 = 0;
    l_U140 = l_U140;
    l_U141 = 0;
    return;
}

/* RESETTIMER */ void sub_5292(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_5974(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_FORENSICSLAB */ void sub_6100()
{
     /* WRITESCRIPTLOG */ sub_477( "AT", "P_CLEANUP_FORENSICSLAB", 0 );
    ISEQ_TERMINATE( 1073507453 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6192( 1073507453, ref g_U2662 );
    ISEQ_TERMINATE( 773376182 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6192( 773376182, ref g_U2662 );
    ISEQ_TERMINATE( 1786457053 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6192( 1786457053, ref g_U2662 );
    ISEQ_TERMINATE( -1066603168 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6192( -1066603168, ref g_U2662 );
     /* CLEANOBJECTARRAY */ sub_7337( ref l_U640 );
     /* CLEANOBJECTARRAY */ sub_7337( ref l_U646 );
     /* CLEANOBJECTARRAY */ sub_7337( ref l_U652 );
     /* CLEANOBJECTARRAY */ sub_7337( ref l_U658 );
     /* CLEANPEDARRAY */ sub_7493( ref l_U395 );
     /* CLEANPEDARRAY */ sub_7493( ref l_U427 );
     /* P_KILL_SCRIPT_STREAM */ sub_7660( ref l_U770 );
     /* P_KILL_SCRIPT_STREAM */ sub_7660( ref l_U771 );
     /* P_KILL_SCRIPT_STREAM */ sub_7660( ref l_U772 );
     /* P_KILL_SCRIPT_STREAM */ sub_7660( ref l_U773 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U258._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U279._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U300._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U321._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U214._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U235._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U664[0]._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U664[1]._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U664[2]._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U664[3]._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U749._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U774._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U466._fU0 );
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_6192(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6330( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_6330(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* CLEANOBJECTARRAY */ void sub_7337(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANOBJECT */ sub_7389( (uParam0^)[I] );
    }
    return;
}

/* CLEANOBJECT */ void sub_7389(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANPEDARRAY */ void sub_7493(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_7543( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_7543(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* P_KILL_SCRIPT_STREAM */ void sub_7660(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
        STOP_SOUND( (uParam0^), 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    return;
}

/* P_FORCE_SCENE_TO_LOAD */ void sub_7953(unknown uParam0)
{
    char[64] cVar3;
    unknown uVar19;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )))
    {
         /* TELEPORTPED */ sub_8029(  /* PLAYER_PED_ID */ sub_881(), g_U2953[uParam0], g_U3083[uParam0] );
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_881(), 1 );
        if (NOT (IS_STRING_NULL( ref g_U1091[uParam0]._fU0 )))
        {
            StrCopy( ref cVar3, "Loading room: ", 64 );
            ConcatString(ref cVar3, ref g_U1091[uParam0]._fU0, 64);
            PRINTSTRING( ref cVar3 );
            PRINTNL();
            uVar19 = GET_INTERIOR_FROM_NAME( ref g_U1091[uParam0]._fU64, 0 );
            SET_INTERIOR_ACTIVE( uVar19, 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( uVar19, GET_HASH_KEY( ref g_U1091[uParam0]._fU0 ) );
        }
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_881(), 0 );
    }
    return;
}

/* TELEPORTPED */ void sub_8029(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_8387(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_477( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_8606( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_9770( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10084( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10563( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10084( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10563( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10084( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10563( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_10879( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10563( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_10879( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10563( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_11451( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_11653( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_881(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_477( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_8606(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_8668( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_8668(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_9770(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_10084(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_10488( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_10488(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_10563(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_10879(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_10488( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_11451(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_11653(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_8668( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_11751( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_11751(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_13063()
{
    int iVar2;
    int I;
    int iVar4;
    int iVar5;
    int iVar6;

    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_13096( ref l_U774, 0 ))
    {
         /* WRITESCRIPTLOG */ sub_477( "AT", "Player is in death volume. Forcing death.", 0 );
        DO_SCREEN_FADE_OUT( 500 );
         /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_SPECIAL_PLAYER_FALL_DEATH_HANDLING", 0 );
        l_U211 = 12;
    }
    iVar2 = l_U211;
    switch (l_U211)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_13617();
         /* P_SET_STATIC_DATA */ sub_14272();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U211 = 2;
         /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_FORENSICSLAB_PERSISTENT_ASSETS */ sub_16440();
         /* P_REQUEST_FORENSICSLAB_NONPERSISTENT_ASSETS */ sub_25383();
        l_U211 = 3;
         /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_30124( ref g_U2889 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_29710( ref g_U2662 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_29319( ref g_U2741 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_28917( ref g_U2613 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_28520( ref g_U2468 ))))))
        {
            g_U822[12] = 1;
            if ((NOT l_U175._fU0) AND (g_U820 == 12))
            {
                 /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
                l_U211 = 4;
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
                l_U211 = 6;
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U842[12] = 1;
        if (NOT ( /* HAS_SAVEFILE_LOADED */ sub_30734( ref l_U175 )))
        {
             /* F_GIVEPEDWEAPON */ sub_10879(  /* PLAYER_PED_ID */ sub_881(), 57534114, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10084(  /* PLAYER_PED_ID */ sub_881(), -862236369, 0, 200, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10084(  /* PLAYER_PED_ID */ sub_881(), -862236369, 1, 200, 0 );
            SET_PAYNEKILLER_AMT( 7 );
            l_U211 = 5;
             /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U211 = 6;
             /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_881(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_881(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_881(), 0, 0 ) ))))
            {
                g_U821 = 12;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_31292( ref l_U175, g_U821,  /* PLAYER_PED_ID */ sub_881(), g_U2953[12], g_U3083[12], g_U3127[12], g_U3171[12], 1 );
                l_U211 = 6;
                 /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
            }
        }
        break;
        case 6:
        if (l_U212)
        {
            l_U450 = 1;
            l_U452 = 1;
        }
        if ( /* F_CREATE_FORENSICSLAB_UFE_RAPPELLERS */ sub_35975())
        {
            if ( /* F_CREATE_FORENSICSLAB_UFE_GROUND_WAVE2 */ sub_38943())
            {
                l_U211 = 7;
                 /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 7:
        if (l_U212)
        {
             /* P_SETUP_WINDOW_ELEMENTS */ sub_39917();
        }
        if (g_U842[12])
        {
             /* NIS_POST_SETUP */ sub_41597( 0, 1 );
            DO_SCREEN_FADE_IN( 0 );
            if (g_U821 != 12)
            {
                g_U821 = 12;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_31292( ref l_U175, g_U821,  /* PLAYER_PED_ID */ sub_881(), g_U2953[12], g_U3083[12], g_U3127[12], g_U3171[12], 1 );
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_477( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_2", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_2", 0, 0, -1, -1, -1082130432, 0 );
            }
            for ( I = 0; I < l_U395; I++ )
            {
                if (NOT (IS_PED_DEAD( l_U395[I] )))
                {
                    SET_PED_VISIBLE_DURING_SEQUENCE( l_U395[I], 0 );
                    SET_PED_VISIBLE( l_U395[I], 0 );
                }
            }
            for ( I = 0; I < l_U427; I++ )
            {
                if (NOT (IS_PED_DEAD( l_U427[I] )))
                {
                    SET_PED_VISIBLE( l_U427[I], 0 );
                }
            }
            l_U211 = 9;
             /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_FORENSICSROOM_COMBAT", 0 );
        }
        break;
        case 9:
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_13096( ref l_U466, 0 ))
        {
            ;
        }
        iVar4 =  /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_42335( ref l_U395 );
        iVar5 =  /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_42335( ref l_U427 );
        if (NOT l_U465)
        {
            if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_13096( ref l_U300, 0 )) || (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_13096( ref l_U279, 0 )) || (( /* F_WAS_PLAYER_LOOKING_AT_WINDOWS_ON_RAPPELLER_START */ sub_42534()) AND ( /* F_ISPLAYERINTRIGGERBOX */ sub_42478( l_U258 )))))
            {
                 /* P_ACTIVATE_FORENSICS_GROUND_WAVE2 */ sub_42749();
                l_U465 = 1;
            }
        }
        else
        {
             /* P_HANDLE_ACTIVATE_RAPPELLERS */ sub_43173();
             /* P_HANDLE_RAPPELLER_AUTOTARGETTING */ sub_47966();
        }
        if (NOT l_U449)
        {
            iVar6 =  /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_48469( ref l_U395 );
            if (( /* F_ISPLAYERINTRIGGERBOX */ sub_42478( l_U321 )) || (iVar6 >= 2))
            {
                 /* WRITESCRIPTLOG */ sub_477( "AT", "Unlocking reinforcements!", 0 );
                 /* P_UNLOCK_FORENSICS_GROUND_WAVE2_FROM_COVER */ sub_48660();
                AUDIO_MUSIC_REQUEST_ONESHOT( "PRECINCT_ONESHOT_3", 0 );
                l_U449 = 1;
            }
        }
        else if (((g_U862[11]._fU40 == 4) || (g_U862[11]._fU40 == 0)) AND (NOT g_U862[13]._fU36))
        {
            g_U862[13]._fU36 = 1;
        }
        if ((iVar5 == 0) AND (iVar4 == 0))
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "ONESHOT: PRECINCT_ONESHOT_3", 0 );
            AUDIO_MUSIC_PLAY_ONESHOT();
             /* WRITESCRIPTLOG */ sub_477( "AT", "AUDIO TRACK: PRECINCT_FINAL/MOOD: PRECINCT_01_1_2", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_2", "", 0, -1, 8000, -1082130432, 0 );
             /* STARTTIMER */ sub_1815( ref l_U813 );
             /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_HANDLE_13_04_TRIGGER", 0 );
            l_U211 = 10;
            break;
        }
        if ((iVar4 + iVar5) <= 1)
        {
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_49173( ref l_U395 );
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_49173( ref l_U427 );
        }
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_49362( ref l_U395, -1054867456, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_49362( ref l_U427, -1054867456, 0, 1 );
        break;
        case 10:
        if (l_U212)
        {
            if ((IS_BULLET_CAMERA_RUNNING( 0 )) AND ( /* F_ISPEDINTRIGGERBOX */ sub_13172(  /* PLAYER_PED_ID */ sub_881(), l_U235 )))
            {
                 /* WRITESCRIPTLOG */ sub_477( "SA", "Disabling bullet camera to gameplay.", 0 );
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
        }
         /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1501( 0 );
        if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_1944()))
        {
            if ( /* ISTIMERDONE */ sub_2181( ref l_U813 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_49730( "SPOL_FRNSCS", ref l_U803 );
            }
        }
        if ((NOT g_U842[13]) AND (NOT (IS_BULLET_CAMERA_RUNNING( 0 ))))
        {
            if ( /* CUTSYS_HANDLETRIGGERTYPEDOOR_DRAWSINGLEPISTOL */ sub_49867( ref l_U214, ref l_U235 ))
            {
                 /* KILL_SPEECH */ sub_4379( ref l_U803, 0 );
                g_U842[13] = 1;
            }
        }
        if (NOT HAS_CUTSCENE_FINISHED())
        {
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
            l_U211 = 11;
        }
        break;
        case 11:
        if (g_U821 == 13)
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_FINISHED", 0 );
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U211 = 0;
             /* WRITESCRIPTLOG */ sub_477( "AT", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
        case 12:
         /* WRITESCRIPTLOG */ sub_477( "AT", "CP_SPECIAL_PLAYER_FALL_DEATH_HANDLING", 0 );
        if (IS_SCREEN_FADED_OUT())
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )))
            {
                 /* TELEPORTPED */ sub_8029(  /* PLAYER_PED_ID */ sub_881(), g_U2953[12], g_U3083[12] );
                 /* P_KILL_PED */ sub_52148(  /* PLAYER_PED_ID */ sub_881() );
            }
        }
        break;
    }
    if (l_U211 != iVar2)
    {
        l_U212 = 1;
    }
    else
    {
        l_U212 = 0;
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_13096(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_13172(  /* PLAYER_PED_ID */ sub_881(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* F_ISPEDINTRIGGERBOX */ int sub_13172(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_13617()
{
     /* WRITESCRIPTLOG */ sub_477( "AT", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U212 = 1;
    l_U449 = 0;
    l_U464 = 0;
    l_U465 = 0;
    l_U450 = 0;
    l_U451 = 0;
    l_U452 = 0;
    l_U453 = 0;
     /* P_SETDOORLOCKED */ sub_13745( ref g_U4093, 1 );
     /* P_SETDOORLOCKED */ sub_13745( ref g_U4100, 1 );
     /* CREATETIMER */ sub_1665( ref l_U487, 5500, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U496, 500, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U505, 1200, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U514, 0, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U523, 1400, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U604, 2000, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U613, 2000, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U622, 2000, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U631, 2000, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U532, 100, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U541, 100, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U550, 100, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U559, 100, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U568, 750, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U577, 750, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U586, 750, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U595, 750, 1, 0 );
     /* CREATETIMER */ sub_1665( ref l_U813, 9000, 1, 0 );
    return;
}

/* P_SETDOORLOCKED */ void sub_13745(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_13775( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_13859( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_13775(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_13859(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SET_STATIC_DATA */ void sub_14272()
{
     /* WRITESCRIPTLOG */ sub_477( "AT", "P_SET_STATIC_DATA", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14371( ref l_U342[0], 1008.96900000, 25.49600000, 7.80004300, -180.00000000, 2144578822, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14371( ref l_U342[1], 1012.50000000, 25.56600000, 7.80004300, -180.00000000, -1350099781, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14371( ref l_U342[2], 1016.45000000, 25.79700000, 7.80004300, -180.00000000, -1096062039, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14371( ref l_U342[3], 1021.92800000, 25.14200000, 7.80004300, -180.00000000, 248934683, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14371( ref l_U400[0], 1011.32000000, 23.56000000, 7.80000000, 0.00000000, 311955291, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14371( ref l_U400[1], 1017.26000000, 19.49000000, 7.80000000, 0.00000000, 1462347560, 7, 3, 2, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U258, "TB_START_RAPPELLERS", 1026.62000000, 22.04000000, 7.55000000, 8.76000000, 2.66000000, 3.91000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U279, "TB_START_RAPPELLERS_FAILSAFE", 1026.63000000, 25.67000000, 7.55000000, 8.76000000, 4.67000000, 3.91000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U300, "TB_START_RAPPELLERS_FAILSAFE_2", 1019.52000000, 21.97000000, 7.55000000, 8.76000000, 11.79000000, 3.91000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U321, "TB_TRIGGER_REINFORCEMENTS", 1016.77000000, 21.95000000, 7.55000000, 3.00000000, 12.00000000, 3.91000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U214, "TB_13_04_OUTER", 1007.03000000, 15.05000000, 7.55000000, 11.76000000, 10.17000000, 3.91000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U235, "TB_13_04_INNER", 1007.03000000, 13.27000000, 7.55000000, 12.08000000, 6.30000000, 3.91000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U664[0], "TB_REAR_RAPPELLER_CLEAR", 1009.21000000, 25.66000000, 7.79000000, 3.50000000, 4.50000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U664[1], "TB_MID_REAR_RAPPELLER_CLEAR", 1014.30000000, 25.66000000, 7.79000000, 3.50000000, 4.50000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U664[2], "TB_MID_FRONT_RAPPELLER_CLEAR", 1016.62000000, 25.66000000, 7.79000000, 3.50000000, 4.50000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U664[3], "TB_FRONT_RAPPELLER_CLEAR", 1021.73000000, 25.66000000, 7.79000000, 3.50000000, 4.50000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U749, "TB_CHANGE_REINFORCEMENT_SPAWN", 1009.64000000, 19.05000000, 7.76000000, 17.23000000, 17.71000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U774, "TB_PLAYER_DEATH", 1015.76000000, 14.41000000, -2.72000000, 45.00000000, 35.00000000, 10.00000000, 0.00000000, 0.00000000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14791( ref l_U466, "TB_PLAYER_IN_FORENSICS", 1018.00000000, 21.88000000, 7.79000000, 12.08000000, 26.02000000, 3.00000000, 0.00000000, 0.00000000, 90.00000000, 1 );
    l_U441[0] = "5FBC25E3_5365EC8E_Corner2";
    l_U441[1] = "5FBC25E3_556B395F_Corner1";
    l_U436[0] = "5FBC25E3_C23DE0F_Corner2";
    l_U436[1] = "5FBC25E3_9A0C432D_Popover4";
    l_U436[2] = "5FBC25E3_8E9AABC1_Popover1";
    l_U436[3] = "5FBC25E3_8E9AABC1_Popover4";
    l_U444[0] = 57534114;
    l_U444[1] = 57534114;
    l_U444[2] = 1194438308;
    l_U444[3] = 1194438308;
    l_U454[0] = 1073507453;
    l_U454[1] = 773376182;
    l_U454[2] = 1786457053;
    l_U454[3] = -1066603168;
    l_U459[0] = "VIG_06_UFE_A";
    l_U459[1] = "VIG_06_UFE_B";
    l_U459[2] = "VIG_06_UFE_C2";
    l_U459[3] = "VIG_06_UFE_D";
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_14371(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_14791(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_REQUEST_FORENSICSLAB_PERSISTENT_ASSETS */ void sub_16440()
{
     /* WRITESCRIPTLOG */ sub_477( "AT", "P_REQUEST_FORENSICSLAB_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_16561( ref l_U795, ref g_U2468 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19502( "LEVEL_S_POLICE_CP_11", ref g_U2741 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21386( 57534114, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21386( 1194438308, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21386( 434544317, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21386( -862236369, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21386( -1986694060, ref g_U2613 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_23423( "SCRIPT_MISSION\S_POLICE_FORENSICS_LAB_RAPPEL", ref g_U2889 );
     /* WRITESCRIPTLOG */ sub_477( "AT", "P_REQUEST_FORENSICSLAB_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_16561(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_16634( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_16634(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_16701( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_16959( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_16701(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_16959( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_16959( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_16959( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18490( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_16959( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_16959( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_16959(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17020( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_17020(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_18490(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_19502(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_19554( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19806( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_19554(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19806( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19806( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19806( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18490( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19806( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19806( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_19806(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17020( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_21386(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_21440( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21701( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_21440(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21701( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21701( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21701( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18490( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21701( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21701( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_21701(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17020( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_23423(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_23476( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_23731( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_23476(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_23731( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_23731( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_23731( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18490( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_23731( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_23731( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_23731(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17020( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_FORENSICSLAB_NONPERSISTENT_ASSETS */ void sub_25383()
{
     /* WRITESCRIPTLOG */ sub_477( "AT", "P_REQUEST_FORENSICSLAB_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_25511( 1073507453, ref g_U2662 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_25511( 773376182, ref g_U2662 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_25511( 1786457053, ref g_U2662 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_25511( -1066603168, ref g_U2662 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "PRECINCT_ONESHOT_4", 0 );
     /* WRITESCRIPTLOG */ sub_477( "AT", "P_REQUEST_FORENSICSLAB_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_25511(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_25572( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25822( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_25572(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25822( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25822( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25822( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25822( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_18490( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_18490( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25822( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25822( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_25822(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17020( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_28520(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_28917(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_29319(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_29710(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_30124(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_30734(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_477( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_8387( uParam0,  /* PLAYER_PED_ID */ sub_881() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_31292(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_477( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_477( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_11653( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_31583( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32060( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32060( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32320( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32060( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32320( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32320( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32060( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32320( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32320( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32320( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32060( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32320( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32320( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32320( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32320( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_33900( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_477( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_31583(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_8668( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_477( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_477( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_32060(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_32320(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_33900(int iParam0)
{
     /* WRITE_STRING */ sub_10488( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_33988( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_34065( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_34065( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_34065( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_34065( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_34065( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_34935( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU52 );
     /* WRITE_STRING */ sub_10488( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU96 );
     /* WRITE_STRING */ sub_10488( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU100 );
     /* WRITE_STRING */ sub_10488( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU104 );
     /* WRITE_STRING */ sub_10488( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU108 );
     /* WRITE_STRING */ sub_10488( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU112 );
     /* WRITE_STRING */ sub_10488( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU116 );
     /* WRITE_STRING */ sub_10488( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU120 );
     /* WRITE_STRING */ sub_10488( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU124 );
     /* WRITE_STRING */ sub_10488( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU128 );
     /* WRITE_STRING */ sub_10488( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_34234( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_34234( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_34234( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_33988(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_34065(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_34234(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_34935(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* F_CREATE_FORENSICSLAB_UFE_RAPPELLERS */ int sub_35975()
{
    switch (l_U450)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_477( "AT", "eSpawnForensicsRappellers = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_36137( ref l_U430, 1056964608, 0 );
        l_U451 = 0;
        l_U450 = 2;
         /* WRITESCRIPTLOG */ sub_477( "AT", "eSpawnForensicsRappellers = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        if (NOT (DOES_PED_EXIST( l_U395[l_U451] )))
        {
            l_U395[l_U451] =  /* CREATEPED */ sub_36638( ref l_U342[l_U451] );
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_37614( l_U395[l_U451], ref l_U430 );
             /* F_GIVEPEDWEAPON */ sub_10879( l_U395[l_U451], l_U444[l_U451], 25000, 0, 0 );
            if (NOT (IS_PED_DEAD( l_U395[l_U451] )))
            {
                SET_PED_AI_TEMPLATE( l_U395[l_U451], "AIT_EXPERT" );
                SET_PED_ALERTNESS( l_U395[l_U451], 3 );
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U395[l_U451], 1 );
                SET_PED_VISIBLE_DURING_SEQUENCE( l_U395[l_U451], 0 );
                ISEQ_REGISTER_ENTITY( l_U454[l_U451], l_U459[l_U451], l_U395[l_U451], 0 );
                ISEQ_START( l_U454[l_U451] );
                SET_ROOM_FOR_PED_BY_NAME( l_U395[l_U451], ref g_U3437 );
                if (l_U451 == 0)
                {
                    SET_PED_CAN_BE_TARGETTED( l_U395[l_U451], 0 );
                    SET_PED_COMBAT_ADVANCE_DELAY_TIME( l_U395[l_U451], 0, 3000 );
                    SET_PED_COMBAT_ATTRIBUTES( l_U395[l_U451], 16384, 1 );
                    SET_PED_COMBAT_MOVEMENT( l_U395[l_U451], 2 );
                }
            }
        }
        if (NOT (IS_PED_DEAD( l_U395[l_U451] )))
        {
            if (ISEQ_QUERY_ENTITY_STATE( l_U454[l_U451], l_U459[l_U451], 3 ))
            {
                l_U451++;
                if (l_U451 >= l_U395)
                {
                    l_U450 = 3;
                     /* WRITESCRIPTLOG */ sub_477( "AT", "eSpawnForensicsRappellers = ENTITY_STATE_POST_CREATE_SETUP", 0 );
                }
            }
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_38524( ref l_U395, "Rappellers" );
         /* P_DEACTIVATEPEDARRAY */ sub_38658( ref l_U395 );
        l_U450 = 4;
         /* WRITESCRIPTLOG */ sub_477( "AT", "eSpawnForensicsRappellers = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_36137(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* CREATEPED */ void sub_36638(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_36820( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_37369( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_37470( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_36820(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_10488( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_37369(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_37470(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_37614(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_10488( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_36137( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_36137( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_38524(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_DEACTIVATEPEDARRAY */ void sub_38658(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_38712( (uParam0^)[I] );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_38712(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* F_CREATE_FORENSICSLAB_UFE_GROUND_WAVE2 */ int sub_38943()
{
    switch (l_U452)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_477( "AT", "eSpawnForensicsWave2 = ENTITY_STATE_INIT", 0 );
        l_U453 = 0;
        l_U452 = 2;
         /* WRITESCRIPTLOG */ sub_477( "AT", "eSpawnForensicsWave2 = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        l_U427[l_U453] =  /* CREATEPED */ sub_36638( ref l_U400[l_U453] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_37614( l_U427[l_U453], ref l_U430 );
         /* F_GIVEPEDWEAPON */ sub_10879( l_U427[l_U453], 1194438308, 25000, 0, 0 );
        if (NOT (IS_PED_DEAD( l_U427[l_U453] )))
        {
            SET_PED_AI_TEMPLATE( l_U427[l_U453], "AIT_EXPERT" );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U427[l_U453], 1 );
            SET_PED_ALERTNESS( l_U427[l_U453], 3 );
            SET_ROOM_FOR_PED_BY_NAME( l_U427[l_U453], ref g_U3437 );
            SET_PED_COMBAT_ADVANCE_DELAY_TIME( l_U427[l_U453], 0, 3000 );
            SET_PED_COMBAT_ATTRIBUTES( l_U427[l_U453], 16384, 1 );
            SET_PED_COMBAT_MOVEMENT( l_U427[l_U453], 2 );
        }
        l_U453++;
        if (l_U453 >= l_U427)
        {
            l_U452 = 3;
             /* WRITESCRIPTLOG */ sub_477( "AT", "eSpawnForensicsWave2 = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
        if (NOT (IS_PED_DEAD( l_U427[0] )))
        {
            TASK_COMBAT_SNAP_TO_COVER( l_U427[0], "GenCover", "5FBC25E3_556B395F_Corner1", 0 );
            SET_PED_FLAG_LOCK_TO_COVER( l_U427[0], 1 );
        }
        if (NOT (IS_PED_DEAD( l_U427[1] )))
        {
            TASK_COMBAT_SNAP_TO_COVER( l_U427[1], "GenCover", "5FBC25E3_9A0C432D_Popover4", 0 );
            SET_PED_FLAG_LOCK_TO_COVER( l_U427[1], 1 );
        }
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_38524( ref l_U427, "Wave2" );
         /* P_DEACTIVATEPEDARRAY */ sub_38658( ref l_U427 );
        l_U452 = 4;
         /* WRITESCRIPTLOG */ sub_477( "AT", "eSpawnForensicsWave2 = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_WINDOW_ELEMENTS */ void sub_39917()
{
    int I;

     /* WRITESCRIPTLOG */ sub_477( "AT", "P_SETUP_WINDOW_ELEMENTS start", 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U640[0], -641956622, 1020.60900000, 27.83400000, 10.56200000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U640[1], -2054968096, 1020.59600000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U640[2], 1081787387, 1020.59600000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U640[3], 1427923174, 1020.59600000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U640[4], -1763692608, 1020.59600000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U646[0], -641956622, 1015.35900000, 27.83400000, 10.56200000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U646[1], -2054968096, 1015.34500000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U646[2], 1081787387, 1015.34500000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U646[3], 1427923174, 1015.34500000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U646[4], -1763692608, 1015.34500000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U652[0], -641956622, 1010.94900000, 27.83400000, 10.56200000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U652[1], -2054968096, 1010.93500000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U652[2], 1081787387, 1010.93500000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U652[3], 1427923174, 1010.93500000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U652[4], -1763692608, 1010.93500000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U658[0], -641956622, 1007.94800000, 27.83400000, 10.56200000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U658[1], -2054968096, 1007.93400000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U658[2], 1081787387, 1007.93400000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U658[3], 1427923174, 1007.93400000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
     /* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ sub_40029( ref l_U658[4], -1763692608, 1007.93400000, 28.04800000, 8.89000000, ref g_U3437, 1, 0 );
    for ( I = 0; I < l_U658; I++ )
    {
        if (DOES_OBJECT_EXIST( l_U658[I] ))
        {
            SET_OBJECT_COLLISION( l_U658[I], 0 );
        }
    }
    I = 0;
    for ( I = 0; I < l_U640; I++ )
    {
        if (DOES_OBJECT_EXIST( l_U640[I] ))
        {
            SET_OBJECT_COLLISION( l_U640[I], 0 );
        }
    }
    I = 0;
    for ( I = 0; I < l_U646; I++ )
    {
        if (DOES_OBJECT_EXIST( l_U646[I] ))
        {
            SET_OBJECT_COLLISION( l_U646[I], 0 );
        }
    }
    I = 0;
    for ( I = 0; I < l_U652; I++ )
    {
        if (DOES_OBJECT_EXIST( l_U652[I] ))
        {
            SET_OBJECT_COLLISION( l_U652[I], 0 );
        }
    }
    return;
}

/* MAL_RECREATEOBJECTWITHNOROTATIONINROOM */ void sub_40029(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
     /* MAL_RECREATEOBJECTINROOM */ sub_40099( uParam0, uParam1, uParam2, l_U73, uParam5, uParam6, uParam7 );
    return;
}

/* MAL_RECREATEOBJECTINROOM */ void sub_40099(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
     /* MAL_RECREATEOBJECT */ sub_40152( uParam0, uParam1, uParam2, uParam5, uParam9, uParam10 );
    if (DOES_OBJECT_EXIST( (uParam0^) ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( (uParam0^), uParam8 );
    }
    return;
}

/* MAL_RECREATEOBJECT */ void sub_40152(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* CLEANOBJECT */ sub_7389( (uParam0^) );
    (uParam0^) =  /* CREATEOBJECTNOOFFSET */ sub_40204( uParam1, uParam2, uParam5, 0, uParam9, 0 );
    FREEZE_OBJECT_POSITION( (uParam0^), uParam8 );
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_40204(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_36820( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* NIS_POST_SETUP */ void sub_41597(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_919(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_881(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_41695();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_41695()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_881(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_881(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_881(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_881(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_42335(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_42478(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_13172(  /* PLAYER_PED_ID */ sub_881(), uParam0 );
}

/* F_WAS_PLAYER_LOOKING_AT_WINDOWS_ON_RAPPELLER_START */ int sub_42534()
{
    vector vVar2;
    vector vVar5;
    vector vVar8;

    vVar2 = {1010.34400000, 34.87200000, 11.45400000};
    vVar5 = {1017.33800000, 34.87200000, 11.45400000};
    vVar8 = {1025.00300000, 34.87200000, 11.45400000};
    if ((IS_SPHERE_VISIBLE( vVar8, 1.00000000, 0 )) || ((IS_SPHERE_VISIBLE( vVar5, 1.00000000, 0 )) || (IS_SPHERE_VISIBLE( vVar2, 1.00000000, 0 ))))
    {
        return 1;
    }
    return 0;
}

/* P_ACTIVATE_FORENSICS_GROUND_WAVE2 */ void sub_42749()
{
    int I;
    unknown uVar3;

     /* P_ACTIVATEPEDARRAY */ sub_42799( ref l_U427 );
    for ( I = 0; I < l_U427; I++ )
    {
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() ))) AND (NOT (IS_PED_DEAD( l_U427[I] ))))
        {
            OPEN_SEQUENCE_TASK( ref uVar3 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_881() );
            CLOSE_SEQUENCE_TASK( uVar3 );
            TASK_PERFORM_SEQUENCE( l_U427[I], uVar3 );
            REGISTER_TARGET( l_U427[I],  /* PLAYER_PED_ID */ sub_881() );
            SET_LOCKED_TARGET( l_U427[I],  /* PLAYER_PED_ID */ sub_881() );
            CLEAR_SEQUENCE_TASK( uVar3 );
        }
    }
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_42799(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_42851( (uParam0^)[I] );
    }
    return;
}

/* P_ACTIVATEPED */ void sub_42851(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_HANDLE_ACTIVATE_RAPPELLERS */ void sub_43173()
{
    if (NOT l_U464)
    {
         /* STARTTIMER */ sub_1815( ref l_U523 );
         /* STARTTIMER */ sub_1815( ref l_U514 );
         /* STARTTIMER */ sub_1815( ref l_U505 );
         /* STARTTIMER */ sub_1815( ref l_U496 );
         /* WRITESCRIPTLOG */ sub_477( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_2_3_5", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_2_3_5", "", 0, 3000, -1, -1082130432, 0 );
         /* P_INITIALIZE_RAPPELLER_IMAGEFX */ sub_43389();
        l_U464 = 1;
    }
    if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_42478( l_U664[0] )))
    {
        if ( /* ISTIMERDONE */ sub_2181( ref l_U496 ))
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "Timer 1 is done!", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() ))) AND (NOT (IS_PED_DEAD( l_U395[0] ))))
            {
                 /* P_ACTIVATE_AND_TASK_RAPPELLER */ sub_44367( ref l_U395[0], l_U436[0] );
            }
             /* P_ENABLE_RAPPELLER_LASERSIGHT */ sub_44609( ref l_U395[0] );
             /* STARTTIMER */ sub_1815( ref l_U532 );
             /* STARTTIMER */ sub_1815( ref l_U568 );
             /* STARTTIMER */ sub_1815( ref l_U604 );
        }
    }
    if ( /* ISTIMERDONE */ sub_2181( ref l_U532 ))
    {
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U658[0], "P_PO_BLND_AA_H", "po_anim2", 1065353216, 0 );
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U658[1], "P_PO_WNDFR_AA_H", "po_anim2", 1065353216, 0 );
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U658[2], "P_PO_WNDGLS_AA_H", "po_anim2", 1065353216, 0 );
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U658[3], "P_PO_WNDGLS_AB_H", "po_anim2", 1065353216, 0 );
    }
    if ( /* ISTIMERDONE */ sub_2181( ref l_U568 ))
    {
        l_U770 = GET_SOUND_ID();
        STOP_SOUND( l_U770, 0 );
        PLAY_SOUND_FROM_COORD( l_U770, "FORENSICS_LAB_RAPPELLERS", 1007.93400000, 28.04800000, 8.89900000 );
        START_PARTICLE_FX_NON_LOOPED_AT_COORD( "PO_RF_Glass_Window_S", 1009.00000000, 28.04000000, 9.89000000, 0.00000000, 0.00000000, 0.00000000, 1065353216 );
    }
    if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_42478( l_U664[1] )))
    {
        if ( /* ISTIMERDONE */ sub_2181( ref l_U505 ))
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "Timer 2 is done!", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() ))) AND (NOT (IS_PED_DEAD( l_U395[1] ))))
            {
                 /* P_ACTIVATE_AND_TASK_RAPPELLER */ sub_44367( ref l_U395[1], l_U436[1] );
            }
             /* P_ENABLE_RAPPELLER_LASERSIGHT */ sub_44609( ref l_U395[1] );
             /* STARTTIMER */ sub_1815( ref l_U541 );
             /* STARTTIMER */ sub_1815( ref l_U577 );
             /* STARTTIMER */ sub_1815( ref l_U613 );
        }
    }
    if ( /* ISTIMERDONE */ sub_2181( ref l_U541 ))
    {
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U652[0], "P_PO_BLND_AA_H", "po_anim2", 1065353216, 0 );
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U652[1], "P_PO_WNDFR_AA_H", "po_anim2", 1065353216, 0 );
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U652[2], "P_PO_WNDGLS_AA_H", "po_anim2", 1065353216, 0 );
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U652[3], "P_PO_WNDGLS_AB_H", "po_anim2", 1065353216, 0 );
    }
    if ( /* ISTIMERDONE */ sub_2181( ref l_U577 ))
    {
        l_U771 = GET_SOUND_ID();
        STOP_SOUND( l_U771, 0 );
        PLAY_SOUND_FROM_COORD( l_U771, "FORENSICS_LAB_RAPPELLERS", 1010.93500000, 28.04800000, 8.89900000 );
        START_PARTICLE_FX_NON_LOOPED_AT_COORD( "PO_RF_Glass_Window_S", 1012.00000000, 28.04000000, 9.89000000, 0.00000000, 0.00000000, 0.00000000, 1065353216 );
    }
    if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_42478( l_U664[2] )))
    {
        if ( /* ISTIMERDONE */ sub_2181( ref l_U514 ))
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "Timer 3 is done!", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() ))) AND (NOT (IS_PED_DEAD( l_U395[2] ))))
            {
                 /* P_ACTIVATE_AND_TASK_RAPPELLER */ sub_44367( ref l_U395[2], l_U436[2] );
            }
             /* P_ENABLE_RAPPELLER_LASERSIGHT */ sub_44609( ref l_U395[2] );
             /* STARTTIMER */ sub_1815( ref l_U550 );
             /* STARTTIMER */ sub_1815( ref l_U586 );
             /* STARTTIMER */ sub_1815( ref l_U622 );
        }
    }
    if ( /* ISTIMERDONE */ sub_2181( ref l_U550 ))
    {
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U646[0], "P_PO_BLND_AA_H", "po_anim2", 1065353216, 0 );
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U646[1], "P_PO_WNDFR_AA_H", "po_anim2", 1065353216, 0 );
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U646[2], "P_PO_WNDGLS_AA_H", "po_anim2", 1065353216, 0 );
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U646[3], "P_PO_WNDGLS_AB_H", "po_anim2", 1065353216, 0 );
        SHOOT_SINGLE_BULLET_BETWEEN_COORDS( 1016.35000000, 27.76000000, 9.69000000, 1014.29000000, 23.37000000, 7.80000000, 0, 0, -1986694060, 0 );
    }
    if ( /* ISTIMERDONE */ sub_2181( ref l_U586 ))
    {
        l_U772 = GET_SOUND_ID();
        STOP_SOUND( l_U772, 0 );
        PLAY_SOUND_FROM_COORD( l_U772, "FORENSICS_LAB_RAPPELLERS", 1015.34500000, 28.04800000, 8.99000000 );
        START_PARTICLE_FX_NON_LOOPED_AT_COORD( "PO_RF_Glass_Window_S", 1016.20000000, 28.04000000, 9.89000000, 0.00000000, 0.00000000, 0.00000000, 1065353216 );
    }
    if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_42478( l_U664[3] )))
    {
        if ( /* ISTIMERDONE */ sub_2181( ref l_U523 ))
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "Timer 4 is done!", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() ))) AND (NOT (IS_PED_DEAD( l_U395[3] ))))
            {
                 /* P_ACTIVATE_AND_TASK_RAPPELLER */ sub_44367( ref l_U395[3], l_U436[3] );
            }
             /* P_ENABLE_RAPPELLER_LASERSIGHT */ sub_44609( ref l_U395[3] );
             /* STARTTIMER */ sub_1815( ref l_U559 );
             /* STARTTIMER */ sub_1815( ref l_U595 );
             /* STARTTIMER */ sub_1815( ref l_U631 );
        }
    }
    if ( /* ISTIMERDONE */ sub_2181( ref l_U559 ))
    {
         /* WRITESCRIPTLOG */ sub_477( "GA", "Playing oneshot: PRECINCT_ONESHOT_4", 0 );
        AUDIO_MUSIC_PLAY_ONESHOT();
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U640[0], "P_PO_BLND_AA_H", "po_anim2", 1065353216, 0 );
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U640[1], "P_PO_WNDFR_AA_H", "po_anim2", 1065353216, 0 );
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U640[2], "P_PO_WNDGLS_AA_H", "po_anim2", 1065353216, 0 );
         /* MAL_PLAYOBJECTANIM */ sub_44993( l_U640[3], "P_PO_WNDGLS_AB_H", "po_anim2", 1065353216, 0 );
        SHOOT_SINGLE_BULLET_BETWEEN_COORDS( 1021.67000000, 27.76000000, 9.72000000, 1025.83000000, 25.17000000, 7.80000000, 0, 0, -1986694060, 0 );
    }
    if ( /* ISTIMERDONE */ sub_2181( ref l_U595 ))
    {
        l_U773 = GET_SOUND_ID();
        STOP_SOUND( l_U773, 0 );
        PLAY_SOUND_FROM_COORD( l_U773, "FORENSICS_LAB_RAPPELLERS", 1020.59600000, 28.04800000, 8.89000000 );
        START_PARTICLE_FX_NON_LOOPED_AT_COORD( "PO_RF_Glass_Window_S", 1021.50000000, 28.04000000, 9.89000000, 0.00000000, 0.00000000, 0.00000000, 1065353216 );
    }
     /* P_HANDLE_IMAGEFX */ sub_47124( ref l_U822 );
    return;
}

/* P_INITIALIZE_RAPPELLER_IMAGEFX */ void sub_43389()
{
     /* P_INIT_IMAGEFX */ sub_43436( ref l_U822 );
    l_U822[0]._fU4 = "EXPOSURE_DARKEN";
    l_U822[0]._fU16 = 300;
    l_U822[0]._fU24 = 1;
    l_U822[0]._fU20 = 3;
    l_U822[0]._fU12 = l_U1066;
    l_U822[0]._fU8 = 4;
    l_U822[0]._fU32 = 0;
    l_U822[1]._fU4 = "DISTORT_INTERLACE_MIDDLE";
    l_U822[1]._fU8 = 4;
    l_U822[1]._fU32 = 0;
    l_U822[2]._fU4 = "DOUBLE_TINT_BLUE_FLASH";
    l_U822[2]._fU8 = 4;
    l_U822[2]._fU32 = 0;
    l_U822[4]._fU4 = "DOUBLE_TINT_BLUE_FLASH_LONG";
    l_U822[4]._fU16 = 300;
    l_U822[4]._fU24 = 1;
    l_U822[4]._fU20 = 1;
    l_U822[4]._fU12 = l_U1066 + 500;
    l_U822[4]._fU8 = 4;
    l_U822[4]._fU32 = 0;
    l_U822[5]._fU4 = "FLASH_WHITE";
    l_U822[5]._fU8 = 4;
    l_U822[5]._fU32 = 0;
    l_U822[6]._fU4 = "FLICKER_VIBRATE_INTERLACE_01";
    l_U822[6]._fU16 = 300;
    l_U822[6]._fU24 = 1;
    l_U822[6]._fU20 = 1;
    l_U822[6]._fU12 = l_U1066 + 1200;
    l_U822[6]._fU8 = 4;
    l_U822[6]._fU32 = 0;
    l_U822[7]._fU4 = "DOUBLE_TINT_BLUE_FLASH";
    l_U822[7]._fU8 = 4;
    l_U822[7]._fU32 = 0;
    l_U822[8]._fU4 = "FLASH_WHITE";
    l_U822[8]._fU12 = l_U1066 + 1400;
    l_U822[8]._fU8 = 4;
    l_U822[8]._fU32 = 0;
    l_U152 = 0;
    return;
}

/* P_INIT_IMAGEFX */ void sub_43436(unknown uParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_477( "CO", "P_INIT_IMAGEFX", 0 );
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I]._fU4 = "";
        (uParam0^)[I]._fU12 = 0;
        (uParam0^)[I]._fU16 = 0;
        (uParam0^)[I]._fU20 = 0;
        (uParam0^)[I]._fU24 = 0;
        (uParam0^)[I]._fU28 = 0;
        (uParam0^)[I]._fU32 = 1;
    }
    return;
}

/* P_ACTIVATE_AND_TASK_RAPPELLER */ void sub_44367(unknown uParam0, unknown uParam1)
{
    unknown uVar4;

     /* P_ACTIVATEPED */ sub_42851( (uParam0^) );
    SET_PED_VISIBLE_DURING_SEQUENCE( (uParam0^), 1 );
    OPEN_SEQUENCE_TASK( ref uVar4 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    TASK_COMBAT_MOVE_TO_COVER( 0, "GenCover", uParam1, 0 );
    CLOSE_SEQUENCE_TASK( uVar4 );
    TASK_PERFORM_SEQUENCE( (uParam0^), uVar4 );
    REGISTER_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_881() );
    SET_LOCKED_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_881() );
    CLEAR_SEQUENCE_TASK( uVar4 );
    PED_SET_ACTION_INTENTION( (uParam0^), 47, 1000, 0, 0, 0 );
    SET_PED_PRIMARY_LOOKAT( (uParam0^),  /* PLAYER_PED_ID */ sub_881() );
    REGISTER_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_881() );
    SET_LOCKED_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_881() );
    return;
}

/* P_ENABLE_RAPPELLER_LASERSIGHT */ void sub_44609(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        uVar3 = GET_WEAPON_FROM_HAND( (uParam0^), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
             /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_44698( ref uVar3, 13, 1 );
            SET_LASER_SIGHT_ATTACHMENT( uVar3, -938171172 );
        }
        else
        {
            SCRIPT_ASSERT( "Could not get weapon from rappeller!", 0 );
        }
    }
    return;
}

/* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ void sub_44698(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (GET_DOES_WEAPON_EXIST( (uParam0^) ))
    {
        if (bParam2)
        {
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
        else
        {
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
    }
    return;
}

/* MAL_PLAYOBJECTANIM */ void sub_44993(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        PLAY_OBJECT_ANIM( uParam0, uParam1, uParam2, 0.00000000, 0, 1 );
        SET_OBJECT_ANIM_CURRENT_TIME( uParam0, uParam1, uParam2, uParam4 );
        SET_OBJECT_ANIM_SPEED( uParam0, uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_HANDLE_IMAGEFX */ void sub_47124(unknown uParam0)
{
    int I;
    int J;

    switch (l_U152)
    {
        case 0:
         /* WRITESCRIPTLOG */ sub_477( "CO", "P_HANDLE_IMAGEFX", 0 );
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (uParam0^)[I]._fU32)
            {
                 /* CREATETIMER */ sub_1665( ref (uParam0^)[I]._fU36, (uParam0^)[I]._fU12, 1, 0 );
                 /* STARTTIMER */ sub_1815( ref (uParam0^)[I]._fU36 );
                if ((uParam0^)[I]._fU20 > 0)
                {
                    I += (uParam0^)[I]._fU20;
                }
            }
        }
        l_U152 = 1;
        break;
        case 1:
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if ( /* ISTIMERDONE */ sub_2181( ref (uParam0^)[I]._fU36 ))
            {
                (uParam0^)[I]._fU0 = PLAY_IMAGEFX( (uParam0^)[I]._fU4, (uParam0^)[I]._fU8, (uParam0^)[I]._fU28 );
                if ((uParam0^)[I]._fU16 > 0)
                {
                     /* CREATETIMER */ sub_1665( ref (uParam0^)[I]._fU72, (uParam0^)[I]._fU16, 1, 0 );
                     /* STARTTIMER */ sub_1815( ref (uParam0^)[I]._fU72 );
                }
                if ((uParam0^)[I]._fU20 > 0)
                {
                    for ( J = I + 1; J <= (I + (uParam0^)[I]._fU20); J++ )
                    {
                        PRINTSTRING( "******* [CO] ***** STARTING CHILD FOR index : " );
                        PRINTINT( J );
                        PRINTNL();
                        (uParam0^)[J]._fU0 = PLAY_IMAGEFX( (uParam0^)[J]._fU4, (uParam0^)[J]._fU8, (uParam0^)[I]._fU28 );
                        if ((uParam0^)[J]._fU16 > 0)
                        {
                             /* CREATETIMER */ sub_1665( ref (uParam0^)[J]._fU72, (uParam0^)[J]._fU16, 1, 0 );
                             /* STARTTIMER */ sub_1815( ref (uParam0^)[J]._fU72 );
                        }
                    }
                    I += (uParam0^)[I]._fU20;
                }
            }
            if ( /* ISTIMERDONE */ sub_2181( ref (uParam0^)[I]._fU72 ))
            {
                STOP_IMAGEFX( (uParam0^)[I]._fU0, (uParam0^)[I]._fU24 );
                (uParam0^)[I]._fU32 = 1;
                if ((uParam0^)[I]._fU20 > 0)
                {
                    if ((uParam0^)[I]._fU20 == 1)
                    {
                        STOP_IMAGEFX( (uParam0^)[I + 1]._fU0, (uParam0^)[I + 1]._fU24 );
                        (uParam0^)[I + 1]._fU32 = 1;
                    }
                    else
                    {
                        for ( J = I + 1; J <= (uParam0^)[I]._fU20; J++ )
                        {
                            STOP_IMAGEFX( (uParam0^)[J]._fU0, (uParam0^)[J]._fU24 );
                            (uParam0^)[J]._fU32 = 1;
                        }
                    }
                    I += (uParam0^)[I]._fU20;
                }
            }
        }
        break;
    }
    return;
}

/* P_HANDLE_RAPPELLER_AUTOTARGETTING */ void sub_47966()
{
    if (NOT (IS_PED_DEAD( l_U395[0] )))
    {
        if ( /* ISTIMERDONE */ sub_2181( ref l_U604 ))
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "Setting REAR rappeller to be targettable.", 0 );
            SET_PED_CAN_BE_TARGETTED( l_U395[0], 1 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U395[1] )))
    {
        if ( /* ISTIMERDONE */ sub_2181( ref l_U613 ))
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "Setting MID REAR rappeller to be targettable.", 0 );
            SET_PED_CAN_BE_TARGETTED( l_U395[1], 1 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U395[2] )))
    {
        if ( /* ISTIMERDONE */ sub_2181( ref l_U622 ))
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "Setting MID FRONT rappeller to be targettable.", 0 );
            SET_PED_CAN_BE_TARGETTED( l_U395[2], 1 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U395[3] )))
    {
        if ( /* ISTIMERDONE */ sub_2181( ref l_U631 ))
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "Setting FRONT rappeller to be targettable.", 0 );
            SET_PED_CAN_BE_TARGETTED( l_U395[3], 1 );
        }
    }
    return;
}

/* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ void sub_48469(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            if (IS_PED_DEAD( (uParam0^)[I] ))
            {
                Result++;
            }
        }
    }
    return Result;
}

/* P_UNLOCK_FORENSICS_GROUND_WAVE2_FROM_COVER */ void sub_48660()
{
    if (NOT (IS_PED_DEAD( l_U427[0] )))
    {
        SET_PED_FLAG_LOCK_TO_COVER( l_U427[0], 0 );
    }
    if (NOT (IS_PED_DEAD( l_U427[1] )))
    {
        SET_PED_FLAG_LOCK_TO_COVER( l_U427[1], 0 );
    }
    return;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_49173(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_42335( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_49362(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_49428( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_49428(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_7543( uParam0 );
            }
        }
    }
    return;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_49730(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2448( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2559( 0,  /* PLAYER_PED_ID */ sub_881(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2559( 1,  /* PLAYER_PED_ID */ sub_881(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_2829( uParam0, uParam1, 8, 1 );
    return;
}

/* CUTSYS_HANDLETRIGGERTYPEDOOR_DRAWSINGLEPISTOL */ int sub_49867(int iParam0, unknown uParam1)
{
    unknown uVar4;

    if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_13096( iParam0, 0 )) == 1)
    {
        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_881(), 1 );
        SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_919(), 0 );
    }
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_42478( (iParam0^) ))
    {
         /* P_PLAYER_HOLSTER_WEAPONS */ sub_49986( ref l_U55, 1, 0 );
         /* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ sub_51344( 0 );
    }
    if ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_42478( (iParam0^) ))) AND (iParam0->_fU64))
    {
        iParam0->_fU64 = 0;
        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_881(), 0 );
        SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_919(), 1 );
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_13096( uParam1, 0 ))
    {
        return 1;
    }
    return 0;
}

/* P_PLAYER_HOLSTER_WEAPONS */ void sub_49986(int iParam0, int iParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;

     /* RESET_WEAPON_CONFIG */ sub_50025( iParam0 );
    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )) == 0)
    {
        uVar5 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_881(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_50226( uVar5 )) == 1)
            {
                ref iParam0->_fU0->_fU0 = uVar5;
                ref iParam0->_fU0->_fU4 = GET_WEAPON_TYPE( uVar5 );
            }
            else if (( /* IS_WEAPON_TWO_HANDED */ sub_50480( uVar5 )) == 1)
            {
                ref iParam0->_fU24->_fU0 = uVar5;
                ref iParam0->_fU24->_fU4 = GET_WEAPON_TYPE( uVar5 );
            }
        }
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_881(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar6 )) == 1)
        {
            ref iParam0->_fU12->_fU0 = uVar6;
            ref iParam0->_fU12->_fU4 = GET_WEAPON_TYPE( uVar6 );
        }
        uVar7 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_881(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
        {
            ref iParam0->_fU36->_fU0 = uVar7;
            ref iParam0->_fU36->_fU4 = GET_WEAPON_TYPE( uVar7 );
        }
        uVar8 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_881(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar8 )) == 1)
        {
            ref iParam0->_fU48->_fU0 = uVar8;
            ref iParam0->_fU48->_fU4 = GET_WEAPON_TYPE( uVar8 );
        }
        uVar9 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_881(), 2 );
        if ((GET_DOES_WEAPON_EXIST( uVar9 )) == 1)
        {
            ref iParam0->_fU60->_fU0 = uVar9;
            ref iParam0->_fU60->_fU4 = GET_WEAPON_TYPE( uVar9 );
        }
    }
    if (iParam1 == 0)
    {
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )) == 0)
        {
            uVar10 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_881(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar10 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_881(), 0, 0, uParam2 );
            }
            uVar11 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_881(), 1, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar11 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_881(), 0, 1, uParam2 );
            }
        }
    }
    else if (iParam1 == 1)
    {
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )) == 0)
        {
            uVar12 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_881(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar12 )) == 1)
            {
                if (( /* IS_WEAPON_TWO_HANDED */ sub_50480( uVar12 )) == 1)
                {
                    SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_881(), 0, 0, uParam2 );
                }
            }
            uVar13 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_881(), 1, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar13 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_881(), 0, 1, uParam2 );
            }
        }
    }
    return;
}

/* RESET_WEAPON_CONFIG */ void sub_50025(int iParam0)
{
    ref iParam0->_fU0->_fU0 = 0;
    ref iParam0->_fU0->_fU4 = 0;
    ref iParam0->_fU12->_fU0 = 0;
    ref iParam0->_fU12->_fU4 = 0;
    ref iParam0->_fU24->_fU0 = 0;
    ref iParam0->_fU24->_fU4 = 0;
    ref iParam0->_fU36->_fU0 = 0;
    ref iParam0->_fU36->_fU4 = 0;
    ref iParam0->_fU48->_fU0 = 0;
    ref iParam0->_fU48->_fU4 = 0;
    ref iParam0->_fU60->_fU0 = 0;
    ref iParam0->_fU60->_fU4 = 0;
    return;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_50226(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* IS_WEAPON_TWO_HANDED */ int sub_50480(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == -2075384407) || ((iVar3 == 10648147) || ((iVar3 == 1224272620) || ((iVar3 == 1478009203) || ((iVar3 == 1964270085) || ((iVar3 == -110877124) || ((iVar3 == 427207702) || ((iVar3 == 319712764) || ((iVar3 == 514118749) || ((iVar3 == -184942895) || ((iVar3 == -168327769) || ((iVar3 == 434544317) || ((iVar3 == -1659006841) || ((iVar3 == 930042831) || ((iVar3 == 1001413062) || ((iVar3 == 377623895) || ((iVar3 == -1312131151) || ((iVar3 == -1787162676) || ((iVar3 == 724901397) || ((iVar3 == 57534114) || ((iVar3 == 840671040) || ((iVar3 == 1308526797) || ((iVar3 == -1074756423) || ((iVar3 == 1992962408) || (iVar3 == -1013714740)))))))))))))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ void sub_51344(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )) == 0)
    {
        iVar3 = 0;
        uVar4 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_881(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 0)
        {
            iVar3 = 1;
        }
        if ((( /* IS_WEAPON_SINGLE_HANDED */ sub_50226( uVar4 )) == 0) AND ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1))
        {
            iVar3 = 1;
        }
        if (iVar3 == 1)
        {
            uVar5 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_51492();
            if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_881(), uVar5, 0, uParam0 );
            }
        }
    }
    return;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_51492()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_881() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_881(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_50226( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_881(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_881(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_881(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* P_KILL_PED */ void sub_52148(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* P_RELEASE_FORENSICSLAB_ASSETS */ void sub_52287()
{
     /* WRITESCRIPTLOG */ sub_477( "AT", "P_RELEASE_FORENSICSLAB_ASSETS", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_52380( ref l_U795, ref g_U2468 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_52947( "LEVEL_S_POLICE_CP_11", ref g_U2741 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_53293( 57534114, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_53293( 1194438308, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_53293( 434544317, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_53293( -862236369, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_53293( -1986694060, ref g_U2613 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_53726( "SCRIPT_MISSION\S_POLICE_FORENSICS_LAB_RAPPEL", ref g_U2889 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_52380(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_52453( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_52453(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6330( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_52947(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6330( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_53293(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6330( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_53726(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6330( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

