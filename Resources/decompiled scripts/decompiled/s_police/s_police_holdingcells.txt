void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U74 = 0;
    l_U75 = 0;
    l_U76 = 1500;
    l_U95 = 12;
    l_U152 = 0;
    l_U154 = 1;
    l_U155 = 0;
    l_U156 = "S_POLICE_SE_RIOT";
    l_U157 = 0;
    l_U186 = 4000;
    l_U187 = 2500;
    l_U636 = 0;
    l_U718 = 0;
    l_U1396 = 14300;
    l_U1397 = 5000;
    l_U1398 = 8000;
    l_U1399 = 8000;
    l_U1400 = 8000;
    l_U1401 = 0;
    l_U1410 = 0;
    l_U1414 = 0;
    l_U1420 = 0;
    l_U1474 = 0;
    l_U1475 = 0;
    l_U1476 = 0;
    l_U1477 = 0;
     /* WRITESCRIPTLOG */ sub_523( "SP", "Script s_police_HoldingCells.sc is starting up...", 0 );
     /* P_HC_POPULATE_SCRIPT_ARRAYS */ sub_641();
    l_U152 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_904();
        if (l_U155 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_14023();
        }
         /* P_HC_DEBUG_TUNING_WIDGET */ sub_73617();
        WAIT( 0 );
    }
     /* P_CLEANUP_HC */ sub_6228( 1 );
     /* P_RELEASE_HC_ASSETS */ sub_74531();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_police_HoldingCells" );
     /* WRITESCRIPTLOG */ sub_523( "SP", "Script s_police_HoldingCells.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_523(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_HC_POPULATE_SCRIPT_ARRAYS */ void sub_641()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_POPULATE_SCRIPT_ARRAYS start", 0 );
    l_U142[0] = -659929837;
    l_U142[1] = 142276123;
    l_U142[2] = -36467684;
    l_U142[3] = g_U811;
    l_U142[4] = g_U815;
    l_U148[0] = -862236369;
    l_U148[1] = 434544317;
    l_U148[2] = 1194438308;
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_POPULATE_SCRIPT_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_904()
{
    if (g_U821 == 2)
    {
        switch (l_U155)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1106()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
            {
                l_U155 = 1;
                 /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
             /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1625( 1 );
            if ( /* IS_RESTART_ACTIVE */ sub_4716())
            {
                l_U155 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_4776( 0 )) == 1)
            {
                l_U155 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
            {
                l_U155 = 3;
                 /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1043() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1043(), 0, 0 );
                SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1043(), 1 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1005() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1005(), 0 );
                }
            }
            if ((g_U862[3]._fU40 != 4) AND (g_U862[3]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_523( "CR", "Shutting down script for MCE_PRISONER_EXCH.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_6101( ref g_U862[3] );
                SET_EXITFLAG_FOR_SCRIPT( g_U862[3]._fU32 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            AUDIO_MUSIC_STOP_ONESHOT();
             /* P_CLEANUP_HC */ sub_6228( 0 );
             /* P_FORCE_SCENE_TO_LOAD */ sub_8828( 2 );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "MILO_police_f01", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "MILO_police_f01", 0 ), GET_HASH_KEY( ref g_U3237 ) );
            l_U155 = 4;
             /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_9341( ref l_U106,  /* PLAYER_PED_ID */ sub_1005() );
            l_U155 = 5;
             /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U152 = 1;
            l_U154 = 0;
            l_U155 = 0;
             /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_1005()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1043() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1043()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1106()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1005(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1043(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1043(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1005() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1005(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ void sub_1625(boolean bParam0)
{
    int iVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
    {
        if (NOT (IS_PED_IN_COMBAT(  /* PLAYER_PED_ID */ sub_1005() )))
        {
            if ((NOT l_U86._fU16) AND (NOT l_U86._fU20))
            {
                 /* WRITESCRIPTLOG */ sub_523( "AT", "Starting painkiller dialogue timer.", 0 );
                 /* CREATETIMER */ sub_1789( ref l_U86, 3500, 1, 0 );
                 /* STARTTIMER */ sub_1939( ref l_U86 );
            }
            if ((l_U86._fU16) AND ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2068()))
            {
                 /* WRITESCRIPTLOG */ sub_523( "AT", "Dialogue detected. Restarting painkiller dialogue timer.", 0 );
                 /* CREATETIMER */ sub_1789( ref l_U86, 3500, 1, 0 );
                 /* STARTTIMER */ sub_1939( ref l_U86 );
            }
            iVar3 = GET_PAYNEKILLER_AMT();
            if (iVar3 > l_U95)
            {
                if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2068()))
                {
                    if ((l_U86._fU16) || ( /* ISTIMERDONE */ sub_2305( ref l_U86 )))
                    {
                        if (g_U4303 < 6)
                        {
                            if ((GET_RANDOM_INT_IN_RANGE( 0, 500 )) < 300)
                            {
                                 /* WRITESCRIPTLOG */ sub_523( "GA", "Playing painkiller monologue.", 0 );
                                 /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2572( ref l_U96 );
                                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 0,  /* PLAYER_PED_ID */ sub_1005(), "MAX", ref l_U96, 2, 0 );
                                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 1,  /* PLAYER_PED_ID */ sub_1005(), "MAX", ref l_U96, 2, 0 );
                                 /* PLAY_SINGLE_SPEECH */ sub_2953( "SPOL_PLFNDPL", ref l_U96, 8, 1 );
                                g_U4303++;
                            }
                            else
                            {
                                 /* WRITESCRIPTLOG */ sub_523( "GA", "Not playing painkiller speech, failed random chance test.", 0 );
                            }
                        }
                        else
                        {
                             /* WRITESCRIPTLOG */ sub_523( "GA", "Not Playing painkiller speech, already played all 6 lines.", 0 );
                        }
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_523( "GA", "Not playing painkiller speech, not long enough since last dialogue.", 0 );
                    }
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_523( "GA", "Not playing painkiller speech, another speech is currently playing.", 0 );
                }
            }
            l_U95 = iVar3;
        }
        if ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_4201( l_U96 ))
        {
            if (NOT HAS_CUTSCENE_FINISHED())
            {
                 /* WRITESCRIPTLOG */ sub_523( "GA", "Killing painkiller speech for cutscene playing.", 0 );
                 /* KILL_SPEECH */ sub_4503( ref l_U96, 0 );
            }
        }
    }
    if (bParam0)
    {
         /* CREATETIMER */ sub_1789( ref l_U86, 20000, 1, 0 );
         /* STARTTIMER */ sub_1939( ref l_U86 );
    }
    return;
}

/* CREATETIMER */ void sub_1789(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_1939(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* IS_ANY_SPEECH_CURRENTLY_PLAYING */ void sub_2068()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

/* ISTIMERDONE */ int sub_2305(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_2572(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_2683(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_2953(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_2998( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_2998(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_3085( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_3085(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_3137( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_3655( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_3137(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_3655(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_4201(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_4244( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_4244(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* KILL_SPEECH */ void sub_4503(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_4244( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

/* IS_RESTART_ACTIVE */ void sub_4716()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_4776(int iParam0)
{
    iParam0 = 1;
    switch (l_U75)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_4858( ref l_U77 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
            {
                l_U76 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1789( ref l_U77, l_U76, 1, 1 );
             /* STARTTIMER */ sub_1939( ref l_U77 );
        }
        if ( /* ISTIMERDONE */ sub_2305( ref l_U77 ))
        {
             /* WRITESCRIPTLOG */ sub_523( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1043() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1043(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U75 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U75 = 2;
            }
            else
            {
                l_U75 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_523( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_5341();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_523( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_5341();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_4858(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_5341()
{
     /* WRITESCRIPTLOG */ sub_523( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_5416( ref l_U77 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1043() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1043(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U74 = 0;
    l_U74 = l_U74;
    l_U75 = 0;
    return;
}

/* RESETTIMER */ void sub_5416(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_6101(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_HC */ void sub_6228(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_CLEANUP_HC start", 0 );
    if (NOT bParam0)
    {
        if ((CUTSCENE_NAMED_IS_LOADING( l_U1332 )) || (CUTSCENE_IS_LOADED( l_U1332 )))
        {
             /* WRITESCRIPTLOG */ sub_523( "AT", "Purging loaded cutscene.", 0 );
            CLEAR_NAMED_CUTSCENE( l_U1332 );
        }
    }
    if ((CUTSCENE_NAMED_IS_LOADING( l_U1331 )) || (CUTSCENE_IS_LOADED( l_U1331 )))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "Purging loaded cutscene.", 0 );
        CLEAR_NAMED_CUTSCENE( l_U1331 );
    }
    if ((CUTSCENE_NAMED_IS_LOADING( "13_02_PP_concat" )) || (CUTSCENE_IS_LOADED( "13_02_PP_concat" )))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "Purging loaded cutscene.", 0 );
        CLEAR_NAMED_CUTSCENE( "13_02_PP_concat" );
    }
    if (NOT bParam0)
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "Disabling WALLA: S_POLICE_WZ_TRANSFER and AMBIENT: S_POLICE_ZONE_TRANSFER_GUNFIGHT", 0 );
        ENABLE_STATIC_EMITTER( "S_POLICE_SE_RIOT_ONE_SHOTS", 0 );
        ENABLE_STATIC_EMITTER( "S_POLICE_SE_RIOT_VO_ONE_SHOTS", 0 );
        ENABLE_WALLA_ZONE( "S_POLICE_WZ_TRANSFER", 0 );
        ENABLE_AMBIENT_ZONE( "S_POLICE_ZONE_TRANSFER_GUNFIGHT", 0 );
        ENABLE_AMBIENT_ZONE( "S_POLICE_ZONE_CELL_GUNFIGHT", 0 );
        ENABLE_WALLA_ZONE( "S_POLICE_WZ_CELLS", 0 );
        ENABLE_STATIC_EMITTER( "S_POLICE_SE_RIOT", 0 );
    }
    ISEQ_TERMINATE( 200386622 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6940( 200386622, ref g_U2662 );
    ISEQ_TERMINATE( 1616161192 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6940( 1616161192, ref g_U2662 );
    ISEQ_TERMINATE( -188983830 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6940( -188983830, ref g_U2662 );
    if (bParam0)
    {
         /* CLEANPEDARRAY */ sub_8066( ref g_U4304 );
    }
     /* CLEANPEDARRAY */ sub_8066( ref l_U290 );
     /* CLEANPEDARRAY */ sub_8066( ref l_U374 );
     /* CLEANPEDARRAY */ sub_8066( ref l_U477 );
     /* CLEANPEDARRAY */ sub_8066( ref l_U514 );
     /* CLEANPEDARRAY */ sub_8066( ref l_U563 );
     /* CLEANPED */ sub_8116( l_U758 );
     /* CLEANPEDARRAY */ sub_8066( ref l_U929 );
     /* CLEANPEDARRAY */ sub_8066( ref l_U986 );
     /* CLEANPED */ sub_8116( l_U1250 );
     /* CLEANOBJECT */ sub_8308( g_U4344 );
     /* CLEANPLACEMENTARRAY */ sub_8366( ref g_U4341 );
     /* CLEANOBJECT */ sub_8308( l_U300 );
     /* CLEANPLACEMENTARRAY */ sub_8366( ref l_U377 );
     /* CLEANPLACEMENT */ sub_8421( g_U649._fU0 );
     /* CLEANPLACEMENT */ sub_8421( g_U721._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U567._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U615._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( "tb_HC_3rdRowEntrance[0]" );
    GAMEPLAY_HELPER_BOX_DESTROY( "tb_HC_3rdRowEntrance[1]" );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U934._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( "tb_HC_4thRow[0]" );
    GAMEPLAY_HELPER_BOX_DESTROY( "tb_HC_4thRow[1]" );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1146._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1167._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1189._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1210._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1310._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1268._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1289._fU0 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_CLEANUP_HC end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_6940(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_7078( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_7078(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* CLEANPEDARRAY */ void sub_8066(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_8116( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_8116(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANOBJECT */ void sub_8308(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_8366(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_8421( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_8421(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_FORCE_SCENE_TO_LOAD */ void sub_8828(unknown uParam0)
{
    char[64] cVar3;
    unknown uVar19;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
    {
         /* TELEPORTPED */ sub_8904(  /* PLAYER_PED_ID */ sub_1005(), g_U2953[uParam0], g_U3083[uParam0] );
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1005(), 1 );
        if (NOT (IS_STRING_NULL( ref g_U1091[uParam0]._fU0 )))
        {
            StrCopy( ref cVar3, "Loading room: ", 64 );
            ConcatString(ref cVar3, ref g_U1091[uParam0]._fU0, 64);
            PRINTSTRING( ref cVar3 );
            PRINTNL();
            uVar19 = GET_INTERIOR_FROM_NAME( ref g_U1091[uParam0]._fU64, 0 );
            SET_INTERIOR_ACTIVE( uVar19, 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( uVar19, GET_HASH_KEY( ref g_U1091[uParam0]._fU0 ) );
        }
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1005(), 0 );
    }
    return;
}

/* TELEPORTPED */ void sub_8904(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_9341(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_523( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_9560( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_10724( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11038( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11517( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11038( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11517( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11038( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11517( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_11833( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11517( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_11833( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11517( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_12405( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_12607( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1005(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_9560(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_9622( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_9622(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_10724(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_11038(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_11442( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_11442(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_11517(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_11833(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_11442( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_12405(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_12607(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_9622( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_12705( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_12705(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_14023()
{
    int iVar2;
    int I;
    char[64] cVar4;

    iVar2 = l_U152;
    switch (l_U152)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_14229();
         /* P_SET_STATIC_DATA */ sub_14770();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U152 = 2;
         /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        g_U822[2] = 0;
         /* P_REQUEST_HC_PERSISTENT_ASSETS */ sub_18469();
         /* P_REQUEST_HC_NONPERSISTENT_ASSETS */ sub_25537();
        l_U152 = 3;
         /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_30153( ref g_U2662 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_29762( ref g_U2741 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_29360( ref g_U2613 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_28963( ref g_U2468 )))))
        {
            if ((NOT l_U106._fU0) AND (g_U820 == 2))
            {
                l_U152 = 4;
                 /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U152 = 6;
                 /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 4:
        l_U154 = 0;
        g_U842[2] = 1;
        if (NOT ( /* HAS_SAVEFILE_LOADED */ sub_30744( ref l_U106 )))
        {
            SET_PAYNEKILLER_AMT( 3 );
             /* F_GIVEPEDWEAPON */ sub_11833(  /* PLAYER_PED_ID */ sub_1005(), -862236369, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11038(  /* PLAYER_PED_ID */ sub_1005(), -862236369, 0, 200, 0 );
            l_U152 = 5;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U152 = 6;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1005(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1005(), 0, 0 ) )))
            {
                g_U821 = 2;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_31263( ref l_U106, g_U821,  /* PLAYER_PED_ID */ sub_1005(), g_U2953[2], g_U3083[2], g_U3127[2], g_U3171[2], 1 );
                l_U152 = 6;
                 /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 6:
        if (l_U153)
        {
            g_U822[2] = 1;
        }
        if (g_U842[2])
        {
            if (l_U154)
            {
                if (CUTSCENE_IS_LOADED( "13_02_PP_concat" ))
                {
                    l_U157 = 1;
                    l_U152 = 7;
                     /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_HANDLE_13_02_PP", 0 );
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_523( "GA", "Waiting for cutscene 13_02_PP_concat to load.", 0 );
                }
            }
            else if (NOT l_U157)
            {
                 /* P_DROP_PRE_RIOT_PRECINCT_STREAMHELPERS */ sub_36142();
                l_U157 = 1;
            }
            l_U152 = 7;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_HANDLE_13_02_PP", 0 );;
        }
        break;
        case 7:
        if (l_U153)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_44287( ref l_U158, "13_02_PP_concat", 36483, 38610, 40586, 40996, 41114, 43687, 250, 0 );
             /* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ sub_44837( ref l_U158, ref g_U1091[2]._fU64, ref g_U1091[2]._fU0 );
            l_U158._fU104 = 0;
            if (l_U154)
            {
                for ( I = 0; I < 2; I++ )
                {
                    if (NOT (DOES_PLACEMENT_EXIST( g_U4341[I] )))
                    {
                        StrCopy( ref cVar4, "Placement ", 64 );
                        ConcatString(ref cVar4, I, 64);
                        ConcatString(ref cVar4, " already picked up. Won't create on respawn.", 64);
                        l_U380[I] = 1;
                    }
                }
                l_U158._fU4 = 2;
                l_U298 = 1;
            }
            else
            {
                l_U158._fU4 = 7;
            }
             /* P_HC_CREATE_PAYNEKILLERS */ sub_45107();
             /* P_CREATE_S_POL_GG_MP_01 */ sub_45617();
             /* P_CREATE_S_POL_GG_RP_02 */ sub_46428();
            if (NOT (DOES_OBJECT_EXIST( g_U4344 )))
            {
                 /* P_HC_CREATE_OFFICE_FIRST_AID_BOX */ sub_46600();
            }
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_46835( ref l_U158 ))
        {
            RESET_FORCED_AIM_INTENTION_DIRECTION();
            RESET_FORCED_FORWARD_DIRECTION();
            if (g_U821 != 2)
            {
                g_U821 = 2;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_31263( ref l_U106, g_U821,  /* PLAYER_PED_ID */ sub_1005(), g_U2953[2], g_U3083[2], g_U3127[2], g_U3171[2], 1 );
            }
            l_U152 = 8;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_GAMEPLAY_HOLDING_CELLS", 0 );
        }
        break;
        case 8:
        if (l_U153)
        {
            l_U303 = 1;
             /* P_HC_SET_EXIT_DOOR_CLOSED */ sub_49208();
        }
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_49373( ref l_U514, -1054867456, 0, 1 );
         /* P_PED_Z_SAFETY_CHECK */ sub_49439( l_U758, -1054867456, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_49373( ref l_U929, -1054867456, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_49373( ref l_U986, -1054867456, 0, 1 );
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT l_U302))
        {
            if (( /* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ sub_49660(  /* PLAYER_PED_ID */ sub_1005(), g_U2953[2] )) > 3.00000000)
            {
                 /* WRITESCRIPTLOG */ sub_523( "GA", "Returning to Medium camera view mode.", 0 );
                SET_CAM_VIEW_MODE( 1 );
                l_U302 = 1;
            }
        }
        if ( /* F_HANDLE_EXECUTE_ENEMY_SPAWNING */ sub_49846())
        {
             /* P_HC_START_EXECUTE_GAMEPLAY */ sub_53119();
        }
        if (l_U588)
        {
             /* P_HC_HANDLE_VIG_01_PP_EVENTS */ sub_55888();
        }
        else if ((NOT l_U717) AND ((NOT (IS_PED_DEAD( l_U514[0] ))) AND (l_U591[0])))
        {
            if ( /* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ sub_60405( ref l_U514,  /* PLAYER_PED_ID */ sub_1005(), 1, 1, 1, 1, 1 ))
            {
                 /* KILL_SPEECH */ sub_4503( ref l_U647, 0 );
                 /* KILL_SPEECH */ sub_4503( ref l_U657, 0 );
                 /* KILL_SPEECH */ sub_4503( ref l_U667, 0 );
                 /* KILL_SPEECH */ sub_4503( ref l_U677, 0 );
                 /* KILL_SPEECH */ sub_4503( ref l_U687, 0 );
                 /* P_HC_VIG01_DIALOGUE_PLAYER_SPOTTED */ sub_60578();
                l_U717 = 1;
            }
        }
        if ((l_U485 == 4) AND (NOT l_U636))
        {
            if ( /* F_HAVE_VIG01_RIOTERS_ESCAPED_OR_DIED */ sub_60805())
            {
                 /* P_ALLOW_VIG01_UFE_TO_MOVE */ sub_61028();
                l_U636 = 1;
            }
        }
        if ((l_U595) || (l_U594))
        {
             /* P_HC_CLEANUP_ESCAPE_RIOTERS */ sub_61198();
        }
        if ( /* F_ISPLAYERINTRIGGERREGIONFIRSTTIME */ sub_61783( ref l_U759, 0 ))
        {
            ENABLE_STATIC_EMITTER( "S_POLICE_SE_RIOT_ONE_SHOTS", 0 );
            ENABLE_STATIC_EMITTER( "S_POLICE_SE_RIOT_VO_ONE_SHOTS", 0 );
            ENABLE_STATIC_EMITTER( "S_POLICE_SE_RIOT", 0 );
            ENABLE_WALLA_ZONE( "S_POLICE_WZ_CELLS", 0 );
            ENABLE_AMBIENT_ZONE( "S_POLICE_ZONE_CELL_GUNFIGHT", 0 );
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62293( ref l_U514 )) == 0)
            {
                if ((NOT l_U956) AND (NOT (DOES_PED_EXIST( l_U758 ))))
                {
                     /* WRITESCRIPTLOG */ sub_523( "AT", "Creating Shotgun Cop on line 2087.", 0 );
                     /* P_HC_CREATE_SHOTGUN_COP */ sub_59518( l_U719 );
                     /* P_HC_SHOTGUN_COP_COME_AROUND_CORNER */ sub_62497();
                    l_U933 = 1;
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_523( "GA", "Shotgun cop already exists, doing nothing.", 0 );
                }
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_523( "GA", "First enemies still alive, not spawning shotgun cop.", 0 );
                 /* P_HC_EXECUTE_COPS_SEARCH_FOR_PLAYER */ sub_62886();
                l_U932 = 1;
            }
        }
        if ((l_U591[1]) AND ((l_U591[0]) AND (NOT l_U932)))
        {
            l_U932 = 1;
        }
        if (l_U900 == 0)
        {
            if ( /* F_HC_ENEMIES_ENGAGED_SHOULD_START_4TH_ROW_ENEMIES */ sub_63986())
            {
                l_U900 = 1;
            }
        }
        if ((l_U900 != 4) AND (l_U900 != 0))
        {
             /* P_HC_START_FOURTH_ROW_ENEMIES */ sub_65109();
        }
        if ((NOT l_U956) AND (l_U955))
        {
             /* P_HC_BULLETCAM_FIRST_SET_OF_ENEMIES */ sub_65814();
        }
        if ((NOT l_U1136) AND (l_U955))
        {
            if ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62293( ref l_U929 )) == 0) AND ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62293( ref l_U514 )) == 0) AND (IS_PED_DEAD( l_U758 ))))
            {
                 /* WRITESCRIPTLOG */ sub_523( "GA", "All initial enemies dead.", 0 );
                 /* STARTTIMER */ sub_1939( ref l_U1137 );
                 /* P_HC_SET_EXIT_DOOR_OPEN */ sub_66326();
                l_U1188 = 1;
                l_U1136 = 1;
            }
        }
        if (l_U1136)
        {
            ;
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_52873( ref l_U1146, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_523( "GA", "Player reached fourth row of cells.", 0 );
             /* P_CLOSEDOOR */ sub_42158( ref g_U3680, 1 );
             /* P_SETDOORLOCKED */ sub_42987( ref g_U3680, 1 );
             /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_66623( "LEVEL_S_POLICE_CP_02", ref g_U2741 );
            if (NOT g_U862[3]._fU36)
            {
                g_U862[3]._fU36 = 1;
            }
        }
        if (l_U1136)
        {
            if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62293( ref l_U929 )) == 0) AND ((IS_PED_DEAD( l_U758 )) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62293( ref l_U514 )) == 0)))))
            {
                 /* WRITESCRIPTLOG */ sub_523( "AT", "Everyone is dead!", 0 );
                if (NOT l_U1188)
                {
                     /* P_HC_SET_EXIT_DOOR_OPEN */ sub_66326();
                    l_U1188 = 1;
                }
                if (HAS_EXPLORATION_ITEM_BEEN_FOUND( "sfav1_Dave1" ))
                {
                    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_61942( l_U1268 ))
                    {
                         /* WRITESCRIPTLOG */ sub_523( "AT", "Preloading Dave cutscene.", 0 );
                         /* LOADSEAMLESSCUTSCENE */ sub_28491( l_U1331, 0 );
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_523( "AT", "Preloading Exchange cutscene.", 0 );
                         /* LOADSEAMLESSCUTSCENE */ sub_28491( l_U1332, 0 );
                    }
                     /* P_STREAMREQ_MODELNAMES_INSERT */ sub_18643( 622633207, ref g_U2468 );
                     /* P_STREAMREQ_ISEQ_INSERT */ sub_25645( -188983830, ref g_U2662 );
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_523( "AT", "Preloading Exchange cutscene.", 0 );
                     /* STARTTIMER */ sub_1939( ref l_U1241 );
                     /* LOADSEAMLESSCUTSCENE */ sub_28491( l_U1332, 0 );
                }
                 /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_66623( "LEVEL_S_POLICE_CP_02", ref g_U2741 );
                if (NOT g_U862[3]._fU36)
                {
                    g_U862[3]._fU36 = 1;
                }
                l_U152 = 9;
                 /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_POST_COMBAT", 0 );
            }
        }
        break;
        case 9:
         /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1625( 0 );
        if (HAS_EXPLORATION_ITEM_BEEN_FOUND( "sfav1_Dave1" ))
        {
             /* P_HANDLE_CUTSCENE_PRELOADING */ sub_67513();
            if (NOT l_U1265)
            {
                if (( /* F_STREAMREQ_ISEQ_IS_ASSET_LOADED */ sub_68223( -188983830, ref g_U2662 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_ASSET_LOADED */ sub_68020( 622633207, ref g_U2468 )))
                {
                     /* P_CREATE_DAVE_THE_SEX_TOURIST */ sub_68493();
                     /* P_DAVE_SAY_SOMETHING */ sub_69353( l_U1402[l_U1410], ref l_U1410 );
                     /* STARTTIMER */ sub_1939( ref l_U1378 );
                     /* STARTTIMER */ sub_1939( ref l_U1360 );
                    l_U1265 = 1;
                }
            }
            else
            {
                 /* P_HANDLE_DAVE_HEADTRACKING */ sub_69530();
                 /* P_HANDLE_DAVE_AMBIENT_BEHAVIOR */ sub_69793();
                if (NOT l_U1266)
                {
                     /* P_PUT_DAVE_IN_NEW_NODE */ sub_68701( 58, 1 );
                    l_U1266 = 1;
                }
            }
            if (NOT l_U1267)
            {
                if ( /* F_CAN_DAVE_CUTSCENE_PLAY */ sub_70855())
                {
                    l_U1333._fU4 = 2;
                    l_U152 = 10;
                     /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_DAVE_THE_SEX_TOURIST_CUTSCENE", 0 );
                    l_U1267 = 1;
                    break;
                }
            }
        }
        if (( /* F_CAN_AMBIENT_SPEECH_PLAY */ sub_71125()) AND ((NOT l_U1472) AND ((NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2068())) AND ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_61942( l_U1268 ))) AND ((l_U1387._fU16) || ( /* ISTIMERDONE */ sub_2305( ref l_U1387 )))))))
        {
            if (NOT (IS_PED_DEAD( l_U1250 )))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_43927( "SPOL_MX2NDENC", ref l_U1462 );
            }
             /* STARTTIMER */ sub_1939( ref l_U1241 );
            l_U1472 = 1;
        }
        if (( /* F_CAN_AMBIENT_SPEECH_PLAY */ sub_71125()) AND ((NOT l_U1473) AND ((NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2068())) AND ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_61942( l_U1268 ))) AND ((l_U1241._fU16) || ( /* ISTIMERDONE */ sub_2305( ref l_U1241 )))))))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_43927( "SPOL_MXPRSON3", ref l_U1231 );
            l_U1473 = 1;
        }
        if ( /* CUTSYS_HANDLETRIGGERTYPEDOOR_NOHOLSTERING */ sub_71358( ref l_U1210, ref l_U1189, 0, 0 ))
        {
             /* CLEANPEDARRAY */ sub_8066( ref g_U4304 );
             /* CLEANPEDARRAY */ sub_8066( ref l_U290 );
             /* CLEANPEDARRAY */ sub_8066( ref l_U374 );
             /* CLEANPEDARRAY */ sub_8066( ref l_U477 );
             /* CLEANPEDARRAY */ sub_8066( ref l_U514 );
             /* CLEANPEDARRAY */ sub_8066( ref l_U563 );
             /* CLEANPED */ sub_8116( l_U758 );
             /* CLEANPEDARRAY */ sub_8066( ref l_U929 );
             /* CLEANPEDARRAY */ sub_8066( ref l_U986 );
             /* CLEANPED */ sub_8116( l_U1250 );
             /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_41543( -659929837, ref g_U2468 );
             /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_41543( 622633207, ref g_U2468 );
            ISEQ_TERMINATE( 200386622 );
             /* P_STREAMREQ_ISEQ_REMOVE */ sub_6940( 200386622, ref g_U2662 );
            ISEQ_TERMINATE( 1616161192 );
             /* P_STREAMREQ_ISEQ_REMOVE */ sub_6940( 1616161192, ref g_U2662 );
            ISEQ_TERMINATE( -188983830 );
             /* P_STREAMREQ_ISEQ_REMOVE */ sub_6940( -188983830, ref g_U2662 );
             /* KILL_SPEECH */ sub_4503( ref l_U1231, 0 );
             /* KILL_SPEECH */ sub_4503( ref l_U1421, 0 );
             /* KILL_SPEECH */ sub_4503( ref l_U1462, 0 );
            g_U842[3] = 1;
            l_U152 = 11;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 10:
        if (l_U153)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_44287( ref l_U1333, l_U1331, 71884, 71937, 72278, 72341, 72383, 73019, 250, 0 );
            AUDIO_MUSIC_SUSPEND( 6000 );
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_46835( ref l_U1333 ))
        {
            l_U152 = 9;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_POST_COMBAT", 0 );
        }
        break;
        case 11:
        if ((NOT HAS_CUTSCENE_FINISHED()) || (g_U821 == 3))
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U152 = 0;
             /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U152 != iVar2)
    {
        l_U153 = 1;
    }
    else
    {
        l_U153 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_14229()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U153 = 1;
    l_U188 = 0;
     /* CREATETIMER */ sub_1789( ref l_U189, l_U187, 1, 0 );
    l_U298 = 0;
    l_U299 = 0;
    l_U185 = 0;
    l_U301 = 0;
    l_U302 = 0;
    l_U955 = 0;
    l_U956 = 0;
    l_U1188 = 0;
    l_U303 = 0;
    l_U304 = 0;
    l_U345 = 0;
    l_U346 = 0;
    l_U383 = 0;
    l_U384 = 0;
    l_U485 = 0;
    l_U486 = 0;
    l_U588 = 0;
    l_U589 = 0;
    l_U590 = 0;
     /* CREATETIMER */ sub_1789( ref l_U596[0], 300, 1, 0 );
     /* CREATETIMER */ sub_1789( ref l_U596[1], 700, 1, 0 );
    l_U594 = 0;
    l_U595 = 0;
    l_U591[0] = 0;
    l_U591[1] = 0;
    l_U636 = 0;
    l_U717 = 0;
     /* CREATETIMER */ sub_1789( ref l_U1241, 10000, 1, 0 );
    l_U900 = 0;
    l_U901 = 0;
    l_U932 = 0;
    l_U933 = 0;
    l_U957 = 0;
    l_U958 = 0;
    l_U1136 = 0;
     /* CREATETIMER */ sub_1789( ref l_U1137, 30000, 1, 0 );
    l_U1264 = 0;
    l_U1265 = 0;
    l_U1266 = 0;
    l_U1267 = 0;
     /* CREATETIMER */ sub_1789( ref l_U1369, l_U1397, 1, 0 );
     /* CREATETIMER */ sub_1789( ref l_U1378, l_U1396, 1, 0 );
     /* CREATETIMER */ sub_1789( ref l_U1360, l_U1398, 1, 0 );
    l_U1401 = 0;
    l_U1410 = 0;
    l_U1414 = 0;
    l_U1420 = 0;
     /* CREATETIMER */ sub_1789( ref l_U1387, 8000, 1, 0 );
    l_U1472 = 0;
    l_U1473 = 0;
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_14770()
{
    unknown[2] uVar2;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;
    unknown[2] uVar45;
    unknown uVar48;
    unknown uVar49;
    unknown uVar50;
    unknown uVar51;
    unknown uVar52;
    unknown uVar53;
    unknown uVar54;
    unknown uVar55;
    unknown uVar56;
    unknown uVar57;
    unknown uVar58;
    unknown uVar59;
    unknown uVar60;
    unknown uVar61;
    unknown uVar62;
    unknown uVar63;
    unknown uVar64;
    unknown uVar65;
    unknown uVar66;
    unknown uVar67;
    unknown uVar68;
    unknown uVar69;
    unknown uVar70;
    unknown uVar71;
    unknown uVar72;
    unknown uVar73;
    unknown uVar74;
    unknown uVar75;
    unknown uVar76;
    unknown uVar77;
    unknown uVar78;
    unknown uVar79;
    unknown uVar80;
    unknown uVar81;
    unknown uVar82;
    unknown uVar83;
    unknown uVar84;
    unknown uVar85;
    unknown uVar86;
    unknown uVar87;

     /* WRITESCRIPTLOG */ sub_523( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U198[0], 33.11000000, 17.83000000, -3.30000000, 180.00000000, -1398796992, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U198[1], 32.24000000, 17.83000000, -3.30000000, 180.00000000, -53672766, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U198[2], 33.09000000, 19.16000000, -3.30000000, 180.00000000, 532745730, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U198[3], 32.42000000, 19.16000000, -3.30000000, 180.00000000, 1633518266, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U198[4], 31.45000000, 19.16000000, -3.30000000, 180.00000000, -163291156, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U198[5], 30.47000000, 19.16000000, -3.30000000, 180.00000000, -303698422, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U198[6], 29.60000000, 19.16000000, -3.30000000, 180.00000000, 1522329650, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U347[0], 14.69000000, 17.22000000, -3.30000000, 112.00000000, -448542747, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U347[1], 13.86000000, 14.78000000, -3.30000000, 24.00000000, -501021196, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U305[0], 16.83000000, 14.64000000, -3.30000000, 183.00000000, -1206811852, 6, 5, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U305[1], 17.68000000, 10.23000000, -3.30000000, 180.00000000, 1352021841, 6, 5, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U305[2], 19.82000000, 9.55000000, -3.30000000, 175.00000000, -1158969462, 6, 5, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U385[0], 17.06000000, 16.84000000, -3.30000000, 9.48384100, 572168482, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U385[1], 19.05000000, 12.08000000, -3.30000000, 89.48384000, 1640101219, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U385[2], 22.32000000, -6.37000000, -3.30000000, 90.00000000, 2061242101, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U385[3], 20.22000000, -25.92000000, -3.30000000, 180.00000000, 1304143620, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U385[4], 8.69000000, -32.65000000, -3.30000000, 133.00000000, -1549622262, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U385[5], 22.83000000, -42.36000000, -3.30000000, 145.00000000, -433177278, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U385[6], 23.55000000, -38.56000000, -3.30000000, 200.00000000, 937277961, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U523[0], 9.04500000, -16.15800000, -3.40000000, 0.00000000, 1691438664, 8, 4, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U523[1], 7.93500000, -16.07400000, -3.40000000, 0.00000000, -1463666401, 8, 4, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U523[2], 20.63000000, -26.98800000, -3.40000000, 90.00000000, -454570076, 8, 4, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U487[0], 9.01200000, -14.27400000, -3.40000000, 180.00000000, 882106512, 6, 5, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U487[1], 7.72400000, -14.45400000, -3.40000000, -90.00000000, 608151615, 6, 5, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U719, 11.10000000, -30.45000000, -3.40000000, -5.00000000, -1085449225, 6, 5, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U732, 11.10000000, -30.45000000, -3.40000000, -45.00000000, 438456424, 6, 5, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U745, 10.69000000, -30.14000000, -3.39000000, -90.00000000, 438456424, 6, 5, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U902[0], 15.21000000, -40.34000000, -3.39000000, 90.00000000, -69593558, 6, 5, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U902[1], 21.63000000, -38.44000000, -3.39000000, 90.00000000, 1297885321, 6, 5, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U959[0], 23.25000000, -37.59000000, -3.30000000, 180.00000000, -739099764, 6, 5, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U959[1], 25.11000000, -36.54000000, -3.30000000, 125.00000000, 793388892, 6, 5, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14875( ref l_U1251, 28.62500000, -29.22200000, -3.39000000, 90.00000000, -1258156585, 4, 6, 1, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_16424( ref l_U567, "tb_HC_EnterCells", 18.86000000, -2.69000000, -3.50000000, 5.49000000, 3.30000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16424( ref l_U615, "tb_ALLOW_UFE_TO_MOVE", 10.70000000, -15.34000000, -3.43000000, 7.40000000, 3.00000000, 3.03000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    array(ref uVar2, 2);
     /* P_CREATETRIGGERBOX */ sub_16424( ref uVar2[0], "tb_HC_3rdRowEntrance[0]", 23.12000000, -29.43000000, -3.50000000, 1.40000000, 3.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16424( ref uVar2[1], "tb_HC_3rdRowEntrance[1]", 15.46000000, -29.43000000, -3.50000000, 1.40000000, 3.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERREGION */ sub_16781( ref l_U759, ref uVar2 );
     /* P_CREATETRIGGERBOX */ sub_16424( ref l_U934, "tb_HC_Near4thRow", 8.48000000, -37.30000000, -3.40000000, 3.01000000, 9.23000000, 2.99000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    array(ref uVar45, 2);
     /* P_CREATETRIGGERBOX */ sub_16424( ref uVar45[0], "tb_HC_4thRow[0]", 14.70000000, -42.49000000, -3.40000000, 21.45000000, 9.04000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16424( ref uVar45[1], "tb_HC_4thRow[1]", 25.04000000, -35.15000000, -3.42000000, 6.02000000, 6.18000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERREGION */ sub_16781( ref l_U995, ref uVar45 );
     /* P_CREATETRIGGERBOX */ sub_16424( ref l_U1146, "TRIG_4THROW_ENTER", 9.07000000, -31.95000000, -1.94000000, 4.00000000, 3.00000000, 3.00000000, 90.00000000, 0.00000000, -180.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16424( ref l_U1167, "tb_HC_ExitDoorOuter", 26.09000000, -36.49000000, -3.49000000, 6.00000000, 4.00000000, 2.89000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16424( ref l_U1189, "tb_HC_TriggerCutsceneInner", 27.36000000, -36.53000000, -3.45000000, 1.47000000, 2.90000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16424( ref l_U1210, "tb_HC_TriggerCutsceneOuter", 25.63000000, -36.49000000, -3.45000000, 5.10000000, 4.00000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16424( ref l_U1310, "tb_HC_TriggerDaveCutscene", 28.12000000, -28.36000000, -3.41000000, 5.64000000, 6.87000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16424( ref l_U1268, "tb_HC_PreloadDaveCutscene", 22.33000000, -27.55000000, -3.41000000, 24.53000000, 8.81000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16424( ref l_U1289, "tb_HC_PreloadExchangeCutscene", 15.97000000, -39.75000000, -3.41000000, 24.53000000, 14.91000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    l_U1331 = "13_pp_random";
    l_U1332 = "MID_02_PP_concat";
    l_U1402[0] = "SPOL_PDAVERN1";
    l_U1402[1] = "SPOL_PDAVERN1";
    l_U1402[2] = "SPOL_PDAVERN1";
    l_U1402[3] = "SPOL_PDAVERN1";
    l_U1402[4] = "SPOL_13PPRNDA";
    l_U1402[5] = "SPOL_13PPRNDB";
    l_U1402[6] = "SPOL_13PPRNDC";
    l_U1411[0] = "SPOL_13PPRNDD";
    l_U1411[1] = "SPOL_13PPRNDE";
    l_U1415[0] = "SPOL_PDAVERN2";
    l_U1415[1] = "SPOL_PDAVERN2";
    l_U1415[2] = "SPOL_13PPRNDF";
    l_U1415[3] = "SPOL_13PPRNDG";
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_14875(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_16424(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETRIGGERREGION */ void sub_16781(int iParam0, unknown uParam1)
{
    int iVar4;
    int I;

    iVar4 = (uParam1^);
    if (iVar4 > 6)
    {
         /* WRITESCRIPTLOG */ sub_523( "[SA]", "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
        SCRIPT_ASSERT( "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
    }
    for ( I = 0; I < iVar4; I++ )
    {
        iParam0->_fU0[I] = {(uParam1^)[I]};
    }
    iParam0->_fU508 = iVar4;
    iParam0->_fU548 = 0;
    iParam0->_fU552 = 0;
    iParam0->_fU556 = 0;
    iParam0->_fU560 = 0;
    return;
}

/* P_REQUEST_HC_PERSISTENT_ASSETS */ void sub_18469()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_REQUEST_HC_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_18570( ref l_U142, ref g_U2468 );
    if ((l_U154) AND (g_U820 != 2))
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_18643( -1343904335, ref g_U2468 );
    }
    else
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_18643( 474775165, ref g_U2468 );
    }
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_21562( "LEVEL_S_POLICE_CP_02", ref g_U2741 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_21562( ref g_U3553, ref g_U2741 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_23458( ref l_U148, ref g_U2613 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_REQUEST_HC_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_18570(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_18643( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_18643(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_18710( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_18968( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_18710(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_18968( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_18968( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_18968( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20499( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_18968( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_18968( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_18968(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19029( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_19029(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_20499(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_21562(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_21614( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_21866( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_21614(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_21866( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_21866( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_21866( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20499( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_21866( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_21866( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_21866(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19029( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_23458(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_23532( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_23532(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_23586( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23847( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_23586(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23847( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23847( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23847( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20499( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23847( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23847( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_23847(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19029( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_HC_NONPERSISTENT_ASSETS */ void sub_25537()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_REQUEST_HC_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_25645( 200386622, ref g_U2662 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_25645( 1616161192, ref g_U2662 );
    if ((l_U154) AND (g_U820 != 2))
    {
         /* LOADSEAMLESSCUTSCENE */ sub_28491( "13_02_PP_concat", 0 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_REQUEST_HC_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_25645(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_25706( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25956( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_25706(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25956( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25956( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25956( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25956( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_20499( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_20499( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25956( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25956( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_25956(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19029( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_28491(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_28963(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_29360(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_29762(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_30153(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_30744(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_523( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_9341( uParam0,  /* PLAYER_PED_ID */ sub_1005() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_31263(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_523( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_523( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_12607( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_31554( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32031( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32031( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32291( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32031( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32291( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32291( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32031( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32291( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32291( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32291( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32031( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32291( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32291( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32291( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32291( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_33871( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_31554(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_9622( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_523( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_523( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_32031(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_32291(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_33871(int iParam0)
{
     /* WRITE_STRING */ sub_11442( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_33959( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_34036( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_34036( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_34036( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_34036( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_34036( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_34906( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU52 );
     /* WRITE_STRING */ sub_11442( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU96 );
     /* WRITE_STRING */ sub_11442( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU100 );
     /* WRITE_STRING */ sub_11442( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU104 );
     /* WRITE_STRING */ sub_11442( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU108 );
     /* WRITE_STRING */ sub_11442( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU112 );
     /* WRITE_STRING */ sub_11442( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU116 );
     /* WRITE_STRING */ sub_11442( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU120 );
     /* WRITE_STRING */ sub_11442( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU124 );
     /* WRITE_STRING */ sub_11442( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU128 );
     /* WRITE_STRING */ sub_11442( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_34205( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_34205( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_34205( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_33959(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_34036(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_34205(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_34906(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_DROP_PRE_RIOT_PRECINCT_STREAMHELPERS */ void sub_36142()
{
     /* WRITESCRIPTLOG */ sub_523( "CMT", "Removing pre-riot interiors...", 0 );
    SET_HELPER_ENABLED( "cs_13_01_B", 0, 0 );
    SET_HELPER_ENABLED( "cs_13_01_A", 0, 0 );
    SET_HELPER_ENABLED( "cs_13_01_C", 0, 0 );
    SET_HELPER_ENABLED( "MILO_cell_preriot_interior", 0, 1 );
    SET_HELPER_ENABLED( "exchange_pre_interior", 0, 1 );
    return;
}

/* F_HC_1302_PRECUTSCENESETUP */ int sub_36483()
{
    switch (l_U298)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_1302_Ped_Spawn = ENTITY_STATE_INIT", 0 );
        l_U299 = 0;
         /* P_HC_1302_CREATE_ANIMATED_DOOR */ sub_36609();
        l_U298 = 2;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_1302_Ped_Spawn = ENTITY_STATE_INIT", 0 );
        break;
        case 2:
        l_U290[l_U299] =  /* CREATEPED */ sub_37500( ref l_U198[l_U299] );
        if (l_U299 <= 1)
        {
             /* F_GIVEPEDWEAPON */ sub_11833( l_U290[l_U299], 1194438308, 25000, 0, 0 );
        }
        else
        {
             /* F_GIVEPEDWEAPON */ sub_11833( l_U290[l_U299], -862236369, 25000, 0, 0 );
        }
        if (NOT (IS_PED_DEAD( l_U290[l_U299] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U290[l_U299], 1 );
            SET_ROOM_FOR_PED_BY_NAME( l_U290[l_U299], ref g_U3229 );
        }
         /* P_DEACTIVATEPED */ sub_38373( l_U290[l_U299] );
        l_U299++;
        if (l_U299 >= 7)
        {
            l_U298 = 4;
             /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_1302_Ped_Spawn = ENTITY_STATE_COMPLETE", 0 );
        }
        break;
    }
    if (l_U298 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

/* P_HC_1302_CREATE_ANIMATED_DOOR */ void sub_36609()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_1302_CREATE_ANIMATED_DOOR start", 0 );
    l_U300 =  /* CREATEOBJECTNOOFFSET */ sub_36741( 142276123, 22.06400000, 7.30600000, -2.28400000, 0.00000000, 0.00000000, 130.12800000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U300 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U300, ref g_U3229 );
        SET_OBJECT_COLLISION( l_U300, 0 );
        FREEZE_OBJECT_POSITION( l_U300, 1 );
        SET_OBJECT_VISIBLE( l_U300, 0 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_1302_CREATE_ANIMATED_DOOR end", 0 );
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_36741(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_36874( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* LOADMODEL */ void sub_36874(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_11442( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* CREATEPED */ void sub_37500(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_36874( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_37991( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_38092( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_37991(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_38092(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_38373(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* P_HC_1302_CUTSCENEREGISTRATION */ void sub_38610()
{
    unknown uVar2;

     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_1302_CutsceneRegistration start", 0 );
     /* P_ACTIVATEPEDARRAY */ sub_38707( ref l_U290 );
     /* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ sub_38892( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
    {
        uVar2 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_39250();
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_PT92_Aa_H", 0 );
        }
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_1005(), g_U2953[2], g_U3083[2] );
    }
    if (NOT (IS_PED_DEAD( l_U290[0] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U290[0], "P_UFE_Sold_A", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U290[0], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_SB_Uzi_Aa_H", 0 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U290[1] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U290[1], "P_UFE_Sold_A^1", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U290[1], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_SB_Uzi_Aa_H^1", 0 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U290[2] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U290[2], "G_PP_Riot_A", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U290[2], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_Clt1911_Aa_H", 0 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U290[3] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U290[3], "G_PP_Riot_A^1", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U290[3], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_Clt1911_Aa_H^1", 0 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U290[4] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U290[4], "G_PP_Riot_A^2", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U290[4], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_Clt1911_Aa_H^2", 0 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U290[5] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U290[5], "G_PP_Riot_A^3", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U290[5], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_Clt1911_Aa_H^3", 0 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U290[6] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U290[6], "G_PP_Riot_A^4", 0 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U290[6], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_Clt1911_Aa_H^4", 0 );
        }
    }
    CUTSCENE_REGISTER_ISEQ( 1616161192 );
    ISEQ_REGISTER_ENTITY( 1616161192, "Max",  /* PLAYER_PED_ID */ sub_1005(), 0 );
    ISEQ_REGISTER_ENTITY( 1616161192, "Door", l_U300, 1 );
    REGISTER_HIDE_ENTITY_AT_POSITION( -1922472254, 17.27162000, 19.32072000, -2.29491000 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_1302_CutsceneRegistration end", 0 );
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_38707(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_38759( (uParam0^)[I] );
    }
    return;
}

/* P_ACTIVATEPED */ void sub_38759(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ void sub_38892(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )) == 0)
    {
        iVar3 = 0;
        uVar4 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1005(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 0)
        {
            iVar3 = 1;
        }
        if ((( /* IS_WEAPON_SINGLE_HANDED */ sub_39015( uVar4 )) == 0) AND ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1))
        {
            iVar3 = 1;
        }
        if (iVar3 == 1)
        {
            uVar5 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_39250();
            if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_1005(), uVar5, 0, uParam0 );
            }
        }
    }
    return;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_39015(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_39250()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1005(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_39015( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1005(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1005(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1005(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* P_HC_1302_HANDLECUTSCENE */ void sub_40586()
{
    if (l_U158._fU52)
    {
        if (IS_SCREEN_FADED_OUT())
        {
            DO_SCREEN_FADE_IN( 0 );
        }
        if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( g_U3589._fU0, g_U3589._fU4 ) ))
        {
            SET_OBJECT_VISIBLE( DOOR_FIND_CLOSEST( g_U3589._fU0, g_U3589._fU4 ), 0 );
        }
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
        if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1043() ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1005(), 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1043(), 1 );
        }
    }
    if (NOT l_U185)
    {
        if (GET_CUTSCENE_TIME_MS() > 33400)
        {
             /* WRITESCRIPTLOG */ sub_523( "GA", "Starting static emitter S_POLICE_SE_ALARM_INTERROGATION_02", 0 );
            ENABLE_STATIC_EMITTER( "S_POLICE_SE_ALARM_INTERROGATION_02", 1 );
            l_U185 = 1;
        }
    }
    SET_PED_VISIBLE( g_U4304[0], 0 );
    SET_PED_VISIBLE( g_U4304[1], 0 );
    SET_PED_VISIBLE( g_U4304[2], 0 );
    return;
}

/* F_HC_1302_POSTCUTSCENE */ int sub_40996()
{
     /* WRITESCRIPTLOG */ sub_523( "AT", "Preloading PRECINCT_ONESHOT_3.", 0 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "PRECINCT_ONESHOT_3", 0 );
    return 1;
}

/* P_HC_START_13_02_PP_BLENDOUT */ void sub_41114()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_START_13_02_PP_BLENDOUT start", 0 );
     /* CLEANPEDARRAY */ sub_8066( ref l_U290 );
     /* P_HC_DELETE_DEAD_BODIES_IN_WAY_OF_PLAYER_START */ sub_41212();
     /* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ sub_38892( 1 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_41543( -1343904335, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_INSERT */ sub_18643( 474775165, ref g_U2468 );
    if (NOT (DOES_OBJECT_EXIST( l_U300 )))
    {
         /* P_HC_1302_CREATE_ANIMATED_DOOR */ sub_36609();
    }
     /* P_HC_1302_SWAP_TO_ANIMATED_DOOR */ sub_42028();
    if (NOT (ISEQ_QUERY_STATE( 1616161192, 3 )))
    {
        ISEQ_REGISTER_ENTITY( 1616161192, "Max",  /* PLAYER_PED_ID */ sub_1005(), 0 );
        ISEQ_REGISTER_ENTITY( 1616161192, "Door", l_U300, 1 );
         /* TELEPORTPED */ sub_8904(  /* PLAYER_PED_ID */ sub_1005(), g_U2953[2], g_U3083[2] );
        ISEQ_START( 1616161192 );
    }
    ENABLE_WALLA_ZONE( "S_POLICE_WZ_CELLS", 1 );
    ENABLE_WALLA_ZONE( "S_POLICE_WZ_TRANSFER", 1 );
    ENABLE_AMBIENT_ZONE( "S_POLICE_ZONE_TRANSFER_GUNFIGHT", 1 );
    ENABLE_AMBIENT_ZONE( "S_POLICE_ZONE_CELL_GUNFIGHT", 1 );
    ENABLE_STATIC_EMITTER( "S_POLICE_SE_RIOT_ONE_SHOTS", 1 );
    ENABLE_STATIC_EMITTER( "S_POLICE_SE_RIOT_VO_ONE_SHOTS", 1 );
    ENABLE_STATIC_EMITTER( "S_POLICE_SE_RIOT", 1 );
    ENABLE_STATIC_EMITTER( "S_POLICE_SE_ALARM_INTERROGATION_02", 1 );
     /* P_SETDOORLOCKED */ sub_42987( ref g_U3596, 0 );
     /* P_OPENDOOR */ sub_43144( ref g_U3596, 1, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_43308( ref g_U3596, 1 );
     /* P_OPENDOOR */ sub_43144( ref g_U3603, 1, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_43308( ref g_U3603, 1 );
     /* P_OPENDOOR */ sub_43144( ref g_U3624, 1, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_43308( ref g_U3624, 1 );
     /* P_SETDOORLOCKED */ sub_42987( ref g_U3589, 0 );
    SET_CAM_VIEW_MODE( 0 );
    CAMERA_PLAY_ANIMATED( "LEVEL_S_POLICE_CP_02", "B_OUT_13_02_PP_CAM", 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0, 0 );
    SET_FORCED_AIM_INTENTION_DIRECTION( 0.07740500, -0.95602000, 0.13127000 );
    SET_FORCED_FORWARD_DIRECTION( -0.70710700, -0.70710700, 0.00000000 );
    SET_FREEZE_HEADING_BLEND( 10000 );
    SET_PED_VISIBLE( g_U4304[0], 1 );
    SET_PED_VISIBLE( g_U4304[1], 1 );
    SET_PED_VISIBLE( g_U4304[2], 1 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_START_13_02_PP_BLENDOUT end", 0 );
    return;
}

/* P_HC_DELETE_DEAD_BODIES_IN_WAY_OF_PLAYER_START */ void sub_41212()
{
    int I;

     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_DELETE_DEAD_BODIES_IN_WAY_OF_PLAYER_START start", 0 );
    for ( I = 0; I <= 2; I++ )
    {
        if ((IS_PED_DEAD( g_U4304[I] )) AND (DOES_PED_EXIST( g_U4304[I] )))
        {
            if ((GET_DISTANCE_BETWEEN_COORDS( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( g_U4304[I] ), g_U2953[2], 1 )) < 1.75000000)
            {
                 /* CLEANPED */ sub_8116( g_U4304[I] );
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_DELETE_DEAD_BODIES_IN_WAY_OF_PLAYER_START end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_41543(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_7078( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_HC_1302_SWAP_TO_ANIMATED_DOOR */ void sub_42028()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_1302_SWAP_TO_ANIMATED_DOOR start", 0 );
    if (DOES_OBJECT_EXIST( l_U300 ))
    {
        SET_OBJECT_VISIBLE( l_U300, 1 );
    }
     /* P_CLOSEDOOR */ sub_42158( ref g_U3589, 1 );
    if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( g_U3589._fU0, g_U3589._fU4 ) ))
    {
         /* WRITESCRIPTLOG */ sub_523( "GA", "Hiding art door for animated door.", 0 );
        SET_OBJECT_VISIBLE( DOOR_FIND_CLOSEST( g_U3589._fU0, g_U3589._fU4 ), 0 );
        l_U301 = 1;
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_1302_SWAP_TO_ANIMATED_DOOR end", 0 );
    return;
}

/* P_CLOSEDOOR */ void sub_42158(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_42184( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_42268( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_42184(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_42268(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORLOCKED */ void sub_42987(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_42184( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_42268( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* P_OPENDOOR */ void sub_43144(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if (( /* F_DOESDOOREXIST */ sub_42184( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_42268( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

/* P_SETDOORLATCH */ void sub_43308(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_42184( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_42268( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* F_HC_HANDLE_13_02_PP_BLENDOUT */ int sub_43687()
{
    if (l_U158._fU52)
    {
        DO_SCREEN_FADE_IN( 0 );
    }
    if (NOT l_U301)
    {
        if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( g_U3589._fU0, g_U3589._fU4 ) ))
        {
             /* WRITESCRIPTLOG */ sub_523( "GA", "Hiding art door for animated door.", 0 );
            SET_OBJECT_VISIBLE( DOOR_FIND_CLOSEST( g_U3589._fU0, g_U3589._fU4 ), 0 );
            l_U301 = 1;
        }
    }
    if (CAMERA_ANIMATED_CURRENT_TIME() > 1000)
    {
        if (NOT l_U718)
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_43927( "SPOL_MXPRSON2", ref l_U707 );
            l_U718 = 1;
        }
    }
    if (CAMERA_ANIMATED_CURRENT_TIME() > l_U186)
    {
        if (NOT l_U188)
        {
             /* WRITESCRIPTLOG */ sub_523( "AT", "Stopping animated blendout camera.", 0 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U3127[2], 0, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U3171[2], 0, 0 );
            CAMERA_ANIMATED_STOP( l_U187, 1 );
            l_U188 = 1;
        }
    }
    if (((l_U188) AND (ISEQ_QUERY_ENTITY_STATE( 1616161192, "Max", 6 ))) || (ISEQ_QUERY_ENTITY_STATE( 1616161192, "Max", 5 )))
    {
         /* P_CLOSEDOOR */ sub_42158( ref g_U3589, 1 );
        SET_OBJECT_VISIBLE( DOOR_FIND_CLOSEST( g_U3589._fU0, g_U3589._fU4 ), 1 );
         /* CLEANOBJECT */ sub_8308( l_U300 );
        return 1;
    }
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_43927(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2572( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 0,  /* PLAYER_PED_ID */ sub_1005(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 1,  /* PLAYER_PED_ID */ sub_1005(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_2953( uParam0, uParam1, 8, 1 );
    return;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_44287(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_523( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_44511( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 44408, 44458, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_44408()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_44458()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_44511(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ void sub_44837(int iParam0, unknown uParam1, unknown uParam2)
{
    iParam0->_fU68 = 1;
    iParam0->_fU72 = 1;
    iParam0->_fU76 = uParam1;
    iParam0->_fU80 = uParam2;
    iParam0->_fU24 = 1;
    return;
}

/* P_HC_CREATE_PAYNEKILLERS */ void sub_45107()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_CREATE_PAYNEKILLERS start", 0 );
    if ((NOT (DOES_PLACEMENT_EXIST( g_U4341[0] ))) AND (NOT l_U380[0]))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "Creating puiIntHoldingCellsPainkillers[0]", 0 );
        g_U4341[0] =  /* CREATEPLACEMENT */ sub_45299( -4072149, g_U4351, g_U4354, 1, 0, 1, 40.00000000 );
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U4341[0], ref g_U3229 );
    }
    l_U377[0] =  /* CREATEPLACEMENT */ sub_45299( -4072149, 18.42000000, -42.50000000, -2.38500000, 0, 0, 0.20000000, 1, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U377[0], ref g_U3237 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_CREATE_PAYNEKILLERS end", 0 );
    return;
}

/* CREATEPLACEMENT */ void sub_45299(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_CREATE_S_POL_GG_MP_01 */ void sub_45617()
{
     /* WRITESCRIPTLOG */ sub_523( "CO", "P_CREATE_S_POL_GG_MP_01", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_45749( ref g_U649, g_U811, 1451986437, -5646194, 23.31000000, -4.99000000, -2.42000000, 1.50000000, 0.00000000, 1.00000000, "cells" );
     /* P_CREATECOLLECTIBLE */ sub_45906( ref g_U649 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_45749(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_523( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_45906(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_523( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_45989( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_523( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_523( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_45989( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_8421( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_45299( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_523( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_523( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_45989(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_CREATE_S_POL_GG_RP_02 */ void sub_46428()
{
     /* WRITESCRIPTLOG */ sub_523( "CO", "P_CREATE_S_POL_GG_G6_02", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_45749( ref g_U721, g_U815, 1269757309, -1250195784, 6.27000000, -5.82000000, -3.43000000, 1.50000000, 0.00000000, 5.00000000, "cells" );
     /* P_CREATECOLLECTIBLE */ sub_45906( ref g_U721 );
    return;
}

/* P_HC_CREATE_OFFICE_FIRST_AID_BOX */ void sub_46600()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_CREATE_OFFICE_FIRST_AID_BOX start", 0 );
    g_U4344 =  /* CREATEOBJECTNOOFFSET */ sub_36741( -36467684, g_U4345, g_U4348, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4344 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U4344, ref g_U3229 );
        FREEZE_OBJECT_POSITION( g_U4344, 1 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_CREATE_OFFICE_FIRST_AID_BOX end", 0 );
    return;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_46835(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_523( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_523( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_523( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_523( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_523( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_523( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_28491( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_523( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_47726( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_47726( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_523( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_48270( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_47726( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_48650( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_48650( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* NIS_PRE_SETUP */ void sub_47726(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1043(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1005(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1005() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1005(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_48270(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1005(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1005(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1005(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1005(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1005(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_48650(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1043(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1005(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_48748();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_48748()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1005(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1005(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1005(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1005(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_HC_SET_EXIT_DOOR_CLOSED */ void sub_49208()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_SET_EXIT_DOOR_CLOSED start", 0 );
     /* P_CLOSEDOOR */ sub_42158( ref g_U3687, 1 );
     /* P_SETDOORLOCKED */ sub_42987( ref g_U3687, 1 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_SET_EXIT_DOOR_CLOSED end", 0 );
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_49373(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_49439( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_49439(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_8116( uParam0 );
            }
        }
    }
    return;
}

/* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ void sub_49660(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    else
    {
        return -1.00000000;
    }
    return VDIST( uVar6, uParam1 );
}

/* F_HANDLE_EXECUTE_ENEMY_SPAWNING */ int sub_49846()
{
    if ((l_U303 != 4) AND (l_U303 != 0))
    {
         /* P_HC_CREATE_WAITING_AREA_DEAD_COPS */ sub_49910();
    }
    if ((l_U303 > 2) AND (l_U383 == 0))
    {
        l_U383 = 1;
    }
    if ((l_U383 != 4) AND (l_U383 != 0))
    {
         /* P_HC_CREATE_DEAD_BODIES */ sub_51683();
    }
    if ((l_U383 > 2) AND (l_U345 == 0))
    {
        l_U345 = 1;
    }
    if ((l_U345 != 4) AND (l_U345 != 0))
    {
         /* P_HC_CREATE_UNCONCIOUS_INTEROGATORS */ sub_52315();
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_52873( ref l_U567, 0 ))
    {
        l_U485 = 1;
    }
    if ((l_U485 != 4) AND (l_U485 != 0))
    {
        return 1;
    }
    return 0;
}

/* P_HC_CREATE_WAITING_AREA_DEAD_COPS */ void sub_49910()
{
    int[3] iVar2;

    array(ref iVar2, 3);
    iVar2[0] = 0;
    iVar2[1] = 3;
    iVar2[2] = 11;
    switch (l_U303)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_SpawnWaitAreaCops = ENTITY_STATE_INIT", 0 );
        l_U304 = 0;
        l_U303 = 2;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_SpawnWaitAreaCops = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        if (NOT (DOES_PED_EXIST( g_U4304[l_U304] )))
        {
            g_U4304[l_U304] =  /* CREATEPED */ sub_37500( ref l_U305[l_U304] );
            if (NOT (IS_PED_DEAD( g_U4304[l_U304] )))
            {
                SET_ROOM_FOR_PED_BY_NAME( g_U4304[l_U304], ref g_U3229 );
                 /* P_CREATE_DEAD_BODY */ sub_50270( g_U4304[l_U304], iVar2[l_U304] );
            }
            l_U304++;
        }
        else
        {
            l_U304++;
            if (l_U304 < 3)
            {
                 /* P_HC_CREATE_WAITING_AREA_DEAD_COPS */ sub_49910();
            }
        }
        if (l_U304 >= 3)
        {
            l_U303 = 3;
             /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_SpawnWaitAreaCops = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_51376( ref g_U4304, "pi_IR_WaitAreaCops" );
        l_U303 = 4;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_SpawnWaitAreaCops = ENTITY_STATE_COMPLETE", 0 );
        break;
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_CREATE_WAITING_AREA_DEAD_COPS end", 0 );
    return;
}

/* P_CREATE_DEAD_BODY */ void sub_50270(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
         /* WRITE_STRING */ sub_11442( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_51376(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_HC_CREATE_DEAD_BODIES */ void sub_51683()
{
    int[7] iVar2;

    array(ref iVar2, 7);
    iVar2[0] = 11;
    iVar2[1] = 12;
    iVar2[2] = 0;
    iVar2[3] = 7;
    iVar2[4] = 3;
    iVar2[5] = 8;
    iVar2[6] = 9;
    switch (l_U383)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_DeadBodySpawn = ENTITY_STATE_INIT", 0 );
        l_U384 = 0;
        l_U383 = 2;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_DeadBodySpawn = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        l_U477[l_U384] =  /* CREATEPED */ sub_37500( ref l_U385[l_U384] );
        if (NOT (IS_PED_DEAD( l_U477[l_U384] )))
        {
            if (l_U384 <= 1)
            {
                SET_ROOM_FOR_PED_BY_NAME( l_U477[l_U384], ref g_U3229 );
            }
            else
            {
                SET_ROOM_FOR_PED_BY_NAME( l_U477[l_U384], ref g_U3237 );
            }
             /* P_CREATE_DEAD_BODY */ sub_50270( l_U477[l_U384], iVar2[l_U384] );
        }
        l_U384++;
        if (l_U384 >= 7)
        {
            l_U383 = 3;
             /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_DeadBodySpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_51376( ref l_U477, "pi_HC_DeadBody" );
        l_U383 = 4;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_DeadBodySpawn = ENTITY_STATE_COMPLETE", 0 );
        break;
    }
    return;
}

/* P_HC_CREATE_UNCONCIOUS_INTEROGATORS */ void sub_52315()
{
    switch (l_U345)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_SpawnUnconciousCop = ENTITY_STATE_INIT", 0 );
        l_U346 = 0;
        l_U345 = 2;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_SpawnUnconciousCop = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        l_U374[l_U346] =  /* CREATEPED */ sub_37500( ref l_U347[l_U346] );
        if (NOT (IS_PED_DEAD( l_U374[l_U346] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U374[l_U346], ref g_U3229 );
            DAMAGE_DECALS_ON_PED( l_U374[l_U346], 0.50000000 );
             /* P_CREATE_DEAD_BODY */ sub_50270( l_U374[l_U346], 0 );
        }
        l_U346++;
        if (l_U346 >= 2)
        {
            l_U345 = 3;
             /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_SpawnUnconciousCop = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_51376( ref l_U374, "pi_HC_UnconciousCop" );
        l_U345 = 4;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_SpawnUnconciousCop = ENTITY_STATE_COMPLETE", 0 );
        break;
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_52873(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_52949(  /* PLAYER_PED_ID */ sub_1005(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* F_ISPEDINTRIGGERBOX */ int sub_52949(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_HC_START_EXECUTE_GAMEPLAY */ void sub_53119()
{
    int iVar2;

    switch (l_U485)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_ExecuteSpawn = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_53256( ref l_U517, 1056964608, 0 );
        l_U486 = 0;
        l_U485 = 2;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_ExecuteSpawn = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        if (l_U486 < 2)
        {
            l_U514[l_U486] =  /* CREATEPED */ sub_37500( ref l_U487[l_U486] );
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_53769( l_U514[l_U486], ref l_U517 );
             /* F_GIVEPEDWEAPON */ sub_11833( l_U514[l_U486], -862236369, 25000, 0, 0 );
            if (NOT (IS_PED_DEAD( l_U514[l_U486] )))
            {
                SET_ROOM_FOR_PED_BY_NAME( l_U514[l_U486], ref g_U3237 );
                SET_PED_ONLY_DAMAGED_BY_PLAYER( l_U514[l_U486], 1 );
                SET_PED_AI_TEMPLATE( l_U514[l_U486], "AIT_EXPERT" );
                if (l_U486 == 0)
                {
                    SET_PED_ALERTNESS( l_U514[l_U486], 2 );
                }
                else
                {
                    SET_PED_ALERTNESS( l_U514[l_U486], 3 );
                }
                SET_PED_COMBAT_MOVEMENT( l_U514[l_U486], 0 );
                SET_PED_COMBAT_ATTRIBUTES( l_U514[l_U486], 65536, 1 );
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U514[l_U486], 0 );
            }
        }
        else
        {
            iVar2 = l_U486 - 2;
            l_U563[iVar2] =  /* CREATEPED */ sub_37500( ref l_U523[iVar2] );
            if (NOT (IS_PED_DEAD( l_U563[iVar2] )))
            {
                SET_ROOM_FOR_PED_BY_NAME( l_U563[iVar2], ref g_U3237 );
                SET_PED_AS_ONE_SHOT_KILL( l_U563[iVar2], 1 );
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U563[iVar2], 1 );
                SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( l_U563[iVar2], 1 );
                SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( l_U563[iVar2], 0 );
                SET_PED_RESIST_TO_OBJECT_COLLISION( l_U563[iVar2], 1 );
                "[doubled result, dropped if not asigned]";
                "[doubled result, dropped if not asigned]";
                SET_COLLISION_BETWEEN_PEDS( l_U563[iVar2], 0 );
                if ((IS_JAPANESE_GAME()) || (IS_GERMAN_VERSION()))
                {
                    SET_PED_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP( l_U563[iVar2], 0, 0 );
                    SET_PED_GORE_FROM_PLAYER( l_U563[iVar2], 0 );
                }
            }
        }
        l_U486++;
        if (l_U486 >= 5)
        {
            l_U485 = 3;
             /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_ExecuteSpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_51376( ref l_U514, "pi_HC_ExecuteCop" );
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_51376( ref l_U563, "pi_HC_ExecutePrisoner" );
        ISEQ_REGISTER_ENTITY( 200386622, "HC_VIG_01_UFE1", l_U514[0], 0 );
        ISEQ_REGISTER_ENTITY( 200386622, "HC_VIG_01_UFE2", l_U514[1], 0 );
        ISEQ_REGISTER_ENTITY( 200386622, "HC_VIG_01_RIOTER1", l_U563[0], 0 );
        ISEQ_REGISTER_ENTITY( 200386622, "HC_VIG_01_RIOTER2", l_U563[1], 0 );
        ISEQ_REGISTER_ENTITY( 200386622, "HC_VIG_01_RIOTER3", l_U563[2], 0 );
         /* TELEPORTPED */ sub_8904( l_U514[0], l_U487[0]._fU0, l_U487[0]._fU12 );
         /* TELEPORTPED */ sub_8904( l_U514[1], l_U487[1]._fU0, l_U487[1]._fU12 );
         /* TELEPORTPED */ sub_8904( l_U563[0], l_U523[0]._fU0, l_U523[0]._fU12 );
         /* TELEPORTPED */ sub_8904( l_U563[1], l_U523[1]._fU0, l_U523[1]._fU12 );
         /* TELEPORTPED */ sub_8904( l_U563[2], l_U523[2]._fU0, l_U523[2]._fU12 );
        ISEQ_START( 200386622 );
         /* P_HC_VIG01_START_DIALOGUE */ sub_55185();
         /* WRITESCRIPTLOG */ sub_523( "AT", "Seting Music to PRECINCT_FINAL mood PRECINCT_01_1_2", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_2", 0, 0, -1, -1, -1082130432, 0 );
        l_U588 = 1;
        l_U485 = 4;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_ExecuteSpawn = ENTITY_STATE_COMPLETE", 0 );
        break;
    }
    return;
}

/* P_SETUP_AI_GROUP */ void sub_53256(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_53769(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_11442( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_53256( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_53256( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_HC_VIG01_START_DIALOGUE */ void sub_55185()
{
    char[12] cVar2;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;

     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_VIG01_START_DIALOGUE start", 0 );
    array(ref cVar2, 2);
    StrCopy( ref cVar2[0], "SPOL_VIG01A", 16 );
    StrCopy( ref cVar2[1], "SPOL_VIG01B", 16 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2572( ref l_U647 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 1, l_U514[1], "M13_UFE_11_AVG", ref l_U647, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 2, l_U563[1], "M13_RPP_6A_AVG", ref l_U647, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 3, l_U563[0], "M13_RPP_6B_AVG", ref l_U647, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 4, l_U514[0], "M13_UFE_12_AVG", ref l_U647, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 0,  /* PLAYER_PED_ID */ sub_1005(), "MAX", ref l_U647, 2, 0 );
     /* PLAY_MULTIPLE_SPEECH */ sub_55499( ref cVar2, ref l_U647, 8, 1 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_VIG01_START_DIALOGUE end", 0 );
    return;
}

/* PLAY_MULTIPLE_SPEECH */ void sub_55499(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_MULTIPLE_SPEECH_FROM_BLOCK */ sub_55546( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_MULTIPLE_SPEECH_FROM_BLOCK */ void sub_55546(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;

    StrCopy( ref cVar7, uParam1, 16 );
    return  /* PLAYSPEECHMAIN */ sub_3085( uParam0, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* P_HC_HANDLE_VIG_01_PP_EVENTS */ void sub_55888()
{
    int I;
    unknown uVar3;
    unknown uVar4;

    if (NOT l_U589)
    {
        for ( I = 0; I <= 2; I++ )
        {
            if (NOT (IS_PED_DEAD( l_U563[I] )))
            {
                if ((PED_GET_ACTION_INTENTION_STATUS( l_U563[I], 48 )) == 1)
                {
                    PRINTSTRING( "Force Dead Rioter " );
                     /* WRITE_INT */ sub_34205( I );
                     /* P_KILL_PED */ sub_56044( l_U563[I] );
                }
            }
        }
        if (NOT (IS_PED_DEAD( l_U514[1] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U514[1], 39 )) == 3)
            {
                 /* P_HC_VIG01_DIALOGUE_VIG01_MOVE */ sub_56179();
                PED_FINISH_ACTION_INTENTION( l_U514[1], 39 );
            }
        }
        if (NOT (IS_PED_DEAD( l_U563[2] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U563[2], 49 )) == 1)
            {
                 /* WRITE_STRING */ sub_11442( "Starting PT2 of VIG_01_PP_ALT1" );
                CLEAR_PED_TASKS( l_U514[0] );
                CLEAR_PED_TASKS( l_U514[1] );
                l_U589 = 1;
            }
        }
    }
    else if (NOT (IS_PED_DEAD( l_U563[2] )))
    {
        if ((PED_GET_ACTION_INTENTION_STATUS( l_U563[2], 40 )) == 3)
        {
             /* P_HC_VIG01_PT2_DIALOGUE_START */ sub_56612();
            PED_FINISH_ACTION_INTENTION( l_U563[2], 40 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U514[0] )))
    {
        if ((PED_GET_ACTION_INTENTION_STATUS( l_U514[0], 41 )) == 3)
        {
             /* P_HC_VIG01_PT2_DIALOGUE_THIS_WAY */ sub_56916();
            PED_FINISH_ACTION_INTENTION( l_U514[0], 41 );
        }
    }
    if (NOT l_U590)
    {
        if ((NOT (IS_PED_DEAD( l_U514[0] ))) AND (NOT l_U591[0]))
        {
            if ((ISEQ_QUERY_ENTITY_STATE( 200386622, "HC_VIG_01_UFE1", 5 )) || (ISEQ_QUERY_ENTITY_STATE( 200386622, "HC_VIG_01_UFE1", 6 )))
            {
                 /* WRITESCRIPTLOG */ sub_523( "GA", "VIG_01_PP UFE 1 completed path.", 0 );
                OPEN_SEQUENCE_TASK( ref uVar3 );
                TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
                TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 20.46000000, -39.63000000, -3.30000000, 2, -1, 0.50000000, 0, 0 );
                TASK_ACHIEVE_HEADING( 0, 90.00000000, 0, 1085905306 );
                CLOSE_SEQUENCE_TASK( uVar3 );
                TASK_PERFORM_SEQUENCE( l_U514[0], uVar3 );
                CLEAR_SEQUENCE_TASK( uVar3 );
                 /* P_HC_VIG01_DIALOGUE_WAIT_FOR_PLAYER */ sub_57440();
                l_U591[0] = 1;
            }
        }
        if ((NOT (IS_PED_DEAD( l_U514[1] ))) AND (NOT l_U591[1]))
        {
            if ((ISEQ_QUERY_ENTITY_STATE( 200386622, "HC_VIG_01_UFE2", 5 )) || (ISEQ_QUERY_ENTITY_STATE( 200386622, "HC_VIG_01_UFE2", 6 )))
            {
                 /* WRITESCRIPTLOG */ sub_523( "GA", "VIG_01_PP UFE 2 completed path.", 0 );
                OPEN_SEQUENCE_TASK( ref uVar4 );
                TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
                TASK_ACHIEVE_HEADING( 0, 180.00000000, 0, 1085905306 );
                TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 13.14000000, -39.08000000, -3.30000000, 2, -1, 0.50000000, 0, 0 );
                TASK_ACHIEVE_HEADING( 0, 90.00000000, 0, 1085905306 );
                CLOSE_SEQUENCE_TASK( uVar4 );
                TASK_PERFORM_SEQUENCE( l_U514[1], uVar4 );
                CLEAR_SEQUENCE_TASK( uVar4 );
                l_U591[1] = 1;
            }
        }
    }
    if (NOT l_U590)
    {
        if ( /* F_HC_VIG_01_PP_IS_PLAYER_SPOTTED */ sub_57992())
        {
             /* WRITESCRIPTLOG */ sub_523( "GA", "UFE Spotted player during VIG_01_PP", 0 );
             /* WRITESCRIPTLOG */ sub_523( "AT", "Playing music one shot PRECINCT_ONESHOT_3", 0 );
            AUDIO_MUSIC_PLAY_ONESHOT();
             /* WRITESCRIPTLOG */ sub_523( "AT", "Fade music to PRECINCT_FINAL mood PRECINCT_01_1_2_3 over 6000 miliseconds", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_2_3", "", 0, 6000, -1, -1082130432, 0 );
            for ( I = 0; I <= 2; I++ )
            {
                if (NOT (IS_PED_DEAD( l_U563[I] )))
                {
                    SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( l_U563[I], 1 );
                    PED_SET_ACTION_INTENTION( l_U563[I], 47, 1000, 0.00000000, 0.00000000, 0.00000000 );
                }
            }
            for ( I = 0; I <= 1; I++ )
            {
                if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT (IS_PED_DEAD( l_U514[I] ))))
                {
                    REGISTER_TARGET( l_U514[I],  /* PLAYER_PED_ID */ sub_1005() );
                }
            }
            if (NOT l_U589)
            {
                ISEQ_UNREGISTER_ENTITY( 200386622, "HC_VIG_01_RIOTER3" );
                 /* CLEANPED */ sub_8116( l_U563[2] );
            }
            if (NOT l_U589)
            {
                if ((NOT (IS_PED_DEAD( l_U563[1] ))) || (NOT (IS_PED_DEAD( l_U563[0] ))))
                {
                     /* WRITESCRIPTLOG */ sub_523( "AT", "Creating Shotgun Cop on line 1494.", 0 );
                     /* P_HC_CREATE_SHOTGUN_COP */ sub_59518( l_U732 );
                    l_U594 = 1;
                }
            }
            else if (NOT (IS_PED_DEAD( l_U563[2] )))
            {
                 /* WRITESCRIPTLOG */ sub_523( "AT", "Creating Shotgun Cop on line 1499.", 0 );
                 /* P_HC_CREATE_SHOTGUN_COP */ sub_59518( l_U745 );
                l_U595 = 1;
            }
             /* STARTTIMER */ sub_1939( ref l_U596[0] );
             /* STARTTIMER */ sub_1939( ref l_U596[1] );
             /* KILL_SPEECH */ sub_4503( ref l_U647, 0 );
             /* KILL_SPEECH */ sub_4503( ref l_U657, 1 );
             /* KILL_SPEECH */ sub_4503( ref l_U667, 1 );
             /* KILL_SPEECH */ sub_4503( ref l_U677, 1 );
            l_U590 = 1;
        }
    }
    else
    {
        for ( I = 0; I <= 1; I++ )
        {
            if (( /* ISTIMERDONE */ sub_2305( ref l_U596[I] )) AND (NOT l_U591[I]))
            {
                 /* P_HC_VIG01_PP_REACT_PLAYER */ sub_60031( I );
            }
        }
    }
    if (((l_U591[1]) AND (l_U591[0])) || (ISEQ_QUERY_STATE( 200386622, 6 )))
    {
         /* WRITESCRIPTLOG */ sub_523( "GA", "VIG_01_PP Complete.", 0 );
         /* P_STREAMREQ_ISEQ_REMOVE */ sub_6940( 200386622, ref g_U2662 );
        l_U588 = 0;
    }
    return;
}

/* P_KILL_PED */ void sub_56044(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* P_HC_VIG01_DIALOGUE_VIG01_MOVE */ void sub_56179()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_VIG01_DIALOGUE_VIG01_Move start", 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2572( ref l_U657 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 1, l_U514[1], "M13_UFE_11_AVG", ref l_U657, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 0,  /* PLAYER_PED_ID */ sub_1005(), "MAX", ref l_U657, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_2953( "SPOL_VIG01C", ref l_U657, 8, 1 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_VIG01_DIALOGUE_VIG01_Move end", 0 );
    return;
}

/* P_HC_VIG01_PT2_DIALOGUE_START */ void sub_56612()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_VIG01_PT2_DIALOGUE_START start", 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2572( ref l_U667 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 0,  /* PLAYER_PED_ID */ sub_1005(), "MAX", ref l_U667, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 1, l_U563[2], "M13_RPP_6C_AVG", ref l_U667, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_2953( "SPOL_ALT2A", ref l_U667, 4, 1 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_VIG01_PT2_DIALOGUE_START end", 0 );
    return;
}

/* P_HC_VIG01_PT2_DIALOGUE_THIS_WAY */ void sub_56916()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_VIG01_PT2_DIALOGUE_THIS_WAY start", 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2572( ref l_U677 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 1, l_U514[0], "M13_UFE_12_AVG", ref l_U677, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 0,  /* PLAYER_PED_ID */ sub_1005(), "MAX", ref l_U677, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_2953( "SPOL_ALT3", ref l_U677, 8, 1 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_VIG01_PT2_DIALOGUE_THIS_WAY end", 0 );
    return;
}

/* P_HC_VIG01_DIALOGUE_WAIT_FOR_PLAYER */ void sub_57440()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_VIG01_DIALOGUE_WAIT_FOR_PLAYER start", 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2572( ref l_U687 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 1, l_U514[0], "M13_UFE_12_AVG", ref l_U687, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 0,  /* PLAYER_PED_ID */ sub_1005(), "MAX", ref l_U687, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_2953( "SPOL_ALT4", ref l_U687, 8, 1 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_VIG01_DIALOGUE_WAIT_FOR_PLAYER end", 0 );
    return;
}

/* F_HC_VIG_01_PP_IS_PLAYER_SPOTTED */ int sub_57992()
{
    int I;

    for ( I = 0; I <= 1; I++ )
    {
        if ( /* F_IS_PED_AWARE_OF_PED */ sub_58067( ref l_U514[I],  /* PLAYER_PED_ID */ sub_1005(), 0, 1, 0, 0, 0 ))
        {
            return 1;
        }
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT (IS_PED_DEAD( l_U514[I] ))))
        {
            if (( /* GET_DISTANCE_BETWEEN_PEDS */ sub_58519(  /* PLAYER_PED_ID */ sub_1005(), l_U514[I], 1 )) < 6.00000000)
            {
                 /* WRITESCRIPTLOG */ sub_523( "GA", "Player got too close to UFE.", 0 );
                return 1;
            }
        }
    }
    if ( /* F_HASPLAYERFIREDGUN */ sub_58752( 5.00000000, 1 ))
    {
         /* WRITESCRIPTLOG */ sub_523( "GA", "Player fired his gun.", 0 );
        return 1;
    }
    return 0;
}

/* F_IS_PED_AWARE_OF_PED */ int sub_58067(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, int iParam6)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        if ((uParam3) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 1 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_523( "MF", "ped has SEEN target ped", 0 );
            }
            return 1;
        }
        else if ((uParam4) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 8 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_523( "MF", "ped has BEEN SHOT AT by target ped", 0 );
            }
            return 1;
        }
        else if ((uParam2) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 2 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_523( "MF", "ped has HEARD target ped", 0 );
            }
            return 1;
        }
        else if ((uParam5) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 4 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_523( "MF", "ped has BEEN TOLD ABOUT target ped", 0 );
            }
            return 1;
        };;;;
    }
    return 0;
}

/* GET_DISTANCE_BETWEEN_PEDS */ void sub_58519(unknown uParam0, unknown uParam1, boolean bParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar5 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        uVar8 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    }
    if (bParam2)
    {
        return VDIST( uVar5, uVar8 );
        break;
    }
    return VDIST( uVar5._fU0, uVar5._fU4, 0, uVar8._fU0, uVar8._fU4, 0 );
}

/* F_HASPLAYERFIREDGUN */ void sub_58752(unknown uParam0, unknown uParam1)
{
    int iVar4;
    int iVar5;
    int Result;

    iVar4 =  /* PLAYER_PED_ID */ sub_1005();
    iVar5 = nil;
    Result = 0;
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
    {
        if (HAS_SHOT_BEEN_FIRED_IN_AREA( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iVar4 ), uParam0, uParam1, ref iVar5 ))
        {
            if (iVar5 == iVar4)
            {
                Result = 1;
            }
        }
    }
    return Result;
}

/* P_HC_CREATE_SHOTGUN_COP */ void sub_59518(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12)
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_CREATE_SHOTGUN_COP start", 0 );
    l_U758 =  /* CREATEPED */ sub_37500( ref uParam0 );
     /* F_GIVEPEDWEAPON */ sub_11833( l_U758, 434544317, 25000, 0, 0 );
     /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11038( l_U758, -862236369, 1, 25000, 0 );
     /* P_QUICK_ADD_PED_TO_GROUP */ sub_53769( l_U758, ref l_U517 );
    if (NOT (IS_PED_DEAD( l_U758 )))
    {
        SET_ROOM_FOR_PED_BY_NAME( l_U758, ref g_U3237 );
        SET_PED_AI_TEMPLATE( l_U758, "AIT_EXPERT" );
        SET_PED_NAME_DEBUG( l_U758, "pi_HC_ShotgunCop" );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U758, 1 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_CREATE_SHOTGUN_COP end", 0 );
    return;
}

/* P_HC_VIG01_PP_REACT_PLAYER */ void sub_60031(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_VIG01_PP_REACT_PLAYER start", 0 );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT (IS_PED_DEAD( l_U514[uParam0] ))))
    {
        PED_SET_ACTION_INTENTION( l_U514[uParam0], 47, 1000, 0.00000000, 0.00000000, 0.00000000 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_VIG01_PP_REACT_PLAYER end", 0 );
    return;
}

/* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ int sub_60405(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (( /* F_IS_PED_AWARE_OF_PED */ sub_58067( ref (uParam0^)[I], uParam1, uParam2, uParam3, uParam4, uParam5, uParam6 )) == 1)
        {
            return 1;
        }
    }
    return 0;
}

/* P_HC_VIG01_DIALOGUE_PLAYER_SPOTTED */ void sub_60578()
{
     /* WRITESCRIPTLOG */ sub_523( "AT", "P_HC_VIG01_DIALOGUE_PLAYER_SPOTTED start", 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2572( ref l_U697 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 1, l_U514[0], "M13_UFE_11_AVG", ref l_U697, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 0,  /* PLAYER_PED_ID */ sub_1005(), "MAX", ref l_U697, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_2953( "SPOL_ALT5", ref l_U697, 8, 1 );
    return;
}

/* F_HAVE_VIG01_RIOTERS_ESCAPED_OR_DIED */ int sub_60805()
{
    if ((IS_PED_DEAD( l_U563[1] )) AND (IS_PED_DEAD( l_U563[0] )))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "Rioters are dead!", 0 );
        return 1;
    }
    if ((NOT ( /* F_ISPEDINTRIGGERBOX */ sub_52949( l_U563[1], l_U615 ))) AND (NOT ( /* F_ISPEDINTRIGGERBOX */ sub_52949( l_U563[0], l_U615 ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "Rioters are in the clear.", 0 );
        return 1;
    }
    return 0;
}

/* P_ALLOW_VIG01_UFE_TO_MOVE */ void sub_61028()
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT (IS_PED_DEAD( l_U514[0] ))))
    {
        SET_PED_COMBAT_MOVEMENT( l_U514[0], 2 );
    }
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT (IS_PED_DEAD( l_U514[1] ))))
    {
        SET_PED_COMBAT_MOVEMENT( l_U514[1], 2 );
    }
    return;
}

/* P_HC_CLEANUP_ESCAPE_RIOTERS */ void sub_61198()
{
    int I;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    for ( I = 0; I <= 2; I++ )
    {
        if ((NOT (IS_PED_DEAD( l_U758 ))) AND (NOT (IS_PED_DEAD( l_U563[I] ))))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U563[I], 56 )) == 3)
            {
                PRINTSTRING( "Shotgun shooting rioter " );
                 /* WRITE_INT */ sub_34205( I );
                CLEAR_PED_TASKS_IMMEDIATELY( l_U758 );
                uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_BONE_COORDS( l_U563[I], 3228, 0.00000000, 0.00000000, 0.00000000 )};
                TASK_AIM_GUN_AT_PED( l_U758, l_U563[I], -1, 1 );
                SET_PED_SHOOTS_AT_COORD( l_U758, uVar3 );
                PED_FINISH_ACTION_INTENTION( l_U563[I], 56 );
            }
        }
    }
    if (l_U594)
    {
        if ((IS_PED_DEAD( l_U563[1] )) AND (IS_PED_DEAD( l_U563[0] )))
        {
             /* WRITESCRIPTLOG */ sub_523( "GA", "End of rioter group a cleanup.", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT (IS_PED_DEAD( l_U758 ))))
            {
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U758, 0 );
            }
            l_U594 = 0;
        }
    }
    if (l_U595)
    {
        if (IS_PED_DEAD( l_U563[2] ))
        {
             /* WRITESCRIPTLOG */ sub_523( "GA", "End of rioter group b cleanup.", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT (IS_PED_DEAD( l_U758 ))))
            {
                REGISTER_TARGET( l_U758,  /* PLAYER_PED_ID */ sub_1005() );
                TASK_COMBAT_PED( l_U758,  /* PLAYER_PED_ID */ sub_1005() );
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U758, 0 );
            }
            l_U595 = 0;
        }
    }
    return;
}

/* F_ISPLAYERINTRIGGERREGIONFIRSTTIME */ void sub_61783(int iParam0, unknown uParam1)
{
    if (iParam0->_fU548)
    {
        return 0;
    }
    else
    {
        iParam0->_fU548 =  /* F_ISPLAYERINTRIGGERREGION */ sub_61855( iParam0, uParam1 );
    }
    return iParam0->_fU548;
}

/* F_ISPLAYERINTRIGGERREGION */ void sub_61855(int iParam0, unknown uParam1)
{
    int Result;
    int I;
    int J;

    Result = 0;
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            if ( /* F_ISPLAYERINTRIGGERBOX */ sub_61942( iParam0->_fU0[I] ))
            {
                Result = 1;
            }
        }
    }
    if ((uParam1) AND (Result))
    {
        for ( J = 0; J < iParam0->_fU508; J++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[J]._fU0, 0 );
        }
    }
    iParam0->_fU548 = 1;
    return Result;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_61942(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_52949(  /* PLAYER_PED_ID */ sub_1005(), uParam0 );
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_62293(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* P_HC_SHOTGUN_COP_COME_AROUND_CORNER */ void sub_62497()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_SHOTGUN_COP_COME_AROUND_CORNER start", 0 );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT (IS_PED_DEAD( l_U758 ))))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U758, 0 );
        TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( l_U758, 12.96000000, -30.38000000, -3.40000000,  /* PLAYER_PED_ID */ sub_1005(), 1, 2, -1, -1, 2 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_SHOTGUN_COP_COME_AROUND_CORNER end", 0 );
    return;
}

/* P_HC_EXECUTE_COPS_SEARCH_FOR_PLAYER */ void sub_62886()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_EXECUTE_COPS_SEARCH_FOR_PLAYER start", 0 );
     /* P_HC_PATROL_PATH */ sub_62997( l_U514[0] );
    if (NOT (IS_PED_DEAD( l_U514[1] )))
    {
        TASK_AIM_GUN_AT_COORD( l_U514[1], 9.68000000, -37.57000000, -2.17000000, -1, 0 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_EXECUTE_COPS_SEARCH_FOR_PLAYER end", 0 );
    return;
}

/* P_HC_PATROL_PATH */ void sub_62997(unknown uParam0)
{
    vector[11] vVar3;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    vector[11] vVar37;
    unknown uVar49;
    unknown uVar50;
    unknown uVar51;
    unknown uVar52;
    unknown uVar53;
    unknown uVar54;
    unknown uVar55;
    unknown uVar56;
    unknown uVar57;
    unknown uVar58;
    unknown uVar59;
    unknown uVar60;
    unknown uVar61;
    unknown uVar62;
    unknown uVar63;
    unknown uVar64;
    unknown uVar65;
    unknown uVar66;
    unknown uVar67;
    unknown uVar68;
    unknown uVar69;
    unknown uVar70;
    unknown uVar71;
    int I;

     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_PATROL_PATH start", 0 );
    array(ref vVar3, 11);
    vVar3[0] = {9.47000000, -40.47000000, -2.17000000};
    vVar3[1] = {7.79000000, -31.45000000, -2.17000000};
    vVar3[2] = {23.29000000, -28.77000000, -2.17000000};
    vVar3[3] = {15.51000000, -17.12000000, -2.17000000};
    vVar3[4] = {7.84000000, -7.42000000, -2.17000000};
    vVar3[5] = {19.07000000, -7.13000000, -2.17000000};
    vVar3[6] = {9.37000000, -5.58000000, -2.17000000};
    vVar3[7] = {8.06000000, -14.39000000, -2.17000000};
    vVar3[8] = {15.51000000, -28.81000000, -2.17000000};
    vVar3[9] = {8.04000000, -38.43000000, -2.17000000};
    vVar3[10] = {22.78000000, -39.71000000, -2.17000000};
    array(ref vVar37, 11);
    vVar37[0] = {9.68000000, -37.57000000, -2.17000000};
    vVar37[1] = {17.25000000, -26.66000000, -2.17000000};
    vVar37[2] = {13.94000000, -22.73000000, -2.17000000};
    vVar37[3] = {7.99000000, -13.61000000, -2.17000000};
    vVar37[4] = {10.31000000, -7.18000000, -2.17000000};
    vVar37[5] = {19.11000000, 2.14000000, -2.17000000};
    vVar37[6] = {9.54000000, -13.84000000, -2.17000000};
    vVar37[7] = {15.35000000, -20.16000000, -2.17000000};
    vVar37[8] = {12.63000000, -30.56000000, -2.17000000};
    vVar37[9] = {13.63000000, -38.46000000, -2.17000000};
    vVar37[10] = {22.58000000, -35.97000000, -2.17000000};
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_ALERTNESS( uParam0, 1 );
        OPEN_SEQUENCE_TASK( ref uVar71 );
        for ( I = 0; I < vVar3; I++ )
        {
            TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD( 0, vVar3[I], vVar37[I], 2, 0, 0.20000000, 0, 1, 0 );
        }
        SET_SEQUENCE_TO_REPEAT( uVar71, 1 );
        CLOSE_SEQUENCE_TASK( uVar71 );
        TASK_PERFORM_SEQUENCE( uParam0, uVar71 );
        CLEAR_SEQUENCE_TASK( uVar71 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_PATROL_PATH end", 0 );
    return;
}

/* F_HC_ENEMIES_ENGAGED_SHOULD_START_4TH_ROW_ENEMIES */ int sub_63986()
{
    int I;

    if (l_U932)
    {
        for ( I = 0; I <= 1; I++ )
        {
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (DOES_PED_EXIST( l_U514[I] )))
            {
                if (IS_PED_DEAD( l_U514[I] ))
                {
                     /* WRITESCRIPTLOG */ sub_523( "GA", "Player killed one of the execute cops to alert 4th row enemies.", 0 );
                    return 1;
                }
                else if (HAS_PED_BEEN_DAMAGED_BY_PED( l_U514[I],  /* PLAYER_PED_ID */ sub_1005(), 0 ))
                {
                     /* WRITESCRIPTLOG */ sub_523( "GA", "Player damaged one of the execute cops to alert 4th row enemies.", 0 );
                    return 1;
                }
                if (HAS_PED_BEEN_DAMAGED_BY_PED(  /* PLAYER_PED_ID */ sub_1005(), l_U514[I], 0 ))
                {
                     /* WRITESCRIPTLOG */ sub_523( "GA", "Player has been damaged by one of the execute cops to alert 4th row enemies.", 0 );
                    return 1;
                }
                if ( /* F_IS_PED_AWARE_OF_PED */ sub_58067( ref l_U514[I],  /* PLAYER_PED_ID */ sub_1005(), 0, 1, 1, 0, 0 ))
                {
                     /* WRITESCRIPTLOG */ sub_523( "GA", "Execute Cop aware of player, starting 4th row enemies.", 0 );
                    return 1;
                }
            }
        }
    }
    if (l_U933)
    {
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (DOES_PED_EXIST( l_U758 )))
        {
            if (IS_PED_DEAD( l_U758 ))
            {
                 /* WRITESCRIPTLOG */ sub_523( "GA", "Player killed shotgun cop to alert 4th row enemies.", 0 );
                return 1;
            }
            else if (HAS_PED_BEEN_DAMAGED_BY_PED( l_U758,  /* PLAYER_PED_ID */ sub_1005(), 0 ))
            {
                 /* WRITESCRIPTLOG */ sub_523( "GA", "Player damaged by shotgun cop to alert 4th row enemies.", 0 );
                return 1;
            }
            if (HAS_PED_BEEN_DAMAGED_BY_PED(  /* PLAYER_PED_ID */ sub_1005(), l_U758, 0 ))
            {
                 /* WRITESCRIPTLOG */ sub_523( "GA", "Player has been damaged by shotgun cop to alert 4th row enemies.", 0 );
                return 1;
            }
            if ( /* F_IS_PED_AWARE_OF_PED */ sub_58067( ref l_U758,  /* PLAYER_PED_ID */ sub_1005(), 0, 0, 1, 0, 0 ))
            {
                 /* WRITESCRIPTLOG */ sub_523( "GA", "Shotgun Cop aware of player, starting 4th row enemies.", 0 );
                return 1;
            }
        }
    }
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_61942( l_U934 ))
    {
         /* WRITESCRIPTLOG */ sub_523( "GA", "Player is close to 4th row, alerting 4th row enemies.", 0 );
        return 1;
    }
    return 0;
}

/* P_HC_START_FOURTH_ROW_ENEMIES */ void sub_65109()
{
    switch (l_U900)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_FourthRowEnemySpawn = ENTITY_STATE_INIT", 0 );
        l_U901 = 0;
        l_U900 = 2;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_FourthRowEnemySpawn = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        l_U929[l_U901] =  /* CREATEPED */ sub_37500( ref l_U902[l_U901] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_53769( l_U929[l_U901], ref l_U517 );
         /* F_GIVEPEDWEAPON */ sub_11833( l_U929[l_U901], -862236369, 25000, 0, 0 );
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT (IS_PED_DEAD( l_U929[l_U901] ))))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U929[l_U901], ref g_U3237 );
            SET_PED_AI_TEMPLATE( l_U929[l_U901], "AIT_EXPERT" );
            SET_PED_ALERTNESS( l_U929[l_U901], 3 );
            SET_PED_COMBAT_ATTRIBUTES( l_U929[l_U901], 65536, 1 );
             /* P_HC_PATROL_PATH */ sub_62997( l_U929[l_U901] );
        }
        l_U901++;
        if (l_U901 >= 2)
        {
            l_U900 = 3;
             /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_FourthRowEnemySpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_51376( ref l_U929, "pi_HC_FourthRowEnemy" );
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U517._fU0, 1 );
        l_U955 = 1;
        l_U900 = 4;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_HC_FourthRowEnemySpawn = ENTITY_STATE_COMPLETE", 0 );
        break;
    }
    return;
}

/* P_HC_BULLETCAM_FIRST_SET_OF_ENEMIES */ void sub_65814()
{
    if ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62293( ref l_U514 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62293( ref l_U929 ))) == 0)
    {
        SET_PED_CAN_TRIGGER_BULLET_CAM( l_U758, 1 );
        l_U956 = 1;
    }
    else if (IS_PED_DEAD( l_U758 ))
    {
        if ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62293( ref l_U514 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62293( ref l_U929 ))) == 1)
        {
             /* WRITESCRIPTLOG */ sub_523( "GA", "Assigning bullet cam to last execute or fourth row cop.", 0 );
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_66028( ref l_U514 );
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_66028( ref l_U929 );
            l_U956 = 1;
        }
    }
    return;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_66028(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_62293( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_HC_SET_EXIT_DOOR_OPEN */ void sub_66326()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_SET_EXIT_DOOR_OPEN start", 0 );
     /* P_SETDOORLOCKED */ sub_42987( ref g_U3687, 0 );
     /* P_OPENDOOR */ sub_43144( ref g_U3687, 0, 0, 0.25000000 );
     /* P_SETDOORLATCH */ sub_43308( ref g_U3687, 1 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_HC_SET_EXIT_DOOR_OPEN end", 0 );
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_66623(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_7078( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_HANDLE_CUTSCENE_PRELOADING */ void sub_67513()
{
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_61942( l_U1268 ))
    {
        if (((NOT (IS_PED_DEAD( l_U1250 ))) AND (l_U1265)) AND (NOT l_U1267))
        {
            if (NOT HAS_CUTSCENE_LOADED())
            {
                if ((NOT (CUTSCENE_NAMED_IS_LOADING( l_U1331 ))) AND (NOT (CUTSCENE_IS_LOADED( l_U1331 ))))
                {
                     /* WRITESCRIPTLOG */ sub_523( "AT", "Requesting Dave cutscene.", 0 );
                     /* LOADSEAMLESSCUTSCENE */ sub_28491( l_U1331, 0 );
                }
            }
            else if ((NOT (CUTSCENE_NAMED_IS_LOADING( l_U1331 ))) AND (NOT (CUTSCENE_IS_LOADED( l_U1331 ))))
            {
                 /* WRITESCRIPTLOG */ sub_523( "AT", "Flushing Exchange cutscene.", 0 );
                CLEAR_NAMED_CUTSCENE( l_U1332 );
            }
        }
    }
    else if ( /* F_ISPLAYERINTRIGGERBOX */ sub_61942( l_U1289 ))
    {
        if (NOT HAS_CUTSCENE_LOADED())
        {
            if ((NOT (CUTSCENE_NAMED_IS_LOADING( l_U1332 ))) AND (NOT (CUTSCENE_IS_LOADED( l_U1332 ))))
            {
                 /* WRITESCRIPTLOG */ sub_523( "AT", "Requesting Exchange cutscene.", 0 );
                 /* LOADSEAMLESSCUTSCENE */ sub_28491( l_U1332, 0 );
            }
        }
        else if ((NOT (CUTSCENE_NAMED_IS_LOADING( l_U1332 ))) AND (NOT (CUTSCENE_IS_LOADED( l_U1332 ))))
        {
             /* WRITESCRIPTLOG */ sub_523( "AT", "Flushing Dave cutscene.", 0 );
            CLEAR_NAMED_CUTSCENE( l_U1331 );
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_ASSET_LOADED */ int sub_68020(int iParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU4 == 3)
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loaded: {!f1}", 2, 1, -874832622, 513, (uParam1^)[I]._fU0 );
                return 1;
            }
        }
    }
    return 0;
}

/* F_STREAMREQ_ISEQ_IS_ASSET_LOADED */ int sub_68223(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int I;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if ((uParam1^)[I]._fU4 == 3)
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    ISEQ_GET_NAME( 32, ref uVar4, (uParam1^)[I]._fU0 );
                    DISPLAYF( "[CCB]### The ISEQ is loaded: {} ###", 1, 1281, ref uVar4 );
                    return 1;
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return 0;
}

/* P_CREATE_DAVE_THE_SEX_TOURIST */ void sub_68493()
{
    l_U1250 =  /* CREATEPED */ sub_37500( ref l_U1251 );
    if (DOES_PED_EXIST( l_U1250 ))
    {
        SET_ROOM_FOR_PED_BY_NAME( l_U1250, ref g_U3237 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U1250, 1 );
        SET_PED_AS_ONE_SHOT_KILL( l_U1250, 1 );
        SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( l_U1250, 1 );
        SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( l_U1250, 0 );
        SET_PED_RESIST_TO_OBJECT_COLLISION( l_U1250, 1 );
        "[doubled result, dropped if not asigned]";
        "[doubled result, dropped if not asigned]";
        if ((IS_JAPANESE_GAME()) || (IS_GERMAN_VERSION()))
        {
            SET_PED_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP( l_U1250, 0, 0 );
            SET_PED_GORE_FROM_PLAYER( l_U1250, 0 );
        }
    }
     /* P_PUT_DAVE_IN_NEW_NODE */ sub_68701( 47, 1 );
    ISEQ_REGISTER_ENTITY( -188983830, "Dave", l_U1250, 0 );
    ISEQ_START( -188983830 );
    return;
}

/* P_PUT_DAVE_IN_NEW_NODE */ void sub_68701(int iParam0, boolean bParam1)
{
    vector vVar4;
    float fVar7;

     /* P_FINISH_DAVE_ACTION_INTENTIONS */ sub_68736();
    if (bParam1)
    {
        if ((iParam0 == 58) || (iParam0 == 47))
        {
            vVar4 = {32.80000000, -26.58400000, -3.39000000};
            fVar7 = 90.00000000;
        }
        else if ((iParam0 == 57) || ((iParam0 == 56) || ((iParam0 == 55) || ((iParam0 == 54) || ((iParam0 == 53) || (iParam0 == 52))))))
        {
            vVar4 = {28.62500000, -29.22200000, -3.39000000};
            fVar7 = 90.00000000;
        }
        else if ((iParam0 == 50) || ((iParam0 == 49) || (iParam0 == 48)))
        {
            vVar4 = {32.37000000, -27.05100000, -3.39000000};
            fVar7 = -180.00000000;
        }
        else if (iParam0 == 51)
        {
            vVar4 = {32.37000000, -27.05100000, -3.39000000};
            fVar7 = -180.00000000;
        };;;;
         /* TELEPORTPED */ sub_8904( l_U1250, vVar4, fVar7 );
    }
    if (NOT (IS_PED_DEAD( l_U1250 )))
    {
        PED_SET_ACTION_INTENTION( l_U1250, iParam0, 1000, 0.00000000, 0.00000000, 0.00000000 );
    }
    return;
}

/* P_FINISH_DAVE_ACTION_INTENTIONS */ void sub_68736()
{
    if (NOT (IS_PED_DEAD( l_U1250 )))
    {
        PED_FINISH_ACTION_INTENTION( l_U1250, 47 );
        PED_FINISH_ACTION_INTENTION( l_U1250, 48 );
        PED_FINISH_ACTION_INTENTION( l_U1250, 49 );
        PED_FINISH_ACTION_INTENTION( l_U1250, 50 );
        PED_FINISH_ACTION_INTENTION( l_U1250, 51 );
        PED_FINISH_ACTION_INTENTION( l_U1250, 52 );
        PED_FINISH_ACTION_INTENTION( l_U1250, 53 );
        PED_FINISH_ACTION_INTENTION( l_U1250, 54 );
        PED_FINISH_ACTION_INTENTION( l_U1250, 55 );
        PED_FINISH_ACTION_INTENTION( l_U1250, 56 );
        PED_FINISH_ACTION_INTENTION( l_U1250, 57 );
        PED_FINISH_ACTION_INTENTION( l_U1250, 58 );
    }
    return;
}

/* P_DAVE_SAY_SOMETHING */ void sub_69353(unknown uParam0, unknown uParam1)
{
     /* KILL_SPEECH */ sub_4503( ref l_U1421, 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2572( ref l_U1421 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 0, l_U1250, "M13_Poli_Dave", ref l_U1421, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2683( 1, l_U1250, "M13_Poli_Dave", ref l_U1421, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_2953( uParam0, ref l_U1421, 8, 1 );
    (uParam1^)++;
    return;
}

/* P_HANDLE_DAVE_HEADTRACKING */ void sub_69530()
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT (IS_PED_DEAD( l_U1250 ))))
    {
        if (l_U1264)
        {
            if (( /* GET_DISTANCE_BETWEEN_PEDS */ sub_58519(  /* PLAYER_PED_ID */ sub_1005(), l_U1250, 1 )) > 15.00000000)
            {
                 /* WRITESCRIPTLOG */ sub_523( "AT", "Clearing Dave headtrack.", 0 );
                CLEAR_PED_PRIMARY_LOOKAT( l_U1250 );
                l_U1264 = 0;
            }
        }
        else if (( /* GET_DISTANCE_BETWEEN_PEDS */ sub_58519(  /* PLAYER_PED_ID */ sub_1005(), l_U1250, 1 )) <= 15.00000000)
        {
             /* WRITESCRIPTLOG */ sub_523( "AT", "Making Dave headtrack.", 0 );
            SET_PED_PRIMARY_LOOKAT( l_U1250,  /* PLAYER_PED_ID */ sub_1005() );
            l_U1264 = 1;
        }
    }
    return;
}

/* P_HANDLE_DAVE_AMBIENT_BEHAVIOR */ void sub_69793()
{
    int iVar2;
    int iVar3;

    if (NOT (IS_PED_DEAD( l_U1250 )))
    {
        if ((l_U1378._fU16) AND (NOT ( /* IS_DAVE_FLINCHING */ sub_69854())))
        {
            if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2068()))
            {
                if ( /* ISTIMERDONE */ sub_2305( ref l_U1360 ))
                {
                     /* WRITESCRIPTLOG */ sub_523( "AT", "Dave is speaking.", 0 );
                    if (NOT l_U1267)
                    {
                        iVar2 = GET_RANDOM_INT_IN_RANGE( 0, 3 );
                        if (iVar2 == 0)
                        {
                             /* P_PUT_DAVE_IN_NEW_NODE */ sub_68701( 55, 1 );
                        }
                        else if (iVar2 == 1)
                        {
                             /* P_PUT_DAVE_IN_NEW_NODE */ sub_68701( 56, 1 );
                        }
                        else
                        {
                             /* P_PUT_DAVE_IN_NEW_NODE */ sub_68701( 57, 1 );
                        }
                        if (l_U1264)
                        {
                            if (l_U1414 < l_U1411)
                            {
                                 /* P_DAVE_SAY_SOMETHING */ sub_69353( l_U1411[l_U1414], ref l_U1414 );
                                 /* CREATETIMER */ sub_1789( ref l_U1360, l_U1398, 1, 0 );
                                 /* STARTTIMER */ sub_1939( ref l_U1360 );
                            }
                        }
                        else if (l_U1410 < l_U1402)
                        {
                             /* P_DAVE_SAY_SOMETHING */ sub_69353( l_U1402[l_U1410], ref l_U1410 );
                             /* CREATETIMER */ sub_1789( ref l_U1360, l_U1398, 1, 0 );
                             /* STARTTIMER */ sub_1939( ref l_U1360 );
                        }
                    }
                    else if (l_U1264)
                    {
                        iVar3 = GET_RANDOM_INT_IN_RANGE( 0, 2 );
                        if (iVar3 == 0)
                        {
                             /* P_PUT_DAVE_IN_NEW_NODE */ sub_68701( 49, 1 );
                        }
                        else if (iVar3 == 1)
                        {
                             /* P_PUT_DAVE_IN_NEW_NODE */ sub_68701( 50, 1 );
                        }
                        if (l_U1420 < l_U1415)
                        {
                             /* P_DAVE_SAY_SOMETHING */ sub_69353( l_U1415[l_U1420], ref l_U1420 );
                             /* CREATETIMER */ sub_1789( ref l_U1360, l_U1398, 1, 0 );
                             /* STARTTIMER */ sub_1939( ref l_U1360 );
                        }
                    }
                }
            }
        }
    }
    return;
}

/* IS_DAVE_FLINCHING */ int sub_69854()
{
    unknown uVar2;
    int iVar3;

    if ((l_U1378._fU16) || ( /* ISTIMERDONE */ sub_2305( ref l_U1378 )))
    {
         /* ISTIMERDONE */ sub_2305( ref l_U1369 );
        if ((NOT l_U1369._fU16) AND (l_U1369._fU20))
        {
            return 1;
        }
        if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2068()))
        {
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))) AND (NOT (IS_PED_DEAD( l_U1250 ))))
            {
                uVar2 =  /* PLAYER_PED_ID */ sub_1005();
                if (( /* IS_MAX_AIMING_AT_DAVE */ sub_70016()) || (HAS_BULLET_IMPACTED_IN_AREA( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( l_U1250 ), 7.00000000, ref uVar2 )))
                {
                     /* WRITESCRIPTLOG */ sub_523( "AT", "Player is aiming or shooting at Dave!", 0 );
                    if (NOT l_U1267)
                    {
                         /* CREATETIMER */ sub_1789( ref l_U1369, l_U1397, 1, 0 );
                    }
                    else
                    {
                         /* CREATETIMER */ sub_1789( ref l_U1369, l_U1400, 1, 0 );
                    }
                     /* STARTTIMER */ sub_1939( ref l_U1369 );
                    if (NOT l_U1267)
                    {
                        iVar3 = GET_RANDOM_INT_IN_RANGE( 0, 2 );
                        if (iVar3 == 0)
                        {
                             /* P_PUT_DAVE_IN_NEW_NODE */ sub_68701( 53, 1 );
                        }
                        else
                        {
                             /* P_PUT_DAVE_IN_NEW_NODE */ sub_68701( 54, 1 );
                        }
                    }
                    else
                    {
                         /* P_PUT_DAVE_IN_NEW_NODE */ sub_68701( 51, 1 );
                    }
                    if (l_U1401 < 2)
                    {
                         /* P_DAVE_SAY_SOMETHING */ sub_69353( "SPOL_PDAVERN3", ref l_U1401 );
                    }
                }
            }
        }
    }
    return 0;
}

/* IS_MAX_AIMING_AT_DAVE */ int sub_70016()
{
    if ((NOT (IS_PED_DEAD( l_U1250 ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() ))))
    {
        if ((IS_CONTROL_PRESSED( 0, 6 )) AND ((IS_PLAYER_GUN_RAISED(  /* PLAYER_ID */ sub_1043() )) AND (IS_PED_IN_CROSSHAIR_CYLINDER_OFFSET( l_U1250, 0.40000000, 1.00000000, 0.00000000, 0.00000000, -0.20000000, 15.00000000, 0 ))))
        {
            return 1;
        }
    }
    return 0;
}

/* F_CAN_DAVE_CUTSCENE_PLAY */ int sub_70855()
{
    if (NOT l_U1265)
    {
        return 0;
    }
    if ((IS_PED_DEAD( l_U1250 )) AND (l_U1265))
    {
        return 0;
    }
    if (NOT (CUTSCENE_IS_LOADED( l_U1331 )))
    {
        return 0;
    }
    if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_61942( l_U1310 )))
    {
        return 0;
    }
    return 1;
}

/* F_CAN_AMBIENT_SPEECH_PLAY */ int sub_71125()
{
    if ((l_U86._fU16) || ( /* ISTIMERDONE */ sub_2305( ref l_U86 )))
    {
        return 1;
    }
    return 0;
}

/* CUTSYS_HANDLETRIGGERTYPEDOOR_NOHOLSTERING */ int sub_71358(int iParam0, unknown uParam1, boolean bParam2, boolean bParam3)
{
    if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_52873( iParam0, 0 )) == 1)
    {
        if (NOT bParam3)
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1005(), 1 );
        }
        if (NOT bParam2)
        {
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1043(), 0 );
        }
    }
    if ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_61942( (iParam0^) ))) AND (iParam0->_fU64))
    {
        iParam0->_fU64 = 0;
        if (NOT bParam3)
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1005(), 0 );
        }
        if (NOT bParam2)
        {
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1043(), 1 );
        }
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_52873( uParam1, 0 ))
    {
        return 1;
    }
    return 0;
}

/* CUTSYS_DEFAULT_PRECUTSCENESETUP */ int sub_71884()
{
    return 1;
}

/* CS_DAVE_CUTSCENEREGISTRATION */ void sub_71937()
{
    if (NOT (IS_PED_DEAD( l_U1250 )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U1250, "SexT_Dave", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( l_U1250, 29.97500000, -28.60100000, -3.39000000, -180.00000000 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( l_U1250, "/Global/S_POLICE_DAVE_TOURIST/S_POLICE_DAVE_TOURIST_seq/WALK_TO_BED/WALK_TO_BED_ANIM" );
    }
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1005() )))
    {
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_1005(), 26.72776000, -29.40131000, -3.40294700, 279.14760000 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_1005(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_IDLE" );
    }
    return;
}

/* CS_DAVE_HANDLECUTSCENE */ void sub_72278()
{
    if (l_U1333._fU52)
    {
         /* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ sub_38892( 1 );
    }
    return;
}

/* CS_DAVE_POSTCUTSCENE */ int sub_72341()
{
    return 1;
}

/* CS_DAVE_PREPAREBLENDOUT */ void sub_72383()
{
    AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_2_3", "", 0, 6000, -1, -1082130432, 0 );
     /* STARTTIMER */ sub_1939( ref l_U1387 );
     /* CREATETIMER */ sub_1789( ref l_U1378, l_U1399, 1, 0 );
     /* STARTTIMER */ sub_1939( ref l_U1378 );
     /* TELEPORTPED */ sub_8904(  /* PLAYER_PED_ID */ sub_1005(), 26.72776000, -29.40131000, -3.40294700, 279.14760000 );
     /* NIS_CREATE_STATIC_CAM */ sub_72590( ref l_U1431, 23.60898000, -30.25609000, -1.34412500, -6.37794100, -0.00000000, -74.67085000, 45, 300 );
     /* NIS_PLAY_STATIC_CAMERA */ sub_72825( ref l_U1431 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 6.18149900, 0, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( -6.29981900, 0, 0 );
    if (NOT (HAS_EXPLORATION_ITEM_BEEN_FOUND( "spol_Dave2" )))
    {
        FOUND_EXPLORATION_ITEM( "spol_Dave2" );
    }
    return;
}

/* NIS_CREATE_STATIC_CAM */ void sub_72590(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_1789( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref l_U39, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* NIS_PLAY_STATIC_CAMERA */ void sub_72825(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_1939( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* CS_DAVE_HANDLEBLENDOUT */ int sub_73019()
{
    if ( /* NIS_IS_SHOT_FINISHED */ sub_73059( ref l_U1431, 1 ))
    {
         /* NIS_RETURN_TO_GAMEPLAY_CAM */ sub_73236( 500, 1, 0, -859915232, -859915232, 0 );
        return 1;
    }
    return 0;
}

/* NIS_IS_SHOT_FINISHED */ int sub_73059(int iParam0, boolean bParam1)
{
    if (bParam1 == 1)
    {
        if (NOT iParam0->_fU44)
        {
            if ((ref iParam0->_fU48->_fU16) || ( /* ISTIMERDONE */ sub_2305( iParam0 + 48 )))
            {
                iParam0->_fU44 = 1;
                iParam0->_fU36 = 1;
                return 1;
            }
        }
    }
    if (NOT bParam1)
    {
        if ((ref iParam0->_fU48->_fU16) || ( /* ISTIMERDONE */ sub_2305( iParam0 + 48 )))
        {
            iParam0->_fU36 = 1;
            return 1;
        }
    }
    return 0;
}

/* NIS_RETURN_TO_GAMEPLAY_CAM */ void sub_73236(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, float fParam4, unknown uParam5)
{
    SET_CAM_SIDE_LEFT( uParam2 );
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam3, 1065353216, 0 );
    }
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( fParam4, 1065353216, 0 );
    }
    RENDER_SCRIPT_CAMS( 0, uParam1, uParam0, uParam5 );
    return;
}

/* P_HC_DEBUG_TUNING_WIDGET */ void sub_73617()
{
    if (NOT l_U1474)
    {
        START_WIDGET_GROUP( "Holding Cells Tuning" );
        ADD_WIDGET_BOOL( "Reset Checkpoint", ref l_U1475 );
        START_WIDGET_GROUP( "First Aid Box" );
        ADD_WIDGET_BOOL( "Reset First Aid Box", ref l_U1476 );
        ADD_WIDGET_FLOAT_SLIDER( "Pos X", ref g_U4345._fU0, -5000.00000000, 5000.00000000, 0.01000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Pos Y", ref g_U4345._fU4, -5000.00000000, 5000.00000000, 0.01000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Pos Z", ref g_U4345._fU8, -5000.00000000, 5000.00000000, 0.01000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Rotaion", ref g_U4348._fU8, -360.00000000, 360.00000000, 1.00000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "13_02_PP Tuning" );
        ADD_WIDGET_INT_SLIDER( "Stop anim camera time", ref l_U186, 0, 1000000, 50 );
        ADD_WIDGET_INT_SLIDER( "Anim camera interp time", ref l_U187, 0, 1000000, 50 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Dave The Sex Tourist" );
        ADD_WIDGET_BOOL( "Find Fav1 Dave", ref l_U1477 );
        ADD_WIDGET_INT_SLIDER( "Start checking for flinches", ref l_U1396, 0, 50000, 1 );
        ADD_WIDGET_INT_SLIDER( "Dave is flinching", ref l_U1397, 0, 50000, 1 );
        ADD_WIDGET_INT_SLIDER( "Start checking for flinches after cutscene", ref l_U1399, 0, 50000, 1 );
        ADD_WIDGET_INT_SLIDER( "Dave is flinching after cutscene", ref l_U1400, 0, 50000, 1 );
        ADD_WIDGET_INT_SLIDER( "Dave say something", ref l_U1398, 0, 50000, 1 );
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        l_U1474 = 1;
    }
    if (l_U1475)
    {
         /* P_CLEANUP_HC */ sub_6228( 0 );
        l_U152 = 1;
        l_U1475 = 0;
    }
    if (l_U1477)
    {
        FOUND_EXPLORATION_ITEM( "sfav1_Dave1" );
        l_U1477 = 0;
    }
    if (l_U1476)
    {
         /* P_CLEANUP_HC */ sub_6228( 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_14229();
         /* P_SET_STATIC_DATA */ sub_14770();
         /* P_HC_CREATE_OFFICE_FIRST_AID_BOX */ sub_46600();
         /* P_HC_CREATE_PAYNEKILLERS */ sub_45107();
        l_U1476 = 0;
    }
    return;
}

/* P_RELEASE_HC_ASSETS */ void sub_74531()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_RELEASE_HC_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_74610( ref l_U142, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_41543( -1343904335, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_41543( 474775165, ref g_U2468 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_66623( "LEVEL_S_POLICE_CP_02", ref g_U2741 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_66623( ref g_U3553, ref g_U2741 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_74788( ref l_U148, ref g_U2613 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_41543( 622633207, ref g_U2468 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_RELEASE_HC_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_74610(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_41543( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_74788(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_74862( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_74862(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_7078( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

