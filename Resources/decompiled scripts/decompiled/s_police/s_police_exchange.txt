void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U74 = 0;
    l_U75 = 0;
    l_U76 = 1500;
    l_U87 = 0;
    l_U98 = 12;
    l_U157 = 0;
    l_U158 = 0;
    l_U160 = 1;
    l_U161 = 0;
    l_U356 = 0;
    l_U455 = 500;
    l_U456 = 2000;
    l_U486 = -497025808;
    l_U488 = -422856175;
    l_U490 = -2084980651;
    l_U492 = 908032872;
    l_U495 = 0.35000000;
    l_U624 = {58.21000000, -42.57000000, -2.04000000};
    l_U754 = {59.83000000, -46.52000000, -2.18000000};
    l_U849 = -1;
    l_U888 = 8000;
    l_U1046 = 0;
     /* WRITESCRIPTLOG */ sub_523( "SP", "Script s_police_exchange.sc is starting up...", 0 );
     /* P_PE_POPULATE_SCRIPT_ARRAYS */ sub_641();
    l_U158 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_930();
        if (l_U161 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_14765();
        }
         /* P_PE_DEBUG_TUNING_WIDGET */ sub_65832();
        WAIT( 0 );
    }
     /* P_CLEANUP_PE */ sub_6247();
     /* P_RELEASE_PE_ASSETS */ sub_66000();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_police_exchange" );
     /* WRITESCRIPTLOG */ sub_523( "SP", "Script s_police_exchange.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_523(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_PE_POPULATE_SCRIPT_ARRAYS */ void sub_641()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_PE_POPULATE_SCRIPT_ARRAYS start", 0 );
    l_U145[0] = -417930772;
    l_U145[1] = 474775165;
    l_U145[2] = -1185104559;
    l_U145[3] = l_U486;
    l_U145[4] = l_U488;
    l_U145[5] = l_U490;
    l_U145[6] = l_U492;
    l_U153[0] = -862236369;
    l_U153[1] = 434544317;
    l_U153[2] = 1308526797;
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_PE_POPULATE_SCRIPT_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_930()
{
    if (g_U821 == 3)
    {
        switch (l_U161)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1132()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
            {
                l_U161 = 1;
                 /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
             /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1651( 1 );
            if ( /* IS_RESTART_ACTIVE */ sub_4742())
            {
                l_U161 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_4802( 0 )) == 1)
            {
                l_U161 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
            {
                l_U161 = 3;
                 /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1069() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1069(), 0, 0 );
                SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1069(), 1 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1031() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1031(), 0 );
                }
            }
            if ((g_U862[4]._fU40 != 4) AND (g_U862[4]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_523( "CR", "Shutting down script for MCE_PARKING.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_6121( ref g_U862[4] );
                SET_EXITFLAG_FOR_SCRIPT( g_U862[4]._fU32 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            AUDIO_MUSIC_STOP_ONESHOT();
             /* P_CLEANUP_PE */ sub_6247();
             /* P_FORCE_SCENE_TO_LOAD */ sub_9649( 3 );
            l_U161 = 4;
             /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_10083( ref l_U109,  /* PLAYER_PED_ID */ sub_1031() );
            l_U161 = 5;
             /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U158 = 1;
            l_U160 = 0;
            l_U161 = 0;
             /* WRITESCRIPTLOG */ sub_523( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_1031()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1069() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1069()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1132()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1031(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1069(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1069(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1031() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1031(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ void sub_1651(boolean bParam0)
{
    int iVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
    {
        if (NOT (IS_PED_IN_COMBAT(  /* PLAYER_PED_ID */ sub_1031() )))
        {
            if ((NOT l_U89._fU16) AND (NOT l_U89._fU20))
            {
                 /* WRITESCRIPTLOG */ sub_523( "AT", "Starting painkiller dialogue timer.", 0 );
                 /* CREATETIMER */ sub_1815( ref l_U89, 3500, 1, 0 );
                 /* STARTTIMER */ sub_1965( ref l_U89 );
            }
            if ((l_U89._fU16) AND ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2094()))
            {
                 /* WRITESCRIPTLOG */ sub_523( "AT", "Dialogue detected. Restarting painkiller dialogue timer.", 0 );
                 /* CREATETIMER */ sub_1815( ref l_U89, 3500, 1, 0 );
                 /* STARTTIMER */ sub_1965( ref l_U89 );
            }
            iVar3 = GET_PAYNEKILLER_AMT();
            if (iVar3 > l_U98)
            {
                if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2094()))
                {
                    if ((l_U89._fU16) || ( /* ISTIMERDONE */ sub_2331( ref l_U89 )))
                    {
                        if (g_U4303 < 6)
                        {
                            if ((GET_RANDOM_INT_IN_RANGE( 0, 500 )) < 300)
                            {
                                 /* WRITESCRIPTLOG */ sub_523( "GA", "Playing painkiller monologue.", 0 );
                                 /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2598( ref l_U99 );
                                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2709( 0,  /* PLAYER_PED_ID */ sub_1031(), "MAX", ref l_U99, 2, 0 );
                                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2709( 1,  /* PLAYER_PED_ID */ sub_1031(), "MAX", ref l_U99, 2, 0 );
                                 /* PLAY_SINGLE_SPEECH */ sub_2979( "SPOL_PLFNDPL", ref l_U99, 8, 1 );
                                g_U4303++;
                            }
                            else
                            {
                                 /* WRITESCRIPTLOG */ sub_523( "GA", "Not playing painkiller speech, failed random chance test.", 0 );
                            }
                        }
                        else
                        {
                             /* WRITESCRIPTLOG */ sub_523( "GA", "Not Playing painkiller speech, already played all 6 lines.", 0 );
                        }
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_523( "GA", "Not playing painkiller speech, not long enough since last dialogue.", 0 );
                    }
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_523( "GA", "Not playing painkiller speech, another speech is currently playing.", 0 );
                }
            }
            l_U98 = iVar3;
        }
        if ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_4227( l_U99 ))
        {
            if (NOT HAS_CUTSCENE_FINISHED())
            {
                 /* WRITESCRIPTLOG */ sub_523( "GA", "Killing painkiller speech for cutscene playing.", 0 );
                 /* KILL_SPEECH */ sub_4529( ref l_U99, 0 );
            }
        }
    }
    if (bParam0)
    {
         /* CREATETIMER */ sub_1815( ref l_U89, 20000, 1, 0 );
         /* STARTTIMER */ sub_1965( ref l_U89 );
    }
    return;
}

/* CREATETIMER */ void sub_1815(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_1965(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* IS_ANY_SPEECH_CURRENTLY_PLAYING */ void sub_2094()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

/* ISTIMERDONE */ int sub_2331(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_2598(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_2709(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_2979(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_3024( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_3024(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_3111( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_3111(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_3163( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_3681( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_3163(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_3681(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_4227(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_4270( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_4270(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* KILL_SPEECH */ void sub_4529(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_4270( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

/* IS_RESTART_ACTIVE */ void sub_4742()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_4802(int iParam0)
{
    iParam0 = 1;
    switch (l_U75)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_4884( ref l_U77 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
            {
                l_U76 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1815( ref l_U77, l_U76, 1, 1 );
             /* STARTTIMER */ sub_1965( ref l_U77 );
        }
        if ( /* ISTIMERDONE */ sub_2331( ref l_U77 ))
        {
             /* WRITESCRIPTLOG */ sub_523( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1069() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1069(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U75 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U75 = 2;
            }
            else
            {
                l_U75 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_523( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_5367();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_523( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_5367();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_4884(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_5367()
{
     /* WRITESCRIPTLOG */ sub_523( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_5442( ref l_U77 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1069() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1069(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U74 = 0;
    l_U74 = l_U74;
    l_U75 = 0;
    return;
}

/* RESETTIMER */ void sub_5442(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_6121(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_PE */ void sub_6247()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_CLEANUP_PE start", 0 );
    if ((CUTSCENE_NAMED_IS_LOADING( "MID_02_PP_concat" )) || (CUTSCENE_IS_LOADED( "MID_02_PP_concat" )))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "Purging loaded cutscene.", 0 );
        CLEAR_NAMED_CUTSCENE( "MID_02_PP_concat" );
    }
     /* WRITESCRIPTLOG */ sub_523( "AT", "Disabling WALLA: S_POLICE_WZ_PARKING_LOT and AMBIENT: S_POLICE_ZONE_PARKING_LOT_GUNFIGHT", 0 );
    ENABLE_WALLA_ZONE( "S_POLICE_WZ_PARKING_LOT", 0 );
    ENABLE_AMBIENT_ZONE( "S_POLICE_ZONE_PARKING_LOT_GUNFIGHT", 0 );
     /* P_SAFE_STOP_SOUND */ sub_6613( l_U849, 0 );
     /* P_SAFE_RELEASE_SOUND_ID */ sub_6796( ref l_U849 );
    ISEQ_TERMINATE( 1695938919 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_7021( 1695938919, ref g_U2662 );
     /* P_ENABLE_POI */ sub_8089( ref l_U668, 0 );
     /* CLEANPEDARRAY */ sub_9096( ref l_U343 );
     /* CLEANPEDARRAY */ sub_9096( ref l_U451 );
     /* CLEANPED */ sub_9146( l_U479 );
     /* CLEANOBJECT */ sub_9274( l_U487 );
     /* CLEANOBJECT */ sub_9274( l_U489 );
     /* CLEANOBJECT */ sub_9274( l_U491 );
     /* CLEANOBJECT */ sub_9274( l_U493 );
     /* CLEANOBJECT */ sub_9274( l_U494 );
     /* CLEANPLACEMENTARRAY */ sub_9372( ref l_U480 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U361._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U387._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U647._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U582._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U603._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U241._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U220._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U899._fU0 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_CLEANUP_PE end", 0 );
    return;
}

/* P_SAFE_STOP_SOUND */ void sub_6613(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
         /* WRITESCRIPTLOG */ sub_523( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_523( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

/* P_SAFE_RELEASE_SOUND_ID */ void sub_6796(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
         /* WRITESCRIPTLOG */ sub_523( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_523( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_7021(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_7159( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_7159(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_ENABLE_POI */ void sub_8089(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if ((iParam0->_fU4 == 1) AND (iParam0->_fU320 == 1))
        {
             /* P_ENABLEPOIGLINT */ sub_8148( iParam0, 1 );
        }
        iParam0->_fU0 = 1;
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_8148( iParam0, 0 );
         /* P_ENABLEPOIINTERACTIONTEXT */ sub_8367( iParam0, 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )) == 0)
        {
            TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_1031() );
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1031(), 0 );
                iParam0->_fU328 = 0;
            }
        }
        iParam0->_fU8 = 0;
        iParam0->_fU0 = 0;
    }
    return;
}

/* P_ENABLEPOIGLINT */ void sub_8148(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if (iParam0->_fU12 != nil)
        {
            if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
            {
                ENABLE_GLINT( iParam0->_fU12, 1 );
            }
            else
            {
                iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
            }
        }
        else
        {
            iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
        }
    }
    else if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            ENABLE_GLINT( iParam0->_fU12, 0 );
        }
    }
    return;
}

/* P_ENABLEPOIINTERACTIONTEXT */ void sub_8367(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
        SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
        if ((iParam0->_fU72 == 0) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU68 == 1)))
        {
            SET_INTERACTIONTEXT_VISIBLE( 0 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
        else
        {
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_8547( iParam0 );
        if (iParam0->_fU332 == 1)
        {
            SET_INTERACTIONTEXT_PULSE( 1 );
            SET_INTERACTIONTEXT_PULSE_PERIOD( iParam0->_fU336 );
        }
    }
    else
    {
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
    }
    return;
}

/* P_UPDATEINTERACTIONTEXTAVAILABLE */ void sub_8547(int iParam0)
{
    if (iParam0->_fU60 == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 0 );
        iParam0->_fU56 = 0;
    }
    else if (iParam0->_fU56 == 1)
    {
        if (( /* F_ISACTIONINGAVAILABLE */ sub_8643( iParam0 )) == 0)
        {
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
    }
    else if (( /* F_ISACTIONINGAVAILABLE */ sub_8643( iParam0 )) == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 1 );
        iParam0->_fU56 = 1;
    };;;
    return;
}

/* F_ISACTIONINGAVAILABLE */ int sub_8643(int iParam0)
{
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1069() )) == 0))
    {
        if (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_1031() )) == 1) || (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_1031() )) == 1) || (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_1031() )) == 1) || (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_1031() )) == 1) || (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1031() )) == 1) || (IS_PLAYER_SHOOTDODGING() == 1))))))
        {
            return 0;
        }
        if (iParam0->_fU304 == 0)
        {
            if ((IS_MONOLOGUE_PLAYING() == 1) || ((IS_ANY_SPEECH_PLAYING(  /* PLAYER_PED_ID */ sub_1031() )) == 1))
            {
                return 0;
            }
        }
        return 1;
    }
    return 0;
}

/* CLEANPEDARRAY */ void sub_9096(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_9146( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_9146(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANOBJECT */ void sub_9274(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_9372(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_9427( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_9427(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_FORCE_SCENE_TO_LOAD */ void sub_9649(unknown uParam0)
{
    char[64] cVar3;
    unknown uVar19;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
    {
         /* TELEPORTPED */ sub_9725(  /* PLAYER_PED_ID */ sub_1031(), g_U2953[uParam0], g_U3083[uParam0] );
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1031(), 1 );
        if (NOT (IS_STRING_NULL( ref g_U1091[uParam0]._fU0 )))
        {
            StrCopy( ref cVar3, "Loading room: ", 64 );
            ConcatString(ref cVar3, ref g_U1091[uParam0]._fU0, 64);
            PRINTSTRING( ref cVar3 );
            PRINTNL();
            uVar19 = GET_INTERIOR_FROM_NAME( ref g_U1091[uParam0]._fU64, 0 );
            SET_INTERIOR_ACTIVE( uVar19, 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( uVar19, GET_HASH_KEY( ref g_U1091[uParam0]._fU0 ) );
        }
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1031(), 0 );
    }
    return;
}

/* TELEPORTPED */ void sub_9725(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_10083(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_523( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_10302( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_11466( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11780( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12259( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11780( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12259( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11780( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12259( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_12575( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12259( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_12575( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12259( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_13147( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_13349( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1031(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_10302(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_10364( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_10364(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_11466(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_11780(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_12184( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_12184(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_12259(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_12575(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_12184( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_13147(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_13349(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_10364( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_13447( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_13447(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_14765()
{
    int iVar2;
    int I;
    int J;

    iVar2 = l_U158;
    if (l_U849 != -1)
    {
        if (NOT ( /* F_IS_OBJECT_PLAYING_ANIM */ sub_14844( l_U494, "po_anim2", "Dr_exch_slide" )))
        {
             /* WRITESCRIPTLOG */ sub_523( "GA", "Stopping exit door sounds.", 0 );
             /* P_SAFE_STOP_SOUND */ sub_6613( l_U849, 0 );
             /* P_SAFE_RELEASE_SOUND_ID */ sub_6796( ref l_U849 );
        }
    }
    switch (l_U158)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_15181();
         /* P_SET_STATIC_DATA */ sub_15396();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U158 = 2;
         /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        g_U822[3] = 0;
         /* P_REQUEST_PE_PERSISTENT_ASSETS */ sub_19100();
         /* P_REQUEST_PE_NONPERSISTENT_ASSETS */ sub_27987();
        l_U158 = 3;
         /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_32690( ref g_U2613 )) AND (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_32316( ref g_U2889 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_31902( ref g_U2662 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_31511( ref g_U2741 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_31114( ref g_U2468 ))))))
        {
            if ((NOT l_U109._fU0) AND (g_U820 == 3))
            {
                l_U158 = 4;
                 /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U158 = 6;
                 /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_PRE_CREATE_PE_PEDS", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        l_U160 = 0;
        g_U842[3] = 1;
        if (NOT ( /* HAS_SAVEFILE_LOADED */ sub_33327( ref l_U109 )))
        {
             /* F_GIVEPEDWEAPON */ sub_12575(  /* PLAYER_PED_ID */ sub_1031(), -862236369, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11780(  /* PLAYER_PED_ID */ sub_1031(), -862236369, 0, 200, 0 );
            l_U158 = 5;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U158 = 6;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_PRE_CREATE_PE_PEDS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1031(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1031(), 0, 0 ) )))
            {
                g_U821 = 3;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_33837( ref l_U109, g_U821,  /* PLAYER_PED_ID */ sub_1031(), g_U2953[3], g_U3083[3], g_U3127[3], g_U3171[3], 1 );
                l_U158 = 6;
                 /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_PRE_CREATE_PE_PEDS", 0 );
            }
        }
        break;
        case 6:
        if (l_U159)
        {
            l_U262 = 1;
        }
        if ((l_U262 != 4) AND (l_U262 != 0))
        {
             /* P_PE_CREATE_START_ENEMIES */ sub_38536();
        }
        if ((l_U262 > 2) AND (l_U409 == 0))
        {
            l_U409 = 1;
        }
        if ((l_U409 != 4) AND (l_U409 != 0))
        {
             /* P_PE_CREATE_START_PRISONERS */ sub_41388();
        }
        if ((l_U409 == 4) AND ((l_U262 == 4) AND (NOT (DOES_PED_EXIST( l_U479 )))))
        {
             /* P_PE_CREATE_DEAD_COP */ sub_43058();
        }
        if ((DOES_PED_EXIST( l_U479 )) AND ((l_U409 == 4) AND (l_U262 == 4)))
        {
            l_U158 = 7;
             /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        break;
        case 7:
        if (l_U159)
        {
            g_U822[3] = 1;
        }
        if (g_U842[3])
        {
            if (l_U160)
            {
                if (CUTSCENE_IS_LOADED( "MID_02_PP_concat" ))
                {
                    l_U157 = 1;
                     /* P_DEACTIVATEPEDARRAY */ sub_41082( ref l_U343 );
                    for ( I = 0; I < l_U451; I++ )
                    {
                        SET_PED_VISIBLE( l_U451[I], 0 );
                    }
                     /* P_PE_CREATE_EXIT_DOORS_AND_BUTTONS */ sub_43495();
                    l_U158 = 8;
                     /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_HANDLE_MID_02_PP", 0 );
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_523( "GA", "Waiting for MID_02_PP to load.", 0 );
                }
            }
            else if (NOT l_U157)
            {
                 /* P_DROP_PRE_RIOT_PRECINCT_STREAMHELPERS */ sub_44481();
                l_U157 = 1;
            }
             /* P_PE_CREATE_EXIT_DOORS_AND_BUTTONS */ sub_43495();
            l_U158 = 8;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_HANDLE_MID_02_PP", 0 );;
        }
        break;
        case 8:
        if (l_U159)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_51259( ref l_U162, "MID_02_PP_concat", 44829, 44882, 46424, 47556, 47605, 50867, 250, 0 );
             /* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ sub_51809( ref l_U162, ref g_U1091[3]._fU64, ref g_U1091[3]._fU0 );
            if (l_U160)
            {
                l_U162._fU104 = 0;
                l_U162._fU4 = 2;
            }
            else
            {
                l_U162._fU4 = 7;
            }
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_51951( ref l_U162 ))
        {
            if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
            }
            if (g_U821 != 3)
            {
                g_U821 = 3;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_33837( ref l_U109, g_U821,  /* PLAYER_PED_ID */ sub_1031(), g_U2953[3], g_U3083[3], g_U3127[3], g_U3171[3], 1 );
            }
            l_U158 = 9;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_GAMEPLAY_COMBAT_PRISONER_EXCHANGE", 0 );
        }
        break;
        case 9:
        if (l_U159)
        {
             /* P_PE_CREATE_PLACEMENTS */ sub_54670();
        }
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_55113( ref l_U343, -1054867456, 0, 1 );
         /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_55316( ref l_U343 );
         /* P_PE_HANDLE_PRISONER_LOG_EXPLORATION */ sub_55592();
        if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55369( ref l_U451 )) > 0)
        {
             /* P_PE_HANDLE_PRISONER_KILL_ON_TIMER */ sub_59092();
        }
        else if (NOT l_U356)
        {
             /* WRITESCRIPTLOG */ sub_523( "GA", "Forcing enemies to combat the player.", 0 );
            for ( J = 0; J < l_U343; J++ )
            {
                if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD( l_U343[J] ))))
                {
                    REGISTER_TARGET( l_U343[J],  /* PLAYER_PED_ID */ sub_1031() );
                    TASK_COMBAT_PED( l_U343[J],  /* PLAYER_PED_ID */ sub_1031() );
                }
            }
            l_U356 = 1;
        }
        if (NOT l_U383)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
            {
                if (NOT (IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_1031() )))
                {
                     /* P_RELEASE_ENEMY_1 */ sub_59592();
                    l_U383 = 1;
                }
            }
        }
        if (NOT l_U384)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
            {
                if (NOT (IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_1031() )))
                {
                     /* P_RELEASE_ENEMY_2 */ sub_59897();
                    l_U384 = 1;
                }
            }
        }
        if (NOT l_U382)
        {
            if (( /* F_ISPLAYERINTRIGGERBOX */ sub_60125( l_U361 )) || ((IS_PED_DEAD( l_U343[2] )) AND (IS_PED_DEAD( l_U343[1] ))))
            {
                 /* P_RELEASE_ENEMY_0 */ sub_60187();
                l_U382 = 1;
            }
        }
        if (NOT l_U385)
        {
            if (( /* F_ISPLAYERINTRIGGERBOX */ sub_60125( l_U361 )) || (IS_PED_DEAD( l_U343[1] )))
            {
                 /* P_RELEASE_ENEMY_4 */ sub_60482();
                l_U385 = 1;
            }
        }
        if (NOT l_U386)
        {
            if (( /* F_ISPLAYERINTRIGGERBOX */ sub_60125( l_U361 )) || (IS_PED_DEAD( l_U343[2] )))
            {
                 /* P_RELEASE_ENEMY_5 */ sub_60753();
                l_U386 = 1;
            }
        }
        if (NOT l_U408)
        {
            if ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55369( ref l_U343 )) == 1) || ( /* F_ISPLAYERINTRIGGERBOX */ sub_60125( l_U387 )))
            {
                 /* P_RELEASE_ENEMY_3 */ sub_61020();
                l_U408 = 1;
            }
        }
        if ((NOT IS_BULLET_CAMERA_ACTIVE()) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55369( ref l_U343 )) == 0))
        {
             /* WRITESCRIPTLOG */ sub_523( "AT", "Enabling WALLA: S_POLICE_WZ_PARKING_LOT and AMBIENT: S_POLICE_ZONE_PARKING_LOT_GUNFIGHT", 0 );
            ENABLE_WALLA_ZONE( "S_POLICE_WZ_PARKING_LOT", 1 );
            ENABLE_AMBIENT_ZONE( "S_POLICE_ZONE_PARKING_LOT_GUNFIGHT", 1 );
            if ( /* F_CAN_AMBIENT_SPEECH_PLAY */ sub_61405())
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_58393( "SPOL_LASKA", ref l_U627 );
            }
             /* WRITESCRIPTLOG */ sub_523( "AT", "Playing music one shot PRECINCT_ONESHOT_1", 0 );
            AUDIO_MUSIC_PLAY_ONESHOT();
             /* WRITESCRIPTLOG */ sub_523( "AT", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_2_3", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_2_3", "", 0, 5000, -1, -1082130432, 0 );
             /* CREATETIMER */ sub_1815( ref l_U861, 6000, 1, 0 );
             /* STARTTIMER */ sub_1965( ref l_U861 );
            l_U158 = 10;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_GAMEPLAY_OPEN_DOORS", 0 );
        }
        break;
        case 10:
        if (l_U159)
        {
            if (NOT g_U862[4]._fU36)
            {
                g_U862[4]._fU36 = 1;
            }
             /* P_SET_POI_AVAILABLE */ sub_18413( ref l_U668, 1 );
             /* P_ENABLE_POI */ sub_8089( ref l_U496, 1 );
            if (DOES_OBJECT_EXIST( l_U489 ))
            {
                SET_OBJECT_VISIBLE( l_U489, 1 );
            }
             /* CREATETIMER */ sub_1815( ref l_U879, 1, 1, 0 );
             /* STARTTIMER */ sub_1965( ref l_U879 );
        }
         /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1651( 0 );
        if (( /* F_CAN_AMBIENT_SPEECH_PLAY */ sub_61405()) AND ((l_U879._fU16) || ( /* ISTIMERDONE */ sub_2331( ref l_U879 ))))
        {
            if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2094()))
            {
                if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_61942( ref l_U647, 0 ))
                {
                     /* P_SPEECH_PLAY_MONOLOGUE */ sub_58393( "SPOL_MXCLSCR", ref l_U637 );
                     /* CREATETIMER */ sub_1815( ref l_U879, l_U888, 1, 0 );
                     /* STARTTIMER */ sub_1965( ref l_U879 );
                }
                if ( /* ISTIMERDONE */ sub_2331( ref l_U861 ))
                {
                     /* CREATETIMER */ sub_1815( ref l_U870, 13000, 1, 0 );
                     /* STARTTIMER */ sub_1965( ref l_U870 );
                     /* CREATETIMER */ sub_1815( ref l_U879, l_U888, 1, 0 );
                     /* STARTTIMER */ sub_1965( ref l_U879 );
                }
                if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_60125( l_U899 )))
                {
                    if ( /* ISTIMERDONE */ sub_2331( ref l_U870 ))
                    {
                         /* P_SPEECH_PLAY_MONOLOGUE */ sub_58393( "SPOL_EXCHDAD", ref l_U889 );
                         /* CREATETIMER */ sub_1815( ref l_U879, l_U888, 1, 0 );
                         /* STARTTIMER */ sub_1965( ref l_U879 );
                    }
                }
            }
        }
         /* P_PE_HANDLE_PRISONER_LOG_EXPLORATION */ sub_55592();
        if ( /* F_HANDLE_POI */ sub_55645( ref l_U496 ))
        {
             /* P_INITIALIZE_IMAGEFX_PE_EXITDOORBUTTON */ sub_62287();
            l_U158 = 11;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_HANDLE_DOOR_OPEN_NIS", 0 );
        }
        break;
        case 11:
         /* P_HANDLE_IMAGEFX */ sub_62883( ref l_U937 );
        if (l_U159)
        {
            l_U799 = 1;
             /* WRITESCRIPTLOG */ sub_523( "AT", "Forcing music PRECINCT_FINAL mood PRECINCT_01_5", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_5", "", 0, 5000, 7000, -1082130432, 0 );
        }
         /* P_PE_HANDLE_OPEN_DOOR_NIS */ sub_63853();
        if (l_U799 == 5)
        {
            l_U158 = 12;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_GAMEPLAY_EXIT_PRISONER_EXCHANGE", 0 );
        }
        break;
        case 12:
         /* P_PE_HANDLE_PRISONER_LOG_EXPLORATION */ sub_55592();
        if ( /* CUTSYS_HANDLETRIGGERTYPEDOOR_NOHOLSTERING */ sub_65438( ref l_U241, ref l_U220, 0, 0 ))
        {
            g_U842[4] = 1;
            l_U158 = 13;
             /* WRITESCRIPTLOG */ sub_523( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 13:
        if (g_U821 == 4)
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U158 = 0;
             /* WRITESCRIPTLOG */ sub_523( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U158 != iVar2)
    {
        l_U159 = 1;
    }
    else
    {
        l_U159 = 0;
    }
    return;
}

/* F_IS_OBJECT_PLAYING_ANIM */ int sub_14844(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if ((DOES_OBJECT_EXIST( uParam0 )) == 1)
    {
        if (IS_OBJECT_PLAYING_ANIM( uParam0, uParam2, uParam1 ))
        {
            return 1;
        }
    }
    return 0;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_15181()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U159 = 1;
    l_U262 = 0;
    l_U263 = 0;
    l_U382 = 0;
    l_U383 = 0;
    l_U384 = 0;
    l_U385 = 0;
    l_U386 = 0;
    l_U408 = 0;
    l_U356 = 0;
    l_U409 = 0;
    l_U410 = 0;
    l_U850 = 0;
    l_U798 = 0;
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_15396()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15502( ref l_U264[0], 49.64000000, -33.46000000, -3.39000000, 122.38000000, -817482235, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15502( ref l_U264[1], 53.81000000, -42.35000000, -3.39000000, 90.00000000, 2066575688, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15502( ref l_U264[2], 58.75000000, -37.95000000, -3.39000000, 90.00000000, 1067918748, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15502( ref l_U264[3], 60.11000000, -34.80000000, -3.40000000, 125.77000000, 1107387953, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15502( ref l_U264[4], 60.12000000, -42.36000000, -3.40000000, 91.65000000, 1621364061, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15502( ref l_U264[5], 58.81000000, -41.86000000, -3.39000000, 86.99000000, -1709207745, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15502( ref l_U411[0], 39.25620000, -37.69260000, -3.40155300, 238.21550000, -1946849719, 8, 4, 2, 5, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15502( ref l_U411[1], 41.48700000, -34.07420000, -3.40155300, 158.91240000, 331247629, 8, 4, 2, 5, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15502( ref l_U411[2], 42.47650000, -39.92310000, -3.40155300, 254.61790000, 887553342, 8, 4, 2, 5, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15502( ref l_U466, 32.98461000, -36.07926000, -3.30000000, 268.12000000, 332159537, 6, 5, 2, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_16102( ref l_U361, "tb_PE_UntetherUFE", 38.03000000, -37.54000000, -3.50000000, 3.00000000, 10.57000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16102( ref l_U387, "tb_PE_ReleaseSecurityBoothGuy", 41.94000000, -37.94000000, -3.50000000, 3.83000000, 12.10000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16102( ref l_U647, "tb_PE_NearExitDoor", 55.59000000, -42.76000000, -3.60000000, 4.04000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16102( ref l_U582, "tb_PE_ButtonPOI", 59.59000000, -42.26000000, -3.50000000, 3.00000000, 3.00000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16102( ref l_U603, "tb_PE_ButtonAction", 58.71000000, -42.29000000, -3.50000000, 1.25000000, 1.25000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16102( ref l_U241, "tb_PE_CutSys_NearDoorExit", 55.47000000, -42.69000000, -3.40000000, 4.88000000, 4.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16102( ref l_U220, "tb_PE_DoorExit", 55.47000000, -44.84000000, -3.40000000, 2.29000000, 3.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16102( ref l_U899, "tb_PE_PlayerInSecurityBooth", 60.14000000, -39.86000000, -3.50000000, 3.83000000, 14.88000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_16854( ref l_U358, "te_PE_SecurityBoothLeftWindow", 60.01000000, -34.74000000, -3.50000000, 4.41000000, 2.03000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_16854( ref l_U357, "te_PE_InsideSecurityBooth", 60.01000000, -39.82000000, -3.50000000, 4.41000000, 15.31000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_16854( ref l_U359, "te_PE_PrisonerExchange", 49.12000000, -37.98000000, -3.50000000, 26.09000000, 19.09000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_16854( ref l_U360, "te_PE_Desk", 50.98000000, -33.42000000, -3.43000000, 2.39000000, 7.33000000, 3.00000000, 0.00000000, 0.00000000, 90.00000000, 1 );
     /* P_CREATEPOISTRUCTTRIGGER */ sub_17190( ref l_U496, 1, l_U624, l_U603, l_U582, 0, 0 );
     /* P_SET_INTERACTIVE_TEXT */ sub_17956( ref l_U496, 30, "POI_POLSECURITY" );
     /* P_CREATEPOISTRUCTCOORD */ sub_18196( ref l_U668, 2, l_U754, l_U754, l_U754, 1.50000000, 3.00000000, 1, 0 );
     /* P_SET_INTERACTIVE_TEXT */ sub_17956( ref l_U668, 30, "POI_PRISONERLOG" );
     /* P_SET_POI_FORCE_WALK */ sub_18358( ref l_U668, 0 );
     /* P_SET_POI_AVAILABLE */ sub_18413( ref l_U668, 0 );
     /* P_SET_POI_REUSABLE */ sub_18495( ref l_U668, 1 );
     /* P_CREATEDOORSTRUCT */ sub_18584( ref l_U930, -2084425897, 32.63453000, -34.34916000, -1.96272000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_18653( ref l_U930, 1 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_15502(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_16102(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_16854(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATEPOISTRUCTTRIGGER */ void sub_17190(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47, unknown uParam48)
{
     /* P_CREATEBLANKPOISTRUCT */ sub_17234( iParam0, uParam47 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU80 = 1;
    iParam0->_fU116 = {uParam5};
    iParam0->_fU88 = 1;
    iParam0->_fU216 = {uParam26};
    iParam0->_fU320 = uParam48;
    iParam0->_fU20 = {uParam2};
     /* P_CREATEPOIGLINT */ sub_17625( iParam0 );
    return;
}

/* P_CREATEBLANKPOISTRUCT */ void sub_17234(int iParam0, unknown uParam1)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = 0;
    iParam0->_fU8 = 0;
    iParam0->_fU12 = nil;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU52 = 1;
    iParam0->_fU56 = 1;
    iParam0->_fU60 = 0;
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = 0;
    iParam0->_fU80 = 0;
    iParam0->_fU84 = 0;
    iParam0->_fU100 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU112 = 0.00000000;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU96 = 0;
    iParam0->_fU200 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU212 = 0.00000000;
    iParam0->_fU300 = 0;
    iParam0->_fU304 = 1;
    iParam0->_fU308 = 0;
    iParam0->_fU324 = 1;
    iParam0->_fU328 = 0;
    iParam0->_fU340 = 0;
    iParam0->_fU336 = 0.20000000;
    return;
}

/* P_CREATEPOIGLINT */ void sub_17625(int iParam0)
{
    if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            REMOVE_GLINT( iParam0->_fU12 );
        }
    }
    iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
     /* P_INITPOIGLINT */ sub_17723( iParam0 );
    return;
}

/* P_INITPOIGLINT */ void sub_17723(int iParam0)
{
    if (iParam0->_fU0 == 1)
    {
        if (iParam0->_fU320 == 1)
        {
            if ((iParam0->_fU8 > 0) AND (iParam0->_fU4 == 0))
            {
                 /* P_ENABLEPOIGLINT */ sub_8148( iParam0, 1 );
            }
            else if ((iParam0->_fU8 < 2) AND (iParam0->_fU4 == 1))
            {
                 /* P_ENABLEPOIGLINT */ sub_8148( iParam0, 1 );
            }
            else if ((iParam0->_fU8 == 1) AND (iParam0->_fU4 == 2))
            {
                 /* P_ENABLEPOIGLINT */ sub_8148( iParam0, 1 );
            }
            else
            {
                 /* P_ENABLEPOIGLINT */ sub_8148( iParam0, 0 );
            };;;
        }
        else
        {
             /* P_ENABLEPOIGLINT */ sub_8148( iParam0, 0 );
        }
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_8148( iParam0, 0 );
    }
    return;
}

/* P_SET_INTERACTIVE_TEXT */ void sub_17956(int iParam0, unknown uParam1, unknown uParam2)
{
    StrCopy( ref iParam0->_fU32, uParam2, 16 );
    iParam0->_fU48 = uParam1;
     /* P_INITINTERACTIVETEXT */ sub_18012( iParam0 );
    return;
}

/* P_INITINTERACTIVETEXT */ void sub_18012(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND (iParam0->_fU0 == 1))
    {
        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
        {
            SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
            SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
    }
    return;
}

/* P_CREATEPOISTRUCTCOORD */ void sub_18196(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14)
{
     /* P_CREATEBLANKPOISTRUCT */ sub_17234( iParam0, uParam13 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU100 = {uParam5};
    iParam0->_fU112 = uParam11;
    iParam0->_fU200 = {uParam8};
    iParam0->_fU212 = uParam12;
    iParam0->_fU320 = uParam14;
    iParam0->_fU20 = {uParam2};
     /* P_CREATEPOIGLINT */ sub_17625( iParam0 );
    return;
}

/* P_SET_POI_FORCE_WALK */ void sub_18358(int iParam0, unknown uParam1)
{
    iParam0->_fU324 = uParam1;
    return;
}

/* P_SET_POI_AVAILABLE */ void sub_18413(int iParam0, int iParam1)
{
    if (iParam1 == 0)
    {
        iParam0->_fU60 = 1;
    }
    else
    {
        iParam0->_fU60 = 0;
    }
     /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_8547( iParam0 );
    return;
}

/* P_SET_POI_REUSABLE */ void sub_18495(int iParam0, unknown uParam1)
{
    iParam0->_fU68 = uParam1;
    return;
}

/* P_CREATEDOORSTRUCT */ void sub_18584(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

/* P_SETDOORLOCKED */ void sub_18653(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_18683( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_18767( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_18683(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_18767(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_REQUEST_PE_PERSISTENT_ASSETS */ void sub_19100()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_REQUEST_PE_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_19201( ref l_U145, ref g_U2468 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22123( ref g_U3553, ref g_U2741 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_24006( ref g_U3489, ref g_U2889 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_25908( ref l_U153, ref g_U2613 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_REQUEST_PE_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_19201(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_19274( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_19274(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_19341( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19599( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_19341(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19599( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19599( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19599( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_21130( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19599( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19599( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_19599(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19660( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_19660(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_21130(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_22123(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_22175( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22427( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_22175(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22427( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22427( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22427( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_21130( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22427( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22427( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_22427(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19660( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_24006(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_24059( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24314( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_24059(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24314( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24314( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24314( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_21130( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24314( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24314( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_24314(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19660( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_25908(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_25982( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_25982(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_26036( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_26297( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_26036(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_26297( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_26297( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_26297( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_21130( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_26297( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_26297( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_26297(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19660( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_PE_NONPERSISTENT_ASSETS */ void sub_27987()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_REQUEST_PE_NONPERSISTENT_ASSETS start", 0 );
    if ((l_U160) AND (g_U820 != 3))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "Preloading PRECINCT_ONESHOT_2.", 0 );
        AUDIO_MUSIC_REQUEST_ONESHOT( "PRECINCT_ONESHOT_2", 0 );
    }
     /* P_STREAMREQ_ISEQ_INSERT */ sub_28187( 1695938919, ref g_U2662 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_REQUEST_PE_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_28187(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_28248( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28498( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_28248(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28498( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28498( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28498( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28498( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_21130( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_21130( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28498( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28498( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_28498(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19660( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_31114(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_31511(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_31902(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_32316(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_32690(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_33327(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_523( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_10083( uParam0,  /* PLAYER_PED_ID */ sub_1031() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_33837(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_523( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_523( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_13349( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_34128( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_34605( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_34605( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_34865( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_34605( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_34865( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_34865( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_34605( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_34865( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_34865( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_34865( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_34605( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_34865( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_34865( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_34865( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_34865( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_36445( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_34128(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_10364( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_523( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_523( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_34605(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_34865(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_36445(int iParam0)
{
     /* WRITE_STRING */ sub_12184( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_36533( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_36610( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_36610( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_36610( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_36610( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_36610( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_37480( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU52 );
     /* WRITE_STRING */ sub_12184( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU96 );
     /* WRITE_STRING */ sub_12184( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU100 );
     /* WRITE_STRING */ sub_12184( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU104 );
     /* WRITE_STRING */ sub_12184( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU108 );
     /* WRITE_STRING */ sub_12184( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU112 );
     /* WRITE_STRING */ sub_12184( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU116 );
     /* WRITE_STRING */ sub_12184( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU120 );
     /* WRITE_STRING */ sub_12184( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU124 );
     /* WRITE_STRING */ sub_12184( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU128 );
     /* WRITE_STRING */ sub_12184( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_36779( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_36779( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_36779( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_36533(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_36610(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_36779(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_37480(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_PE_CREATE_START_ENEMIES */ void sub_38536()
{
    switch (l_U262)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_PE_EnemySpawn = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_38669( ref l_U350, 1056964608, 0 );
        l_U263 = 0;
        l_U262 = 2;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_PE_EnemySpawn = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        l_U343[l_U263] =  /* CREATEPED */ sub_39135( ref l_U264[l_U263] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_40111( l_U343[l_U263], ref l_U350 );
        if (NOT (IS_PED_DEAD( l_U343[l_U263] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U343[l_U263], ref g_U3245 );
            SET_PED_AI_TEMPLATE( l_U343[l_U263], "AIT_EXPERT" );
            if (l_U263 != 3)
            {
                SET_PED_COMBAT_RANGE_MAX( l_U343[l_U263], 10.00000000 );
            }
            SET_PED_ALERTNESS( l_U343[l_U263], 3 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U343[l_U263], 1 );
            SET_PED_FLAG_AGGRESSIVE_CHARGER( l_U343[l_U263], 1 );
            SET_PED_RELATIONSHIP( l_U343[l_U263], 2, 4 );
        }
        l_U263++;
        if (l_U263 >= 6)
        {
            l_U262 = 3;
             /* WRITESCRIPTLOG */ sub_523( "GA", "e_PE_EnemySpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_40804( ref l_U343, "pi_PE_Enemy" );
         /* F_GIVEPEDWEAPON */ sub_12575( l_U343[0], 434544317, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_12575( l_U343[1], 434544317, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_12575( l_U343[2], 1308526797, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_12575( l_U343[3], 1308526797, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_12575( l_U343[4], -862236369, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_12575( l_U343[5], -862236369, 25000, 0, 0 );
         /* P_DEACTIVATEPEDARRAY */ sub_41082( ref l_U343 );
        l_U262 = 4;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_PE_EnemySpawn = ENTITY_STATE_COMPLETE", 0 );
        break;
    }
    return;
}

/* P_SETUP_AI_GROUP */ void sub_38669(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* CREATEPED */ void sub_39135(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_39317( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_39866( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_39967( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_39317(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_12184( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_39866(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_39967(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_40111(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_12184( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_38669( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_38669( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_40804(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_DEACTIVATEPEDARRAY */ void sub_41082(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_41136( (uParam0^)[I] );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_41136(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* P_PE_CREATE_START_PRISONERS */ void sub_41388()
{
    unknown uVar2;
    int I;

    switch (l_U409)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_PE_PrisonerSpawn = ENTITY_STATE_INIT", 0 );
        l_U410 = 0;
        l_U409 = 2;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_PE_PrisonerSpawn = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        l_U451[l_U410] =  /* CREATEPED */ sub_39135( ref l_U411[l_U410] );
        uVar2 =  /* F_GIVEPEDWEAPON */ sub_12575( l_U451[l_U410], -862236369, 25000, 0, 0 );
        SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 100 );
        if (NOT (IS_PED_DEAD( l_U451[l_U410] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U451[l_U410], ref g_U3245 );
            SET_PED_AI_TEMPLATE( l_U451[l_U410], "AIT_NOVICE" );
            SET_PED_ALERTNESS( l_U451[l_U410], 3 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U451[l_U410], 1 );
            SET_PED_RELATIONSHIP( l_U451[l_U410], 2, 3 );
        }
        l_U410++;
        if (l_U410 >= 3)
        {
            l_U409 = 3;
             /* WRITESCRIPTLOG */ sub_523( "GA", "e_PE_PrisonerSpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_40804( ref l_U451, "pi_PE_Prisoner" );
         /* P_CREATE_DEAD_BODY */ sub_41934( l_U451[0], 3 );
         /* P_CREATE_DEAD_BODY */ sub_41934( l_U451[1], 4 );
         /* P_CREATE_DEAD_BODY */ sub_41934( l_U451[2], 5 );
        for ( I = 0; I < l_U451; I++ )
        {
            SET_PED_VISIBLE( l_U451[I], 0 );
        }
        l_U409 = 4;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_PE_PrisonerSpawn = ENTITY_STATE_COMPLETE", 0 );
        break;
    }
    return;
}

/* P_CREATE_DEAD_BODY */ void sub_41934(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
         /* WRITE_STRING */ sub_12184( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

/* P_PE_CREATE_DEAD_COP */ void sub_43058()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_PE_CREATE_DEAD_COP start", 0 );
    l_U479 =  /* CREATEPED */ sub_39135( ref l_U466 );
    if (NOT (IS_PED_DEAD( l_U479 )))
    {
        SET_ROOM_FOR_PED_BY_NAME( l_U479, ref g_U3245 );
        SET_PED_NAME_DEBUG( l_U479, "pi_PE_DeadCop" );
    }
     /* P_CREATE_DEAD_BODY */ sub_41934( l_U479, 0 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_PE_CREATE_DEAD_COP end", 0 );
    return;
}

/* P_PE_CREATE_EXIT_DOORS_AND_BUTTONS */ void sub_43495()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_PE_CREATE_EXIT_DOORS_AND_BUTTONS start", 0 );
    l_U494 =  /* CREATEOBJECTNOOFFSET */ sub_43636( -1185104559, 54.45000000, -43.91000000, -3.91000000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U494 ))
    {
        FREEZE_OBJECT_POSITION( l_U494, 1 );
        SET_OBJECT_AS_PATH_OBSTACLE( l_U494 );
    }
    l_U487 =  /* CREATEOBJECTNOOFFSET */ sub_43636( l_U486, 58.11400000, -42.57600000, -2.02600000, 0.00000000, 0.00000000, -90.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U487 ))
    {
        FREEZE_OBJECT_POSITION( l_U487, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U487, ref g_U3245 );
    }
    l_U489 =  /* CREATEOBJECTNOOFFSET */ sub_43636( l_U488, 58.11400000, -42.57600000, -2.02600000, 0.00000000, 0.00000000, -90.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U489 ))
    {
        FREEZE_OBJECT_POSITION( l_U489, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U489, ref g_U3245 );
        SET_OBJECT_VISIBLE( l_U489, 0 );
    }
    l_U493 =  /* CREATEOBJECTNOOFFSET */ sub_43636( l_U492, 58.11400000, -42.57000000, -1.85000000, 0.00000000, 0.00000000, -90.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U493 ))
    {
        FREEZE_OBJECT_POSITION( l_U493, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U493, ref g_U3245 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_PE_CREATE_EXIT_DOORS_AND_BUTTONS end", 0 );
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_43636(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_39317( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_DROP_PRE_RIOT_PRECINCT_STREAMHELPERS */ void sub_44481()
{
     /* WRITESCRIPTLOG */ sub_523( "CMT", "Removing pre-riot interiors...", 0 );
    SET_HELPER_ENABLED( "cs_13_01_B", 0, 0 );
    SET_HELPER_ENABLED( "cs_13_01_A", 0, 0 );
    SET_HELPER_ENABLED( "cs_13_01_C", 0, 0 );
    SET_HELPER_ENABLED( "MILO_cell_preriot_interior", 0, 1 );
    SET_HELPER_ENABLED( "exchange_pre_interior", 0, 1 );
    return;
}

/* CUTSYS_DEFAULT_PRECUTSCENESETUP */ int sub_44829()
{
    return 1;
}

/* P_PE_MID_02_PP_CUTSCENEREGISTRATION */ void sub_44882()
{
    unknown uVar2;
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_523( "GA", "P_PE_MID_02_PP_CutsceneRegistration start", 0 );
    if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( g_U3680._fU0, g_U3680._fU4 ) ))
    {
        REGISTER_OBJECT_PRE_SEAMLESS_CUTSCENE( DOOR_FIND_CLOSEST( g_U3680._fU0, g_U3680._fU4 ), "p_pex_door_H", 0 );
    }
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1031(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            if ( /* IS_WEAPON_SINGLE_HANDED */ sub_45114( uVar2 ))
            {
                REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_Clt1911_Aa_H", 0 );
            }
            else
            {
                uVar3 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_45369();
                if (GET_DOES_WEAPON_EXIST( uVar3 ))
                {
                    REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar3, "W_PI_Clt1911_Aa_H", 0 );
                }
            }
        }
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_1031(), g_U2953[3], g_U3083[3] );
        CUTSCENE_REGISTER_SET_PLAYER_IN_COVER( "GenCover", "2C3CBEE5_673F1030_Corner1", 1, 1 );
        CUTSCENE_SET_COVER_CAMERA_DIRECTION( g_U3127[3], g_U3171[3] );
    }
    if (NOT (IS_PED_DEAD( l_U343[0] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U343[0], "P_UFE_Sold_B", 0 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( l_U343[0], "/Global/PLGE/NpcCover_LOGIC/COVER_EDGE/COVER_IDLE/COVER_IDLE_LEFT/COVER_EDGE_IDLE_LEFT" );
        SET_PED_FLAG_LOCK_TO_COVER( l_U343[0], 1 );
        CUTSCENE_REGISTER_SET_PED_IN_COVER( l_U343[0], "GenCover", "2C3CBEE5_5649BCD5_Popover1", 0, 1 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U343[0], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_SG_BenM3_Aa_H", 0 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U343[1] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U343[1], "P_UFE_Sold_B^1", 0 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( l_U343[1], "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_IDLE" );
        CUTSCENE_REGISTER_PED_TELEPORT( l_U343[1], l_U264[1]._fU0, l_U264[1]._fU12 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U343[1], 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_SG_BenM3_Aa_H^1", 0 );
        }
    }
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "G_PP_Riot_B", l_U411[0]._fU20 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "G_PP_Riot_B^1", l_U411[1]._fU20 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "G_PP_Riot_B^2", l_U411[2]._fU20 );
    CUTSCENE_ENABLE_SKIP( 0 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_PE_MID_02_PP_CutsceneRegistration end", 0 );
    return;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_45114(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_45369()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1031(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_45114( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1031(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1031(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1031(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* P_PE_MID_02_PP_HANDLECUTSCENE */ void sub_46424()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;

    if (l_U162._fU52)
    {
        if (IS_SCREEN_FADED_OUT())
        {
            DO_SCREEN_FADE_IN( 0 );
        }
        if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1069() ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))))
        {
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1069(), 1 );
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1031(), 0 );
        }
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
        {
            uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1031(), 0, 0 );
            if (GET_DOES_WEAPON_EXIST( uVar2 ))
            {
                if ( /* IS_WEAPON_SINGLE_HANDED */ sub_45114( uVar2 ))
                {
                    uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1031(), 1, 0 );
                    if (GET_DOES_WEAPON_EXIST( uVar3 ))
                    {
                        SET_WEAPON_VISIBLE( uVar3, 0 );
                    }
                    uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1031(), 2 );
                    if (GET_DOES_WEAPON_EXIST( uVar4 ))
                    {
                        SET_WEAPON_VISIBLE( uVar4, 0 );
                    }
                }
                else
                {
                    SET_WEAPON_VISIBLE( uVar2, 0 );
                }
            }
        }
         /* WRITESCRIPTLOG */ sub_523( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_2_3 fade in over 6 seconds", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_2_3", "", 0, 6000, -1, -1082130432, 0 );
        AUDIO_MUSIC_STOP_ONESHOT();
         /* WRITESCRIPTLOG */ sub_523( "AT", "Playing music one shot PRECINCT_ONESHOT_2", 0 );
        AUDIO_MUSIC_PLAY_ONESHOT();
        ENABLE_WALLA_ZONE( "S_POLICE_WZ_TRANSFER", 0 );
        ENABLE_AMBIENT_ZONE( "S_POLICE_ZONE_TRANSFER_GUNFIGHT", 0 );
         /* NIS_CREATE_STATIC_CAM */ sub_47047( ref l_U189, 29.11601000, -37.59030000, -1.44745100, -3.74997000, -0.00000000, -90.00000000, 45, 300 );
         /* NIS_PLAY_STATIC_CAMERA */ sub_47282( ref l_U189 );
    }
    if ((NOT l_U850) AND (GET_CUTSCENE_TIME_MS() > 11743))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_2_3_4", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_2_3_4", "", 0, 3000, -1, -1082130432, 0 );
        l_U850 = 1;
    }
    return;
}

/* NIS_CREATE_STATIC_CAM */ void sub_47047(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_1815( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref l_U39, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* NIS_PLAY_STATIC_CAMERA */ void sub_47282(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_1965( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* CUTSYS_DEFAULT_POSTCUTSCENE */ int sub_47556()
{
    return 1;
}

/* P_PE_MID_02_PP_PREPAREBLENDOUT */ void sub_47605()
{
    int I;

    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U3127[3], 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U3171[3], 1065353216, 0 );
     /* NIS_CREATE_STATIC_CAM */ sub_47047( ref l_U189, 29.11601000, -37.59030000, -1.44745100, -3.74997000, -0.00000000, -90.00000000, 45, 300 );
     /* NIS_PLAY_STATIC_CAMERA */ sub_47282( ref l_U189 );
    if (NOT l_U160)
    {
         /* TELEPORTPED */ sub_9725(  /* PLAYER_PED_ID */ sub_1031(), g_U2953[3], g_U3083[3] );
        if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1069() )))
        {
            SNAP_PLAYER_TO_COVERPOINT(  /* PLAYER_ID */ sub_1069(), "GenCover", "2C3CBEE5_673F1030_Corner1", 1 );
        }
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U3127[3], 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U3171[3], 1065353216, 0 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "F_PE_START_GAMEPLAY start", 0 );
     /* P_CLOSEDOOR */ sub_47945( ref g_U3694, 1 );
     /* P_SETDOORLOCKED */ sub_18653( ref g_U3694, 1 );
     /* P_SETDOORLATCH */ sub_48099( ref g_U3694, 0 );
     /* P_CLOSEDOOR */ sub_47945( ref g_U3680, 1 );
     /* P_SETDOORLOCKED */ sub_18653( ref g_U3680, 1 );
     /* P_OPENDOOR */ sub_48206( ref g_U3701, 0, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_48099( ref g_U3701, 1 );
     /* P_CLOSEDOOR */ sub_47945( ref g_U3715, 1 );
     /* P_SETDOORLOCKED */ sub_18653( ref g_U3715, 1 );
     /* P_ACTIVATEPEDARRAY */ sub_48399( ref l_U343 );
    for ( I = 0; I < l_U451; I++ )
    {
        SET_PED_VISIBLE( l_U451[I], 1 );
    }
     /* P_SETUP_ENEMY_0 */ sub_48627();
     /* P_SETUP_ENEMY_1 */ sub_48974();
     /* P_SETUP_ENEMY_2 */ sub_49362();
     /* P_SETUP_ENEMY_3 */ sub_49750();
     /* P_SETUP_ENEMY_4 */ sub_49938();
     /* P_SETUP_ENEMY_5 */ sub_50248();
     /* P_SETDOORLOCKED */ sub_18653( ref g_U3694, 0 );
     /* P_OPENDOOR */ sub_48206( ref g_U3694, 0, 0, 1065353216 );
     /* P_SETDOORLATCH */ sub_48099( ref g_U3694, 1 );
     /* CREATETIMER */ sub_1815( ref l_U457, GET_RANDOM_INT_IN_RANGE( l_U455, l_U456 ), 1, 0 );
     /* STARTTIMER */ sub_1965( ref l_U457 );
     /* WRITESCRIPTLOG */ sub_523( "AT", "Preloading PRECINCT_ONESHOT_1.", 0 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "PRECINCT_ONESHOT_1", 0 );
     /* WRITESCRIPTLOG */ sub_523( "AT", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_2_3_4", 0 );
    AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_2_3_4", "", 0, 3000, -1, -1082130432, 0 );
    CUTSCENE_ENABLE_SKIP( 1 );
    return;
}

/* P_CLOSEDOOR */ void sub_47945(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_18683( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_18767( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* P_SETDOORLATCH */ void sub_48099(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_18683( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_18767( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_OPENDOOR */ void sub_48206(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if (( /* F_DOESDOOREXIST */ sub_18683( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_18767( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_48399(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_48451( (uParam0^)[I] );
    }
    return;
}

/* P_ACTIVATEPED */ void sub_48451(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_SETUP_ENEMY_0 */ void sub_48627()
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD( l_U343[0] ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "P_SETUP_ENEMY_0.", 0 );
        if (NOT (IS_PED_USING_MP3_COVER_TASK( l_U343[0] )))
        {
            TASK_COMBAT_SNAP_TO_COVER( l_U343[0], "GenCover", "2C3CBEE5_5649BCD5_Popover1", 0 );
        }
         /* P_TETHERPED */ sub_48810( ref l_U360, l_U343[0], 1 );
        SET_PED_FLAG_LOCK_TO_COVER( l_U343[0], 1 );
        SET_PED_SUGGESTED_COVER_POINT( l_U343[0], "GenCover", "2C3CBEE5_5649BCD5_Popover1" );
    }
    return;
}

/* P_TETHERPED */ void sub_48810(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_SETUP_ENEMY_1 */ void sub_48974()
{
    unknown uVar2;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD( l_U343[1] ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "P_SETUP_ENEMY_1.", 0 );
         /* P_TETHERPED */ sub_48810( ref l_U359, l_U343[1], 1 );
        SET_PED_SUGGESTED_COVER_POINT( l_U343[1], "GenCover", "2C3CBEE5_7760F35B_Corner2" );
        REGISTER_TARGET( l_U343[1],  /* PLAYER_PED_ID */ sub_1031() );
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        if (NOT (IS_PED_DEAD( l_U451[0] )))
        {
            TASK_SHOOT_AT_PED( 0, l_U451[0], 500, -256437761, 0, 0, 0 );
        }
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 43.81000000, -40.19000000, -3.40000000, 3, 20000, 0.25000000, 256, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_MOVE_TO_COVER( 0, "GenCover", "2C3CBEE5_7760F35B_Corner2", 0 );
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( l_U343[1], uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
    }
    return;
}

/* P_SETUP_ENEMY_2 */ void sub_49362()
{
    unknown uVar2;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD( l_U343[2] ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "P_SETUP_ENEMY_2.", 0 );
         /* P_TETHERPED */ sub_48810( ref l_U359, l_U343[2], 1 );
        SET_PED_SUGGESTED_COVER_POINT( l_U343[2], "GenCover", "2C3CBEE5_6D8EDFB7_Corner1" );
        REGISTER_TARGET( l_U343[2],  /* PLAYER_PED_ID */ sub_1031() );
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        if (NOT (IS_PED_DEAD( l_U451[1] )))
        {
            TASK_SHOOT_AT_PED( 0, l_U451[1], 500, -256437761, 0, 0, 0 );
        }
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 41.90000000, -35.09000000, -3.40000000, 3, 20000, 0.25000000, 256, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_MOVE_TO_COVER( 0, "GenCover", "2C3CBEE5_6D8EDFB7_Corner1", 0 );
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( l_U343[2], uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
    }
    return;
}

/* P_SETUP_ENEMY_3 */ void sub_49750()
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD( l_U343[3] ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "P_SETUP_ENEMY_3.", 0 );
         /* P_TETHERPED */ sub_48810( ref l_U358, l_U343[3], 1 );
        SET_PED_FLAG_LOCK_TO_COVER( l_U343[3], 1 );
        REGISTER_TARGET( l_U343[3],  /* PLAYER_PED_ID */ sub_1031() );
        TASK_COMBAT_MOVE_TO_COVER_COORDS( l_U343[3], 60.11000000, -34.80000000, -3.40000000, 0 );
    }
    return;
}

/* P_SETUP_ENEMY_4 */ void sub_49938()
{
    if ((NOT (IS_PED_DEAD( l_U343[4] ))) AND (NOT (IS_PED_DEAD( l_U343[4] ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "P_SETUP_ENEMY_4.", 0 );
         /* P_TETHERPED */ sub_48810( ref l_U357, l_U343[4], 1 );
        SET_PED_SUGGESTED_COVER_POINT( l_U343[4], "GenCover", "2C3CBEE5_C8589875_Popover2" );
        SET_PED_FLAG_LOCK_TO_COVER( l_U343[4], 1 );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U343[4], 1 );
        SET_PED_FLAG_BLOCK_BLINDFIRE_IN_COVER( l_U343[4], 1 );
        SET_PED_FLAG_BLOCK_LEANFIRE_IN_COVER( l_U343[4], 1 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U343[4], 0 );
        REGISTER_TARGET( l_U343[4],  /* PLAYER_PED_ID */ sub_1031() );
        TASK_COMBAT_MOVE_TO_COVER_COORDS( l_U343[4], 60.12000000, -42.36000000, -3.40000000, 0 );
    }
    return;
}

/* P_SETUP_ENEMY_5 */ void sub_50248()
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD( l_U343[5] ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "P_SETUP_ENEMY_5.", 0 );
         /* P_TETHERPED */ sub_48810( ref l_U357, l_U343[5], 1 );
        SET_PED_SUGGESTED_COVER_POINT( l_U343[5], "GenCover", "2C3CBEE5_98205D89_Corner2" );
        SET_PED_FLAG_LOCK_TO_COVER( l_U343[5], 1 );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U343[5], 1 );
        SET_PED_FLAG_BLOCK_BLINDFIRE_IN_COVER( l_U343[5], 1 );
        SET_PED_FLAG_BLOCK_LEANFIRE_IN_COVER( l_U343[5], 1 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U343[5], 0 );
        REGISTER_TARGET( l_U343[5],  /* PLAYER_PED_ID */ sub_1031() );
        TASK_COMBAT_SNAP_TO_COVER( l_U343[5], "GenCover", "2C3CBEE5_98205D89_Corner2", 0 );
    }
    return;
}

/* F_PE_MID_02_HANDLEBLENDOUT */ int sub_50867()
{
    if ((IS_SCREEN_FADED_OUT()) || (IS_DEATH_PANEL_WIPE_ALLOWED()))
    {
        DO_SCREEN_FADE_IN( 0 );
    }
    if ( /* NIS_IS_SHOT_FINISHED */ sub_50939( ref l_U189, 1 ))
    {
         /* NIS_RETURN_TO_GAMEPLAY_CAM */ sub_51116( 500, 1, 0, -859915232, -859915232, 0 );
        return 1;
    }
    return 0;
}

/* NIS_IS_SHOT_FINISHED */ int sub_50939(int iParam0, boolean bParam1)
{
    if (bParam1 == 1)
    {
        if (NOT iParam0->_fU44)
        {
            if ((ref iParam0->_fU48->_fU16) || ( /* ISTIMERDONE */ sub_2331( iParam0 + 48 )))
            {
                iParam0->_fU44 = 1;
                iParam0->_fU36 = 1;
                return 1;
            }
        }
    }
    if (NOT bParam1)
    {
        if ((ref iParam0->_fU48->_fU16) || ( /* ISTIMERDONE */ sub_2331( iParam0 + 48 )))
        {
            iParam0->_fU36 = 1;
            return 1;
        }
    }
    return 0;
}

/* NIS_RETURN_TO_GAMEPLAY_CAM */ void sub_51116(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, float fParam4, unknown uParam5)
{
    SET_CAM_SIDE_LEFT( uParam2 );
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam3, 1065353216, 0 );
    }
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( fParam4, 1065353216, 0 );
    }
    RENDER_SCRIPT_CAMS( 0, uParam1, uParam0, uParam5 );
    return;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_51259(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_523( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_51483( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 51380, 51430, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_51380()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_51430()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_51483(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ void sub_51809(int iParam0, unknown uParam1, unknown uParam2)
{
    iParam0->_fU68 = 1;
    iParam0->_fU72 = 1;
    iParam0->_fU76 = uParam1;
    iParam0->_fU80 = uParam2;
    iParam0->_fU24 = 1;
    return;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_51951(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_523( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_523( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_523( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_523( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_523( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_523( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_52753( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_523( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_53177( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_53177( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_523( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_53721( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_53177( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_54101( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_54101( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* LOADSEAMLESSCUTSCENE */ void sub_52753(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* NIS_PRE_SETUP */ void sub_53177(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1069(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1031(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1031() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1031(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_53721(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1031(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1031(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1031(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1031(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1031(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_54101(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1069(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1031(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_54199();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_54199()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1031(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1031(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1031(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1031(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_PE_CREATE_PLACEMENTS */ void sub_54670()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_PE_CREATE_PLACEMENTS start", 0 );
    l_U480[0] =  /* CREATEPLACEMENT */ sub_54786( -4072149, 29.47000000, -47.34000000, -1.75000000, 0, 0, 0.40000000, 0, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U480[0], ref g_U3245 );
    l_U480[2] =  /* CREATEPLACEMENT */ sub_54786( -4072149, 61.14000000, -42.42000000, -2.49000000, 0, 0, 0.40000000, 0, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U480[2], ref g_U3245 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_PE_CREATE_PLACEMENTS end", 0 );
    return;
}

/* CREATEPLACEMENT */ void sub_54786(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_55113(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_55179( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_55179(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_9146( uParam0 );
            }
        }
    }
    return;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_55316(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55369( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_55369(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* P_PE_HANDLE_PRISONER_LOG_EXPLORATION */ void sub_55592()
{
    if ( /* F_HANDLE_POI */ sub_55645( ref l_U668 ))
    {
         /* WRITESCRIPTLOG */ sub_523( "GA", "Starting Prisoner Entry Log investigation.", 0 );
         /* NIS_PRE_SETUP */ sub_53177( 1, 0, 0, 1 );
         /* NIS_CREATE_STATIC_CAM */ sub_47047( ref l_U767, 59.81000000, -46.57000000, -1.92000000, -7.76000000, 0.00000000, -179.31000000, 45, 4000 );
         /* NIS_PLAY_STATIC_CAMERA */ sub_47282( ref l_U767 );
        SHAKE_CAM( l_U767._fU0, "HAND_SHAKE", 1.50000000 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
        {
            CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1031() );
            RESET_PLAYER_INPUT_GAIT( 0 );
             /* P_RESET_MAX_ACTION_TREE */ sub_57718();
            SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1031(), 0 );
        }
         /* TELEPORTPED */ sub_9725(  /* PLAYER_PED_ID */ sub_1031(), 59.94000000, -46.05000000, -3.40000000, 171.00000000 );
        SET_FORCED_AIM_INTENTION_DIRECTION( 0.06417900, -0.94074600, 0.33298400 );
        SET_PED_DEFAULT_AIM_AHEAD(  /* PLAYER_PED_ID */ sub_1031() );
        if (NOT (HAS_EXPLORATION_ITEM_BEEN_FOUND( "spol_PrisonLog" )))
        {
             /* KILL_ANY_MISSION_SPEECH */ sub_58166( 0 );
             /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2598( ref l_U757 );
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_58393( "SPOL_MXNSPKT", ref l_U757 );
            FOUND_EXPLORATION_ITEM( "spol_PrisonLog" );
        }
        l_U798 = 1;
    }
    if (( /* F_POI_CAN_PLAY_UNAVALIABLE_MONO */ sub_58532( ref l_U668 )) == 1)
    {
         /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2598( ref l_U920 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2709( 0,  /* PLAYER_PED_ID */ sub_1031(), "MAX", ref l_U920, 2, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2709( 1,  /* PLAYER_PED_ID */ sub_1031(), "MAX", ref l_U920, 2, 0 );
         /* PLAY_SINGLE_SPEECH */ sub_2979( "EXPLORE_ITEM", ref l_U920, 8, 1 );
    }
    if (l_U798)
    {
        if ((NOT ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_4227( l_U757 ))) AND ( /* NIS_IS_SHOT_FINISHED */ sub_50939( ref l_U767, 0 )))
        {
             /* WRITESCRIPTLOG */ sub_523( "GA", "Ending prisoner log exploration item.", 0 );
             /* NIS_RETURN_TO_GAMEPLAY_CAM */ sub_51116( 0, 0, 0, 10.00000000, -3.35000000, 0 );
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1031(), 1 );
            }
             /* NIS_POST_SETUP */ sub_54101( 1, 1 );
            RESET_FORCED_AIM_INTENTION_DIRECTION();
            CLEAR_PED_DEFAULT_AIM(  /* PLAYER_PED_ID */ sub_1031() );
             /* P_ENABLE_POI */ sub_8089( ref l_U668, 1 );
            l_U798 = 0;
        }
    }
    return;
}

/* F_HANDLE_POI */ int sub_55645(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    int iVar6;
    int iVar7;
    int iVar8;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )) == 0)
    {
        if (iParam0->_fU0 == 1)
        {
            uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_1031() )};
            iVar6 = 0;
            if (iParam0->_fU80 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_55746(  /* PLAYER_PED_ID */ sub_1031(), iParam0->_fU116 )) == 1)
                {
                    if (iParam0->_fU300 == 1)
                    {
                        if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                        {
                            iVar6 = 1;
                        }
                    }
                    else
                    {
                        iVar6 = 1;
                    }
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU84 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_PED_ON_SCREEN( iParam0->_fU316, 0 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU100, 1 )) <= iParam0->_fU112)
            {
                if (iParam0->_fU300 == 1)
                {
                    if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                    {
                        iVar6 = 1;
                    }
                }
                else
                {
                    iVar6 = 1;
                }
            };;;;
            iVar7 = 0;
            if (iParam0->_fU88 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_55746(  /* PLAYER_PED_ID */ sub_1031(), iParam0->_fU216 )) == 1)
                {
                    iVar7 = 1;
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU92 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU200, 1 )) <= iParam0->_fU212)
            {
                iVar7 = 1;
            };;;;
            if (iVar6 == 1)
            {
                if ((iParam0->_fU4 != 3) AND (iParam0->_fU52 == 1))
                {
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_8547( iParam0 );
                    }
                    iVar8 = 0;
                    if ((IS_WEAPON_PICKUP_VISIBLE() == 0) AND ((iParam0->_fU60 == 0) AND (( /* F_ISACTIONINGAVAILABLE */ sub_8643( iParam0 )) == 1)))
                    {
                        SET_ACTION_CONSUMED( 0, 1 );
                        if (( /* F_HASACTIONBEENPRESSED */ sub_56609()) == 1)
                        {
                            iVar8 = 1;
                        }
                    }
                    if (iVar8 == 1)
                    {
                        if (iParam0->_fU332 == 0)
                        {
                             /* P_ENABLE_POI */ sub_8089( iParam0, 0 );
                            iParam0->_fU64 = 1;
                        }
                        if (iParam0->_fU68 == 1)
                        {
                            iParam0->_fU72 = 0;
                        }
                        return 1;
                    }
                    else if (iParam0->_fU8 != 2)
                    {
                        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                        {
                             /* P_ENABLEPOIGLINT */ sub_8148( iParam0, 0 );
                             /* P_ENABLEPOIINTERACTIONTEXT */ sub_8367( iParam0, 1 );
                        }
                        else if (iParam0->_fU320 == 1)
                        {
                             /* P_ENABLEPOIGLINT */ sub_8148( iParam0, 1 );
                        }
                        iParam0->_fU8 = 2;
                    }
                    if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                    {
                        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )) == 0)
                        {
                            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1031(), 1 );
                            iParam0->_fU328 = 1;
                        }
                    }
                }
            }
            else if (iVar7 == 1)
            {
                if (iParam0->_fU8 != 1)
                {
                    if ((iParam0->_fU4 != 3) AND (iParam0->_fU320 == 1))
                    {
                         /* P_ENABLEPOIGLINT */ sub_8148( iParam0, 1 );
                    }
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_ENABLEPOIINTERACTIONTEXT */ sub_8367( iParam0, 0 );
                    }
                    if (iParam0->_fU96 == 1)
                    {
                        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )) == 0) AND ((((IS_PED_DEAD( iParam0->_fU316 )) == 1) || ((IS_PED_DEAD( iParam0->_fU316 )) == 0)) AND ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)))
                        {
                            TASK_LOOK_AT_PED(  /* PLAYER_PED_ID */ sub_1031(), iParam0->_fU316, -1, 0 );
                        }
                    }
                    else if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )) == 0)
                    {
                        TASK_LOOK_AT_COORD(  /* PLAYER_PED_ID */ sub_1031(), iParam0->_fU100, -1, 0 );
                    }
                    iParam0->_fU340 = 1;
                    if ((iParam0->_fU72 == 0) AND ((iParam0->_fU68 == 1) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU8 == 2))))
                    {
                        iParam0->_fU72 = 1;
                    }
                    iParam0->_fU8 = 1;
                }
                if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                {
                    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )) == 0)
                    {
                        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1031(), 1 );
                        iParam0->_fU328 = 1;
                    }
                }
            }
            else if ((iParam0->_fU4 == 1) || (iParam0->_fU4 == 3))
            {
                ;
            }
            else if (iParam0->_fU8 != 0)
            {
                if (iParam0->_fU320 == 1)
                {
                     /* P_ENABLEPOIGLINT */ sub_8148( iParam0, 0 );
                }
            }
            if (iParam0->_fU8 == 2)
            {
                if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                {
                     /* P_ENABLEPOIINTERACTIONTEXT */ sub_8367( iParam0, 0 );
                }
            }
            if (iParam0->_fU340)
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )) == 0)
                {
                    TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_1031() );
                    iParam0->_fU340 = 0;
                }
            }
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )) == 0)
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1031(), 0 );
                    iParam0->_fU328 = 0;
                }
            }
            if (iParam0->_fU332 == 1)
            {
                 /* P_ENABLEPOIINTERACTIONTEXT */ sub_8367( iParam0, 0 );
            }
            iParam0->_fU8 = 0;;;
        }
    }
    return 0;
}

/* F_ISPEDINTRIGGERBOX */ int sub_55746(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* F_HASACTIONBEENPRESSED */ int sub_56609()
{
    if ((IS_CONTROL_JUST_PRESSED( 0, 30 )) == 1)
    {
        return 1;
    }
    return 0;
}

/* P_RESET_MAX_ACTION_TREE */ void sub_57718()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_RESET_MAX_ACTION_TREE start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() )))
    {
        if (IS_PLAYER_SHOOTDODGING())
        {
            SCRIPT_ASSERT( "Do not try to reset Max's action tree when he is shoot dodging.", 0 );
             /* WRITESCRIPTLOG */ sub_523( "GA", "You cannot reset Max's action tree during a shoot dodge.", 0 );
        }
        else
        {
            PED_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_1031(), "/Global/Player" );
        }
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_RESET_MAX_ACTION_TREE end", 0 );
    return;
}

/* KILL_ANY_MISSION_SPEECH */ void sub_58166(unknown uParam0)
{
    int I;

    for ( I = 0; I <= 3; I++ )
    {
        PRINTSTRING( "\n KILL_ANY_MISSION_SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( I ))
        {
            if ((g_U1[I] <= 8) AND (g_U1[I] >= 4))
            {
                STOP_SCRIPTED_CONVERSATION( I, uParam0, 0 );
            }
        }
    }
    return;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_58393(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2598( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2709( 0,  /* PLAYER_PED_ID */ sub_1031(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2709( 1,  /* PLAYER_PED_ID */ sub_1031(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_2979( uParam0, uParam1, 8, 1 );
    return;
}

/* F_POI_CAN_PLAY_UNAVALIABLE_MONO */ int sub_58532(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND ((iParam0->_fU76 == 0) AND (( /* F_IS_POI_AVAILABLE */ sub_58578( iParam0 )) == 0)))
    {
        if ((( /* F_HASACTIONBEENPRESSED */ sub_56609()) == 1) AND (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_1031() )) == 0) AND (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_1031() )) == 0) AND (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_1031() )) == 0) AND (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_1031() )) == 0) AND (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1031() )) == 0) AND ((IS_PLAYER_SHOOTDODGING() == 0) AND ((IS_MONOLOGUE_PLAYING() == 0) AND ((IS_INTERACTIONTEXT_AVAILABLE() == 0) AND (IS_INTERACTIONTEXT_ONSCREEN() == 1))))))))))
        {
            iParam0->_fU76 = 1;
            return 1;
        }
    }
    return 0;
}

/* F_IS_POI_AVAILABLE */ void sub_58578(int iParam0)
{
    return iParam0->_fU56;
}

/* P_PE_HANDLE_PRISONER_KILL_ON_TIMER */ void sub_59092()
{
    int I;

    if ( /* ISTIMERDONE */ sub_2331( ref l_U457 ))
    {
        for ( I = 0; I <= 2; I++ )
        {
            if (NOT (IS_PED_DEAD( l_U451[I] )))
            {
                PRINTSTRING( "Killing prisoner " );
                 /* WRITE_INT */ sub_36779( I );
                 /* P_KILL_PED */ sub_59230( l_U451[I] );
                 /* CREATETIMER */ sub_1815( ref l_U457, GET_RANDOM_INT_IN_RANGE( l_U455, l_U456 ), 1, 0 );
                 /* STARTTIMER */ sub_1965( ref l_U457 );
                return;
            }
        }
    }
    return;
}

/* P_KILL_PED */ void sub_59230(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* P_RELEASE_ENEMY_1 */ void sub_59592()
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD( l_U343[1] ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "P_RELEASE_ENEMY_1.", 0 );
         /* P_REMOVEALLTETHERSFROMPED */ sub_59697( l_U343[1] );
        SET_PED_FLAG_LOCK_TO_COVER( l_U343[1], 0 );
        REGISTER_TARGET( l_U343[1],  /* PLAYER_PED_ID */ sub_1031() );
        TASK_COMBAT_PED( l_U343[1],  /* PLAYER_PED_ID */ sub_1031() );
    }
    return;
}

/* P_REMOVEALLTETHERSFROMPED */ void sub_59697(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        RESET_PED_TETHERING( uParam0 );
    }
    return;
}

/* P_RELEASE_ENEMY_2 */ void sub_59897()
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD( l_U343[2] ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "P_RELEASE_ENEMY_2.", 0 );
         /* P_REMOVEALLTETHERSFROMPED */ sub_59697( l_U343[2] );
        SET_PED_FLAG_LOCK_TO_COVER( l_U343[2], 0 );
        REGISTER_TARGET( l_U343[2],  /* PLAYER_PED_ID */ sub_1031() );
        TASK_COMBAT_PED( l_U343[2],  /* PLAYER_PED_ID */ sub_1031() );
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_60125(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_55746(  /* PLAYER_PED_ID */ sub_1031(), uParam0 );
}

/* P_RELEASE_ENEMY_0 */ void sub_60187()
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD( l_U343[0] ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "P_RELEASE_ENEMY_0.", 0 );
         /* P_REMOVEALLTETHERSFROMPED */ sub_59697( l_U343[0] );
        SET_PED_FLAG_LOCK_TO_COVER( l_U343[0], 0 );
        if (NOT (IS_PED_DEAD( l_U451[2] )))
        {
            REGISTER_TARGET( l_U343[0], l_U451[2] );
            TASK_COMBAT_PED( l_U343[0], l_U451[2] );
        }
        else
        {
            REGISTER_TARGET( l_U343[0],  /* PLAYER_PED_ID */ sub_1031() );
            TASK_COMBAT_PED( l_U343[0],  /* PLAYER_PED_ID */ sub_1031() );
        }
    }
    return;
}

/* P_RELEASE_ENEMY_4 */ void sub_60482()
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD( l_U343[4] ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "P_RELEASE_ENEMY_4.", 0 );
         /* P_REMOVEALLTETHERSFROMPED */ sub_59697( l_U343[4] );
        SET_PED_FLAG_LOCK_TO_COVER( l_U343[4], 0 );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U343[4], 0 );
        SET_PED_FLAG_BLOCK_BLINDFIRE_IN_COVER( l_U343[4], 0 );
        SET_PED_FLAG_BLOCK_LEANFIRE_IN_COVER( l_U343[4], 0 );
        REGISTER_TARGET( l_U343[4],  /* PLAYER_PED_ID */ sub_1031() );
        TASK_COMBAT_PED( l_U343[4],  /* PLAYER_PED_ID */ sub_1031() );
    }
    return;
}

/* P_RELEASE_ENEMY_5 */ void sub_60753()
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD( l_U343[5] ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "P_RELEASE_ENEMY_5.", 0 );
         /* P_REMOVEALLTETHERSFROMPED */ sub_59697( l_U343[5] );
        SET_PED_FLAG_LOCK_TO_COVER( l_U343[5], 0 );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U343[5], 0 );
        SET_PED_FLAG_BLOCK_BLINDFIRE_IN_COVER( l_U343[5], 0 );
        SET_PED_FLAG_BLOCK_LEANFIRE_IN_COVER( l_U343[5], 0 );
        REGISTER_TARGET( l_U343[5],  /* PLAYER_PED_ID */ sub_1031() );
        TASK_COMBAT_PED( l_U343[5],  /* PLAYER_PED_ID */ sub_1031() );
    }
    return;
}

/* P_RELEASE_ENEMY_3 */ void sub_61020()
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD( l_U343[3] ))))
    {
         /* WRITESCRIPTLOG */ sub_523( "AT", "P_RELEASE_ENEMY_3.", 0 );
         /* P_REMOVEALLTETHERSFROMPED */ sub_59697( l_U343[3] );
        SET_PED_FLAG_LOCK_TO_COVER( l_U343[3], 0 );
        REGISTER_TARGET( l_U343[3],  /* PLAYER_PED_ID */ sub_1031() );
        TASK_COMBAT_PED( l_U343[3],  /* PLAYER_PED_ID */ sub_1031() );
    }
    return;
}

/* F_CAN_AMBIENT_SPEECH_PLAY */ int sub_61405()
{
    if ((l_U89._fU16) || ( /* ISTIMERDONE */ sub_2331( ref l_U89 )))
    {
        return 1;
    }
    return 0;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_61942(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_55746(  /* PLAYER_PED_ID */ sub_1031(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* P_INITIALIZE_IMAGEFX_PE_EXITDOORBUTTON */ void sub_62287()
{
     /* P_INIT_IMAGEFX */ sub_62342( ref l_U937 );
    l_U937[0]._fU4 = "KILL_FLASH_TEST_MIDDLE";
    l_U937[0]._fU8 = 3;
    l_U937[0]._fU12 = 200;
    l_U937[0]._fU16 = 500;
    l_U937[0]._fU20 = 2;
    l_U937[0]._fU32 = 0;
    l_U937[1]._fU4 = "TRIPLE_INTERLACE_COLOR_MED";
    l_U937[1]._fU8 = 4;
    l_U937[1]._fU16 = 500;
    l_U937[1]._fU32 = 0;
    l_U937[2]._fU4 = "DOUBLE_TINT_BLUE_FLASH";
    l_U937[2]._fU8 = 4;
    l_U937[2]._fU32 = 0;
    l_U937[3]._fU4 = "FLASH_WHITE";
    l_U937[3]._fU8 = 4;
    l_U937[3]._fU12 = 1000;
    l_U937[3]._fU32 = 0;
    l_U86 = 0;
    return;
}

/* P_INIT_IMAGEFX */ void sub_62342(unknown uParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_523( "CO", "P_INIT_IMAGEFX", 0 );
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I]._fU4 = "";
        (uParam0^)[I]._fU12 = 0;
        (uParam0^)[I]._fU16 = 0;
        (uParam0^)[I]._fU20 = 0;
        (uParam0^)[I]._fU24 = 0;
        (uParam0^)[I]._fU28 = 0;
        (uParam0^)[I]._fU32 = 1;
    }
    return;
}

/* P_HANDLE_IMAGEFX */ void sub_62883(unknown uParam0)
{
    int I;
    int J;

    switch (l_U86)
    {
        case 0:
         /* WRITESCRIPTLOG */ sub_523( "CO", "P_HANDLE_IMAGEFX", 0 );
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (uParam0^)[I]._fU32)
            {
                 /* CREATETIMER */ sub_1815( ref (uParam0^)[I]._fU36, (uParam0^)[I]._fU12, 1, 0 );
                 /* STARTTIMER */ sub_1965( ref (uParam0^)[I]._fU36 );
                if ((uParam0^)[I]._fU20 > 0)
                {
                    I += (uParam0^)[I]._fU20;
                }
            }
        }
        l_U86 = 1;
        break;
        case 1:
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if ( /* ISTIMERDONE */ sub_2331( ref (uParam0^)[I]._fU36 ))
            {
                (uParam0^)[I]._fU0 = PLAY_IMAGEFX( (uParam0^)[I]._fU4, (uParam0^)[I]._fU8, (uParam0^)[I]._fU28 );
                if ((uParam0^)[I]._fU16 > 0)
                {
                     /* CREATETIMER */ sub_1815( ref (uParam0^)[I]._fU72, (uParam0^)[I]._fU16, 1, 0 );
                     /* STARTTIMER */ sub_1965( ref (uParam0^)[I]._fU72 );
                }
                if ((uParam0^)[I]._fU20 > 0)
                {
                    for ( J = I + 1; J <= (I + (uParam0^)[I]._fU20); J++ )
                    {
                        PRINTSTRING( "******* [CO] ***** STARTING CHILD FOR index : " );
                        PRINTINT( J );
                        PRINTNL();
                        (uParam0^)[J]._fU0 = PLAY_IMAGEFX( (uParam0^)[J]._fU4, (uParam0^)[J]._fU8, (uParam0^)[I]._fU28 );
                        if ((uParam0^)[J]._fU16 > 0)
                        {
                             /* CREATETIMER */ sub_1815( ref (uParam0^)[J]._fU72, (uParam0^)[J]._fU16, 1, 0 );
                             /* STARTTIMER */ sub_1965( ref (uParam0^)[J]._fU72 );
                        }
                    }
                    I += (uParam0^)[I]._fU20;
                }
            }
            if ( /* ISTIMERDONE */ sub_2331( ref (uParam0^)[I]._fU72 ))
            {
                STOP_IMAGEFX( (uParam0^)[I]._fU0, (uParam0^)[I]._fU24 );
                (uParam0^)[I]._fU32 = 1;
                if ((uParam0^)[I]._fU20 > 0)
                {
                    if ((uParam0^)[I]._fU20 == 1)
                    {
                        STOP_IMAGEFX( (uParam0^)[I + 1]._fU0, (uParam0^)[I + 1]._fU24 );
                        (uParam0^)[I + 1]._fU32 = 1;
                    }
                    else
                    {
                        for ( J = I + 1; J <= (uParam0^)[I]._fU20; J++ )
                        {
                            STOP_IMAGEFX( (uParam0^)[J]._fU0, (uParam0^)[J]._fU24 );
                            (uParam0^)[J]._fU32 = 1;
                        }
                    }
                    I += (uParam0^)[I]._fU20;
                }
            }
        }
        break;
    }
    return;
}

/* P_PE_HANDLE_OPEN_DOOR_NIS */ void sub_63853()
{
    switch (l_U799)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_PE_DoorOpenNISState = eNIS_STATE_SETUP", 0 );
         /* NIS_CREATE_STATIC_CAM */ sub_47047( ref l_U800, 59.22487000, -40.12536000, -1.73588100, -4.38627900, 0.00000100, 143.44210000, 45.00000000, 3500 );
         /* NIS_PRE_SETUP */ sub_53177( 1, 0, 0, 0 );
         /* NIS_PLAY_STATIC_CAMERA */ sub_47282( ref l_U800 );
         /* CREATETIMER */ sub_1815( ref l_U840, 1800, 1, 0 );
         /* STARTTIMER */ sub_1965( ref l_U840 );
         /* CREATETIMER */ sub_1815( ref l_U831, 750, 1, 0 );
         /* STARTTIMER */ sub_1965( ref l_U831 );
        CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1031() );
        RESET_PLAYER_INPUT_GAIT( 0 );
         /* P_RESET_MAX_ACTION_TREE */ sub_57718();
         /* TELEPORTPED */ sub_9725(  /* PLAYER_PED_ID */ sub_1031(), 58.73000000, -41.75000000, -3.40000000, 144.02000000 );
        if (ISEQ_IS_LOADED( 1695938919 ))
        {
            ISEQ_REGISTER_ENTITY( 1695938919, "Max",  /* PLAYER_PED_ID */ sub_1031(), 0 );
            ISEQ_START( 1695938919 );
        }
        else
        {
            SCRIPT_ASSERT( "S_POLICE_VIG_03_PP interactive sequence not loaded.", 0 );
        }
        l_U799 = 2;
         /* WRITESCRIPTLOG */ sub_523( "GA", "e_PE_DoorOpenNISState = eNIS_STATE_SETUP", 0 );
        break;
        case 2:
        if ( /* ISTIMERDONE */ sub_2331( ref l_U831 ))
        {
             /* WRITESCRIPTLOG */ sub_523( "GA", "Playing Button Sound", 0 );
            PLAY_SOUND_FROM_COORD( -1, "PRISONER_EXCHANGE_DOOR_BUTTON", l_U496._fU20 );
        }
        if ( /* ISTIMERDONE */ sub_2331( ref l_U840 ))
        {
             /* P_PE_ANIMATE_EXIT_DOORS */ sub_64441( 1 );
             /* NIS_RETURN_TO_GAMEPLAY_CAM */ sub_51116( 3000, 1, 0, -859915232, -859915232, 0 );
        }
        if ((l_U840._fU16) AND ( /* NIS_IS_SHOT_FINISHED */ sub_50939( ref l_U800, 0 )))
        {
             /* TELEPORTPED */ sub_9725(  /* PLAYER_PED_ID */ sub_1031(), 58.73000000, -41.68000000, -3.40000000, 144.02000000 );
             /* NIS_POST_SETUP */ sub_54101( 1, 1 );
             /* P_STREAMREQ_ISEQ_REMOVE */ sub_7021( 1695938919, ref g_U2662 );
            ISEQ_TERMINATE( 1695938919 );
            if (DOES_OBJECT_EXIST( l_U489 ))
            {
                SET_OBJECT_VISIBLE( l_U489, 0 );
            }
            l_U799 = 5;
             /* WRITESCRIPTLOG */ sub_523( "GA", "e_PE_DoorOpenNISState = eNIS_STATE_SETUP", 0 );
        }
        break;
    }
    return;
}

/* P_PE_ANIMATE_EXIT_DOORS */ void sub_64441(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_PE_ANIMATE_EXIT_DOORS start", 0 );
    if (DOES_OBJECT_EXIST( l_U494 ))
    {
         /* P_SAFE_STOP_SOUND */ sub_6613( l_U849, 0 );
         /* P_SAFE_RELEASE_SOUND_ID */ sub_6796( ref l_U849 );
        if (bParam0)
        {
            PLAY_OBJECT_ANIM( l_U494, "Dr_exch_slide", "po_anim2", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( l_U494, "Dr_exch_slide", "po_anim2", 0.00000000 );
            SET_OBJECT_ANIM_SPEED( l_U494, "Dr_exch_slide", "po_anim2", l_U495 );
            l_U491 =  /* CREATEOBJECTNOOFFSET */ sub_43636( l_U490, 58.11400000, -42.57000000, -1.85000000, 0.00000000, 0.00000000, -90.00000000, 0, 0, 0 );
            if (DOES_OBJECT_EXIST( l_U491 ))
            {
                FREEZE_OBJECT_POSITION( l_U491, 1 );
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U491, ref g_U3245 );
            }
            if (DOES_OBJECT_EXIST( l_U493 ))
            {
                SET_OBJECT_VISIBLE( l_U493, 0 );
            }
        }
        else
        {
            PLAY_OBJECT_ANIM( l_U494, "Dr_exch_slide", "po_anim2", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( l_U494, "Dr_exch_slide", "po_anim2", 1.00000000 );
            SET_OBJECT_ANIM_SPEED( l_U494, "Dr_exch_slide", "po_anim2", 0.00000000 - l_U495 );
             /* CLEANOBJECT */ sub_9274( l_U491 );
            if (DOES_OBJECT_EXIST( l_U493 ))
            {
                SET_OBJECT_VISIBLE( l_U493, 1 );
            }
        }
        l_U849 = GET_SOUND_ID();
        PLAY_SOUND_FROM_OBJECT( l_U849, "PRISONER_EXCHANGE_DOOR_CLOSE", l_U494 );
    }
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_PE_ANIMATE_EXIT_DOORS end", 0 );
    return;
}

/* CUTSYS_HANDLETRIGGERTYPEDOOR_NOHOLSTERING */ int sub_65438(int iParam0, unknown uParam1, boolean bParam2, boolean bParam3)
{
    if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_61942( iParam0, 0 )) == 1)
    {
        if (NOT bParam3)
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1031(), 1 );
        }
        if (NOT bParam2)
        {
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1069(), 0 );
        }
    }
    if ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_60125( (iParam0^) ))) AND (iParam0->_fU64))
    {
        iParam0->_fU64 = 0;
        if (NOT bParam3)
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1031(), 0 );
        }
        if (NOT bParam2)
        {
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1069(), 1 );
        }
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_61942( uParam1, 0 ))
    {
        return 1;
    }
    return 0;
}

/* P_PE_DEBUG_TUNING_WIDGET */ void sub_65832()
{
    if (NOT l_U1046)
    {
        START_WIDGET_GROUP( "Prisoner Exchange Tuning" );
        ADD_WIDGET_FLOAT_SLIDER( "Exit Doors Speed", ref l_U495, 0.00000000, 10.00000000, 0.01000000 );
        STOP_WIDGET_GROUP();
        l_U1046 = 1;
    }
    return;
}

/* P_RELEASE_PE_ASSETS */ void sub_66000()
{
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_RELEASE_PE_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_66079( ref l_U145, ref g_U2468 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_66627( ref g_U3553, ref g_U2741 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_66972( ref g_U3489, ref g_U2889 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_67319( ref l_U153, ref g_U2613 );
     /* WRITESCRIPTLOG */ sub_523( "GA", "P_RELEASE_PE_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_66079(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_66152( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_66152(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_7159( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_66627(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_7159( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_66972(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_7159( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_67319(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_67393( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_67393(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_7159( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

