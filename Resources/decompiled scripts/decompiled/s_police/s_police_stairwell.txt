void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U74 = 0;
    l_U75 = 0;
    l_U76 = 1500;
    l_U86 = {0, 0, 0};
    StrCopy( ref l_U89, "DUMMY", 32 );
    l_U97 = 1;
    l_U102 = 0;
    l_U103 = 0;
    l_U104 = 0;
    l_U107 = 0;
    l_U153 = 0;
    l_U201 = 0;
    l_U204 = 0;
    l_U205 = 0;
    l_U215 = {534.00000000, -24.20000000, 9.50000000};
    l_U218 = {536.00000000, -18.75000000, 8.20000000};
    l_U221 = {532.55000000, -24.55000000, 12.19000000};
    l_U224 = {533.58000000, -23.84000000, 12.19000000};
    l_U293 = 1500;
    l_U294 = 3000;
    l_U355 = 50000;
    l_U365 = 40.00000000;
    l_U366 = l_U355 - 5000;
    l_U486 = 1000;
    l_U1422 = 0;
    l_U1423 = 0;
    l_U1425 = 0;
    l_U1426 = 0;
     /* WRITESCRIPTLOG */ sub_600( "SP", "Script s_police_stairwell.sc is starting up...", 0 );
     /* P_STR_POPULATE_SCRIPT_ARRAYS */ sub_718();
    l_U201 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_984();
        if (l_U205 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_12253();
        }
         /* P_HANDLE_DEBUG_INVINCIBLITY */ sub_54966();
         /* P_STR_DEBUG_TUNING_WIDGET */ sub_55266();
        WAIT( 0 );
    }
     /* P_CLEANUP_STR */ sub_4264();
     /* P_RELEASE_STR_ASSETS */ sub_56387();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_police_stairwell" );
     /* WRITESCRIPTLOG */ sub_600( "SP", "Script s_police_stairwell.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_600(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_STR_POPULATE_SCRIPT_ARRAYS */ void sub_718()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_POPULATE_SCRIPT_ARRAYS start", 0 );
    l_U191[0] = 2027698079;
    l_U191[1] = 2146529263;
    l_U191[2] = 623430912;
    l_U191[3] = 2014638728;
    l_U196[0] = 406496141;
    l_U196[1] = -862236369;
    l_U196[2] = -1013714740;
    l_U196[3] = -175608314;
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_POPULATE_SCRIPT_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_984()
{
    if (g_U821 == 10)
    {
        switch (l_U205)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1192()) || ((l_U203) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() ))))
            {
                 /* KILL_SPEECH */ sub_1654( ref l_U376, 0 );
                 /* KILL_SPEECH */ sub_1654( ref l_U395, 0 );
                AUDIO_MUSIC_SUSPEND( 5000 );
                l_U205 = 1;
                 /* WRITESCRIPTLOG */ sub_600( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_1998())
            {
                l_U205 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_2058( 0 )) == 1)
            {
                l_U205 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
            {
                l_U205 = 3;
                 /* WRITESCRIPTLOG */ sub_600( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_600( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1123() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1123(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1085() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1085(), 0 );
                }
                 /* P_RESET_MAX_ACTION_TREE */ sub_3707();
            }
            if ((g_U862[11]._fU40 != 4) AND (g_U862[11]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_600( "CR", "Shutting down script for MCE_TECH_ROOM.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_4138( ref g_U862[11] );
                SET_EXITFLAG_FOR_SCRIPT( g_U862[11]._fU32 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            AUDIO_MUSIC_STOP_ONESHOT();
             /* P_CLEANUP_STR */ sub_4264();
             /* P_FORCE_SCENE_TO_LOAD */ sub_7143( 10 );
            l_U205 = 4;
             /* WRITESCRIPTLOG */ sub_600( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_600( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_7577( ref l_U155,  /* PLAYER_PED_ID */ sub_1085() );
            l_U205 = 5;
             /* WRITESCRIPTLOG */ sub_600( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_600( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U201 = 1;
            l_U205 = 0;
             /* WRITESCRIPTLOG */ sub_600( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_1085()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1123() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1123()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1192()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1085(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1123(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1123(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1085() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1085(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* KILL_SPEECH */ void sub_1654(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_1682( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_1682(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* IS_RESTART_ACTIVE */ void sub_1998()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_2058(int iParam0)
{
    iParam0 = 1;
    switch (l_U75)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_2140( ref l_U77 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
            {
                l_U76 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_2274( ref l_U77, l_U76, 1, 1 );
             /* STARTTIMER */ sub_2424( ref l_U77 );
        }
        if ( /* ISTIMERDONE */ sub_2557( ref l_U77 ))
        {
             /* WRITESCRIPTLOG */ sub_600( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1123() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1123(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U75 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U75 = 2;
            }
            else
            {
                l_U75 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_600( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_3058();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_600( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_3058();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_2140(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_2274(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2424(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2557(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_3058()
{
     /* WRITESCRIPTLOG */ sub_600( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_3133( ref l_U77 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1123() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1123(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U74 = 0;
    l_U74 = l_U74;
    l_U75 = 0;
    return;
}

/* RESETTIMER */ void sub_3133(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_MAX_ACTION_TREE */ void sub_3707()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_RESET_MAX_ACTION_TREE start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
    {
        if (IS_PLAYER_SHOOTDODGING())
        {
            SCRIPT_ASSERT( "Do not try to reset Max's action tree when he is shoot dodging.", 0 );
             /* WRITESCRIPTLOG */ sub_600( "GA", "You cannot reset Max's action tree during a shoot dodge.", 0 );
        }
        else
        {
            PED_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_1085(), "/Global/Player" );
        }
    }
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_RESET_MAX_ACTION_TREE end", 0 );
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_4138(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_STR */ void sub_4264()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_CLEANUP_STR start", 0 );
    ISEQ_TERMINATE( 1750428255 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4344( 1750428255, ref g_U2662 );
     /* P_STREAMREQ_SCRIPT_STREAM_STOP */ sub_5436( "S_POLICE_SMOKE_GRENADE", ref g_U2849 );
     /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_6230( "S_POLICE_SMOKE_GRENADE", ref g_U2849 );
     /* CLEANPED */ sub_6580( l_U308 );
     /* CLEANOBJECT */ sub_6670( l_U313 );
     /* CLEANOBJECT */ sub_6670( l_U310 );
     /* CLEANOBJECT */ sub_6670( l_U311 );
     /* CLEANPLACEMENT */ sub_6749( l_U309 );
     /* CLEANCAMERA */ sub_6813( ref l_U1424 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
    {
        SET_PED_DAMAGED_BY_TEAR_GAS(  /* PLAYER_PED_ID */ sub_1085(), 0 );
    }
    SET_TEAR_GAS_EFFECT_AUTO_END( 1 );
    END_POSTFX_BLENDER( 14, 0 );
    CLEAR_TIMECYCLE_MODIFIER();
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1028._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1049._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1070._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1091._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1112._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1133._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1154._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1175._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1196._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1380._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1401._fU0 );
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_CLEANUP_STR end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_4344(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4482( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_4482(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_STOP */ void sub_5436(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_5486( uParam0, uParam1 ))
    {
        iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_5695( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            DISPLAYF( "[CCB]### Stopping the SCRIPT_STREAM: {} ###", 1, 1281, ref (uParam1^)[iVar4]._fU0 );
            STOP_SCRIPT_STREAM( iVar4 );
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam0 );
            SCRIPT_ASSERT( "Attempting to stop a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam0 );
        DISPLAYF( "Attempting to stop a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ int sub_5486(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB]### The SCRIPT_STREAM is loaded: {} ###", 1, 1281, ref (uParam1^)[I]._fU0 );
                return 1;
            }
        }
    }
    return 0;
}

/* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ int sub_5695(unknown uParam0, unknown uParam1)
{
    int Result;

    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
        {
            return Result;
        }
    }
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ void sub_6230(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4482( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a SCRIPT_STREAM asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* CLEANPED */ void sub_6580(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANOBJECT */ void sub_6670(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_6749(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* CLEANCAMERA */ void sub_6813(unknown uParam0)
{
    if ((DOES_CAM_EXIST( (uParam0^) )) == 1)
    {
        if ((IS_CAM_ACTIVE( (uParam0^) )) == 1)
        {
            SET_CAM_ACTIVE( (uParam0^), 0 );
        }
        DESTROY_CAM( (uParam0^) );
    }
    (uParam0^) = nil;
    return;
}

/* P_FORCE_SCENE_TO_LOAD */ void sub_7143(unknown uParam0)
{
    char[64] cVar3;
    unknown uVar19;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
    {
         /* TELEPORTPED */ sub_7219(  /* PLAYER_PED_ID */ sub_1085(), g_U2953[uParam0], g_U3083[uParam0] );
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1085(), 1 );
        if (NOT (IS_STRING_NULL( ref g_U1091[uParam0]._fU0 )))
        {
            StrCopy( ref cVar3, "Loading room: ", 64 );
            ConcatString(ref cVar3, ref g_U1091[uParam0]._fU0, 64);
            PRINTSTRING( ref cVar3 );
            PRINTNL();
            uVar19 = GET_INTERIOR_FROM_NAME( ref g_U1091[uParam0]._fU64, 0 );
            SET_INTERIOR_ACTIVE( uVar19, 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( uVar19, GET_HASH_KEY( ref g_U1091[uParam0]._fU0 ) );
        }
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1085(), 0 );
    }
    return;
}

/* TELEPORTPED */ void sub_7219(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_7577(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_600( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_7796( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_8960( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9274( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9753( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9274( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9753( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9274( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9753( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_10069( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9753( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_10069( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9753( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_10641( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_10843( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1085(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_600( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_7796(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7858( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_7858(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_8960(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_9274(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9678( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_9678(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_9753(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_10069(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9678( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_10641(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_10843(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7858( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_10941( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_10941(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_12253()
{
    int iVar2;
    unknown uVar3;

    iVar2 = l_U201;
    switch (l_U201)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_600( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_12459();
         /* P_SET_STATIC_DATA */ sub_12765();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U201 = 2;
         /* WRITESCRIPTLOG */ sub_600( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_600( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        g_U822[10] = 0;
         /* P_REQUEST_STR_PERSISTENT_ASSETS */ sub_20301();
         /* P_REQUEST_STR_NONPERSISTENT_ASSETS */ sub_27321();
        l_U201 = 3;
         /* WRITESCRIPTLOG */ sub_600( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ sub_34157( ref g_U2849 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_33743( ref g_U2662 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_33352( ref g_U2741 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_32950( ref g_U2613 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_32553( ref g_U2468 ))))))
        {
            if ((NOT l_U155._fU0) AND (g_U820 == 10))
            {
                l_U201 = 4;
                 /* WRITESCRIPTLOG */ sub_600( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U201 = 6;
                 /* WRITESCRIPTLOG */ sub_600( "SP", "eCheckpointState = CP_STR_PRE_CREATE_PEDS", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_600( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U842[10] = 1;
        if (NOT ( /* HAS_SAVEFILE_LOADED */ sub_34773( ref l_U155 )))
        {
             /* F_GIVEPEDWEAPON */ sub_10069(  /* PLAYER_PED_ID */ sub_1085(), -1013714740, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9274(  /* PLAYER_PED_ID */ sub_1085(), -862236369, 0, 200, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9274(  /* PLAYER_PED_ID */ sub_1085(), -862236369, 1, 200, 0 );
            l_U201 = 5;
             /* WRITESCRIPTLOG */ sub_600( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U201 = 6;
             /* WRITESCRIPTLOG */ sub_600( "GA", "eCheckpointState = CP_STR_PRE_CREATE_PEDS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1085(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1085(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1085(), 0, 0 ) ))))
            {
                g_U821 = 10;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_35326( ref l_U155, g_U821,  /* PLAYER_PED_ID */ sub_1085(), g_U2953[10], g_U3083[10], g_U3127[10], g_U3171[10], 1 );
                l_U201 = 6;
                 /* WRITESCRIPTLOG */ sub_600( "GA", "eCheckpointState = CP_STR_PRE_CREATE_PEDS", 0 );
            }
        }
        break;
        case 6:
         /* P_STR_CREATE_DEAD_RIOTER */ sub_39990();
        l_U201 = 7;
         /* WRITESCRIPTLOG */ sub_600( "SP", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        break;
        case 7:
        if (l_U202)
        {
            g_U822[10] = 1;
        }
        if (g_U842[10])
        {
            SET_WEATHER_TYPE_NOW_PERSIST( "RAIN" );
            l_U201 = 8;
             /* WRITESCRIPTLOG */ sub_600( "GA", "eCheckpointState = CP_HANDLE_NIS_TEARGAS", 0 );
        }
        break;
        case 8:
        if (l_U202)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
            {
                SET_PED_DAMAGED_BY_TEAR_GAS(  /* PLAYER_PED_ID */ sub_1085(), 1 );
            }
             /* WRITESCRIPTLOG */ sub_600( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_3", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_3", 0, 0, -1, -1, -1082130432, 0 );
             /* WRITESCRIPTLOG */ sub_600( "GA", "Playing music one shot PRECINCT_ONESHOT_5", 0 );
            AUDIO_MUSIC_PLAY_ONESHOT();
             /* P_STR_CREATE_ANIMATED_GRENADE */ sub_42484();
            l_U227 = 1;
        }
         /* P_STR_HANDLE_TEARGAS_NIS */ sub_43140();
         /* P_STR_HANDLE_ANIMTED_GRENADE_SWAP */ sub_45077();
        if (l_U227 == 5)
        {
             /* P_STR_START_STAIRWELL_GAMEPLAY */ sub_45349();
            l_U1422 = 1;
            if (g_U821 != 10)
            {
                g_U821 = 10;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_35326( ref l_U155, g_U821,  /* PLAYER_PED_ID */ sub_1085(), g_U2953[10], g_U3083[10], g_U3127[10], g_U3171[10], 1 );
            }
            l_U201 = 9;
             /* WRITESCRIPTLOG */ sub_600( "GA", "eCheckpointState = CP_GAMEPLAY_TRAPPED_IN_STAIRWELL", 0 );
        }
        break;
        case 9:
        if (l_U202)
        {
             /* STARTTIMER */ sub_2424( ref l_U367 );
        }
         /* P_STR_HANDLE_ANIMTED_GRENADE_SWAP */ sub_45077();
        if (((g_U862[9]._fU40 == 4) || (g_U862[9]._fU40 == 0)) AND (NOT g_U862[11]._fU36))
        {
            g_U862[11]._fU36 = 1;
        }
        if (NOT l_U204)
        {
             /* P_STR_HANDLE_O2_METER */ sub_46802();
        }
         /* P_HANDLE_HINT_DIALOGUE */ sub_46906();
        if ( /* ISTIMERDONE */ sub_2557( ref l_U367 ))
        {
            SET_TEAR_GAS_EFFECT_AUTO_END( 0 );
            START_POSTFX_BLENDER( 14 );
        }
        if (NOT l_U314)
        {
            if (DOES_OBJECT_EXIST( l_U313 ))
            {
                if ((IS_EXPLOSION_IN_SPHERE( -1, 532.83000000, -17.17000000, 12.31000000, 1.50000000 )) || (HAS_OBJECT_BEEN_DAMAGED( l_U313 )))
                {
                    CAMERA_CAN_TARGET_OBJECT( 0, l_U313 );
                     /* MAL_PLAYOBJECTANIM */ sub_49284( l_U313, "STAIRCSE_VENT", "po_anim2", 1065353216, 0 );
                     /* WRITESCRIPTLOG */ sub_600( "SBA", "P_HANDLE_START_EVENTS: Vent is open!", "***" );
                    l_U314 = 1;
                    l_U1423 = 1;
                }
            }
        }
        else if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_48630( ref l_U315, 0 ))
        {
            g_U842[11] = 1;
             /* STARTTIMER */ sub_2424( ref l_U206 );
             /* KILL_SPEECH */ sub_1654( ref l_U376, 0 );
             /* KILL_SPEECH */ sub_1654( ref l_U395, 0 );
            if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1123() ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() ))))
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1085(), 1 );
                SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1123(), 0 );
            }
            l_U201 = 11;
             /* WRITESCRIPTLOG */ sub_600( "GA", "eCheckpointState = CP_FINISHED", 0 );
            break;
        }
        if ((NOT l_U336._fU20) AND (NOT l_U204))
        {
            if ( /* ISTIMERDONE */ sub_2557( ref l_U356 ))
            {
                l_U201 = 10;
                 /* WRITESCRIPTLOG */ sub_600( "GA", "eCheckpointState = CP_HANDLE_MID_11_PP", 0 );
            }
        }
        break;
        case 10:
        if (l_U202)
        {
             /* NIS_PRE_SETUP */ sub_43271( 1, 0, 0, 0 );
            TOGGLE_SECONDARY_LIFE_BAR( 0 );
            l_U345 = 0;
            uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1085(), 2 );
            if (GET_DOES_WEAPON_EXIST( uVar3 ))
            {
                TASK_DROP_WEAPON(  /* PLAYER_PED_ID */ sub_1085(), uVar3 );
            }
            CLEAR_TIMECYCLE_MODIFIER();
        }
        else if (NOT l_U1297)
        {
             /* P_START_MID_11 */ sub_49823();
            l_U1297 = 1;
        }
        if ( /* F_IS_MID_11_COMPLETE */ sub_52101())
        {
            l_U203 = 1;
            l_U201 = 0;
             /* WRITESCRIPTLOG */ sub_600( "GA", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
        case 11:
        if ( /* ISTIMERDONE */ sub_2557( ref l_U206 ))
        {
             /* WRITESCRIPTLOG */ sub_600( "AT", "Ending post effects.", 0 );
            SET_TEAR_GAS_EFFECT_AUTO_END( 1 );
            END_POSTFX_BLENDER( 14, 0 );
        }
        if (g_U821 == 11)
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U201 = 0;
             /* WRITESCRIPTLOG */ sub_600( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
     /* P_HANDLE_IMAGEFX_GAS */ sub_52949();
    if (l_U201 != iVar2)
    {
        l_U202 = 1;
    }
    else
    {
        l_U202 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_12459()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
     /* CREATETIMER */ sub_2274( ref l_U206, 4320, 1, 0 );
    l_U202 = 1;
    l_U203 = 0;
    l_U292 = 0;
    l_U290 = 0;
    l_U291 = 0;
    l_U227 = 0;
    l_U345 = 0;
     /* CREATETIMER */ sub_2274( ref l_U346, 1000, 1, 0 );
    l_U476 = 0;
     /* CREATETIMER */ sub_2274( ref l_U386, l_U472[l_U476], 1, 0 );
     /* CREATETIMER */ sub_2274( ref l_U356, l_U355, 1, 0 );
     /* CREATETIMER */ sub_2274( ref l_U367, l_U366, 1, 0 );
    l_U312 = 0;
    l_U314 = 0;
     /* CREATETIMER */ sub_2274( ref l_U336, 1500, 1, 0 );
    l_U1297 = 0;
    l_U1422 = 0;
    l_U1423 = 0;
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_12765()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12867( ref l_U295, 534.65140000, -18.15191000, 6.05017300, 150.00000000, 574607845, 8, 4, 2, 3, 0 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U405, "tb_STR_LockedDoorF1", 532.50000000, -25.67000000, 3.75000000, 1.00000000, 0.75000000, 3.56000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U426, "tb_STR_LockedDoorF2", 532.50000000, -25.67000000, 7.38000000, 1.00000000, 0.75000000, 3.56000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U447, "tb_STR_LockedDoorF3", 532.50000000, -25.67000000, 10.97000000, 1.00000000, 0.75000000, 3.56000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U315, "tb_STR_ClimbInVent", 532.88000000, -17.72000000, 9.66000000, 1.76000000, 1.08000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U1028, "tb_MID11_Platform1", 534.00000000, -24.16000000, 3.74000000, 5.59000000, 3.64000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U1049, "tb_MID11_Platform2", 534.00000000, -18.87000000, 5.85000000, 5.59000000, 3.36000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U1070, "tb_MID11_Platform3", 534.00000000, -24.16000000, 7.60000000, 5.59000000, 3.64000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U1091, "tb_MID11_Platform4", 534.00000000, -18.87000000, 9.48000000, 5.59000000, 3.36000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U1112, "tb_MID11_Platform5", 534.00000000, -24.16000000, 11.02000000, 5.59000000, 3.64000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U1133, "tb_MID11_Stairs1", 532.58000000, -21.59000000, 4.39000000, 2.74000000, 2.30000000, 3.80000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U1154, "tb_MID11_Stairs2", 535.43000000, -21.36000000, 6.21000000, 2.74000000, 2.30000000, 3.80000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U1175, "tb_MID11_Stairs3", 532.58000000, -21.45000000, 8.00000000, 2.74000000, 2.30000000, 3.80000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U1196, "tb_MID11_Stairs4", 535.43000000, -21.43000000, 9.81000000, 2.74000000, 2.30000000, 3.80000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U1380, "tbImageFX_GAS02", 535.05200000, -23.40150000, 7.17093000, 3.50000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13075( ref l_U1401, "tbImageFX_GAS03", 532.83600000, -19.27370000, 9.38773000, 3.50000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    l_U487[0]._fU0 = {531.88600000, -25.21900000, 3.92400000};
    l_U487[0]._fU12 = 320.00000000;
    l_U487[0]._fU16 = {532.77200000, -25.73300000, 5.14500000};
    l_U487[0]._fU28 = {-25.85500000, 0.00000000, 5.58800000};
    l_U487[0]._fU40 = {533.94300000, -24.72100000, 4.85800000};
    l_U487[0]._fU52 = {-38.15200000, 0.00000000, 49.79200000};
    l_U487[0]._fU64 = 6800;
    l_U487[0]._fU68 = 2500;
    l_U487[0]._fU72 = 0;
    l_U487[0]._fU76 = 47;
    l_U487[1]._fU0 = {531.88600000, -25.21900000, 3.92400000};
    l_U487[1]._fU12 = 320.00000000;
    l_U487[1]._fU16 = {533.19500000, -22.89500000, 5.53100000};
    l_U487[1]._fU28 = {-25.16600000, 0.64500000, 159.03000000};
    l_U487[1]._fU40 = {533.03200000, -22.57200000, 6.17800000};
    l_U487[1]._fU52 = {-55.05500000, 0.84400000, 173.85100000};
    l_U487[1]._fU64 = 7500;
    l_U487[1]._fU68 = 6200;
    l_U487[1]._fU72 = 0;
    l_U487[1]._fU76 = 48;
    l_U487[2]._fU0 = {531.88600000, -25.21900000, 3.92400000};
    l_U487[2]._fU12 = 320.00000000;
    l_U487[2]._fU16 = {531.21200000, -24.96200000, 5.71800000};
    l_U487[2]._fU28 = {-39.84600000, -0.26800000, -71.79400000};
    l_U487[2]._fU40 = {532.33900000, -25.30900000, 5.12800000};
    l_U487[2]._fU52 = {-38.97400000, -0.51600000, -31.97500000};
    l_U487[2]._fU64 = 9200;
    l_U487[2]._fU68 = 6200;
    l_U487[2]._fU72 = 0;
    l_U487[2]._fU76 = 49;
    l_U487[3]._fU0 = {532.05400000, -18.36200000, 6.06000000};
    l_U487[3]._fU12 = 267.01600000;
    l_U487[3]._fU16 = {532.06700000, -17.76900000, 7.58600000};
    l_U487[3]._fU28 = {-36.23800000, 0.00000000, -127.40900000};
    l_U487[3]._fU40 = {533.49400000, -19.26200000, 7.20500000};
    l_U487[3]._fU52 = {-56.57900000, 0.00000000, -41.48800000};
    l_U487[3]._fU64 = 12000;
    l_U487[3]._fU68 = 2500;
    l_U487[3]._fU72 = 1;
    l_U487[3]._fU76 = 47;
    l_U487[4]._fU0 = {532.05400000, -18.36200000, 6.06000000};
    l_U487[4]._fU12 = 267.01600000;
    l_U487[4]._fU16 = {531.50700000, -19.84900000, 6.79300000};
    l_U487[4]._fU28 = {11.69300000, 0.00500000, -54.81700000};
    l_U487[4]._fU40 = {532.06500000, -19.54300000, 6.39100000};
    l_U487[4]._fU52 = {-4.24400000, 0.00000000, -54.43000000};
    l_U487[4]._fU64 = 11000;
    l_U487[4]._fU68 = 6200;
    l_U487[4]._fU72 = 1;
    l_U487[4]._fU76 = 48;
    l_U487[5]._fU0 = {532.05400000, -18.36200000, 6.06000000};
    l_U487[5]._fU12 = 267.01600000;
    l_U487[5]._fU16 = {531.30400000, -19.29400000, 7.20800000};
    l_U487[5]._fU28 = {-1.27900000, -0.65900000, -67.44400000};
    l_U487[5]._fU40 = {532.43400000, -19.59200000, 7.65300000};
    l_U487[5]._fU52 = {-49.64600000, 0.00000000, -38.52100000};
    l_U487[5]._fU64 = 8000;
    l_U487[5]._fU68 = 6200;
    l_U487[5]._fU72 = 1;
    l_U487[5]._fU76 = 49;
    l_U487[6]._fU0 = {536.11400000, -23.80600000, 7.81000000};
    l_U487[6]._fU12 = 93.17700000;
    l_U487[6]._fU16 = {536.61100000, -23.92000000, 9.16000000};
    l_U487[6]._fU28 = {-26.53100000, -0.10900000, 86.99500000};
    l_U487[6]._fU40 = {535.18400000, -24.03300000, 9.42000000};
    l_U487[6]._fU52 = {-59.76100000, -0.10900000, 68.05600000};
    l_U487[6]._fU64 = 12000;
    l_U487[6]._fU68 = 2500;
    l_U487[6]._fU72 = 2;
    l_U487[6]._fU76 = 47;
    l_U487[7]._fU0 = {536.11400000, -23.80600000, 7.81000000};
    l_U487[7]._fU12 = 93.17700000;
    l_U487[7]._fU16 = {533.80000000, -24.92900000, 10.23700000};
    l_U487[7]._fU28 = {-39.84700000, 1.45900000, -42.62100000};
    l_U487[7]._fU40 = {533.59400000, -24.94100000, 9.91400000};
    l_U487[7]._fU52 = {-55.06400000, 0.00000000, -51.24600000};
    l_U487[7]._fU64 = 7300;
    l_U487[7]._fU68 = 6200;
    l_U487[7]._fU72 = 2;
    l_U487[7]._fU76 = 48;
    l_U487[8]._fU0 = {536.11400000, -23.80600000, 7.81000000};
    l_U487[8]._fU12 = 93.17700000;
    l_U487[8]._fU16 = {536.61400000, -25.04100000, 9.62000000};
    l_U487[8]._fU28 = {-26.57900000, 0.00000000, 42.58700000};
    l_U487[8]._fU40 = {534.03600000, -24.96000000, 8.15900000};
    l_U487[8]._fU52 = {-7.84800000, 0.00000000, -24.45600000};
    l_U487[8]._fU64 = 9000;
    l_U487[8]._fU68 = 6200;
    l_U487[8]._fU72 = 2;
    l_U487[8]._fU76 = 49;
    l_U487[9]._fU0 = {535.52100000, -18.29000000, 9.66700000};
    l_U487[9]._fU12 = 102.54500000;
    l_U487[9]._fU16 = {536.61100000, -19.32600000, 11.28600000};
    l_U487[9]._fU28 = {-30.42000000, 0.00000000, 67.41500000};
    l_U487[9]._fU40 = {534.64600000, -18.73600000, 11.16800000};
    l_U487[9]._fU52 = {-51.77700000, 0.00000000, 65.00300000};
    l_U487[9]._fU64 = 7500;
    l_U487[9]._fU68 = 2500;
    l_U487[9]._fU72 = 3;
    l_U487[9]._fU76 = 47;
    l_U487[10]._fU0 = {535.52100000, -18.29000000, 9.66700000};
    l_U487[10]._fU12 = 102.54500000;
    l_U487[10]._fU16 = {535.81000000, -17.31000000, 11.32300000};
    l_U487[10]._fU28 = {-26.55700000, 0.81000000, 126.88500000};
    l_U487[10]._fU40 = {535.72300000, -17.66500000, 9.92300000};
    l_U487[10]._fU52 = {10.52400000, 0.00000000, 123.38300000};
    l_U487[10]._fU64 = 11000;
    l_U487[10]._fU68 = 6200;
    l_U487[10]._fU72 = 3;
    l_U487[10]._fU76 = 48;
    l_U487[11]._fU0 = {535.52100000, -18.29000000, 9.66700000};
    l_U487[11]._fU12 = 102.54500000;
    l_U487[11]._fU16 = {536.10800000, -19.98000000, 10.65500000};
    l_U487[11]._fU28 = {-9.80900000, 0.00000000, 45.77700000};
    l_U487[11]._fU40 = {535.05800000, -19.64200000, 11.01600000};
    l_U487[11]._fU52 = {-36.17400000, 0.00000000, 31.73700000};
    l_U487[11]._fU64 = 8500;
    l_U487[11]._fU68 = 6200;
    l_U487[11]._fU72 = 3;
    l_U487[11]._fU76 = 49;
    l_U487[12]._fU0 = {535.83100000, -23.79700000, 11.22100000};
    l_U487[12]._fU12 = 103.72600000;
    l_U487[12]._fU16 = {535.99200000, -22.30700000, 12.48000000};
    l_U487[12]._fU28 = {-25.84200000, 0.00000000, 138.34400000};
    l_U487[12]._fU40 = {534.87200000, -23.31700000, 13.30000000};
    l_U487[12]._fU52 = {-62.52800000, 0.00000000, 135.20900000};
    l_U487[12]._fU64 = 7500;
    l_U487[12]._fU68 = 2500;
    l_U487[12]._fU72 = 4;
    l_U487[12]._fU76 = 47;
    l_U487[13]._fU0 = {535.83100000, -23.79700000, 11.22100000};
    l_U487[13]._fU12 = 103.72600000;
    l_U487[13]._fU16 = {536.25500000, -25.41700000, 12.09800000};
    l_U487[13]._fU28 = {-5.17200000, 0.00000000, 47.35900000};
    l_U487[13]._fU40 = {533.09300000, -25.53700000, 13.24300000};
    l_U487[13]._fU52 = {-44.29200000, 0.28200000, -47.09500000};
    l_U487[13]._fU64 = 7000;
    l_U487[13]._fU68 = 6200;
    l_U487[13]._fU72 = 4;
    l_U487[13]._fU76 = 48;
    l_U487[14]._fU0 = {535.83100000, -23.79700000, 11.22100000};
    l_U487[14]._fU12 = 103.72600000;
    l_U487[14]._fU16 = {535.05500000, -23.04000000, 11.54000000};
    l_U487[14]._fU28 = {48.81300000, 0.00000000, -155.00400000};
    l_U487[14]._fU40 = {534.16000000, -22.92400000, 11.54200000};
    l_U487[14]._fU52 = {-7.23600000, 0.00000000, -173.57000000};
    l_U487[14]._fU64 = 9200;
    l_U487[14]._fU68 = 6200;
    l_U487[14]._fU72 = 4;
    l_U487[14]._fU76 = 49;
    l_U487[15]._fU0 = {532.47600000, -21.97300000, 5.01700000};
    l_U487[15]._fU12 = 0.00000000;
    l_U487[15]._fU16 = {533.54900000, -19.40500000, 7.12200000};
    l_U487[15]._fU28 = {-11.56000000, 1.19100000, 147.76000000};
    l_U487[15]._fU40 = {532.78400000, -20.45100000, 7.49700000};
    l_U487[15]._fU52 = {-54.70200000, 0.00000000, 139.78100000};
    l_U487[15]._fU64 = 15000;
    l_U487[15]._fU68 = 10000;
    l_U487[15]._fU72 = 5;
    l_U487[15]._fU76 = 50;
    l_U487[16]._fU0 = {532.87600000, -23.67300000, 3.91700000};
    l_U487[16]._fU12 = 180.00000000;
    l_U487[16]._fU16 = {532.22900000, -24.09200000, 4.79000000};
    l_U487[16]._fU28 = {27.86000000, -3.65000000, -25.45300000};
    l_U487[16]._fU40 = {533.32100000, -24.04700000, 7.81600000};
    l_U487[16]._fU52 = {-53.96900000, -13.33600000, 25.07200000};
    l_U487[16]._fU64 = 12000;
    l_U487[16]._fU68 = 6800;
    l_U487[16]._fU72 = 5;
    l_U487[16]._fU76 = 51;
    l_U487[17]._fU0 = {532.75300000, -21.31100000, 5.15000000};
    l_U487[17]._fU12 = 180.00000000;
    l_U487[17]._fU16 = {531.67900000, -20.65100000, 6.84500000};
    l_U487[17]._fU28 = {-22.04200000, 0.00000000, -142.87600000};
    l_U487[17]._fU40 = {531.97000000, -20.87900000, 8.08000000};
    l_U487[17]._fU52 = {-70.00000000, 0.00000000, -125.77800000};
    l_U487[17]._fU64 = 9000;
    l_U487[17]._fU68 = 7800;
    l_U487[17]._fU72 = 5;
    l_U487[17]._fU76 = 52;
    l_U487[18]._fU0 = {535.23800000, -20.03600000, 6.39700000};
    l_U487[18]._fU12 = 196.92800000;
    l_U487[18]._fU16 = {533.90700000, -19.79300000, 7.56300000};
    l_U487[18]._fU28 = {11.98500000, 0.00000000, -138.79300000};
    l_U487[18]._fU40 = {535.12300000, -18.15200000, 7.56100000};
    l_U487[18]._fU52 = {-10.49100000, 0.00000000, -165.95300000};
    l_U487[18]._fU64 = 10000;
    l_U487[18]._fU68 = 10000;
    l_U487[18]._fU72 = 6;
    l_U487[18]._fU76 = 50;
    l_U487[19]._fU0 = {535.38600000, -20.11100000, 6.40200000};
    l_U487[19]._fU12 = 0.00000000;
    l_U487[19]._fU16 = {536.26200000, -18.10700000, 6.92800000};
    l_U487[19]._fU28 = {18.62600000, 0.05800000, 158.20200000};
    l_U487[19]._fU40 = {536.02800000, -19.36500000, 7.77700000};
    l_U487[19]._fU52 = {0.48900000, 0.00000000, 157.39200000};
    l_U487[19]._fU64 = 10000;
    l_U487[19]._fU68 = 6800;
    l_U487[19]._fU72 = 6;
    l_U487[19]._fU76 = 51;
    l_U487[20]._fU0 = {535.74300000, -21.93000000, 7.33400000};
    l_U487[20]._fU12 = 0.00000000;
    l_U487[20]._fU16 = {534.79700000, -22.72200000, 9.15700000};
    l_U487[20]._fU28 = {-29.40700000, -1.85400000, -32.85200000};
    l_U487[20]._fU40 = {534.85800000, -21.65400000, 9.33400000};
    l_U487[20]._fU52 = {-62.47000000, -12.42400000, -97.63900000};
    l_U487[20]._fU64 = 9000;
    l_U487[20]._fU68 = 7800;
    l_U487[20]._fU72 = 6;
    l_U487[20]._fU76 = 52;
    l_U487[21]._fU0 = {532.52600000, -22.65600000, 8.20100000};
    l_U487[21]._fU12 = 0.00000000;
    l_U487[21]._fU16 = {531.87500000, -23.57500000, 9.59100000};
    l_U487[21]._fU28 = {8.06700000, -5.84000000, -15.92400000};
    l_U487[21]._fU40 = {532.95800000, -23.80100000, 10.15700000};
    l_U487[21]._fU52 = {-37.86600000, -4.79600000, 23.45300000};
    l_U487[21]._fU64 = 11500;
    l_U487[21]._fU68 = 10000;
    l_U487[21]._fU72 = 7;
    l_U487[21]._fU76 = 50;
    l_U487[22]._fU0 = {532.63900000, -22.70500000, 8.15000000};
    l_U487[22]._fU12 = 180.00000000;
    l_U487[22]._fU16 = {533.45800000, -23.11400000, 9.77800000};
    l_U487[22]._fU28 = {9.54400000, 0.20300000, 19.03100000};
    l_U487[22]._fU40 = {533.77600000, -23.77500000, 10.25200000};
    l_U487[22]._fU52 = {-10.34700000, 0.33900000, 19.94800000};
    l_U487[22]._fU64 = 10000;
    l_U487[22]._fU68 = 6800;
    l_U487[22]._fU72 = 7;
    l_U487[22]._fU76 = 51;
    l_U487[23]._fU0 = {532.37800000, -20.34000000, 9.47200000};
    l_U487[23]._fU12 = 180.00000000;
    l_U487[23]._fU16 = {531.93400000, -20.07000000, 11.85300000};
    l_U487[23]._fU28 = {-53.73000000, 1.95100000, -164.94700000};
    l_U487[23]._fU40 = {531.94800000, -20.84000000, 11.71900000};
    l_U487[23]._fU52 = {-70.00000000, 5.64900000, -52.66500000};
    l_U487[23]._fU64 = 8000;
    l_U487[23]._fU68 = 7800;
    l_U487[23]._fU72 = 7;
    l_U487[23]._fU76 = 52;
    l_U487[24]._fU0 = {535.18500000, -20.55200000, 10.03000000};
    l_U487[24]._fU12 = 180.00000000;
    l_U487[24]._fU16 = {535.57200000, -18.64300000, 11.37200000};
    l_U487[24]._fU28 = {1.78700000, -0.11600000, 173.64500000};
    l_U487[24]._fU40 = {534.63700000, -19.27000000, 10.94200000};
    l_U487[24]._fU52 = {-12.96200000, 0.00000000, -156.27300000};
    l_U487[24]._fU64 = 11500;
    l_U487[24]._fU68 = 10000;
    l_U487[24]._fU72 = 8;
    l_U487[24]._fU76 = 50;
    l_U487[25]._fU0 = {535.10100000, -20.31300000, 9.86400000};
    l_U487[25]._fU12 = 0.00000000;
    l_U487[25]._fU16 = {536.49900000, -20.48300000, 11.79500000};
    l_U487[25]._fU28 = {8.20600000, -0.34600000, 145.11700000};
    l_U487[25]._fU40 = {536.06100000, -18.38600000, 11.09200000};
    l_U487[25]._fU52 = {2.82500000, 1.70000000, 161.42200000};
    l_U487[25]._fU64 = 12000;
    l_U487[25]._fU68 = 6800;
    l_U487[25]._fU72 = 8;
    l_U487[25]._fU76 = 51;
    l_U487[26]._fU0 = {535.13800000, -22.34300000, 10.82000000};
    l_U487[26]._fU12 = 0.00000000;
    l_U487[26]._fU16 = {534.28700000, -22.87900000, 12.32300000};
    l_U487[26]._fU28 = {-23.38500000, -3.54100000, -29.49600000};
    l_U487[26]._fU40 = {534.17400000, -22.04700000, 13.10300000};
    l_U487[26]._fU52 = {-63.13600000, -3.54100000, -100.96200000};
    l_U487[26]._fU64 = 9000;
    l_U487[26]._fU68 = 7800;
    l_U487[26]._fU72 = 8;
    l_U487[26]._fU76 = 52;
    l_U468[0] = "SPOL_OPNWNDW";
    l_U468[1] = "SPOL_MX20SEC";
    l_U468[2] = "SPOL_MX30SEC";
    l_U472[0] = 2000;
    l_U472[1] = l_U355 - 30000;
    l_U472[2] = l_U355 - 40000;
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_12867(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_13075(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_REQUEST_STR_PERSISTENT_ASSETS */ void sub_20301()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_REQUEST_STR_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_20404( ref l_U191, ref g_U2468 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_23326( ref l_U196, ref g_U2613 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_25357( ref g_U3553, ref g_U2741 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_25357( "LEVEL_S_POLICE_CP_10", ref g_U2741 );
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_REQUEST_STR_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_20404(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_20477( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_20477(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_20544( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20802( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_20544(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20802( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20802( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20802( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_22333( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20802( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20802( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_20802(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20863( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_20863(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_22333(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_23326(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_23400( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_23400(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_23454( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23715( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_23454(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23715( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23715( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23715( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_22333( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23715( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23715( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_23715(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20863( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_25357(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_25409( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25661( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_25409(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25661( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25661( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25661( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_22333( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25661( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25661( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_25661(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20863( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_STR_NONPERSISTENT_ASSETS */ void sub_27321()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_REQUEST_STR_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_27431( 1750428255, ref g_U2662 );
     /* P_STREAMREQ_SCRIPT_STREAM_INSERT */ sub_30255( "S_POLICE_SMOKE_GRENADE", ref g_U2849 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "PRECINCT_ONESHOT_5", 0 );
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_REQUEST_STR_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_27431(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_27492( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27742( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_27492(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27742( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27742( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27742( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27742( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_22333( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_22333( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27742( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27742( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_27742(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20863( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_INSERT */ void sub_30255(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_IS_INDEX_AVAILABLE */ sub_30311( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing SCRIPT_STREAM asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30575( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_INDEX_AVAILABLE */ int sub_30311(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30575( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is already loading!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30575( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (Result <= 2)
                {
                    if ((GET_SCRIPT_STREAM_STATE( uParam0, Result )) == 2)
                    {
                        DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                        DISPLAYF( "The SCRIPT_STREAM asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30575( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The SCRIPT_STREAM asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                        (uParam1^)[Result]._fU32 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_22333( ref (uParam1^)[Result]._fU36 );
                        return Result;
                    }
                }
                else
                {
                    DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The SCRIPT_STREAM asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30575( Result, uParam1, uParam2 );
                    return -1;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30575( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (Result <= 2)
        {
            if ((GET_SCRIPT_STREAM_STATE( uParam0, iVar6 )) == 2)
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1537, uParam0 );
                DISPLAYF( "The SCRIPT_STREAM asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing SCRIPT_STREAM: {} ###", 1, 1537, uParam0 );
                StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
                (uParam1^)[iVar6]._fU32 = 3;
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30575( iVar6, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar6;
            }
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The SCRIPT_STREAM - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ void sub_30575(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20863( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The SCRIPT_STREAM asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_32553(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_32950(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_33352(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_33743(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ int sub_34157(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_34773(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_600( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_7577( uParam0,  /* PLAYER_PED_ID */ sub_1085() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_35326(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_600( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_600( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_10843( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_35617( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_36094( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_36094( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_36354( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_36094( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_36354( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_36354( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_36094( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_36354( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_36354( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_36354( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_36094( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_36354( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_36354( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_36354( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_36354( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_37934( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_600( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_35617(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7858( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_600( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_600( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_36094(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_36354(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_37934(int iParam0)
{
     /* WRITE_STRING */ sub_9678( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_38022( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_38099( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_38099( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_38099( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_38099( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_38099( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_38969( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU52 );
     /* WRITE_STRING */ sub_9678( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU96 );
     /* WRITE_STRING */ sub_9678( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU100 );
     /* WRITE_STRING */ sub_9678( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU104 );
     /* WRITE_STRING */ sub_9678( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU108 );
     /* WRITE_STRING */ sub_9678( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU112 );
     /* WRITE_STRING */ sub_9678( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU116 );
     /* WRITE_STRING */ sub_9678( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU120 );
     /* WRITE_STRING */ sub_9678( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU124 );
     /* WRITE_STRING */ sub_9678( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU128 );
     /* WRITE_STRING */ sub_9678( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_38268( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_38268( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_38268( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_38022(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_38099(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_38268(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_38969(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_STR_CREATE_DEAD_RIOTER */ void sub_39990()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_CREATE_DEAD_RIOTER start", 0 );
    l_U308 =  /* CREATEPED */ sub_40075( ref l_U295 );
    if (NOT (IS_PED_DEAD( l_U308 )))
    {
        SET_ROOM_FOR_PED_BY_NAME( l_U308, ref g_U3421 );
        SET_PED_NAME_DEBUG( l_U308, "pi_STR_DeadRioter" );
    }
     /* P_CREATE_DEAD_BODY */ sub_41100( l_U308, 3 );
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_CREATE_DEAD_RIOTER end", 0 );
    return;
}

/* CREATEPED */ void sub_40075(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_40257( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_40806( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_40907( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_40257(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_9678( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_40806(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_40907(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_CREATE_DEAD_BODY */ void sub_41100(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
         /* WRITE_STRING */ sub_9678( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

/* P_STR_CREATE_ANIMATED_GRENADE */ void sub_42484()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_CREATE_ANIMATED_GRENADE start", 0 );
    l_U310 =  /* CREATEOBJECTNOOFFSET */ sub_42605( 623430912, 533.00000000, -24.00000000, 9.00000000, 0, 0, 0, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U310 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U310, ref g_U3421 );
        FREEZE_OBJECT_POSITION( l_U310, 1 );
        SET_OBJECT_VISIBLE( l_U310, 0 );
    }
    l_U311 =  /* CREATEOBJECTNOOFFSET */ sub_42605( 2014638728, 536.50000000, -19.00000000, 6.10000000, 0, 0, 0, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U311 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U311, ref g_U3421 );
        FREEZE_OBJECT_POSITION( l_U311, 1 );
        SET_OBJECT_VISIBLE( l_U311, 0 );
    }
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_CREATE_ANIMATED_GRENADE end", 0 );
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_42605(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_40257( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_STR_HANDLE_TEARGAS_NIS */ void sub_43140()
{
    switch (l_U227)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_600( "GA", "e_STR_TeargasNISState = eNIS_STATE_SETUP", 0 );
         /* NIS_PRE_SETUP */ sub_43271( 1, 0, 0, 1 );
        CAMERA_PLAY_ANIMATED( "LEVEL_S_POLICE_CP_10", "TEAR_GRENADE_PP_CAM", 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0, 0 );
         /* TELEPORTPED */ sub_7219(  /* PLAYER_PED_ID */ sub_1085(), g_U2953[10], g_U3083[10] );
        DO_SCREEN_FADE_IN( 0 );
        l_U227 = 2;
         /* WRITESCRIPTLOG */ sub_600( "GA", "e_STR_TeargasNISState = eNIS_STATE_SETUP", 0 );
        break;
        case 2:
        if (NOT l_U290)
        {
            if (CAMERA_ANIMATED_CURRENT_TIME() > 1000)
            {
                 /* P_STR_SEND_OUT_SMOKE_CANISTERS */ sub_43648();
                l_U290 = 1;
            }
        }
        if (NOT l_U291)
        {
            if (CAMERA_ANIMATED_CURRENT_TIME() > 3200)
            {
                PLAY_IMAGEFX( "FLICKER_VIBRATE_01", 4, 1 );
                START_PARTICLE_FX_NON_LOOPED_AT_COORD( "WE_TG_Explo_Stairwell_S", 534.50000000, -18.92000000, 6.54000000, 0.00000000, 0.00000000, 0.00000000, 1065353216 );
                l_U291 = 1;
            }
        }
        if (NOT l_U292)
        {
            if (CAMERA_ANIMATED_CURRENT_TIME() > 1500)
            {
                PLAY_IMAGEFX( "GAMMA_ZOOM_1", 4, 1 );
                l_U292 = 1;
            }
        }
        if (NOT IS_ANIMATED_CAMERA_PLAYING())
        {
            l_U227 = 4;
             /* WRITESCRIPTLOG */ sub_600( "GA", "e_STR_TeargasNISState = eNIS_STATE_RETURNING_TO_PLAYER", 0 );
        }
        break;
        case 4:
        SET_TIMECYCLE_MODIFIER( "pof3_gas" );
         /* NIS_POST_SETUP */ sub_44697( 1, 1 );
        l_U227 = 5;
         /* WRITESCRIPTLOG */ sub_600( "GA", "e_STR_TeargasNISState = eNIS_STATE_COMPLETE", 0 );
        break;
    }
    return;
}

/* NIS_PRE_SETUP */ void sub_43271(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1123(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1085(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1085() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1085(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_STR_SEND_OUT_SMOKE_CANISTERS */ void sub_43648()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_SEND_OUT_SMOKE_CANISTERS start", 0 );
    if (DOES_OBJECT_EXIST( l_U310 ))
    {
        SET_OBJECT_VISIBLE( l_U310, 1 );
        PLAY_OBJECT_ANIM( l_U310, "P_AN_GASCAN_AA", "po_objModels", 1000.00000000, 0, 1 );
    }
    l_U312 = 1;
     /* P_STREAMREQ_SCRIPT_STREAM_PLAY_FRONTEND */ sub_43858( "S_POLICE_SMOKE_GRENADE", ref g_U2849 );
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_SEND_OUT_SMOKE_CANISTERS end", 0 );
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_PLAY_FRONTEND */ void sub_43858(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_5486( uParam0, uParam1 ))
    {
        iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_5695( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            DISPLAYF( "[CCB]### Playing the SCRIPT_STREAM: {} ###", 1, 1281, ref (uParam1^)[iVar4]._fU0 );
            PLAY_SCRIPT_STREAM_FRONTEND( iVar4 );
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam0 );
            SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam0 );
        SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* NIS_POST_SETUP */ void sub_44697(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1123(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1085(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_44795();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_44795()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1085(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1085(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1085(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1085(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_STR_HANDLE_ANIMTED_GRENADE_SWAP */ void sub_45077()
{
    if (l_U312)
    {
        if ((DOES_OBJECT_EXIST( l_U311 )) AND (DOES_OBJECT_EXIST( l_U310 )))
        {
            if (NOT (IS_OBJECT_PLAYING_ANIM( l_U310, "P_AN_GASCAN_AA", "po_objModels" )))
            {
                 /* WRITESCRIPTLOG */ sub_600( "GA", "Animated grenade is complete, swapping to post-anim grenade.", 0 );
                FREEZE_OBJECT_POSITION( l_U311, 0 );
                SET_OBJECT_VISIBLE( l_U311, 1 );
                 /* CLEANOBJECT */ sub_6670( l_U310 );
                l_U312 = 0;
            }
        }
    }
    return;
}

/* P_STR_START_STAIRWELL_GAMEPLAY */ void sub_45349()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_START_STAIRWELL_GAMEPLAY start", 0 );
    SET_CAM_VIEW_MODE( 0 );
    AUD_SET_IS_POWER_ON( 1 );
     /* P_STR_CREATE_VENT */ sub_45458();
     /* P_STR_CREATE_GUN_PLACEMENT */ sub_45663();
     /* P_CLOSEDOOR */ sub_46040( ref g_U3981, 1 );
     /* P_SETDOORLOCKED */ sub_46297( ref g_U3981, 1 );
     /* STARTTIMER */ sub_2424( ref l_U386 );
     /* STARTTIMER */ sub_2424( ref l_U356 );
    SET_WEATHER_TYPE_PERSIST( "CLOUDY" );
    SET_WEATHER_TRANSITION_IMMEDIATE( 1 );
    SET_WEATHER_TRANSITION_SPEED( l_U365 );
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_START_STAIRWELL_GAMEPLAY end", 0 );
    return;
}

/* P_STR_CREATE_VENT */ void sub_45458()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_CREATE_VENT start", 0 );
    l_U313 =  /* CREATEOBJECTNOOFFSET */ sub_42605( 2146529263, 532.88000000, -17.15000000, 12.36000000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U313 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U313, ref g_U3421 );
        CAMERA_CAN_TARGET_OBJECT( 1, l_U313 );
    }
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_CREATE_VENT end", 0 );
    return;
}

/* P_STR_CREATE_GUN_PLACEMENT */ void sub_45663()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_CREATE_GUN_PLACEMENT start", 0 );
    l_U309 =  /* CREATEPLACEMENT */ sub_45792( -1377271918, 534.26450000, -18.08235000, 6.05019700, 20.48000000, 0.00000000, 0.70000000, 0, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U309, ref g_U3421 );
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_STR_CREATE_GUN_PLACEMENT end", 0 );
    return;
}

/* CREATEPLACEMENT */ void sub_45792(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_CLOSEDOOR */ void sub_46040(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_46066( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_46150( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_46066(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_46150(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORLOCKED */ void sub_46297(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_46066( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_46150( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* P_STR_HANDLE_O2_METER */ void sub_46802()
{
    if (l_U345)
    {
        if ( /* ISTIMERDONE */ sub_2557( ref l_U346 ))
        {
            SET_SECONDARY_LIFE_BAR_PERCENT( GET_SECONDARY_LIFE_BAR_PERCENT() - 0.02220000 );
             /* RESETTIMER */ sub_3133( ref l_U346 );
             /* STARTTIMER */ sub_2424( ref l_U346 );
        }
    }
    return;
}

/* P_HANDLE_HINT_DIALOGUE */ void sub_46906()
{
    if ((NOT ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_46947( l_U395 ))) AND (NOT ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_46947( l_U376 ))))
    {
        if ( /* ISTIMERDONE */ sub_2557( ref l_U386 ))
        {
             /* WRITESCRIPTLOG */ sub_600( "AT", "Playing trapped in stairwell monologue.", 0 );
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_47179( l_U468[l_U476], ref l_U376 );
            l_U476++;
            if (l_U476 < l_U468)
            {
                 /* WRITESCRIPTLOG */ sub_600( "AT", "Starting new timer.", 0 );
                 /* CREATETIMER */ sub_2274( ref l_U386, l_U472[l_U476], 1, 0 );
                 /* STARTTIMER */ sub_2424( ref l_U386 );
            }
             /* CREATETIMER */ sub_2274( ref l_U477, l_U486, 1, 0 );
             /* STARTTIMER */ sub_2424( ref l_U477 );
        }
        if ((l_U477._fU16) || ( /* ISTIMERDONE */ sub_2557( ref l_U477 )))
        {
            if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_48630( ref l_U405, 0 ))
            {
                 /* WRITESCRIPTLOG */ sub_600( "AT", "Playing door monologue.", 0 );
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_47179( "SPOL_MXAPSTR", ref l_U395 );
                 /* CREATETIMER */ sub_2274( ref l_U477, l_U486, 1, 0 );
                 /* STARTTIMER */ sub_2424( ref l_U477 );
            }
            if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_48630( ref l_U426, 0 ))
            {
                 /* WRITESCRIPTLOG */ sub_600( "AT", "Playing door monologue.", 0 );
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_47179( "SPOL_MXAPSTR", ref l_U395 );
                 /* CREATETIMER */ sub_2274( ref l_U477, l_U486, 1, 0 );
                 /* STARTTIMER */ sub_2424( ref l_U477 );
            }
            if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_48630( ref l_U447, 0 ))
            {
                 /* WRITESCRIPTLOG */ sub_600( "AT", "Playing door monologue.", 0 );
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_47179( "SPOL_MXAPSTR", ref l_U395 );
                 /* CREATETIMER */ sub_2274( ref l_U477, l_U486, 1, 0 );
                 /* STARTTIMER */ sub_2424( ref l_U477 );
            }
        }
    }
    return;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_46947(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_1682( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_47179(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_47217( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_47326( 0,  /* PLAYER_PED_ID */ sub_1085(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_47326( 1,  /* PLAYER_PED_ID */ sub_1085(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_47579( uParam0, uParam1, 8, 1 );
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_47217(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_47326(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_47579(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_47624( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_47624(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_47711( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_47711(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_47763( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_48281( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_47763(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_48281(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_48630(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_48706(  /* PLAYER_PED_ID */ sub_1085(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* F_ISPEDINTRIGGERBOX */ int sub_48706(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* MAL_PLAYOBJECTANIM */ void sub_49284(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        PLAY_OBJECT_ANIM( uParam0, uParam1, uParam2, 0.00000000, 0, 1 );
        SET_OBJECT_ANIM_CURRENT_TIME( uParam0, uParam1, uParam2, uParam4 );
        SET_OBJECT_ANIM_SPEED( uParam0, uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_START_MID_11 */ void sub_49823()
{
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1133 ))
    {
         /* F_SELECT_DEATH_VARIATION */ sub_49918( 5 );
    }
    else if ( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1154 ))
    {
         /* F_SELECT_DEATH_VARIATION */ sub_49918( 6 );
    }
    else if ( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1175 ))
    {
         /* F_SELECT_DEATH_VARIATION */ sub_49918( 7 );
    }
    else if ( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1196 ))
    {
         /* F_SELECT_DEATH_VARIATION */ sub_49918( 8 );
    }
    else if ( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1028 ))
    {
         /* F_SELECT_DEATH_VARIATION */ sub_49918( 0 );
    }
    else if ( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1049 ))
    {
         /* F_SELECT_DEATH_VARIATION */ sub_49918( 1 );
    }
    else if ( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1070 ))
    {
         /* F_SELECT_DEATH_VARIATION */ sub_49918( 2 );
    }
    else if ( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1091 ))
    {
         /* F_SELECT_DEATH_VARIATION */ sub_49918( 3 );
    }
    else if ( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1112 ))
    {
         /* F_SELECT_DEATH_VARIATION */ sub_49918( 4 );
    };;;;;;;;;
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_49856(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_48706(  /* PLAYER_PED_ID */ sub_1085(), uParam0 );
}

/* F_SELECT_DEATH_VARIATION */ int sub_49918(int iParam0)
{
    unknown[3] uVar3;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;
    unknown uVar45;
    unknown uVar46;
    unknown uVar47;
    unknown uVar48;
    unknown uVar49;
    unknown uVar50;
    unknown uVar51;
    unknown uVar52;
    unknown uVar53;
    unknown uVar54;
    unknown uVar55;
    unknown uVar56;
    unknown uVar57;
    unknown uVar58;
    unknown uVar59;
    unknown uVar60;
    unknown uVar61;
    unknown uVar62;
    unknown uVar63;
    int iVar64;
    int I;
    unknown uVar66;
    int J;
    int iVar68;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
    {
        CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1085() );
        RESET_PLAYER_INPUT_GAIT( 0 );
         /* P_RESET_MAX_ACTION_TREE */ sub_3707();
    }
    array(ref uVar3, 3);
    iVar64 = 0;
    if ((iParam0 == 4) || ((iParam0 == 3) || ((iParam0 == 2) || ((iParam0 == 1) || (iParam0 == 0)))))
    {
        for ( I = 0; I < l_U487; I++ )
        {
            PRINTINT( I );
            PRINTNL();
            if (l_U487[I]._fU72 == iParam0)
            {
                if (iVar64 < 3)
                {
                    PRINTSTRING( "Adding to array: " );
                    PRINTINT( I );
                    PRINTNL();
                    uVar3[iVar64] = {l_U487[I]};
                    iVar64++;
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_600( "AT", "Array full.", 0 );
                }
            }
            else
            {
                PRINTSTRING( "No match for " );
                PRINTINT( I );
                PRINTNL();
            }
        }
        uVar66 = GET_RANDOM_INT_IN_RANGE( 0, 3 );
        PRINTSTRING( "Random int is: " );
        PRINTINT( uVar66 );
        PRINTNL();
        PED_SET_ACTION_INTENTION(  /* PLAYER_PED_ID */ sub_1085(), uVar3[uVar66]._fU76, 1000, 0.00000000, 0.00000000, 0.00000000 );
         /* NIS_CREATE_STATIC_CAM */ sub_50426( ref l_U1217, uVar3[uVar66]._fU16, uVar3[uVar66]._fU28, 1110704128, 1000 );
         /* NIS_CREATE_STATIC_CAM */ sub_50426( ref l_U1248, uVar3[uVar66]._fU40, uVar3[uVar66]._fU52, 45, uVar3[uVar66]._fU64 );
         /* TELEPORTPED */ sub_7219(  /* PLAYER_PED_ID */ sub_1085(), uVar3[uVar66]._fU0, uVar3[uVar66]._fU12 );
        ISEQ_REGISTER_ENTITY( 1750428255, "Max",  /* PLAYER_PED_ID */ sub_1085(), 0 );
        ISEQ_START( 1750428255 );
         /* CREATETIMER */ sub_2274( ref l_U1279, uVar3[uVar66]._fU68, 1, 0 );
         /* STARTTIMER */ sub_2424( ref l_U1279 );
         /* CREATETIMER */ sub_2274( ref l_U1288, uVar3[uVar66]._fU64 - 2300, 1, 0 );
         /* STARTTIMER */ sub_2424( ref l_U1288 );
        return 1;
    }
    else
    {
        for ( J = 0; J < l_U487; J++ )
        {
            PRINTINT( J );
            PRINTNL();
            if (l_U487[J]._fU72 == iParam0)
            {
                if (iVar64 < 3)
                {
                    PRINTSTRING( "Adding to array: " );
                    PRINTINT( J );
                    PRINTNL();
                    uVar3[iVar64] = {l_U487[J]};
                    iVar64++;
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_600( "AT", "Array full.", 0 );
                }
            }
            else
            {
                PRINTSTRING( "No match for " );
                PRINTINT( J );
                PRINTNL();
            }
        }
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1085() )))
        {
            if (( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1175 )) || ( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1133 )))
            {
                if (((GET_PED_HEADING(  /* PLAYER_PED_ID */ sub_1085() )) < 260.00000000) AND ((GET_PED_HEADING(  /* PLAYER_PED_ID */ sub_1085() )) > 100.00000000))
                {
                     /* WRITESCRIPTLOG */ sub_600( "AT", "Player is headed downstairs.", 0 );
                    iVar68 = 2;
                    PRINTSTRING( "Int is: " );
                    PRINTINT( iVar68 );
                    PRINTNL();
                }
                else
                {
                    iVar68 = GET_RANDOM_INT_IN_RANGE( 0, 2 );
                    PRINTSTRING( "Random int is: " );
                    PRINTINT( iVar68 );
                    PRINTNL();
                }
            }
            else if (( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1196 )) || ( /* F_ISPLAYERINTRIGGERBOX */ sub_49856( l_U1154 )))
            {
                if (((GET_PED_HEADING(  /* PLAYER_PED_ID */ sub_1085() )) > 280.00000000) || ((GET_PED_HEADING(  /* PLAYER_PED_ID */ sub_1085() )) < 80.00000000))
                {
                     /* WRITESCRIPTLOG */ sub_600( "AT", "Player is headed downstairs.", 0 );
                    iVar68 = 2;
                    PRINTSTRING( "Int is: " );
                    PRINTINT( iVar68 );
                    PRINTNL();
                }
                else
                {
                    iVar68 = GET_RANDOM_INT_IN_RANGE( 0, 2 );
                    PRINTSTRING( "Random int is: " );
                    PRINTINT( iVar68 );
                    PRINTNL();
                }
            }
        }
        PED_SET_ACTION_INTENTION(  /* PLAYER_PED_ID */ sub_1085(), uVar3[iVar68]._fU76, 1000, 0.00000000, 0.00000000, 0.00000000 );
         /* NIS_CREATE_STATIC_CAM */ sub_50426( ref l_U1217, uVar3[iVar68]._fU16, uVar3[iVar68]._fU28, 1110704128, 1000 );
         /* NIS_CREATE_STATIC_CAM */ sub_50426( ref l_U1248, uVar3[iVar68]._fU40, uVar3[iVar68]._fU52, 45, uVar3[iVar68]._fU64 );
         /* TELEPORTPED */ sub_7219(  /* PLAYER_PED_ID */ sub_1085(), uVar3[iVar68]._fU0, uVar3[iVar68]._fU12 );
        ISEQ_REGISTER_ENTITY( 1750428255, "Max",  /* PLAYER_PED_ID */ sub_1085(), 0 );
        ISEQ_START( 1750428255 );
         /* CREATETIMER */ sub_2274( ref l_U1279, uVar3[iVar68]._fU68, 1, 0 );
         /* STARTTIMER */ sub_2424( ref l_U1279 );
         /* CREATETIMER */ sub_2274( ref l_U1288, uVar3[iVar68]._fU64 - 5500, 1, 0 );
         /* STARTTIMER */ sub_2424( ref l_U1288 );
        return 1;
    }
    return 0;
}

/* NIS_CREATE_STATIC_CAM */ void sub_50426(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_2274( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref l_U39, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* F_IS_MID_11_COMPLETE */ int sub_52101()
{
    unknown uVar2;

    if ( /* ISTIMERDONE */ sub_2557( ref l_U1279 ))
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1085(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            TASK_DROP_WEAPON(  /* PLAYER_PED_ID */ sub_1085(), uVar2 );
             /* CREATETIMER */ sub_2274( ref l_U1279, 50, 1, 0 );
             /* STARTTIMER */ sub_2424( ref l_U1279 );
        }
        else
        {
            uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1085(), 0, 0 );
            if (GET_DOES_WEAPON_EXIST( uVar2 ))
            {
                TASK_DROP_WEAPON(  /* PLAYER_PED_ID */ sub_1085(), uVar2 );
                 /* CREATETIMER */ sub_2274( ref l_U1279, 50, 1, 0 );
                 /* STARTTIMER */ sub_2424( ref l_U1279 );
            }
        }
    }
    if ((NOT l_U1248._fU32) AND (ISEQ_QUERY_STATE( 1750428255, 3 )))
    {
         /* NIS_PLAY_INTERP_WITH_STATIC_CAMS */ sub_52335( ref l_U1217, ref l_U1248, l_U1248._fU84, 1, 1 );
        SHAKE_CAM( l_U1248._fU0,  /* F_CAM_SHAKE_WOBBLY */ sub_52471(), 0.25000000 );
    }
    if ( /* ISTIMERDONE */ sub_2557( ref l_U1288 ))
    {
        l_U1424 = CREATE_CAM( "DEFAULT_BULLET_CAMERA", 1 );
        SETUP_BULLET_CAMERA_SCENE( l_U1424, "MISS_DEATH_FALL_01A", 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, "", "" );
        SET_CAM_ACTIVE( l_U1424, 1 );
        return 1;
    }
    return 0;
}

/* NIS_PLAY_INTERP_WITH_STATIC_CAMS */ void sub_52335(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE_WITH_INTERP( iParam1->_fU0, iParam0->_fU0, uParam2, uParam3, uParam4 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_2424( iParam1 + 48 );
    iParam1->_fU32 = 1;
    iParam1->_fU40 = 1;
    return;
}

/* F_CAM_SHAKE_WOBBLY */ string sub_52471()
{
    return "WOBBLY_SHAKE";
}

/* P_HANDLE_IMAGEFX_GAS */ void sub_52949()
{
    if (l_U1422)
    {
         /* P_INITIALIZE_GAS_IMAGEFX_01 */ sub_52992();
        l_U1422 = 0;
    }
    if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_53409( ref l_U1380,  /* PLAYER_PED_ID */ sub_1085(), 0 ))
    {
         /* P_INITIALIZE_GAS_IMAGEFX_02 */ sub_53538();
    }
    if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_53409( ref l_U1401,  /* PLAYER_PED_ID */ sub_1085(), 0 ))
    {
        PLAY_IMAGEFX( "DOUBLE_WIDE_INTERLACE_FLASH_03", 4, 0 );
    }
    if (l_U1423)
    {
         /* P_INITIALIZE_GAS_IMAGEFX_03 */ sub_53867();
        l_U1423 = 0;
    }
     /* P_HANDLE_IMAGEFX */ sub_54086( ref l_U1298 );
    return;
}

/* P_INITIALIZE_GAS_IMAGEFX_01 */ void sub_52992()
{
     /* P_INIT_IMAGEFX */ sub_53036( ref l_U1298 );
    l_U1298[0]._fU4 = "FLASH_WHITE_2";
    l_U1298[0]._fU20 = 2;
    l_U1298[0]._fU8 = 4;
    l_U1298[0]._fU32 = 0;
    l_U1298[1]._fU4 = "DOUBLE_TINT_BLUE_FLASH";
    l_U1298[1]._fU8 = 4;
    l_U1298[1]._fU32 = 0;
    l_U1298[2]._fU4 = "TRIPLE_IMAGE_BLUR_DOWN";
    l_U1298[2]._fU8 = 4;
    l_U1298[2]._fU32 = 0;
    l_U152 = 0;
    return;
}

/* P_INIT_IMAGEFX */ void sub_53036(unknown uParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_600( "CO", "P_INIT_IMAGEFX", 0 );
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I]._fU4 = "";
        (uParam0^)[I]._fU12 = 0;
        (uParam0^)[I]._fU16 = 0;
        (uParam0^)[I]._fU20 = 0;
        (uParam0^)[I]._fU24 = 0;
        (uParam0^)[I]._fU28 = 0;
        (uParam0^)[I]._fU32 = 1;
    }
    return;
}

/* F_ISPEDINTRIGGERBOXFIRSTTIME */ void sub_53409(int iParam0, unknown uParam1, unknown uParam2)
{
    if (iParam0->_fU68 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU68 =  /* F_ISPEDINTRIGGERBOX */ sub_48706( uParam1, (iParam0^) );
        if ((iParam0->_fU68) AND (uParam2))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU68;
}

/* P_INITIALIZE_GAS_IMAGEFX_02 */ void sub_53538()
{
     /* P_INIT_IMAGEFX */ sub_53036( ref l_U1298 );
    l_U1298[0]._fU4 = "DOUBLE_TINT_BLUE_FLASH_FLICKER";
    l_U1298[0]._fU20 = 1;
    l_U1298[0]._fU16 = 1500;
    l_U1298[0]._fU24 = 1;
    l_U1298[0]._fU8 = 4;
    l_U1298[0]._fU32 = 0;
    l_U1298[1]._fU4 = "TRIPLE_MOVE_RIGHT_COLOR_SPLIT5";
    l_U1298[1]._fU8 = 4;
    l_U1298[1]._fU16 = 1500;
    l_U1298[1]._fU24 = 1;
    l_U1298[1]._fU32 = 0;
    l_U152 = 0;
    return;
}

/* P_INITIALIZE_GAS_IMAGEFX_03 */ void sub_53867()
{
     /* P_INIT_IMAGEFX */ sub_53036( ref l_U1298 );
    l_U1298[0]._fU4 = "TRIPLE_IMAGE_BLUR_DOWN_RIGHT";
    l_U1298[0]._fU20 = 1;
    l_U1298[0]._fU8 = 4;
    l_U1298[0]._fU28 = 1;
    l_U1298[0]._fU32 = 0;
    l_U1298[1]._fU4 = "FLASH_WHITE";
    l_U1298[1]._fU8 = 4;
    l_U1298[1]._fU28 = 1;
    l_U1298[1]._fU32 = 0;
    l_U152 = 0;
    return;
}

/* P_HANDLE_IMAGEFX */ void sub_54086(unknown uParam0)
{
    int I;
    int J;

    switch (l_U152)
    {
        case 0:
         /* WRITESCRIPTLOG */ sub_600( "CO", "P_HANDLE_IMAGEFX", 0 );
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (uParam0^)[I]._fU32)
            {
                 /* CREATETIMER */ sub_2274( ref (uParam0^)[I]._fU36, (uParam0^)[I]._fU12, 1, 0 );
                 /* STARTTIMER */ sub_2424( ref (uParam0^)[I]._fU36 );
                if ((uParam0^)[I]._fU20 > 0)
                {
                    I += (uParam0^)[I]._fU20;
                }
            }
        }
        l_U152 = 1;
        break;
        case 1:
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if ( /* ISTIMERDONE */ sub_2557( ref (uParam0^)[I]._fU36 ))
            {
                (uParam0^)[I]._fU0 = PLAY_IMAGEFX( (uParam0^)[I]._fU4, (uParam0^)[I]._fU8, (uParam0^)[I]._fU28 );
                if ((uParam0^)[I]._fU16 > 0)
                {
                     /* CREATETIMER */ sub_2274( ref (uParam0^)[I]._fU72, (uParam0^)[I]._fU16, 1, 0 );
                     /* STARTTIMER */ sub_2424( ref (uParam0^)[I]._fU72 );
                }
                if ((uParam0^)[I]._fU20 > 0)
                {
                    for ( J = I + 1; J <= (I + (uParam0^)[I]._fU20); J++ )
                    {
                        PRINTSTRING( "******* [CO] ***** STARTING CHILD FOR index : " );
                        PRINTINT( J );
                        PRINTNL();
                        (uParam0^)[J]._fU0 = PLAY_IMAGEFX( (uParam0^)[J]._fU4, (uParam0^)[J]._fU8, (uParam0^)[I]._fU28 );
                        if ((uParam0^)[J]._fU16 > 0)
                        {
                             /* CREATETIMER */ sub_2274( ref (uParam0^)[J]._fU72, (uParam0^)[J]._fU16, 1, 0 );
                             /* STARTTIMER */ sub_2424( ref (uParam0^)[J]._fU72 );
                        }
                    }
                    I += (uParam0^)[I]._fU20;
                }
            }
            if ( /* ISTIMERDONE */ sub_2557( ref (uParam0^)[I]._fU72 ))
            {
                STOP_IMAGEFX( (uParam0^)[I]._fU0, (uParam0^)[I]._fU24 );
                (uParam0^)[I]._fU32 = 1;
                if ((uParam0^)[I]._fU20 > 0)
                {
                    if ((uParam0^)[I]._fU20 == 1)
                    {
                        STOP_IMAGEFX( (uParam0^)[I + 1]._fU0, (uParam0^)[I + 1]._fU24 );
                        (uParam0^)[I + 1]._fU32 = 1;
                    }
                    else
                    {
                        for ( J = I + 1; J <= (uParam0^)[I]._fU20; J++ )
                        {
                            STOP_IMAGEFX( (uParam0^)[J]._fU0, (uParam0^)[J]._fU24 );
                            (uParam0^)[J]._fU32 = 1;
                        }
                    }
                    I += (uParam0^)[I]._fU20;
                }
            }
        }
        break;
    }
    return;
}

/* P_HANDLE_DEBUG_INVINCIBLITY */ void sub_54966()
{
    if ( /* F_DEBUG_CHECK_FOR_SCRIPT_INVINCIBILITY_KEY */ sub_55006())
    {
        l_U204 = NOT l_U204;
        if (l_U204)
        {
             /* TEXT_ONSCREEN_GENERAL */ sub_55155( "Script invincibility ON", 3000 );
        }
        else
        {
             /* TEXT_ONSCREEN_GENERAL */ sub_55155( "Script invincibility OFF", 3000 );
        }
    }
    return;
}

/* F_DEBUG_CHECK_FOR_SCRIPT_INVINCIBILITY_KEY */ int sub_55006()
{
    if ((IS_MARKETING_KEYBOARD_KEY_JUST_PRESSED( 49 )) || (IS_KEYBOARD_KEY_JUST_PRESSED( 49 )))
    {
        return 1;
    }
    return 0;
}

/* TEXT_ONSCREEN_GENERAL */ void sub_55155(unknown uParam0, unknown uParam1)
{
    PRINT_STRING_WITH_LITERAL_STRING( "STRING", uParam0, uParam1, 1 );
    return;
}

/* P_STR_DEBUG_TUNING_WIDGET */ void sub_55266()
{
    if (NOT l_U1425)
    {
        START_WIDGET_GROUP( "Stairwell Tuning" );
        ADD_WIDGET_BOOL( "Restart Checkpoint", ref l_U1426 );
        START_WIDGET_GROUP( "Smoke Into Stairwell NIS" );
        ADD_WIDGET_INT_SLIDER( "Interp time", ref l_U293, 0, 100000, 50 );
        ADD_WIDGET_INT_SLIDER( "Duration", ref l_U294, 0, 1000000, 50 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Smoke Grenade Lower" );
        START_WIDGET_GROUP( "Trajectory Start Pos" );
        ADD_WIDGET_FLOAT_SLIDER( "Pos X", ref l_U215._fU0, -5000.00000000, 5000.00000000, 0.01000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Pos Y", ref l_U215._fU4, -5000.00000000, 5000.00000000, 0.01000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Pos Z", ref l_U215._fU8, -5000.00000000, 5000.00000000, 0.01000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Trajectory End Pos" );
        ADD_WIDGET_FLOAT_SLIDER( "Pos X", ref l_U218._fU0, -5000.00000000, 5000.00000000, 0.01000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Pos Y", ref l_U218._fU4, -5000.00000000, 5000.00000000, 0.01000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Pos Z", ref l_U218._fU8, -5000.00000000, 5000.00000000, 0.01000000 );
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Smoke Grenade Upper" );
        START_WIDGET_GROUP( "Trajectory Start Pos" );
        ADD_WIDGET_FLOAT_SLIDER( "Pos X", ref l_U221._fU0, -5000.00000000, 5000.00000000, 0.01000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Pos Y", ref l_U221._fU4, -5000.00000000, 5000.00000000, 0.01000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Pos Z", ref l_U221._fU8, -5000.00000000, 5000.00000000, 0.01000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Trajectory End Pos" );
        ADD_WIDGET_FLOAT_SLIDER( "Pos X", ref l_U224._fU0, -5000.00000000, 5000.00000000, 0.01000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Pos Y", ref l_U224._fU4, -5000.00000000, 5000.00000000, 0.01000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Pos Z", ref l_U224._fU8, -5000.00000000, 5000.00000000, 0.01000000 );
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Suffocation variables" );
        ADD_WIDGET_INT_SLIDER( "Time to suffocate", ref l_U355, 0, 100000, 50 );
        ADD_WIDGET_FLOAT_SLIDER( "Time to full smoke", ref l_U365, 0.00000000, 10000.00000000, 1.00000000 );
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        l_U1425 = 1;
    }
    if (l_U1426)
    {
         /* P_CLEANUP_STR */ sub_4264();
        CLEAR_AREA( g_U2953[10], 10000, 1 );
        l_U201 = 1;
        WAIT( 1000 );
        l_U1426 = 0;
    }
    return;
}

/* P_RELEASE_STR_ASSETS */ void sub_56387()
{
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_RELEASE_STR_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_56468( ref l_U191, ref g_U2468 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_57016( ref l_U196, ref g_U2613 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_57443( ref g_U3553, ref g_U2741 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_57443( "LEVEL_S_POLICE_CP_10", ref g_U2741 );
     /* WRITESCRIPTLOG */ sub_600( "GA", "P_RELEASE_STR_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_56468(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_56541( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_56541(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4482( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_57016(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_57090( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_57090(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4482( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_57443(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4482( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

