void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U73 = {0, 0, 0};
    StrCopy( ref l_U76, "DUMMY", 32 );
    l_U84 = 1;
    l_U89 = 0;
    l_U90 = 0;
    l_U91 = 0;
    l_U94 = 0;
    l_U140 = 0;
    l_U141 = 0;
    l_U142 = 1500;
    l_U161 = 12;
    l_U219 = 0;
    l_U220 = 0;
    l_U222 = 1;
    l_U223 = 0;
    l_U235 = 0;
    l_U1182 = {19.91000000, -5.31000000, 1.09000000};
    l_U1185 = {19.75000000, -5.45000000, 1.40000000};
    l_U1188 = -40.00000000;
     /* WRITESCRIPTLOG */ sub_495( "SP", "Script s_police_lockers.sc is starting up...", 0 );
     /* P_LRG_POPULATE_SCRIPT_ARRAYS */ sub_613();
    l_U220 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_892();
        if (l_U223 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_14647();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_LRG */ sub_6196( 1 );
     /* P_RELEASE_LRG_ASSETS */ sub_67138();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_police_lockers" );
     /* WRITESCRIPTLOG */ sub_495( "SP", "Script s_police_lockers.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_495(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_LRG_POPULATE_SCRIPT_ARRAYS */ void sub_613()
{
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_LRG_POPULATE_SCRIPT_ARRAYS start", 0 );
    l_U208[0] = g_U3227;
    l_U208[1] = -657242783;
    l_U208[2] = g_U812;
    l_U208[3] = g_U813;
    l_U208[4] = g_U818;
    l_U208[5] = g_U819;
    l_U215[0] = -862236369;
    l_U215[1] = 434544317;
    l_U215[2] = 1308526797;
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_LRG_POPULATE_SCRIPT_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_892()
{
    if (g_U821 == 6)
    {
        switch (l_U223)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1094()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
            {
                l_U223 = 1;
                 /* WRITESCRIPTLOG */ sub_495( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
             /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1613( 1 );
            if ( /* IS_RESTART_ACTIVE */ sub_4704())
            {
                l_U223 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_4764( 0 )) == 1)
            {
                l_U223 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
            {
                l_U223 = 3;
                 /* WRITESCRIPTLOG */ sub_495( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_495( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1031() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1031(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_993() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_993(), 0 );
                }
            }
            if ((g_U862[7]._fU40 != 4) AND (g_U862[7]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_495( "CR", "Shutting down script for MCE_ATRIUM.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_6069( ref g_U862[7] );
                SET_EXITFLAG_FOR_SCRIPT( g_U862[7]._fU32 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            AUDIO_MUSIC_STOP_ONESHOT();
             /* P_CLEANUP_LRG */ sub_6196( 0 );
             /* P_FORCE_SCENE_TO_LOAD */ sub_9531( 6 );
            l_U223 = 4;
             /* WRITESCRIPTLOG */ sub_495( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_495( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_9965( ref l_U172,  /* PLAYER_PED_ID */ sub_993() );
            l_U223 = 5;
             /* WRITESCRIPTLOG */ sub_495( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_495( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U220 = 1;
            l_U222 = 0;
            l_U223 = 0;
             /* WRITESCRIPTLOG */ sub_495( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_993()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1031() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1031()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1094()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_993(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1031(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1031(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_993() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_993(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ void sub_1613(boolean bParam0)
{
    int iVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
    {
        if (NOT (IS_PED_IN_COMBAT(  /* PLAYER_PED_ID */ sub_993() )))
        {
            if ((NOT l_U152._fU16) AND (NOT l_U152._fU20))
            {
                 /* WRITESCRIPTLOG */ sub_495( "AT", "Starting painkiller dialogue timer.", 0 );
                 /* CREATETIMER */ sub_1777( ref l_U152, 3500, 1, 0 );
                 /* STARTTIMER */ sub_1927( ref l_U152 );
            }
            if ((l_U152._fU16) AND ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2056()))
            {
                 /* WRITESCRIPTLOG */ sub_495( "AT", "Dialogue detected. Restarting painkiller dialogue timer.", 0 );
                 /* CREATETIMER */ sub_1777( ref l_U152, 3500, 1, 0 );
                 /* STARTTIMER */ sub_1927( ref l_U152 );
            }
            iVar3 = GET_PAYNEKILLER_AMT();
            if (iVar3 > l_U161)
            {
                if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2056()))
                {
                    if ((l_U152._fU16) || ( /* ISTIMERDONE */ sub_2293( ref l_U152 )))
                    {
                        if (g_U4303 < 6)
                        {
                            if ((GET_RANDOM_INT_IN_RANGE( 0, 500 )) < 300)
                            {
                                 /* WRITESCRIPTLOG */ sub_495( "GA", "Playing painkiller monologue.", 0 );
                                 /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2560( ref l_U162 );
                                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2671( 0,  /* PLAYER_PED_ID */ sub_993(), "MAX", ref l_U162, 2, 0 );
                                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2671( 1,  /* PLAYER_PED_ID */ sub_993(), "MAX", ref l_U162, 2, 0 );
                                 /* PLAY_SINGLE_SPEECH */ sub_2941( "SPOL_PLFNDPL", ref l_U162, 8, 1 );
                                g_U4303++;
                            }
                            else
                            {
                                 /* WRITESCRIPTLOG */ sub_495( "GA", "Not playing painkiller speech, failed random chance test.", 0 );
                            }
                        }
                        else
                        {
                             /* WRITESCRIPTLOG */ sub_495( "GA", "Not Playing painkiller speech, already played all 6 lines.", 0 );
                        }
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_495( "GA", "Not playing painkiller speech, not long enough since last dialogue.", 0 );
                    }
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_495( "GA", "Not playing painkiller speech, another speech is currently playing.", 0 );
                }
            }
            l_U161 = iVar3;
        }
        if ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_4189( l_U162 ))
        {
            if (NOT HAS_CUTSCENE_FINISHED())
            {
                 /* WRITESCRIPTLOG */ sub_495( "GA", "Killing painkiller speech for cutscene playing.", 0 );
                 /* KILL_SPEECH */ sub_4491( ref l_U162, 0 );
            }
        }
    }
    if (bParam0)
    {
         /* CREATETIMER */ sub_1777( ref l_U152, 20000, 1, 0 );
         /* STARTTIMER */ sub_1927( ref l_U152 );
    }
    return;
}

/* CREATETIMER */ void sub_1777(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_1927(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* IS_ANY_SPEECH_CURRENTLY_PLAYING */ void sub_2056()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

/* ISTIMERDONE */ int sub_2293(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_2560(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_2671(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_2941(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_2986( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_2986(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_3073( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_3073(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_3125( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_3643( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_3125(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_3643(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_4189(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_4232( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_4232(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* KILL_SPEECH */ void sub_4491(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_4232( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

/* IS_RESTART_ACTIVE */ void sub_4704()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_4764(int iParam0)
{
    iParam0 = 1;
    switch (l_U141)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_4846( ref l_U143 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
            {
                l_U142 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1777( ref l_U143, l_U142, 1, 1 );
             /* STARTTIMER */ sub_1927( ref l_U143 );
        }
        if ( /* ISTIMERDONE */ sub_2293( ref l_U143 ))
        {
             /* WRITESCRIPTLOG */ sub_495( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1031() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1031(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U141 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U141 = 2;
            }
            else
            {
                l_U141 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_495( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_5329();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_495( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_5329();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_4846(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_5329()
{
     /* WRITESCRIPTLOG */ sub_495( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_5404( ref l_U143 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1031() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1031(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U140 = 0;
    l_U140 = l_U140;
    l_U141 = 0;
    return;
}

/* RESETTIMER */ void sub_5404(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_6069(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_LRG */ void sub_6196(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_CLEANUP_LRG start", 0 );
     /* CLEANOBJECT */ sub_6260( g_U4375 );
     /* CLEANOBJECT */ sub_6260( g_U4376 );
     /* CLEANOBJECT */ sub_6260( g_U4377 );
    if ((CUTSCENE_NAMED_IS_LOADING( "MID_06_PP_concat" )) || (CUTSCENE_IS_LOADED( "MID_06_PP_concat" )))
    {
        CLEAR_NAMED_CUTSCENE( "MID_06_PP_concat" );
    }
    ISEQ_TERMINATE( -724192985 );
    ISEQ_TERMINATE( 1507052255 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6451( -724192985, ref g_U2662 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6451( 1507052255, ref g_U2662 );
    ISEQ_TERMINATE( -1750685803 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6451( -1750685803, ref g_U2662 );
    ISEQ_TERMINATE( 1772865089 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6451( 1772865089, ref g_U2662 );
    ISEQ_TERMINATE( -822154135 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6451( -822154135, ref g_U2662 );
    ENABLE_AMBIENT_ZONE( "S_POLICE_ZONE_CAFE_GUNFIGHT", 0 );
    ENABLE_WALLA_ZONE( "S_POLICE_WZ_CAFE", 0 );
    if (NOT bParam0)
    {
         /* CLEANPEDARRAY */ sub_7683( ref g_U4308 );
         /* CLEANPEDARRAY */ sub_7683( ref g_U4321 );
         /* CLEANPEDARRAY */ sub_7683( ref g_U4315 );
         /* CLEANPEDARRAY */ sub_7683( ref g_U4311 );
         /* CLEANOBJECT */ sub_6260( g_U4330 );
         /* CLEANOBJECT */ sub_6260( g_U4332 );
         /* CLEANOBJECT */ sub_6260( g_U4331 );
         /* CLEANOBJECT */ sub_6260( g_U4333 );
    }
     /* CLEANPLACEMENTARRAY */ sub_7908( ref l_U224 );
     /* CLEANPLACEMENT */ sub_7963( g_U667._fU0 );
     /* CLEANPLACEMENT */ sub_7963( g_U793._fU0 );
    if (NOT bParam0)
    {
         /* CLEANPLACEMENTARRAY */ sub_7908( ref g_U4325 );
    }
     /* P_ENABLE_POI */ sub_8088( ref l_U1096, 0 );
     /* P_STOP_SP_CHALLENGES */ sub_9091();
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U364._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U343._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U317._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U631._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U662._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U683._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U744._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U437._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U458._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U765._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U1027._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U845._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U786._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( "tb_LRG_PlayerInCafeteria[0]" );
    GAMEPLAY_HELPER_BOX_DESTROY( "tb_LRG_PlayerInCafeteria[1]" );
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_CLEANUP_LRG end", 0 );
    return;
}

/* CLEANOBJECT */ void sub_6260(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_6451(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6589( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_6589(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* CLEANPEDARRAY */ void sub_7683(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_7733( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_7733(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_7908(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_7963( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_7963(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_ENABLE_POI */ void sub_8088(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if ((iParam0->_fU4 == 1) AND (iParam0->_fU320 == 1))
        {
             /* P_ENABLEPOIGLINT */ sub_8147( iParam0, 1 );
        }
        iParam0->_fU0 = 1;
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_8147( iParam0, 0 );
         /* P_ENABLEPOIINTERACTIONTEXT */ sub_8366( iParam0, 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )) == 0)
        {
            TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_993() );
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_993(), 0 );
                iParam0->_fU328 = 0;
            }
        }
        iParam0->_fU8 = 0;
        iParam0->_fU0 = 0;
    }
    return;
}

/* P_ENABLEPOIGLINT */ void sub_8147(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if (iParam0->_fU12 != nil)
        {
            if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
            {
                ENABLE_GLINT( iParam0->_fU12, 1 );
            }
            else
            {
                iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
            }
        }
        else
        {
            iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
        }
    }
    else if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            ENABLE_GLINT( iParam0->_fU12, 0 );
        }
    }
    return;
}

/* P_ENABLEPOIINTERACTIONTEXT */ void sub_8366(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
        SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
        if ((iParam0->_fU72 == 0) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU68 == 1)))
        {
            SET_INTERACTIONTEXT_VISIBLE( 0 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
        else
        {
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_8546( iParam0 );
        if (iParam0->_fU332 == 1)
        {
            SET_INTERACTIONTEXT_PULSE( 1 );
            SET_INTERACTIONTEXT_PULSE_PERIOD( iParam0->_fU336 );
        }
    }
    else
    {
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
    }
    return;
}

/* P_UPDATEINTERACTIONTEXTAVAILABLE */ void sub_8546(int iParam0)
{
    if (iParam0->_fU60 == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 0 );
        iParam0->_fU56 = 0;
    }
    else if (iParam0->_fU56 == 1)
    {
        if (( /* F_ISACTIONINGAVAILABLE */ sub_8642( iParam0 )) == 0)
        {
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
    }
    else if (( /* F_ISACTIONINGAVAILABLE */ sub_8642( iParam0 )) == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 1 );
        iParam0->_fU56 = 1;
    };;;
    return;
}

/* F_ISACTIONINGAVAILABLE */ int sub_8642(int iParam0)
{
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1031() )) == 0))
    {
        if (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_993() )) == 1) || (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_993() )) == 1) || (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_993() )) == 1) || (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_993() )) == 1) || (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_993() )) == 1) || (IS_PLAYER_SHOOTDODGING() == 1))))))
        {
            return 0;
        }
        if (iParam0->_fU304 == 0)
        {
            if ((IS_MONOLOGUE_PLAYING() == 1) || ((IS_ANY_SPEECH_PLAYING(  /* PLAYER_PED_ID */ sub_993() )) == 1))
            {
                return 0;
            }
        }
        return 1;
    }
    return 0;
}

/* P_STOP_SP_CHALLENGES */ void sub_9091()
{
     /* WRITESCRIPTLOG */ sub_495( "CCB", "P_STOP_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_495( "CCB", "Stopping the Precinct_Lockers context...", 0 );
    END_CONTEXT( "Precinct_Lockers" );
    return;
}

/* P_FORCE_SCENE_TO_LOAD */ void sub_9531(unknown uParam0)
{
    char[64] cVar3;
    unknown uVar19;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
    {
         /* TELEPORTPED */ sub_9607(  /* PLAYER_PED_ID */ sub_993(), g_U2953[uParam0], g_U3083[uParam0] );
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_993(), 1 );
        if (NOT (IS_STRING_NULL( ref g_U1091[uParam0]._fU0 )))
        {
            StrCopy( ref cVar3, "Loading room: ", 64 );
            ConcatString(ref cVar3, ref g_U1091[uParam0]._fU0, 64);
            PRINTSTRING( ref cVar3 );
            PRINTNL();
            uVar19 = GET_INTERIOR_FROM_NAME( ref g_U1091[uParam0]._fU64, 0 );
            SET_INTERIOR_ACTIVE( uVar19, 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( uVar19, GET_HASH_KEY( ref g_U1091[uParam0]._fU0 ) );
        }
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_993(), 0 );
    }
    return;
}

/* TELEPORTPED */ void sub_9607(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_9965(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_495( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_10184( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_11348( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11662( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12141( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11662( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12141( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11662( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12141( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_12457( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12141( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_12457( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12141( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_13029( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_13231( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_993(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_495( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_10184(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_10246( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_10246(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_11348(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_11662(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_12066( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_12066(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_12141(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_12457(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_12066( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_13029(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_13231(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_10246( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_13329( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_13329(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_14647()
{
    int iVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    int I;

    iVar2 = l_U220;
    switch (l_U220)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_495( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_14861();
         /* P_SET_STATIC_DATA */ sub_15585();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U220 = 2;
         /* WRITESCRIPTLOG */ sub_495( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_495( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        g_U822[6] = 0;
         /* P_REQUEST_LRG_PERSISTENT_ASSETS */ sub_19829();
         /* P_REQUEST_LRG_NONPERSISTENT_ASSETS */ sub_26849();
        l_U220 = 3;
         /* WRITESCRIPTLOG */ sub_495( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_31145( ref g_U2613 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_30731( ref g_U2662 )) AND (( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_30333( ref g_U2468 )) AND ( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_29943( ref g_U2741 )))))
        {
            if ((NOT l_U172._fU0) AND (g_U820 == 6))
            {
                l_U220 = 4;
                 /* WRITESCRIPTLOG */ sub_495( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U220 = 6;
                 /* WRITESCRIPTLOG */ sub_495( "SP", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_495( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U842[6] = 1;
        l_U222 = 0;
        if (NOT ( /* HAS_SAVEFILE_LOADED */ sub_31780( ref l_U172 )))
        {
             /* F_GIVEPEDWEAPON */ sub_12457(  /* PLAYER_PED_ID */ sub_993(), 434544317, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11662(  /* PLAYER_PED_ID */ sub_993(), -862236369, 0, 200, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11662(  /* PLAYER_PED_ID */ sub_993(), -862236369, 1, 200, 0 );
            l_U220 = 5;
             /* WRITESCRIPTLOG */ sub_495( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U220 = 6;
             /* WRITESCRIPTLOG */ sub_495( "GA", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_993(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_993(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_993(), 0, 0 ) ))))
            {
                g_U821 = 6;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_32330( ref l_U172, g_U821,  /* PLAYER_PED_ID */ sub_993(), g_U2953[6], g_U3083[6], g_U3127[6], g_U3171[6], 1 );
                l_U220 = 6;
                 /* WRITESCRIPTLOG */ sub_495( "GA", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
            }
        }
        break;
        case 6:
        if (l_U221)
        {
            l_U233 = 1;
            l_U385 = 1;
            l_U481 = 1;
        }
        if ( /* F_LRG_CREATE_GYM_ENEMIES */ sub_37019())
        {
            if ( /* F_LRG_CREATE_HALL_ENEMIES */ sub_40337())
            {
                l_U220 = 7;
                 /* WRITESCRIPTLOG */ sub_495( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 7:
        if (l_U221)
        {
            g_U822[6] = 1;
            AUD_SET_IS_POWER_ON( 0 );
            SET_WEATHER_TYPE_NOW_PERSIST( "SUNNY" );
             /* P_LRG_CREATE_PLACEMENTS */ sub_41393();
        }
        if (g_U842[6])
        {
             /* P_START_SP_CHALLENGES */ sub_43403();
             /* P_CLOSEDOOR */ sub_43567( ref g_U3757, 1 );
             /* P_CLOSEDOOR */ sub_43567( ref g_U3764, 1 );
             /* P_SETDOORLOCKED */ sub_43834( ref g_U3757, 1 );
             /* P_SETDOORLOCKED */ sub_43834( ref g_U3764, 1 );
             /* P_CREATEDOORSTRUCT */ sub_44027( ref uVar3, -1034343557, 16.87891000, -27.38570000, 1.10029000, 0.00000000, 0.00000000, 0.00000000 );
             /* P_CREATEDOORSTRUCT */ sub_44027( ref uVar17, -1034343557, 30.07707000, -27.38570000, 1.10029000, 0.00000000, 0.00000000, 0.00000000 );
             /* P_CREATEDOORSTRUCT */ sub_44027( ref uVar10, -1034343557, 21.91167000, -21.81485000, 1.10029000, 0.00000000, 0.00000000, 0.00000000 );
             /* P_CREATEDOORSTRUCT */ sub_44027( ref uVar24, -1034343557, 25.07726000, -21.81485000, 1.10029000, 0.00000000, 0.00000000, 0.00000000 );
             /* P_SETDOORMINMAXLIMIT */ sub_44232( ref uVar3, -100.00000000, 100.00000000 );
             /* P_SETDOORMINMAXLIMIT */ sub_44232( ref uVar17, -100.00000000, 100.00000000 );
             /* P_SETDOORMINMAXLIMIT */ sub_44232( ref uVar10, -100.00000000, 100.00000000 );
             /* P_SETDOORMINMAXLIMIT */ sub_44232( ref uVar24, -100.00000000, 100.00000000 );
             /* P_SETDOORLATCH */ sub_44507( ref uVar3, 1 );
             /* P_SETDOORLATCH */ sub_44507( ref uVar17, 1 );
             /* P_OPENDOOR */ sub_44599( ref uVar3, 1, 1, 1065353216 );
             /* P_OPENDOOR */ sub_44599( ref uVar17, 0, 1, 1065353216 );
            ENABLE_AMBIENT_ZONE( "S_POLICE_ZONE_CAFE_GUNFIGHT", 1 );
            ENABLE_WALLA_ZONE( "S_POLICE_WZ_CAFE", 1 );
             /* P_STREAMREQ_MODELNAMES_INSERT */ sub_20005( -1674641852, ref g_U2468 );
            l_U220 = 8;
             /* WRITESCRIPTLOG */ sub_495( "GA", "eCheckpointState = CP_HANDLE_LOCKER_ROOM_BLEND_TO_GAMEPLAY", 0 );
        }
        break;
        case 8:
        if (l_U222)
        {
            if (g_U821 != 6)
            {
                g_U821 = 6;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_32330( ref l_U172, g_U821,  /* PLAYER_PED_ID */ sub_993(), g_U2953[6], g_U3083[6], g_U3127[6], g_U3171[6], 1 );
            }
            l_U219 = 1;
             /* P_LRG_START_UFE_SEARCH_BEHAVIOR */ sub_45021();
            l_U220 = 9;
             /* WRITESCRIPTLOG */ sub_495( "GA", "eCheckpointState = CP_GAMEPLAY_GYM_CAF_COMBAT", 0 );
        }
        else if (l_U221)
        {
             /* NIS_PRE_SETUP */ sub_45773( 1, 0, 0, 1 );
             /* P_LRG_START_BOUT */ sub_45948();
            if (NOT l_U219)
            {
                 /* P_DROP_PRE_RIOT_PRECINCT_STREAMHELPERS */ sub_46264();
                l_U219 = 1;
            }
             /* P_LRG_START_UFE_SEARCH_BEHAVIOR */ sub_45021();
             /* WRITESCRIPTLOG */ sub_495( "AT", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_3_5", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_3_5", 0, 0, -1, -1, -1082130432, 0 );
            if (IS_DEATH_PANEL_WIPE_ALLOWED())
            {
                DO_SCREEN_FADE_IN( 0 );
            }
        }
        if ( /* F_LRG_IS_BOUT_DONE */ sub_46655())
        {
             /* NIS_POST_SETUP */ sub_46867( 1, 1 );
            l_U220 = 9;
             /* WRITESCRIPTLOG */ sub_495( "GA", "eCheckpointState = CP_GAMEPLAY_GYM_CAF_COMBAT", 0 );
        }
        break;
        case 9:
        if (l_U221)
        {
             /* P_CREATE_LOBBY_ELEVATOR_DOORS */ sub_47252( 1 );
             /* CREATETIMER */ sub_1777( ref l_U308, 2000, 1, 0 );
             /* STARTTIMER */ sub_1927( ref l_U308 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_24904( "EXPL_CAM", ref g_U2741 );
             /* P_STREAMREQ_MODELNAMES_INSERT */ sub_20005( -1257962541, ref g_U2468 );
             /* P_STREAMREQ_MODELNAMES_INSERT */ sub_20005( -1514674887, ref g_U2468 );
             /* P_STREAMREQ_MODELNAMES_INSERT */ sub_20005( 743953242, ref g_U2468 );
        }
        if (NOT l_U232)
        {
            if ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_30333( ref g_U2468 ))
            {
                 /* P_CREATE_LOBBY_OBJECTS */ sub_48270();
                l_U232 = 1;
            }
        }
         /* P_HANDLE_FISHER_EXPLORATION_ITEM */ sub_48963();
        if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( g_U3806._fU0, g_U3806._fU4 ) ))
        {
            if (DOOR_GET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3806._fU0, g_U3806._fU4 ) ))
            {
                DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3806._fU0, g_U3806._fU4 ), 0 );
            }
        }
        if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( g_U3813._fU0, g_U3813._fU4 ) ))
        {
            if (DOOR_GET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3813._fU0, g_U3813._fU4 ) ))
            {
                DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3813._fU0, g_U3813._fU4 ), 0 );
            }
        }
        if ( /* ISTIMERDONE */ sub_2293( ref l_U308 ))
        {
             /* P_UNBLOCK_GYM_ENEMIES */ sub_52570();
        }
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_52686( ref g_U4315, -1.00000000, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_52686( ref g_U4321, -1.00000000, 0, 1 );
         /* P_MANAGE_DOORS */ sub_52902();
        if (l_U233 == 4)
        {
            if (NOT l_U338)
            {
                if ( /* F_PL_HAS_MAX_BEEN_SPOTTED */ sub_53283())
                {
                     /* WRITESCRIPTLOG */ sub_495( "GA", "Force music PRECINCT_FINAL mood PRECINCT_01_3_4_5, fade in over 2 seconds", 0 );
                    AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_3_4_5", "", 0, 2000, -1, -1082130432, 0 );
                     /* WRITESCRIPTLOG */ sub_495( "AT", "Requesting oneshot: PRECINCT_ONESHOT_7", 0 );
                    AUDIO_MUSIC_REQUEST_ONESHOT( "PRECINCT_ONESHOT_7", 0 );
                     /* MAL_SETPEDARRAYLOCKEDANDREGISTEREDTARGET */ sub_54466( ref g_U4315,  /* PLAYER_PED_ID */ sub_993() );
                     /* MAL_UNBLOCKANDCOMBATPLAYER */ sub_54736( ref g_U4315[2], 2, 1 );
                    l_U338 = 1;
                }
            }
            if ((NOT l_U235) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4315 )) < 4))
            {
                if ( /* MAL_COMPAREPLAYERPOSAXIS */ sub_55263( "Y", "Less", 65507 ))
                {
                     /* P_LRG_GYM_SECOND_WAVE */ sub_55557();
                }
            }
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4315 )) == 0)
            {
                if (NOT l_U339)
                {
                     /* WRITESCRIPTLOG */ sub_495( "AT", "Force music PRECINCT_FINAL mood PRECINCT_01_1", 0 );
                    AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1", "", 0, 6000, 10000, -1082130432, 0 );
                    l_U339 = 1;
                     /* STARTTIMER */ sub_1927( ref l_U1048 );
                }
                if ( /* F_ISPLAYERINTRIGGERBOX */ sub_55974( l_U845 ))
                {
                     /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1613( 0 );
                    if (( /* F_CAN_AMBIENT_SPEECH_PLAY */ sub_56047()) AND (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2056())))
                    {
                        if ( /* ISTIMERDONE */ sub_2293( ref l_U1048 ))
                        {
                             /* P_SPEECH_PLAY_MONOLOGUE */ sub_49377( "SPOL_DWDLGYM", ref l_U866 );
                        }
                    }
                }
            }
        }
        if (NOT l_U631._fU64)
        {
            if (l_U342)
            {
                if (( /* F_ISPLAYERINTRIGGERBOX */ sub_55974( l_U343 )) || ( /* F_ISPLAYERINTRIGGERBOX */ sub_55974( l_U364 )))
                {
                     /* WRITESCRIPTLOG */ sub_495( "AT", "AI can enter restrooms!", 0 );
                     /* P_REMOVEALLTETHERSFROMPED */ sub_56262( g_U4315[1] );
                     /* P_REMOVEALLTETHERSFROMPED */ sub_56262( g_U4315[0] );
                     /* P_REMOVEALLTETHERSFROMPED */ sub_56262( g_U4315[2] );
                     /* P_REMOVEALLTETHERSFROMPED */ sub_56262( g_U4315[3] );
                     /* P_REMOVEALLTETHERSFROMPED */ sub_56262( g_U4315[4] );
                    l_U342 = 0;
                }
            }
            else if ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_55974( l_U343 ))) AND (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_55974( l_U364 ))))
            {
                 /* WRITESCRIPTLOG */ sub_495( "AT", "AI must leave restrooms!", 0 );
                 /* P_TETHERPED */ sub_39740( ref l_U340, g_U4315[1], 1 );
                 /* P_TETHERPED */ sub_39740( ref l_U341, g_U4315[1], 1 );
                 /* P_TETHERPED */ sub_39740( ref l_U340, g_U4315[0], 1 );
                 /* P_TETHERPED */ sub_39740( ref l_U341, g_U4315[0], 1 );
                 /* P_TETHERPED */ sub_39740( ref l_U340, g_U4315[2], 1 );
                 /* P_TETHERPED */ sub_39740( ref l_U341, g_U4315[2], 1 );
                 /* P_TETHERPED */ sub_39740( ref l_U340, g_U4315[3], 1 );
                 /* P_TETHERPED */ sub_39740( ref l_U341, g_U4315[3], 1 );
                 /* P_TETHERPED */ sub_39740( ref l_U340, g_U4315[4], 1 );
                 /* P_TETHERPED */ sub_39740( ref l_U341, g_U4315[4], 1 );
                l_U342 = 1;
            }
        }
        if (NOT l_U480)
        {
            if ( /* F_STREAMREQ_MODELNAMES_IS_ASSET_LOADED */ sub_56682( -1674641852, ref g_U2468 ))
            {
                l_U480 = 1;
            }
        }
        if (l_U480)
        {
            if ( /* F_LRG_CREATE_HALL_RIOTERS */ sub_56897())
            {
                if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_53326( ref l_U631, 0 ))
                {
                     /* P_REMOVEALLTETHERSFROMPED */ sub_56262( g_U4315[1] );
                     /* P_REMOVEALLTETHERSFROMPED */ sub_56262( g_U4315[0] );
                     /* P_REMOVEALLTETHERSFROMPED */ sub_56262( g_U4315[2] );
                     /* P_REMOVEALLTETHERSFROMPED */ sub_56262( g_U4315[3] );
                     /* P_REMOVEALLTETHERSFROMPED */ sub_56262( g_U4315[4] );
                    if (NOT l_U235)
                    {
                         /* CLEANPED */ sub_7733( g_U4315[3] );
                         /* CLEANPED */ sub_7733( g_U4315[4] );
                    }
                     /* P_LRG_START_HALLWAY_GAMEPLAY */ sub_57799();
                     /* WRITESCRIPTLOG */ sub_495( "AT", "Playing oneshot: PRECINCT_ONESHOT_2", 0 );
                    AUDIO_MUSIC_PLAY_ONESHOT();
                     /* WRITESCRIPTLOG */ sub_495( "AT", "Force music PRECINCT_FINAL mood PRECINCT_01_1_2", 0 );
                    AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_2", "", 0, 3000, -1, -1082130432, 0 );
                    ENABLE_AMBIENT_ZONE( "S_POLICE_ZONE_CAFE_GUNFIGHT", 0 );
                    ENABLE_WALLA_ZONE( "S_POLICE_WZ_CAFE", 0 );
                    l_U704 = 1;
                }
            }
        }
        if (l_U631._fU64)
        {
            if (NOT l_U436)
            {
                if (ISEQ_QUERY_STATE( -1750685803, 3 ))
                {
                     /* P_HANDLE_VIG04_SHOOTING */ sub_59305( ref g_U4321[0], ref l_U551[0]._fU44, ref l_U551[0]._fU0, l_U551[0]._fU36, l_U551[0]._fU40, 5.00483400, -7.16432600, 1.90826000, "VIG04A_UFE1" );
                     /* P_HANDLE_VIG04_SHOOTING */ sub_59305( ref g_U4321[1], ref l_U551[1]._fU44, ref l_U551[1]._fU0, l_U551[1]._fU36, l_U551[1]._fU40, 6.74331900, -7.16691400, 1.70000000, "VIG04A_UFE2" );
                }
                if (ISEQ_QUERY_STATE( 1772865089, 3 ))
                {
                     /* P_HANDLE_VIG04_SHOOTING */ sub_59305( ref g_U4321[2], ref l_U551[2]._fU44, ref l_U551[2]._fU0, l_U551[2]._fU36, l_U551[2]._fU40, 4.71949000, -4.27667700, 1.70000000, "pi_IS_VIG04B_UFE" );
                }
                if ( /* F_ARE_VIG04_UFE_AWARE_OF_PLAYER */ sub_59761())
                {
                     /* MAL_SETPEDARRAYLOCKEDANDREGISTEREDTARGET */ sub_54466( ref g_U4321,  /* PLAYER_PED_ID */ sub_993() );
                    l_U436 = 1;
                }
            }
            if (NOT l_U479)
            {
                if (ISEQ_QUERY_STATE( -822154135, 3 ))
                {
                     /* P_HANDLE_VIG04_SHOOTING */ sub_59305( ref g_U4311[0], ref l_U588[0]._fU44, ref l_U588[0]._fU0, l_U588[0]._fU36, l_U588[0]._fU40, 12.08524000, -6.76195900, 1.70000000, "pi_IS_VIG04C_RIOTER1" );
                     /* P_HANDLE_VIG04_SHOOTING */ sub_59305( ref g_U4311[1], ref l_U588[1]._fU44, ref l_U588[1]._fU0, l_U588[1]._fU36, l_U588[1]._fU40, 6.27424800, -11.99631000, 1.70000000, "pi_IS_VIG04C_RIOTER2" );
                     /* P_HANDLE_VIG04_SHOOTING */ sub_59305( ref g_U4311[2], ref l_U588[2]._fU44, ref l_U588[2]._fU0, l_U588[2]._fU36, l_U588[2]._fU40, 6.27424800, -11.99631000, 1.70000000, "pi_IS_VIG04C_RIOTER3" );
                }
                if (( /* F_ARE_ANY_PEDS_RETREATING */ sub_60868()) || ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4321 )) == 0) || (( /* F_ARE_ANY_RIOTERS_VISIBLE */ sub_60594()) || (( /* F_ISPLAYERINTRIGGERBOX */ sub_55974( l_U458 )) || ( /* F_ISPLAYERINTRIGGERBOX */ sub_55974( l_U437 ))))))
                {
                     /* WRITESCRIPTLOG */ sub_495( "AT", "Rioters retreating!", 0 );
                     /* P_FORCE_VIG04C_RIOTERS_TO_RETREAT */ sub_61029();
                     /* P_ACTIVATEPEDARRAY */ sub_57968( ref g_U4308 );
                    l_U479 = 1;
                }
            }
            if (NOT l_U435)
            {
                if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4311 )) == 0)
                {
                     /* WRITESCRIPTLOG */ sub_495( "AT", "Untethering UFE!", 0 );
                     /* P_REMOVE_TETHERS_FROM_PED_ARRAY */ sub_61592( ref g_U4321 );
                    l_U435 = 1;
                }
            }
             /* P_HANDLE_RIOTER_2_VAULTING */ sub_61687();
             /* P_HANDLE_RIOTER_DEATH */ sub_62078();
            if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_53326( ref l_U683, 0 )) || ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_53326( ref l_U662, 0 )))
            {
                 /* WRITESCRIPTLOG */ sub_495( "GA", "Player near cafeteria.", 0 );
                 /* WRITESCRIPTLOG */ sub_495( "AT", "Requesting oneshot: PRECINCT_ONESHOT_DOOR_ENTERED", 0 );
                AUDIO_MUSIC_REQUEST_ONESHOT( "PRECINCT_ONESHOT_DOOR_ENTERED", 0 );
            }
            if ((NOT l_U1096._fU56) AND ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4315 )) == 0) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4321 )) == 0)))
            {
                if ( /* F_STREAMREQ_ANIM_DICT_IS_ASSET_LOADED */ sub_63144( "EXPL_CAM", ref g_U2741 ))
                {
                     /* WRITESCRIPTLOG */ sub_495( "AT", "Enabling Fisher POI.", 0 );
                     /* P_SET_POI_AVAILABLE */ sub_19511( ref l_U1096, 1 );
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_495( "AT", "EXPL_CAM hasn't loaded yet!", 0 );
                }
                 /* STARTTIMER */ sub_1927( ref l_U1057 );
            }
            if ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4315 )) == 0) AND ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4321 )) == 0) AND ( /* F_ISPLAYERINTRIGGERREGION */ sub_63445( ref l_U876, 0 ))))
            {
                 /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1613( 0 );
                if (( /* F_CAN_AMBIENT_SPEECH_PLAY */ sub_56047()) AND (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_2056())))
                {
                    if ( /* ISTIMERDONE */ sub_2293( ref l_U1057 ))
                    {
                         /* P_SPEECH_PLAY_MONOLOGUE */ sub_49377( "SPOL_PLLOITCF", ref l_U1017 );
                    }
                }
            }
        }
        if ((l_U704 != 4) AND (l_U704 != 0))
        {
             /* P_LRG_CREATE_ATRIUM_PEDS */ sub_63742();
        }
        if (((l_U765._fU64) || ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_53326( ref l_U765, 0 ))) AND (NOT l_U739))
        {
            if (((ABSF(  /* F_GETDOOROPENRATIO */ sub_64515( ref g_U3834 ) )) > 0.10000000) || ((ABSF(  /* F_GETDOOROPENRATIO */ sub_64515( ref g_U3827 ) )) > 0.10000000))
            {
                SET_WEATHER_TYPE_NOW_PERSIST( "RAIN" );
                 /* WRITESCRIPTLOG */ sub_495( "GA", "Playing music one shot PRECINCT_ONESHOT_DOOR_ENTERED", 0 );
                AUDIO_MUSIC_PLAY_ONESHOT();
                 /* WRITESCRIPTLOG */ sub_495( "AT", "Player is in the Atrium! Attack!", 0 );
                 /* P_REMOVE_TETHERS_FROM_PED_ARRAY */ sub_61592( ref g_U4315 );
                 /* P_REMOVE_TETHERS_FROM_PED_ARRAY */ sub_61592( ref g_U4321 );
                 /* P_LRG_ATRIUM_ENEMIES_SPOT_PLAYER */ sub_64799();
                for ( I = 0; I < 3; I++ )
                {
                    if (NOT ( /* F_ISPEDINTRIGGERBOX */ sub_49587( g_U4311[I], l_U765 )))
                    {
                         /* P_KILL_PED */ sub_61264( g_U4311[I] );
                    }
                }
                l_U739 = 1;
            }
        }
        if ((l_U739) AND (NOT l_U743))
        {
            if ((( /* F_LRG_NUM_LIVING_ENEMIES_IN_ATRIUM */ sub_65272()) == 1) AND (( /* F_IS_DOOR_CLOSED */ sub_65186( g_U3834, 0.15000000 )) AND (( /* F_IS_DOOR_CLOSED */ sub_65186( g_U3827, 0.15000000 )) AND ( /* F_ISPLAYERINTRIGGERBOX */ sub_55974( l_U765 )))))
            {
                 /* P_LRG_DELETE_ENEMIES_NOT_IN_ATRIUM */ sub_65456();
                l_U743 = 1;
            }
        }
        if ((l_U385 == 4) AND ((l_U233 == 4) AND (l_U704 == 4)))
        {
            if (((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4308 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4315 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4321 ))) == 1)
            {
                 /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_65853( ref g_U4308 );
                 /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_65853( ref g_U4315 );
                 /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_65853( ref g_U4321 );
            }
        }
        if ((l_U704 == 4) AND ((l_U233 == 4) AND (l_U385 == 4)))
        {
            if (((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4308 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4315 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4321 ))) == 0)
            {
                if (NOT l_U742)
                {
                     /* WRITESCRIPTLOG */ sub_495( "AT", "Force music PRECINCT_FINAL mood PRECINCT_01_1_2", 0 );
                    AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1", "", 0, -1, 10000, -1082130432, 0 );
                    l_U742 = 1;
                }
                if (NOT g_U862[7]._fU36)
                {
                    g_U862[7]._fU36 = 1;
                }
                if ( /* F_ISPLAYERINTRIGGERBOX */ sub_55974( l_U1027 ))
                {
                    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
                    BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
                    l_U220 = 11;
                     /* WRITESCRIPTLOG */ sub_495( "GA", "eCheckpointState = CP_GYM_EXIT_FROM_BULLET_CAM", 0 );
                    break;
                }
                if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (NOT IS_BULLET_CAMERA_ACTIVE()))
                {
                    l_U220 = 10;
                     /* WRITESCRIPTLOG */ sub_495( "GA", "eCheckpointState = CP_GAMEPLAY_ACTIVATE_SECURITY_MONITORS", 0 );
                }
            }
        }
        break;
        case 10:
        if (l_U221)
        {
             /* WRITESCRIPTLOG */ sub_495( "GA", "Player has entered atrium.", 0 );
            AUD_SET_IS_POWER_ON( 1 );
             /* STARTTIMER */ sub_1927( ref l_U807 );
        }
         /* P_HANDLE_FISHER_EXPLORATION_ITEM */ sub_48963();
         /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1613( 0 );
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_53326( ref l_U1027, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_495( "GA", "Player entered security room.", 0 );
             /* STARTTIMER */ sub_1927( ref l_U1066 );
            if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1031() ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() ))))
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_993(), 1 );
                SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1031(), 0 );
            }
        }
        if (( /* F_CAN_AMBIENT_SPEECH_PLAY */ sub_56047()) AND ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_55974( l_U1027 ))) AND (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_55974( l_U786 )))))
        {
            if ( /* ISTIMERDONE */ sub_2293( ref l_U807 ))
            {
                 /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2560( ref l_U825 );
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_49377( "SPOL_ATRMDED", ref l_U825 );
                 /* STARTTIMER */ sub_1927( ref l_U816 );
            }
            if ( /* ISTIMERDONE */ sub_2293( ref l_U816 ))
            {
                 /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2560( ref l_U835 );
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_49377( "SPOL_PLTKTLNG", ref l_U835 );
            }
        }
        if ( /* ISTIMERDONE */ sub_2293( ref l_U1066 ))
        {
            g_U842[7] = 1;
            l_U220 = 12;
             /* WRITESCRIPTLOG */ sub_495( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 11:
        if (l_U221)
        {
            AUD_SET_IS_POWER_ON( 1 );
        }
        if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (NOT (IS_BULLET_CAMERA_RUNNING( 0 ))))
        {
            g_U842[7] = 1;
            l_U220 = 12;
             /* WRITESCRIPTLOG */ sub_495( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 12:
        if (NOT HAS_CUTSCENE_FINISHED())
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U220 = 0;
             /* WRITESCRIPTLOG */ sub_495( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U220 != iVar2)
    {
        l_U221 = 1;
    }
    else
    {
        l_U221 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_14861()
{
    int I;

     /* WRITESCRIPTLOG */ sub_495( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U221 = 1;
    l_U232 = 0;
    l_U233 = 0;
    l_U234 = 0;
    l_U338 = 0;
    l_U342 = 1;
    l_U235 = 0;
    l_U385 = 0;
    l_U386 = 0;
    l_U481 = 0;
    l_U482 = 0;
    l_U480 = 0;
    for ( I = 0; I < 3; I++ )
    {
        l_U551[I]._fU36 = 50;
        l_U551[I]._fU40 = 150;
        l_U551[I]._fU44 = 0;
         /* CREATETIMER */ sub_1777( ref l_U551[I]._fU0, l_U551[I]._fU36, 1, 0 );
        l_U625[I] = 0;
    }
    l_U588[0]._fU36 = 50;
    l_U588[0]._fU40 = 150;
    l_U588[0]._fU44 = 0;
     /* CREATETIMER */ sub_1777( ref l_U588[0]._fU0, l_U588[0]._fU36, 1, 0 );
    l_U588[1]._fU36 = 50;
    l_U588[1]._fU40 = 150;
    l_U588[1]._fU44 = 0;
     /* CREATETIMER */ sub_1777( ref l_U588[1]._fU0, l_U588[1]._fU36, 1, 0 );
    l_U588[2]._fU36 = 100;
    l_U588[2]._fU40 = 400;
    l_U588[2]._fU44 = 0;
     /* CREATETIMER */ sub_1777( ref l_U588[2]._fU0, l_U588[2]._fU36, 1, 0 );
    l_U629 = 0;
    l_U630 = 0;
    l_U436 = 0;
    l_U435 = 0;
     /* CREATETIMER */ sub_1777( ref l_U523[0], 500, 1, 0 );
     /* CREATETIMER */ sub_1777( ref l_U523[1], 800, 1, 0 );
     /* CREATETIMER */ sub_1777( ref l_U523[2], 1000, 1, 0 );
    l_U704 = 0;
    l_U705 = 0;
    l_U739 = 0;
    l_U740 = 0;
    l_U743 = 0;
    l_U479 = 0;
    l_U742 = 0;
    l_U339 = 0;
     /* CREATETIMER */ sub_1777( ref l_U807, 1000, 1, 0 );
     /* CREATETIMER */ sub_1777( ref l_U816, 25000, 1, 0 );
     /* CREATETIMER */ sub_1777( ref l_U1048, 8000, 1, 0 );
     /* CREATETIMER */ sub_1777( ref l_U1057, 8000, 1, 0 );
     /* CREATETIMER */ sub_1777( ref l_U1066, 1500, 1, 0 );
    l_U1095 = 0;
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_15585()
{
    unknown[2] uVar2;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;

     /* WRITESCRIPTLOG */ sub_495( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U236[0], 24.25000000, -21.25000000, 0.10000000, 180.00000000, 167832229, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U236[1], 24.29000000, -24.00000000, 0.10000000, 180.00000000, 1795224003, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U236[2], 22.65000000, -23.98000000, 0.10000000, 180.00000000, -1610923162, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U236[3], 21.35529000, -18.21194000, 0.01296800, 270.00000000, 765074858, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U236[4], 20.72750000, -17.82870000, 0.01296800, 270.00000000, -1058268732, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U387[0], 15.56000000, -5.95000000, 0.00000000, 135.00000000, -1058268732, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U387[1], 13.64000000, -7.67900000, 0.00000000, 45.00000000, 765074858, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U387[2], 9.11600000, -16.79200000, 0.00000000, 0.00000000, 1632535816, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U483[0], 3.48600000, -2.50000000, 0.00000000, -180.00000000, 2084898483, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U483[1], 5.49600000, -0.95200000, 0.00000000, -135.00000000, 574615680, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U483[2], 4.12300000, -5.41200000, 0.00000000, -135.00000000, -1469305866, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U706[0], 7.03000000, 25.01000000, 0.01000000, -120.00000000, 1307502853, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15690( ref l_U706[1], 11.50000000, 26.80000000, 0.01000000, -167.61000000, 1291612119, 7, 3, 2, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U364, "tbPlayerInBathroomF", 30.79000000, -23.32000000, 0.00000000, 7.88000000, 11.35000000, 3.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U343, "tbPlayerInBathroomM", 16.18000000, -23.74000000, 0.00000000, 7.34000000, 11.35000000, 3.00000000, 0.00039616, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U317, "tb_LRG_StartGymAmbush", 14.14000000, -40.40000000, 0.00000000, 1.86000000, 2.66000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U631, "tb_LRG_IntoHallway", 23.26000000, -17.20000000, -0.15000000, 3.50000000, 5.59000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U662, "tb_LRG_NearCafeteria[0]", 13.48000000, -11.66000000, 0.01000000, 7.05000000, 4.05000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U683, "tb_LRG_NearCafeteria[1]", 4.34000000, -14.98000000, -0.01000000, 6.61000000, 6.06000000, 4.02000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U744, "tb_LRG_KillRioters", 16.67000000, 8.65000000, 0.00000000, 2.64000000, 18.12000000, 3.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U437, "tb_LRG_SendOffRioters_Failsafe1", 13.97000000, -13.70000000, 0.00000000, 1.86000000, 7.94000000, 3.00000000, 0.00000000, 0.00000000, -81.01000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U458, "tb_LRG_SendOffRioters_Failsafe2", 5.40000000, -12.85000000, 0.00000000, 1.86000000, 8.69000000, 3.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U765, "tb_LRG_InAtrium", 16.25000000, 16.56000000, -0.50000000, 31.39000000, 25.18000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U1027, "tb_LRG_SecurityRoom", 9.69000000, 26.10000000, 0.01000000, 8.45000000, 5.40000000, 3.04000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U845, "tb_LRG_PlayerInGym", 23.55000000, -31.59000000, -0.50000000, 26.37000000, 21.67000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref l_U786, "tb_LRG_CloseToSecurityRoomDontPlaySpeech", 11.10000000, 20.17000000, 0.02000000, 7.00000000, 8.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    array(ref uVar2, 2);
     /* P_CREATETRIGGERBOX */ sub_16418( ref uVar2[0], "tb_LRG_PlayerInCafeteria[0]", 4.69000000, -8.95000000, -0.50000000, 7.43000000, 18.18000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16418( ref uVar2[1], "tb_LRG_PlayerInCafeteria[1]", 5.60000000, -15.09000000, -0.50000000, 8.00000000, 5.63000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERREGION */ sub_17691( ref l_U876, ref uVar2 );
     /* P_CREATETETHERBOX */ sub_18072( ref l_U340, "tethStayOutOfBathroom1", 20.82000000, -35.53000000, 0.00000000, 15.97000000, 27.19000000, 3.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_18072( ref l_U341, "tethStayOutOfBathroom2", 23.46000000, -24.09000000, 0.00000000, 7.73000000, 2.97000000, 3.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_18072( ref l_U741, "teth_LRG_SecurityRoom", 9.75000000, 26.11000000, 0.01000000, 8.45000000, 5.73000000, 3.04000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_18072( ref l_U433, "tethOffice", 17.59000000, -6.54000000, 0.00000000, 9.08000000, 9.11000000, 3.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_18072( ref l_U434, "tethKitchen", 5.36000000, -15.01000000, 0.00000000, 6.15000000, 8.88000000, 3.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATEPOISTRUCTCOORD */ sub_18483( ref l_U1096, 2, l_U1182, l_U1182, l_U1182, 1.50000000, 3.00000000, 1, 0 );
     /* P_SET_INTERACTIVE_TEXT */ sub_19246( ref l_U1096, 30, "POI_POL_FISHER" );
     /* P_SET_POI_FORCE_WALK */ sub_19456( ref l_U1096, 0 );
     /* P_SET_POI_AVAILABLE */ sub_19511( ref l_U1096, 0 );
     /* P_SET_POI_REUSABLE */ sub_19593( ref l_U1096, 1 );
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_15690(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_16418(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETRIGGERREGION */ void sub_17691(int iParam0, unknown uParam1)
{
    int iVar4;
    int I;

    iVar4 = (uParam1^);
    if (iVar4 > 6)
    {
         /* WRITESCRIPTLOG */ sub_495( "[SA]", "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
        SCRIPT_ASSERT( "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
    }
    for ( I = 0; I < iVar4; I++ )
    {
        iParam0->_fU0[I] = {(uParam1^)[I]};
    }
    iParam0->_fU508 = iVar4;
    iParam0->_fU548 = 0;
    iParam0->_fU552 = 0;
    iParam0->_fU556 = 0;
    iParam0->_fU560 = 0;
    return;
}

/* P_CREATETETHERBOX */ void sub_18072(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATEPOISTRUCTCOORD */ void sub_18483(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14)
{
     /* P_CREATEBLANKPOISTRUCT */ sub_18523( iParam0, uParam13 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU100 = {uParam5};
    iParam0->_fU112 = uParam11;
    iParam0->_fU200 = {uParam8};
    iParam0->_fU212 = uParam12;
    iParam0->_fU320 = uParam14;
    iParam0->_fU20 = {uParam2};
     /* P_CREATEPOIGLINT */ sub_18916( iParam0 );
    return;
}

/* P_CREATEBLANKPOISTRUCT */ void sub_18523(int iParam0, unknown uParam1)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = 0;
    iParam0->_fU8 = 0;
    iParam0->_fU12 = nil;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU52 = 1;
    iParam0->_fU56 = 1;
    iParam0->_fU60 = 0;
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = 0;
    iParam0->_fU80 = 0;
    iParam0->_fU84 = 0;
    iParam0->_fU100 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU112 = 0.00000000;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU96 = 0;
    iParam0->_fU200 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU212 = 0.00000000;
    iParam0->_fU300 = 0;
    iParam0->_fU304 = 1;
    iParam0->_fU308 = 0;
    iParam0->_fU324 = 1;
    iParam0->_fU328 = 0;
    iParam0->_fU340 = 0;
    iParam0->_fU336 = 0.20000000;
    return;
}

/* P_CREATEPOIGLINT */ void sub_18916(int iParam0)
{
    if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            REMOVE_GLINT( iParam0->_fU12 );
        }
    }
    iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
     /* P_INITPOIGLINT */ sub_19014( iParam0 );
    return;
}

/* P_INITPOIGLINT */ void sub_19014(int iParam0)
{
    if (iParam0->_fU0 == 1)
    {
        if (iParam0->_fU320 == 1)
        {
            if ((iParam0->_fU8 > 0) AND (iParam0->_fU4 == 0))
            {
                 /* P_ENABLEPOIGLINT */ sub_8147( iParam0, 1 );
            }
            else if ((iParam0->_fU8 < 2) AND (iParam0->_fU4 == 1))
            {
                 /* P_ENABLEPOIGLINT */ sub_8147( iParam0, 1 );
            }
            else if ((iParam0->_fU8 == 1) AND (iParam0->_fU4 == 2))
            {
                 /* P_ENABLEPOIGLINT */ sub_8147( iParam0, 1 );
            }
            else
            {
                 /* P_ENABLEPOIGLINT */ sub_8147( iParam0, 0 );
            };;;
        }
        else
        {
             /* P_ENABLEPOIGLINT */ sub_8147( iParam0, 0 );
        }
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_8147( iParam0, 0 );
    }
    return;
}

/* P_SET_INTERACTIVE_TEXT */ void sub_19246(int iParam0, unknown uParam1, unknown uParam2)
{
    StrCopy( ref iParam0->_fU32, uParam2, 16 );
    iParam0->_fU48 = uParam1;
     /* P_INITINTERACTIVETEXT */ sub_19302( iParam0 );
    return;
}

/* P_INITINTERACTIVETEXT */ void sub_19302(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND (iParam0->_fU0 == 1))
    {
        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
        {
            SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
            SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
    }
    return;
}

/* P_SET_POI_FORCE_WALK */ void sub_19456(int iParam0, unknown uParam1)
{
    iParam0->_fU324 = uParam1;
    return;
}

/* P_SET_POI_AVAILABLE */ void sub_19511(int iParam0, int iParam1)
{
    if (iParam1 == 0)
    {
        iParam0->_fU60 = 1;
    }
    else
    {
        iParam0->_fU60 = 0;
    }
     /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_8546( iParam0 );
    return;
}

/* P_SET_POI_REUSABLE */ void sub_19593(int iParam0, unknown uParam1)
{
    iParam0->_fU68 = uParam1;
    return;
}

/* P_REQUEST_LRG_PERSISTENT_ASSETS */ void sub_19829()
{
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_REQUEST_LRG_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_19932( ref l_U208, ref g_U2468 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_22854( ref l_U215, ref g_U2613 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_24904( "LEVEL_S_POLICE_CP_05", ref g_U2741 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_24904( ref g_U3553, ref g_U2741 );
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_REQUEST_LRG_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_19932(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_20005( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_20005(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_20072( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20330( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_20072(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20330( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20330( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20330( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_21861( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20330( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20330( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_20330(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20391( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_20391(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_21861(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_22854(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_22928( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_22928(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_22982( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23243( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_22982(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23243( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23243( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23243( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_21861( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23243( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_23243( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_23243(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20391( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_24904(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_24956( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25208( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_24956(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25208( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25208( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25208( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_21861( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25208( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_25208( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_25208(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20391( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_LRG_NONPERSISTENT_ASSETS */ void sub_26849()
{
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_REQUEST_LRG_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26959( -724192985, ref g_U2662 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26959( 1507052255, ref g_U2662 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26959( -1750685803, ref g_U2662 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26959( 1772865089, ref g_U2662 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26959( -822154135, ref g_U2662 );
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_REQUEST_LRG_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_26959(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_27020( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27270( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_27020(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27270( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27270( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27270( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27270( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_21861( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_21861( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27270( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27270( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_27270(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_20391( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_29943(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_30333(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_30731(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_31145(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_31780(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_495( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_9965( uParam0,  /* PLAYER_PED_ID */ sub_993() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_32330(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_495( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_495( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_13231( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_32621( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_33098( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_33098( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33358( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_33098( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33358( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33358( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_33098( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33358( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33358( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33358( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_33098( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33358( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33358( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33358( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33358( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_34938( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_495( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_32621(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_10246( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_495( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_495( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_33098(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_33358(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_34938(int iParam0)
{
     /* WRITE_STRING */ sub_12066( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_35026( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_35103( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_35103( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_35103( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_35103( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_35103( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_35973( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU52 );
     /* WRITE_STRING */ sub_12066( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU96 );
     /* WRITE_STRING */ sub_12066( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU100 );
     /* WRITE_STRING */ sub_12066( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU104 );
     /* WRITE_STRING */ sub_12066( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU108 );
     /* WRITE_STRING */ sub_12066( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU112 );
     /* WRITE_STRING */ sub_12066( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU116 );
     /* WRITE_STRING */ sub_12066( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU120 );
     /* WRITE_STRING */ sub_12066( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU124 );
     /* WRITE_STRING */ sub_12066( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU128 );
     /* WRITE_STRING */ sub_12066( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_35272( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_35272( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_35272( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_35026(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_35103(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_35272(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_35973(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* F_LRG_CREATE_GYM_ENEMIES */ int sub_37019()
{
    unknown uVar2;

    switch (l_U233)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_GymEnemiesSpawn = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_37165( ref l_U302, 1056964608, 0 );
        l_U234 = 0;
        l_U233 = 2;
         /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_GymEnemiesSpawn = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        g_U4315[l_U234] =  /* CREATEPED */ sub_37637( ref l_U236[l_U234] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_38613( g_U4315[l_U234], ref l_U302 );
        if ((l_U234 == 4) || (l_U234 == 1))
        {
            uVar2 =  /* F_GIVEPEDWEAPON */ sub_12457( g_U4315[l_U234], 434544317, 25000, 0, 0 );
        }
        else
        {
            uVar2 =  /* F_GIVEPEDWEAPON */ sub_12457( g_U4315[l_U234], 1308526797, 25000, 0, 0 );
        }
        ENABLE_WEAPON_ATTACHMENT( uVar2, 14, 1 );
        TOGGLE_WEAPON_ATTACHMENT( uVar2, 14, 1 );
        if (NOT (IS_PED_DEAD( g_U4315[l_U234] )))
        {
            if (l_U234 < 3)
            {
                SET_ROOM_FOR_PED_BY_NAME( g_U4315[l_U234], ref g_U3269 );
            }
            else
            {
                SET_ROOM_FOR_PED_BY_NAME( g_U4315[l_U234], ref g_U3333 );
            }
             /* MAL_SETTEMPLATEANDRANGES */ sub_39216( ref g_U4315[l_U234], "AIT_EXPERT", 4, 10, 1 );
            SET_PED_SEEING_RANGE( g_U4315[l_U234], 22.00000000, 75 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4315[l_U234], 1 );
        }
         /* P_TETHERPED */ sub_39740( ref l_U340, g_U4315[l_U234], 1 );
         /* P_TETHERPED */ sub_39740( ref l_U341, g_U4315[l_U234], 1 );
         /* P_DEACTIVATEPED */ sub_39859( g_U4315[l_U234] );
        l_U234++;
        if (l_U234 >= 5)
        {
            l_U233 = 3;
             /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_GymEnemiesSpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U302._fU0, 1 );
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_40114( ref g_U4315, "pi_LRG_GymEnemy" );
        l_U233 = 4;
         /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_GymEnemiesSpawn = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_37165(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* CREATEPED */ void sub_37637(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_37819( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_38368( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_38469( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_37819(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_12066( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_38368(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_38469(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_38613(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_12066( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_37165( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_37165( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* MAL_SETTEMPLATEANDRANGES */ void sub_39216(unknown uParam0, unknown uParam1, float fParam2, float fParam3, boolean bParam4)
{
     /* MAL_WRITESCRIPTLOG */ sub_39280( "MAL_SetTemplateAndRanges" );
    PRINTSTRING( "[MSWW]### Template Name: " );
     /* WRITE_STRING */ sub_12066( uParam1 );
    PRINTSTRING( "[MSWW]### Min Range: " );
     /* WRITE_FLOAT */ sub_35103( fParam2 );
    PRINTSTRING( "[MSWW]### Max Range: " );
     /* WRITE_FLOAT */ sub_35103( fParam3 );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    if (NOT bParam4)
    {
         /* MAL_SETPEDCOMBATATTRIBUTES */ sub_39591( uParam0, 1, 0 );
    }
    return;
}

/* MAL_WRITESCRIPTLOG */ void sub_39280(unknown uParam0)
{
    unknown uVar3;

    uVar3 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar3, 1537, "MSWW", 1537, uParam0, 1537, "###" );
    return;
}

/* MAL_SETPEDCOMBATATTRIBUTES */ void sub_39591(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_COMBAT_ATTRIBUTES( (uParam0^), uParam1, uParam2 );
    }
    return;
}

/* P_TETHERPED */ void sub_39740(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_39859(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_40114(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* F_LRG_CREATE_HALL_ENEMIES */ int sub_40337()
{
    switch (l_U385)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_HallEnemiesSpawn = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_37165( ref l_U427, 1056964608, 0 );
        l_U386 = 0;
        l_U385 = 2;
         /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_HallEnemiesSpawn = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        g_U4321[l_U386] =  /* CREATEPED */ sub_37637( ref l_U387[l_U386] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_38613( g_U4321[l_U386], ref l_U427 );
        if (NOT (IS_PED_DEAD( g_U4321[l_U386] )))
        {
            if ((l_U386 == 1) || (l_U386 == 0))
            {
                 /* P_TETHERPED */ sub_39740( ref l_U433, g_U4321[l_U386], 1 );
                SET_ROOM_FOR_PED_BY_NAME( g_U4321[l_U386], "F2_CompRM_01" );
            }
            else
            {
                 /* P_TETHERPED */ sub_39740( ref l_U434, g_U4321[l_U386], 1 );
                SET_ROOM_FOR_PED_BY_NAME( g_U4321[l_U386], ref g_U3333 );
            }
            SET_PED_AI_TEMPLATE( g_U4321[l_U386], "AIT_EXPERT" );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4321[l_U386], 1 );
            SET_PED_SEEING_RANGE( g_U4321[l_U386], 13.00000000, 75 );
            SET_PED_HEARING_RANGE( g_U4321[l_U386], 13.00000000 );
            SET_PED_CONSUMING_AMMO( g_U4321[l_U386], 0 );
        }
        l_U386++;
        if (l_U386 >= 3)
        {
            l_U385 = 3;
             /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_HallEnemiesSpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U427._fU0, 1 );
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_40114( ref g_U4321, "pi_LRG_HallEnemy" );
         /* F_GIVEPEDWEAPON */ sub_12457( g_U4321[0], 1308526797, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_12457( g_U4321[1], 1308526797, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_12457( g_U4321[2], 1308526797, 25000, 0, 0 );
         /* P_DEACTIVATEPEDARRAY */ sub_41113( ref g_U4321 );
        l_U385 = 4;
         /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_HallEnemiesSpawn = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_DEACTIVATEPEDARRAY */ void sub_41113(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_39859( (uParam0^)[I] );
    }
    return;
}

/* P_LRG_CREATE_PLACEMENTS */ void sub_41393()
{
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_LRG_CREATE_PLACEMENTS start", 0 );
    l_U224[0] =  /* CREATEPLACEMENT */ sub_41516( -4072149, 7.47000000, -40.14000000, 0.83000000, 0.00000000, 0.00000000, 1.10000000, 1, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U224[0], ref g_U3261 );
    l_U224[1] =  /* CREATEPLACEMENT */ sub_41516( -4072149, 7.44800000, -30.93000000, 1.62900000, 0.00000000, 0.00000000, 2.50000000, 1, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U224[1], ref g_U3261 );
    l_U224[5] =  /* CREATEPLACEMENT */ sub_41516( -4072149, 30.84000000, -21.97000000, 0.42000000, 0.00000000, 0.00000000, 30.00000000, 1, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U224[5], "f2_shower_01" );
    g_U4325[0] =  /* CREATEPLACEMENT */ sub_41516( -4072149, 26.59000000, 11.88000000, 0.80000000, 0.00000000, 0.00000000, 0.80000000, 1, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U4325[0], ref g_U3357 );
    g_U4325[3] =  /* CREATEPLACEMENT */ sub_41516( -4072149, 13.85000000, 24.17000000, 1.02000000, 0.00000000, 0.00000000, 0.00000000, 1, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U4325[3], "f2_lobby_Office02" );
     /* P_CREATE_S_POL_GG_MP_02 */ sub_42042();
     /* P_CREATE_S_POL_GG_MP_03 */ sub_42859();
     /* P_CREATE_S_POL_GG_G6_02 */ sub_43023();
     /* P_CREATE_S_POL_GG_G6_03 */ sub_43179();
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_LRG_CREATE_PLACEMENTS end", 0 );
    return;
}

/* CREATEPLACEMENT */ void sub_41516(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_CREATE_S_POL_GG_MP_02 */ void sub_42042()
{
     /* WRITESCRIPTLOG */ sub_495( "CO", "P_CREATE_S_POL_GG_MP_02", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_42180( ref g_U667, g_U812, 1693985502, -302533334, 12.20000000, -25.92000000, 0.05000000, 0.00000000, 0.00000000, 1.00000000, "f2_shower_02" );
     /* P_CREATECOLLECTIBLE */ sub_42337( ref g_U667 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_42180(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_495( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_42337(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_495( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_42420( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_495( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_495( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_42420( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_7963( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_41516( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_495( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_495( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_42420(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_CREATE_S_POL_GG_MP_03 */ void sub_42859()
{
     /* WRITESCRIPTLOG */ sub_495( "CO", "P_CREATE_S_POL_GG_MP_03", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_42180( ref g_U685, g_U813, 672837924, -598011407, 5.65000000, 22.73000000, 0.80000000, 1.50000000, 0.00000000, 1.00000000, "f2_lobby_Office01" );
     /* P_CREATECOLLECTIBLE */ sub_42337( ref g_U685 );
    return;
}

/* P_CREATE_S_POL_GG_G6_02 */ void sub_43023()
{
     /* WRITESCRIPTLOG */ sub_495( "CO", "P_CREATE_S_POL_GG_G6_02", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_42180( ref g_U775, g_U818, 1497945839, -1420691957, 28.68000000, 13.98000000, 0.01000000, 1.50000000, 0.00000000, 10.00000000, "1f2_lobby" );
     /* P_CREATECOLLECTIBLE */ sub_42337( ref g_U775 );
    return;
}

/* P_CREATE_S_POL_GG_G6_03 */ void sub_43179()
{
     /* WRITESCRIPTLOG */ sub_495( "CO", "P_CREATE_S_POL_GG_G6_03", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_42180( ref g_U793, g_U819, 61877183, -985585175, 2.70000000, -12.27000000, 0.55000000, 1.50000000, 0.00000000, 5.00000000, "f2_corridor_02" );
     /* P_CREATECOLLECTIBLE */ sub_42337( ref g_U793 );
    return;
}

/* P_START_SP_CHALLENGES */ void sub_43403()
{
     /* WRITESCRIPTLOG */ sub_495( "CCB", "P_START_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_495( "CCB", "Starting the Precinct_Lockers context...", 0 );
    START_CONTEXT( "Precinct_Lockers" );
    return;
}

/* P_CLOSEDOOR */ void sub_43567(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_43593( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_43677( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_43593(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_43677(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORLOCKED */ void sub_43834(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_43593( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_43677( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* P_CREATEDOORSTRUCT */ void sub_44027(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

/* P_SETDOORMINMAXLIMIT */ void sub_44232(int iParam0, float fParam1, float fParam2)
{
    if (( /* F_DOESDOOREXIST */ sub_43593( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_43677( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        PRINTSTRING( "[SP]### Error: Door fMinLimit greater than fMaxLimit (default min:-81.0 max:81.0) ###" );
        PRINTNL();
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

/* P_SETDOORLATCH */ void sub_44507(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_43593( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_43677( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_OPENDOOR */ void sub_44599(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if (( /* F_DOESDOOREXIST */ sub_43593( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_43677( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

/* P_LRG_START_UFE_SEARCH_BEHAVIOR */ void sub_45021()
{
    unknown uVar2;
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_495( "AT", "P_LRG_MOVE_GYM_ENEMIES_TO_COVER start", 0 );
     /* P_ACTIVATEPED */ sub_45124( g_U4315[0] );
     /* P_ACTIVATEPED */ sub_45124( g_U4315[1] );
     /* P_ACTIVATEPED */ sub_45124( g_U4315[2] );
    MARK_COVERPOINTMP3_SEARCHABLE( "GenCover", "1B771D5A_471EB808_Corner1", 1 );
    MARK_COVERPOINTMP3_SEARCHABLE( "GenCover", "1B771D5A_471EB808_Corner2", 1 );
    MARK_COVERPOINTMP3_SEARCHABLE( "GenCover", "1B771D5A_B7850355_Corner2", 1 );
    MARK_COVERPOINTMP3_SEARCHABLE( "floor2", "Corner_Position64", 1 );
    MARK_COVERPOINTMP3_SEARCHABLE( "GenCover", "1B771D5A_39B01D2B_Corner2", 1 );
    MARK_COVERPOINTMP3_SEARCHABLE( "GenCover", "1B771D5A_638A70DF_Corner2", 1 );
    OPEN_SEQUENCE_TASK( ref uVar2 );
    TASK_SEARCH_FOR_UNSEEN_ENEMY( 0, 1 );
    CLOSE_SEQUENCE_TASK( uVar2 );
    if (NOT (IS_PED_DEAD( g_U4315[0] )))
    {
        TASK_PERFORM_SEQUENCE( g_U4315[0], uVar2 );
    }
    CLEAR_SEQUENCE_TASK( uVar2 );
    OPEN_SEQUENCE_TASK( ref uVar3 );
    TASK_SEARCH_FOR_UNSEEN_ENEMY( 0, 1 );
    CLOSE_SEQUENCE_TASK( uVar3 );
    if (NOT (IS_PED_DEAD( g_U4315[1] )))
    {
        TASK_PERFORM_SEQUENCE( g_U4315[1], uVar3 );
    }
    CLEAR_SEQUENCE_TASK( uVar3 );
    return;
}

/* P_ACTIVATEPED */ void sub_45124(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* NIS_PRE_SETUP */ void sub_45773(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1031(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_993(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_993() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_993(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_LRG_START_BOUT */ void sub_45948()
{
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_LRG_START_BOUT start", 0 );
    ISEQ_REGISTER_ENTITY( -724192985, "Max",  /* PLAYER_PED_ID */ sub_993(), 0 );
     /* TELEPORTPED */ sub_9607(  /* PLAYER_PED_ID */ sub_993(), g_U2953[6], g_U3083[6] );
    ISEQ_START( -724192985 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
    {
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_993(), 1 );
    }
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1031() )))
    {
        SNAP_PLAYER_TO_COVERPOINT(  /* PLAYER_ID */ sub_1031(), "floor2", "Corner_Position65", 1 );
    }
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U3127[6], 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U3171[6], 1065353216, 0 );
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_LRG_START_BOUT end", 0 );
    return;
}

/* P_DROP_PRE_RIOT_PRECINCT_STREAMHELPERS */ void sub_46264()
{
     /* WRITESCRIPTLOG */ sub_495( "CMT", "Removing pre-riot interiors...", 0 );
    SET_HELPER_ENABLED( "cs_13_01_B", 0, 0 );
    SET_HELPER_ENABLED( "cs_13_01_A", 0, 0 );
    SET_HELPER_ENABLED( "cs_13_01_C", 0, 0 );
    SET_HELPER_ENABLED( "MILO_cell_preriot_interior", 0, 1 );
    SET_HELPER_ENABLED( "exchange_pre_interior", 0, 1 );
    return;
}

/* F_LRG_IS_BOUT_DONE */ int sub_46655()
{
    if ((ISEQ_QUERY_STATE( -724192985, 3 )) AND (IS_SCREEN_FADED_OUT()))
    {
         /* WRITESCRIPTLOG */ sub_495( "GA", "Blendout is playing, fading in screen.", 0 );
        DO_SCREEN_FADE_IN( 0 );
    }
    if ((ISEQ_QUERY_ENTITY_STATE( -724192985, "Max", 6 )) || (ISEQ_QUERY_ENTITY_STATE( -724192985, "Max", 5 )))
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
        {
            FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_993(), 0 );
        }
        return 1;
    }
    return 0;
}

/* NIS_POST_SETUP */ void sub_46867(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1031(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_993(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_46965();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_46965()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_993(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_993(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_993(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_993(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_CREATE_LOBBY_ELEVATOR_DOORS */ void sub_47252(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_CREATE_LOBBY_ELEVATOR_DOORS start", 0 );
     /* CLEANOBJECT */ sub_6260( g_U4330 );
    g_U4330 =  /* CREATEOBJECT */ sub_47382( g_U3227, g_U4363, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U4330 )) == 1)
    {
        FREEZE_OBJECT_POSITION( g_U4330, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U4330, ref g_U3357 );
        if (bParam0)
        {
            SET_OBJECT_AS_PATH_OBSTACLE( g_U4330 );
        }
    }
     /* CLEANOBJECT */ sub_6260( g_U4332 );
    g_U4332 =  /* CREATEOBJECT */ sub_47382( g_U3227, g_U4366, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U4332 )) == 1)
    {
        FREEZE_OBJECT_POSITION( g_U4332, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U4332, ref g_U3357 );
        if (bParam0)
        {
            SET_OBJECT_AS_PATH_OBSTACLE( g_U4332 );
        }
    }
     /* CLEANOBJECT */ sub_6260( g_U4331 );
    g_U4331 =  /* CREATEOBJECT */ sub_47382( g_U3227, g_U4369, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U4331 )) == 1)
    {
        FREEZE_OBJECT_POSITION( g_U4331, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U4331, ref g_U3357 );
        if (bParam0)
        {
            SET_OBJECT_AS_PATH_OBSTACLE( g_U4331 );
        }
    }
     /* CLEANOBJECT */ sub_6260( g_U4333 );
    g_U4333 =  /* CREATEOBJECT */ sub_47382( g_U3227, g_U4372, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U4333 )) == 1)
    {
        FREEZE_OBJECT_POSITION( g_U4333, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U4333, ref g_U3357 );
        if (bParam0)
        {
            SET_OBJECT_AS_PATH_OBSTACLE( g_U4333 );
        }
    }
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_CREATE_LOBBY_ELEVATOR_DOORS end", 0 );
    return;
}

/* CREATEOBJECT */ void sub_47382(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_37819( uParam0, 1 );
    }
    Result = CREATE_OBJECT( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_CREATE_LOBBY_OBJECTS */ void sub_48270()
{
     /* WRITESCRIPTLOG */ sub_495( "AT", "Making lobby objects.", 0 );
    g_U4375 =  /* CREATEOBJECTNOOFFSET */ sub_48378( -1257962541, 16.45100000, 25.82800000, 0.01300000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4375 ))
    {
        FREEZE_OBJECT_POSITION( g_U4375, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U4375, "f2_lobby" );
    }
    g_U4376 =  /* CREATEOBJECTNOOFFSET */ sub_48378( -1514674887, 16.45100000, 25.82800000, 0.01300000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4376 ))
    {
        FREEZE_OBJECT_POSITION( g_U4376, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U4376, "f2_lobby" );
    }
    g_U4377 =  /* CREATEOBJECTNOOFFSET */ sub_48378( 743953242, 16.49900000, 25.71500000, 0.04900000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4377 ))
    {
        FREEZE_OBJECT_POSITION( g_U4377, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U4377, "f2_lobby" );
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_48378(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_37819( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_HANDLE_FISHER_EXPLORATION_ITEM */ void sub_48963()
{
    if (NOT ( /* F_IS_POI_AVAILABLE */ sub_49012( ref l_U1096 )))
    {
        if (( /* F_POI_CAN_PLAY_UNAVALIABLE_MONO */ sub_49068( ref l_U1096 )) == 1)
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_49377( "EXPLORE_ITEM", ref l_U1085 );
        }
    }
    if ( /* F_HANDLE_POI */ sub_49486( ref l_U1096 ))
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "Starting Fisher investigation.", 0 );
         /* NIS_PRE_SETUP */ sub_45773( 1, 0, 0, 1 );
        CAMERA_PLAY_ANIMATED( "EXPL_CAM", "EXPL_CAM_GND_15_F_CAM", 1, l_U1185, l_U1188, 0, 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
        {
            SET_PLAYER_THREAT_REACTION(  /* PLAYER_PED_ID */ sub_993(), 0 );
            CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_993() );
            RESET_PLAYER_INPUT_GAIT( 0 );
             /* P_RESET_MAX_ACTION_TREE */ sub_51466();
            SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_993(), 0 );
        }
         /* TELEPORTPED */ sub_9607(  /* PLAYER_PED_ID */ sub_993(), 19.68657000, -6.07008000, 0.01309500, 354.23640000 );
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( 5.69607000, 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( -11.97211000, 1065353216, 0 );
        if (NOT (HAS_EXPLORATION_ITEM_BEEN_FOUND( "spol_Note" )))
        {
             /* KILL_ANY_MISSION_SPEECH */ sub_51910( 0 );
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_49377( "SPOL_NFRMFTBK", ref l_U1075 );
            FOUND_EXPLORATION_ITEM( "spol_Note" );
        }
        l_U1095 = 1;
    }
    if (l_U1095)
    {
        if ((NOT IS_ANIMATED_CAMERA_PLAYING()) || (CAMERA_ANIMATED_CURRENT_TIME() > 3000))
        {
             /* WRITESCRIPTLOG */ sub_495( "AT", "Ending Fisher exploration item.", 0 );
            CAMERA_ANIMATED_STOP( 0, 0 );
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
            {
                 /* CREATETIMER */ sub_1777( ref l_U1189, 1000, 1, 0 );
                 /* STARTTIMER */ sub_1927( ref l_U1189 );
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_993(), 1 );
            }
             /* NIS_POST_SETUP */ sub_46867( 0, 1 );
             /* P_ENABLE_POI */ sub_8088( ref l_U1096, 1 );
            l_U1095 = 0;
        }
    }
    if ( /* ISTIMERDONE */ sub_2293( ref l_U1189 ))
    {
        SET_PLAYER_THREAT_REACTION(  /* PLAYER_PED_ID */ sub_993(), 1 );
    }
    return;
}

/* F_IS_POI_AVAILABLE */ void sub_49012(int iParam0)
{
    return iParam0->_fU56;
}

/* F_POI_CAN_PLAY_UNAVALIABLE_MONO */ int sub_49068(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND ((iParam0->_fU76 == 0) AND (( /* F_IS_POI_AVAILABLE */ sub_49012( iParam0 )) == 0)))
    {
        if ((( /* F_HASACTIONBEENPRESSED */ sub_49258()) == 1) AND (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_993() )) == 0) AND (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_993() )) == 0) AND (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_993() )) == 0) AND (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_993() )) == 0) AND (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_993() )) == 0) AND ((IS_PLAYER_SHOOTDODGING() == 0) AND ((IS_MONOLOGUE_PLAYING() == 0) AND ((IS_INTERACTIONTEXT_AVAILABLE() == 0) AND (IS_INTERACTIONTEXT_ONSCREEN() == 1))))))))))
        {
            iParam0->_fU76 = 1;
            return 1;
        }
    }
    return 0;
}

/* F_HASACTIONBEENPRESSED */ int sub_49258()
{
    if ((IS_CONTROL_JUST_PRESSED( 0, 30 )) == 1)
    {
        return 1;
    }
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_49377(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2560( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2671( 0,  /* PLAYER_PED_ID */ sub_993(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2671( 1,  /* PLAYER_PED_ID */ sub_993(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_2941( uParam0, uParam1, 8, 1 );
    return;
}

/* F_HANDLE_POI */ int sub_49486(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    int iVar6;
    int iVar7;
    int iVar8;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )) == 0)
    {
        if (iParam0->_fU0 == 1)
        {
            uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_993() )};
            iVar6 = 0;
            if (iParam0->_fU80 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_49587(  /* PLAYER_PED_ID */ sub_993(), iParam0->_fU116 )) == 1)
                {
                    if (iParam0->_fU300 == 1)
                    {
                        if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                        {
                            iVar6 = 1;
                        }
                    }
                    else
                    {
                        iVar6 = 1;
                    }
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU84 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_PED_ON_SCREEN( iParam0->_fU316, 0 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU100, 1 )) <= iParam0->_fU112)
            {
                if (iParam0->_fU300 == 1)
                {
                    if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                    {
                        iVar6 = 1;
                    }
                }
                else
                {
                    iVar6 = 1;
                }
            };;;;
            iVar7 = 0;
            if (iParam0->_fU88 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_49587(  /* PLAYER_PED_ID */ sub_993(), iParam0->_fU216 )) == 1)
                {
                    iVar7 = 1;
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU92 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU200, 1 )) <= iParam0->_fU212)
            {
                iVar7 = 1;
            };;;;
            if (iVar6 == 1)
            {
                if ((iParam0->_fU4 != 3) AND (iParam0->_fU52 == 1))
                {
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_8546( iParam0 );
                    }
                    iVar8 = 0;
                    if ((IS_WEAPON_PICKUP_VISIBLE() == 0) AND ((iParam0->_fU60 == 0) AND (( /* F_ISACTIONINGAVAILABLE */ sub_8642( iParam0 )) == 1)))
                    {
                        SET_ACTION_CONSUMED( 0, 1 );
                        if (( /* F_HASACTIONBEENPRESSED */ sub_49258()) == 1)
                        {
                            iVar8 = 1;
                        }
                    }
                    if (iVar8 == 1)
                    {
                        if (iParam0->_fU332 == 0)
                        {
                             /* P_ENABLE_POI */ sub_8088( iParam0, 0 );
                            iParam0->_fU64 = 1;
                        }
                        if (iParam0->_fU68 == 1)
                        {
                            iParam0->_fU72 = 0;
                        }
                        return 1;
                    }
                    else if (iParam0->_fU8 != 2)
                    {
                        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                        {
                             /* P_ENABLEPOIGLINT */ sub_8147( iParam0, 0 );
                             /* P_ENABLEPOIINTERACTIONTEXT */ sub_8366( iParam0, 1 );
                        }
                        else if (iParam0->_fU320 == 1)
                        {
                             /* P_ENABLEPOIGLINT */ sub_8147( iParam0, 1 );
                        }
                        iParam0->_fU8 = 2;
                    }
                    if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                    {
                        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )) == 0)
                        {
                            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_993(), 1 );
                            iParam0->_fU328 = 1;
                        }
                    }
                }
            }
            else if (iVar7 == 1)
            {
                if (iParam0->_fU8 != 1)
                {
                    if ((iParam0->_fU4 != 3) AND (iParam0->_fU320 == 1))
                    {
                         /* P_ENABLEPOIGLINT */ sub_8147( iParam0, 1 );
                    }
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_ENABLEPOIINTERACTIONTEXT */ sub_8366( iParam0, 0 );
                    }
                    if (iParam0->_fU96 == 1)
                    {
                        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )) == 0) AND ((((IS_PED_DEAD( iParam0->_fU316 )) == 1) || ((IS_PED_DEAD( iParam0->_fU316 )) == 0)) AND ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)))
                        {
                            TASK_LOOK_AT_PED(  /* PLAYER_PED_ID */ sub_993(), iParam0->_fU316, -1, 0 );
                        }
                    }
                    else if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )) == 0)
                    {
                        TASK_LOOK_AT_COORD(  /* PLAYER_PED_ID */ sub_993(), iParam0->_fU100, -1, 0 );
                    }
                    iParam0->_fU340 = 1;
                    if ((iParam0->_fU72 == 0) AND ((iParam0->_fU68 == 1) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU8 == 2))))
                    {
                        iParam0->_fU72 = 1;
                    }
                    iParam0->_fU8 = 1;
                }
                if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                {
                    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )) == 0)
                    {
                        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_993(), 1 );
                        iParam0->_fU328 = 1;
                    }
                }
            }
            else if ((iParam0->_fU4 == 1) || (iParam0->_fU4 == 3))
            {
                ;
            }
            else if (iParam0->_fU8 != 0)
            {
                if (iParam0->_fU320 == 1)
                {
                     /* P_ENABLEPOIGLINT */ sub_8147( iParam0, 0 );
                }
            }
            if (iParam0->_fU8 == 2)
            {
                if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                {
                     /* P_ENABLEPOIINTERACTIONTEXT */ sub_8366( iParam0, 0 );
                }
            }
            if (iParam0->_fU340)
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )) == 0)
                {
                    TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_993() );
                    iParam0->_fU340 = 0;
                }
            }
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )) == 0)
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_993(), 0 );
                    iParam0->_fU328 = 0;
                }
            }
            if (iParam0->_fU332 == 1)
            {
                 /* P_ENABLEPOIINTERACTIONTEXT */ sub_8366( iParam0, 0 );
            }
            iParam0->_fU8 = 0;;;
        }
    }
    return 0;
}

/* F_ISPEDINTRIGGERBOX */ int sub_49587(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_RESET_MAX_ACTION_TREE */ void sub_51466()
{
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_RESET_MAX_ACTION_TREE start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
    {
        if (IS_PLAYER_SHOOTDODGING())
        {
            SCRIPT_ASSERT( "Do not try to reset Max's action tree when he is shoot dodging.", 0 );
             /* WRITESCRIPTLOG */ sub_495( "GA", "You cannot reset Max's action tree during a shoot dodge.", 0 );
        }
        else
        {
            PED_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_993(), "/Global/Player" );
        }
    }
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_RESET_MAX_ACTION_TREE end", 0 );
    return;
}

/* KILL_ANY_MISSION_SPEECH */ void sub_51910(unknown uParam0)
{
    int I;

    for ( I = 0; I <= 3; I++ )
    {
        PRINTSTRING( "\n KILL_ANY_MISSION_SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( I ))
        {
            if ((g_U1[I] <= 8) AND (g_U1[I] >= 4))
            {
                STOP_SCRIPTED_CONVERSATION( I, uParam0, 0 );
            }
        }
    }
    return;
}

/* P_UNBLOCK_GYM_ENEMIES */ void sub_52570()
{
    int I;

    for ( I = 0; I < 5; I++ )
    {
        if (NOT (IS_PED_DEAD( g_U4315[I] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4315[I], 0 );
        }
    }
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_52686(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_52752( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_52752(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_7733( uParam0 );
            }
        }
    }
    return;
}

/* P_MANAGE_DOORS */ void sub_52902()
{
    if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( g_U3827._fU0, g_U3827._fU4 ) ))
    {
        if (DOOR_GET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3827._fU0, g_U3827._fU4 ) ))
        {
             /* WRITESCRIPTLOG */ sub_495( "GA", "Setting Atrium left door to not react to bullets.", 0 );
            DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3827._fU0, g_U3827._fU4 ), 0 );
        }
    }
    if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( g_U3834._fU0, g_U3834._fU4 ) ))
    {
        if (DOOR_GET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3834._fU0, g_U3834._fU4 ) ))
        {
             /* WRITESCRIPTLOG */ sub_495( "GA", "Setting Atrium right door to not react to bullets.", 0 );
            DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3834._fU0, g_U3834._fU4 ), 0 );
        }
    }
    return;
}

/* F_PL_HAS_MAX_BEEN_SPOTTED */ int sub_53283()
{
    unknown uVar2;

    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_53326( ref l_U317, 0 ))
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "Player in trigger box! Alerting UFE!", 0 );
         /* P_UNBLOCK_GYM_ENEMIES */ sub_52570();
        return 1;
    }
    if ( /* F_IS_PED_AWARE_OF_PED */ sub_53537( ref g_U4315[0],  /* PLAYER_PED_ID */ sub_993(), 1, 1, 1, 1, 1 ))
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "i_LRG_Gym_FrontPillar is aware of player! Alerting UFE!", 0 );
        return 1;
    }
    if ( /* F_IS_PED_AWARE_OF_PED */ sub_53537( ref g_U4315[1],  /* PLAYER_PED_ID */ sub_993(), 1, 1, 1, 1, 1 ))
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "i_LRG_Gym_BackPillar is aware of player! Alerting UFE!", 0 );
        return 1;
    }
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
    {
        uVar2 =  /* PLAYER_PED_ID */ sub_993();
        if (HAS_SHOT_BEEN_FIRED_IN_AREA( 24.29000000, -36.49000000, 0.00000000, 25.00000000, 1, ref uVar2 ))
        {
             /* WRITESCRIPTLOG */ sub_495( "AT", "Shots fired! Alerting UFE!", 0 );
             /* P_UNBLOCK_GYM_ENEMIES */ sub_52570();
            return 1;
        }
    }
    return 0;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_53326(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_49587(  /* PLAYER_PED_ID */ sub_993(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* F_IS_PED_AWARE_OF_PED */ int sub_53537(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, int iParam6)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        if ((uParam3) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 1 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_495( "MF", "ped has SEEN target ped", 0 );
            }
            return 1;
        }
        else if ((uParam4) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 8 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_495( "MF", "ped has BEEN SHOT AT by target ped", 0 );
            }
            return 1;
        }
        else if ((uParam2) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 2 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_495( "MF", "ped has HEARD target ped", 0 );
            }
            return 1;
        }
        else if ((uParam5) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 4 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_495( "MF", "ped has BEEN TOLD ABOUT target ped", 0 );
            }
            return 1;
        };;;;
    }
    return 0;
}

/* MAL_SETPEDARRAYLOCKEDANDREGISTEREDTARGET */ void sub_54466(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* MAL_REGISTERTARGET */ sub_54543( ref (uParam0^)[I], uParam1 );
         /* MAL_SETLOCKEDTARGET */ sub_54629( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_REGISTERTARGET */ void sub_54543(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        REGISTER_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_SETLOCKEDTARGET */ void sub_54629(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        SET_LOCKED_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_UNBLOCKANDCOMBATPLAYER */ void sub_54736(unknown uParam0, unknown uParam1, unknown uParam2)
{
     /* MAL_UNBLOCKANDCOMBATPED */ sub_54786( uParam0,  /* PLAYER_PED_ID */ sub_993(), uParam1, uParam2 );
    return;
}

/* MAL_UNBLOCKANDCOMBATPED */ void sub_54786(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

     /* MAL_WRITESCRIPTLOG */ sub_39280( "MAL_UnblockAndCombatPed" );
    OPEN_SEQUENCE_TASK( ref uVar6 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
         /* MAL_WRITESCRIPTLOG */ sub_39280( "MAL_UnblockAndCombatPed: Victim is not dead" );
        TASK_COMBAT_PED( 0, uParam1 );
    }
    CLOSE_SEQUENCE_TASK( uVar6 );
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
         /* MAL_WRITESCRIPTLOG */ sub_39280( "MAL_UnblockAndCombatPed: Ped is not dead" );
        if (bParam3)
        {
            CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        }
        else
        {
            CLEAR_PED_TASKS( (uParam0^) );
        }
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam2 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar6 );
    }
    CLEAR_SEQUENCE_TASK( uVar6 );
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_55121(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* MAL_COMPAREPLAYERPOSAXIS */ int sub_55263(unknown uParam0, unknown uParam1, float fParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    float fVar8;

    uVar5 = { /* MAL_GETPEDCOORDS */ sub_55305(  /* PLAYER_PED_ID */ sub_993() )};
    if (ARE_STRINGS_EQUAL( uParam0, "X" ))
    {
        fVar8 = uVar5._fU0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "Y" ))
    {
        fVar8 = uVar5._fU4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "Z" ))
    {
        fVar8 = uVar5._fU8;
    };;;
    if (ARE_STRINGS_EQUAL( uParam1, "Greater" ))
    {
        if (fVar8 > fParam2)
        {
            return 1;
        }
    }
    else if (ARE_STRINGS_EQUAL( uParam1, "Less" ))
    {
        if (fVar8 < fParam2)
        {
            return 1;
        }
    }
    return 0;
}

/* MAL_GETPEDCOORDS */ vector sub_55305(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return "[dynamic result, ret vals = 3]";
        break;
        GET_PED_COORDS( uParam0 );
        "[doubled result, dropped if not asigned]";
        "[doubled result, dropped if not asigned]";
        break;
    }
    return vector( 0, 0, 0);
}

/* P_LRG_GYM_SECOND_WAVE */ void sub_55557()
{
     /* P_ACTIVATEPED */ sub_45124( g_U4315[3] );
     /* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ sub_55611( ref g_U4315[3] );
     /* MAL_UNBLOCKANDCOMBATPLAYER */ sub_54736( ref g_U4315[3], 2, 0 );
     /* P_ACTIVATEPED */ sub_45124( g_U4315[4] );
     /* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ sub_55611( ref g_U4315[4] );
     /* MAL_UNBLOCKANDCOMBATPLAYER */ sub_54736( ref g_U4315[4], 2, 0 );
    l_U235 = 1;
    return;
}

/* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ void sub_55611(unknown uParam0)
{
     /* MAL_SETLOCKEDANDREGISTEREDONPED */ sub_55665( uParam0,  /* PLAYER_PED_ID */ sub_993() );
    return;
}

/* MAL_SETLOCKEDANDREGISTEREDONPED */ void sub_55665(unknown uParam0, unknown uParam1)
{
     /* MAL_REGISTERTARGET */ sub_54543( uParam0, uParam1 );
     /* MAL_SETLOCKEDTARGET */ sub_54629( uParam0, uParam1 );
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_55974(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_49587(  /* PLAYER_PED_ID */ sub_993(), uParam0 );
}

/* F_CAN_AMBIENT_SPEECH_PLAY */ int sub_56047()
{
    if ((l_U152._fU16) || ( /* ISTIMERDONE */ sub_2293( ref l_U152 )))
    {
        return 1;
    }
    return 0;
}

/* P_REMOVEALLTETHERSFROMPED */ void sub_56262(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        RESET_PED_TETHERING( uParam0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_ASSET_LOADED */ int sub_56682(int iParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU4 == 3)
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loaded: {!f1}", 2, 1, -874832622, 513, (uParam1^)[I]._fU0 );
                return 1;
            }
        }
    }
    return 0;
}

/* F_LRG_CREATE_HALL_RIOTERS */ int sub_56897()
{
    switch (l_U481)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_HallRiotersSpawn = ENTITY_STATE_INIT", 0 );
        l_U482 = 0;
        l_U481 = 2;
         /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_HallRiotersSpawn = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        g_U4311[l_U482] =  /* CREATEPED */ sub_37637( ref l_U483[l_U482] );
        if (NOT (IS_PED_DEAD( g_U4311[l_U482] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( g_U4311[l_U482], ref g_U3333 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4311[l_U482], 1 );
            SET_PED_AS_ONE_SHOT_KILL( g_U4311[l_U482], 1 );
            SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U4311[l_U482], 1 );
            SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( g_U4311[l_U482], 0 );
            SET_PED_RESIST_TO_OBJECT_COLLISION( g_U4311[l_U482], 1 );
            "[doubled result, dropped if not asigned]";
            "[doubled result, dropped if not asigned]";
            SET_PED_CONSUMING_AMMO( g_U4311[l_U482], 0 );
            SET_PED_HEALTH( g_U4311[l_U482], 101, 0 );
            SET_PED_OBLIVIOUS_TO_DANGER( g_U4311[l_U482], 1 );
            SET_PED_CAN_BE_MELEED( g_U4311[l_U482], 0 );
        }
        l_U482++;
        if (l_U482 >= 3)
        {
            l_U481 = 3;
             /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_HallRiotersSpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_40114( ref g_U4311, "pi_LRG_HallRioter" );
         /* F_GIVEPEDWEAPON */ sub_12457( g_U4311[0], 1308526797, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_12457( g_U4311[1], 1308526797, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_12457( g_U4311[2], -862236369, 25000, 0, 0 );
         /* P_DEACTIVATEPEDARRAY */ sub_41113( ref g_U4311 );
        l_U481 = 4;
         /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_HallRiotersSpawn = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_LRG_START_HALLWAY_GAMEPLAY */ void sub_57799()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

     /* WRITESCRIPTLOG */ sub_495( "AT", "P_LRG_START_HALLWAY_GAMEPLAY start", 0 );
     /* P_CREATEDOORSTRUCT */ sub_44027( ref uVar2, 924526578, 13.07538000, -5.76907000, 1.12802000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_44232( ref uVar2, 65436, 110 );
     /* P_OPENDOOR */ sub_44599( ref uVar2, 1, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_44507( ref uVar2, 1 );
     /* P_ACTIVATEPEDARRAY */ sub_57968( ref g_U4321 );
     /* P_ACTIVATEPEDARRAY */ sub_57968( ref g_U4311 );
     /* TELEPORTPED */ sub_9607( g_U4321[0], l_U387[0]._fU0, l_U387[0]._fU12 );
    if (NOT (IS_PED_DEAD( g_U4321[0] )))
    {
        ISEQ_REGISTER_ENTITY( -1750685803, "VIG_04A_PP_UFE1", g_U4321[0], 0 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4321[0], 0 );
    }
     /* STARTTIMER */ sub_1927( ref l_U551[0]._fU0 );
     /* TELEPORTPED */ sub_9607( g_U4321[1], l_U387[1]._fU0, l_U387[1]._fU12 );
    if (NOT (IS_PED_DEAD( g_U4321[1] )))
    {
        ISEQ_REGISTER_ENTITY( -1750685803, "VIG_04A_PP_UFE2", g_U4321[1], 0 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4321[1], 0 );
    }
     /* STARTTIMER */ sub_1927( ref l_U551[1]._fU0 );
     /* TELEPORTPED */ sub_9607( g_U4321[2], l_U387[2]._fU0, l_U387[2]._fU12 );
    if (NOT (IS_PED_DEAD( g_U4321[2] )))
    {
        ISEQ_REGISTER_ENTITY( 1772865089, "VIG_04B_PP_UFE", g_U4321[2], 0 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4321[2], 0 );
    }
     /* STARTTIMER */ sub_1927( ref l_U551[2]._fU0 );
     /* TELEPORTPED */ sub_9607( g_U4311[0], l_U483[0]._fU0, l_U483[0]._fU12 );
    if (NOT (IS_PED_DEAD( g_U4311[0] )))
    {
        ISEQ_REGISTER_ENTITY( -822154135, "VIG_04C_PP_RIOTER", g_U4311[0], 0 );
    }
     /* STARTTIMER */ sub_1927( ref l_U588[0]._fU0 );
     /* TELEPORTPED */ sub_9607( g_U4311[1], l_U483[1]._fU0, l_U483[1]._fU12 );
    if (NOT (IS_PED_DEAD( g_U4311[1] )))
    {
        ISEQ_REGISTER_ENTITY( -822154135, "VIG_04C_PP_RIOTER1", g_U4311[1], 0 );
    }
     /* STARTTIMER */ sub_1927( ref l_U588[1]._fU0 );
     /* TELEPORTPED */ sub_9607( g_U4311[2], l_U483[2]._fU0, l_U483[2]._fU12 );
    if (NOT (IS_PED_DEAD( g_U4311[2] )))
    {
        ISEQ_REGISTER_ENTITY( -822154135, "VIG_04C_PP_RIOTER2", g_U4311[2], 0 );
    }
     /* STARTTIMER */ sub_1927( ref l_U588[2]._fU0 );
    ISEQ_START( -1750685803 );
    ISEQ_START( 1772865089 );
    ISEQ_START( -822154135 );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() ))) AND (NOT (IS_PED_DEAD( g_U4321[2] ))))
    {
         /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2560( ref l_U652 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2671( 1, g_U4321[2], "M13_UFE_32_AVG", ref l_U652, 2, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2671( 0,  /* PLAYER_PED_ID */ sub_993(), "MAX", ref l_U652, 2, 0 );
         /* PLAY_SINGLE_SPEECH */ sub_2941( "SPOL_VIG04A", ref l_U652, 8, 1 );
    }
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_57968(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_45124( (uParam0^)[I] );
    }
    return;
}

/* P_HANDLE_VIG04_SHOOTING */ void sub_59305(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    char[64] cVar11;
    char[64] cVar27;

    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        if ((uParam1^))
        {
            if ( /* ISTIMERDONE */ sub_2293( uParam2 ))
            {
                SET_PED_SHOOTS_AT_COORD( (uParam0^), uParam5 );
                 /* CREATETIMER */ sub_1777( uParam2, GET_RANDOM_INT_IN_RANGE( uParam3, uParam4 ), 1, 0 );
                 /* STARTTIMER */ sub_1927( uParam2 );
            }
        }
        if ((NOT (uParam1^)) AND ((PED_GET_ACTION_INTENTION_STATUS( (uParam0^), 47 )) == 3))
        {
            StrCopy( ref cVar11, uParam8, 64 );
            ConcatString(ref cVar11, " can shoot!", 64);
             /* WRITESCRIPTLOG */ sub_495( "AT", ref cVar11, 0 );
            (uParam1^) = 1;
        }
        else if (((uParam1^)) AND ((PED_GET_ACTION_INTENTION_STATUS( (uParam0^), 47 )) == 1))
        {
            StrCopy( ref cVar27, uParam8, 64 );
            ConcatString(ref cVar27, " cannot shoot!", 64);
             /* WRITESCRIPTLOG */ sub_495( "AT", ref cVar27, 0 );
            (uParam1^) = 0;
        }
    }
    return;
}

/* F_ARE_VIG04_UFE_AWARE_OF_PLAYER */ int sub_59761()
{
    if ( /* F_IS_PED_AWARE_OF_PED */ sub_53537( ref g_U4321[0],  /* PLAYER_PED_ID */ sub_993(), 1, 1, 1, 1, 1 ))
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "VIG04A_UFE1 is aware of the player!", 0 );
        return 1;
    }
    if ( /* F_IS_PED_AWARE_OF_PED */ sub_53537( ref g_U4321[1],  /* PLAYER_PED_ID */ sub_993(), 1, 1, 1, 1, 1 ))
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "VIG04A_UFE2 is aware of the player!", 0 );
        return 1;
    }
    if ( /* F_IS_PED_AWARE_OF_PED */ sub_53537( ref g_U4321[2],  /* PLAYER_PED_ID */ sub_993(), 1, 1, 1, 1, 1 ))
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "VIG04B_UFE is aware of the player!", 0 );
        return 1;
    }
    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4311 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "All the rioters died! Alerting UFE!", 0 );
        return 1;
    }
    if (((ISEQ_QUERY_STATE( 1772865089, 5 )) || (ISEQ_QUERY_STATE( 1772865089, 6 ))) || ((ISEQ_QUERY_STATE( -1750685803, 5 )) || (ISEQ_QUERY_STATE( -1750685803, 6 ))))
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "Sequence complete! Alerting UFE!", 0 );
        return 1;
    }
    return 0;
}

/* F_ARE_ANY_RIOTERS_VISIBLE */ int sub_60594()
{
    int I;

    for ( I = 0; I < g_U4311; I++ )
    {
        if (NOT (IS_PED_DEAD( g_U4311[I] )))
        {
            if (IS_PED_ON_SCREEN( g_U4311[I], 0 ))
            {
                 /* WRITESCRIPTLOG */ sub_495( "AT", "Rioter is on screen!", 0 );
                l_U625[I]++;
            }
            else
            {
                l_U625[I] = 0;
            }
            if (l_U625[I] > 45)
            {
                 /* WRITESCRIPTLOG */ sub_495( "AT", "Rioter has been on screen long enough!", 0 );
                return 1;
            }
        }
    }
    return 0;
}

/* F_ARE_ANY_PEDS_RETREATING */ int sub_60868()
{
    int I;

    for ( I = 0; I < 3; I++ )
    {
        if (NOT (IS_PED_DEAD( g_U4311[I] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( g_U4311[I], 48 )) == 3)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_FORCE_VIG04C_RIOTERS_TO_RETREAT */ void sub_61029()
{
    int I;

     /* P_CLOSEDOOR */ sub_43567( ref g_U3827, 0 );
     /* P_CLOSEDOOR */ sub_43567( ref g_U3834, 0 );
     /* P_SETDOORAUTOCLOSE */ sub_61100( ref g_U3827, 1 );
     /* P_SETDOORAUTOCLOSE */ sub_61100( ref g_U3834, 1 );
    for ( I = 0; I < 3; I++ )
    {
        if (NOT (IS_PED_DEAD( g_U4311[I] )))
        {
            if (I == 0)
            {
                if (NOT (IS_PED_DEAD( g_U4311[I] )))
                {
                     /* P_KILL_PED */ sub_61264( g_U4311[I] );
                }
            }
            else
            {
                 /* TELEPORTPED */ sub_9607( g_U4311[I], l_U483[I]._fU0, l_U483[I]._fU12 );
                PED_FINISH_ACTION_INTENTION( g_U4311[I], 47 );
                PED_SET_ACTION_INTENTION( g_U4311[I], 56, 2000, 0.00000000, 0.00000000, 0.00000000 );
                SET_PED_RELATIONSHIP_GROUP( g_U4311[I], 0 );
                l_U588[I]._fU44 = 0;
            }
            if (I == 1)
            {
                SET_PED_DUCKING( g_U4311[I], 1 );
            }
        }
    }
    return;
}

/* P_SETDOORAUTOCLOSE */ void sub_61100(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_43593( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_43677( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_KILL_PED */ void sub_61264(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* P_REMOVE_TETHERS_FROM_PED_ARRAY */ void sub_61592(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_REMOVEALLTETHERSFROMPED */ sub_56262( (uParam0^)[I] );
    }
    return;
}

/* P_HANDLE_RIOTER_2_VAULTING */ void sub_61687()
{
    if (NOT (IS_PED_DEAD( g_U4311[1] )))
    {
        if (NOT l_U629)
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( g_U4311[1], 49 )) == 3)
            {
                 /* WRITESCRIPTLOG */ sub_495( "AT", "Turning off rioter 2's collision!", 0 );
                SET_PED_COLLISION( g_U4311[1], 0 );
                l_U629 = 1;
            }
        }
        else if ((PED_GET_ACTION_INTENTION_STATUS( g_U4311[1], 49 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_495( "AT", "Turning back on rioter 2's collision!", 0 );
            SET_PED_COLLISION( g_U4311[1], 1 );
            PED_FINISH_ACTION_INTENTION( g_U4311[1], 49 );
        }
        if (NOT l_U630)
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( g_U4311[1], 50 )) == 3)
            {
                 /* WRITESCRIPTLOG */ sub_495( "AT", "Smashing glass!", 0 );
                SMASH_GLASS_IN_RADIUS( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( g_U4311[1] ), 0.25000000, 1.00000000 );
                l_U630 = 1;
            }
        }
    }
    return;
}

/* P_HANDLE_RIOTER_DEATH */ void sub_62078()
{
    int I;
    int J;

    if ((NOT l_U523[1]._fU20) AND ( /* F_ISPEDINTRIGGERBOX */ sub_49587( g_U4311[1], l_U744 )))
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "Starting VIG04C_RIOTER2 death timer.", 0 );
         /* STARTTIMER */ sub_1927( ref l_U523[1] );
        for ( I = 0; I < 2; I++ )
        {
            if (NOT (IS_PED_DEAD( g_U4308[I] )))
            {
                REGISTER_TARGET( g_U4308[I], g_U4311[1] );
                TASK_SHOOT_AT_PED( g_U4308[I], g_U4311[1], 1000, -256437761, 0, 0, 0 );
            }
        }
    }
    if ( /* ISTIMERDONE */ sub_2293( ref l_U523[1] ))
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "Killing VIG04C_RIOTER2.", 0 );
         /* P_ADD_GORE_TO_RIOTER */ sub_62380( g_U4311[1], 5169, 1 );
         /* P_ADD_GORE_TO_RIOTER */ sub_62380( g_U4311[1], 65488, 1 );
         /* P_ADD_GORE_TO_RIOTER */ sub_62380( g_U4311[1], 3228, 1 );
         /* P_KILL_PED */ sub_61264( g_U4311[1] );
    }
    if ((NOT l_U523[2]._fU20) AND ( /* F_ISPEDINTRIGGERBOX */ sub_49587( g_U4311[2], l_U744 )))
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "Starting VIG04C_RIOTER3 death timer.", 0 );
         /* STARTTIMER */ sub_1927( ref l_U523[2] );
        for ( J = 0; J < 2; J++ )
        {
            if (NOT (IS_PED_DEAD( g_U4308[J] )))
            {
                REGISTER_TARGET( g_U4308[J], g_U4311[2] );
                TASK_SHOOT_AT_PED( g_U4308[J], g_U4311[2], 1000, -256437761, 0, 0, 0 );
            }
        }
    }
    if ( /* ISTIMERDONE */ sub_2293( ref l_U523[2] ))
    {
         /* WRITESCRIPTLOG */ sub_495( "AT", "Killing VIG04C_RIOTER3.", 0 );
         /* P_ADD_GORE_TO_RIOTER */ sub_62380( g_U4311[2], 3228, 1 );
         /* P_ADD_GORE_TO_RIOTER */ sub_62380( g_U4311[2], 65488, 1 );
         /* P_ADD_GORE_TO_RIOTER */ sub_62380( g_U4311[2], 35232, 1 );
         /* P_KILL_PED */ sub_61264( g_U4311[2] );
    }
    return;
}

/* P_ADD_GORE_TO_RIOTER */ void sub_62380(unknown uParam0, unknown uParam1, int iParam2)
{
    int I;

    if (DOES_PED_EXIST( uParam0 ))
    {
        START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE( "Blood_headsoup_S_01", uParam0, 0, 0, 0, 0, 0, 0, uParam1, 1065353216 );
    }
    I = 0;
    if ((DOES_PED_EXIST( uParam0 )) == 1)
    {
        for ( I = 0; I < iParam2; I++ )
        {
            DAMAGE_DECALS_ON_PED( uParam0, 1.00000000 );
        }
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_ASSET_LOADED */ int sub_63144(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB]### The ANIM_DICT is loaded: {} ###", 1, 1281, ref (uParam1^)[I]._fU0 );
                return 1;
            }
        }
    }
    return 0;
}

/* F_ISPLAYERINTRIGGERREGION */ void sub_63445(int iParam0, unknown uParam1)
{
    int Result;
    int I;
    int J;

    Result = 0;
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() )))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            if ( /* F_ISPLAYERINTRIGGERBOX */ sub_55974( iParam0->_fU0[I] ))
            {
                Result = 1;
            }
        }
    }
    if ((uParam1) AND (Result))
    {
        for ( J = 0; J < iParam0->_fU508; J++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[J]._fU0, 0 );
        }
    }
    iParam0->_fU548 = 1;
    return Result;
}

/* P_LRG_CREATE_ATRIUM_PEDS */ void sub_63742()
{
    switch (l_U704)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_AtriumEnemySpawn = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_37165( ref l_U733, 1056964608, 0 );
        l_U705 = 0;
        l_U704 = 2;
         /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_AtriumEnemySpawn = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        g_U4308[l_U705] =  /* CREATEPED */ sub_37637( ref l_U706[l_U705] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_38613( g_U4308[l_U705], ref l_U733 );
        if (NOT (IS_PED_DEAD( g_U4308[l_U705] )))
        {
            if (l_U705 < 2)
            {
                SET_ROOM_FOR_PED_BY_NAME( g_U4308[l_U705], "f2_lobby_Office02" );
            }
            else
            {
                SET_ROOM_FOR_PED_BY_NAME( g_U4308[l_U705], ref g_U3357 );
                SET_PED_PATH_CAN_AVOID_LINE_OF_FIRE( g_U4308[l_U705], 0 );
                SET_PED_CAN_AVOID_DEATH_ZONES( g_U4308[l_U705], 0 );
            }
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4308[l_U705], 1 );
        }
        l_U705++;
        if (l_U705 >= 2)
        {
            l_U704 = 3;
             /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_AtriumEnemySpawn = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U733._fU0, 1 );
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_40114( ref g_U4308, "pi_LRG_AtriumEnemy" );
         /* F_GIVEPEDWEAPON */ sub_12457( g_U4308[0], -862236369, 25000, 0, 0 );
         /* F_GIVEPEDWEAPON */ sub_12457( g_U4308[1], -862236369, 25000, 0, 0 );
         /* P_TETHERPED */ sub_39740( ref l_U741, g_U4308[1], 1 );
         /* P_DEACTIVATEPEDARRAY */ sub_41113( ref g_U4308 );
        l_U704 = 4;
         /* WRITESCRIPTLOG */ sub_495( "GA", "e_LRG_AtriumEnemySpawn = ENTITY_STATE_COMPLETE", 0 );
        break;
    }
    return;
}

/* F_GETDOOROPENRATIO */ void sub_64515(int iParam0)
{
    int iVar3;
    float Result;

    if (( /* F_DOESDOOREXIST */ sub_43593( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_43677( iParam0 );
    }
    iVar3 = 0;
    Result = 0.00000000;
    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar3, ref Result );
    return Result;
}

/* P_LRG_ATRIUM_ENEMIES_SPOT_PLAYER */ void sub_64799()
{
    int I;

     /* WRITESCRIPTLOG */ sub_495( "GA", "P_LRG_ATRIUM_ENEMIES_SPOT_PLAYER start", 0 );
    for ( I = 0; I <= 1; I++ )
    {
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_993() ))) AND (NOT (IS_PED_DEAD( g_U4308[I] ))))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4308[I], 0 );
            REGISTER_TARGET( g_U4308[I],  /* PLAYER_PED_ID */ sub_993() );
            TASK_COMBAT_PED( g_U4308[I],  /* PLAYER_PED_ID */ sub_993() );
        }
    }
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_LRG_ATRIUM_ENEMIES_SPOT_PLAYER end", 0 );
    return;
}

/* F_IS_DOOR_CLOSED */ int sub_65186(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, float fParam7)
{
    if ((ABSF(  /* F_GETDOOROPENRATIO */ sub_64515( ref uParam0 ) )) < fParam7)
    {
        return 1;
        break;
    }
    return 0;
}

/* F_LRG_NUM_LIVING_ENEMIES_IN_ATRIUM */ void sub_65272()
{
    int Result;
    int I;

    Result =  /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( ref g_U4308 );
    for ( I = 0; I <= 4; I++ )
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_49587( g_U4315[I], l_U765 ))
        {
            Result++;
        }
    }
    for ( I = 0; I <= 2; I++ )
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_49587( g_U4321[I], l_U765 ))
        {
            Result++;
        }
    }
    return Result;
}

/* P_LRG_DELETE_ENEMIES_NOT_IN_ATRIUM */ void sub_65456()
{
    int I;

     /* WRITESCRIPTLOG */ sub_495( "GA", "P_LRG_DELETE_ENEMIES_NOT_IN_ATRIUM start", 0 );
    for ( I = 0; I <= 4; I++ )
    {
        if ((NOT ( /* F_ISPEDINTRIGGERBOX */ sub_49587( g_U4315[I], l_U765 ))) AND (NOT (IS_PED_DEAD( g_U4315[I] ))))
        {
             /* CLEANPED */ sub_7733( g_U4315[I] );
        }
    }
    for ( I = 0; I <= 2; I++ )
    {
        if ((NOT ( /* F_ISPEDINTRIGGERBOX */ sub_49587( g_U4321[I], l_U765 ))) AND (NOT (IS_PED_DEAD( g_U4321[I] ))))
        {
             /* CLEANPED */ sub_7733( g_U4321[I] );
        }
    }
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_LRG_DELETE_ENEMIES_NOT_IN_ATRIUM end", 0 );
    return;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_65853(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55121( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_RELEASE_LRG_ASSETS */ void sub_67138()
{
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_RELEASE_LRG_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_67220( -1257962541, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_67220( -1514674887, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_67220( 743953242, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_67220( -1674641852, ref g_U2468 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_67718( ref l_U208, ref g_U2468 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_67823( ref l_U215, ref g_U2613 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_68269( "LEVEL_S_POLICE_CP_05", ref g_U2741 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_68269( ref g_U3553, ref g_U2741 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_68269( "EXPL_CAM", ref g_U2741 );
     /* WRITESCRIPTLOG */ sub_495( "GA", "P_RELEASE_LRG_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_67220(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6589( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_67718(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_67220( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_67823(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_67897( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_67897(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6589( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_68269(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6589( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

