void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U74 = 0;
    l_U75 = 0;
    l_U76 = 1500;
    l_U87 = 0;
    l_U167 = "PED_DEF";
    l_U209 = 1.00000000;
    l_U221 = 0;
    l_U262 = 0;
    l_U291 = 12;
    l_U338 = 0;
    l_U340 = 0;
    l_U341 = 0;
    l_U599 = 2330;
    l_U639 = 0;
    l_U672 = 0;
    l_U708 = -1;
    l_U841 = {1033.29000000, -44.77000000, 7.80000000};
     /* WRITESCRIPTLOG */ sub_467( "AT", "Script s_police_firingRange.sc is starting up...", 0 );
     /* P_SETUP_ASSET_ARRAYS */ sub_585();
    l_U338 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_692();
        if (l_U341 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_12789();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_FIRINGRANGE */ sub_5992();
     /* P_RELEASE_FIRINGRANGE_ASSETS */ sub_46975();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_police_firingRange" );
     /* WRITESCRIPTLOG */ sub_467( "AT", "Script s_police_firingRange.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_467(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_SETUP_ASSET_ARRAYS */ void sub_585()
{
     /* WRITESCRIPTLOG */ sub_467( "AT", "P_SETUP_ASSET_ARRAYS", 0 );
    l_U839[0] = -893441735;
    return;
}

/* P_HANDLE_FAILURE */ void sub_692()
{
    if (g_U821 == 16)
    {
        switch (l_U341)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_894()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() )))
            {
                l_U341 = 1;
                 /* WRITESCRIPTLOG */ sub_467( "AT", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
             /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1413( 1 );
            if ( /* IS_RESTART_ACTIVE */ sub_4504())
            {
                l_U341 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_4564( 0 )) == 1)
            {
                l_U341 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() )))
            {
                l_U341 = 3;
                 /* WRITESCRIPTLOG */ sub_467( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_467( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_831() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_831(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_793() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_793(), 0 );
                }
            }
            if ((g_U862[17]._fU40 != 4) AND (g_U862[17]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_467( "CR", "Shutting down script for MCE_FINAL_FLOOR.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_5874( ref g_U862[17] );
                SET_EXITFLAG_FOR_SCRIPT( g_U862[17]._fU32 );
            }
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            AUDIO_MUSIC_STOP_ONESHOT();
             /* P_CLEANUP_FIRINGRANGE */ sub_5992();
             /* P_FORCE_SCENE_TO_LOAD */ sub_7665( 16 );
            l_U341 = 4;
             /* WRITESCRIPTLOG */ sub_467( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_467( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_8099( ref l_U302,  /* PLAYER_PED_ID */ sub_793() );
            SET_HELPER_TRACKING_MODE( 1 );
            l_U340 = 1;
            l_U341 = 5;
             /* WRITESCRIPTLOG */ sub_467( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_467( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U338 = 1;
            l_U341 = 0;
             /* WRITESCRIPTLOG */ sub_467( "AT", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_793()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_831() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_831()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_894()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_793(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_831(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_831(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_793() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_793(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ void sub_1413(boolean bParam0)
{
    int iVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() )))
    {
        if (NOT (IS_PED_IN_COMBAT(  /* PLAYER_PED_ID */ sub_793() )))
        {
            if ((NOT l_U282._fU16) AND (NOT l_U282._fU20))
            {
                 /* WRITESCRIPTLOG */ sub_467( "AT", "Starting painkiller dialogue timer.", 0 );
                 /* CREATETIMER */ sub_1577( ref l_U282, 3500, 1, 0 );
                 /* STARTTIMER */ sub_1727( ref l_U282 );
            }
            if ((l_U282._fU16) AND ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_1856()))
            {
                 /* WRITESCRIPTLOG */ sub_467( "AT", "Dialogue detected. Restarting painkiller dialogue timer.", 0 );
                 /* CREATETIMER */ sub_1577( ref l_U282, 3500, 1, 0 );
                 /* STARTTIMER */ sub_1727( ref l_U282 );
            }
            iVar3 = GET_PAYNEKILLER_AMT();
            if (iVar3 > l_U291)
            {
                if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_1856()))
                {
                    if ((l_U282._fU16) || ( /* ISTIMERDONE */ sub_2093( ref l_U282 )))
                    {
                        if (g_U4303 < 6)
                        {
                            if ((GET_RANDOM_INT_IN_RANGE( 0, 500 )) < 300)
                            {
                                 /* WRITESCRIPTLOG */ sub_467( "GA", "Playing painkiller monologue.", 0 );
                                 /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2360( ref l_U292 );
                                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2471( 0,  /* PLAYER_PED_ID */ sub_793(), "MAX", ref l_U292, 2, 0 );
                                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2471( 1,  /* PLAYER_PED_ID */ sub_793(), "MAX", ref l_U292, 2, 0 );
                                 /* PLAY_SINGLE_SPEECH */ sub_2741( "SPOL_PLFNDPL", ref l_U292, 8, 1 );
                                g_U4303++;
                            }
                            else
                            {
                                 /* WRITESCRIPTLOG */ sub_467( "GA", "Not playing painkiller speech, failed random chance test.", 0 );
                            }
                        }
                        else
                        {
                             /* WRITESCRIPTLOG */ sub_467( "GA", "Not Playing painkiller speech, already played all 6 lines.", 0 );
                        }
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_467( "GA", "Not playing painkiller speech, not long enough since last dialogue.", 0 );
                    }
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_467( "GA", "Not playing painkiller speech, another speech is currently playing.", 0 );
                }
            }
            l_U291 = iVar3;
        }
        if ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_3989( l_U292 ))
        {
            if (NOT HAS_CUTSCENE_FINISHED())
            {
                 /* WRITESCRIPTLOG */ sub_467( "GA", "Killing painkiller speech for cutscene playing.", 0 );
                 /* KILL_SPEECH */ sub_4291( ref l_U292, 0 );
            }
        }
    }
    if (bParam0)
    {
         /* CREATETIMER */ sub_1577( ref l_U282, 20000, 1, 0 );
         /* STARTTIMER */ sub_1727( ref l_U282 );
    }
    return;
}

/* CREATETIMER */ void sub_1577(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_1727(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* IS_ANY_SPEECH_CURRENTLY_PLAYING */ void sub_1856()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

/* ISTIMERDONE */ int sub_2093(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_2360(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_2471(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_2741(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_2786( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_2786(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_2873( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_2873(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_2925( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_3443( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_2925(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_3443(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_3989(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_4032( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_4032(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* KILL_SPEECH */ void sub_4291(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_4032( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

/* IS_RESTART_ACTIVE */ void sub_4504()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_4564(int iParam0)
{
    iParam0 = 1;
    switch (l_U75)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_4646( ref l_U77 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() )))
            {
                l_U76 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1577( ref l_U77, l_U76, 1, 1 );
             /* STARTTIMER */ sub_1727( ref l_U77 );
        }
        if ( /* ISTIMERDONE */ sub_2093( ref l_U77 ))
        {
             /* WRITESCRIPTLOG */ sub_467( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_831() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_831(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U75 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U75 = 2;
            }
            else
            {
                l_U75 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_467( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_5129();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_467( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_5129();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_4646(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_5129()
{
     /* WRITESCRIPTLOG */ sub_467( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_5204( ref l_U77 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_831() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_831(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U74 = 0;
    l_U74 = l_U74;
    l_U75 = 0;
    return;
}

/* RESETTIMER */ void sub_5204(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_5874(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_FIRINGRANGE */ void sub_5992()
{
     /* WRITESCRIPTLOG */ sub_467( "AT", "P_CLEANUP_FIRINGRANGE", 0 );
     /* P_STOP_DOOR_ALL_CLEAR_SFX */ sub_6061();
     /* CLEANPLACEMENTARRAY */ sub_6214( ref l_U793 );
    SET_HELPER_TRACKING_MODE( 0 );
     /* CLEANPLACEMENT */ sub_6269( g_U739._fU0 );
    ISEQ_TERMINATE( 879508723 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6389( 879508723, ref g_U2662 );
    ISEQ_TERMINATE( 1691769945 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6389( 1691769945, ref g_U2662 );
     /* CLEANPEDARRAY */ sub_7482( ref l_U575 );
     /* CLEANPED */ sub_7532( l_U653 );
     /* CLEANPED */ sub_7532( l_U707 );
    return;
}

/* P_STOP_DOOR_ALL_CLEAR_SFX */ void sub_6061()
{
    if (l_U708 != -1)
    {
        STOP_SOUND( l_U708, 0 );
        RELEASE_SOUND_ID( l_U708 );
        l_U708 = -1;
         /* WRITESCRIPTLOG */ sub_467( "AT", "Stopping and releasing FIRING_RANGE_ALL_CLEAR!", 0 );
    }
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_6214(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_6269( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_6269(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_6389(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6527( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_6527(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* CLEANPEDARRAY */ void sub_7482(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_7532( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_7532(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* P_FORCE_SCENE_TO_LOAD */ void sub_7665(unknown uParam0)
{
    char[64] cVar3;
    unknown uVar19;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() )))
    {
         /* TELEPORTPED */ sub_7741(  /* PLAYER_PED_ID */ sub_793(), g_U2953[uParam0], g_U3083[uParam0] );
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_793(), 1 );
        if (NOT (IS_STRING_NULL( ref g_U1091[uParam0]._fU0 )))
        {
            StrCopy( ref cVar3, "Loading room: ", 64 );
            ConcatString(ref cVar3, ref g_U1091[uParam0]._fU0, 64);
            PRINTSTRING( ref cVar3 );
            PRINTNL();
            uVar19 = GET_INTERIOR_FROM_NAME( ref g_U1091[uParam0]._fU64, 0 );
            SET_INTERIOR_ACTIVE( uVar19, 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( uVar19, GET_HASH_KEY( ref g_U1091[uParam0]._fU0 ) );
        }
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_793(), 0 );
    }
    return;
}

/* TELEPORTPED */ void sub_7741(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_8099(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_467( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_8318( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_9482( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9796( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10275( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9796( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10275( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9796( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10275( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_10591( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10275( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_10591( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10275( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_11163( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_11365( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_793(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_467( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_8318(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_8380( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_8380(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_9482(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_9796(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_10200( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_10200(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_10275(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_10591(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_10200( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_11163(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_11365(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_8380( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_11463( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_11463(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_12789()
{
    int iVar2;
    int I;

    iVar2 = l_U338;
    switch (l_U338)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_13003();
         /* P_SET_STATIC_DATA */ sub_14082();
         /* P_CREATE_FIRING_RANGE_PLACEMENTS */ sub_16067();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U338 = 2;
         /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_FIRINGRANGE_PERSISTENT_ASSETS */ sub_17440();
         /* P_REQUEST_FIRINGRANGE_NONPERSISTENT_ASSETS */ sub_24699();
        l_U338 = 3;
         /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_28978( ref g_U2662 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_28576( ref g_U2613 )) AND (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_28202( ref g_U2889 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_27805( ref g_U2468 )))))
        {
            g_U822[16] = 1;
            if ((NOT l_U302._fU0) AND (g_U820 == 16))
            {
                 /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
                l_U338 = 4;
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
                l_U338 = 6;
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        l_U340 = 1;
        if (NOT ( /* HAS_SAVEFILE_LOADED */ sub_29625( ref l_U302 )))
        {
             /* F_GIVEPEDWEAPON */ sub_10591(  /* PLAYER_PED_ID */ sub_793(), 57534114, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9796(  /* PLAYER_PED_ID */ sub_793(), -862236369, 0, 200, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9796(  /* PLAYER_PED_ID */ sub_793(), -862236369, 1, 200, 0 );
            SET_PAYNEKILLER_AMT( 7 );
             /* TELEPORTPED */ sub_7741(  /* PLAYER_PED_ID */ sub_793(), g_U2953[16], g_U3083[16] );
            l_U338 = 5;
             /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U338 = 6;
             /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_793(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_793(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_793(), 0, 0 ) ))))
            {
                g_U821 = 16;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_30210( ref l_U302, g_U821,  /* PLAYER_PED_ID */ sub_793(), g_U2953[16], g_U3083[16], g_U3127[16], g_U3171[16], 1 );
                l_U338 = 6;
                 /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
            }
        }
        break;
        case 6:
        if (l_U339)
        {
            l_U468 = 1;
        }
        if ( /* F_SETUP_FIRING_RANGE_ENEMIES */ sub_34887())
        {
            l_U338 = 7;
             /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        break;
        case 7:
        if ( /* F_ISPLAYERINTRIGGERBOX */ sub_37705( l_U342 ))
        {
             /* P_ACTIVATE_WAVE1 */ sub_37833();
             /* P_ACTIVATE_WAVE2 */ sub_38670();
            l_U338 = 8;
             /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_START_SHOOTING_RANGE_COMBAT", 0 );
        }
        break;
        case 8:
        if (l_U340)
        {
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_831() )))
            {
                SNAP_PLAYER_TO_COVERPOINT(  /* PLAYER_ID */ sub_831(), "GenCover", "5FBC25E3_673F1030_Corner2", 0 );
                DO_SCREEN_FADE_IN( 0 );
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_831(), 1, 0 );
                SET_HELPER_TRACKING_MODE( 0 );
                if (IS_DEATH_PANEL_WIPE_ALLOWED())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
            }
             /* WRITESCRIPTLOG */ sub_467( "AT", "Setting music. TRACK: PRECINCT_FINAL MOOD: PRECINCT_01_4_5", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_4_5", "", 0, 1000, 10000, -1082130432, 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_467( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_4_5_6", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_4_5", "", 0, 1000, 10000, -1082130432, 0 );
        }
        if (g_U821 != 16)
        {
            g_U821 = 16;
             /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_30210( ref l_U302, g_U821,  /* PLAYER_PED_ID */ sub_793(), g_U2953[16], g_U3083[16], g_U3127[16], g_U3171[16], 1 );
        }
         /* P_PLAY_DOOR_ALL_CLEAR_SFX */ sub_39754();
         /* STARTTIMER */ sub_1727( ref l_U709 );
        l_U338 = 9;
         /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_HANDLE_SHOOTING_RANGE_COMBAT", 0 );
        break;
        case 9:
        if ( /* ISTIMERDONE */ sub_2093( ref l_U709 ))
        {
             /* P_STOP_ALL_CLEAR_SFX */ sub_40000();
        }
        if ( /* ISTIMERDONE */ sub_2093( ref l_U600 ))
        {
             /* P_UNLOCK_FIRST_HALF_WAVE1 */ sub_40153();
        }
        if ( /* ISTIMERDONE */ sub_2093( ref l_U609 ))
        {
             /* P_UNLOCK_SECOND_HALF_WAVE1 */ sub_40378();
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_40530( ref l_U405, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_467( "RJM", "Bullet proofing, but this might be very bad!", 0 );
             /* DISABLETIMER */ sub_40728( ref l_U600 );
             /* DISABLETIMER */ sub_40728( ref l_U609 );
            for ( I = 0; I <= (l_U575 - 1); I++ )
            {
                if ( /* IS_PED_VALID */ sub_37982( l_U575[I] ))
                {
                    if (I == 0)
                    {
                        SET_PED_FLAG_FIRE_UNTIL_EMPTY_IN_COVER( l_U575[I], 0 );
                        SET_PED_FLAG_FORCE_LEANFIRE_IN_COVER( l_U575[I], 0 );
                    }
                    SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U575[I], 0 );
                    SET_PED_FLAG_LOCK_TO_COVER( l_U575[I], 0 );
                }
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_40530( ref l_U363, 0 ))
        {
             /* P_CLOSEDOOR */ sub_40927( ref g_U4009, 0 );
            DOOR_FIND_CLOSEST_SET_FORCE_CLOSE( g_U4009._fU0, g_U4009._fU4, 1, 0 );
        }
        if ((NOT l_U639) AND ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_41105( ref l_U575 )) <= 5) || ( /* F_ISPLAYERINTRIGGERBOX */ sub_37705( l_U618 ))))
        {
             /* WRITESCRIPTLOG */ sub_467( "AT", "Mobilizing rear guard and dealing with the door.", 0 );
             /* P_SETDOORAUTOCLOSE */ sub_13720( ref g_U4149, 1 );
             /* P_SETDOORAUTOCLOSE */ sub_13720( ref g_U4156, 1 );
            DOOR_FIND_CLOSEST_SET_FORCE_CLOSE( g_U4149._fU0, g_U4149._fU4, 1, 0 );
            DOOR_FIND_CLOSEST_SET_FORCE_CLOSE( g_U4156._fU0, g_U4156._fU4, 1, 0 );
             /* P_CLOSEDOOR */ sub_40927( ref g_U4149, 0 );
             /* P_CLOSEDOOR */ sub_40927( ref g_U4156, 0 );
             /* STARTTIMER */ sub_1727( ref l_U760 );
            l_U639 = 1;
        }
        if ( /* ISTIMERDONE */ sub_2093( ref l_U760 ))
        {
            if (NOT ( /* F_GET_IS_DOOR_CLOSED_OR_LOCKED */ sub_41419( g_U4149, 1 )))
            {
                 /* WRITESCRIPTLOG */ sub_467( "AT", "Locking rear left door.", 0 );
                 /* P_SETDOORLATCH */ sub_13629( ref g_U4149, 0 );
                 /* P_SETDOORAUTOCLOSE */ sub_13720( ref g_U4149, 1 );
                 /* P_SETDOORFORCECLOSE */ sub_41606( ref g_U4149, 1, 0 );
                 /* P_CLOSEDOOR */ sub_40927( ref g_U4149, 0 );
            }
            if (NOT ( /* F_GET_IS_DOOR_CLOSED_OR_LOCKED */ sub_41419( g_U4156, 1 )))
            {
                 /* WRITESCRIPTLOG */ sub_467( "AT", "Locking rear right door.", 0 );
                 /* P_SETDOORLATCH */ sub_13629( ref g_U4156, 0 );
                 /* P_SETDOORAUTOCLOSE */ sub_13720( ref g_U4156, 1 );
                 /* P_SETDOORFORCECLOSE */ sub_41606( ref g_U4156, 1, 0 );
                 /* P_CLOSEDOOR */ sub_40927( ref g_U4156, 0 );
            }
            for ( I = 0; I < l_U575; I++ )
            {
                if ( /* F_ISPEDINTRIGGERBOX */ sub_37748( l_U575[I], l_U739 ))
                {
                     /* WRITESCRIPTLOG */ sub_467( "AT", "Enemy is stuck. Cleaning ped.", 0 );
                     /* CLEANPED */ sub_7532( l_U575[I] );
                }
            }
        }
         /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_41909( ref l_U575 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_42088( ref l_U575, -1054867456, 0, 1 );
        if ((NOT l_U838) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_41105( ref l_U575 )) == 0))
        {
             /* WRITESCRIPTLOG */ sub_467( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_5, fade out over 9 seconds", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_5", "PRECINCT_01_5", 0, -1, 9000, -1082130432, 0 );
            l_U838 = 1;
        }
        if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_41105( ref l_U575 )) == 0))
        {
             /* P_CREATE_FINAL_ENEMY */ sub_42496();
             /* P_CREATE_WORKSHOP_ENEMY */ sub_42841();
             /* STARTTIMER */ sub_1727( ref l_U654 );
            l_U338 = 10;
             /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_SHOOTING_RANGE_POST_COMBAT", 0 );
        }
        break;
        case 10:
        if (NOT l_U672)
        {
            if ( /* F_SHOULD_FINAL_ENEMY_DEPLOY */ sub_43122())
            {
                if ( /* ISTIMERDONE */ sub_2093( ref l_U654 ))
                {
                     /* WRITESCRIPTLOG */ sub_467( "AT", "Unlocking doors.", 0 );
                     /* P_SETDOORLOCKED */ sub_13169( ref g_U4149, 0 );
                     /* P_SETDOORLOCKED */ sub_13169( ref g_U4156, 0 );
                     /* P_ACTIVATE_FINAL_ENEMY */ sub_43451();
                     /* WRITESCRIPTLOG */ sub_467( "GA", "Playing music one shot PRECINCT_ONESHOT_1", 0 );
                    AUDIO_MUSIC_PLAY_ONESHOT();
                     /* STARTTIMER */ sub_1727( ref l_U663 );
                    l_U672 = 1;
                    g_U862[17]._fU36 = 1;
                }
            }
        }
        else if ( /* ISTIMERDONE */ sub_2093( ref l_U663 ))
        {
             /* P_DIAL_SURRENDER */ sub_43821();
        }
        if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_44023( ref l_U771, l_U653, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_467( "AT", "Opening door.", 0 );
             /* P_SETDOORLATCH */ sub_13629( ref g_U4149, 1 );
             /* P_SETDOORLATCH */ sub_13629( ref g_U4156, 1 );
             /* P_OPENDOOR */ sub_13449( ref g_U4149, 0, 0, 1065353216 );
             /* P_OPENDOOR */ sub_13449( ref g_U4156, 1, 0, 1065353216 );
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_40530( ref l_U673, 0 ))
        {
            if ( /* F_CAN_AMBIENT_SPEECH_PLAY */ sub_44246())
            {
                if (NOT (IS_PED_DEAD( l_U653 )))
                {
                     /* P_SPEECH_PLAY_MONOLOGUE */ sub_44361( "SPOL_DSNKSUF", ref l_U809 );
                }
            }
             /* WRITESCRIPTLOG */ sub_467( "AT", "Final enemy is alive and offscreen. Cleaning him.", 0 );
             /* P_ACTIVATEPED */ sub_38107( l_U707 );
            if ((DOES_PED_EXIST( l_U707 )) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_831() )) == 0))
            {
                SET_PED_CAN_TRIGGER_BULLET_CAM( l_U707, 1 );
                REGISTER_TARGET( l_U707,  /* PLAYER_PED_ID */ sub_793() );
                SET_LOCKED_TARGET( l_U707,  /* PLAYER_PED_ID */ sub_793() );
                TASK_COMBAT_PED( l_U707,  /* PLAYER_PED_ID */ sub_793() );
            }
            l_U338 = 11;
             /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_REPAIR_SHOP", 0 );
        }
        break;
        case 11:
         /* P_HANDLE_IMAGEFX_STAIRS */ sub_44693();
        if (IS_PED_DEAD( l_U707 ))
        {
            if ((NOT l_U829._fU16) AND (NOT l_U829._fU20))
            {
                 /* STARTTIMER */ sub_1727( ref l_U829 );
                 /* TAKE_PAINKILLER_ARRAY_SNAPSHOT */ sub_46342( ref l_U793, ref l_U796 );
            }
             /* P_HANDLE_PAINKILLER_PICKUP_DIALOGUE */ sub_1413( 0 );
        }
        if (( /* F_CAN_AMBIENT_SPEECH_PLAY */ sub_44246()) AND (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_1856())))
        {
            if ( /* ISTIMERDONE */ sub_2093( ref l_U829 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_44361( "SPOL_BCKHLW", ref l_U819 );
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_40530( ref l_U384, 0 ))
        {
             /* P_SETDOORLOCKED */ sub_13169( ref g_U4149, 1 );
             /* P_SETDOORLOCKED */ sub_13169( ref g_U4156, 1 );
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_40530( ref l_U718, 0 ))
        {
            g_U842[17] = 1;
             /* KILL_SPEECH */ sub_4291( ref l_U819, 0 );
             /* KILL_SPEECH */ sub_4291( ref l_U809, 0 );
             /* KILL_SPEECH */ sub_4291( ref l_U799, 0 );
            PLAY_IMAGEFX( "CONTRAST_ZOOM_FAST_HARD", 4, 1 );
            l_U338 = 12;
             /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 12:
        if (g_U821 == 17)
        {
             /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_FINISHED", 0 );
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U338 = 0;
             /* WRITESCRIPTLOG */ sub_467( "AT", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U338 != iVar2)
    {
        l_U339 = 1;
    }
    else
    {
        l_U339 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_13003()
{
     /* WRITESCRIPTLOG */ sub_467( "AT", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U339 = 1;
    l_U708 = -1;
    l_U639 = 0;
    l_U672 = 0;
    l_U838 = 0;
     /* CREATETIMER */ sub_1577( ref l_U709, 2000, 1, 0 );
     /* CREATETIMER */ sub_1577( ref l_U760, 10000, 1, 0 );
     /* CREATETIMER */ sub_1577( ref l_U654, 1500, 1, 0 );
     /* CREATETIMER */ sub_1577( ref l_U663, 2200, 1, 0 );
     /* P_SETDOORLOCKED */ sub_13169( ref g_U4149, 0 );
     /* P_SETDOORLOCKED */ sub_13169( ref g_U4156, 0 );
     /* P_OPENDOOR */ sub_13449( ref g_U4156, 1, 1, 1065353216 );
     /* P_OPENDOOR */ sub_13449( ref g_U4149, 1, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_13629( ref g_U4149, 0 );
     /* P_SETDOORLATCH */ sub_13629( ref g_U4156, 0 );
     /* P_SETDOORAUTOCLOSE */ sub_13720( ref g_U4149, 0 );
     /* P_SETDOORAUTOCLOSE */ sub_13720( ref g_U4156, 0 );
     /* CREATETIMER */ sub_1577( ref l_U829, 3000, 1, 0 );
     /* P_SET_DOOR_NOT_AFFECTED_BY_BULLETS */ sub_13828( ref g_U4009 );
     /* P_SET_DOOR_NOT_AFFECTED_BY_BULLETS */ sub_13828( ref g_U4149 );
     /* P_SET_DOOR_NOT_AFFECTED_BY_BULLETS */ sub_13828( ref g_U4156 );
     /* CREATETIMER */ sub_1577( ref l_U600, 3000, 1, 0 );
     /* CREATETIMER */ sub_1577( ref l_U609, 3000, 1, 0 );
    l_U468 = 0;
    l_U469 = 0;
    return;
}

/* P_SETDOORLOCKED */ void sub_13169(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_13199( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_13283( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_13199(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_13283(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_OPENDOOR */ void sub_13449(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if (( /* F_DOESDOOREXIST */ sub_13199( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_13283( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

/* P_SETDOORLATCH */ void sub_13629(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_13199( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_13283( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_SETDOORAUTOCLOSE */ void sub_13720(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_13199( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_13283( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_SET_DOOR_NOT_AFFECTED_BY_BULLETS */ void sub_13828(int iParam0)
{
    unknown uVar3;

    uVar3 = DOOR_FIND_CLOSEST( iParam0->_fU0, iParam0->_fU4 );
    if (DOES_OBJECT_EXIST( uVar3 ))
    {
        DOOR_SET_IS_AFFECTED_BY_BULLETS( uVar3, 0 );
    }
    else
    {
        SCRIPT_ASSERT( "Tried to set a doorto be not affected by bullets but could not find door!", 0 );
    }
    return;
}

/* P_SET_STATIC_DATA */ void sub_14082()
{
     /* WRITESCRIPTLOG */ sub_467( "AT", "P_SET_STATIC_DATA", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14180( ref l_U470[0], 1021.60000000, -43.28000000, 7.80000000, 65446, -1966116049, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14180( ref l_U470[1], 1023.89000000, -47.38000000, 7.80000000, 65446, -1635333625, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14180( ref l_U470[2], 1019.45000000, -40.63000000, 7.80000000, -90.00000000, -1326496690, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14180( ref l_U470[3], 1019.45000000, -39.42000000, 7.80000000, -90.00000000, 835575742, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14180( ref l_U470[4], 1016.26000000, -43.66000000, 7.80000000, 180.00000000, 539682560, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14180( ref l_U470[5], 1016.27000000, -44.58000000, 7.80000000, -90.00000000, 202977358, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14180( ref l_U470[6], 1010.35000000, -41.76000000, 7.80000000, 65446, 614555232, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14180( ref l_U470[7], 1010.35000000, -40.12000000, 7.80000000, -112.50000000, 1036961553, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14180( ref l_U640, 1008.36400000, -34.39241000, 7.79724400, 222.17810000, -574496338, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14180( ref l_U694, 1020.95200000, -21.20250000, 7.80007700, 222.17810000, -1966116049, 7, 3, 2, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_14761( ref l_U618, "TB_WAVE2", 1021.74000000, -42.86000000, 7.68000000, 12.00000000, 5.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14761( ref l_U718, "TB_CUTSCENE_OUTER", 1017.42000000, -14.00000000, 11.00000000, 3.50000000, 3.20000000, 3.40000000, 0.00000000, 0.00000000, -180.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14761( ref l_U771, "TB_OPEN_DOOR", 1008.11000000, -36.01000000, 7.68000000, 2.00000000, 3.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14761( ref l_U739, "TB_DETECT_FAIL_DEPLOY", 1015.14000000, -33.71000000, 7.68000000, 6.00000000, 28.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14761( ref l_U673, "TB_CLEAN_SURRENDER_ENEMY", 1015.75000000, -34.23000000, 7.76000000, 5.00000000, 6.00000000, 3.00000000, 0.00000000, 0.00000000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14761( ref l_U342, "TB_START_FIRING_RANGE", 1034.83000000, -46.05000000, 7.68000000, 5.00000000, 4.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14761( ref l_U363, "TB_CLOSE_FRANGE_DOOR", 1034.83000000, -44.37000000, 7.68000000, 5.00000000, 4.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14761( ref l_U405, "TB_RESET_PEDFLAGS", 1028.68000000, -42.86000000, 7.68000000, 12.00000000, 5.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14761( ref l_U384, "TB_CLOSE_WORKSHOP_DOOR", 1021.96200000, -28.82364000, 7.80007700, 5.00000000, 4.00000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14761( ref l_U426, "TB_IMAGEFX_STAIRS01", 1020.97000000, -15.27600000, 7.60000000, 3.50000000, 3.20000000, 3.40000000, 0.00000000, 0.00000000, -180.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14761( ref l_U447, "TB_IMAGEFX_STAIRS02", 1019.19000000, -9.73000000, 9.63000000, 6.00000000, 3.20000000, 3.40000000, 0.00000000, 0.00000000, -180.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_15728( ref l_U769, "TETH_AWAY_FROM_DOOR1", 1008.90000000, -44.89000000, 7.68000000, 8.00000000, 5.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_15728( ref l_U770, "TETH_AWAY_FROM_DOOR2", 1023.75000000, -42.86000000, 7.68000000, 12.00000000, 26.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_15728( ref l_U792, "TETH_WORKSHOP", 1022.74100000, -26.19295000, 7.80007700, 18.00000000, 18.00000000, 3.50000000, 0.00000000, 0.00000000, -0.00000000, 1 );
    l_U590[0] = 1964270085;
    l_U590[1] = 434544317;
    l_U590[2] = 434544317;
    l_U590[3] = -862236369;
    l_U590[4] = 1964270085;
    l_U590[5] = 1964270085;
    l_U590[6] = 434544317;
    l_U590[7] = -862236369;
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_14180(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_14761(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_15728(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATE_FIRING_RANGE_PLACEMENTS */ void sub_16067()
{
    vector[4] vVar2;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    int I;

    array(ref vVar2, 4);
     /* P_CREATE_S_POL_GG_RP_03 */ sub_16116();
    vVar2[0] = {1028.99300000, -29.00700000, 9.24000000};
    vVar2[1] = {1028.95300000, -29.10700000, 9.40000000};
    vVar2[2] = {1028.95300000, -29.15700000, 9.24000000};
    vVar2[3] = {1028.94400000, -29.25400000, 9.24000000};
    for ( I = 0; I < l_U793; I++ )
    {
        l_U793[I] =  /* CREATEPLACEMENT */ sub_16765( -4072149, vVar2[I], 0, 0, 0, 1, 0, 0, 1119092736 );
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U793[I], "MloRoom_workshop" );
    }
    return;
}

/* P_CREATE_S_POL_GG_RP_03 */ void sub_16116()
{
     /* WRITESCRIPTLOG */ sub_467( "CO", "P_CREATE_S_POL_GG_RP_03", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_16255( ref g_U739, g_U816, 1030346995, -944657628, 1032.12000000, -47.72000000, 7.82000000, 1.50000000, 0.00000000, 5.00000000, "MloRoom_range" );
     /* P_CREATECOLLECTIBLE */ sub_16412( ref g_U739 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_16255(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_467( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_16412(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_467( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_16495( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_467( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_467( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_16495( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_6269( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_16765( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_467( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_467( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_16495(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* CREATEPLACEMENT */ void sub_16765(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_REQUEST_FIRINGRANGE_PERSISTENT_ASSETS */ void sub_17440()
{
     /* WRITESCRIPTLOG */ sub_467( "AT", "P_REQUEST_FIRINGRANGE_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_17559( ref l_U839, ref g_U2468 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_20481( ref g_U3537, ref g_U2889 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_20481( ref g_U3489, ref g_U2889 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_22397( 434544317, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_22397( 1964270085, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_22397( 1194438308, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_22397( -862236369, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_22397( 57534114, ref g_U2613 );
     /* LOADMODEL */ sub_24389( g_U816, 1 );
     /* WRITESCRIPTLOG */ sub_467( "AT", "P_REQUEST_FIRINGRANGE_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_17559(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_17632( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_17632(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_17699( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17957( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_17699(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17957( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17957( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17957( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19488( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17957( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17957( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_17957(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_18018( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_18018(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_19488(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_20481(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_20534( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20789( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_20534(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20789( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20789( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20789( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19488( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20789( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20789( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_20789(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_18018( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_22397(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_22451( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22712( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_22451(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22712( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22712( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22712( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19488( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22712( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22712( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_22712(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_18018( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* LOADMODEL */ void sub_24389(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_10200( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_REQUEST_FIRINGRANGE_NONPERSISTENT_ASSETS */ void sub_24699()
{
     /* WRITESCRIPTLOG */ sub_467( "AT", "P_REQUEST_FIRINGRANGE_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_24825( 879508723, ref g_U2662 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_24825( 1691769945, ref g_U2662 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "PRECINCT_ONESHOT_1", 0 );
     /* WRITESCRIPTLOG */ sub_467( "AT", "P_REQUEST_FIRINGRANGE_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_24825(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_24886( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25136( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_24886(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25136( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25136( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25136( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25136( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_19488( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_19488( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25136( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25136( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_25136(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_18018( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_27805(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_28202(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_28576(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_28978(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_29625(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_467( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_8099( uParam0,  /* PLAYER_PED_ID */ sub_793() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_30210(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_467( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_467( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_11365( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_30501( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_30978( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_30978( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_31238( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_30978( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_31238( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_31238( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_30978( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_31238( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_31238( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_31238( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_30978( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_31238( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_31238( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_31238( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_31238( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_32818( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_467( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_30501(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_8380( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_467( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_467( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_30978(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_31238(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_32818(int iParam0)
{
     /* WRITE_STRING */ sub_10200( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_32906( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_32983( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_32983( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_32983( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_32983( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_32983( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_33853( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU52 );
     /* WRITE_STRING */ sub_10200( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU96 );
     /* WRITE_STRING */ sub_10200( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU100 );
     /* WRITE_STRING */ sub_10200( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU104 );
     /* WRITE_STRING */ sub_10200( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU108 );
     /* WRITE_STRING */ sub_10200( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU112 );
     /* WRITE_STRING */ sub_10200( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU116 );
     /* WRITE_STRING */ sub_10200( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU120 );
     /* WRITE_STRING */ sub_10200( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU124 );
     /* WRITE_STRING */ sub_10200( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU128 );
     /* WRITE_STRING */ sub_10200( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_33152( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_33152( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_33152( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_32906(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_32983(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_33152(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_33853(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* F_SETUP_FIRING_RANGE_ENEMIES */ int sub_34887()
{
    switch (l_U468)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_467( "AT", "eSpawnFiringRange = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_35033( ref l_U584, 1056964608, 0 );
        l_U469 = 0;
        l_U468 = 2;
         /* WRITESCRIPTLOG */ sub_467( "AT", "eSpawnFiringRange = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        DISPLAYF( "Creating piFiringRange[{}]", 1, 513, l_U469 );
        l_U575[l_U469] =  /* CREATEPED */ sub_35546( ref l_U470[l_U469] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_36282( l_U575[l_U469], ref l_U584 );
         /* F_GIVEPEDWEAPON */ sub_10591( l_U575[l_U469], l_U590[l_U469], 25000, 0, 0 );
         /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9796( l_U575[l_U469], -862236369, 0, 25000, 0 );
        if (NOT (IS_PED_DEAD( l_U575[l_U469] )))
        {
            SET_PED_AI_TEMPLATE( l_U575[l_U469], "AIT_EXPERT" );
            SET_ROOM_FOR_PED_BY_NAME( l_U575[l_U469], "MloRoom_Range" );
        }
        l_U469++;
        if (l_U469 >= l_U575)
        {
            l_U468 = 3;
             /* WRITESCRIPTLOG */ sub_467( "AT", "eSpawnFiringRange = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U584._fU0, 1 );
        SET_GROUP_MAX_NUM_ADVANCING( l_U584._fU0, l_U575 );
        SET_PED_NAME_DEBUG( l_U575[0], "WAVE1" );
        SET_PED_NAME_DEBUG( l_U575[1], "WAVE1_1" );
        SET_PED_NAME_DEBUG( l_U575[2], "WAVE1_2" );
        SET_PED_NAME_DEBUG( l_U575[3], "WAVE1_3" );
        SET_PED_NAME_DEBUG( l_U575[4], "WAVE2" );
        SET_PED_NAME_DEBUG( l_U575[5], "WAVE2_1" );
        SET_PED_NAME_DEBUG( l_U575[6], "WAVE2_2" );
        SET_PED_NAME_DEBUG( l_U575[7], "WAVE2_3" );
         /* P_TETHERPEDARRAY */ sub_37160( ref l_U575, ref l_U769, 1 );
         /* P_TETHERPEDARRAY */ sub_37160( ref l_U575, ref l_U770, 1 );
         /* P_DEACTIVATEPEDARRAY */ sub_37356( ref l_U575 );
        l_U468 = 4;
         /* WRITESCRIPTLOG */ sub_467( "AT", "eSpawnFiringRange = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_35033(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* CREATEPED */ void sub_35546(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_24389( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_36037( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_36138( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_36037(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_36138(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_36282(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_10200( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_35033( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_35033( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_TETHERPEDARRAY */ void sub_37160(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
             /* P_TETHERPED */ sub_37234( uParam1, (uParam0^)[I], uParam2 );
        }
    }
    return;
}

/* P_TETHERPED */ void sub_37234(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_DEACTIVATEPEDARRAY */ void sub_37356(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_37410( (uParam0^)[I] );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_37410(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_37705(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_37748(  /* PLAYER_PED_ID */ sub_793(), uParam0 );
}

/* F_ISPEDINTRIGGERBOX */ int sub_37748(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_ACTIVATE_WAVE1 */ void sub_37833()
{
     /* WRITESCRIPTLOG */ sub_467( "RJM", "P_ACTIVATE_WAVE1", 0 );
     /* P_SETUP_WAVE1_ENEMY */ sub_37947( ref l_U575[0], "wave1", "GenCover", "5FBC25E3_EDE6685F_Corner2" );
     /* P_SETUP_WAVE1_ENEMY */ sub_37947( ref l_U575[1], "wave1_1", "GenCover", "5FBC25E3_99E9FD3_Corner1" );
     /* P_SETUP_WAVE1_ENEMY */ sub_37947( ref l_U575[2], "wave1_2", "GenCover", "5FBC25E3_DC2D39A6_Corner2" );
     /* P_SETUP_WAVE1_ENEMY */ sub_37947( ref l_U575[3], "wave1_3", "GenCover", "5FBC25E3_563BB90C_Corner1" );
    if ( /* IS_PED_VALID */ sub_37982( l_U575[0] ))
    {
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U575[0], 0 );
        SET_PED_FLAG_FIRE_UNTIL_EMPTY_IN_COVER( l_U575[0], 1 );
        SET_PED_FLAG_FORCE_LEANFIRE_IN_COVER( l_U575[0], 1 );
    }
     /* CREATETIMER */ sub_1577( ref l_U600, l_U599, 1, 0 );
     /* STARTTIMER */ sub_1727( ref l_U600 );
    ISEQ_START( 879508723 );
    return;
}

/* P_SETUP_WAVE1_ENEMY */ void sub_37947(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    if (( /* IS_MAX_VALID */ sub_38045()) AND ( /* IS_PED_VALID */ sub_37982( (uParam0^) )))
    {
         /* P_ACTIVATEPED */ sub_38107( (uParam0^) );
         /* P_SNAP_ENEMY_TO_COVER */ sub_38226( uParam0, uParam2, uParam3 );
        REGISTER_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_793() );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( (uParam0^), 1 );
        SET_PED_FLAG_LOCK_TO_COVER( (uParam0^), 1 );
        ISEQ_REGISTER_ENTITY( 879508723, uParam1, (uParam0^), 0 );
    }
    return;
}

/* IS_PED_VALID */ int sub_37982(unknown uParam0)
{
    if ((NOT (IS_PED_DEAD( uParam0 ))) AND (DOES_PED_EXIST( uParam0 )))
    {
        return 1;
    }
    return 0;
}

/* IS_MAX_VALID */ int sub_38045()
{
    if ( /* IS_PED_VALID */ sub_37982(  /* PLAYER_PED_ID */ sub_793() ))
    {
        return 1;
    }
    return 0;
}

/* P_ACTIVATEPED */ void sub_38107(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_SNAP_ENEMY_TO_COVER */ void sub_38226(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        TASK_COMBAT_SNAP_TO_COVER( (uParam0^), uParam1, uParam2, 0 );
    }
    return;
}

/* P_ACTIVATE_WAVE2 */ void sub_38670()
{
     /* WRITESCRIPTLOG */ sub_467( "RJM", "P_ACTIVATE_WAVE2", 0 );
     /* P_ACTIVATEPED */ sub_38107( l_U575[4] );
     /* P_ACTIVATEPED */ sub_38107( l_U575[5] );
     /* P_ACTIVATEPED */ sub_38107( l_U575[6] );
     /* P_ACTIVATEPED */ sub_38107( l_U575[7] );
     /* P_SNAP_ENEMY_TO_COVER */ sub_38226( ref l_U575[4], "GenCover", "5FBC25E3_8542971D_Corner1" );
     /* P_SNAP_ENEMY_TO_COVER */ sub_38226( ref l_U575[5], "GenCover", "5FBC25E3_299BDFCD_Corner2" );
     /* TELEPORTPED */ sub_7741( l_U575[6], l_U470[6]._fU0, l_U470[6]._fU12 );
     /* TELEPORTPED */ sub_7741( l_U575[7], l_U470[7]._fU0, l_U470[7]._fU12 );
    REGISTER_TARGET( l_U575[4],  /* PLAYER_PED_ID */ sub_793() );
    REGISTER_TARGET( l_U575[5],  /* PLAYER_PED_ID */ sub_793() );
    REGISTER_TARGET( l_U575[6],  /* PLAYER_PED_ID */ sub_793() );
    REGISTER_TARGET( l_U575[7],  /* PLAYER_PED_ID */ sub_793() );
    TASK_COMBAT_PED( l_U575[6],  /* PLAYER_PED_ID */ sub_793() );
    TASK_COMBAT_PED( l_U575[7],  /* PLAYER_PED_ID */ sub_793() );
    ISEQ_REGISTER_ENTITY( 1691769945, "wave2", l_U575[4], 0 );
    ISEQ_REGISTER_ENTITY( 1691769945, "wave2_1", l_U575[5], 0 );
    ISEQ_REGISTER_ENTITY( 1691769945, "wave2_2", l_U575[6], 0 );
    ISEQ_REGISTER_ENTITY( 1691769945, "wave2_3", l_U575[7], 0 );
    ISEQ_START( 1691769945 );
    return;
}

/* P_PLAY_DOOR_ALL_CLEAR_SFX */ void sub_39754()
{
    l_U708 = GET_SOUND_ID();
    PLAY_SOUND_FROM_COORD( l_U708, "FIRING_RANGE_ALL_CLEAR", g_U4009._fU4 );
     /* WRITESCRIPTLOG */ sub_467( "AT", "Playing FIRING_RANGE_ALL_CLEAR!", 0 );
    return;
}

/* P_STOP_ALL_CLEAR_SFX */ void sub_40000()
{
     /* WRITESCRIPTLOG */ sub_467( "AT", "Door closed! Playing ALL CLEAR!", 0 );
     /* P_STOP_DOOR_ALL_CLEAR_SFX */ sub_6061();
    PLAY_SOUND_FROM_COORD( -1, "PRISONER_EXCHANGE_DOOR_BUTTON", g_U4009._fU4 );
    return;
}

/* P_UNLOCK_FIRST_HALF_WAVE1 */ void sub_40153()
{
     /* WRITESCRIPTLOG */ sub_467( "RJM", "P_UNLOCK_FIRST_HALF_WAVE1", 0 );
    if ( /* IS_PED_VALID */ sub_37982( l_U575[0] ))
    {
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U575[0], 0 );
        SET_PED_FLAG_LOCK_TO_COVER( l_U575[0], 0 );
    }
    if ( /* IS_PED_VALID */ sub_37982( l_U575[1] ))
    {
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U575[1], 0 );
        SET_PED_FLAG_LOCK_TO_COVER( l_U575[1], 0 );
    }
     /* CREATETIMER */ sub_1577( ref l_U609, l_U599, 1, 0 );
     /* STARTTIMER */ sub_1727( ref l_U609 );
    return;
}

/* P_UNLOCK_SECOND_HALF_WAVE1 */ void sub_40378()
{
    if ( /* IS_PED_VALID */ sub_37982( l_U575[2] ))
    {
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U575[2], 0 );
        SET_PED_FLAG_LOCK_TO_COVER( l_U575[2], 0 );
    }
    if ( /* IS_PED_VALID */ sub_37982( l_U575[3] ))
    {
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U575[3], 0 );
        SET_PED_FLAG_LOCK_TO_COVER( l_U575[3], 0 );
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_40530(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_37748(  /* PLAYER_PED_ID */ sub_793(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* DISABLETIMER */ void sub_40728(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* P_CLOSEDOOR */ void sub_40927(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_13199( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_13283( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_41105(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_GET_IS_DOOR_CLOSED_OR_LOCKED */ int sub_41419(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7)
{
    boolean bVar10;
    float fVar11;

    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( uParam0._fU0, uParam0._fU4, ref bVar10, ref fVar11 );
    if (bParam7)
    {
        if (bVar10)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    if (fVar11 < 0.10000000)
    {
        return 1;
    }
    return 0;
}

/* P_SETDOORFORCECLOSE */ void sub_41606(int iParam0, unknown uParam1, unknown uParam2)
{
    if (( /* F_DOESDOOREXIST */ sub_13199( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_13283( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_FORCE_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1, uParam2 );
    return;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_41909(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_41105( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_42088(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_42154( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_42154(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_7532( uParam0 );
            }
        }
    }
    return;
}

/* P_CREATE_FINAL_ENEMY */ void sub_42496()
{
     /* WRITESCRIPTLOG */ sub_467( "AT", "Creating final enemy.", 0 );
    l_U653 =  /* CREATEPED */ sub_35546( ref l_U640 );
    if (NOT (IS_PED_DEAD( l_U653 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U653, 1 );
         /* F_GIVEPEDWEAPON */ sub_10591( l_U653, 434544317, 25000, 0, 0 );
         /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9796( l_U653, -862236369, 1, 25000, 0 );
        SET_ROOM_FOR_PED_BY_NAME( l_U653, "MloRoom_workshop" );
        SET_PED_AS_ONE_SHOT_KILL( l_U653, 1 );
        SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( l_U653, 0 );
        SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( l_U653, 1 );
        SET_PED_USES_ANIMATED_DEATH( l_U653, 0 );
        SET_PED_NAME_DEBUG( l_U653, "piFinalEnemy" );
        if ((IS_GERMAN_VERSION() == 1) || (IS_JAPANESE_GAME()))
        {
            SET_PED_RELATIONSHIP_GROUP( l_U653, 1 );
            SET_PED_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP( l_U653, 0, 0 );
            SET_PED_GORE_FROM_PLAYER( l_U653, 0 );
        }
    }
     /* P_DEACTIVATEPED */ sub_37410( l_U653 );
    return;
}

/* P_CREATE_WORKSHOP_ENEMY */ void sub_42841()
{
     /* WRITESCRIPTLOG */ sub_467( "AT", "Creating final enemy.", 0 );
    l_U707 =  /* CREATEPED */ sub_35546( ref l_U694 );
    if (NOT (IS_PED_DEAD( l_U707 )))
    {
         /* F_GIVEPEDWEAPON */ sub_10591( l_U707, 1478009203, 25000, 0, 0 );
        SET_ROOM_FOR_PED_BY_NAME( l_U707, "MloRoom_workshop" );
    }
     /* P_TETHERPED */ sub_37234( ref l_U792, l_U707, 1 );
     /* P_DEACTIVATEPED */ sub_37410( l_U707 );
    return;
}

/* F_SHOULD_FINAL_ENEMY_DEPLOY */ int sub_43122()
{
    vector vVar2;

    vVar2 = {1007.93200000, -35.04556000, 9.79835500};
    if (IS_SPHERE_VISIBLE( vVar2, 0.50000000, 0 ))
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() )))
        {
            if ((( /* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ sub_43228(  /* PLAYER_PED_ID */ sub_793(), vVar2 )) > 8.00000000) AND (( /* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ sub_43228(  /* PLAYER_PED_ID */ sub_793(), vVar2 )) < 20.00000000))
            {
                return 1;
            }
        }
    }
    return 0;
}

/* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ void sub_43228(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    else
    {
        return -1.00000000;
    }
    return VDIST( uVar6, uParam1 );
}

/* P_ACTIVATE_FINAL_ENEMY */ void sub_43451()
{
    unknown uVar2;

     /* WRITESCRIPTLOG */ sub_467( "AT", "Activating final enemy.", 0 );
     /* P_ACTIVATEPED */ sub_38107( l_U653 );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() ))) AND (NOT (IS_PED_DEAD( l_U653 ))))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( l_U653 );
        REGISTER_TARGET( l_U653,  /* PLAYER_PED_ID */ sub_793() );
        SET_LOCKED_TARGET( l_U653,  /* PLAYER_PED_ID */ sub_793() );
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 1008.50700000, -38.60109000, 7.80015700, 3, 20000, 1048576000, 0, 0 );
        TASK_SURRENDER( 0,  /* PLAYER_PED_ID */ sub_793(), 1103626240 );
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( l_U653, uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
    }
    return;
}

/* P_DIAL_SURRENDER */ void sub_43821()
{
     /* WRITESCRIPTLOG */ sub_467( "SBA", "P_DIAL_SURRENDER", 0 );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_793() ))) AND (NOT (IS_PED_DEAD( l_U653 ))))
    {
         /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2360( ref l_U799 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2471( 1, l_U653, "M13_UFE_126_MUS", ref l_U799, 2, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2471( 0,  /* PLAYER_PED_ID */ sub_793(), "MAX", ref l_U799, 2, 0 );
         /* PLAY_SINGLE_SPEECH */ sub_2741( "SPOL_CP16A", ref l_U799, 8, 1 );
    }
    return;
}

/* F_ISPEDINTRIGGERBOXFIRSTTIME */ void sub_44023(int iParam0, unknown uParam1, unknown uParam2)
{
    if (iParam0->_fU68 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU68 =  /* F_ISPEDINTRIGGERBOX */ sub_37748( uParam1, (iParam0^) );
        if ((iParam0->_fU68) AND (uParam2))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU68;
}

/* F_CAN_AMBIENT_SPEECH_PLAY */ int sub_44246()
{
    if ((l_U282._fU16) || ( /* ISTIMERDONE */ sub_2093( ref l_U282 )))
    {
        return 1;
    }
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_44361(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_2360( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2471( 0,  /* PLAYER_PED_ID */ sub_793(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_2471( 1,  /* PLAYER_PED_ID */ sub_793(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_2741( uParam0, uParam1, 8, 1 );
    return;
}

/* P_HANDLE_IMAGEFX_STAIRS */ void sub_44693()
{
    if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_44023( ref l_U426,  /* PLAYER_PED_ID */ sub_793(), 0 ))
    {
         /* P_INITIALIZE_IMAGEFX_STAIRS01 */ sub_44749();
    }
    if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_44023( ref l_U447,  /* PLAYER_PED_ID */ sub_793(), 0 ))
    {
         /* P_INITIALIZE_IMAGEFX_STAIRS02 */ sub_45181();
    }
     /* P_HANDLE_IMAGEFX */ sub_45444( ref l_U844 );
    return;
}

/* P_INITIALIZE_IMAGEFX_STAIRS01 */ void sub_44749()
{
     /* P_INIT_IMAGEFX */ sub_44795( ref l_U844 );
    l_U844[0]._fU4 = "EXPOSURE_DARKEN_CONTRAST";
    l_U844[0]._fU16 = 750;
    l_U844[0]._fU24 = 1;
    l_U844[0]._fU20 = 1;
    l_U844[0]._fU12 = 0;
    l_U844[0]._fU8 = 4;
    l_U844[0]._fU32 = 0;
    l_U844[1]._fU4 = "BLUR_ZOOM_LIGHT_FAST";
    l_U844[1]._fU8 = 4;
    l_U844[1]._fU16 = 750;
    l_U844[1]._fU24 = 1;
    l_U844[1]._fU32 = 0;
    l_U86 = 0;
    return;
}

/* P_INIT_IMAGEFX */ void sub_44795(unknown uParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_467( "CO", "P_INIT_IMAGEFX", 0 );
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I]._fU4 = "";
        (uParam0^)[I]._fU12 = 0;
        (uParam0^)[I]._fU16 = 0;
        (uParam0^)[I]._fU20 = 0;
        (uParam0^)[I]._fU24 = 0;
        (uParam0^)[I]._fU28 = 0;
        (uParam0^)[I]._fU32 = 1;
    }
    return;
}

/* P_INITIALIZE_IMAGEFX_STAIRS02 */ void sub_45181()
{
     /* P_INIT_IMAGEFX */ sub_44795( ref l_U844 );
    l_U844[0]._fU4 = "EXPOSURE_DARKEN_CONTRAST";
    l_U844[0]._fU8 = 4;
    l_U844[0]._fU12 = 0;
    l_U844[0]._fU16 = 1000;
    l_U844[0]._fU24 = 1;
    l_U844[0]._fU20 = 1;
    l_U844[0]._fU32 = 0;
    l_U844[1]._fU4 = "TRIPLE_INTERLACE_COLOR_MED";
    l_U844[1]._fU8 = 4;
    l_U844[1]._fU16 = 1000;
    l_U844[1]._fU24 = 1;
    l_U844[1]._fU32 = 0;
    l_U86 = 0;
    return;
}

/* P_HANDLE_IMAGEFX */ void sub_45444(unknown uParam0)
{
    int I;
    int J;

    switch (l_U86)
    {
        case 0:
         /* WRITESCRIPTLOG */ sub_467( "CO", "P_HANDLE_IMAGEFX", 0 );
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (uParam0^)[I]._fU32)
            {
                 /* CREATETIMER */ sub_1577( ref (uParam0^)[I]._fU36, (uParam0^)[I]._fU12, 1, 0 );
                 /* STARTTIMER */ sub_1727( ref (uParam0^)[I]._fU36 );
                if ((uParam0^)[I]._fU20 > 0)
                {
                    I += (uParam0^)[I]._fU20;
                }
            }
        }
        l_U86 = 1;
        break;
        case 1:
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if ( /* ISTIMERDONE */ sub_2093( ref (uParam0^)[I]._fU36 ))
            {
                (uParam0^)[I]._fU0 = PLAY_IMAGEFX( (uParam0^)[I]._fU4, (uParam0^)[I]._fU8, (uParam0^)[I]._fU28 );
                if ((uParam0^)[I]._fU16 > 0)
                {
                     /* CREATETIMER */ sub_1577( ref (uParam0^)[I]._fU72, (uParam0^)[I]._fU16, 1, 0 );
                     /* STARTTIMER */ sub_1727( ref (uParam0^)[I]._fU72 );
                }
                if ((uParam0^)[I]._fU20 > 0)
                {
                    for ( J = I + 1; J <= (I + (uParam0^)[I]._fU20); J++ )
                    {
                        PRINTSTRING( "******* [CO] ***** STARTING CHILD FOR index : " );
                        PRINTINT( J );
                        PRINTNL();
                        (uParam0^)[J]._fU0 = PLAY_IMAGEFX( (uParam0^)[J]._fU4, (uParam0^)[J]._fU8, (uParam0^)[I]._fU28 );
                        if ((uParam0^)[J]._fU16 > 0)
                        {
                             /* CREATETIMER */ sub_1577( ref (uParam0^)[J]._fU72, (uParam0^)[J]._fU16, 1, 0 );
                             /* STARTTIMER */ sub_1727( ref (uParam0^)[J]._fU72 );
                        }
                    }
                    I += (uParam0^)[I]._fU20;
                }
            }
            if ( /* ISTIMERDONE */ sub_2093( ref (uParam0^)[I]._fU72 ))
            {
                STOP_IMAGEFX( (uParam0^)[I]._fU0, (uParam0^)[I]._fU24 );
                (uParam0^)[I]._fU32 = 1;
                if ((uParam0^)[I]._fU20 > 0)
                {
                    if ((uParam0^)[I]._fU20 == 1)
                    {
                        STOP_IMAGEFX( (uParam0^)[I + 1]._fU0, (uParam0^)[I + 1]._fU24 );
                        (uParam0^)[I + 1]._fU32 = 1;
                    }
                    else
                    {
                        for ( J = I + 1; J <= (uParam0^)[I]._fU20; J++ )
                        {
                            STOP_IMAGEFX( (uParam0^)[J]._fU0, (uParam0^)[J]._fU24 );
                            (uParam0^)[J]._fU32 = 1;
                        }
                    }
                    I += (uParam0^)[I]._fU20;
                }
            }
        }
        break;
    }
    return;
}

/* TAKE_PAINKILLER_ARRAY_SNAPSHOT */ void sub_46342(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if (DOES_PLACEMENT_EXIST( (uParam0^)[I] ))
        {
             /* WRITESCRIPTLOG */ sub_467( "RJM", "DO_ANY_PAINKILLERS_STILL_EXIST - Found a pill in there, we can still play some V.O.", 0 );
            (uParam1^)[I] = 1;
        }
        else
        {
            (uParam1^)[I] = 0;
        }
    }
    return;
}

/* P_RELEASE_FIRINGRANGE_ASSETS */ void sub_46975()
{
     /* WRITESCRIPTLOG */ sub_467( "AT", "P_RELEASE_FIRINGRANGE_ASSETS", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_47066( ref l_U839, ref g_U2468 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_47614( ref g_U3537, ref g_U2889 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_47614( ref g_U3489, ref g_U2889 );
    ISEQ_TERMINATE( 879508723 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6389( 879508723, ref g_U2662 );
    ISEQ_TERMINATE( 1691769945 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6389( 1691769945, ref g_U2662 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_48027( 434544317, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_48027( 1964270085, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_48027( 1194438308, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_48027( -862236369, ref g_U2613 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_48027( 57534114, ref g_U2613 );
     /* UNLOADMODEL */ sub_48414( g_U816 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_47066(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_47139( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_47139(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6527( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_47614(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6527( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_48027(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6527( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* UNLOADMODEL */ void sub_48414(unknown uParam0)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 1)
    {
        SET_MODEL_AS_NO_LONGER_NEEDED( uParam0 );
    }
    else
    {
         /* WRITE_STRING */ sub_10200( "[SP]### ERROR! (UnloadModel) Trying to unload a model that isn't in the img! ###" );
    }
    return;
}

