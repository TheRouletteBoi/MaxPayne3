void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U58 = 0;
    l_U59 = 0;
    l_U60 = 1500;
    l_U70 = -1;
    l_U71 = {64536, 64536, 64536};
    l_U119 = 0;
    l_U121 = 1;
    l_U122 = 0;
    l_U123 = 0;
    l_U836 = {-7.51400000, 17.85200000, -61.17137000};
    l_U839 = {0.00000000, 0.00000000, 180.00000000};
    l_U851 = 500;
    l_U873 = -1;
    l_U874 = -1;
    l_U875 = 0;
    l_U876 = 0;
     /* WRITESCRIPTLOG */ sub_417( "SP", "Script s_fashion_MainLobby_Alt.sc is starting up...", 0 );
     /* P_ML_POPULATE_VARIABLE_ARRAYS */ sub_535();
    l_U119 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_791();
         /* P_ML_HANDLE_STOPPING_ELEVATOR_SOUND */ sub_11838();
        if (l_U123 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_12061();
        }
         /* P_ML_DEBUG_TUNING_WIDGET */ sub_64913();
        WAIT( 0 );
    }
     /* P_CLEANUP_ML */ sub_3470( 0 );
     /* P_RELEASE_ML_ASSETS */ sub_65307();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_fashion_MainLobby_Alt" );
     /* WRITESCRIPTLOG */ sub_417( "SP", "Script s_fashion_MainLobby_Alt.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_417(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_ML_POPULATE_VARIABLE_ARRAYS */ void sub_535()
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_POPULATE_VARIABLE_ARRAYS start", 0 );
    l_U110[0] = g_U720;
    l_U110[1] = -1098942219;
    l_U110[2] = -1585064135;
    l_U110[3] = -1182267595;
    l_U115[0] = 68019059;
    l_U115[1] = 724901397;
    l_U115[2] = -168327769;
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_POPULATE_VARIABLE_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_791()
{
    if (g_U723 == 3)
    {
        switch (l_U123)
        {
            case 0:
            if ((l_U122) || (( /* RESTARTING_CHECKPOINT */ sub_993()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() ))))
            {
                l_U123 = 1;
                 /* WRITESCRIPTLOG */ sub_417( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_1517())
            {
                l_U123 = 2;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_1577( 0 )) == 1)
            {
                l_U123 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
            {
                SET_CAM_VIEW_MODE( 0 );
                if ((g_U724[4]._fU40 != 4) AND (g_U724[4]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_417( "GA", "Shutting down script for Parking Level 2 checkpoint.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_3168( ref g_U724[4] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U724[4]._fU32 );
                    g_U1264[4] = 0;
                }
                l_U123 = 3;
                 /* WRITESCRIPTLOG */ sub_417( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_417( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_930() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_930(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_892() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_892(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
             /* P_CLEANUP_ML */ sub_3470( 1 );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( ref g_U1627, 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( ref g_U1627, 0 ), GET_HASH_KEY( ref g_U1571 ) );
            l_U123 = 4;
             /* WRITESCRIPTLOG */ sub_417( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_417( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U74._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_7162( ref l_U74,  /* PLAYER_PED_ID */ sub_892() );
            }
            l_U123 = 5;
             /* WRITESCRIPTLOG */ sub_417( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_417( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U119 = 1;
            l_U122 = 0;
            l_U121 = 0;
            l_U123 = 0;
             /* WRITESCRIPTLOG */ sub_417( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_892()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_930() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_930()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_993()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_892(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_930(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_930(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_892() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_892(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_1517()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_1577(int iParam0)
{
    iParam0 = 1;
    switch (l_U59)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_1659( ref l_U61 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
            {
                l_U60 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1793( ref l_U61, l_U60, 1, 1 );
             /* STARTTIMER */ sub_1943( ref l_U61 );
        }
        if ( /* ISTIMERDONE */ sub_2076( ref l_U61 ))
        {
             /* WRITESCRIPTLOG */ sub_417( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_930() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_930(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U59 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U59 = 2;
            }
            else
            {
                l_U59 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_417( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_2577();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_417( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_2577();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_1659(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_1793(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_1943(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2076(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_2577()
{
     /* WRITESCRIPTLOG */ sub_417( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_2652( ref l_U61 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_930() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_930(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U58 = 0;
    l_U58 = l_U58;
    l_U59 = 0;
    return;
}

/* RESETTIMER */ void sub_2652(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_3168(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_ML */ void sub_3470(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_CLEANUP_ML start", 0 );
    ISEQ_TERMINATE( 36524849 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3548( 36524849, ref g_U967 );
    ISEQ_TERMINATE( 1241506505 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3548( 1241506505, ref g_U967 );
    ISEQ_TERMINATE( 1565133149 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3548( 1565133149, ref g_U967 );
    ISEQ_TERMINATE( 931347920 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3548( 931347920, ref g_U967 );
    ISEQ_TERMINATE( -2065237615 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3548( -2065237615, ref g_U967 );
     /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_4745( "S_FASHION_CONCIERGE_VIG", ref g_U1168 );
     /* P_STREAMREQ_SCRIPT_STREAM_STOP */ sub_5120( "S_FASHION_CONCIERGE_VIG", ref g_U1168 );
     /* P_SAFE_STOP_SOUND */ sub_5891( l_U873, 0 );
     /* P_SAFE_RELEASE_SOUND_ID */ sub_6074( ref l_U873 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_LOBBY", 0 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_PARKING_GARAGE_STAIRS", 0 );
    if ((CUTSCENE_NAMED_IS_LOADING( "01_02_RP_concat" )) || (CUTSCENE_IS_LOADED( "01_02_RP_concat" )))
    {
        CLEAR_NAMED_CUTSCENE( "01_02_RP_concat" );
    }
    if ((CUTSCENE_NAMED_IS_LOADING( "MID_07_RP_conat" )) || (CUTSCENE_IS_LOADED( "MID_07_RP_concat" )))
    {
        CLEAR_NAMED_CUTSCENE( "MID_07_RP_concat" );
    }
    if (bParam0)
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
     /* CLEANPEDARRAY */ sub_6534( ref l_U801 );
     /* CLEANPEDARRAY */ sub_6534( ref l_U297 );
     /* CLEANPED */ sub_6584( l_U521 );
     /* CLEANPEDARRAY */ sub_6534( ref l_U629 );
     /* CLEANPEDARRAY */ sub_6534( ref l_U572 );
     /* CLEANOBJECT */ sub_6730( l_U835 );
     /* CLEANOBJECT */ sub_6730( l_U553 );
     /* CLEANOBJECT */ sub_6730( l_U554 );
     /* CLEANPLACEMENT */ sub_6811( g_U683._fU0 );
     /* P_STOP_SP_CHALLENGES */ sub_6873( bParam0 );
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_CLEANUP_ML end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_3548(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3686( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_3686(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ void sub_4745(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3686( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a SCRIPT_STREAM asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_STOP */ void sub_5120(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_5170( uParam0, uParam1 ))
    {
        iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_5379( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            DISPLAYF( "[CCB]### Stopping the SCRIPT_STREAM: {} ###", 1, 1281, ref (uParam1^)[iVar4]._fU0 );
            STOP_SCRIPT_STREAM( iVar4 );
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam0 );
            SCRIPT_ASSERT( "Attempting to stop a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam0 );
        DISPLAYF( "Attempting to stop a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ int sub_5170(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB]### The SCRIPT_STREAM is loaded: {} ###", 1, 1281, ref (uParam1^)[I]._fU0 );
                return 1;
            }
        }
    }
    return 0;
}

/* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ int sub_5379(unknown uParam0, unknown uParam1)
{
    int Result;

    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
        {
            return Result;
        }
    }
    return -1;
}

/* P_SAFE_STOP_SOUND */ void sub_5891(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
         /* WRITESCRIPTLOG */ sub_417( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_417( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

/* P_SAFE_RELEASE_SOUND_ID */ void sub_6074(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
         /* WRITESCRIPTLOG */ sub_417( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_417( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

/* CLEANPEDARRAY */ void sub_6534(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_6584( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_6584(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANOBJECT */ void sub_6730(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_6811(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_6873(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_417( "CCB", "P_STOP_SP_CHALLENGES", 0 );
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_7162(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_417( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_7381( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_8545( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8859( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9338( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8859( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9338( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8859( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9338( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9654( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9338( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9654( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9338( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_10226( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_10428( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_892(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_417( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_7381(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7443( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_7443(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_8545(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_8859(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9263( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_9263(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_9338(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_9654(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9263( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_10226(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_10428(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7443( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_10526( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_10526(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_ML_HANDLE_STOPPING_ELEVATOR_SOUND */ void sub_11838()
{
    if (DOES_OBJECT_EXIST( l_U835 ))
    {
        if (l_U874 != -1)
        {
            if (NOT (IS_OBJECT_PLAYING_ANIM( l_U835, "P_RP_ElvAnm_Aa_H", "fs_objmodels" )))
            {
                 /* WRITESCRIPTLOG */ sub_417( "SA", "Stopping elevator opening/closing sound.", 0 );
                 /* P_SAFE_STOP_SOUND */ sub_5891( l_U874, 0 );
                 /* P_SAFE_RELEASE_SOUND_ID */ sub_6074( ref l_U874 );
            }
        }
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_12061()
{
    int iVar2;

    iVar2 = l_U119;
     /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_12108( ref l_U297, -70.00000000, 0, 1 );
    if (g_U723 == 3)
    {
         /* P_HANDLE_SP_CHALLENGES */ sub_12319();
    }
    switch (l_U119)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_417( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_12915();
         /* P_SET_STATIC_DATA */ sub_13228();
         /* P_INITIALIZE_SP_CHALLENGES */ sub_16764();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        if (g_U722 == 3)
        {
            SET_CAM_VIEW_MODE( 0 );
        }
        l_U119 = 2;
         /* WRITESCRIPTLOG */ sub_417( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_417( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_ML_PERSISTENT_ASSETS */ sub_17008();
         /* P_REQUEST_ML_NONPERSISTENT_ASSETS */ sub_26064();
        l_U119 = 3;
         /* WRITESCRIPTLOG */ sub_417( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ sub_33334( ref g_U1168 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_32920( ref g_U967 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_32529( ref g_U1028 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_32127( ref g_U918 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_31730( ref g_U821 ))))))
        {
            if ((NOT l_U74._fU0) AND (g_U722 == 3))
            {
                l_U119 = 4;
                 /* WRITESCRIPTLOG */ sub_417( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U119 = 6;
                 /* WRITESCRIPTLOG */ sub_417( "SP", "eCheckpointState = CP_ML_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U1264[3] = 1;
        l_U121 = 0;
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
        {
            FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_892(), 0 );
        }
        if (( /* HAS_SAVEFILE_LOADED */ sub_33988( ref l_U74 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_9654(  /* PLAYER_PED_ID */ sub_892(), 68019059, 200, 0, 0 );
            l_U119 = 5;
             /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U119 = 6;
             /* WRITESCRIPTLOG */ sub_417( "SP", "eCheckpointState = CP_ML_PRE_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
        {
            if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 0 ) ))
            {
                l_U119 = 6;
                 /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_ML_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if (l_U120)
        {
            ;
        }
         /* P_CREATE_S_FAS_GG_PT_02 */ sub_34482();
         /* P_ML_CREATE_ELEVATOR_DOORS */ sub_35464();
         /* P_ML_CREATE_CRASH_DOORS */ sub_36156();
        l_U119 = 7;
         /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        break;
        case 7:
        if (g_U1264[3])
        {
            if (l_U121)
            {
                if (CUTSCENE_IS_LOADED( "01_02_RP_concat" ))
                {
                    l_U119 = 8;
                     /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_HANDLE_01_02_RP", 0 );
                }
                else if (CUTSCENE_NAMED_IS_LOADING( "01_02_RP_concat" ))
                {
                     /* WRITESCRIPTLOG */ sub_417( "GA", "Waiting for cutscene 01_02_RP_concat to load.", 0 );
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_417( "GA", "Requesting cutscene 01_02_RP_concat to load.", 0 );
                    PRE_STREAM_SEAMLESS_CUTSCENE( "01_02_RP_concat" );
                }
            }
            else
            {
                l_U119 = 8;
                 /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_HANDLE_01_02_RP", 0 );
            }
        }
        break;
        case 8:
        if (l_U120)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_46113( ref l_U745, "01_02_RP_concat", 36915, 38506, 39173, 41405, 41454, 42535, 250, 0 );
            if (l_U121)
            {
                l_U745._fU4 = 2;
            }
            else
            {
                l_U745._fU4 = 7;
            }
             /* DISABLETIMER */ sub_46670( ref l_U842 );
        }
        if ((l_U745._fU52) AND (l_U745._fU4 == 8))
        {
             /* P_CREATE_AND_START_TIMER */ sub_46748( ref l_U842, l_U851 );
        }
        if ( /* ISTIMERDONE */ sub_2076( ref l_U842 ))
        {
             /* P_ML_PLAY_ELEVATOR_BELL */ sub_46825();
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_46962( ref l_U745 ))
        {
            if (NOT l_U74._fU0)
            {
                g_U723 = 3;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_49232( ref l_U74, g_U723,  /* PLAYER_PED_ID */ sub_892(), g_U1333[3], g_U1450[3], g_U1486[3], g_U1522[3], 1 );
            }
            RESET_FORCED_AIM_INTENTION_DIRECTION();
            RESET_FORCED_FORWARD_DIRECTION();
             /* P_START_SP_CHALLENGES */ sub_53844();
             /* P_ML_RELEASE_ELEVATOR_BELL_SOUND */ sub_53922();
             /* P_ML_OPEN_ELEVATOR_DOORS */ sub_54041();
            l_U119 = 9;
             /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_ML_GAMEPLAY_LEAVE_ELEVATOR", 0 );
        }
        break;
        case 9:
        if (l_U120)
        {
            l_U556 = 1;
        }
        if ( /* F_ML_CONCIERGE */ sub_54426())
        {
             /* P_ML_START_VIG_03B */ sub_54940();
        }
         /* P_ML_HANDLE_ELEVATOR_NEAR_CAMERA */ sub_55697();
         /* P_ML_HANDLE_VIG_03B_CORPSE */ sub_56134();
        if (( /* F_ML_CAN_PLAYER_SEE_ELEVATOR_ENEMY */ sub_56322()) || (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_55762( l_U124 ))))
        {
             /* P_ML_ELEVATOR_ENEMY_RUN_OFF */ sub_56431();
            ENABLE_WALLA_ZONE( "S_FASHION_WZ_LOBBY", 1 );
            l_U119 = 10;
             /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_ML_GAMEPLAY_FIRST_ENEMY", 0 );
        }
        break;
        case 10:
        if (l_U120)
        {
             /* WRITESCRIPTLOG */ sub_417( "SA", "eCheckpointState = CP_ML_GAMEPLAY_PRE_TUTORIAL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() ))) AND (NOT (IS_PED_DEAD( l_U297[0] ))))
            {
                 /* WRITESCRIPTLOG */ sub_417( "GA", "Snapping VIG_03C_RP GMED to cover.", 0 );
                TASK_COMBAT_SNAP_TO_COVER( l_U297[0], "GenCover", "5A8CB6B1_F237907E_Popover1",  /* PLAYER_PED_ID */ sub_892() );
                PED_FINISH_ACTION_INTENTION( l_U297[0], 47 );
                SET_PED_VISIBLE( l_U297[0], 1 );
                SET_PED_VISIBLE_DURING_SEQUENCE( l_U297[0], 1 );
            }
             /* STARTTIMER */ sub_1943( ref l_U308 );
        }
         /* P_ML_HANDLE_ELEVATOR_NEAR_CAMERA */ sub_55697();
         /* P_ML_HANDLE_VIG_03B_CORPSE */ sub_56134();
        if ( /* ISTIMERDONE */ sub_2076( ref l_U308 ))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_57143( "SRTP_MSFBC", ref l_U317 );
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_55929( ref l_U852, 0 ))
        {
             /* P_ML_CLOSE_ELEVATOR_DOORS */ sub_58464();
        }
        if ( /* F_ISPLAYERINTRIGGERREGION */ sub_58768( ref l_U327, 0 ))
        {
            l_U119 = 11;
             /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_ML_GAMEPLAY_ENEMY_WAVE_B", 0 );
        }
        break;
        case 11:
        if (l_U120)
        {
             /* P_ML_START_LOBBY_ENEMIES_WAVE_B */ sub_59040();
            AUDIO_MUSIC_REQUEST_ONESHOT( "ROOFTOP_ONESHOT_07", 0 );
             /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_59497( "SCRIPT_MISSION\ELEVATOR", ref g_U1221 );
            if (NOT (IS_PED_DEAD( l_U297[0] )))
            {
                if ((ISEQ_QUERY_ENTITY_STATE( 1241506505, "gmed", 5 )) || (ISEQ_QUERY_ENTITY_STATE( 1241506505, "gmed", 6 )))
                {
                     /* WRITESCRIPTLOG */ sub_417( "GA", "Unlocking elevator enemy from cover.", 0 );
                    SET_PED_FLAG_LOCK_TO_COVER( l_U297[0], 0 );
                }
            }
        }
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() ))) AND (NOT (IS_PED_DEAD( l_U297[1] ))))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U297[1], 47 )) == 3)
            {
                 /* WRITESCRIPTLOG */ sub_417( "GA", "Snapping VIG_03D_RP GMED to cover.", 0 );
                TASK_COMBAT_SNAP_TO_COVER( l_U297[1], "GenCover", "5A8CB6B1_1049AFAA_Corner2",  /* PLAYER_PED_ID */ sub_892() );
                PED_FINISH_ACTION_INTENTION( l_U297[1], 47 );
            }
        }
        if (NOT (IS_PED_DEAD( l_U297[0] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U297[0], 48 )) == 3)
            {
                 /* WRITESCRIPTLOG */ sub_417( "GA", "Unlocking elevator enemy from cover.", 0 );
                SET_PED_FLAG_LOCK_TO_COVER( l_U297[0], 0 );
                PED_FINISH_ACTION_INTENTION( l_U297[0], 48 );
            }
        }
        if (NOT (IS_PED_DEAD( l_U297[1] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U297[1], 48 )) == 3)
            {
                 /* WRITESCRIPTLOG */ sub_417( "GA", "Unlocking wave B 1 enemy from cover.", 0 );
                SET_PED_FLAG_LOCK_TO_COVER( l_U297[1], 0 );
                PED_FINISH_ACTION_INTENTION( l_U297[1], 48 );
            }
        }
        if ((( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_60429( ref l_U297 )) >= 2) || ( /* F_ISPLAYERINTRIGGERBOX */ sub_55762( l_U468 )))
        {
            l_U119 = 12;
             /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_ML_GAMEPLAY_ENEMY_WAVE_C", 0 );
        }
        break;
        case 12:
        if (l_U120)
        {
             /* P_ML_START_LOBBY_ENEMY_WAVE_C */ sub_60647();
        }
        if (NOT (IS_PED_DEAD( l_U297[0] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U297[0], 48 )) == 3)
            {
                 /* WRITESCRIPTLOG */ sub_417( "GA", "Unlocking elevator enemy from cover.", 0 );
                SET_PED_FLAG_LOCK_TO_COVER( l_U297[0], 0 );
                PED_FINISH_ACTION_INTENTION( l_U297[0], 48 );
            }
        }
        if (NOT (IS_PED_DEAD( l_U297[1] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U297[1], 48 )) == 3)
            {
                 /* WRITESCRIPTLOG */ sub_417( "GA", "Unlocking wave B 1 enemy from cover.", 0 );
                SET_PED_FLAG_LOCK_TO_COVER( l_U297[1], 0 );
                PED_FINISH_ACTION_INTENTION( l_U297[1], 48 );
            }
        }
        if (NOT l_U555)
        {
            if ((DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( l_U163._fU0, l_U163._fU4 ) )) AND (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( l_U170._fU0, l_U170._fU4 ) )))
            {
                 /* WRITESCRIPTLOG */ sub_417( "GA", "Hiding the art crash doors.", 0 );
                SET_OBJECT_VISIBLE( DOOR_FIND_CLOSEST( l_U170._fU0, l_U170._fU4 ), 0 );
                SET_OBJECT_COLLISION( DOOR_FIND_CLOSEST( l_U170._fU0, l_U170._fU4 ), 0 );
                SET_OBJECT_VISIBLE( DOOR_FIND_CLOSEST( l_U163._fU0, l_U163._fU4 ), 0 );
                SET_OBJECT_COLLISION( DOOR_FIND_CLOSEST( l_U163._fU0, l_U163._fU4 ), 0 );
                l_U555 = 1;
            }
        }
        if (NOT l_U241)
        {
            if (( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_60429( ref l_U297 )) >= 2)
            {
                 /* WRITESCRIPTLOG */ sub_417( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_1_2_3 mood. Fade in 6 sec", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_1_2_3", "", 0.00000000, 6000, 5000, -1082130432, 0 );
                l_U241 = 1;
            }
        }
        if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_61642( ref l_U297 )) == 0))
        {
             /* P_START_CHECKPOINT_THREAD */ sub_61779( ref g_U724[4] );
            l_U119 = 13;
             /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_ML_GAMEPLAY_DOOR_CRASH_ENEMY", 0 );
        }
        break;
        case 13:
        if (l_U120)
        {
             /* STARTTIMER */ sub_1943( ref l_U489 );
        }
        if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_55762( l_U522 )))
        {
            if ( /* ISTIMERDONE */ sub_2076( ref l_U489 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_57143( "SRTP_MHTHA", ref l_U498 );
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_55929( ref l_U522, 0 ))
        {
             /* P_ML_OPEN_HALLWAY_DOORS */ sub_61995();
             /* P_ML_START_DOOR_CRASH_ENEMY */ sub_62175();
             /* WRITESCRIPTLOG */ sub_417( "GA", "Playing audio music one shot ROOFTOP_ONESHOT_07", 0 );
            AUDIO_MUSIC_PLAY_ONESHOT();
            l_U119 = 14;
             /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_ML_GAMEPLAY_GO_TO_PARKING_GARAGE", 0 );
        }
        break;
        case 14:
        if (l_U120)
        {
            ;
        }
        if (NOT l_U634)
        {
            if (IS_PED_DEAD( l_U521 ))
            {
                 /* WRITESCRIPTLOG */ sub_417( "GA", "Starting fail countdown.", 0 );
                 /* STARTTIMER */ sub_1943( ref l_U676 );
                ENABLE_WALLA_ZONE( "S_FASHION_WZ_PARKING_GARAGE_STAIRS", 1 );
                 /* WRITESCRIPTLOG */ sub_417( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_1 mood. Fade in 7 seconds, out 5 sec", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_1", "", 0.00000000, 7000, 5000, -1082130432, 0 );
                l_U634 = 1;
            }
        }
        if (TIME_SINCE_LAST_MONOLOGUE() > 2000)
        {
            if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_55929( ref l_U645, 0 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_57143( "SRTP_MSDCS", ref l_U635 );
            }
        }
        if ( /* ISTIMERDONE */ sub_2076( ref l_U676 ))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_57143( "SRTP_TRNTS", ref l_U666 );
             /* STARTTIMER */ sub_1943( ref l_U685 );
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_55929( ref l_U715, 0 ))
        {
             /* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ sub_63393( 0 );
             /* STARTTIMER */ sub_1943( ref l_U736 );
            if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_930() ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() ))))
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_892(), 1 );
                SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_930(), 0 );
            }
        }
        if ( /* ISTIMERDONE */ sub_2076( ref l_U736 ))
        {
            g_U1264[4] = 1;
            l_U119 = 17;
             /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 15:
        if (l_U120)
        {
            ;
        }
        if ( /* F_UNLOADCUTSCENEANDLOADNEWCUTSCENE */ sub_64016( "MID_08_RP_concat", "MID_07_RP_concat" ))
        {
            l_U119 = 16;
             /* WRITESCRIPTLOG */ sub_417( "GA", "eCheckpointState = CP_HANDLE_MID_07_RP", 0 );
        }
        break;
        case 16:
        if (l_U120)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_46113( ref l_U808, "MID_07_RP_concat", 64391, 64444, 64500, 41405, 64618, 64671, 0, 1 );
            l_U808._fU4 = 2;
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_46962( ref l_U808 ))
        {
            l_U122 = 1;
        }
        break;
        case 17:
        if ((NOT HAS_CUTSCENE_FINISHED()) || (g_U723 == 4))
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U119 = 0;
             /* WRITESCRIPTLOG */ sub_417( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U119 != iVar2)
    {
        l_U120 = 1;
    }
    else
    {
        l_U120 = 0;
    }
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_12108(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_12174( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_12174(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_6584( uParam0 );
            }
        }
    }
    return;
}

/* P_HANDLE_SP_CHALLENGES */ void sub_12319()
{
     /* P_HANDLE_GLOBAL_SP_CHALLENGES */ sub_12354();
    return;
}

/* P_HANDLE_GLOBAL_SP_CHALLENGES */ void sub_12354()
{
    switch (g_U1646)
    {
        case 0:
        DISPLAYF( "[CCB] ### eYouveGotToBelieveFail - STATE_CHALLENGE_IDLE ###", 0 );
        g_U1646 = 1;
        break;
        case 1:
        if (IS_HUD_PREFERENCE_SWITCHED_ON())
        {
            DISPLAYF( "[CCB] ### IS_HUD_PREFERENCE_SWITCHED_ON is TRUE... ###", 0 );
            DISPLAYF( "[CCB] ### eYouveGotToBelieveFail - STATE_CHALLENGE_COMPLETE ###", 0 );
            g_U1646 = 2;
        }
        break;
        case 2: break;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_12915()
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U120 = 1;
     /* CREATETIMER */ sub_1793( ref l_U308, 1500, 1, 0 );
    l_U241 = 0;
    l_U242 = 0;
    l_U243 = 0;
     /* CREATETIMER */ sub_1793( ref l_U489, 1500, 1, 0 );
    l_U555 = 0;
    l_U574 = 0;
    l_U575 = 0;
     /* CREATETIMER */ sub_1793( ref l_U145, 500, 1, 0 );
     /* CREATETIMER */ sub_1793( ref l_U154, 500, 1, 0 );
    l_U634 = 0;
     /* CREATETIMER */ sub_1793( ref l_U676, 30000, 1, 0 );
     /* CREATETIMER */ sub_1793( ref l_U685, 30000, 1, 0 );
    l_U772 = 0;
    l_U773 = 0;
    l_U804 = 0;
    l_U805 = 0;
    l_U806 = 0;
    l_U807 = 0;
     /* CREATETIMER */ sub_1793( ref l_U736, 750, 1, 0 );
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_13228()
{
    unknown[2] uVar2;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;

     /* WRITESCRIPTLOG */ sub_417( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13336( ref l_U774[0], -5.96000000, -34.32000000, -15.32278000, -188.40000000, 553092933, 26, 0, 0, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13336( ref l_U774[1], -8.37000000, -35.23000000, -15.32278000, -170.00000000, 1704169279, 26, 0, 0, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13336( ref l_U244[0], 6.73800000, 27.85900000, -61.19900000, 90.00000000, -586225623, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13336( ref l_U244[1], 1.27000000, 47.22000000, -61.19000000, -90.00000000, -1931740375, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13336( ref l_U244[2], -2.11000000, 48.60000000, -61.19000000, -135.00000000, -2079123822, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13336( ref l_U244[3], -2.67000000, 48.41000000, -61.42000000, -90.00000000, -253329729, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13336( ref l_U508, -10.10000000, 48.17000000, -61.42000000, -90.00000000, 800337267, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13336( ref l_U576[0], 4.04000000, 28.53000000, -61.00000000, 242.00000000, -1506353897, 26, 0, 0, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13336( ref l_U576[1], 1.94000000, 19.36000000, -61.00000000, 225.00000000, 466304203, 26, 0, 0, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13336( ref l_U576[2], 12.15000000, 23.14000000, -61.00000000, 173.00000000, 1003175781, 26, 0, 0, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13336( ref l_U576[3], -6.63000000, 49.60000000, -61.40000000, 202.00000000, 2119641415, 26, 0, 0, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13336( ref l_U558[0], 2.15400000, 26.31900000, -61.16800000, 135.00000000, 181206332, 26, 0, 0, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_14029( ref l_U124, "tb_ML_StartingElevator", -7.53000000, 15.93000000, -61.18000000, 3.60000000, 4.13000000, 2.90000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    array(ref uVar2, 2);
     /* P_CREATETRIGGERBOX */ sub_14029( ref uVar2[0], "tb_MW_PastReceptionDesk[0]", 9.80000000, 22.07000000, -61.24000000, 6.97000000, 20.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14029( ref uVar2[1], "tb_MW_PastReceptionDesk[1]", 5.43000000, 29.98000000, -61.24000000, 6.97000000, 5.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERREGION */ sub_14310( ref l_U327, ref uVar2 );
     /* P_CREATETRIGGERBOX */ sub_14029( ref l_U468, "tb_ML_MidWayUpColumns", 8.11000000, 34.68000000, -61.19000000, 9.96000000, 3.09000000, 5.79000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14029( ref l_U522, "tb_ML_NearDoorsToHallway", -4.99000000, 48.01000000, -61.61000000, 10.00000000, 10.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14029( ref l_U694, "tb_ML_DoorToParkingOuter", -37.53000000, 60.01000000, -65.06000000, 10.00000000, 12.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14029( ref l_U715, "tb_ML_DoorToParkingInner", -37.50000000, 58.65000000, -64.99000000, 10.00000000, 6.07000000, 2.74000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14029( ref l_U852, "tb_ML_CloseElevator", -0.80000000, 22.50000000, -62.00000000, 2.59000000, 8.78000000, 9.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14029( ref l_U645, "tb_ML_Play_SRTP_MSDCS", -31.23000000, 49.16000000, -65.00000000, 15.66000000, 9.18000000, 4.91000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATEDOORSTRUCT */ sub_15147( ref l_U163, -1532993036, -8.89485000, 49.20000000, -60.49547000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_15226( ref l_U163, -100.00000000, 100.00000000 );
     /* P_CLOSEDOOR */ sub_15563( ref l_U163, 1 );
     /* P_SETDOORLOCKED */ sub_15707( ref l_U163, 1 );
     /* P_CREATEDOORSTRUCT */ sub_15147( ref l_U170, -1532993036, -8.89485000, 46.80000000, -60.49547000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_CLOSEDOOR */ sub_15563( ref l_U170, 1 );
     /* P_SETDOORLOCKED */ sub_15707( ref l_U170, 1 );
     /* P_SETDOORMINMAXLIMIT */ sub_15226( ref l_U170, -100.00000000, 100.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_15147( ref l_U177[0], 996251004, 5.38204000, 14.68244000, -60.10560000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15707( ref l_U177[0], 1 );
     /* P_CREATEDOORSTRUCT */ sub_15147( ref l_U177[1], 996251004, 7.77515000, 14.67672000, -60.09560000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15707( ref l_U177[1], 1 );
     /* P_CREATEDOORSTRUCT */ sub_15147( ref l_U177[2], 996251004, -5.00889000, 42.01286000, -60.49706000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15707( ref l_U177[2], 1 );
     /* P_CREATEDOORSTRUCT */ sub_15147( ref l_U177[3], -1040114507, -13.87658000, 53.79118000, -60.49547000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15707( ref l_U177[3], 1 );
     /* P_CREATEDOORSTRUCT */ sub_15147( ref l_U177[4], -1040114507, -16.27658000, 53.79118000, -60.49547000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15707( ref l_U177[4], 1 );
     /* P_CREATEDOORSTRUCT */ sub_15147( ref l_U177[5], 996251004, -3.78351000, 53.86155000, -60.49706000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15707( ref l_U177[5], 1 );
     /* P_CREATEDOORSTRUCT */ sub_15147( ref l_U177[6], 732538119, -11.83936000, 44.00432000, -60.49547000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15707( ref l_U177[6], 1 );
     /* P_CREATEDOORSTRUCT */ sub_15147( ref l_U177[7], 732538119, -16.06521000, 44.00432000, -60.49547000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15707( ref l_U177[7], 1 );
     /* P_CREATEDOORSTRUCT */ sub_15147( ref l_U234, -1040114507, -23.23475000, 49.20000000, -62.09954000, 0, 0, 0 );
     /* P_OPENDOOR */ sub_16481( ref l_U234, 0, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_16645( ref l_U234, 1 );
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_13336(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_14029(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETRIGGERREGION */ void sub_14310(int iParam0, unknown uParam1)
{
    int iVar4;
    int I;

    iVar4 = (uParam1^);
    if (iVar4 > 6)
    {
         /* WRITESCRIPTLOG */ sub_417( "[SA]", "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
        SCRIPT_ASSERT( "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
    }
    for ( I = 0; I < iVar4; I++ )
    {
        iParam0->_fU0[I] = {(uParam1^)[I]};
    }
    iParam0->_fU508 = iVar4;
    iParam0->_fU548 = 0;
    iParam0->_fU552 = 0;
    iParam0->_fU556 = 0;
    iParam0->_fU560 = 0;
    return;
}

/* P_CREATEDOORSTRUCT */ void sub_15147(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

/* P_SETDOORMINMAXLIMIT */ void sub_15226(int iParam0, float fParam1, float fParam2)
{
    if (( /* F_DOESDOOREXIST */ sub_15261( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_15345( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        PRINTSTRING( "[SP]### Error: Door fMinLimit greater than fMaxLimit (default min:-81.0 max:81.0) ###" );
        PRINTNL();
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_15261(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_15345(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_CLOSEDOOR */ void sub_15563(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_15261( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_15345( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* P_SETDOORLOCKED */ void sub_15707(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_15261( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_15345( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* P_OPENDOOR */ void sub_16481(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if (( /* F_DOESDOOREXIST */ sub_15261( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_15345( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

/* P_SETDOORLATCH */ void sub_16645(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_15261( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_15345( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_INITIALIZE_SP_CHALLENGES */ void sub_16764()
{
     /* WRITESCRIPTLOG */ sub_417( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
    return;
}

/* P_REQUEST_ML_PERSISTENT_ASSETS */ void sub_17008()
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_REQUEST_ML_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_17109( ref l_U110, ref g_U821 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_20031( ref l_U115, ref g_U918 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22082( "LEVEL_S_ROOFTOP_CP_04", ref g_U1028 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22082( "DAM_DEAD", ref g_U1028 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_24007( "SCRIPT_MISSION\ELEVATOR", ref g_U1221 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_24007( "SCRIPT_MISSION\S_FASHION_LOBBY", ref g_U1221 );
    if ((l_U121) AND (g_U722 != 3))
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_17182( 591762127, ref g_U821 );
    }
    else
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_17182( 897560185, ref g_U821 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_17182( -649839305, ref g_U821 );
    }
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_REQUEST_ML_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_17109(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_17182( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_17182(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_17249( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17507( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_17249(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17507( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17507( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17507( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19038( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17507( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17507( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_17507(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17568( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_17568(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_19038(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_20031(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_20105( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_20105(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_20159( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20420( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_20159(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20420( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20420( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20420( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19038( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20420( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20420( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_20420(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17568( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_22082(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_22134( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22386( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_22134(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22386( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22386( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22386( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19038( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22386( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22386( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_22386(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17568( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_24007(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_24060( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24315( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_24060(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24315( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24315( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24315( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19038( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24315( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24315( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_24315(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17568( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_ML_NONPERSISTENT_ASSETS */ void sub_26064()
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_REQUEST_ML_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26172( 36524849, ref g_U967 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26172( 1241506505, ref g_U967 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26172( 1565133149, ref g_U967 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26172( 931347920, ref g_U967 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26172( -2065237615, ref g_U967 );
     /* P_STREAMREQ_SCRIPT_STREAM_INSERT */ sub_29053( "S_FASHION_CONCIERGE_VIG", ref g_U1168 );
    if ((l_U121) AND (g_U722 != 3))
    {
         /* LOADSEAMLESSCUTSCENE */ sub_31225( "01_02_RP_concat", 0 );
    }
    AUDIO_MUSIC_REQUEST_ONESHOT( "ROOFTOP_ONESHOT_LOBBY", 0 );
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_REQUEST_ML_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_26172(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_26233( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26483( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_26233(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26483( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26483( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26483( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26483( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_19038( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_19038( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26483( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26483( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_26483(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17568( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_INSERT */ void sub_29053(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_IS_INDEX_AVAILABLE */ sub_29109( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing SCRIPT_STREAM asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_29373( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_INDEX_AVAILABLE */ int sub_29109(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_29373( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is already loading!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_29373( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (Result <= 2)
                {
                    if ((GET_SCRIPT_STREAM_STATE( uParam0, Result )) == 2)
                    {
                        DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                        DISPLAYF( "The SCRIPT_STREAM asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_29373( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The SCRIPT_STREAM asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                        (uParam1^)[Result]._fU32 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_19038( ref (uParam1^)[Result]._fU36 );
                        return Result;
                    }
                }
                else
                {
                    DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The SCRIPT_STREAM asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_29373( Result, uParam1, uParam2 );
                    return -1;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_29373( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (Result <= 2)
        {
            if ((GET_SCRIPT_STREAM_STATE( uParam0, iVar6 )) == 2)
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1537, uParam0 );
                DISPLAYF( "The SCRIPT_STREAM asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing SCRIPT_STREAM: {} ###", 1, 1537, uParam0 );
                StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
                (uParam1^)[iVar6]._fU32 = 3;
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_29373( iVar6, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar6;
            }
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The SCRIPT_STREAM - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ void sub_29373(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17568( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The SCRIPT_STREAM asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_31225(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_31730(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_32127(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_32529(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_32920(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ int sub_33334(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_33988(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_417( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_7162( uParam0,  /* PLAYER_PED_ID */ sub_892() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_CREATE_S_FAS_GG_PT_02 */ void sub_34482()
{
     /* WRITESCRIPTLOG */ sub_417( "CO", "P_CREATE_S_FAS_GG_PT_02", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_34620( ref g_U683, g_U720, 308103643, -416780591, 12.03000000, 17.96000000, -61.18000000, 1.50000000, 1.50000000, 2.50000000, "int_faslobby" );
     /* P_CREATECOLLECTIBLE */ sub_34777( ref g_U683 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_34620(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_417( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_34777(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_417( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_34860( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_417( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_417( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_34860( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_6811( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_35130( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_417( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_417( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_34860(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* CREATEPLACEMENT */ void sub_35130(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_ML_CREATE_ELEVATOR_DOORS */ void sub_35464()
{
     /* WRITESCRIPTLOG */ sub_417( "SA", "P_ML_CREATE_ELEVATOR_DOORS", 0 );
    l_U835 =  /* CREATEOBJECTNOOFFSET */ sub_35563( -1098942219, l_U836, l_U839, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( l_U835, 1 );
    ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U835, ref g_U1571 );
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_35563(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_35696( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* LOADMODEL */ void sub_35696(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_9263( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_ML_CREATE_CRASH_DOORS */ void sub_36156()
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_CREATE_CRASH_DOORS start", 0 );
    l_U553 =  /* CREATEOBJECTNOOFFSET */ sub_35563( -1585064135, -8.68900000, 46.80000000, -60.49500000, 0, 0, 0, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U553 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U553, ref g_U1571 );
        FREEZE_OBJECT_POSITION( l_U553, 1 );
    }
    l_U554 =  /* CREATEOBJECTNOOFFSET */ sub_35563( -1182267595, -8.68900000, 49.20000000, -60.49500000, 0, 0, 0, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U554 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U554, ref g_U1571 );
        FREEZE_OBJECT_POSITION( l_U554, 1 );
    }
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_CREATE_CRASH_DOORS end", 0 );
    return;
}

/* F_ML_0102RP_PRECUTSCENESETUP */ int sub_36915()
{
    if (l_U745._fU52)
    {
        l_U772 = 1;
    }
    if ( /* F_ML_0102RP_CREATEPEDS */ sub_36976())
    {
        return 1;
        break;
    }
    return 0;
}

/* F_ML_0102RP_CREATEPEDS */ int sub_36976()
{
    switch (l_U772)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_417( "GA", "e_ML_0102_PedSpawnState = ENTITY_STATE_INIT", 0 );
        l_U773 = 0;
         /* WRITESCRIPTLOG */ sub_417( "GA", "e_ML_0102_PedSpawnState = ENTITY_STATE_CREATING", 0 );
        l_U772 = 2;
        break;
        case 2:
        l_U801[l_U773] =  /* CREATEPED */ sub_37193( ref l_U774[l_U773] );
        if (l_U773 == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_9654( l_U801[l_U773], 68019059, 25000, 0, 0 );
        }
        if (NOT (IS_PED_DEAD( l_U801[l_U773] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U801[l_U773], 1 );
        }
         /* P_DEACTIVATEPED */ sub_38010( l_U801[l_U773] );
        l_U773++;
        if (l_U773 >= 2)
        {
             /* WRITESCRIPTLOG */ sub_417( "GA", "e_ML_0102_PedSpawnState = ENTITY_STATE_POST_CREATE_SETUP", 0 );
            l_U772 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_38251( ref l_U801, "pi_ML_0102_Ped" );
         /* WRITESCRIPTLOG */ sub_417( "GA", "e_ML_0102_PedSpawnState = ENTITY_STATE_COMPLETE", 0 );
        l_U772 = 4;
        break;
    }
    if (l_U772 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

/* CREATEPED */ void sub_37193(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_35696( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_37684( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_37785( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_37684(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_37785(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_38010(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_38251(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_ML_0102RP_CUTSCENEREGISTRATION */ void sub_38506()
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_0102RP_CutsceneRegistration start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
    {
         /* WRITESCRIPTLOG */ sub_417( "CCB", "Registering the Player ped.", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_892(), g_U1333[3], g_U1450[3] );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_892(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_IDLE" );
        if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 0 ) ))
        {
             /* WRITESCRIPTLOG */ sub_417( "CCB", "Registering the player ped's weapon.", 0 );
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 0 ), "W_PI_PT92_Aa_H", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_417( "CCB", "The player ped's weapon is NOT valid!!!", 0 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U801[0] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U801[0], "P_RT_SecG_M", 1 );
        if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( l_U801[0], 0, 0 ) ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( l_U801[0], 0, 0 ), "W_PI_PT92_Aa_H^1", 0 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U801[1] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U801[1], "P_RT_SecG_M^1", 1 );
    }
    CUTSCENE_ENABLE_SKIP( 0 );
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_0102RP_CutsceneRegistration end", 0 );
    return;
}

/* P_ML_0102RP_HANDDLECUTSCENE */ void sub_39173()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    if (l_U745._fU52)
    {
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
         /* P_ACTIVATEPEDARRAY */ sub_39240( ref l_U801 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
        {
            APPLY_PLAYER_PRELOAD_VARIATION(  /* PLAYER_PED_ID */ sub_892(), 0 );
            SET_PED_SWEAT(  /* PLAYER_PED_ID */ sub_892(), 1.00000000, 0.00000000 );
            RESET_PED_GORE(  /* PLAYER_PED_ID */ sub_892() );
            SET_PED_PTFX_SPLASH_OUT_SPECIAL_EFFECT( 1 );
        }
         /* P_PLAYER_HOLSTER_WEAPONS */ sub_39500( ref uVar2, 1, 1 );
        SET_CAM_VIEW_MODE( 0 );
        SET_FORCED_AIM_INTENTION_DIRECTION( 0.02719300, 0.99629000, -0.00154100 );
        SET_FORCED_FORWARD_DIRECTION( 0.00000000, 1.00000000, 0.00000000 );
    }
    if (NOT l_U804)
    {
        if (GET_CUTSCENE_TIME_MS() >= 31411)
        {
            l_U804 = 1;
            FREEZE_TIME_OF_DAY( 18, 0 );
        }
    }
    if (NOT l_U805)
    {
        if (GET_CUTSCENE_TIME_MS() >= 21780)
        {
             /* WRITESCRIPTLOG */ sub_417( "GA", "Suspending music ROOFTOP_SONG_03 ROOFTOP_SONG_03_1 over 12 seconds.", 0 );
            AUDIO_MUSIC_SUSPEND( 12000 );
            l_U805 = 1;
        }
    }
    if (NOT l_U806)
    {
        if (GET_CUTSCENE_TIME_MS() >= 28692)
        {
             /* P_STREAMREQ_MODELNAMES_INSERT */ sub_17182( 897560185, ref g_U821 );
             /* P_STREAMREQ_MODELNAMES_INSERT */ sub_17182( -649839305, ref g_U821 );
             /* WRITESCRIPTLOG */ sub_417( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_2 mood. Fade in 5 sec", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_2", "", 0.00000000, 5000, -1, -1082130432, 0 );
            l_U806 = 1;
        }
    }
    if ((NOT l_U807) AND (l_U806))
    {
        if ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_31730( ref g_U821 ))
        {
            if (GET_CUTSCENE_TIME_MS() >= 37000)
            {
                 /* WRITESCRIPTLOG */ sub_417( "GA", "Making 01_02_RP skippable.", 0 );
                CUTSCENE_ENABLE_SKIP( 1 );
                l_U807 = 1;
            }
        }
    }
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_39240(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_39292( (uParam0^)[I] );
    }
    return;
}

/* P_ACTIVATEPED */ void sub_39292(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_PLAYER_HOLSTER_WEAPONS */ void sub_39500(int iParam0, int iParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;

     /* RESET_WEAPON_CONFIG */ sub_39539( iParam0 );
    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )) == 0)
    {
        uVar5 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_39740( uVar5 )) == 1)
            {
                ref iParam0->_fU0->_fU0 = uVar5;
                ref iParam0->_fU0->_fU4 = GET_WEAPON_TYPE( uVar5 );
            }
            else if (( /* IS_WEAPON_TWO_HANDED */ sub_39994( uVar5 )) == 1)
            {
                ref iParam0->_fU24->_fU0 = uVar5;
                ref iParam0->_fU24->_fU4 = GET_WEAPON_TYPE( uVar5 );
            }
        }
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar6 )) == 1)
        {
            ref iParam0->_fU12->_fU0 = uVar6;
            ref iParam0->_fU12->_fU4 = GET_WEAPON_TYPE( uVar6 );
        }
        uVar7 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_892(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
        {
            ref iParam0->_fU36->_fU0 = uVar7;
            ref iParam0->_fU36->_fU4 = GET_WEAPON_TYPE( uVar7 );
        }
        uVar8 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_892(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar8 )) == 1)
        {
            ref iParam0->_fU48->_fU0 = uVar8;
            ref iParam0->_fU48->_fU4 = GET_WEAPON_TYPE( uVar8 );
        }
        uVar9 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_892(), 2 );
        if ((GET_DOES_WEAPON_EXIST( uVar9 )) == 1)
        {
            ref iParam0->_fU60->_fU0 = uVar9;
            ref iParam0->_fU60->_fU4 = GET_WEAPON_TYPE( uVar9 );
        }
    }
    if (iParam1 == 0)
    {
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )) == 0)
        {
            uVar10 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar10 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 0, uParam2 );
            }
            uVar11 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 1, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar11 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 1, uParam2 );
            }
        }
    }
    else if (iParam1 == 1)
    {
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )) == 0)
        {
            uVar12 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar12 )) == 1)
            {
                if (( /* IS_WEAPON_TWO_HANDED */ sub_39994( uVar12 )) == 1)
                {
                    SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 0, uParam2 );
                }
            }
            uVar13 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 1, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar13 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 1, uParam2 );
            }
        }
    }
    return;
}

/* RESET_WEAPON_CONFIG */ void sub_39539(int iParam0)
{
    ref iParam0->_fU0->_fU0 = 0;
    ref iParam0->_fU0->_fU4 = 0;
    ref iParam0->_fU12->_fU0 = 0;
    ref iParam0->_fU12->_fU4 = 0;
    ref iParam0->_fU24->_fU0 = 0;
    ref iParam0->_fU24->_fU4 = 0;
    ref iParam0->_fU36->_fU0 = 0;
    ref iParam0->_fU36->_fU4 = 0;
    ref iParam0->_fU48->_fU0 = 0;
    ref iParam0->_fU48->_fU4 = 0;
    ref iParam0->_fU60->_fU0 = 0;
    ref iParam0->_fU60->_fU4 = 0;
    return;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_39740(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* IS_WEAPON_TWO_HANDED */ int sub_39994(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == -2075384407) || ((iVar3 == 10648147) || ((iVar3 == 1224272620) || ((iVar3 == 1478009203) || ((iVar3 == 1964270085) || ((iVar3 == -110877124) || ((iVar3 == 427207702) || ((iVar3 == 319712764) || ((iVar3 == 514118749) || ((iVar3 == -184942895) || ((iVar3 == -168327769) || ((iVar3 == 434544317) || ((iVar3 == -1659006841) || ((iVar3 == 930042831) || ((iVar3 == 1001413062) || ((iVar3 == 377623895) || ((iVar3 == -1312131151) || ((iVar3 == -1787162676) || ((iVar3 == 724901397) || ((iVar3 == 57534114) || ((iVar3 == 840671040) || ((iVar3 == 1308526797) || ((iVar3 == -1074756423) || ((iVar3 == 1992962408) || (iVar3 == -1013714740)))))))))))))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* CUTSYS_DEFAULT_POSTCUTSCENE */ int sub_41405()
{
    return 1;
}

/* P_ML_0102RP_PREPAREBLENDOUT */ void sub_41454()
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_0102RP_PrepareBlendout start", 0 );
    FREEZE_TIME_OF_DAY( 18, 0 );
    SET_PED_PTFX_SPLASH_OUT_SPECIAL_EFFECT( 0 );
     /* CLEANPEDARRAY */ sub_6534( ref l_U801 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_41576( 591762127, ref g_U821 );
    SET_CAM_VIEW_MODE( 0 );
    l_U124._fU64 = 1;
    if (NOT l_U121)
    {
         /* TELEPORTPED */ sub_42075(  /* PLAYER_PED_ID */ sub_892(), g_U1333[3], g_U1450[3] );
    }
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U1486[3], 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U1522[3], 1065353216, 0 );
    CAMERA_PLAY_ANIMATED( "LEVEL_S_ROOFTOP_CP_04", "B_OUT_01_02_RP_CAM", 0, 0, 0, 0, 0, 0, 0 );
    SET_FORCED_AIM_INTENTION_DIRECTION( 0.02719300, 0.99629000, -0.00154100 );
    SET_FORCED_FORWARD_DIRECTION( 0.00000000, 1.00000000, 0.00000000 );
     /* WRITESCRIPTLOG */ sub_417( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_2_3 mood. Fade in 8 sec, out 5 sec", 0 );
    AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_2_3", "", 0.00000000, 8000, 5000, -1082130432, 0 );
    l_U574 = 1;
    l_U242 = 1;
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_0102RP_PrepareBlendout end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_41576(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3686( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* TELEPORTPED */ void sub_42075(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* F_ML_0102RP_HANDLEBLENDOUT */ int sub_42535()
{
    if (l_U745._fU52)
    {
        DO_SCREEN_FADE_IN( 0 );
    }
    if ( /* F_ML_SPAWN_DEAD_BODIES */ sub_42596())
    {
        if ( /* F_ML_SPAWN_LOBBY_ENEMIES */ sub_43996())
        {
            if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_ROOFTOP_CP_04", "B_OUT_01_02_RP_CAM" )) - 1))
            {
                SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U1486[3], 1065353216, 0 );
                SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U1522[3], 1065353216, 0 );
                CAMERA_FREEZE_FRAME( 1, 1000, 0, 0 );
                 /* WRITESCRIPTLOG */ sub_417( "GA", "Playing audio music one shot ROOFTOP_ONESHOT_LOBBY", 0 );
                AUDIO_MUSIC_PLAY_ONESHOT();
                return 1;
            }
        }
    }
    return 0;
}

/* F_ML_SPAWN_DEAD_BODIES */ int sub_42596()
{
    int[4] iVar2;

    array(ref iVar2, 4);
    iVar2[0] = 7;
    iVar2[1] = 3;
    iVar2[2] = 11;
    iVar2[3] = 0;
    switch (l_U574)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_417( "GA", "e_ML_DeadBody_SpawnState = ENTITY_STATE_INIT", 0 );
        l_U575 = 0;
         /* WRITESCRIPTLOG */ sub_417( "GA", "e_ML_DeadBody_SpawnState = ENTITY_STATE_CREATING", 0 );
        l_U574 = 2;
        break;
        case 2:
        l_U629[l_U575] =  /* CREATEPED */ sub_37193( ref l_U576[l_U575] );
        if (NOT (IS_PED_DEAD( l_U629[l_U575] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U629[l_U575], ref g_U1571 );
             /* P_CREATE_DEAD_BODY */ sub_42921( l_U629[l_U575], iVar2[l_U575] );
        }
        l_U575++;
        if (l_U575 >= 4)
        {
             /* WRITESCRIPTLOG */ sub_417( "GA", "e_ML_DeadBody_SpawnState = ENTITY_STATE_COMPLETE", 0 );
            l_U574 = 4;
        }
        break;
    }
    if (l_U574 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

/* P_CREATE_DEAD_BODY */ void sub_42921(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
         /* WRITE_STRING */ sub_9263( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

/* F_ML_SPAWN_LOBBY_ENEMIES */ int sub_43996()
{
    unknown uVar2;

    switch (l_U242)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_417( "GA", "e_ML_LobbyEnemySpawnState = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_44138( ref l_U302, 1056964608, 0 );
        l_U243 = 0;
         /* WRITESCRIPTLOG */ sub_417( "GA", "e_ML_LobbyEnemySpawnState = ENTITY_STATE_CREATING", 0 );
        l_U242 = 2;
        break;
        case 2:
        l_U297[l_U243] =  /* CREATEPED */ sub_37193( ref l_U244[l_U243] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_44647( l_U297[l_U243], ref l_U302 );
        if (NOT (IS_PED_DEAD( l_U297[l_U243] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U297[l_U243], ref g_U1571 );
            SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U297[l_U243], 0 );
            SET_PED_PATH_CAN_DROP_FROM_HEIGHT( l_U297[l_U243], 0 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U297[l_U243], 1 );
        }
         /* P_DEACTIVATEPED */ sub_38010( l_U297[l_U243] );
        l_U243++;
        if (l_U243 >= 4)
        {
             /* WRITESCRIPTLOG */ sub_417( "GA", "e_ML_LobbyEnemySpawnState = ENTITY_STATE_POST_CREATE_SETUP", 0 );
            l_U242 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_38251( ref l_U297, "pi_ML_Lobby_Enemy" );
        if (NOT (IS_PED_DEAD( l_U297[0] )))
        {
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_45334( ref l_U297[0], "AIT_NOVICE", 3, 25 );
            uVar2 =  /* F_GIVEPEDWEAPON */ sub_9654( l_U297[0], 68019059, 25000, 0, 0 );
            SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 25 );
        }
        if (NOT (IS_PED_DEAD( l_U297[1] )))
        {
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_45334( ref l_U297[1], "AIT_NOVICE", 3, 20 );
            uVar2 =  /* F_GIVEPEDWEAPON */ sub_9654( l_U297[1], 68019059, 25000, 0, 0 );
            SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 25 );
            SET_PED_ALERTNESS( l_U297[1], 3 );
        }
        if (NOT (IS_PED_DEAD( l_U297[2] )))
        {
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_45334( ref l_U297[2], "AIT_NOVICE", 3, 20 );
            uVar2 =  /* F_GIVEPEDWEAPON */ sub_9654( l_U297[2], 68019059, 25000, 0, 0 );
            SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 25 );
            SET_PED_ALERTNESS( l_U297[2], 3 );
        }
        if (NOT (IS_PED_DEAD( l_U297[3] )))
        {
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_45334( ref l_U297[3], "AIT_NOVICE", 3, 25 );
            uVar2 =  /* F_GIVEPEDWEAPON */ sub_9654( l_U297[3], -168327769, 25000, 0, 0 );
            SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 25 );
            SET_PED_ALERTNESS( l_U297[3], 3 );
        }
         /* WRITESCRIPTLOG */ sub_417( "GA", "e_ML_LobbyEnemySpawnState = ENTITY_STATE_COMPLETE", 0 );
        l_U242 = 4;
        break;
    }
    if (l_U242 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_44138(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_44647(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_9263( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_44138( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_44138( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_SET_PED_TEMPLATE_AND_RANGES */ void sub_45334(unknown uParam0, unknown uParam1, float fParam2, float fParam3)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    return;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_46113(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_417( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_46337( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 46234, 46284, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_46234()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_46284()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_46337(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* DISABLETIMER */ void sub_46670(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_46748(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_1793( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_1943( uParam0 );
    return;
}

/* P_ML_PLAY_ELEVATOR_BELL */ void sub_46825()
{
     /* WRITESCRIPTLOG */ sub_417( "SA", "P_ML_PLAY_ELEVATOR_BELL", 0 );
    l_U873 = GET_SOUND_ID();
    PLAY_SOUND_FROM_OBJECT( l_U873, "PUBLIC_ELEVATOR_BELL", l_U835 );
    return;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_46962(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_417( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_417( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_417( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_417( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_417( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_417( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_31225( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_417( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_47853( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_47853( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_417( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_48397( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_47853( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_48777( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_48777( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* NIS_PRE_SETUP */ void sub_47853(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_930(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_892(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_892() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_892(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_48397(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_892(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_892(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_892(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_48777(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_930(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_892(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_48875();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_48875()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_892(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_892(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_49232(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_417( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_417( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_10428( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_49523( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_50000( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_50000( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50260( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_50000( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50260( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50260( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_50000( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50260( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50260( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50260( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_50000( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50260( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50260( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50260( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50260( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_51840( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_417( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_49523(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7443( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_417( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_417( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_50000(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_50260(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_51840(int iParam0)
{
     /* WRITE_STRING */ sub_9263( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_51928( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_52005( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_52005( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_52005( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_52005( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_52005( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_52875( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU52 );
     /* WRITE_STRING */ sub_9263( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU96 );
     /* WRITE_STRING */ sub_9263( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU100 );
     /* WRITE_STRING */ sub_9263( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU104 );
     /* WRITE_STRING */ sub_9263( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU108 );
     /* WRITE_STRING */ sub_9263( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU112 );
     /* WRITE_STRING */ sub_9263( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU116 );
     /* WRITE_STRING */ sub_9263( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU120 );
     /* WRITE_STRING */ sub_9263( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU124 );
     /* WRITE_STRING */ sub_9263( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU128 );
     /* WRITE_STRING */ sub_9263( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_52174( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_52174( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_52174( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_51928(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_52005(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_52174(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_52875(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_START_SP_CHALLENGES */ void sub_53844()
{
     /* WRITESCRIPTLOG */ sub_417( "CCB", "P_START_SP_CHALLENGES", 0 );
    return;
}

/* P_ML_RELEASE_ELEVATOR_BELL_SOUND */ void sub_53922()
{
     /* WRITESCRIPTLOG */ sub_417( "SA", "P_ML_RELEASE_ELEVATOR_BELL_SOUND", 0 );
     /* P_SAFE_STOP_SOUND */ sub_5891( l_U873, 0 );
     /* P_SAFE_RELEASE_SOUND_ID */ sub_6074( ref l_U873 );
    return;
}

/* P_ML_OPEN_ELEVATOR_DOORS */ void sub_54041()
{
     /* WRITESCRIPTLOG */ sub_417( "SA", "P_ML_OPEN_ELEVATOR_DOORS", 0 );
    PLAY_OBJECT_ANIM( l_U835, "P_RP_ElvAnm_Aa_H", "fs_objmodels", 1000.00000000, 0, 1 );
    SET_OBJECT_ANIM_CURRENT_TIME( l_U835, "P_RP_ElvAnm_Aa_H", "fs_objmodels", 0.00000000 );
    SET_OBJECT_ANIM_SPEED( l_U835, "P_RP_ElvAnm_Aa_H", "fs_objmodels", 1.00000000 );
    l_U874 = GET_SOUND_ID();
    PLAY_SOUND_FROM_OBJECT( l_U874, "PUBLIC_ELEVATOR_DOOR_OPEN", l_U835 );
    return;
}

/* F_ML_CONCIERGE */ int sub_54426()
{
    switch (l_U556)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_417( "MF", "e_ML_Concierge_SpawnState = ENTITY_STATE_INIT", 0 );
        l_U557 = 0;
         /* WRITESCRIPTLOG */ sub_417( "MF", "e_ML_Concierge_SpawnState = ENTITY_STATE_CREATING", 0 );
        l_U556 = 2;
        break;
        case 2:
        l_U572[l_U557] =  /* CREATEPED */ sub_37193( ref l_U558[l_U557] );
        if (NOT (IS_PED_DEAD( l_U572[l_U557] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U572[l_U557], ref g_U1571 );
            SET_PED_AS_ONE_SHOT_KILL( l_U572[l_U557], 1 );
            SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( l_U572[l_U557], 1 );
            if ((IS_GERMAN_VERSION() == 1) || (IS_JAPANESE_GAME() == 1))
            {
                SET_PED_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP( l_U572[l_U557], 0, 0 );
                SET_PED_GORE_FROM_PLAYER( l_U572[l_U557], 0 );
            }
        }
        l_U557++;
        if (l_U557 >= 1)
        {
             /* WRITESCRIPTLOG */ sub_417( "MF", "e_ML_Concierge_SpawnState = ENTITY_STATE_COMPLETE", 0 );
            l_U556 = 4;
        }
        break;
    }
    if (l_U556 == 4)
    {
        l_U556 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_ML_START_VIG_03B */ void sub_54940()
{
     /* WRITESCRIPTLOG */ sub_417( "MF", "P_ML_START_VIG_03B - START", 0 );
    if (NOT (IS_PED_DEAD( l_U572[0] )))
    {
        ISEQ_REGISTER_ENTITY( 36524849, "ML_CIV", l_U572[0], 0 );
        ISEQ_START( 36524849 );
         /* P_STREAMREQ_SCRIPT_STREAM_PLAY_FROM_PED */ sub_55113( l_U572[0], "S_FASHION_CONCIERGE_VIG", ref g_U1168 );
    }
     /* WRITESCRIPTLOG */ sub_417( "MF", "P_ML_START_VIG_03B - END", 0 );
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_PLAY_FROM_PED */ void sub_55113(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_5170( uParam1, uParam2 ))
    {
        iVar5 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_5379( uParam1, uParam2 );
        if (NOT (iVar5 == -1))
        {
            if (NOT (IS_PED_DEAD( uParam0 )))
            {
                DISPLAYF( "[CCB]### Playing the SCRIPT_STREAM from ped: {} ###", 1, 1281, ref (uParam2^)[iVar5]._fU0 );
                PLAY_SCRIPT_STREAM_FROM_PED( uParam0, iVar5 );
            }
            else
            {
                DISPLAYF( "The ped is NOT valid!!!", 0 );
            }
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam1 );
            SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam1 );
        SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* P_ML_HANDLE_ELEVATOR_NEAR_CAMERA */ void sub_55697()
{
    if (l_U124._fU64)
    {
        if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_55762( l_U124 )))
        {
             /* RESETTIMER */ sub_2652( ref l_U145 );
             /* STARTTIMER */ sub_1943( ref l_U154 );
            l_U124._fU64 = 0;
        }
    }
    else if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_55929( ref l_U124, 0 ))
    {
         /* RESETTIMER */ sub_2652( ref l_U154 );
         /* STARTTIMER */ sub_1943( ref l_U145 );
    }
    if ( /* ISTIMERDONE */ sub_2076( ref l_U154 ))
    {
        SET_CAM_VIEW_MODE( 1 );
    }
    if ( /* ISTIMERDONE */ sub_2076( ref l_U145 ))
    {
        SET_CAM_VIEW_MODE( 0 );
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_55762(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_55805(  /* PLAYER_PED_ID */ sub_892(), uParam0 );
}

/* F_ISPEDINTRIGGERBOX */ int sub_55805(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_55929(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_55805(  /* PLAYER_PED_ID */ sub_892(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* P_ML_HANDLE_VIG_03B_CORPSE */ void sub_56134()
{
    if (NOT (IS_PED_DEAD( l_U572[0] )))
    {
        if ((ISEQ_QUERY_ENTITY_STATE( 36524849, "ML_CIV", 6 )) || (ISEQ_QUERY_ENTITY_STATE( 36524849, "ML_CIV", 5 )))
        {
            SET_PED_CORPSE_FROM_ANIM( l_U572[0], "LEVEL_S_ROOFTOP_CP_04", "VIG_03B_RP", 1.00000000, 0 );
        }
    }
    return;
}

/* F_ML_CAN_PLAYER_SEE_ELEVATOR_ENEMY */ int sub_56322()
{
    if (NOT (IS_PED_DEAD( l_U297[0] )))
    {
        if (NOT (IS_PED_ON_SCREEN( l_U297[0], 1 )))
        {
            return 0;
        }
    }
    return 1;
}

/* P_ML_ELEVATOR_ENEMY_RUN_OFF */ void sub_56431()
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_ELEVATOR_ENEMY_RUN_OFF start", 0 );
     /* P_ACTIVATEPED */ sub_39292( l_U297[0] );
    if (NOT (IS_PED_DEAD( l_U297[0] )))
    {
        SET_PED_FLAG_LOCK_TO_COVER( l_U297[0], 1 );
        REGISTER_TARGET( l_U297[0],  /* PLAYER_PED_ID */ sub_892() );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U297[0], 0 );
        ISEQ_REGISTER_ENTITY( 1241506505, "GMED1", l_U297[0], 0 );
        ISEQ_START( 1241506505 );
        SET_PED_VISIBLE( l_U297[0], 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( l_U297[0], 0 );
    }
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_ELEVATOR_ENEMY_RUN_OFF end", 0 );
    return;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_57143(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_57181( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_57290( 0,  /* PLAYER_PED_ID */ sub_892(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_57290( 1,  /* PLAYER_PED_ID */ sub_892(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_57543( uParam0, uParam1, 8, 1 );
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_57181(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_57290(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_57543(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_57588( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_57588(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_57675( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_57675(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_57727( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_58245( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_57727(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_58245(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_ML_CLOSE_ELEVATOR_DOORS */ void sub_58464()
{
     /* WRITESCRIPTLOG */ sub_417( "SA", "P_ML_CLOSE_ELEVATOR_DOORS", 0 );
    PLAY_OBJECT_ANIM( l_U835, "P_RP_ElvAnm_Aa_H", "fs_objmodels", 1000.00000000, 0, 1 );
    SET_OBJECT_ANIM_CURRENT_TIME( l_U835, "P_RP_ElvAnm_Aa_H", "fs_objmodels", 1.00000000 );
    SET_OBJECT_ANIM_SPEED( l_U835, "P_RP_ElvAnm_Aa_H", "fs_objmodels", -1.00000000 );
    l_U874 = GET_SOUND_ID();
    PLAY_SOUND_FROM_OBJECT( l_U874, "PUBLIC_ELEVATOR_DOOR_OPEN", l_U835 );
    return;
}

/* F_ISPLAYERINTRIGGERREGION */ void sub_58768(int iParam0, unknown uParam1)
{
    int Result;
    int I;
    int J;

    Result = 0;
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            if ( /* F_ISPLAYERINTRIGGERBOX */ sub_55762( iParam0->_fU0[I] ))
            {
                Result = 1;
            }
        }
    }
    if ((uParam1) AND (Result))
    {
        for ( J = 0; J < iParam0->_fU508; J++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[J]._fU0, 0 );
        }
    }
    iParam0->_fU548 = 1;
    return Result;
}

/* P_ML_START_LOBBY_ENEMIES_WAVE_B */ void sub_59040()
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_START_LOBBY_ENEMIES_WAVE_B start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
    {
         /* P_ACTIVATEPED */ sub_39292( l_U297[1] );
        if (NOT (IS_PED_DEAD( l_U297[1] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( l_U297[1], 1 );
            REGISTER_TARGET( l_U297[2],  /* PLAYER_PED_ID */ sub_892() );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U297[1], 0 );
            ISEQ_REGISTER_ENTITY( 1565133149, "GMED", l_U297[1], 0 );
        }
         /* P_ACTIVATEPED */ sub_39292( l_U297[2] );
        if (NOT (IS_PED_DEAD( l_U297[2] )))
        {
            REGISTER_TARGET( l_U297[2],  /* PLAYER_PED_ID */ sub_892() );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U297[2], 0 );
            ISEQ_REGISTER_ENTITY( 1565133149, "GMED1", l_U297[2], 0 );
        }
        ISEQ_START( 1565133149 );
    }
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_START_LOBBY_ENEMIES_WAVE_B end", 0 );
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_59497(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3686( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ void sub_60429(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            if (IS_PED_DEAD( (uParam0^)[I] ))
            {
                Result++;
            }
        }
    }
    return Result;
}

/* P_ML_START_LOBBY_ENEMY_WAVE_C */ void sub_60647()
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_START_LOBBY_ENEMY_WAVE_C start", 0 );
     /* P_ACTIVATEPED */ sub_39292( l_U297[3] );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() ))) AND (NOT (IS_PED_DEAD( l_U297[3] ))))
    {
        SET_PED_SUGGESTED_COVER_POINT( l_U297[3], "lobby", "LobbyCorner01" );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U297[3], 0 );
        REGISTER_TARGET( l_U297[3],  /* PLAYER_PED_ID */ sub_892() );
        TASK_COMBAT_PED( l_U297[3],  /* PLAYER_PED_ID */ sub_892() );
    }
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_START_LOBBY_ENEMY_WAVE_C end", 0 );
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_61642(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* P_START_CHECKPOINT_THREAD */ void sub_61779(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* P_ML_OPEN_HALLWAY_DOORS */ void sub_61995()
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_OPEN_HALLWAY_DOORS start", 0 );
     /* P_OPENDOOR */ sub_16481( ref l_U163, 1, 0, 1065353216 );
     /* P_SETDOORLATCH */ sub_16645( ref l_U163, 1 );
     /* P_OPENDOOR */ sub_16481( ref l_U170, 0, 0, 1065353216 );
     /* P_SETDOORLATCH */ sub_16645( ref l_U170, 1 );
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_OPEN_HALLWAY_DOORS end", 0 );
    return;
}

/* P_ML_START_DOOR_CRASH_ENEMY */ void sub_62175()
{
    unknown uVar2;

     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_START_DOOR_CRASH_ENEMY start", 0 );
    l_U521 =  /* CREATEPED */ sub_37193( ref l_U508 );
    uVar2 =  /* F_GIVEPEDWEAPON */ sub_9654( l_U521, 724901397, 25000, 0, 0 );
    SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 25 );
     /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_45334( ref l_U521, "AIT_NOVICE", 2, 6 );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() ))) AND (NOT (IS_PED_DEAD( l_U521 ))))
    {
        SET_ROOM_FOR_PED_BY_NAME( l_U521, ref g_U1579 );
        SET_PED_ALERTNESS( l_U521, 3 );
        SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U521, 0 );
        SET_PED_PATH_CAN_DROP_FROM_HEIGHT( l_U521, 0 );
        SET_PED_CAN_TRIGGER_BULLET_CAM( l_U521, 1 );
        REGISTER_TARGET( l_U521,  /* PLAYER_PED_ID */ sub_892() );
        ISEQ_REGISTER_ENTITY( 931347920, "GMED", l_U521, 0 );
        ISEQ_REGISTER_ENTITY( 931347920, "DOOR_L", l_U553, 1 );
        ISEQ_START( 931347920 );
        ISEQ_REGISTER_ENTITY( -2065237615, "DOOR_R", l_U554, 1 );
        ISEQ_START( -2065237615 );
        PLAY_PED_AMBIENT_SPEECH( l_U521, "SWEAR_ANGRY", 0, 0, 0, 0, 30000 );
    }
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_57181( ref l_U543 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )))
    {
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_57290( 0,  /* PLAYER_PED_ID */ sub_892(), "MAX", ref l_U543, 2, 0 );
    }
    if (NOT (IS_PED_DEAD( l_U521 )))
    {
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_57290( 1, l_U521, "M1_CS_18_AVG", ref l_U543, 2, 0 );
    }
     /* PLAY_SINGLE_SPEECH */ sub_57543( "SRTP_VIG04A", ref l_U543, 7, 1 );
    PLAY_SOUND_FROM_COORD( -1, "S_FASHION_LOBBY_DOOR_KICK", -7.57000000, 47.97000000, -60.32000000 );
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_ML_START_DOOR_CRASH_ENEMY end", 0 );
    return;
}

/* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ void sub_63393(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )) == 0)
    {
        iVar3 = 0;
        uVar4 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 0)
        {
            iVar3 = 1;
        }
        if ((( /* IS_WEAPON_SINGLE_HANDED */ sub_39740( uVar4 )) == 0) AND ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1))
        {
            iVar3 = 1;
        }
        if (iVar3 == 1)
        {
            uVar5 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_63541();
            if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_892(), uVar5, 0, uParam0 );
            }
        }
    }
    return;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_63541()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_892() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_39740( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_892(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_892(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_892(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* F_UNLOADCUTSCENEANDLOADNEWCUTSCENE */ int sub_64016(unknown uParam0, unknown uParam1)
{
    if (CUTSCENE_IS_LOADED( uParam1 ))
    {
        PRINTSTRING( uParam1 );
         /* WRITE_STRING */ sub_9263( " is loaded." );
        return 1;
    }
    else if ((CUTSCENE_NAMED_IS_LOADING( uParam0 )) || (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRINTSTRING( "Unloading cutscene " );
         /* WRITE_STRING */ sub_9263( uParam0 );
        CLEAR_NAMED_CUTSCENE( uParam0 );
    }
    else if (CUTSCENE_NAMED_IS_LOADING( uParam1 ))
    {
        PRINTSTRING( uParam1 );
         /* WRITE_STRING */ sub_9263( " is loading." );
    }
    else
    {
        PRINTSTRING( "Requesting cutscene " );
         /* WRITE_STRING */ sub_9263( uParam1 );
         /* LOADSEAMLESSCUTSCENE */ sub_31225( uParam1, 0 );
    };;;
    return 0;
}

/* CUTSYS_DEFAULT_PRECUTSCENESETUP */ int sub_64391()
{
    return 1;
}

/* CUTSYS_DEFAULT_CUTSCENEREGISTRATION */ void sub_64444()
{
    return;
}

/* P_ML_M07_HANDLECUTSCENE */ void sub_64500()
{
    if (l_U808._fU52)
    {
        AUDIO_MUSIC_SUSPEND( 5000 );
        ENABLE_WALLA_ZONE( "S_FASHION_WZ_PARKING_GARAGE_STAIRS", 0 );
    }
    return;
}

/* P_ML_M07_PREPAREBLENDOUT */ void sub_64618()
{
    DO_SCREEN_FADE_OUT( 0 );
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDOUT */ int sub_64671()
{
    return 1;
}

/* P_ML_DEBUG_TUNING_WIDGET */ void sub_64913()
{
    if (NOT l_U875)
    {
        START_WIDGET_GROUP( "Main Lobby Tuning" );
        START_WIDGET_GROUP( "Elevator Doors" );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_65034( ref l_U836, "Position", 1036831949 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_65034( ref l_U839, "Rotation", 1036831949 );
        ADD_WIDGET_BOOL( "Respawn doors", ref l_U876 );
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        l_U875 = 1;
    }
    if (l_U876)
    {
         /* CLEANOBJECT */ sub_6730( l_U835 );
         /* P_ML_CREATE_ELEVATOR_DOORS */ sub_35464();
        l_U876 = 0;
    }
    return;
}

/* P_ADD_WIDGET_VECTOR_SLIDER */ void sub_65034(int iParam0, unknown uParam1, unknown uParam2)
{
    START_WIDGET_GROUP( uParam1 );
    ADD_WIDGET_FLOAT_SLIDER( "x", iParam0 + 0, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "y", iParam0 + 4, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "z", iParam0 + 8, 60536, 5000, uParam2 );
    STOP_WIDGET_GROUP();
    return;
}

/* P_RELEASE_ML_ASSETS */ void sub_65307()
{
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_RELEASE_ML_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_65386( ref l_U110, ref g_U821 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_41576( 591762127, ref g_U821 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_41576( 897560185, ref g_U821 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_41576( -649839305, ref g_U821 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_65533( ref l_U115, ref g_U918 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_59497( "SCRIPT_MISSION\ELEVATOR", ref g_U1221 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_59497( "SCRIPT_MISSION\S_FASHION_LOBBY", ref g_U1221 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_66057( "LEVEL_S_ROOFTOP_CP_04", ref g_U1028 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_66057( "DAM_DEAD", ref g_U1028 );
     /* WRITESCRIPTLOG */ sub_417( "GA", "P_RELEASE_ML_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_65386(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_41576( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_65533(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_65607( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_65607(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3686( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_66057(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3686( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

