void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U40 = 0;
    l_U41 = 0;
    l_U42 = 1500;
    l_U70 = {0, 0, 0};
    StrCopy( ref l_U73, "DUMMY", 32 );
    l_U81 = 1;
    l_U86 = 0;
    l_U87 = 0;
    l_U88 = 0;
    l_U91 = 0;
    l_U182 = 0;
    l_U184 = 1;
    l_U185 = 0;
     /* WRITESCRIPTLOG */ sub_357( "SP", "Script s_fashion_L2A.sc is starting up...", 0 );
     /* P_L2A_POPULATE_VARIABLE_ARRAYS */ sub_475();
    l_U182 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_991();
        if (l_U185 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_11850();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_L2A */ sub_3771( 0 );
     /* P_RELEASE_L2A_ASSETS */ sub_59769();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_fashion_L2A" );
     /* WRITESCRIPTLOG */ sub_357( "SP", "Script s_fashion_L2A.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_357(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_L2A_POPULATE_VARIABLE_ARRAYS */ void sub_475()
{
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2A_POPULATE_VARIABLE_ARRAYS start", 0 );
    l_U172[0] = 897560185;
    l_U172[1] = -425284483;
    l_U172[2] = -1522400210;
    l_U172[3] = 1071653504;
    l_U172[4] = -1154707606;
    l_U172[5] = -556953193;
    l_U172[6] = 1401124811;
    l_U180[0] = 68019059;
     /* P_L2_POPULATE_VEHICLE_DATA */ sub_672();
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2A_POPULATE_VARIABLE_ARRAYS end", 0 );
    return;
}

/* P_L2_POPULATE_VEHICLE_DATA */ void sub_672()
{
     /* WRITESCRIPTLOG */ sub_357( "CCB", "P_INITIALIZE_VEHICLE_DATA", 0 );
    g_U1658[0] = 1071653504;
    g_U1662[0] = {-8.10000000, 76.75000000, -64.98000000};
    g_U1672[0] = 6.00000000;
    g_U1658[1] = -425284483;
    g_U1662[1] = {0.80000000, 76.70000000, -64.99000000};
    g_U1672[1] = -5.00000000;
    g_U1658[2] = -1522400210;
    g_U1662[2] = {-3.84000000, 63.32000000, -64.99000000};
    g_U1672[2] = -180.00000000;
    return;
}

/* P_HANDLE_FAILURE */ void sub_991()
{
    if (g_U723 == 4)
    {
        switch (l_U185)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1193()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
            {
                 /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1650();
                STOP_IMAGEFX( g_U1697, 0 );
                l_U185 = 1;
                 /* WRITESCRIPTLOG */ sub_357( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_1810())
            {
                l_U185 = 2;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_1870( 0 )) == 1)
            {
                l_U185 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
            {
                if ((g_U724[5]._fU40 != 4) AND (g_U724[5]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_357( "GA", "Shutting down script for Parking Level 2 B checkpoint.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_3455( ref g_U724[5] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U724[5]._fU32 );
                    g_U1264[5] = 0;
                }
                l_U185 = 3;
                 /* WRITESCRIPTLOG */ sub_357( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_357( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1130() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1130(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1092() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1092(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            CAMERA_CLEAR_POINT_AT_TARGET();
            RESET_FORCED_AIM_INTENTION_DIRECTION();
             /* P_CLEANUP_L2A */ sub_3771( 1 );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( ref g_U1635, 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( ref g_U1635, 0 ), GET_HASH_KEY( ref g_U1587 ) );
            l_U185 = 4;
             /* WRITESCRIPTLOG */ sub_357( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_357( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U136._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_7168( ref l_U136,  /* PLAYER_PED_ID */ sub_1092() );
            }
            l_U185 = 5;
             /* WRITESCRIPTLOG */ sub_357( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_357( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U182 = 1;
            l_U184 = 0;
            l_U185 = 0;
             /* WRITESCRIPTLOG */ sub_357( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_1092()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1130() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1130()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1193()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1092(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1130(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1130(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1092() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1092(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ void sub_1650()
{
    UI_SET( 15, 2, 1537, "animMainText", 257, 1 );
    return;
}

/* IS_RESTART_ACTIVE */ void sub_1810()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_1870(int iParam0)
{
    iParam0 = 1;
    switch (l_U41)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_1952( ref l_U43 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
            {
                l_U42 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_2086( ref l_U43, l_U42, 1, 1 );
             /* STARTTIMER */ sub_2236( ref l_U43 );
        }
        if ( /* ISTIMERDONE */ sub_2369( ref l_U43 ))
        {
             /* WRITESCRIPTLOG */ sub_357( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1130() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1130(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U41 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U41 = 2;
            }
            else
            {
                l_U41 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_357( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_2870();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_357( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_2870();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_1952(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_2086(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2236(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2369(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_2870()
{
     /* WRITESCRIPTLOG */ sub_357( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_2945( ref l_U43 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1130() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1130(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U40 = 0;
    l_U40 = l_U40;
    l_U41 = 0;
    return;
}

/* RESETTIMER */ void sub_2945(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_3455(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_L2A */ void sub_3771(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_CLEANUP_L2A start", 0 );
    ISEQ_TERMINATE( -2081177240 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3851( -2081177240, ref g_U967 );
    ISEQ_TERMINATE( -1276293108 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3851( -1276293108, ref g_U967 );
     /* P_ENABLE_POI */ sub_4945( ref l_U375, 0 );
    if ((CUTSCENE_NAMED_IS_LOADING( "MID_08_RP_concat" )) || (CUTSCENE_IS_LOADED( "MID_08_RP_concat" )))
    {
        CLEAR_NAMED_CUTSCENE( "MID_08_RP_concat" );
    }
    if (NOT bParam0)
    {
        UI_SET( 25, 2, 1537, "SPSlotLoader", 1537, "" );
    }
    if (bParam0)
    {
         /* P_SAFE_STOP_SOUND */ sub_6087( g_U1682, 0 );
         /* P_SAFE_RELEASE_SOUND_ID */ sub_6270( ref g_U1682 );
         /* P_SAFE_STOP_SOUND */ sub_6087( g_U1683, 0 );
         /* P_SAFE_RELEASE_SOUND_ID */ sub_6270( ref g_U1683 );
         /* CLEANPEDARRAY */ sub_6498( ref g_U1647 );
         /* CLEANPEDARRAY */ sub_6498( ref g_U1652 );
         /* CLEANVEHICLEARRAY */ sub_6665( ref g_U1654 );
         /* CLEANOBJECT */ sub_6812( g_U1680 );
         /* CLEANOBJECT */ sub_6812( g_U1681 );
    }
     /* P_STOP_SP_CHALLENGES */ sub_6878( bParam0 );
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_CLEANUP_L2A end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_3851(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3989( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_3989(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_ENABLE_POI */ void sub_4945(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if ((iParam0->_fU4 == 1) AND (iParam0->_fU320 == 1))
        {
             /* P_ENABLEPOIGLINT */ sub_5004( iParam0, 1 );
        }
        iParam0->_fU0 = 1;
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_5004( iParam0, 0 );
         /* P_ENABLEPOIINTERACTIONTEXT */ sub_5223( iParam0, 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) == 0)
        {
            TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_1092() );
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1092(), 0 );
                iParam0->_fU328 = 0;
            }
        }
        iParam0->_fU8 = 0;
        iParam0->_fU0 = 0;
    }
    return;
}

/* P_ENABLEPOIGLINT */ void sub_5004(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if (iParam0->_fU12 != nil)
        {
            if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
            {
                ENABLE_GLINT( iParam0->_fU12, 1 );
            }
            else
            {
                iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
            }
        }
        else
        {
            iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
        }
    }
    else if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            ENABLE_GLINT( iParam0->_fU12, 0 );
        }
    }
    return;
}

/* P_ENABLEPOIINTERACTIONTEXT */ void sub_5223(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
        SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
        if ((iParam0->_fU72 == 0) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU68 == 1)))
        {
            SET_INTERACTIONTEXT_VISIBLE( 0 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
        else
        {
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_5403( iParam0 );
        if (iParam0->_fU332 == 1)
        {
            SET_INTERACTIONTEXT_PULSE( 1 );
            SET_INTERACTIONTEXT_PULSE_PERIOD( iParam0->_fU336 );
        }
    }
    else
    {
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
    }
    return;
}

/* P_UPDATEINTERACTIONTEXTAVAILABLE */ void sub_5403(int iParam0)
{
    if (iParam0->_fU60 == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 0 );
        iParam0->_fU56 = 0;
    }
    else if (iParam0->_fU56 == 1)
    {
        if (( /* F_ISACTIONINGAVAILABLE */ sub_5499( iParam0 )) == 0)
        {
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
    }
    else if (( /* F_ISACTIONINGAVAILABLE */ sub_5499( iParam0 )) == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 1 );
        iParam0->_fU56 = 1;
    };;;
    return;
}

/* F_ISACTIONINGAVAILABLE */ int sub_5499(int iParam0)
{
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1130() )) == 0))
    {
        if (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_1092() )) == 1) || (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_1092() )) == 1) || (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_1092() )) == 1) || (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_1092() )) == 1) || (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1092() )) == 1) || (IS_PLAYER_SHOOTDODGING() == 1))))))
        {
            return 0;
        }
        if (iParam0->_fU304 == 0)
        {
            if ((IS_MONOLOGUE_PLAYING() == 1) || ((IS_ANY_SPEECH_PLAYING(  /* PLAYER_PED_ID */ sub_1092() )) == 1))
            {
                return 0;
            }
        }
        return 1;
    }
    return 0;
}

/* P_SAFE_STOP_SOUND */ void sub_6087(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
         /* WRITESCRIPTLOG */ sub_357( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_357( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

/* P_SAFE_RELEASE_SOUND_ID */ void sub_6270(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
         /* WRITESCRIPTLOG */ sub_357( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_357( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

/* CLEANPEDARRAY */ void sub_6498(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_6548( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_6548(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANVEHICLEARRAY */ void sub_6665(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANVEHICLE */ sub_6719( (uParam0^)[I] );
    }
    return;
}

/* CLEANVEHICLE */ void sub_6719(unknown uParam0)
{
    if (IS_VEHICLE_DEAD( uParam0 ))
    {
        ;
    }
    if (DOES_VEHICLE_EXIST( uParam0 ))
    {
        DELETE_VEHICLE( ref uParam0 );
    }
    return;
}

/* CLEANOBJECT */ void sub_6812(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_6878(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_357( "CCB", "P_STOP_SP_CHALLENGES", 0 );
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_7168(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_357( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_7387( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_8551( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8865( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9344( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8865( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9344( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8865( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9344( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9660( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9344( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9660( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9344( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_10232( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_10434( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1092(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_357( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_7387(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7449( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_7449(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_8551(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_8865(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9269( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_9269(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_9344(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_9660(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9269( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_10232(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_10434(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7449( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_10532( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_10532(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_11850()
{
    int iVar2;

    iVar2 = l_U182;
    if (g_U723 == 4)
    {
         /* P_HANDLE_SP_CHALLENGES */ sub_11897();
         /* P_HANDLE_VEHICLE_CHALLENGES */ sub_12282( ref g_U1654, ref g_U1676 );
    }
     /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_12631( ref g_U1647, -70.00000000, 0, 1 );
    switch (l_U182)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_357( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_13001();
         /* P_SET_STATIC_DATA */ sub_13220();
         /* P_INITIALIZE_SP_CHALLENGES */ sub_15476();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U182 = 2;
         /* WRITESCRIPTLOG */ sub_357( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_357( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_L2A_PERSISTENT_ASSETS */ sub_16296();
         /* P_REQUEST_L2A_NONPERSISTENT_ASSETS */ sub_25270();
        l_U182 = 3;
         /* WRITESCRIPTLOG */ sub_357( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_30304( ref g_U1221 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_29890( ref g_U967 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_29499( ref g_U1028 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_29097( ref g_U918 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_28700( ref g_U821 ))))))
        {
            if ((NOT l_U136._fU0) AND (g_U722 == 4))
            {
                l_U182 = 4;
                 /* WRITESCRIPTLOG */ sub_357( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U182 = 6;
                 /* WRITESCRIPTLOG */ sub_357( "SP", "eCheckpointState = CP_L2A_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_357( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U1264[4] = 1;
        l_U184 = 0;
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
        {
            FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1092(), 0 );
        }
        if (( /* HAS_SAVEFILE_LOADED */ sub_30947( ref l_U136 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_9660(  /* PLAYER_PED_ID */ sub_1092(), 68019059, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8865(  /* PLAYER_PED_ID */ sub_1092(), 68019059, 0, 200, 0 );
            l_U182 = 5;
             /* WRITESCRIPTLOG */ sub_357( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U182 = 6;
             /* WRITESCRIPTLOG */ sub_357( "SP", "eCheckpointState = CP_L2A_PRE_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1092(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1092(), 0, 0 ) )))
            {
                l_U182 = 6;
                 /* WRITESCRIPTLOG */ sub_357( "GA", "eCheckpointState = CP_L2A_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if (l_U183)
        {
            l_U208 = 1;
            l_U264 = 1;
             /* CLEANPEDARRAY */ sub_6498( ref g_U1647 );
             /* CLEANPEDARRAY */ sub_6498( ref g_U1652 );
        }
        if ( /* F_L2A_CREATE_FRONT_GATE_ENEMIES */ sub_31515())
        {
            if ( /* F_L2A_CREATE_BACK_GATE_ENEMIES */ sub_34573())
            {
                 /* P_L2_CREATE_LOWER_GATE */ sub_35390( 1 );
                 /* P_L2_CREATE_VEHICLES */ sub_36277();
                l_U182 = 7;
                 /* WRITESCRIPTLOG */ sub_357( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 7:
        if (g_U1264[4])
        {
            if (l_U184)
            {
                if (CUTSCENE_IS_LOADED( "MID_08_RP_concat" ))
                {
                    l_U182 = 8;
                     /* WRITESCRIPTLOG */ sub_357( "GA", "eCheckpointState = CP_L2A_HANDLE_MID_08_RP", 0 );
                }
                else if (CUTSCENE_NAMED_IS_LOADING( "MID_08_RP_concat" ))
                {
                     /* WRITESCRIPTLOG */ sub_357( "GA", "Waiting for cutscene MID_08_RP_concat to load.", 0 );
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_357( "GA", "Requesting cutscene MID_08_RP_concat to load.", 0 );
                    PRE_STREAM_SEAMLESS_CUTSCENE( "MID_08_RP_concat" );
                }
            }
            else
            {
                l_U182 = 8;
                 /* WRITESCRIPTLOG */ sub_357( "GA", "eCheckpointState = CP_L2A_HANDLE_MID_08_RP", 0 );
            }
        }
        break;
        case 8:
        if (l_U183)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_43513( ref l_U492, "MID_08_RP_concat", 37755, 37808, 39754, 40211, 40260, 42405, 250, 0 );
            if (l_U184)
            {
                 /* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ sub_44057( ref l_U492, ref g_U1635, ref g_U1587 );
                l_U492._fU104 = 0;
                l_U492._fU4 = 2;
            }
            else
            {
                l_U492._fU4 = 7;
            }
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_44189( ref l_U492 ))
        {
            if (NOT l_U136._fU0)
            {
                g_U723 = 4;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_46459( ref l_U136, g_U723,  /* PLAYER_PED_ID */ sub_1092(), g_U1333[4], g_U1450[4], g_U1486[4], g_U1522[4], 1 );
            }
             /* P_START_SP_CHALLENGES */ sub_51057();
            l_U182 = 9;
             /* WRITESCRIPTLOG */ sub_357( "GA", "eCheckpointState = CP_L2A_GAMEPLAY_COMBAT", 0 );
        }
        break;
        case 9:
        if (l_U183)
        {
             /* P_L2A_FRONT_GATE_ENEMIES_RELEASE_TO_COMBAT */ sub_51302();
        }
         /* P_GBL_HANDLE_PAINKILLER_TUTORIAL */ sub_51608();
         /* P_L2_HANDLE_STOPPING_GATE_SOUND */ sub_52621();
         /* P_L2A_HANDLE_LOWER_GATE */ sub_42463();
        if (NOT (IS_PED_DEAD( g_U1647[2] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( g_U1647[2], 47 )) == 3)
            {
                 /* WRITESCRIPTLOG */ sub_357( "GA", "Unlocking i_L2A_FrontGate_RightRun from cover", 0 );
                SET_PED_FLAG_LOCK_TO_COVER( g_U1647[2], 0 );
                PED_FINISH_ACTION_INTENTION( g_U1647[2], 47 );
            }
        }
        if (NOT (IS_PED_DEAD( g_U1647[3] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( g_U1647[3], 47 )) == 3)
            {
                 /* WRITESCRIPTLOG */ sub_357( "GA", "Unlocking i_L2A_FrontGate_RightCover from cover", 0 );
                SET_PED_FLAG_LOCK_TO_COVER( g_U1647[3], 0 );
                PED_FINISH_ACTION_INTENTION( g_U1647[3], 47 );
            }
        }
        if (NOT (IS_PED_DEAD( g_U1647[1] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( g_U1647[1], 47 )) == 3)
            {
                 /* WRITESCRIPTLOG */ sub_357( "GA", "Unlocking i_L2A_FrontGate_LeftCover from cover", 0 );
                SET_PED_FLAG_LOCK_TO_COVER( g_U1647[1], 0 );
                PED_FINISH_ACTION_INTENTION( g_U1647[1], 47 );
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_53379( ref l_U281, 0 ))
        {
            if (NOT (IS_PED_DEAD( g_U1652[0] )))
            {
                 /* WRITESCRIPTLOG */ sub_357( "GA", "Unlocking left side back gate enemy from cover.", 0 );
                SET_PED_FLAG_LOCK_TO_COVER( g_U1652[0], 0 );
            }
        }
        if (NOT l_U207)
        {
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_53694( ref g_U1647 )) == 1)
            {
                 /* WRITESCRIPTLOG */ sub_357( "GA", "Assigning bullet cam to last enemy.", 0 );
                 /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_53867( ref g_U1647 );
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
                BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
                l_U207 = 1;
            }
        }
        if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_53694( ref g_U1647 )) == 0)
        {
            if (NOT l_U302)
            {
                 /* P_L2A_BACK_GATE_ENEMIES_RETREAT */ sub_54085();
                l_U302 = 1;
            }
            if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (NOT (IS_BULLET_CAMERA_RUNNING( 0 ))))
            {
                l_U182 = 10;
                 /* WRITESCRIPTLOG */ sub_357( "GA", "eCheckpointState = CP_L2A_GAMEPLAY_OPEN_GATE", 0 );
            }
        }
        break;
        case 10:
        if (l_U183)
        {
             /* P_START_CHECKPOINT_THREAD */ sub_54659( ref g_U724[5] );
             /* P_L2A_SWAP_GATE_BUTTON */ sub_54714( 1 );
        }
         /* P_L2_HANDLE_STOPPING_GATE_SOUND */ sub_52621();
        if (l_U324 == 0)
        {
            l_U324 = 1;
        }
         /* P_L2A_HANDLE_BUTTON_TUTORIAL_NIS */ sub_54948();
        if (l_U375._fU8 != 2)
        {
            if ( /* ISTIMERDONE */ sub_2369( ref l_U356 ))
            {
                 /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_51984( "TUT_BUTTON_B", 0 );
            }
        }
        if ((NOT l_U374) AND (l_U356._fU16))
        {
            if (l_U375._fU8 == 2)
            {
                 /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1650();
                l_U374 = 1;
            }
        }
        if ( /* F_HANDLE_POI */ sub_57746( ref l_U375 ))
        {
             /* P_L2A_SWAP_GATE_BUTTON */ sub_54714( 0 );
            CAMERA_CLEAR_POINT_AT_TARGET();
            g_U1264[5] = 1;
            l_U182 = 11;
             /* WRITESCRIPTLOG */ sub_357( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 11:
        if (g_U723 == 5)
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U182 = 0;
             /* WRITESCRIPTLOG */ sub_357( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U182 != iVar2)
    {
        l_U183 = 1;
    }
    else
    {
        l_U183 = 0;
    }
    return;
}

/* P_HANDLE_SP_CHALLENGES */ void sub_11897()
{
     /* P_HANDLE_GLOBAL_SP_CHALLENGES */ sub_11932();
    return;
}

/* P_HANDLE_GLOBAL_SP_CHALLENGES */ void sub_11932()
{
    switch (g_U1646)
    {
        case 0:
        DISPLAYF( "[CCB] ### eYouveGotToBelieveFail - STATE_CHALLENGE_IDLE ###", 0 );
        g_U1646 = 1;
        break;
        case 1:
        if (IS_HUD_PREFERENCE_SWITCHED_ON())
        {
            DISPLAYF( "[CCB] ### IS_HUD_PREFERENCE_SWITCHED_ON is TRUE... ###", 0 );
            DISPLAYF( "[CCB] ### eYouveGotToBelieveFail - STATE_CHALLENGE_COMPLETE ###", 0 );
            g_U1646 = 2;
        }
        break;
        case 2: break;
    }
    return;
}

/* P_HANDLE_VEHICLE_CHALLENGES */ void sub_12282(unknown uParam0, unknown uParam1)
{
    int J;
    int I;
    int iVar6;

    for ( J = 0; J <= ((uParam0^) - 1); J++ )
    {
        for ( I = 0; I <= 5; I++ )
        {
            if (NOT (uParam1^)[J])
            {
                if (NOT (IS_VEHICLE_DEAD( (uParam0^)[J] )))
                {
                    if (IS_VEHICLE_TYRE_BURST( (uParam0^)[J], I ))
                    {
                        (uParam1^)[J] = 1;
                        DISPLAYF( "[CCB] ### The vehicle {} tire {} was popped... ###", 2, 513, J, 513, I );
                        iVar6 = (SCRIPT_VAR_HASH_GET_INT( -1911384788 )) + 1;
                        SCRIPT_VAR_HASH_SET_INT( -1911384788, iVar6 );
                        DISPLAYF( "[CCB] ### The current TiresPopped value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -1911384788 ) );
                    }
                }
            }
        }
    }
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_12631(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_12697( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_12697(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_6548( uParam0 );
            }
        }
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_13001()
{
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U183 = 1;
    l_U519 = 0;
    l_U208 = 0;
    l_U209 = 0;
    l_U207 = 0;
    l_U264 = 0;
    l_U265 = 0;
    l_U302 = 0;
    l_U324 = 0;
     /* CREATETIMER */ sub_2086( ref l_U356, 750, 1, 0 );
     /* CREATETIMER */ sub_2086( ref l_U365, 500, 1, 0 );
    l_U374 = 0;
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_13220()
{
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13326( ref l_U210[0], -16.95000000, 68.44800000, -65.00000000, 90.00000000, -1417552080, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13326( ref l_U210[1], -10.78400000, 70.21500000, -65.00000000, 90.00000000, -586225623, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13326( ref l_U210[2], -11.25100000, 71.68100000, -65.00000000, 90.00000000, -805284285, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13326( ref l_U210[3], -11.13500000, 65.84100000, -65.00000000, 90.00000000, 1508404636, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13326( ref l_U266[0], -11.37000000, 70.79000000, -65.00000000, 25.00000000, 423935782, 7, 3, 2, 0, 1 );
     /* P_CREATETRIGGERBOX */ sub_13735( ref l_U461, "TRIGGER_ROOFTOP_LEVEL2_LOWER_PARKING_BUTTON", -16.47000000, 74.71000000, -65.13000000, 3.00000000, 3.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13735( ref l_U281, "tb_L2A_BackGateLeftEnemyExposed", -19.78000000, 67.00000000, -65.00000000, 9.03000000, 14.00000000, 4.03000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13735( ref l_U303, "tb_L2A_StartButtonTutorial", -20.36000000, 70.09000000, -65.00000000, 15.00000000, 20.00000000, 3.80000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14091( ref l_U263, "teth_L2A_FrontGateSide", -28.73000000, 67.00000000, -65.00000000, 26.67000000, 26.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14091( ref l_U280, "teth_L2A_BackGateLeftCover", -12.85000000, 77.00000000, -65.00000000, 5.10000000, 6.00000000, 4.02000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATEPOISTRUCTCOORDTRIGGER */ sub_14303( ref l_U375, 1, -15.45100000, 74.50000000, -63.80000000, -15.45100000, 74.50000000, -63.80000000, l_U461, 1.50000000, 0, 0 );
     /* P_SET_INTERACTIVE_TEXT */ sub_15071( ref l_U375, 30, "POI_GARAGEDOOR" );
     /* P_CREATEDOORSTRUCT */ sub_15320( ref l_U186[0], 165185988, -36.29997000, 53.91101000, -63.90016000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_15320( ref l_U186[1], -937562161, -38.69997000, 53.91222000, -63.90017000, 0.00000000, 0.00000000, 0.00000000 );
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_13326(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_13735(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_14091(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATEPOISTRUCTCOORDTRIGGER */ void sub_14303(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31)
{
     /* P_CREATEBLANKPOISTRUCT */ sub_14350( iParam0, uParam30 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU100 = {uParam5};
    iParam0->_fU112 = uParam29;
    iParam0->_fU88 = 1;
    iParam0->_fU216 = {uParam8};
    iParam0->_fU320 = uParam31;
    iParam0->_fU20 = {uParam2};
     /* P_CREATEPOIGLINT */ sub_14741( iParam0 );
    return;
}

/* P_CREATEBLANKPOISTRUCT */ void sub_14350(int iParam0, unknown uParam1)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = 0;
    iParam0->_fU8 = 0;
    iParam0->_fU12 = nil;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU52 = 1;
    iParam0->_fU56 = 1;
    iParam0->_fU60 = 0;
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = 0;
    iParam0->_fU80 = 0;
    iParam0->_fU84 = 0;
    iParam0->_fU100 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU112 = 0.00000000;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU96 = 0;
    iParam0->_fU200 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU212 = 0.00000000;
    iParam0->_fU300 = 0;
    iParam0->_fU304 = 1;
    iParam0->_fU308 = 0;
    iParam0->_fU324 = 1;
    iParam0->_fU328 = 0;
    iParam0->_fU340 = 0;
    iParam0->_fU336 = 0.20000000;
    return;
}

/* P_CREATEPOIGLINT */ void sub_14741(int iParam0)
{
    if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            REMOVE_GLINT( iParam0->_fU12 );
        }
    }
    iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
     /* P_INITPOIGLINT */ sub_14839( iParam0 );
    return;
}

/* P_INITPOIGLINT */ void sub_14839(int iParam0)
{
    if (iParam0->_fU0 == 1)
    {
        if (iParam0->_fU320 == 1)
        {
            if ((iParam0->_fU8 > 0) AND (iParam0->_fU4 == 0))
            {
                 /* P_ENABLEPOIGLINT */ sub_5004( iParam0, 1 );
            }
            else if ((iParam0->_fU8 < 2) AND (iParam0->_fU4 == 1))
            {
                 /* P_ENABLEPOIGLINT */ sub_5004( iParam0, 1 );
            }
            else if ((iParam0->_fU8 == 1) AND (iParam0->_fU4 == 2))
            {
                 /* P_ENABLEPOIGLINT */ sub_5004( iParam0, 1 );
            }
            else
            {
                 /* P_ENABLEPOIGLINT */ sub_5004( iParam0, 0 );
            };;;
        }
        else
        {
             /* P_ENABLEPOIGLINT */ sub_5004( iParam0, 0 );
        }
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_5004( iParam0, 0 );
    }
    return;
}

/* P_SET_INTERACTIVE_TEXT */ void sub_15071(int iParam0, unknown uParam1, unknown uParam2)
{
    StrCopy( ref iParam0->_fU32, uParam2, 16 );
    iParam0->_fU48 = uParam1;
     /* P_INITINTERACTIVETEXT */ sub_15127( iParam0 );
    return;
}

/* P_INITINTERACTIVETEXT */ void sub_15127(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND (iParam0->_fU0 == 1))
    {
        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
        {
            SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
            SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
    }
    return;
}

/* P_CREATEDOORSTRUCT */ void sub_15320(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

/* P_INITIALIZE_SP_CHALLENGES */ void sub_15476()
{
     /* WRITESCRIPTLOG */ sub_357( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
     /* P_RESET_BOOL_ARRAY */ sub_15560( ref g_U1676 );
    if (NOT (SCRIPT_VAR_HASH_EXISTS( -1911384788 )))
    {
         /* WRITESCRIPTLOG */ sub_357( "CCB", "Creating the TiresPopped script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( -1911384788 );
        DISPLAYF( "[CCB] ### The current TiresPopped value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -1911384788 ) );
        if (SCRIPT_VAR_HASH_EXISTS( -1911384788 ))
        {
             /* WRITESCRIPTLOG */ sub_357( "CCB", "The TiresPopped script variable was successfully created...", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_357( "CCB", "The TiresPopped script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_357( "CCB", "The TiresPopped script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( -1911384788, 0 );
        DISPLAYF( "[CCB] ### The current TiresPopped value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -1911384788 ) );
    }
    return;
}

/* P_RESET_BOOL_ARRAY */ void sub_15560(unknown uParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_357( "CCB", "P_RESET_BOOL_ARRAY", 0 );
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = 0;
    }
    return;
}

/* P_REQUEST_L2A_PERSISTENT_ASSETS */ void sub_16296()
{
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_REQUEST_L2A_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_16399( ref l_U172, ref g_U821 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_19321( ref l_U180, ref g_U918 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_21365( "LEVEL_S_FAS_00", ref g_U1028 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_21365( "LEVEL_S_ROOFTOP_CP_05", ref g_U1028 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_23319( "SCRIPT_MISSION\S_FASHION_PARKING_GARAGE", ref g_U1221 );
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_REQUEST_L2A_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_16399(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_16472( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_16472(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_16539( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_16797( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_16539(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_16797( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_16797( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_16797( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18328( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_16797( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_16797( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_16797(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_16858( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_16858(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_18328(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_19321(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19395( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_19395(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_19449( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_19710( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_19449(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_19710( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_19710( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_19710( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18328( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_19710( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_19710( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_19710(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_16858( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_21365(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_21417( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_21669( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_21417(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_21669( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_21669( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_21669( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18328( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_21669( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_21669( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_21669(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_16858( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_23319(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_23372( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_23627( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_23372(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_23627( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_23627( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_23627( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18328( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_23627( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_23627( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_23627(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_16858( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_L2A_NONPERSISTENT_ASSETS */ void sub_25270()
{
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_REQUEST_L2A_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_25380( -2081177240, ref g_U967 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_25380( -1276293108, ref g_U967 );
    if ((l_U184) AND (g_U722 != 4))
    {
         /* LOADSEAMLESSCUTSCENE */ sub_28227( "MID_08_RP_concat", 0 );
    }
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_REQUEST_L2A_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_25380(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_25441( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25691( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_25441(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25691( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25691( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25691( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25691( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_18328( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_18328( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25691( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_25691( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_25691(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_16858( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_28227(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_28700(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_29097(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_29499(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_29890(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_30304(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_30947(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_357( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_7168( uParam0,  /* PLAYER_PED_ID */ sub_1092() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* F_L2A_CREATE_FRONT_GATE_ENEMIES */ int sub_31515()
{
    switch (l_U208)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_357( "GA", "e_L2A_FrontGate_EnemySpawnState = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_31670( ref l_U201, 1056964608, 0 );
        l_U209 = 0;
         /* WRITESCRIPTLOG */ sub_357( "GA", "e_L2A_FrontGate_EnemySpawnState = ENTITY_STATE_CREATING", 0 );
        l_U208 = 2;
        break;
        case 2:
        g_U1647[l_U209] =  /* CREATEPED */ sub_32152( ref l_U210[l_U209] );
        if (NOT (IS_PED_DEAD( g_U1647[l_U209] )))
        {
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_33153( g_U1647[l_U209], ref l_U201 );
             /* F_GIVEPEDWEAPON */ sub_9660( g_U1647[l_U209], 68019059, 25000, 0, 0 );
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_33596( ref g_U1647[l_U209], "AIT_NOVICE", -1082130432, -1082130432 );
             /* P_TETHERPED */ sub_33735( ref l_U263, g_U1647[l_U209], 1 );
            SET_PED_PATH_CAN_USE_CLIMBOVERS( g_U1647[l_U209], 0 );
            SET_PED_PATH_CAN_DROP_FROM_HEIGHT( g_U1647[l_U209], 0 );
            SET_PED_ALERTNESS( g_U1647[l_U209], 3 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U1647[l_U209], 1 );
        }
         /* P_DEACTIVATEPED */ sub_33912( g_U1647[l_U209] );
        l_U209++;
        if (l_U209 >= 4)
        {
             /* WRITESCRIPTLOG */ sub_357( "GA", "e_L2A_FrontGate_EnemySpawnState = ENTITY_STATE_POST_CREATE_SETUP", 0 );
            l_U208 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_34168( ref g_U1647, "pi_L2_FrontGate_Enemy" );
        if (NOT (IS_PED_DEAD( g_U1647[0] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( g_U1647[0], ref g_U1587 );
        }
        if (NOT (IS_PED_DEAD( g_U1647[1] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( g_U1647[1], ref g_U1595 );
        }
        if (NOT (IS_PED_DEAD( g_U1647[2] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( g_U1647[2], ref g_U1595 );
        }
        if (NOT (IS_PED_DEAD( g_U1647[3] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( g_U1647[3], ref g_U1595 );
        }
         /* WRITESCRIPTLOG */ sub_357( "GA", "e_L2A_FrontGate_EnemySpawnState = ENTITY_STATE_COMPLETE", 0 );
        l_U208 = 4;
        break;
    }
    if (l_U208 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_31670(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* CREATEPED */ void sub_32152(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_32334( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_32883( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_32984( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_32334(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_9269( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_32883(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_32984(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_33153(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_9269( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_31670( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_31670( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_SET_PED_TEMPLATE_AND_RANGES */ void sub_33596(unknown uParam0, unknown uParam1, float fParam2, float fParam3)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    return;
}

/* P_TETHERPED */ void sub_33735(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_33912(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_34168(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* F_L2A_CREATE_BACK_GATE_ENEMIES */ int sub_34573()
{
    unknown uVar2;

    switch (l_U264)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_357( "GA", "e_L2A_BackGate_EnemySpawnState = ENTITY_STATE_INIT", 0 );
        l_U265 = 0;
         /* WRITESCRIPTLOG */ sub_357( "GA", "e_L2A_BackGate_EnemySpawnState = ENTITY_STATE_CREATING", 0 );
        l_U264 = 2;
        break;
        case 2:
        g_U1652[l_U265] =  /* CREATEPED */ sub_32152( ref l_U266[l_U265] );
        if (NOT (IS_PED_DEAD( g_U1652[l_U265] )))
        {
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_33153( g_U1652[l_U265], ref l_U201 );
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_33596( ref g_U1652[l_U265], "AIT_NOVICE", -1082130432, -1082130432 );
             /* P_TETHERPED */ sub_33735( ref l_U280, g_U1652[l_U265], 1 );
            uVar2 =  /* F_GIVEPEDWEAPON */ sub_9660( g_U1652[l_U265], 68019059, 25000, 0, 0 );
            if (GET_DOES_WEAPON_EXIST( uVar2 ))
            {
                SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 100 );
            }
            SET_PED_PATH_CAN_USE_CLIMBOVERS( g_U1652[l_U265], 0 );
            SET_PED_PATH_CAN_DROP_FROM_HEIGHT( g_U1652[l_U265], 0 );
            SET_PED_AS_ONE_SHOT_KILL( g_U1652[l_U265], 1 );
            SET_PED_ALERTNESS( g_U1652[l_U265], 3 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U1652[l_U265], 1 );
            SET_ROOM_FOR_PED_BY_NAME( g_U1652[l_U265], ref g_U1595 );
        }
         /* P_DEACTIVATEPED */ sub_33912( g_U1652[l_U265] );
        l_U265++;
        if (l_U265 >= 1)
        {
             /* WRITESCRIPTLOG */ sub_357( "GA", "e_L2A_BackGate_EnemySpawnState = ENTITY_STATE_POST_CREATE_SETUP", 0 );
            l_U264 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_34168( ref g_U1652, "pi_L2_BackGate_Enemy" );
         /* WRITESCRIPTLOG */ sub_357( "GA", "e_L2A_BackGate_EnemySpawnState = ENTITY_STATE_COMPLETE", 0 );
        l_U264 = 4;
        break;
    }
    if (l_U264 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

/* P_L2_CREATE_LOWER_GATE */ void sub_35390(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2_CREATE_LOWER_GATE start", 0 );
    if (NOT (DOES_OBJECT_EXIST( g_U1680 )))
    {
        g_U1680 =  /* CREATEOBJECT */ sub_35525( -1154707606, -17.19400000, 70.00000000, -65.00000000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 1 );
        if (DOES_OBJECT_EXIST( g_U1680 ))
        {
            FREEZE_OBJECT_POSITION( g_U1680, 1 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U1680, ref g_U1587 );
            if (bParam0)
            {
                PLAY_OBJECT_ANIM( g_U1680, "Parkade_Gate_OPEN", "LEVEL_S_FAS_00", 0.00000000, 0, 1 );
                SET_OBJECT_ANIM_CURRENT_TIME( g_U1680, "Parkade_Gate_OPEN", "LEVEL_S_FAS_00", 1.00000000 );
            }
            else
            {
                PLAY_OBJECT_ANIM( g_U1680, "Parkade_Gate_CLOSE", "LEVEL_S_FAS_00", 0.00000000, 0, 1 );
                SET_OBJECT_ANIM_CURRENT_TIME( g_U1680, "Parkade_Gate_CLOSE", "LEVEL_S_FAS_00", 1.00000000 );
            }
        }
    }
    if (NOT (DOES_OBJECT_EXIST( g_U1681 )))
    {
        g_U1681 =  /* CREATEOBJECT */ sub_35525( -556953193, -15.49500000, 74.64400000, -63.71700000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 1 );
        if (DOES_OBJECT_EXIST( g_U1681 ))
        {
            FREEZE_OBJECT_POSITION( g_U1681, 1 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U1681, ref g_U1587 );
        }
    }
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2_CREATE_LOWER_GATE end", 0 );
    return;
}

/* CREATEOBJECT */ void sub_35525(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_32334( uParam0, 1 );
    }
    Result = CREATE_OBJECT( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_L2_CREATE_VEHICLES */ void sub_36277()
{
    int I;

     /* WRITESCRIPTLOG */ sub_357( "CCB", "P_CREATE_ROOFTOP_LEVEL2_VEHICLES", 0 );
    for ( I = 0; I <= (g_U1654 - 1); I++ )
    {
        if (NOT (DOES_VEHICLE_EXIST( g_U1654[I] )))
        {
             /* WRITESCRIPTLOG */ sub_357( "CCB", "Creating viRooftopLevel2Vehicle_:", 0 );
            PRINTINT( I );
            PRINTNL();
            g_U1654[I] =  /* CREATEVEHICLE */ sub_36492( g_U1658[I], g_U1662[I], g_U1672[I], 0, 0, 0 );
             /* P_L2_SETUP_VEHICLE */ sub_36815( ref g_U1654, I );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_357( "CCB", "The viRooftopLevel2Vehicle_ ped was already created.", 0 );
        }
    }
    return;
}

/* CREATEVEHICLE */ void sub_36492(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, int iParam5, unknown uParam6, unknown uParam7)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a vehicle with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_32334( uParam0, 1 );
    }
    Result = CREATE_VEHICLE( uParam0, uParam1, uParam4, uParam6, uParam7 );
    if (iParam5 == 1)
    {
        while ((DOES_VEHICLE_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for vehicle to exist: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if (DOES_VEHICLE_EXIST( Result ))
    {
        SET_PETROLTANK_BURN_RATE( Result, 125.00000000 );
    }
    return Result;
}

/* P_L2_SETUP_VEHICLE */ void sub_36815(unknown uParam0, int iParam1)
{
    if (NOT (IS_VEHICLE_DEAD( (uParam0^)[iParam1] )))
    {
        SET_ROOM_FOR_VEHICLE_BY_NAME( (uParam0^)[iParam1], ref g_U1595 );
        SET_VEHICLE_ON_GROUND_PROPERLY( (uParam0^)[iParam1] );
        SET_VEHICLE_FREEZE_AFTER_BLOWING_UP( (uParam0^)[iParam1], 1 );
        SET_VEHICLE_PROOFS( (uParam0^)[iParam1], 0, 0, 1, 0, 0 );
        SET_VEHICLE_CAN_BE_DAMAGED( (uParam0^)[iParam1], 1 );
        SET_VEHICLE_ONLY_DAMAGED_BY_PLAYER( (uParam0^)[iParam1], 1 );
        SET_VEHICLE_ENGINE_HEALTH( (uParam0^)[iParam1], 600.00000000 );
        SET_VEHICLE_PETROL_TANK_HEALTH( (uParam0^)[iParam1], 300.00000000 );
        SET_VEHICLE_DOORS_LOCKED( (uParam0^)[iParam1], 3 );
        SET_VEHICLE_LIGHTS( (uParam0^)[iParam1], 1 );
        if (iParam1 == 0)
        {
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 1, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 2, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 3, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 4, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 5, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 6, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 7, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 8, 1 );
            SET_VEHICLE_COLOUR_COMBINATION( (uParam0^)[iParam1], 0 );
        }
    }
    return;
}

/* CUTSYS_DEFAULT_PRECUTSCENESETUP */ int sub_37755()
{
    return 1;
}

/* P_L2A_M8_CUTSCENEREGISTRATION */ void sub_37808()
{
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2A_M8_CutsceneRegistration start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
    {
         /* WRITESCRIPTLOG */ sub_357( "CCB", "Registering the Player ped.", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_1092(), g_U1333[4], g_U1450[4] );
        CUTSCENE_REGISTER_SET_PLAYER_IN_COVER( "GenCover", "F771B893_D680D911_Corner1", 1, 1 );
        CUTSCENE_SET_COVER_CAMERA_DIRECTION( g_U1486[4], g_U1522[4] );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE(  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_38059(), "W_PI_Clt1911_Aa_H", 0 );
        if (NOT ( /* IS_WEAPON_SINGLE_HANDED */ sub_38163( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1092(), 0, 0 ) )))
        {
             /* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ sub_38562( 1 );
        }
        ISEQ_REGISTER_ENTITY( -2081177240, "player",  /* PLAYER_PED_ID */ sub_1092(), 0 );
        CUTSCENE_REGISTER_ISEQ( -2081177240 );
    }
    if (NOT (IS_PED_DEAD( g_U1647[0] )))
    {
        ISEQ_REGISTER_ENTITY( -1276293108, "GMED2", g_U1647[0], 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U1647[0], -16.11000000, 68.41000000, -65.00000000, l_U210[0]._fU12 );
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U1647[0], "G_CS_SOLD_D^3", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U1647[0], 0, 0 ), "W_PI_PT92_Aa_H^4", 0 );
    }
    if (NOT (IS_PED_DEAD( g_U1647[2] )))
    {
        ISEQ_REGISTER_ENTITY( -1276293108, "GMED", g_U1647[2], 0 );
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U1647[2], "G_CS_SOLD_D^2", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U1647[2], 0, 0 ), "W_PI_PT92_Aa_H^3", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U1647[2], -15.30000000, 71.45000000, -65.00000000, l_U210[2]._fU12 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U1647[2], 1 );
        CUTSCENE_REGISTER_SET_PED_IN_COVER( g_U1647[2], "GenCover", "F771B893_EFA68C98_Corner1", 0, 0 );
    }
    if (NOT (IS_PED_DEAD( g_U1647[3] )))
    {
        ISEQ_REGISTER_ENTITY( -1276293108, "GMED3", g_U1647[3], 0 );
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U1647[3], "G_CS_SOLD_D^1", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U1647[3], 0, 0 ), "W_PI_PT92_Aa_H^2", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U1647[3], -14.16000000, 67.28000000, -65.00000000, l_U210[3]._fU12 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U1647[3], 1 );
        CUTSCENE_REGISTER_SET_PED_IN_COVER( g_U1647[3], "GenCover", "F771B893_FD5C2803_Corner1", 0, 0 );
    }
    if (NOT (IS_PED_DEAD( g_U1647[1] )))
    {
        ISEQ_REGISTER_ENTITY( -1276293108, "GMED1", g_U1647[1], 0 );
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U1647[1], "G_CS_SOLD_D", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U1647[1], 0, 0 ), "W_PI_PT92_Aa_H^1", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U1647[1], -15.55000000, 69.22000000, -65.00000000, l_U210[1]._fU12 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U1647[1], 1 );
        CUTSCENE_REGISTER_SET_PED_IN_COVER( g_U1647[1], "GenCover", "F771B893_EB738302_Corner2", 0, 0 );
    }
    CUTSCENE_REGISTER_ISEQ( -1276293108 );
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2A_M8_CutsceneRegistration end", 0 );
    return;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_38059()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1092(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_38163( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1092(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1092(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1092(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_38163(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ void sub_38562(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) == 0)
    {
        iVar3 = 0;
        uVar4 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1092(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 0)
        {
            iVar3 = 1;
        }
        if ((( /* IS_WEAPON_SINGLE_HANDED */ sub_38163( uVar4 )) == 0) AND ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1))
        {
            iVar3 = 1;
        }
        if (iVar3 == 1)
        {
            uVar5 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_38059();
            if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_1092(), uVar5, 0, uParam0 );
            }
        }
    }
    return;
}

/* P_L2A_M8_HANDLECUTSCENE */ void sub_39754()
{
    if (l_U492._fU52)
    {
        if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1130() ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() ))))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1092(), 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1130(), 1 );
        }
         /* WRITESCRIPTLOG */ sub_357( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_1_2_4 mood.", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_1_2_4", "", 0.00000000, 5000, 3000, -1082130432, 0 );
         /* P_ACTIVATEPEDARRAY */ sub_40019( ref g_U1647 );
    }
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_40019(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_40071( (uParam0^)[I] );
    }
    return;
}

/* P_ACTIVATEPED */ void sub_40071(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* CUTSYS_DEFAULT_POSTCUTSCENE */ int sub_40211()
{
    return 1;
}

/* P_L2A_M8_PREPAREBLENDOUT */ void sub_40260()
{
    int I;

     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2A_M8_PrepareBlendout start", 0 );
    if ((NOT (ISEQ_QUERY_STATE( -2081177240, 3 ))) AND ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1130() ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))))
    {
        ISEQ_REGISTER_ENTITY( -2081177240, "player",  /* PLAYER_PED_ID */ sub_1092(), 0 );
         /* TELEPORTPED */ sub_40438(  /* PLAYER_PED_ID */ sub_1092(), g_U1333[4], g_U1450[4] );
        SNAP_PLAYER_TO_COVERPOINT(  /* PLAYER_ID */ sub_1130(), "GenCover", "F771B893_D680D911_Corner1", 1 );
        ISEQ_START( -2081177240 );
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U1486[4], 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U1522[4], 1065353216, 0 );
    }
    if (NOT (ISEQ_QUERY_STATE( -1276293108, 3 )))
    {
         /* P_ACTIVATEPEDARRAY */ sub_40019( ref g_U1647 );
        if (NOT (IS_PED_DEAD( g_U1647[0] )))
        {
             /* TELEPORTPED */ sub_40438( g_U1647[0], -16.11000000, 68.41000000, -65.00000000, l_U210[0]._fU12 );
            ISEQ_REGISTER_ENTITY( -1276293108, "GMED2", g_U1647[0], 0 );
        }
        if (NOT (IS_PED_DEAD( g_U1647[2] )))
        {
             /* TELEPORTPED */ sub_40438( g_U1647[2], -15.30000000, 71.45000000, -65.00000000, l_U210[2]._fU12 );
            ISEQ_REGISTER_ENTITY( -1276293108, "GMED", g_U1647[2], 0 );
        }
        if (NOT (IS_PED_DEAD( g_U1647[3] )))
        {
             /* TELEPORTPED */ sub_40438( g_U1647[3], -14.16000000, 67.28000000, -65.00000000, l_U210[3]._fU12 );
            ISEQ_REGISTER_ENTITY( -1276293108, "GMED3", g_U1647[3], 0 );
        }
        if (NOT (IS_PED_DEAD( g_U1647[1] )))
        {
             /* TELEPORTPED */ sub_40438( g_U1647[1], -15.55000000, 69.22000000, -65.00000000, l_U210[1]._fU12 );
            ISEQ_REGISTER_ENTITY( -1276293108, "GMED1", g_U1647[1], 0 );
        }
        ISEQ_START( -1276293108 );
        if (NOT (IS_PED_DEAD( g_U1647[2] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( g_U1647[2], 1 );
            TASK_COMBAT_SNAP_TO_COVER( g_U1647[2], "GenCover", "F771B893_EFA68C98_Corner1", 0 );
        }
        if (NOT (IS_PED_DEAD( g_U1647[3] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( g_U1647[3], 1 );
            TASK_COMBAT_SNAP_TO_COVER( g_U1647[3], "GenCover", "F771B893_FD5C2803_Corner1", 0 );
        }
        if (NOT (IS_PED_DEAD( g_U1647[1] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( g_U1647[1], 1 );
            TASK_COMBAT_SNAP_TO_COVER( g_U1647[1], "GenCover", "F771B893_EB738302_Corner2", 0 );
        }
    }
    for ( I = 0; I <= 3; I++ )
    {
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() ))) AND (NOT (IS_PED_DEAD( g_U1647[I] ))))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U1647[I], 0 );
            REGISTER_TARGET( g_U1647[I],  /* PLAYER_PED_ID */ sub_1092() );
        }
    }
     /* P_L2A_BACK_GATE_ENEMIES_INTO_COVER */ sub_41392();
    CAMERA_PLAY_ANIMATED( "LEVEL_S_ROOFTOP_CP_05", "B_OUT_MID_08_RP_CAM", 0, 0, 0, 0, 0.00000000, 0, 0 );
    if (NOT AUDIO_IS_MUSIC_PLAYING())
    {
         /* WRITESCRIPTLOG */ sub_357( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_1_2_4 mood.", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_1_2_4", 0, 0, -1, -1, -1082130432, 0 );
    }
     /* P_CLOSEDOOR */ sub_41923( ref l_U186[0], 1 );
     /* P_SETDOORLOCKED */ sub_42183( ref l_U186[0], 1 );
     /* P_CLOSEDOOR */ sub_41923( ref l_U186[1], 1 );
     /* P_SETDOORLOCKED */ sub_42183( ref l_U186[1], 1 );
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2A_M8_PrepareBlendout end", 0 );
    return;
}

/* TELEPORTPED */ void sub_40438(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_L2A_BACK_GATE_ENEMIES_INTO_COVER */ void sub_41392()
{
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2A_BACK_GATE_ENEMIES_INTO_COVER start", 0 );
     /* P_ACTIVATEPEDARRAY */ sub_40019( ref g_U1652 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
    {
        if (NOT (IS_PED_DEAD( g_U1652[0] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( g_U1652[0], 1 );
            TASK_COMBAT_MOVE_TO_COVER( g_U1652[0], "GenCover", "F771B893_B2BB12C2_Corner1", 0 );
            REGISTER_TARGET( g_U1652[0],  /* PLAYER_PED_ID */ sub_1092() );
        }
    }
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2A_BACK_GATE_ENEMIES_INTO_COVER end", 0 );
    return;
}

/* P_CLOSEDOOR */ void sub_41923(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_41949( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_42033( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_41949(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_42033(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORLOCKED */ void sub_42183(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_41949( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_42033( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* F_L2A_M8_HANDLEBLENDOUT */ int sub_42405()
{
    if (l_U492._fU52)
    {
        DO_SCREEN_FADE_IN( 0 );
    }
     /* P_L2A_HANDLE_LOWER_GATE */ sub_42463();
    if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_ROOFTOP_CP_05", "B_OUT_MID_08_RP_CAM" )) - 1))
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U1486[4], 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U1522[4], 1065353216, 0 );
        CAMERA_FREEZE_FRAME( 1, 500, 0, 0 );
        ISEQ_TERMINATE( -2081177240 );
         /* P_STREAMREQ_ISEQ_REMOVE */ sub_3851( -2081177240, ref g_U967 );
        return 1;
    }
    return 0;
}

/* P_L2A_HANDLE_LOWER_GATE */ void sub_42463()
{
    if (NOT l_U519)
    {
        if (IS_PED_DEAD( g_U1647[2] ))
        {
             /* WRITESCRIPTLOG */ sub_357( "GA", "Player shot gate closing enemy.  Closing gate for safety.", 0 );
             /* P_L2_ANIMATE_LOWER_GATE */ sub_42602( 0 );
            l_U519 = 1;
        }
        else if ((PED_GET_ACTION_INTENTION_STATUS( g_U1647[2], 48 )) == 3)
        {
             /* WRITESCRIPTLOG */ sub_357( "GA", "Gate closing enemy hit the button.", 0 );
             /* P_L2_ANIMATE_LOWER_GATE */ sub_42602( 0 );
            PED_FINISH_ACTION_INTENTION( g_U1647[2], 48 );
            l_U519 = 1;
        }
    }
    return;
}

/* P_L2_ANIMATE_LOWER_GATE */ void sub_42602(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2_ANIMATE_LOWER_GATE start", 0 );
    if (DOES_OBJECT_EXIST( g_U1680 ))
    {
        if (bParam0)
        {
            PLAY_OBJECT_ANIM( g_U1680, "Parkade_Gate_OPEN", "LEVEL_S_FAS_00", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( g_U1680, "Parkade_Gate_OPEN", "LEVEL_S_FAS_00", 0.00000000 );
            SET_OBJECT_ANIM_SPEED( g_U1680, "Parkade_Gate_OPEN", "LEVEL_S_FAS_00", 0.25000000 );
            g_U1682 = GET_SOUND_ID();
            PLAY_SOUND_FROM_OBJECT( g_U1682, "S_FASHION_PARKING_GARAGE_DOOR_OPEN", g_U1680 );
        }
        else
        {
            PLAY_OBJECT_ANIM( g_U1680, "Parkade_Gate_CLOSE", "LEVEL_S_FAS_00", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( g_U1680, "Parkade_Gate_CLOSE", "LEVEL_S_FAS_00", 0.00000000 );
            SET_OBJECT_ANIM_SPEED( g_U1680, "Parkade_Gate_CLOSE", "LEVEL_S_FAS_00", 0.25000000 );
            g_U1683 = GET_SOUND_ID();
            PLAY_SOUND_FROM_OBJECT( g_U1683, "S_FASHION_PARKING_GARAGE_DOOR_CLOSE", g_U1680 );
        }
    }
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2_ANIMATE_LOWER_GATE end", 0 );
    return;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_43513(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_357( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_43737( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 43634, 43684, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_43634()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_43684()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_43737(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ void sub_44057(int iParam0, unknown uParam1, unknown uParam2)
{
    iParam0->_fU68 = 1;
    iParam0->_fU72 = 1;
    iParam0->_fU76 = uParam1;
    iParam0->_fU80 = uParam2;
    iParam0->_fU24 = 1;
    return;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_44189(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_357( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_357( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_357( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_357( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_357( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_357( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_28227( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_357( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_45080( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_45080( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_357( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_45624( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_45080( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_46004( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_46004( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* NIS_PRE_SETUP */ void sub_45080(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1130(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1092(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1092() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1092(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_45624(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1092(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1092(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1092(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1092(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1092(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_46004(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1130(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1092(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_46102();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_46102()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1092(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1092(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1092(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1092(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_46459(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_357( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_357( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_10434( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_46750( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_47227( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_47227( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47487( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_47227( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47487( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47487( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_47227( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47487( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47487( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47487( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_47227( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47487( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47487( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47487( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47487( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_49067( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_357( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_46750(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7449( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_357( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_357( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_47227(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_47487(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_49067(int iParam0)
{
     /* WRITE_STRING */ sub_9269( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_49155( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_49232( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_49232( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_49232( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_49232( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_49232( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_50102( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU52 );
     /* WRITE_STRING */ sub_9269( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU96 );
     /* WRITE_STRING */ sub_9269( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU100 );
     /* WRITE_STRING */ sub_9269( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU104 );
     /* WRITE_STRING */ sub_9269( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU108 );
     /* WRITE_STRING */ sub_9269( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU112 );
     /* WRITE_STRING */ sub_9269( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU116 );
     /* WRITE_STRING */ sub_9269( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU120 );
     /* WRITE_STRING */ sub_9269( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU124 );
     /* WRITE_STRING */ sub_9269( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU128 );
     /* WRITE_STRING */ sub_9269( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_49401( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_49401( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_49401( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_49155(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_49232(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_49401(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_50102(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_START_SP_CHALLENGES */ void sub_51057()
{
     /* WRITESCRIPTLOG */ sub_357( "CCB", "P_START_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_357( "CCB", "Starting the Rooftop_Party_Parkade context...", 0 );
    START_CONTEXT( "Rooftop_Party_Parkade" );
    return;
}

/* P_L2A_FRONT_GATE_ENEMIES_RELEASE_TO_COMBAT */ void sub_51302()
{
    int I;

     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2A_FRONT_GATE_ENEMIES_RELEASE_TO_COMBAT start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
    {
        for ( I = 0; I <= 3; I++ )
        {
            if (NOT (IS_PED_DEAD( g_U1647[I] )))
            {
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U1647[I], 0 );
                REGISTER_TARGET( g_U1647[I],  /* PLAYER_PED_ID */ sub_1092() );
            }
        }
        TASK_COMBAT_PED( g_U1647[0],  /* PLAYER_PED_ID */ sub_1092() );
    }
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2A_FRONT_GATE_ENEMIES_RELEASE_TO_COMBAT end", 0 );
    return;
}

/* P_GBL_HANDLE_PAINKILLER_TUTORIAL */ void sub_51608()
{
    if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1130() ))) AND ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() ))) AND ((NOT g_U1699) AND ( /* F_IS_TUTORIAL_LEVEL */ sub_51653()))))
    {
        if (NOT g_U1698)
        {
            if ((GET_PAYNEKILLER_AMT() > 0) AND ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND (IS_PLAYER_CONTROL_ON(  /* PLAYER_ID */ sub_1130() )))))
            {
                if (( /* F_GET_PLAYER_HEALTH_PERCENT */ sub_51822()) < 0.40000000)
                {
                     /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_51984( "TUT_PAINKILLER", 1 );
                    SET_GAME_PAUSED( 1 );
                    DISABLE_RESTART_CHECKPOINT( 1 );
                    SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
                     /* CREATETIMER */ sub_2086( ref g_U1700, 500, 1, 1 );
                     /* STARTTIMER */ sub_2236( ref g_U1700 );
                    g_U1698 = 1;
                }
            }
        }
        else if ((g_U1700._fU16) || ( /* ISTIMERDONE */ sub_2369( ref g_U1700 )))
        {
            if (IS_CONTROL_PRESSED( 2, 19 ))
            {
                 /* WRITESCRIPTLOG */ sub_357( "GA", "Player completed painkiller tutorial.", 0 );
                 /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1650();
                STOP_IMAGEFX( g_U1697, 0 );
                SET_GAME_PAUSED( 0 );
                DISABLE_RESTART_CHECKPOINT( 0 );
                SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
                SET_PLAYER_FORCE_PAIN_KILLER( 1 );
                g_U1698 = 0;
                g_U1699 = 1;
            }
        }
        if ((IS_LAST_MAN_STANDING_ACTIVE()) || (IS_BULLET_CAMERA_ACTIVE()))
        {
             /* WRITESCRIPTLOG */ sub_357( "GA", "Prematurely ending painkiller tutorial.", 0 );
             /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1650();
            SET_GAME_PAUSED( 0 );
            DISABLE_RESTART_CHECKPOINT( 0 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
            SET_PLAYER_FORCE_PAIN_KILLER( 0 );
            g_U1698 = 0;
        }
    }
    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) AND (g_U1698))
    {
         /* P_GBL_EARLY_CANCEL_PAINKILLER_TUTORIAL */ sub_52488();
    }
    return;
}

/* F_IS_TUTORIAL_LEVEL */ int sub_51653()
{
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (IS_TUTORIAL_COMPLETE())
    {
        return 0;
    }
    return 1;
}

/* F_GET_PLAYER_HEALTH_PERCENT */ float sub_51822()
{
    unknown uVar2;
    unknown uVar3;
    float Result;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
    {
        uVar2 = TO_FLOAT( (GET_PED_MAX_HEALTH(  /* PLAYER_PED_ID */ sub_1092() )) - 100 );
        uVar3 = TO_FLOAT( (GET_PED_HEALTH(  /* PLAYER_PED_ID */ sub_1092() )) - 100 );
        Result = uVar3 / uVar2;
        return Result;
    }
    return 0.00000000;
}

/* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ void sub_51984(unknown uParam0, boolean bParam1)
{
    UI_SET( 25, 2, 1537, "SPSlotLoader", 1537, uParam0 );
    if (bParam1)
    {
        STOP_IMAGEFX( g_U1697, 0 );
        g_U1697 = PLAY_IMAGEFX( "INTERLACE_DESATURATED_PANEL_02", 3, 0 );
    }
    return;
}

/* P_GBL_EARLY_CANCEL_PAINKILLER_TUTORIAL */ void sub_52488()
{
    if (g_U1698)
    {
         /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1650();
        STOP_IMAGEFX( g_U1697, 0 );
        SET_GAME_PAUSED( 0 );
        DISABLE_RESTART_CHECKPOINT( 0 );
        SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
        SET_PLAYER_FORCE_PAIN_KILLER( 0 );
        g_U1698 = 0;
    }
    return;
}

/* P_L2_HANDLE_STOPPING_GATE_SOUND */ void sub_52621()
{
    if (DOES_OBJECT_EXIST( g_U1680 ))
    {
        if (g_U1682 != -1)
        {
            if (NOT (IS_OBJECT_PLAYING_ANIM( g_U1680, "Parkade_Gate_OPEN", "LEVEL_S_FAS_00" )))
            {
                 /* WRITESCRIPTLOG */ sub_357( "GA", "Stopping gate opening sound.", 0 );
                 /* P_SAFE_STOP_SOUND */ sub_6087( g_U1682, 0 );
                 /* P_SAFE_RELEASE_SOUND_ID */ sub_6270( ref g_U1682 );
            }
        }
        if (g_U1683 != -1)
        {
            if (NOT (IS_OBJECT_PLAYING_ANIM( g_U1680, "Parkade_Gate_CLOSE", "LEVEL_S_FAS_00" )))
            {
                 /* WRITESCRIPTLOG */ sub_357( "GA", "Stopping gate closing sound.", 0 );
                 /* P_SAFE_STOP_SOUND */ sub_6087( g_U1683, 0 );
                 /* P_SAFE_RELEASE_SOUND_ID */ sub_6270( ref g_U1683 );
            }
        }
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_53379(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_53455(  /* PLAYER_PED_ID */ sub_1092(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* F_ISPEDINTRIGGERBOX */ int sub_53455(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_53694(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_53867(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_53694( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_L2A_BACK_GATE_ENEMIES_RETREAT */ void sub_54085()
{
    int I;
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2A_BACK_GATE_ENEMIES_RETREAT start", 0 );
    for ( I = 0; I <= 0; I++ )
    {
        if (NOT (IS_PED_DEAD( g_U1652[I] )))
        {
             /* P_REMOVEALLTETHERSFROMPED */ sub_54223( g_U1652[I] );
            SET_PED_CAN_SLOW_DOWN_WHEN_TURNING( g_U1652[I], 0 );
            OPEN_SEQUENCE_TASK( ref uVar3 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
            TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD( 0, 9.88000000, 79.81000000, -64.99000000, 14.00000000, 75.94000000, -62.93000000, 3, 0, 2.00000000, 0, 1, 0 );
            TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD( 0, 9.83000000, 93.85000000, -63.68500000, 9.37000000, 107.55000000, -62.93000000, 3, 0, 2.00000000, 0, 1, 0 );
            CLOSE_SEQUENCE_TASK( uVar3 );
            TASK_PERFORM_SEQUENCE( g_U1652[I], uVar3 );
            CLEAR_SEQUENCE_TASK( uVar3 );
        }
    }
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_L2A_BACK_GATE_ENEMIES_RETREAT end", 0 );
    return;
}

/* P_REMOVEALLTETHERSFROMPED */ void sub_54223(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        RESET_PED_TETHERING( uParam0 );
    }
    return;
}

/* P_START_CHECKPOINT_THREAD */ void sub_54659(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* P_L2A_SWAP_GATE_BUTTON */ void sub_54714(boolean bParam0)
{
     /* CLEANOBJECT */ sub_6812( g_U1681 );
    if (bParam0)
    {
        g_U1681 =  /* CREATEOBJECT */ sub_35525( 1401124811, -15.49500000, 74.64400000, -63.71700000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    }
    else
    {
        g_U1681 =  /* CREATEOBJECT */ sub_35525( -556953193, -15.49500000, 74.64400000, -63.71700000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    }
    if (DOES_OBJECT_EXIST( g_U1681 ))
    {
        FREEZE_OBJECT_POSITION( g_U1681, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U1681, ref g_U1587 );
    }
    return;
}

/* P_L2A_HANDLE_BUTTON_TUTORIAL_NIS */ void sub_54948()
{
    switch (l_U324)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_357( "GA", "e_L2A_ButtonTutorial_NIS = eNIS_STATE_SETUP", 0 );
         /* NIS_PRE_SETUP */ sub_45080( 1, 0, 0, 1 );
         /* NIS_CREATE_STATIC_CAM */ sub_55141( ref l_U325, -18.86000000, 72.27000000, -63.04000000, -9.76000000, 0.00000000, -56.99000000, 45.00000000, 4000 );
         /* NIS_PLAY_STATIC_CAMERA */ sub_55376( ref l_U325 );
        SET_PLAYER_SHOOTDODGE_GET_UP_STATE( 3 );
        CAMERA_POINT_AT_COORD( -15.40000000, 72.62000000, -64.03000000, 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )))
        {
            SET_FORCED_AIM_INTENTION_DIRECTION(  /* FNORMALIZEVECTOR */ sub_55566( (vector( -15.40000000, 72.62000000, -64.03000000)) - (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_1092() ))) ) );
        }
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
         /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_51984( "TUT_BUTTON_A", 1 );
         /* WRITESCRIPTLOG */ sub_357( "GA", "e_L2A_ButtonTutorial_NIS = eNIS_STATE_SETUP", 0 );
        l_U324 = 2;
        break;
        case 2:
        if ( /* NIS_IS_SHOT_FINISHED */ sub_55787( ref l_U325, 1 ))
        {
            SET_PLAYER_SHOOTDODGE_GET_UP_STATE( 0 );
             /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1650();
             /* NIS_RETURN_TO_GAMEPLAY_CAM */ sub_55975( 0, 0, 0, -859915232, -859915232, 0 );
             /* STARTTIMER */ sub_2236( ref l_U365 );
             /* STARTTIMER */ sub_2236( ref l_U356 );
             /* WRITESCRIPTLOG */ sub_357( "GA", "e_L2A_ButtonTutorial_NIS = eNIS_STATE_RETURNING_TO_PLAYER", 0 );
            l_U324 = 4;
        }
        break;
        case 4:
        if ( /* ISTIMERDONE */ sub_2369( ref l_U365 ))
        {
             /* NIS_POST_SETUP */ sub_46004( 1, 1 );
            CAMERA_CLEAR_POINT_AT_TARGET();
            RESET_FORCED_AIM_INTENTION_DIRECTION();
             /* P_ENABLE_POI */ sub_4945( ref l_U375, 1 );
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_56264( "SRTP_CSDAG2", ref l_U482 );
             /* WRITESCRIPTLOG */ sub_357( "GA", "e_L2A_ButtonTutorial_NIS = eNIS_STATE_COMPLETE", 0 );
            l_U324 = 5;
        }
        break;
    }
    return;
}

/* NIS_CREATE_STATIC_CAM */ void sub_55141(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_2086( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U649, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* NIS_PLAY_STATIC_CAMERA */ void sub_55376(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_2236( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* FNORMALIZEVECTOR */ void sub_55566(unknown uParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown Result;
    unknown uVar7;
    unknown uVar8;

    uVar5 = SQRT( ((uParam0._fU0 * uParam0._fU0) + (uParam0._fU4 * uParam0._fU4)) + (uParam0._fU8 * uParam0._fU8) );
    Result._fU0 = uParam0._fU0 / uVar5;
    Result._fU4 = uParam0._fU4 / uVar5;
    Result._fU8 = uParam0._fU8 / uVar5;
    return Result;
}

/* NIS_IS_SHOT_FINISHED */ int sub_55787(int iParam0, boolean bParam1)
{
    if (bParam1 == 1)
    {
        if (NOT iParam0->_fU44)
        {
            if ((ref iParam0->_fU48->_fU16) || ( /* ISTIMERDONE */ sub_2369( iParam0 + 48 )))
            {
                iParam0->_fU44 = 1;
                iParam0->_fU36 = 1;
                return 1;
            }
        }
    }
    if (NOT bParam1)
    {
        if ((ref iParam0->_fU48->_fU16) || ( /* ISTIMERDONE */ sub_2369( iParam0 + 48 )))
        {
            iParam0->_fU36 = 1;
            return 1;
        }
    }
    return 0;
}

/* NIS_RETURN_TO_GAMEPLAY_CAM */ void sub_55975(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, float fParam4, unknown uParam5)
{
    SET_CAM_SIDE_LEFT( uParam2 );
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam3, 1065353216, 0 );
    }
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( fParam4, 1065353216, 0 );
    }
    RENDER_SCRIPT_CAMS( 0, uParam1, uParam0, uParam5 );
    return;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_56264(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_56302( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_56411( 0,  /* PLAYER_PED_ID */ sub_1092(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_56411( 1,  /* PLAYER_PED_ID */ sub_1092(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_56664( uParam0, uParam1, 8, 1 );
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_56302(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_56411(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_56664(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_56709( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_56709(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_56796( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_56796(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_56848( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_57366( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_56848(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_57366(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* F_HANDLE_POI */ int sub_57746(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    int iVar6;
    int iVar7;
    int iVar8;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) == 0)
    {
        if (iParam0->_fU0 == 1)
        {
            uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_1092() )};
            iVar6 = 0;
            if (iParam0->_fU80 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_53455(  /* PLAYER_PED_ID */ sub_1092(), iParam0->_fU116 )) == 1)
                {
                    if (iParam0->_fU300 == 1)
                    {
                        if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                        {
                            iVar6 = 1;
                        }
                    }
                    else
                    {
                        iVar6 = 1;
                    }
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU84 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_PED_ON_SCREEN( iParam0->_fU316, 0 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU100, 1 )) <= iParam0->_fU112)
            {
                if (iParam0->_fU300 == 1)
                {
                    if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                    {
                        iVar6 = 1;
                    }
                }
                else
                {
                    iVar6 = 1;
                }
            };;;;
            iVar7 = 0;
            if (iParam0->_fU88 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_53455(  /* PLAYER_PED_ID */ sub_1092(), iParam0->_fU216 )) == 1)
                {
                    iVar7 = 1;
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU92 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU200, 1 )) <= iParam0->_fU212)
            {
                iVar7 = 1;
            };;;;
            if (iVar6 == 1)
            {
                if ((iParam0->_fU4 != 3) AND (iParam0->_fU52 == 1))
                {
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_5403( iParam0 );
                    }
                    iVar8 = 0;
                    if ((IS_WEAPON_PICKUP_VISIBLE() == 0) AND ((iParam0->_fU60 == 0) AND (( /* F_ISACTIONINGAVAILABLE */ sub_5499( iParam0 )) == 1)))
                    {
                        SET_ACTION_CONSUMED( 0, 1 );
                        if (( /* F_HASACTIONBEENPRESSED */ sub_58643()) == 1)
                        {
                            iVar8 = 1;
                        }
                    }
                    if (iVar8 == 1)
                    {
                        if (iParam0->_fU332 == 0)
                        {
                             /* P_ENABLE_POI */ sub_4945( iParam0, 0 );
                            iParam0->_fU64 = 1;
                        }
                        if (iParam0->_fU68 == 1)
                        {
                            iParam0->_fU72 = 0;
                        }
                        return 1;
                    }
                    else if (iParam0->_fU8 != 2)
                    {
                        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                        {
                             /* P_ENABLEPOIGLINT */ sub_5004( iParam0, 0 );
                             /* P_ENABLEPOIINTERACTIONTEXT */ sub_5223( iParam0, 1 );
                        }
                        else if (iParam0->_fU320 == 1)
                        {
                             /* P_ENABLEPOIGLINT */ sub_5004( iParam0, 1 );
                        }
                        iParam0->_fU8 = 2;
                    }
                    if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                    {
                        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) == 0)
                        {
                            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1092(), 1 );
                            iParam0->_fU328 = 1;
                        }
                    }
                }
            }
            else if (iVar7 == 1)
            {
                if (iParam0->_fU8 != 1)
                {
                    if ((iParam0->_fU4 != 3) AND (iParam0->_fU320 == 1))
                    {
                         /* P_ENABLEPOIGLINT */ sub_5004( iParam0, 1 );
                    }
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_ENABLEPOIINTERACTIONTEXT */ sub_5223( iParam0, 0 );
                    }
                    if (iParam0->_fU96 == 1)
                    {
                        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) == 0) AND ((((IS_PED_DEAD( iParam0->_fU316 )) == 1) || ((IS_PED_DEAD( iParam0->_fU316 )) == 0)) AND ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)))
                        {
                            TASK_LOOK_AT_PED(  /* PLAYER_PED_ID */ sub_1092(), iParam0->_fU316, -1, 0 );
                        }
                    }
                    else if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) == 0)
                    {
                        TASK_LOOK_AT_COORD(  /* PLAYER_PED_ID */ sub_1092(), iParam0->_fU100, -1, 0 );
                    }
                    iParam0->_fU340 = 1;
                    if ((iParam0->_fU72 == 0) AND ((iParam0->_fU68 == 1) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU8 == 2))))
                    {
                        iParam0->_fU72 = 1;
                    }
                    iParam0->_fU8 = 1;
                }
                if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                {
                    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) == 0)
                    {
                        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1092(), 1 );
                        iParam0->_fU328 = 1;
                    }
                }
            }
            else if ((iParam0->_fU4 == 1) || (iParam0->_fU4 == 3))
            {
                ;
            }
            else if (iParam0->_fU8 != 0)
            {
                if (iParam0->_fU320 == 1)
                {
                     /* P_ENABLEPOIGLINT */ sub_5004( iParam0, 0 );
                }
            }
            if (iParam0->_fU8 == 2)
            {
                if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                {
                     /* P_ENABLEPOIINTERACTIONTEXT */ sub_5223( iParam0, 0 );
                }
            }
            if (iParam0->_fU340)
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) == 0)
                {
                    TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_1092() );
                    iParam0->_fU340 = 0;
                }
            }
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1092() )) == 0)
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1092(), 0 );
                    iParam0->_fU328 = 0;
                }
            }
            if (iParam0->_fU332 == 1)
            {
                 /* P_ENABLEPOIINTERACTIONTEXT */ sub_5223( iParam0, 0 );
            }
            iParam0->_fU8 = 0;;;
        }
    }
    return 0;
}

/* F_HASACTIONBEENPRESSED */ int sub_58643()
{
    if ((IS_CONTROL_JUST_PRESSED( 0, 30 )) == 1)
    {
        return 1;
    }
    return 0;
}

/* P_RELEASE_L2A_ASSETS */ void sub_59769()
{
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_RELEASE_L2A_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_59850( ref l_U172, ref g_U821 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_60398( ref l_U180, ref g_U918 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60838( "LEVEL_S_FAS_00", ref g_U1028 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60838( "LEVEL_S_ROOFTOP_CP_05", ref g_U1028 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_61254( "SCRIPT_MISSION\S_FASHION_PARKING_GARAGE", ref g_U1221 );
     /* WRITESCRIPTLOG */ sub_357( "GA", "P_RELEASE_L2A_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_59850(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_59923( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_59923(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3989( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_60398(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_60472( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_60472(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3989( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_60838(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3989( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_61254(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3989( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

