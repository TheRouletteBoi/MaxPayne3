void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U40 = 0;
    l_U41 = 0;
    l_U42 = 1500;
    l_U115 = 0;
    l_U117 = 0;
    l_U118 = 0;
    l_U138 = 0;
     /* WRITESCRIPTLOG */ sub_306( "SP", "Script s_fashion_L1.sc is starting up...", 0 );
     /* P_L1_POPULATE_VARIABLE_ARRAYS */ sub_424();
    l_U115 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_1093();
        if (l_U118 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_9684();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_L1 */ sub_3774( 0 );
     /* P_RELEASE_L1_ASSETS */ sub_48328();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_fashion_L1" );
     /* WRITESCRIPTLOG */ sub_306( "SP", "Script s_fashion_L1.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_306(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_L1_POPULATE_VARIABLE_ARRAYS */ void sub_424()
{
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_POPULATE_VARIABLE_ARRAYS start", 0 );
    l_U106[0] = -674073824;
    l_U106[1] = -455782833;
    l_U106[2] = -1522400210;
    l_U106[3] = 1071653504;
    l_U106[4] = -239844571;
    l_U106[5] = -1154707606;
    l_U113[0] = 68019059;
     /* P_GLOBAL_INITIALIZE_ROOFTOP_LEVEL1_VEHICLE_DATA */ sub_606();
     /* P_GLOBAL_INITIALIZE_ROOFTOP_EXIT_VEHICLE_DATA */ sub_841();
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_POPULATE_VARIABLE_ARRAYS end", 0 );
    return;
}

/* P_GLOBAL_INITIALIZE_ROOFTOP_LEVEL1_VEHICLE_DATA */ void sub_606()
{
     /* WRITESCRIPTLOG */ sub_306( "CCB", "P_GLOBAL_INITIALIZE_ROOFTOP_LEVEL1_VEHICLE_DATA", 0 );
    g_U1293[0] = -1522400210;
    g_U1439[0] = {-5.36000000, 89.36000000, -60.60000000};
    g_U1558[0] = -90.00000000;
    g_U1293[1] = 1071653504;
    g_U1439[1] = {-17.97000000, 84.50000000, -60.60000000};
    g_U1558[1] = 90.00000000;
    return;
}

/* P_GLOBAL_INITIALIZE_ROOFTOP_EXIT_VEHICLE_DATA */ void sub_841()
{
     /* WRITESCRIPTLOG */ sub_306( "CCB", "P_GLOBAL_INITIALIZE_ROOFTOP_EXIT_VEHICLE_DATA", 0 );
    g_U1296[0] = -239844571;
    g_U1446[0] = {-2.53000000, 65.55000000, -60.00000000};
    g_U1561[0] = 270.00000000;
    return;
}

/* P_HANDLE_FAILURE */ void sub_1093()
{
    if (g_U723 == 6)
    {
        switch (l_U118)
        {
            case 0:
            if ((l_U117) || (( /* RESTARTING_CHECKPOINT */ sub_1295()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() ))))
            {
                STOP_IMAGEFX( g_U1697, 0 );
                l_U118 = 1;
                 /* WRITESCRIPTLOG */ sub_306( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_1832())
            {
                l_U118 = 2;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_1892( 0 )) == 1)
            {
                l_U118 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )))
            {
                if ((g_U724[7]._fU40 != 4) AND (g_U724[7]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_306( "GA", "Shutting down script for Parking exit checkpoint.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_3472( ref g_U724[7] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U724[7]._fU32 );
                    g_U1264[7] = 0;
                }
                l_U118 = 3;
                 /* WRITESCRIPTLOG */ sub_306( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_306( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1232() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1232(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1194() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1194(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
             /* P_CLEANUP_L1 */ sub_3774( 1 );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( ref g_U1635, 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( ref g_U1635, 0 ), GET_HASH_KEY( ref g_U1603 ) );
            l_U118 = 4;
             /* WRITESCRIPTLOG */ sub_306( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_306( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U70._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_5002( ref l_U70,  /* PLAYER_PED_ID */ sub_1194() );
            }
            l_U118 = 5;
             /* WRITESCRIPTLOG */ sub_306( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_306( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U115 = 1;
            l_U117 = 0;
            l_U118 = 0;
             /* WRITESCRIPTLOG */ sub_306( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_1194()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1232() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1232()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1295()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1194(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1232(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1232(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1194() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1194(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_1832()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_1892(int iParam0)
{
    iParam0 = 1;
    switch (l_U41)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_1974( ref l_U43 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )))
            {
                l_U42 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_2108( ref l_U43, l_U42, 1, 1 );
             /* STARTTIMER */ sub_2258( ref l_U43 );
        }
        if ( /* ISTIMERDONE */ sub_2391( ref l_U43 ))
        {
             /* WRITESCRIPTLOG */ sub_306( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1232() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1232(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U41 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U41 = 2;
            }
            else
            {
                l_U41 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_306( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_2892();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_306( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_2892();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_1974(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_2108(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2258(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2391(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_2892()
{
     /* WRITESCRIPTLOG */ sub_306( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_2967( ref l_U43 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1232() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1232(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U40 = 0;
    l_U40 = l_U40;
    l_U41 = 0;
    return;
}

/* RESETTIMER */ void sub_2967(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_3472(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_L1 */ void sub_3774(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_CLEANUP_L1 start", 0 );
    ENABLE_AMBIENT_ZONE( "S_FASHION_ZONE_PARKING_GARAGE_GUNFIGHT", 0 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_PARKING_GARAGE_GUNFIGHT", 0 );
    if ((CUTSCENE_NAMED_IS_LOADING( "MID_07_RP_conat" )) || (CUTSCENE_IS_LOADED( "MID_07_RP_concat" )))
    {
        CLEAR_NAMED_CUTSCENE( "MID_07_RP_concat" );
    }
    if (NOT bParam0)
    {
        UI_SET( 25, 2, 1537, "SPSlotLoader", 1537, "" );
    }
    if (bParam0)
    {
         /* CLEANPEDARRAY */ sub_4063( ref g_U1684 );
         /* CLEANPEDARRAY */ sub_4063( ref g_U1691 );
         /* CLEANVEHICLEARRAY */ sub_4230( ref g_U1288 );
         /* CLEANVEHICLEARRAY */ sub_4230( ref g_U1291 );
    }
     /* CLEANVEHICLE */ sub_4284( l_U428 );
     /* CLEANPED */ sub_4113( l_U400 );
     /* CLEANOBJECT */ sub_4406( l_U126 );
     /* CLEANOBJECT */ sub_4406( l_U127 );
     /* P_STOP_SP_CHALLENGES */ sub_4472( bParam0 );
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_CLEANUP_L1 end", 0 );
    return;
}

/* CLEANPEDARRAY */ void sub_4063(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_4113( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_4113(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANVEHICLEARRAY */ void sub_4230(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANVEHICLE */ sub_4284( (uParam0^)[I] );
    }
    return;
}

/* CLEANVEHICLE */ void sub_4284(unknown uParam0)
{
    if (IS_VEHICLE_DEAD( uParam0 ))
    {
        ;
    }
    if (DOES_VEHICLE_EXIST( uParam0 ))
    {
        DELETE_VEHICLE( ref uParam0 );
    }
    return;
}

/* CLEANOBJECT */ void sub_4406(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_4472(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_306( "CCB", "P_STOP_SP_CHALLENGES", 0 );
    if (bParam0)
    {
        if (SCRIPT_VAR_HASH_EXISTS( -1911384788 ))
        {
             /* WRITESCRIPTLOG */ sub_306( "CCB", "Restoring the TiresPopped script variable.", 0 );
            SCRIPT_VAR_HASH_SET_INT( -1911384788, l_U490 );
            DISPLAYF( "[CCB] ### The current TiresPopped value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -1911384788 ) );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_306( "CCB", "The TiresPopped script variable is NOT valid!!!", 0 );
        }
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_5002(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_306( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_5221( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_6385( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_6699( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7178( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_6699( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7178( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_6699( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7178( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_7494( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7178( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_7494( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7178( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_8066( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_8268( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1194(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_306( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_5221(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_5283( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_5283(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_6385(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_6699(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_7103( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_7103(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_7178(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_7494(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_7103( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_8066(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_8268(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_5283( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_8366( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_8366(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_9684()
{
    int iVar2;
    int I;

    iVar2 = l_U115;
     /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_9731( ref g_U1684, -70.00000000, 0, 1 );
    if (g_U723 == 6)
    {
         /* P_HANDLE_SP_CHALLENGES */ sub_9942();
    }
    switch (l_U115)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_306( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_10864();
         /* P_SET_STATIC_DATA */ sub_11097();
         /* P_INITIALIZE_SP_CHALLENGES */ sub_13071();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U115 = 2;
         /* WRITESCRIPTLOG */ sub_306( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_306( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_L1_PERSISTENT_ASSETS */ sub_13912();
         /* P_REQUEST_L1_NONPERSISTENT_ASSETS */ sub_20952();
        l_U115 = 3;
         /* WRITESCRIPTLOG */ sub_306( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_21982( ref g_U1028 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_21580( ref g_U918 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_21183( ref g_U821 ))))
        {
            if ((NOT l_U70._fU0) AND (g_U722 == 6))
            {
                l_U115 = 4;
                 /* WRITESCRIPTLOG */ sub_306( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U115 = 6;
                 /* WRITESCRIPTLOG */ sub_306( "SP", "eCheckpointState = CP_L1_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_306( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U1264[6] = 1;
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )))
        {
            FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1194(), 0 );
        }
        if (( /* HAS_SAVEFILE_LOADED */ sub_22635( ref l_U70 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_7494(  /* PLAYER_PED_ID */ sub_1194(), 68019059, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_6699(  /* PLAYER_PED_ID */ sub_1194(), 68019059, 0, 200, 0 );
            l_U115 = 5;
             /* WRITESCRIPTLOG */ sub_306( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U115 = 6;
             /* WRITESCRIPTLOG */ sub_306( "SP", "eCheckpointState = CP_L1_PRE_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1194(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1194(), 0, 0 ) )))
            {
                l_U115 = 6;
                 /* WRITESCRIPTLOG */ sub_306( "GA", "eCheckpointState = CP_L1_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if (l_U116)
        {
            l_U220 = 1;
            l_U309 = 1;
             /* CLEANPEDARRAY */ sub_4063( ref g_U1684 );
             /* CLEANPEDARRAY */ sub_4063( ref g_U1691 );
        }
        if ( /* F_L1_SPAWN_ENEMIES */ sub_23201())
        {
            if ( /* F_L1_SPAWN_SPP */ sub_26075())
            {
                 /* P_GLOBAL_CREATE_ROOFTOP_LEVEL1_VEHICLES */ sub_26926();
                 /* P_L1_CREATE_RAMP_TOP_GATE */ sub_27976();
                 /* P_L1_SPAWN_VAN_ENEMY */ sub_28615();
                l_U115 = 7;
                 /* WRITESCRIPTLOG */ sub_306( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 7:
        if (g_U1264[6])
        {
             /* P_START_SP_CHALLENGES */ sub_29030();
            if (NOT l_U70._fU0)
            {
                g_U723 = 6;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_29656( ref l_U70, g_U723,  /* PLAYER_PED_ID */ sub_1194(), g_U1333[6], g_U1450[6], g_U1486[6], g_U1522[6], 1 );
            }
             /* P_GLOBAL_CREATE_ROOFTOP_EXIT_VEHICLES */ sub_34254();
             /* P_L1_CREATE_EXIT_GATE */ sub_35006();
             /* WRITESCRIPTLOG */ sub_306( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_1_4_5 mood.", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_1_4_5", "", 0.00000000, 5000, 5000, -1082130432, 0 );
            l_U115 = 8;
             /* WRITESCRIPTLOG */ sub_306( "GA", "eCheckpointState = CP_L1_GAMEPLAY_COMING_UP_RAMP", 0 );
        }
        break;
        case 8:
        if (l_U116)
        {
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1232() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1232(), 1, 0 );
            }
            DO_SCREEN_FADE_IN( 0 );
             /* STARTTIMER */ sub_2258( ref l_U460 );
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_35515( ref l_U429, 0 ))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_35734( "SRTP_B4MDB", ref l_U450 );
        }
        if (( /* F_ISPLAYERINTRIGGERBOX */ sub_37055( l_U469 )) || ( /* ISTIMERDONE */ sub_2391( ref l_U460 )))
        {
            l_U115 = 11;
             /* WRITESCRIPTLOG */ sub_306( "GA", "eCheckpointState = CP_L1_LOAD_MID_07_RP", 0 );
        }
        if ( /* F_ISPLAYERINTRIGGERBOX */ sub_37055( l_U139 ))
        {
             /* P_L1_ENEMY_START_FIGHT_WITH_SPP */ sub_37192();
            l_U115 = 9;
             /* WRITESCRIPTLOG */ sub_306( "GA", "eCheckpointState = CP_L1_GAMEPLAY_NOTICE_PLAYER", 0 );
        }
        break;
        case 9:
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_35515( ref l_U429, 0 ))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_35734( "SRTP_B4MDB", ref l_U450 );
        }
        if ( /* F_ISPLAYERINTRIGGERBOX */ sub_37055( l_U469 ))
        {
            l_U115 = 11;
             /* WRITESCRIPTLOG */ sub_306( "GA", "eCheckpointState = CP_L1_LOAD_MID_07_RP", 0 );
        }
         /* P_L1_HANDLE_SPEECH_SRTP_GNS */ sub_39558();
        if ( /* F_L1_IS_PLAYER_NOTICED_BY_ENEMIES */ sub_39639())
        {
             /* P_L1_FIRST_ENEMY_NOTICE_PLAYER */ sub_39853();
             /* P_L1_SPP_FIRST_WAVE_CAN_BE_KILLED */ sub_40109();
             /* P_L1_START_VAN_ENEMY */ sub_40346();
            if (NOT (IS_PED_DEAD( g_U1684[0] )))
            {
                SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( g_U1684[0], 0 );
            }
            if (NOT (IS_PED_DEAD( g_U1684[3] )))
            {
                SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( g_U1684[3], 1 );
            }
            if (NOT (IS_PED_DEAD( g_U1691[0] )))
            {
                SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( g_U1691[0], 1 );
            }
            ENABLE_AMBIENT_ZONE( "S_FASHION_ZONE_PARKING_GARAGE_GUNFIGHT", 0 );
            ENABLE_WALLA_ZONE( "S_FASHION_WZ_PARKING_GARAGE_GUNFIGHT", 0 );
            l_U115 = 10;
             /* WRITESCRIPTLOG */ sub_306( "GA", "eCheckpointState = CP_L1_GAMEPLAY_COMBAT", 0 );
        }
        break;
        case 10:
        if (l_U116)
        {
             /* STARTTIMER */ sub_2258( ref l_U211 );
             /* STARTTIMER */ sub_2258( ref l_U378 );
        }
         /* P_GBL_HANDLE_PAINKILLER_TUTORIAL */ sub_40872();
         /* P_L1_HANDLE_SPEECH_SRTP_GNS */ sub_39558();
        if ( /* ISTIMERDONE */ sub_2391( ref l_U211 ))
        {
             /* P_L1_REMAINING_ENEMIES_ENGAGE_PLAYER */ sub_41985();
             /* P_L1_START_SPP_WAVE_2 */ sub_42361();
        }
        if (NOT l_U308)
        {
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_42854( ref g_U1684 )) <= 1)
            {
                 /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_42978( ref g_U1684 );
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
                BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
                 /* P_START_CHECKPOINT_THREAD */ sub_43170( ref g_U724[7] );
                l_U308 = 1;
            }
        }
        if (l_U308)
        {
             /* P_L1_HANDLE_SPP_KILL_ON_TIMER */ sub_43240();
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_35515( ref l_U429, 0 ))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_35734( "SRTP_B4MDB", ref l_U450 );
        }
        if ( /* F_ISPLAYERINTRIGGERBOX */ sub_37055( l_U469 ))
        {
             /* P_GBL_EARLY_CANCEL_PAINKILLER_TUTORIAL */ sub_41833();
            l_U115 = 11;
             /* WRITESCRIPTLOG */ sub_306( "GA", "eCheckpointState = CP_L1_LOAD_MID_07_RP", 0 );
        }
        if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_42854( ref g_U1684 )) == 0))
        {
            for ( I = 0; I <= 4; I++ )
            {
                if (NOT (IS_PED_DEAD( g_U1691[I] )))
                {
                     /* P_GBL_CREATE_BLOOD_POOL_FOR_PED */ sub_37537( g_U1691[I], 0.00000000, 1082130432, 1101004800 );
                }
            }
             /* P_KILL_PEDS_IN_ARRAY */ sub_43722( ref g_U1691 );
             /* CLEANPED */ sub_4113( l_U400 );
            g_U1264[7] = 1;
            l_U115 = 13;
             /* WRITESCRIPTLOG */ sub_306( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 11:
        if (l_U116)
        {
            if ((g_U724[7]._fU40 != 4) AND (g_U724[7]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_306( "GA", "Shutting down script for Parking exit checkpoint.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_3472( ref g_U724[7] );
                SET_EXITFLAG_FOR_SCRIPT( g_U724[7]._fU32 );
            }
        }
        if ( /* F_UNLOADCUTSCENEANDLOADNEWCUTSCENE */ sub_44050( "MID_09_RP_concat", "MID_07_RP_concat" ))
        {
            l_U115 = 12;
             /* WRITESCRIPTLOG */ sub_306( "GA", "eCheckpointState = CP_L1_HANDLE_MID_07_RP", 0 );
        }
        break;
        case 12:
        if (l_U116)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_45427( ref l_U401, "MID_07_RP_concat", 44763, 45010, 45110, 45270, 45319, 45372, 1000, 1 );
            l_U401._fU4 = 2;
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_45961( ref l_U401 ))
        {
            l_U117 = 1;
        }
        break;
        case 13:
        if ((NOT HAS_CUTSCENE_FINISHED()) || (g_U723 == 7))
        {
             /* CLEANOBJECT */ sub_4406( l_U127 );
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U115 = 0;
             /* WRITESCRIPTLOG */ sub_306( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U115 != iVar2)
    {
        l_U116 = 1;
    }
    else
    {
        l_U116 = 0;
    }
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_9731(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_9797( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_9797(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_4113( uParam0 );
            }
        }
    }
    return;
}

/* P_HANDLE_SP_CHALLENGES */ void sub_9942()
{
     /* P_HANDLE_GLOBAL_SP_CHALLENGES */ sub_9977();
     /* P_HANDLE_VEHICLE_CHALLENGES */ sub_10319( ref g_U1288, ref g_U1316 );
     /* P_HANDLE_VEHICLE_CHALLENGES */ sub_10319( ref g_U1291, ref g_U1319 );
    return;
}

/* P_HANDLE_GLOBAL_SP_CHALLENGES */ void sub_9977()
{
    switch (g_U1646)
    {
        case 0:
        DISPLAYF( "[CCB] ### eYouveGotToBelieveFail - STATE_CHALLENGE_IDLE ###", 0 );
        g_U1646 = 1;
        break;
        case 1:
        if (IS_HUD_PREFERENCE_SWITCHED_ON())
        {
            DISPLAYF( "[CCB] ### IS_HUD_PREFERENCE_SWITCHED_ON is TRUE... ###", 0 );
            DISPLAYF( "[CCB] ### eYouveGotToBelieveFail - STATE_CHALLENGE_COMPLETE ###", 0 );
            g_U1646 = 2;
        }
        break;
        case 2: break;
    }
    return;
}

/* P_HANDLE_VEHICLE_CHALLENGES */ void sub_10319(unknown uParam0, unknown uParam1)
{
    int J;
    int I;
    int iVar6;

    for ( J = 0; J <= ((uParam0^) - 1); J++ )
    {
        for ( I = 0; I <= 5; I++ )
        {
            if (NOT (uParam1^)[J])
            {
                if (NOT (IS_VEHICLE_DEAD( (uParam0^)[J] )))
                {
                    if (IS_VEHICLE_TYRE_BURST( (uParam0^)[J], I ))
                    {
                        (uParam1^)[J] = 1;
                        DISPLAYF( "[CCB] ### The vehicle {} tire {} was popped... ###", 2, 513, J, 513, I );
                        iVar6 = (SCRIPT_VAR_HASH_GET_INT( -1911384788 )) + 1;
                        SCRIPT_VAR_HASH_SET_INT( -1911384788, iVar6 );
                        DISPLAYF( "[CCB] ### The current TiresPopped value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -1911384788 ) );
                    }
                }
            }
        }
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_10864()
{
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U116 = 1;
     /* CREATETIMER */ sub_2108( ref l_U460, 8000, 1, 0 );
     /* CREATETIMER */ sub_2108( ref l_U202, 4000, 1, 0 );
     /* CREATETIMER */ sub_2108( ref l_U211, 1500, 1, 0 );
    l_U220 = 0;
    l_U221 = 0;
    l_U308 = 0;
    l_U309 = 0;
    l_U310 = 0;
     /* CREATETIMER */ sub_2108( ref l_U378, GET_RANDOM_INT_IN_RANGE( 500, 1000 ), 1, 0 );
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_11097()
{
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11203( ref l_U222[0], -7.25000000, 92.12000000, -60.70000000, 90.00000000, -1550329440, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11203( ref l_U222[1], -7.44000000, 83.15000000, -60.70000000, 90.00000000, -1262110880, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11203( ref l_U222[2], -11.73000000, 82.56000000, -60.70000000, 180.00000000, 2081133087, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11203( ref l_U222[3], -15.92000000, 85.88000000, -60.70000000, -90.00000000, 1511481962, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11203( ref l_U222[4], -0.52000000, 68.85000000, -60.60000000, -90.00000000, -2059862796, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11203( ref l_U222[5], -3.65000000, 71.33000000, -60.60000000, 180.00000000, 1065080950, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11203( ref l_U311[0], -11.00000000, 63.82000000, -60.70000000, 0.00000000, 729226934, 4, 1, 2, 3, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11203( ref l_U311[1], -15.06000000, 68.99000000, -60.70000000, -90.00000000, -1730416413, 4, 1, 2, 3, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11203( ref l_U311[2], -9.24000000, 70.68000000, -60.70000000, 0.00000000, -730930695, 4, 1, 2, 3, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11203( ref l_U311[3], -19.23000000, 76.55000000, -60.70000000, -90.00000000, 1339277097, 4, 1, 2, 3, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11203( ref l_U311[4], -16.63000000, 72.89000000, -60.70000000, -90.00000000, -939193033, 4, 1, 2, 3, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11203( ref l_U387, 13.88000000, 69.02000000, -60.70000000, 90.00000000, -1550329440, 7, 3, 2, 0, 1 );
     /* P_CREATETRIGGERBOX */ sub_11891( ref l_U139, "tb_L1_TopGate", -5.93000000, 103.38000000, -61.02000000, 10.55000000, 10.86000000, 3.07000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11891( ref l_U160, "tb_L1_PlayerCanBeNoticed", -10.48000000, 103.48000000, -60.94000000, 8.40000000, 11.04000000, 3.80000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11891( ref l_U181, "tb_L1_PlayerTooClose", -14.47000000, 94.63000000, -60.84000000, 13.80000000, 6.59000000, 3.81000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11891( ref l_U429, "TRIGGER_ROOFTOP_LEVEL1_FAIL_WARNING", 10.18000000, 94.26000000, -64.62000000, 10.00000000, 4.00000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11891( ref l_U469, "TRIGGER_ROOFTOP_LEVEL1_FAIL", 10.18000000, 89.28000000, -64.68000000, 4.70000000, 15.00000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12409( ref l_U307, "teth_L1_GateSide", -11.82000000, 93.70000000, -60.80000000, 19.52000000, 30.60000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12409( ref l_U377, "teth_L1_ExitGateSide", -2.58000000, 68.00000000, -60.80000000, 38.00000000, 20.00000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATEDOORSTRUCT */ sub_12604( ref l_U119, 165185988, -6.23625000, 99.54417000, -59.49347000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_12673( ref l_U119, 1 );
    ENABLE_AMBIENT_ZONE( "S_FASHION_ZONE_PARKING_GARAGE_GUNFIGHT", 1 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_PARKING_GARAGE_GUNFIGHT", 1 );
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_11203(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_11891(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_12409(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATEDOORSTRUCT */ void sub_12604(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

/* P_SETDOORLOCKED */ void sub_12673(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_12703( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12787( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_12703(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_12787(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_INITIALIZE_SP_CHALLENGES */ void sub_13071()
{
     /* WRITESCRIPTLOG */ sub_306( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
     /* P_RESET_BOOL_ARRAY */ sub_13155( ref g_U1316 );
     /* P_RESET_BOOL_ARRAY */ sub_13155( ref g_U1319 );
    l_U490 = 0;
    if (NOT (SCRIPT_VAR_HASH_EXISTS( -1911384788 )))
    {
         /* WRITESCRIPTLOG */ sub_306( "CCB", "Creating the TiresPopped script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( -1911384788 );
        DISPLAYF( "[CCB] ### The current TiresPopped value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -1911384788 ) );
        if (SCRIPT_VAR_HASH_EXISTS( -1911384788 ))
        {
             /* WRITESCRIPTLOG */ sub_306( "CCB", "The TiresPopped script variable was successfully created...", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_306( "CCB", "The TiresPopped script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_306( "CCB", "The TiresPopped script variable was already created...", 0 );
        l_U490 = SCRIPT_VAR_HASH_GET_INT( -1911384788 );
        DISPLAYF( "[CCB] ### The current iOriginalTiresPopped value is: {} ###", 1, 513, l_U490 );
    }
    return;
}

/* P_RESET_BOOL_ARRAY */ void sub_13155(unknown uParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_306( "CCB", "P_RESET_BOOL_ARRAY", 0 );
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = 0;
    }
    return;
}

/* P_REQUEST_L1_PERSISTENT_ASSETS */ void sub_13912()
{
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_REQUEST_L1_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_14013( ref l_U106, ref g_U821 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_16935( ref l_U113, ref g_U918 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18979( "LEVEL_S_FAS_00", ref g_U1028 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18979( "DAM_DEAD", ref g_U1028 );
    SET_PED_MODEL_LOD_DISTANCES( -455782833, 10.00000000, 60.00000000 );
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_REQUEST_L1_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_14013(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_14086( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_14086(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_14153( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14411( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_14153(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14411( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14411( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14411( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_15942( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14411( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14411( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_14411(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14472( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_14472(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_15942(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_16935(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_17009( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_17009(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_17063( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17324( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_17063(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17324( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17324( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17324( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_15942( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17324( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17324( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_17324(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14472( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_18979(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_19031( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19283( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_19031(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19283( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19283( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19283( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_15942( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19283( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19283( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_19283(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14472( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_L1_NONPERSISTENT_ASSETS */ void sub_20952()
{
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_REQUEST_L1_NONPERSISTENT_ASSETS start", 0 );
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_REQUEST_L1_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_21183(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_21580(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_21982(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_22635(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_306( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_5002( uParam0,  /* PLAYER_PED_ID */ sub_1194() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* F_L1_SPAWN_ENEMIES */ int sub_23201()
{
    switch (l_U220)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_306( "GA", "e_L1_EnemySpawnState = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_23332( ref l_U301, 1056964608, 0 );
        l_U221 = 0;
         /* WRITESCRIPTLOG */ sub_306( "GA", "e_L1_EnemySpawnState = ENTITY_STATE_CREATING", 0 );
        l_U220 = 2;
        break;
        case 2:
        g_U1684[l_U221] =  /* CREATEPED */ sub_23803( ref l_U222[l_U221] );
        if (NOT (IS_PED_DEAD( g_U1684[l_U221] )))
        {
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_24804( g_U1684[l_U221], ref l_U301 );
             /* F_GIVEPEDWEAPON */ sub_7494( g_U1684[l_U221], 68019059, 25000, 0, 0 );
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_25247( ref g_U1684[l_U221], "AIT_NOVICE", -1082130432, -1082130432 );
             /* P_TETHERPED */ sub_25386( ref l_U307, g_U1684[l_U221], 1 );
            SET_ROOM_FOR_PED_BY_NAME( g_U1684[l_U221], ref g_U1611 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U1684[l_U221], 1 );
            SET_PED_PATH_CAN_USE_CLIMBOVERS( g_U1684[l_U221], 0 );
            SET_PED_PATH_CAN_DROP_FROM_HEIGHT( g_U1684[l_U221], 0 );
            SET_PED_ONLY_DAMAGED_BY_PLAYER( g_U1684[l_U221], 1 );
            SET_PED_GORE_FROM_NPC( g_U1684[l_U221], 0 );
        }
         /* P_DEACTIVATEPED */ sub_25606( g_U1684[l_U221] );
        l_U221++;
        if (l_U221 >= 6)
        {
             /* WRITESCRIPTLOG */ sub_306( "GA", "e_L1_EnemySpawnState = ENTITY_STATE_POST_CREATE_SETUP", 0 );
            l_U220 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_25841( ref g_U1684, "pi_L1_Enemy" );
         /* WRITESCRIPTLOG */ sub_306( "GA", "e_L1_EnemySpawnState = ENTITY_STATE_COMPLETE", 0 );
        l_U220 = 4;
        break;
    }
    if (l_U220 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_23332(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* CREATEPED */ void sub_23803(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_23985( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_24534( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_24635( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_23985(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_7103( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_24534(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_24635(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_24804(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_7103( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_23332( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_23332( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_SET_PED_TEMPLATE_AND_RANGES */ void sub_25247(unknown uParam0, unknown uParam1, float fParam2, float fParam3)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    return;
}

/* P_TETHERPED */ void sub_25386(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_25606(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_25841(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* F_L1_SPAWN_SPP */ int sub_26075()
{
    unknown uVar2;
    int I;

    switch (l_U309)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_306( "GA", "e_L1_SPP_SpawnState = ENTITY_STATE_INIT", 0 );
        l_U310 = 0;
         /* WRITESCRIPTLOG */ sub_306( "GA", "e_L1_SPP_SpawnState = ENTITY_STATE_CREATING", 0 );
        l_U309 = 2;
        break;
        case 2:
        g_U1691[l_U310] =  /* CREATEPED */ sub_23803( ref l_U311[l_U310] );
        if (NOT (IS_PED_DEAD( g_U1691[l_U310] )))
        {
            uVar2 =  /* F_GIVEPEDWEAPON */ sub_7494( g_U1691[l_U310], 68019059, 25000, 0, 0 );
            if (GET_DOES_WEAPON_EXIST( uVar2 ))
            {
                SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 100 );
            }
             /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_25247( ref g_U1691[l_U310], "AIT_NOVICE", -1082130432, -1082130432 );
             /* P_TETHERPED */ sub_25386( ref l_U377, g_U1691[l_U310], 1 );
            SET_ROOM_FOR_PED_BY_NAME( g_U1691[l_U310], ref g_U1611 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U1691[l_U310], 1 );
            SET_PED_PATH_CAN_USE_CLIMBOVERS( g_U1691[l_U310], 0 );
            SET_PED_PATH_CAN_DROP_FROM_HEIGHT( g_U1691[l_U310], 0 );
            SET_PED_ONLY_DAMAGED_BY_PLAYER( g_U1691[l_U310], 1 );
            SET_PED_GORE_FROM_NPC( g_U1691[l_U310], 0 );
            if ((IS_GERMAN_VERSION() == 1) || (IS_JAPANESE_GAME() == 1))
            {
                SET_PED_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP( g_U1691[l_U310], 0, 0 );
                SET_PED_GORE_FROM_PLAYER( g_U1691[l_U310], 0 );
            }
        }
         /* P_DEACTIVATEPED */ sub_25606( g_U1691[l_U310] );
        l_U310++;
        if (l_U310 >= 5)
        {
             /* WRITESCRIPTLOG */ sub_306( "GA", "e_L1_SPP_SpawnState = ENTITY_STATE_POST_CREATE_SETUP", 0 );
            l_U309 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_25841( ref g_U1691, "pi_EX_SPP" );
        for ( I = 0; I <= 4; I++ )
        {
            if (NOT (IS_PED_DEAD( g_U1691[I] )))
            {
                SET_PED_CAN_BE_TARGETTED( g_U1691[I], 0 );
            }
        }
         /* WRITESCRIPTLOG */ sub_306( "GA", "e_L1_SPP_SpawnState = ENTITY_STATE_COMPLETE", 0 );
        l_U309 = 4;
        break;
    }
    if (l_U309 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

/* P_GLOBAL_CREATE_ROOFTOP_LEVEL1_VEHICLES */ void sub_26926()
{
    int I;

     /* WRITESCRIPTLOG */ sub_306( "CCB", "P_GLOBAL_CREATE_ROOFTOP_LEVEL1_VEHICLES", 0 );
    for ( I = 0; I <= (g_U1288 - 1); I++ )
    {
        if (NOT (DOES_VEHICLE_EXIST( g_U1288[I] )))
        {
             /* WRITESCRIPTLOG */ sub_306( "CCB", "Creating viRooftopLevel1Vehicle_:", 0 );
            PRINTINT( I );
            PRINTNL();
            g_U1288[I] =  /* CREATEVEHICLE */ sub_27167( g_U1293[I], g_U1439[I], g_U1558[I], 0, 0, 0 );
             /* P_GLOBAL_SETUP_ROOFTOP_LEVEL1_VEHICLE */ sub_27490( ref g_U1288, I );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_306( "CCB", "The viRooftopLevel1Vehicle_ ped was already created.", 0 );
        }
    }
    return;
}

/* CREATEVEHICLE */ void sub_27167(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, int iParam5, unknown uParam6, unknown uParam7)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a vehicle with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_23985( uParam0, 1 );
    }
    Result = CREATE_VEHICLE( uParam0, uParam1, uParam4, uParam6, uParam7 );
    if (iParam5 == 1)
    {
        while ((DOES_VEHICLE_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for vehicle to exist: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if (DOES_VEHICLE_EXIST( Result ))
    {
        SET_PETROLTANK_BURN_RATE( Result, 125.00000000 );
    }
    return Result;
}

/* P_GLOBAL_SETUP_ROOFTOP_LEVEL1_VEHICLE */ void sub_27490(unknown uParam0, int iParam1)
{
    if (NOT (IS_VEHICLE_DEAD( (uParam0^)[iParam1] )))
    {
        SET_ROOM_FOR_VEHICLE_BY_NAME( (uParam0^)[iParam1], ref g_U1611 );
        SET_VEHICLE_ON_GROUND_PROPERLY( (uParam0^)[iParam1] );
        SET_VEHICLE_FREEZE_AFTER_BLOWING_UP( (uParam0^)[iParam1], 1 );
        SET_VEHICLE_PROOFS( (uParam0^)[iParam1], 0, 0, 1, 0, 0 );
        SET_VEHICLE_CAN_BE_DAMAGED( (uParam0^)[iParam1], 1 );
        SET_VEHICLE_ONLY_DAMAGED_BY_PLAYER( (uParam0^)[iParam1], 1 );
        SET_VEHICLE_ENGINE_HEALTH( (uParam0^)[iParam1], 600.00000000 );
        SET_VEHICLE_PETROL_TANK_HEALTH( (uParam0^)[iParam1], 300.00000000 );
        SET_VEHICLE_DOORS_LOCKED( (uParam0^)[iParam1], 3 );
        SET_VEHICLE_LIGHTS( (uParam0^)[iParam1], 1 );
        if (iParam1 == 1)
        {
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 1, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 2, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 3, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 4, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 5, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 6, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 7, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 8, 1 );
            SET_VEHICLE_COLOUR_COMBINATION( (uParam0^)[iParam1], 2 );
        }
    }
    return;
}

/* P_L1_CREATE_RAMP_TOP_GATE */ void sub_27976()
{
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_CREATE_RAMP_TOP_GATE start", 0 );
    l_U126 =  /* CREATEOBJECT */ sub_28099( -1154707606, -2.79000000, 105.03000000, -60.80000000, 0.00000000, 0.00000000, 180.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U126 ))
    {
        FREEZE_OBJECT_POSITION( l_U126, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U126, ref g_U1603 );
        PLAY_OBJECT_ANIM( l_U126, "Parkade_Gate_OPEN", "LEVEL_S_FAS_00", 0.00000000, 0, 1 );
        SET_OBJECT_ANIM_CURRENT_TIME( l_U126, "Parkade_Gate_OPEN", "LEVEL_S_FAS_00", 1.00000000 );
    }
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_CREATE_RAMP_TOP_GATE end", 0 );
    return;
}

/* CREATEOBJECT */ void sub_28099(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_23985( uParam0, 1 );
    }
    Result = CREATE_OBJECT( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_L1_SPAWN_VAN_ENEMY */ void sub_28615()
{
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_SPAWN_VAN_ENEMY start", 0 );
    l_U400 =  /* CREATEPED */ sub_23803( ref l_U387 );
    if (NOT (IS_PED_DEAD( l_U400 )))
    {
         /* F_GIVEPEDWEAPON */ sub_7494( l_U400, 68019059, 25000, 0, 0 );
         /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_25247( ref l_U400, "AIT_EXPERT", -1082130432, -1082130432 );
         /* P_TETHERPED */ sub_25386( ref l_U377, l_U400, 1 );
        SET_ROOM_FOR_PED_BY_NAME( l_U400, ref g_U1611 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U400, 1 );
        SET_PED_COMBAT_MOVEMENT( l_U400, 0 );
        SET_PED_ALERTNESS( l_U400, 3 );
        SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U400, 0 );
        SET_PED_PATH_CAN_DROP_FROM_HEIGHT( l_U400, 0 );
        SET_PED_ONLY_DAMAGED_BY_PLAYER( l_U400, 1 );
        SET_PED_GORE_FROM_NPC( l_U400, 0 );
    }
     /* P_DEACTIVATEPED */ sub_25606( l_U400 );
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_SPAWN_VAN_ENEMY end", 0 );
    return;
}

/* P_START_SP_CHALLENGES */ void sub_29030()
{
     /* WRITESCRIPTLOG */ sub_306( "CCB", "P_START_SP_CHALLENGES", 0 );
    if ((l_U70._fU0) || (g_U722 == 6))
    {
        if (g_U722 == 6)
        {
             /* WRITESCRIPTLOG */ sub_306( "CCB", "Starting the Rooftop_Party_Parkade context...", 0 );
            START_CONTEXT( "Rooftop_Party_Parkade" );
            if (SCRIPT_VAR_HASH_EXISTS( -1911384788 ))
            {
                SCRIPT_VAR_HASH_SET_INT( -1911384788, 0 );
                DISPLAYF( "[CCB] ### The current TiresPopped value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -1911384788 ) );
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_306( "CCB", "The TiresPopped script variable is NOT valid!!!", 0 );
            }
            if (SCRIPT_VAR_HASH_EXISTS( 1016076860 ))
            {
                SCRIPT_VAR_HASH_SET_INT( 1016076860, 0 );
                DISPLAYF( "[CCB] ### The current VehiclesDestroyed value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 1016076860 ) );
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_306( "CCB", "The VehiclesDestroyed script variable is NOT valid!!!", 0 );
            }
        }
    }
    return;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_29656(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_306( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_306( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_8268( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_29947( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_30424( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_30424( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_30684( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_30424( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_30684( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_30684( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_30424( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_30684( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_30684( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_30684( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_30424( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_30684( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_30684( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_30684( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_30684( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_32264( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_306( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_29947(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_5283( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_306( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_306( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_30424(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_30684(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_32264(int iParam0)
{
     /* WRITE_STRING */ sub_7103( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_32352( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_32429( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_32429( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_32429( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_32429( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_32429( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_33299( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU52 );
     /* WRITE_STRING */ sub_7103( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU96 );
     /* WRITE_STRING */ sub_7103( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU100 );
     /* WRITE_STRING */ sub_7103( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU104 );
     /* WRITE_STRING */ sub_7103( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU108 );
     /* WRITE_STRING */ sub_7103( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU112 );
     /* WRITE_STRING */ sub_7103( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU116 );
     /* WRITE_STRING */ sub_7103( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU120 );
     /* WRITE_STRING */ sub_7103( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU124 );
     /* WRITE_STRING */ sub_7103( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU128 );
     /* WRITE_STRING */ sub_7103( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_32598( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_32598( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_32598( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_32352(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_32429(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_32598(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_33299(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_GLOBAL_CREATE_ROOFTOP_EXIT_VEHICLES */ void sub_34254()
{
    int I;

     /* WRITESCRIPTLOG */ sub_306( "CCB", "P_GLOBAL_CREATE_ROOFTOP_EXIT_VEHICLES", 0 );
    for ( I = 0; I <= (g_U1291 - 1); I++ )
    {
        if (NOT (DOES_VEHICLE_EXIST( g_U1291[I] )))
        {
             /* WRITESCRIPTLOG */ sub_306( "CCB", "Creating viRooftopExitVehicle_:", 0 );
            PRINTINT( I );
            PRINTNL();
            g_U1291[I] =  /* CREATEVEHICLE */ sub_27167( g_U1296[I], g_U1446[I], g_U1561[I], 0, 0, 0 );
             /* P_GLOBAL_SETUP_ROOFTOP_EXIT_VEHICLE */ sub_34509( ref g_U1291, I );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_306( "CCB", "The viRooftopExitVehicle_ ped was already created.", 0 );
        }
    }
    return;
}

/* P_GLOBAL_SETUP_ROOFTOP_EXIT_VEHICLE */ void sub_34509(unknown uParam0, int iParam1)
{
    if (NOT (IS_VEHICLE_DEAD( (uParam0^)[iParam1] )))
    {
        SET_ROOM_FOR_VEHICLE_BY_NAME( (uParam0^)[iParam1], ref g_U1611 );
        SET_VEHICLE_ON_GROUND_PROPERLY( (uParam0^)[iParam1] );
        SET_VEHICLE_FREEZE_AFTER_BLOWING_UP( (uParam0^)[iParam1], 1 );
        SET_VEHICLE_PROOFS( (uParam0^)[iParam1], 0, 0, 1, 0, 0 );
        SET_VEHICLE_CAN_BE_DAMAGED( (uParam0^)[iParam1], 1 );
        SET_VEHICLE_ONLY_DAMAGED_BY_PLAYER( (uParam0^)[iParam1], 1 );
        SET_VEHICLE_ENGINE_HEALTH( (uParam0^)[iParam1], 600.00000000 );
        SET_VEHICLE_PETROL_TANK_HEALTH( (uParam0^)[iParam1], 300.00000000 );
        SET_VEHICLE_DOORS_LOCKED( (uParam0^)[iParam1], 3 );
        SET_VEHICLE_LIGHTS( (uParam0^)[iParam1], 1 );
        if (iParam1 == 0)
        {
            SET_VEHICLE_ENGINE_CAN_BE_DAMAGED( (uParam0^)[iParam1], 0 );
            SET_VEHICLE_COLOUR_COMBINATION( (uParam0^)[iParam1], 2 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 1, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 2, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 3, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 4, 1 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 5, 0 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 6, 0 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 7, 0 );
            SET_VEHICLE_EXTRA( (uParam0^)[iParam1], 8, 0 );
        }
    }
    return;
}

/* P_L1_CREATE_EXIT_GATE */ void sub_35006()
{
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_CREATE_EXIT_GATE start", 0 );
    l_U127 =  /* CREATEOBJECT */ sub_28099( -1154707606, -11.57800000, 80.10500000, -60.80000000, 0.00000000, 0.00000000, -90.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U127 ))
    {
        FREEZE_OBJECT_POSITION( l_U127, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U127, ref g_U1611 );
    }
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_CREATE_EXIT_GATE end", 0 );
    return;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_35515(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_35591(  /* PLAYER_PED_ID */ sub_1194(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* F_ISPEDINTRIGGERBOX */ int sub_35591(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_35734(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_35772( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_35881( 0,  /* PLAYER_PED_ID */ sub_1194(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_35881( 1,  /* PLAYER_PED_ID */ sub_1194(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_36134( uParam0, uParam1, 8, 1 );
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_35772(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_35881(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_36134(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_36179( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_36179(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_36266( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_36266(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_36318( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_36836( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_36318(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_36836(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_37055(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_35591(  /* PLAYER_PED_ID */ sub_1194(), uParam0 );
}

/* P_L1_ENEMY_START_FIGHT_WITH_SPP */ void sub_37192()
{
    int J;
    int I;

     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_ENEMY_START_FIGHT_WITH_SPP start", 0 );
     /* P_ACTIVATEPEDARRAY */ sub_37291( ref g_U1684 );
     /* P_ACTIVATEPED */ sub_37343( g_U1691[0] );
     /* P_ACTIVATEPED */ sub_37343( g_U1691[1] );
     /* P_ACTIVATEPED */ sub_37343( g_U1691[2] );
     /* P_GBL_CREATE_BLOOD_POOL_FOR_PED */ sub_37537( g_U1684[4], 0.00000000, 1082130432, 1101004800 );
     /* P_CREATE_DEAD_BODY */ sub_37634( g_U1684[4], 1 );
     /* P_GBL_CREATE_BLOOD_POOL_FOR_PED */ sub_37537( g_U1684[5], 0.00000000, 1082130432, 1101004800 );
     /* P_CREATE_DEAD_BODY */ sub_37634( g_U1684[5], 8 );
    if (NOT (IS_PED_DEAD( g_U1684[0] )))
    {
        SET_PED_FLAG_LOCK_TO_COVER( g_U1684[0], 1 );
        TASK_COMBAT_SNAP_TO_COVER( g_U1684[0], "GenCover", "F771B893_3A5503C4_Corner2", 0 );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( g_U1684[0], 1 );
    }
    if (NOT (IS_PED_DEAD( g_U1684[1] )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U1684[1], 0 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U1684[1], 1 );
        TASK_COMBAT_SNAP_TO_COVER( g_U1684[1], "GenCover", "F771B893_FEF10CF9_Corner2", 0 );
    }
    if (NOT (IS_PED_DEAD( g_U1684[2] )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U1684[2], 0 );
        SET_PED_COMBAT_MOVEMENT( g_U1684[2], 0 );
    }
    if (NOT (IS_PED_DEAD( g_U1684[3] )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U1684[3], 0 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U1684[3], 1 );
        TASK_COMBAT_SNAP_TO_COVER_COORDS( g_U1684[3], l_U222[3]._fU0, 0 );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( g_U1684[3], 1 );
    }
    if (NOT (IS_PED_DEAD( g_U1691[0] )))
    {
        SET_PED_FLAG_LOCK_TO_COVER( g_U1691[0], 1 );
        TASK_COMBAT_SNAP_TO_COVER( g_U1691[0], "GenCover", "F771B893_99E9FD3_Corner1", 0 );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( g_U1691[0], 1 );
    }
    if (NOT (IS_PED_DEAD( g_U1691[1] )))
    {
        SET_PED_COMBAT_MOVEMENT( g_U1691[1], 0 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U1691[1], 0 );
    }
    if (NOT (IS_PED_DEAD( g_U1691[2] )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U1691[2], 0 );
    }
    for ( J = 0; J <= 5; J++ )
    {
        for ( I = 0; I <= 4; I++ )
        {
            if ((NOT (IS_PED_DEAD( g_U1691[I] ))) AND (NOT (IS_PED_DEAD( g_U1684[J] ))))
            {
                REGISTER_TARGET( g_U1684[J], g_U1691[I] );
                REGISTER_TARGET( g_U1691[I], g_U1684[J] );
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_ENEMY_START_FIGHT_WITH_SPP end", 0 );
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_37291(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_37343( (uParam0^)[I] );
    }
    return;
}

/* P_ACTIVATEPED */ void sub_37343(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_GBL_CREATE_BLOOD_POOL_FOR_PED */ void sub_37537(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        ADD_BLOOD_POOL( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 ), uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_CREATE_DEAD_BODY */ void sub_37634(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
         /* WRITE_STRING */ sub_7103( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

/* P_L1_HANDLE_SPEECH_SRTP_GNS */ void sub_39558()
{
    if (NOT l_U138)
    {
        if ( /* F_ISPLAYERINTRIGGERBOX */ sub_37055( l_U160 ))
        {
            l_U138 = 1;
        }
    }
    return;
}

/* F_L1_IS_PLAYER_NOTICED_BY_ENEMIES */ int sub_39639()
{
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )))
    {
        if (IS_PED_SHOOTING(  /* PLAYER_PED_ID */ sub_1194() ))
        {
            return 1;
        }
    }
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_37055( l_U181 ))
    {
        return 1;
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_35515( ref l_U160, 0 ))
    {
        if (NOT (IS_PED_DEAD( g_U1684[0] )))
        {
            SET_PED_ALERTNESS( g_U1684[0], 1 );
            SET_PED_FLAG_LOCK_TO_COVER( g_U1684[0], 0 );
        }
         /* STARTTIMER */ sub_2258( ref l_U202 );
    }
    if ( /* ISTIMERDONE */ sub_2391( ref l_U202 ))
    {
        return 1;
    }
    return 0;
}

/* P_L1_FIRST_ENEMY_NOTICE_PLAYER */ void sub_39853()
{
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_FIRST_ENEMY_NOTICE_PLAYER start", 0 );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() ))) AND (NOT (IS_PED_DEAD( g_U1684[0] ))))
    {
        SET_PED_FLAG_LOCK_TO_COVER( g_U1684[0], 0 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U1684[0], 0 );
        REGISTER_TARGET( g_U1684[0],  /* PLAYER_PED_ID */ sub_1194() );
        SET_LOCKED_TARGET( g_U1684[0],  /* PLAYER_PED_ID */ sub_1194() );
    }
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_FIRST_ENEMY_NOTICE_PLAYER end", 0 );
    return;
}

/* P_L1_SPP_FIRST_WAVE_CAN_BE_KILLED */ void sub_40109()
{
    int I;

     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_SPP_FIRST_WAVE_CAN_BE_KILLED start", 0 );
    for ( I = 0; I <= 2; I++ )
    {
        if (NOT (IS_PED_DEAD( g_U1691[I] )))
        {
            SET_PED_ONLY_DAMAGED_BY_PLAYER( g_U1691[I], 0 );
            SET_PED_GORE_FROM_NPC( g_U1691[I], 1 );
        }
    }
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_SPP_FIRST_WAVE_CAN_BE_KILLED end", 0 );
    return;
}

/* P_L1_START_VAN_ENEMY */ void sub_40346()
{
    int I;

     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_START_VAN_ENEMY start", 0 );
     /* P_ACTIVATEPED */ sub_37343( l_U400 );
    if (NOT (IS_PED_DEAD( l_U400 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U400, 0 );
        for ( I = 0; I <= 2; I++ )
        {
            if (NOT (IS_PED_DEAD( g_U1691[I] )))
            {
                REGISTER_TARGET( l_U400, g_U1691[I] );
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_START_VAN_ENEMY end", 0 );
    return;
}

/* P_GBL_HANDLE_PAINKILLER_TUTORIAL */ void sub_40872()
{
    if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1232() ))) AND ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() ))) AND ((NOT g_U1699) AND ( /* F_IS_TUTORIAL_LEVEL */ sub_40917()))))
    {
        if (NOT g_U1698)
        {
            if ((GET_PAYNEKILLER_AMT() > 0) AND ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND (IS_PLAYER_CONTROL_ON(  /* PLAYER_ID */ sub_1232() )))))
            {
                if (( /* F_GET_PLAYER_HEALTH_PERCENT */ sub_41086()) < 0.40000000)
                {
                     /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_41248( "TUT_PAINKILLER", 1 );
                    SET_GAME_PAUSED( 1 );
                    DISABLE_RESTART_CHECKPOINT( 1 );
                    SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
                     /* CREATETIMER */ sub_2108( ref g_U1700, 500, 1, 1 );
                     /* STARTTIMER */ sub_2258( ref g_U1700 );
                    g_U1698 = 1;
                }
            }
        }
        else if ((g_U1700._fU16) || ( /* ISTIMERDONE */ sub_2391( ref g_U1700 )))
        {
            if (IS_CONTROL_PRESSED( 2, 19 ))
            {
                 /* WRITESCRIPTLOG */ sub_306( "GA", "Player completed painkiller tutorial.", 0 );
                 /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_41551();
                STOP_IMAGEFX( g_U1697, 0 );
                SET_GAME_PAUSED( 0 );
                DISABLE_RESTART_CHECKPOINT( 0 );
                SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
                SET_PLAYER_FORCE_PAIN_KILLER( 1 );
                g_U1698 = 0;
                g_U1699 = 1;
            }
        }
        if ((IS_LAST_MAN_STANDING_ACTIVE()) || (IS_BULLET_CAMERA_ACTIVE()))
        {
             /* WRITESCRIPTLOG */ sub_306( "GA", "Prematurely ending painkiller tutorial.", 0 );
             /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_41551();
            SET_GAME_PAUSED( 0 );
            DISABLE_RESTART_CHECKPOINT( 0 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
            SET_PLAYER_FORCE_PAIN_KILLER( 0 );
            g_U1698 = 0;
        }
    }
    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )) AND (g_U1698))
    {
         /* P_GBL_EARLY_CANCEL_PAINKILLER_TUTORIAL */ sub_41833();
    }
    return;
}

/* F_IS_TUTORIAL_LEVEL */ int sub_40917()
{
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (IS_TUTORIAL_COMPLETE())
    {
        return 0;
    }
    return 1;
}

/* F_GET_PLAYER_HEALTH_PERCENT */ float sub_41086()
{
    unknown uVar2;
    unknown uVar3;
    float Result;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )))
    {
        uVar2 = TO_FLOAT( (GET_PED_MAX_HEALTH(  /* PLAYER_PED_ID */ sub_1194() )) - 100 );
        uVar3 = TO_FLOAT( (GET_PED_HEALTH(  /* PLAYER_PED_ID */ sub_1194() )) - 100 );
        Result = uVar3 / uVar2;
        return Result;
    }
    return 0.00000000;
}

/* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ void sub_41248(unknown uParam0, boolean bParam1)
{
    UI_SET( 25, 2, 1537, "SPSlotLoader", 1537, uParam0 );
    if (bParam1)
    {
        STOP_IMAGEFX( g_U1697, 0 );
        g_U1697 = PLAY_IMAGEFX( "INTERLACE_DESATURATED_PANEL_02", 3, 0 );
    }
    return;
}

/* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ void sub_41551()
{
    UI_SET( 15, 2, 1537, "animMainText", 257, 1 );
    return;
}

/* P_GBL_EARLY_CANCEL_PAINKILLER_TUTORIAL */ void sub_41833()
{
    if (g_U1698)
    {
         /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_41551();
        STOP_IMAGEFX( g_U1697, 0 );
        SET_GAME_PAUSED( 0 );
        DISABLE_RESTART_CHECKPOINT( 0 );
        SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
        SET_PLAYER_FORCE_PAIN_KILLER( 0 );
        g_U1698 = 0;
    }
    return;
}

/* P_L1_REMAINING_ENEMIES_ENGAGE_PLAYER */ void sub_41985()
{
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_REMAINING_ENEMIES_ENGAGE_PLAYER start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )))
    {
        if (NOT (IS_PED_DEAD( g_U1684[1] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( g_U1684[1], 0 );
            REGISTER_TARGET( g_U1684[1],  /* PLAYER_PED_ID */ sub_1194() );
            SET_LOCKED_TARGET( g_U1684[1],  /* PLAYER_PED_ID */ sub_1194() );
        }
        if (NOT (IS_PED_DEAD( g_U1684[2] )))
        {
            SET_PED_COMBAT_MOVEMENT( g_U1684[2], 2 );
        }
        if (NOT (IS_PED_DEAD( g_U1684[3] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( g_U1684[3], 0 );
            REGISTER_TARGET( g_U1684[3],  /* PLAYER_PED_ID */ sub_1194() );
            SET_LOCKED_TARGET( g_U1684[3],  /* PLAYER_PED_ID */ sub_1194() );
        }
    }
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_REMAINING_ENEMIES_ENGAGE_PLAYER end", 0 );
    return;
}

/* P_L1_START_SPP_WAVE_2 */ void sub_42361()
{
    unknown uVar2;

     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_START_SPP_WAVE_2 start", 0 );
     /* P_ACTIVATEPED */ sub_37343( g_U1691[3] );
     /* P_ACTIVATEPED */ sub_37343( g_U1691[4] );
    if ((NOT (IS_PED_DEAD( l_U400 ))) AND (NOT (IS_PED_DEAD( g_U1691[3] ))))
    {
        SET_PED_FLAG_LOCK_TO_COVER( g_U1691[3], 1 );
        TASK_COMBAT_MOVE_TO_COVER( g_U1691[3], "GenCover", "F771B893_40889436_Corner2", 0 );
        REGISTER_TARGET( g_U1691[3], l_U400 );
        SET_PED_ONLY_DAMAGED_BY_PLAYER( g_U1691[3], 0 );
        SET_PED_GORE_FROM_NPC( g_U1691[3], 1 );
    }
    if ((NOT (IS_PED_DEAD( l_U400 ))) AND (NOT (IS_PED_DEAD( g_U1691[4] ))))
    {
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, -6.60000000, 66.65000000, -60.70000000, l_U400, 3, 1, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0, l_U400 );
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( g_U1691[4], uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
        SET_PED_ONLY_DAMAGED_BY_PLAYER( g_U1691[4], 0 );
        SET_PED_GORE_FROM_NPC( g_U1691[4], 1 );
    }
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_L1_START_SPP_WAVE_2 end", 0 );
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_42854(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_42978(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_42854( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_START_CHECKPOINT_THREAD */ void sub_43170(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* P_L1_HANDLE_SPP_KILL_ON_TIMER */ void sub_43240()
{
    int I;

    if ( /* ISTIMERDONE */ sub_2391( ref l_U378 ))
    {
        for ( I = 0; I <= 4; I++ )
        {
            if (NOT (IS_PED_DEAD( g_U1691[I] )))
            {
                 /* P_GBL_CREATE_BLOOD_POOL_FOR_PED */ sub_37537( g_U1691[I], 0.00000000, 1082130432, 1101004800 );
                 /* P_KILL_PED */ sub_43368( g_U1691[I] );
                 /* CREATETIMER */ sub_2108( ref l_U378, GET_RANDOM_INT_IN_RANGE( 500, 1000 ), 1, 0 );
                 /* STARTTIMER */ sub_2258( ref l_U378 );
                return;
            }
        }
    }
    return;
}

/* P_KILL_PED */ void sub_43368(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* P_KILL_PEDS_IN_ARRAY */ void sub_43722(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_KILL_PED */ sub_43368( (uParam0^)[I] );
    }
    return;
}

/* F_UNLOADCUTSCENEANDLOADNEWCUTSCENE */ int sub_44050(unknown uParam0, unknown uParam1)
{
    if (CUTSCENE_IS_LOADED( uParam1 ))
    {
        PRINTSTRING( uParam1 );
         /* WRITE_STRING */ sub_7103( " is loaded." );
        return 1;
    }
    else if ((CUTSCENE_NAMED_IS_LOADING( uParam0 )) || (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRINTSTRING( "Unloading cutscene " );
         /* WRITE_STRING */ sub_7103( uParam0 );
        CLEAR_NAMED_CUTSCENE( uParam0 );
    }
    else if (CUTSCENE_NAMED_IS_LOADING( uParam1 ))
    {
        PRINTSTRING( uParam1 );
         /* WRITE_STRING */ sub_7103( " is loading." );
    }
    else
    {
        PRINTSTRING( "Requesting cutscene " );
         /* WRITE_STRING */ sub_7103( uParam1 );
         /* LOADSEAMLESSCUTSCENE */ sub_44310( uParam1, 0 );
    };;;
    return 0;
}

/* LOADSEAMLESSCUTSCENE */ void sub_44310(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_L1_M07A_PRECUTSCENESETUP */ int sub_44763()
{
    l_U428 =  /* CREATEVEHICLE */ sub_27167( -239844571, -2.53000000, 65.55000000, -60.00000000, 270.00000000, 0, 0, 0 );
    if (NOT (IS_VEHICLE_DEAD( l_U428 )))
    {
        SET_ROOM_FOR_VEHICLE_BY_NAME( l_U428, ref g_U1611 );
        SET_VEHICLE_COLOUR_COMBINATION( l_U428, 2 );
        SET_VEHICLE_EXTRA( l_U428, 1, 1 );
        SET_VEHICLE_EXTRA( l_U428, 2, 1 );
        SET_VEHICLE_EXTRA( l_U428, 3, 1 );
        SET_VEHICLE_EXTRA( l_U428, 4, 1 );
        SET_VEHICLE_EXTRA( l_U428, 5, 0 );
        SET_VEHICLE_EXTRA( l_U428, 6, 0 );
        SET_VEHICLE_EXTRA( l_U428, 7, 0 );
        SET_VEHICLE_EXTRA( l_U428, 8, 0 );
    }
    return 1;
}

/* P_L1_M07A_CUTSCENEREGISTRATION */ void sub_45010()
{
    if (NOT (IS_VEHICLE_DEAD( l_U428 )))
    {
        REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE( l_U428, "van_nyc", 0 );
    }
    DO_SCREEN_FADE_OUT( 0 );
    return;
}

/* P_L1_M07_HANDLECUTSCENE */ void sub_45110()
{
    int I;

    if (l_U401._fU52)
    {
        AUDIO_MUSIC_SUSPEND( 5000 );
         /* CLEANVEHICLE */ sub_4284( g_U1291[0] );
         /* CLEANPED */ sub_4113( l_U400 );
        for ( I = 0; I <= 4; I++ )
        {
            if (NOT (IS_PED_DEAD( g_U1691[I] )))
            {
                 /* CLEANPED */ sub_4113( g_U1691[I] );
            }
        }
        DO_SCREEN_FADE_IN( 1000 );
    }
    return;
}

/* CUTSYS_DEFAULT_POSTCUTSCENE */ int sub_45270()
{
    return 1;
}

/* P_L1_M07_PREPAREBLENDOUT */ void sub_45319()
{
    DO_SCREEN_FADE_OUT( 0 );
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDOUT */ int sub_45372()
{
    return 1;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_45427(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_306( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_45651( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 45548, 45598, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_45548()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_45598()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_45651(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_HANDLECUTSCENE */ void sub_45961(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_306( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_306( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_306( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_306( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_306( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_306( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_44310( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_306( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_46852( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_46852( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_306( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_47396( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_46852( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_47776( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_47776( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* NIS_PRE_SETUP */ void sub_46852(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1232(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1194(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1194() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1194(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_47396(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1194(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1194(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1194(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1194(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1194(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_47776(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1232(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1194(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_47874();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_47874()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1194() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1194(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1194(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1194(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1194(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_RELEASE_L1_ASSETS */ void sub_48328()
{
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_RELEASE_L1_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_48407( ref l_U106, ref g_U821 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_49637( ref l_U113, ref g_U918 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_50077( "LEVEL_S_FAS_00", ref g_U1028 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_50077( "DAM_DEAD", ref g_U1028 );
    RESET_PED_MODEL_LOD_DISTANCES( -455782833 );
     /* WRITESCRIPTLOG */ sub_306( "GA", "P_RELEASE_L1_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_48407(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_48480( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_48480(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_48624( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_48624(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_49637(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_49711( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_49711(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_48624( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_50077(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_48624( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

