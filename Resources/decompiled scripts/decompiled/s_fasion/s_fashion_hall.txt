void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U58 = 0;
    l_U59 = 0;
    l_U60 = 1500;
    l_U116 = 0;
    l_U118 = 0;
    l_U239 = 2000;
    l_U249 = 2500;
    l_U259 = 600;
    l_U292 = 200;
    l_U302 = 250;
    l_U312 = 500;
    l_U322 = 500;
    l_U332 = 1750;
    l_U580 = {-6.99000000, -1.16000000, -6.71000000};
    l_U583 = {-7.57100000, -1.39900000, -7.53000000};
    l_U586 = -30.66700000;
    l_U609 = 10000;
    l_U642 = {2.41000000, -15.77000000, -7.34000000};
    l_U891 = 0;
     /* WRITESCRIPTLOG */ sub_456( "SP", "Script s_fashion_hall.sc is starting up...", 0 );
     /* P_HW_POPULATE_VARIABLE_ARRAYS */ sub_574();
    l_U116 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_843();
        if (l_U118 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_13612();
        }
         /* P_HW_DEBUG_TUNING_WIDGET */ sub_68440();
        WAIT( 0 );
    }
     /* P_CLEANUP_HW */ sub_4145( 0 );
     /* P_RELEASE_HW_ASSETS */ sub_68870();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_fashion_hall" );
     /* WRITESCRIPTLOG */ sub_456( "SP", "Script s_fashion_hall.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_456(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_HW_POPULATE_VARIABLE_ARRAYS */ void sub_574()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_POPULATE_VARIABLE_ARRAYS start", 0 );
    l_U106[0] = 248373526;
    l_U106[1] = -1239591483;
    l_U106[2] = g_U719;
    l_U106[3] = -1409914275;
    l_U106[4] = 990918269;
    l_U106[5] = 1459973966;
    l_U106[6] = -274880563;
    l_U114[0] = 68019059;
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_POPULATE_VARIABLE_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_843()
{
    if ((g_U723 == 0) || (g_U723 == 1))
    {
        switch (l_U118)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1053()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
            {
                SET_GAME_PAUSED( 0 );
                 /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1518();
                STOP_IMAGEFX( g_U1697, 0 );
                UI_SET( 25, 2, 1537, "SPSlotLoader", 1537, "" );
                l_U118 = 1;
                 /* WRITESCRIPTLOG */ sub_456( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_1712())
            {
                if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
                {
                    CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_952() );
                    RESET_PLAYER_INPUT_GAIT( 0 );
                     /* P_RESET_MAX_ACTION_TREE */ sub_1798();
                }
                l_U118 = 2;
                 /* WRITESCRIPTLOG */ sub_456( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER_RESPAWN", 0 );
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_2205( 0 )) == 1)
            {
                l_U118 = 2;
                 /* WRITESCRIPTLOG */ sub_456( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER_RESPAWN", 0 );
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
            {
                if ((g_U724[2]._fU40 != 4) AND (g_U724[2]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_456( "GA", "Shutting down script for mpm checkpoint.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_3834( ref g_U724[2] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U724[2]._fU32 );
                    g_U1264[2] = 0;
                }
                l_U118 = 3;
                 /* WRITESCRIPTLOG */ sub_456( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_456( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_990() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_990(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_952() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_952(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
             /* P_CLEANUP_HW */ sub_4145( 1 );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "milo_rtp_str_01", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "milo_rtp_str_01", 0 ), GET_HASH_KEY( "RTP_strs_Rm01" ) );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "MILO_RTP_cnd_A", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "MILO_RTP_cnd_A", 0 ), GET_HASH_KEY( "MloRoom01" ) );
            l_U118 = 4;
             /* WRITESCRIPTLOG */ sub_456( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_456( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U70._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_8936( ref l_U70,  /* PLAYER_PED_ID */ sub_952() );
            }
            l_U118 = 5;
             /* WRITESCRIPTLOG */ sub_456( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_456( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U116 = 1;
            l_U118 = 0;
             /* WRITESCRIPTLOG */ sub_456( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_952()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_990() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_990()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1053()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_952(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_990(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_990(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_952() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_952(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ void sub_1518()
{
    UI_SET( 15, 2, 1537, "animMainText", 257, 1 );
    return;
}

/* IS_RESTART_ACTIVE */ void sub_1712()
{
    return g_U648;
}

/* P_RESET_MAX_ACTION_TREE */ void sub_1798()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_RESET_MAX_ACTION_TREE start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        if (IS_PLAYER_SHOOTDODGING())
        {
            SCRIPT_ASSERT( "Do not try to reset Max's action tree when he is shoot dodging.", 0 );
             /* WRITESCRIPTLOG */ sub_456( "GA", "You cannot reset Max's action tree during a shoot dodge.", 0 );
        }
        else
        {
            PED_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_952(), "/Global/Player" );
        }
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_RESET_MAX_ACTION_TREE end", 0 );
    return;
}

/* F_CHECK_QUIT_RETRY */ int sub_2205(int iParam0)
{
    iParam0 = 1;
    switch (l_U59)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_2287( ref l_U61 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
            {
                l_U60 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_2421( ref l_U61, l_U60, 1, 1 );
             /* STARTTIMER */ sub_2571( ref l_U61 );
        }
        if ( /* ISTIMERDONE */ sub_2704( ref l_U61 ))
        {
             /* WRITESCRIPTLOG */ sub_456( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_990() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_990(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U59 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U59 = 2;
            }
            else
            {
                l_U59 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_456( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_3205();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_456( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_3205();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_2287(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_2421(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2571(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2704(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_3205()
{
     /* WRITESCRIPTLOG */ sub_456( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_3280( ref l_U61 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_990() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_990(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U58 = 0;
    l_U58 = l_U58;
    l_U59 = 0;
    return;
}

/* RESETTIMER */ void sub_3280(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_3834(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_HW */ void sub_4145(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_CLEANUP_HW start", 0 );
    ISEQ_TERMINATE( -903619740 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4223( -903619740, ref g_U967 );
    ISEQ_TERMINATE( -407521813 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4223( -407521813, ref g_U967 );
    ISEQ_TERMINATE( -1712187272 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4223( -1712187272, ref g_U967 );
    ISEQ_TERMINATE( -770391621 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4223( -770391621, ref g_U967 );
    ISEQ_TERMINATE( 127872207 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4223( 127872207, ref g_U967 );
    ISEQ_TERMINATE( -58648941 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4223( -58648941, ref g_U967 );
     /* P_STREAMREQ_SCRIPT_STREAM_STOP */ sub_5439( "ROOFTOP_PIANO_01", ref g_U1168 );
     /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_6227( "ROOFTOP_PIANO_01", ref g_U1168 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_990(), 0, 0 );
    }
    SET_CAM_VIEW_MODE( 1 );
    CAMERA_ENABLE_FIRST_TIME_AIM_LOCK( 1 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_CONDO_WOMAN_SCREAM", 0 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_CONDO_MAN_SWEAR", 0 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_CONDO_GUNSHOTS", 0 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_FABIANNA_HOSTAGE_CS", 0 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_FABIANNA_HOSTAGE_SECURITY", 0 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_FABIANNA_HOSTAGE_FABIANNA", 0 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_FABIANNA_INITIAL_SCREAM", 0 );
    if (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "ROOFTOP_ONESHOT_START" ))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
    if (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "ROOFTOP_ONESHOT_BADDIES" ))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
     /* P_ENABLE_POI */ sub_7020( ref l_U494, 0 );
     /* P_ENABLE_POI */ sub_7020( ref l_U645, 0 );
    if (NOT bParam0)
    {
        UI_SET( 25, 2, 1537, "SPSlotLoader", 1537, "" );
    }
     /* CLEANPED */ sub_8080( l_U235 );
     /* CLEANPEDARRAY */ sub_8169( ref l_U427 );
     /* CLEANPED */ sub_8080( l_U493 );
     /* CLEANOBJECT */ sub_8258( l_U236 );
     /* CLEANOBJECT */ sub_8258( l_U237 );
     /* CLEANOBJECT */ sub_8258( l_U641 );
     /* CLEANPLACEMENT */ sub_8339( g_U665._fU0 );
     /* CLEANPLACEMENT */ sub_8339( l_U212 );
     /* P_STOP_SP_CHALLENGES */ sub_8411( bParam0 );
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_CLEANUP_HW end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_4223(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4361( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_4361(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_STOP */ void sub_5439(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_5489( uParam0, uParam1 ))
    {
        iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_5698( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            DISPLAYF( "[CCB]### Stopping the SCRIPT_STREAM: {} ###", 1, 1281, ref (uParam1^)[iVar4]._fU0 );
            STOP_SCRIPT_STREAM( iVar4 );
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam0 );
            SCRIPT_ASSERT( "Attempting to stop a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam0 );
        DISPLAYF( "Attempting to stop a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ int sub_5489(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB]### The SCRIPT_STREAM is loaded: {} ###", 1, 1281, ref (uParam1^)[I]._fU0 );
                return 1;
            }
        }
    }
    return 0;
}

/* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ int sub_5698(unknown uParam0, unknown uParam1)
{
    int Result;

    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
        {
            return Result;
        }
    }
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ void sub_6227(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4361( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a SCRIPT_STREAM asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_ENABLE_POI */ void sub_7020(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if ((iParam0->_fU4 == 1) AND (iParam0->_fU320 == 1))
        {
             /* P_ENABLEPOIGLINT */ sub_7079( iParam0, 1 );
        }
        iParam0->_fU0 = 1;
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_7079( iParam0, 0 );
         /* P_ENABLEPOIINTERACTIONTEXT */ sub_7298( iParam0, 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )) == 0)
        {
            TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_952() );
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_952(), 0 );
                iParam0->_fU328 = 0;
            }
        }
        iParam0->_fU8 = 0;
        iParam0->_fU0 = 0;
    }
    return;
}

/* P_ENABLEPOIGLINT */ void sub_7079(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if (iParam0->_fU12 != nil)
        {
            if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
            {
                ENABLE_GLINT( iParam0->_fU12, 1 );
            }
            else
            {
                iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
            }
        }
        else
        {
            iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
        }
    }
    else if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            ENABLE_GLINT( iParam0->_fU12, 0 );
        }
    }
    return;
}

/* P_ENABLEPOIINTERACTIONTEXT */ void sub_7298(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
        SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
        if ((iParam0->_fU72 == 0) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU68 == 1)))
        {
            SET_INTERACTIONTEXT_VISIBLE( 0 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
        else
        {
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_7478( iParam0 );
        if (iParam0->_fU332 == 1)
        {
            SET_INTERACTIONTEXT_PULSE( 1 );
            SET_INTERACTIONTEXT_PULSE_PERIOD( iParam0->_fU336 );
        }
    }
    else
    {
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
    }
    return;
}

/* P_UPDATEINTERACTIONTEXTAVAILABLE */ void sub_7478(int iParam0)
{
    if (iParam0->_fU60 == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 0 );
        iParam0->_fU56 = 0;
    }
    else if (iParam0->_fU56 == 1)
    {
        if (( /* F_ISACTIONINGAVAILABLE */ sub_7574( iParam0 )) == 0)
        {
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
    }
    else if (( /* F_ISACTIONINGAVAILABLE */ sub_7574( iParam0 )) == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 1 );
        iParam0->_fU56 = 1;
    };;;
    return;
}

/* F_ISACTIONINGAVAILABLE */ int sub_7574(int iParam0)
{
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_990() )) == 0))
    {
        if (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_952() )) == 1) || (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_952() )) == 1) || (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_952() )) == 1) || (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_952() )) == 1) || (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_952() )) == 1) || (IS_PLAYER_SHOOTDODGING() == 1))))))
        {
            return 0;
        }
        if (iParam0->_fU304 == 0)
        {
            if ((IS_MONOLOGUE_PLAYING() == 1) || ((IS_ANY_SPEECH_PLAYING(  /* PLAYER_PED_ID */ sub_952() )) == 1))
            {
                return 0;
            }
        }
        return 1;
    }
    return 0;
}

/* CLEANPED */ void sub_8080(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANPEDARRAY */ void sub_8169(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_8080( (uParam0^)[I] );
    }
    return;
}

/* CLEANOBJECT */ void sub_8258(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_8339(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_8411(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_456( "CCB", "P_STOP_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_456( "CCB", "Stopping the Rooftop_Party_Penthouse_Hallways context.", 0 );
    END_CONTEXT( "Rooftop_Party_Penthouse_Hallways" );
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_8936(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_456( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_9155( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_10319( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10633( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11112( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10633( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11112( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10633( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11112( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_11428( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11112( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_11428( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11112( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_12000( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_12202( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_952(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_9155(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_9217( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_9217(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_10319(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_10633(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_11037( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_11037(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_11112(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_11428(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_11037( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_12000(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_12202(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_9217( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_12300( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_12300(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_13612()
{
    int iVar2;
    unknown uVar3;
    int iVar4;
    unknown uVar5;
    int iVar6;

    iVar2 = l_U116;
     /* P_HANDLE_SP_CHALLENGES */ sub_13647();
     /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_14036( ref l_U427, -9.50000000, 0, 1 );
    switch (l_U116)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_456( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_14454();
         /* P_INITIALIZE_SP_CHALLENGES */ sub_14999();
         /* P_SET_STATIC_DATA */ sub_15046();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        if (g_U723 == 0)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
            {
                FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_952(), 1 );
                 /* TELEPORTPED */ sub_18491(  /* PLAYER_PED_ID */ sub_952(), g_U1333[0], g_U1450[0] );
            }
        }
        l_U116 = 2;
         /* WRITESCRIPTLOG */ sub_456( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_456( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_HW_PERSISTENT_ASSETS */ sub_18689();
         /* P_REQUEST_HW_NONPERSISTENT_ASSETS */ sub_27645();
        l_U116 = 3;
         /* WRITESCRIPTLOG */ sub_456( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_35302( ref g_U1221 )) AND (( /* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ sub_34916( ref g_U1168 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_34502( ref g_U967 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_34111( ref g_U1028 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_33709( ref g_U918 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_33312( ref g_U821 )))))))
        {
            if (NOT l_U70._fU0)
            {
                l_U116 = 4;
                 /* WRITESCRIPTLOG */ sub_456( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U116 = 6;
                 /* WRITESCRIPTLOG */ sub_456( "SP", "eCheckpointState = CP_HW_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        if (( /* HAS_SAVEFILE_LOADED */ sub_35890( ref l_U70 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_11428(  /* PLAYER_PED_ID */ sub_952(), 68019059, 200, 0, 0 );
            l_U116 = 5;
             /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U116 = 6;
             /* WRITESCRIPTLOG */ sub_456( "SP", "eCheckpointState = CP_HW_PRE_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
        {
            if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_952(), 0, 0 ) ))
            {
                l_U116 = 6;
                 /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_HW_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if ( /* F_HW_CREATE_V1_ENEMY */ sub_36374())
        {
            if (g_U723 == 0)
            {
                if (CUTSCENE_IS_LOADED( "01_01_RP_concat" ))
                {
                    l_U116 = 7;
                     /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_HW_HANDLE_11_01_RP", 0 );
                }
                else if (CUTSCENE_NAMED_IS_LOADING( "01_01_RP_concat" ))
                {
                     /* WRITESCRIPTLOG */ sub_456( "GA", "Waiting for cutscene 11_01_PANAMA_CONCAT to load.", 0 );
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_456( "GA", "Requesting cutscene 11_01_PANAMA_CONCAT to load.", 0 );
                    PRE_STREAM_SEAMLESS_CUTSCENE( "01_01_RP_concat" );
                }
            }
            else
            {
                l_U116 = 7;
                 /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_HW_HANDLE_11_01_RP", 0 );
            }
        }
        break;
        case 7:
        if (l_U117)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_46628( ref l_U119, "01_01_RP_concat", 38247, 38300, 39040, 39607, 39656, 41098, 250, 0 );
            if (g_U723 == 0)
            {
                l_U119._fU4 = 1;
            }
            else
            {
                l_U119._fU4 = 7;
            }
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_47187( ref l_U119 ))
        {
             /* NIS_PRE_SETUP */ sub_48078( 1, 0, 0, 1 );
            if (NOT l_U70._fU0)
            {
                g_U723 = 1;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_49202( ref l_U70, g_U723,  /* PLAYER_PED_ID */ sub_952(), g_U1333[1], g_U1450[1], g_U1486[1], g_U1522[1], 1 );
            }
             /* P_HW_CREATE_PLACEMENTS */ sub_53800();
             /* P_PH_CREATE_CELEBRITY_MAGAZINE */ sub_54993();
             /* P_START_SP_CHALLENGES */ sub_55220();
            SET_PAYNEKILLER_AMT( 0 );
            l_U116 = 8;
             /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_HW_TUTORIAL_BULLET_TIME", 0 );
        }
        break;
        case 8:
        if (l_U117)
        {
             /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_55593( "TUT_BULLET_TIME", 1 );
            CAMERA_ENABLE_FIRST_TIME_AIM_LOCK( 0 );
        }
        if (IS_CONTROL_JUST_PRESSED( 2, 29 ))
        {
             /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1518();
            SET_GAME_PAUSED( 0 );
            DISABLE_RESTART_CHECKPOINT( 0 );
            ACTIVATE_BULLET_TIME( 0, 1065353216, 1 );
            CAMERA_FREEZE_FRAME( 0, l_U259, 0, 0 );
            CAMERA_ANIMATED_STOP( l_U259, 1 );
            if (NOT (IS_PED_DEAD( l_U235 )))
            {
                PLAY_PED_AMBIENT_SPEECH( l_U235, "SWEAR_STARTLED", 1, 0, 0, 0, 30000 );
            }
            l_U116 = 9;
             /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_HW_WAIT_PLAYER_IN_POSITION_FOR_AIM", 0 );
        }
        break;
        case 9:
        if (l_U117)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
            {
                ENABLE_PLAYERHEALTH( 1 );
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_990(), 0, 256 );
            }
             /* STARTTIMER */ sub_2571( ref l_U260 );
        }
        if ( /* ISTIMERDONE */ sub_2704( ref l_U260 ))
        {
            l_U116 = 10;
             /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_HW_TUTORIAL_AIM_SHOOT", 0 );
        }
        break;
        case 10:
        if (l_U117)
        {
            if (IS_USING_CONTROLLER())
            {
                if (IS_IN_SOUTHPAW_MODE())
                {
                     /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_55593( "TUT_AIM_SP", 0 );
                }
                else
                {
                     /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_55593( "TUT_AIM", 0 );
                }
            }
            else
            {
                 /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_55593( "TUT_AIM_PC", 0 );
            }
             /* P_START_ROOFTOP_HALLWAYS_TUTORIAL_MPM */ sub_56212();
        }
         /* P_PED_Z_SAFETY_CHECK */ sub_14102( l_U235, -9.00000000, 0, 1 );
        if (NOT l_U290)
        {
            if ( /* F_HW_HAS_FIGHT_STARTED */ sub_56493())
            {
                 /* P_HW_ENEMY_START_FIGHT */ sub_56628();
                l_U290 = 1;
            }
        }
        if (NOT l_U287)
        {
            if ( /* F_IS_PLAYER_PRESSING_AIM_STICK */ sub_56819())
            {
                if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
                {
                    CLEAR_PED_DEFAULT_AIM(  /* PLAYER_PED_ID */ sub_952() );
                }
                CAMERA_CLEAR_POINT_AT_TARGET();
                l_U287 = 1;
            }
        }
        if (NOT l_U289)
        {
            if ((IS_PED_DEAD( l_U235 )) || (IS_CAMERA_AIMING_AT_ENEMY()))
            {
                CAMERA_CLEAR_POINT_AT_TARGET();
                if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
                {
                    CLEAR_PED_DEFAULT_AIM(  /* PLAYER_PED_ID */ sub_952() );
                }
                 /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1518();
                l_U289 = 1;
                l_U116 = 11;
                 /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_HW_TUTORIAL_SHOOT", 0 );
            }
        }
        break;
        case 11:
        if (l_U117)
        {
             /* STARTTIMER */ sub_2571( ref l_U278 );
        }
        if ( /* ISTIMERDONE */ sub_2704( ref l_U278 ))
        {
             /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_55593( "TUT_SHOOT", 0 );
        }
        if (l_U278._fU16)
        {
            ;
        }
        if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (IS_PED_DEAD( l_U235 ))))
        {
             /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1518();
             /* NIS_PRE_SETUP */ sub_48078( 1, 0, 0, 1 );
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
            {
                CLEAR_PED_TASKS(  /* PLAYER_PED_ID */ sub_952() );
            }
            SET_PAYNEKILLER_AMT( 4 );
            ISEQ_TERMINATE( -1370784360 );
             /* P_STREAMREQ_ISEQ_REMOVE */ sub_4223( -1370784360, ref g_U967 );
            CAMERA_ENABLE_FIRST_TIME_AIM_LOCK( 1 );
            l_U116 = 12;
             /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_HW_MOVE_INTO_SD_TUTORIAL", 0 );
        }
        break;
        case 12:
        if (l_U117)
        {
             /* STARTTIMER */ sub_2571( ref l_U293 );
             /* STARTTIMER */ sub_2571( ref l_U303 );
             /* STARTTIMER */ sub_2571( ref l_U323 );
        }
        if ( /* ISTIMERDONE */ sub_2704( ref l_U293 ))
        {
             /* P_STOP_ROOFTOP_HALLWAYS_TUTORIAL_MPM */ sub_57567();
        }
        if ( /* ISTIMERDONE */ sub_2704( ref l_U303 ))
        {
             /* WRITESCRIPTLOG */ sub_456( "GA", "Starting player gait.", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_990() ))))
            {
                SIMULATE_PLAYER_INPUT_GAIT(  /* PLAYER_ID */ sub_990(), 3, l_U312 + 1000, 0 );
            }
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_44522( "SRTP_MSDTR", ref l_U362 );
             /* STARTTIMER */ sub_2571( ref l_U313 );
        }
        if ( /* ISTIMERDONE */ sub_2704( ref l_U323 ))
        {
             /* P_HW_START_DOOR_PENTHOUSE_ENEMIES */ sub_57934();
        }
        if ( /* ISTIMERDONE */ sub_2704( ref l_U313 ))
        {
            l_U116 = 13;
             /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_HW_SHOOTDODGE_TUTORIAL", 0 );
        }
        break;
        case 13:
        if (l_U117)
        {
             /* NIS_POST_SETUP */ sub_48738( 1, 1 );
            SET_GAME_PAUSED( 1 );
            DISABLE_RESTART_CHECKPOINT( 1 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
            if (NOT IS_USING_CONTROLLER())
            {
                 /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_55593( "TUT_SHOOTDODGE_PC", 1 );
            }
            else
            {
                 /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_55593( "TUT_SHOOTDODGE", 1 );
            }
        }
        GET_POSITION_OF_ANALOGUE_STICKS( 0, ref uVar3, ref iVar4, ref uVar5, ref iVar6 );
        if (IS_CONTROL_JUST_PRESSED( 2, 2 ))
        {
            if (((iVar6 < 65461) AND (IS_IN_SOUTHPAW_MODE())) || ((iVar4 < 65461) AND ((NOT IS_USING_CONTROLLER()) || (NOT IS_IN_SOUTHPAW_MODE()))))
            {
                SET_GAME_PAUSED( 0 );
                DISABLE_RESTART_CHECKPOINT( 0 );
                SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
                START_PLAYER_SHOOTDODGE( 0.00000000, 1.00000000, 0.00000000, 1, 0, 0, 0 );
                l_U116 = 14;
                 /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_HW_SHOOTDODGE_GAMEPLAY", 0 );
            }
        }
        break;
        case 14:
        if (l_U117)
        {
            SET_PLAYER_CAN_CANCEL_SHOOTDODGE( 0 );
             /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1518();
             /* STARTTIMER */ sub_2571( ref l_U333 );
             /* STARTTIMER */ sub_2571( ref l_U342 );
        }
        if (NOT l_U352)
        {
            if ((IS_PED_DEAD( l_U427[1] )) || (IS_PED_DEAD( l_U427[0] )))
            {
                if (NOT l_U353._fU20)
                {
                     /* STARTTIMER */ sub_2571( ref l_U353 );
                }
                if ( /* ISTIMERDONE */ sub_2704( ref l_U353 ))
                {
                    if ((IS_USING_CONTROLLER()) AND (CAMERA_SETTINGS_IS_HARD_LOCK_ENABLED()))
                    {
                         /* WRITESCRIPTLOG */ sub_456( "GA", "Start lock on tutorial.", 0 );
                        SET_GAME_PAUSED( 1 );
                        DISABLE_RESTART_CHECKPOINT( 1 );
                        SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
                         /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_55593( "TUT_LOCKON", 1 );
                         /* PAUSETIMER */ sub_58934( ref l_U333, 1 );
                        l_U351 = 1;
                    }
                    l_U352 = 1;
                }
            }
        }
         /* P_HW_HANDLE_LOCK_ON_TUTORIAL */ sub_59197();
        if ( /* ISTIMERDONE */ sub_2704( ref l_U342 ))
        {
            if (NOT l_U351)
            {
                 /* WRITESCRIPTLOG */ sub_456( "GA", "Safety clear shootdodge tutorial message.", 0 );
                 /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1518();
            }
        }
        if (NOT l_U439)
        {
            if ( /* F_HW_CAN_START_VIG_01B */ sub_59459())
            {
                 /* P_HW_START_VIG_01_B */ sub_59738();
                l_U439 = 1;
            }
        }
        if ( /* ISTIMERDONE */ sub_2704( ref l_U333 ))
        {
            if (NOT l_U351)
            {
                 /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1518();
            }
            SET_PLAYER_CAN_CANCEL_SHOOTDODGE( 1 );
             /* P_START_CHECKPOINT_THREAD */ sub_60318( ref g_U724[2] );
             /* WRITESCRIPTLOG */ sub_456( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_2_3 mood fade in 7 seconds, out 5 seconds.", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_2_3", "ROOFTOP_SONG_03_2_3", 0, 7000, 5000, -1082130432, 0 );
            l_U116 = 15;
             /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_HW_PENTHOUSE_GAMEPLAY", 0 );
        }
        break;
        case 15:
        if (l_U117)
        {
             /* P_TETHERPED */ sub_59848( ref l_U438, l_U427[0], 1 );
             /* P_TETHERPED */ sub_59848( ref l_U438, l_U427[1], 1 );
            if (NOT (IS_PED_DEAD( l_U427[0] )))
            {
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U427[0], 0 );
            }
            if (NOT (IS_PED_DEAD( l_U427[1] )))
            {
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U427[1], 0 );
            }
            AUDIO_MUSIC_REQUEST_ONESHOT( "ROOFTOP_ONESHOT_BADDIES", 0 );
        }
         /* P_GBL_HANDLE_PAINKILLER_TUTORIAL */ sub_60793();
         /* P_PH_HANDLE_CELEBRITY_MAGAZINE_EXPLORATION */ sub_61653();
        if (NOT l_U352)
        {
            if (NOT IS_CAMERA_AIMING_AT_ENEMY())
            {
                if ((IS_USING_CONTROLLER()) AND (CAMERA_SETTINGS_IS_HARD_LOCK_ENABLED()))
                {
                     /* WRITESCRIPTLOG */ sub_456( "GA", "Start lock on tutorial.", 0 );
                    SET_GAME_PAUSED( 1 );
                    DISABLE_RESTART_CHECKPOINT( 1 );
                    SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
                     /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_55593( "TUT_LOCKON", 1 );
                    l_U351 = 1;
                }
                l_U352 = 1;
            }
        }
         /* P_HW_HANDLE_LOCK_ON_TUTORIAL */ sub_59197();
        if (NOT l_U439)
        {
            if ( /* F_HW_CAN_START_VIG_01B */ sub_59459())
            {
                 /* P_HW_START_VIG_01_B */ sub_59738();
                l_U439 = 1;
            }
        }
        if ((NOT l_U471._fU20) AND ((NOT (IS_BULLET_TIME_ACTIVE( 1 ))) AND ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65360( ref l_U427 )) == 0)))))
        {
             /* STARTTIMER */ sub_2571( ref l_U471 );
        }
        if ( /* ISTIMERDONE */ sub_2704( ref l_U471 ))
        {
            l_U116 = 16;
             /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_HW_WAIT_FOR_PLAYER_TO_LEAVE_PENTHOUSE", 0 );
        }
        if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (NOT IS_BULLET_CAMERA_ACTIVE()))
        {
            if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_65646( ref l_U861, 0 ))
            {
                 /* STARTTIMER */ sub_2571( ref l_U882 );
                ENABLE_STATIC_EMITTER( "S_FASHION_SE_PATIO_GUNSHOTS", 1 );
            }
            if ( /* ISTIMERDONE */ sub_2704( ref l_U882 ))
            {
                 /* P_GBL_EARLY_CANCEL_PAINKILLER_TUTORIAL */ sub_61520();
                g_U1264[2] = 1;
                l_U116 = 17;
                 /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_FINISHED", 0 );
            }
        }
        break;
        case 16:
        if (l_U117)
        {
             /* P_ENABLE_POI */ sub_7020( ref l_U494, 1 );
             /* P_SET_POI_AVAILABLE */ sub_18244( ref l_U645, 1 );
            ENABLE_WALLA_ZONE( "S_FASHION_WZ_FABIANNA_HOSTAGE_CS", 1 );
            ENABLE_WALLA_ZONE( "S_FASHION_WZ_FABIANNA_HOSTAGE_SECURITY", 1 );
            ENABLE_STATIC_EMITTER( "S_FASHION_SE_FABIANNA_INITIAL_SCREAM", 1 );
             /* STARTTIMER */ sub_2571( ref l_U213 );
             /* STARTTIMER */ sub_2571( ref l_U793 );
             /* STARTTIMER */ sub_2571( ref l_U833 );
            if (DOES_PLACEMENT_EXIST( l_U212 ))
            {
                if (NOT (HAS_PLACEMENT_BEEN_COLLECTED( l_U212 )))
                {
                     /* WRITESCRIPTLOG */ sub_456( "GA", "Player hasn't picked up painkiller yet.", 0 );
                    l_U629 = 1;
                }
            }
        }
         /* P_GBL_HANDLE_PAINKILLER_TUTORIAL */ sub_60793();
         /* P_PH_HANDLE_CELEBRITY_MAGAZINE_EXPLORATION */ sub_61653();
        if ((TIME_SINCE_LAST_MONOLOGUE() > 2000) AND ((NOT l_U882._fU20) AND ((l_U587 == 4) || (l_U587 == 0))))
        {
            if ( /* ISTIMERDONE */ sub_2704( ref l_U793 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_44522( "SRTP_MHFAB", ref l_U783 );
            }
            if (NOT l_U833._fU16)
            {
                if ( /* F_ISPLAYERINTRIGGERBOX */ sub_59592( l_U812 ))
                {
                    if (IS_SPHERE_VISIBLE( -9.91000000, -25.52000000, -6.54000000, 0.50000000, 0 ))
                    {
                        if ( /* ISTIMERDONE */ sub_2704( ref l_U833 ))
                        {
                             /* P_SPEECH_PLAY_MONOLOGUE */ sub_44522( "SRTP_MLADRA", ref l_U802 );
                             /* STARTTIMER */ sub_2571( ref l_U852 );
                        }
                    }
                }
            }
            if ( /* ISTIMERDONE */ sub_2704( ref l_U852 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_44522( "SRTP_MLADRB", ref l_U842 );
            }
        }
        if ((l_U793._fU16) AND ((NOT l_U630) AND (l_U629)))
        {
            if ((HAS_PLACEMENT_BEEN_COLLECTED( l_U212 )) || (NOT (DOES_PLACEMENT_EXIST( l_U212 ))))
            {
                 /* WRITESCRIPTLOG */ sub_456( "GA", "Player collected painkiller.", 0 );
                if ((NOT l_U882._fU20) AND (TIME_SINCE_LAST_MONOLOGUE() > 2000))
                {
                     /* P_SPEECH_PLAY_MONOLOGUE */ sub_44522( "SRTP_PFPLS", ref l_U631 );
                }
                l_U630 = 1;
            }
        }
        if ( /* ISTIMERDONE */ sub_2704( ref l_U213 ))
        {
            ENABLE_WALLA_ZONE( "S_FASHION_WZ_FABIANNA_HOSTAGE_FABIANNA", 1 );
             /* WRITESCRIPTLOG */ sub_456( "GA", "Playing audio music one shot ROOFTOP_ONESHOT_BADDIES", 0 );
            AUDIO_MUSIC_PLAY_ONESHOT();
        }
        if ( /* F_HANDLE_POI */ sub_62086( ref l_U494 ))
        {
             /* P_PH_START_PIANOS_NIS */ sub_66737();
             /* P_GBL_EARLY_CANCEL_PAINKILLER_TUTORIAL */ sub_61520();
        }
         /* P_PH_HANDLE_PIANO_NIS */ sub_66927();
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_65646( ref l_U861, 0 ))
        {
             /* STARTTIMER */ sub_2571( ref l_U882 );
            ENABLE_STATIC_EMITTER( "S_FASHION_SE_PATIO_GUNSHOTS", 1 );
        }
        if ( /* ISTIMERDONE */ sub_2704( ref l_U882 ))
        {
             /* P_GBL_EARLY_CANCEL_PAINKILLER_TUTORIAL */ sub_61520();
            g_U1264[2] = 1;
            l_U116 = 17;
             /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 17:
        if ((NOT HAS_CUTSCENE_FINISHED()) || (g_U723 == 2))
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U116 = 0;
             /* WRITESCRIPTLOG */ sub_456( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U116 != iVar2)
    {
        l_U117 = 1;
    }
    else
    {
        l_U117 = 0;
    }
    return;
}

/* P_HANDLE_SP_CHALLENGES */ void sub_13647()
{
     /* P_HANDLE_GLOBAL_SP_CHALLENGES */ sub_13682();
    return;
}

/* P_HANDLE_GLOBAL_SP_CHALLENGES */ void sub_13682()
{
    switch (g_U1646)
    {
        case 0:
        DISPLAYF( "[CCB] ### eYouveGotToBelieveFail - STATE_CHALLENGE_IDLE ###", 0 );
        g_U1646 = 1;
        break;
        case 1:
        if (IS_HUD_PREFERENCE_SWITCHED_ON())
        {
            DISPLAYF( "[CCB] ### IS_HUD_PREFERENCE_SWITCHED_ON is TRUE... ###", 0 );
            DISPLAYF( "[CCB] ### eYouveGotToBelieveFail - STATE_CHALLENGE_COMPLETE ###", 0 );
            g_U1646 = 2;
        }
        break;
        case 2: break;
    }
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_14036(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_14102( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_14102(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_8080( uParam0 );
            }
        }
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_14454()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U117 = 1;
    l_U146 = 0;
     /* CREATETIMER */ sub_2421( ref l_U147, 6000, 1, 0 );
    l_U156 = 0;
     /* CREATETIMER */ sub_2421( ref l_U167, 7000, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U213, 5000, 1, 0 );
    l_U762 = 0;
     /* CREATETIMER */ sub_2421( ref l_U240, l_U239, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U250, l_U249, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U260, l_U259, 1, 1 );
     /* CREATETIMER */ sub_2421( ref l_U269, 200, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U278, 300, 1, 0 );
    l_U287 = 0;
    l_U288 = 0;
    l_U289 = 0;
    l_U291 = 0;
    l_U290 = 0;
     /* CREATETIMER */ sub_2421( ref l_U293, l_U292, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U303, l_U302, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U313, l_U312, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U323, l_U322, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U333, l_U332, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U342, 500, 1, 0 );
    l_U352 = 0;
    l_U351 = 0;
     /* CREATETIMER */ sub_2421( ref l_U353, 1000, 1, 1 );
    l_U238 = 0;
    l_U372 = 0;
    l_U373 = 0;
    l_U439 = 0;
     /* CREATETIMER */ sub_2421( ref l_U471, 1500, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U610, l_U609, 1, 0 );
    l_U629 = 0;
    l_U630 = 0;
     /* CREATETIMER */ sub_2421( ref l_U793, 2500, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U833, 15000, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U852, 20000, 1, 0 );
     /* CREATETIMER */ sub_2421( ref l_U882, 1500, 1, 0 );
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_INITIALIZE_SP_CHALLENGES */ void sub_14999()
{
    return;
}

/* P_SET_STATIC_DATA */ void sub_15046()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15149( ref l_U222, -3.29200000, 0.28700000, -7.53500000, 0.00000000, 1001355263, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15149( ref l_U480, -1.69000000, -12.01000000, -7.60000000, 90.00000000, 562303148, 26, 0, 0, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15149( ref l_U374[0], -4.23300000, 1.01000000, -7.50000000, 0.00000000, -1597532580, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15149( ref l_U374[1], -2.69200000, 0.80500000, -7.50000000, 0.00000000, 416827258, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15149( ref l_U374[2], -3.50000000, -14.00000000, -7.85800000, 0.00000000, -459010786, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15149( ref l_U374[3], -4.11000000, -12.70000000, -7.88000000, -90.00000000, 2146075424, 7, 3, 2, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_15574( ref l_U861, "tb_HW_OnPatio", -13.01000000, -27.18000000, -7.55000000, 18.20000000, 8.50000000, 3.52000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_15574( ref l_U440, "tb_HW_EnteredPenthouse", -3.16000000, 0.60000000, -7.54000000, 3.00000000, 3.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_15574( ref l_U588, "TRIGGER_PENTHOUSE_PIANO", -7.61000000, -1.89000000, -7.54000000, 2.50000000, 2.50000000, 2.00000000, 0.00000000, 0.00000000, -34.50000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_15574( ref l_U812, "tb_PH_CanSeePatio", -8.06000000, -14.53000000, -7.55000000, 18.35000000, 15.91000000, 3.52000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_15994( ref l_U438, "teth_HW_Penthouse", -1.08000000, -9.17000000, -7.54000000, 32.38000000, 23.13000000, 7.85000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATEDOORSTRUCT */ sub_16109( ref l_U183, -539283630, -1.65400000, 2.29392000, -5.83426000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_16109( ref l_U176, -539283630, -4.71233000, 2.28294000, -5.83426000, 0.00000000, 0.00000000, -3.14000000 );
     /* P_OPENDOOR */ sub_16231( ref l_U183, 1, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_16508( ref l_U183, 1 );
     /* P_OPENDOOR */ sub_16231( ref l_U176, 0, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_16508( ref l_U176, 1 );
     /* P_CREATEDOORSTRUCT */ sub_16109( ref l_U190[0], -1168087975, 13.28570000, 5.34042000, -6.39805000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_16666( ref l_U190[0], 0 );
     /* P_CREATEDOORSTRUCT */ sub_16109( ref l_U190[1], -539283630, -12.12246000, 8.44516000, -5.83424000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_16666( ref l_U190[1], 1 );
     /* P_CREATEDOORSTRUCT */ sub_16109( ref l_U190[2], -539283630, -15.18079000, 8.43417000, -5.83424000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_16666( ref l_U190[2], 1 );
    ENABLE_GRAVITY_WELL( "penthouse", "GW_SDG_TUT_START", 0, 0, 0, 0 );
     /* P_CREATEPOISTRUCTTRIGGERCOORD */ sub_17008( ref l_U494, 2, l_U580, l_U588, l_U580, 3.00000000, 0, 0 );
     /* P_SET_INTERACTIVE_TEXT */ sub_17774( ref l_U494, 30, "POI_RP_PIANO" );
     /* P_SET_POI_FORCE_WALK */ sub_17984( ref l_U494, 0 );
    l_U587 = 0;
     /* P_CREATEPOISTRUCTCOORD */ sub_18075( ref l_U645, 2, l_U642, l_U642, l_U642, 1.50000000, 3.00000000, 1, 0 );
     /* P_SET_INTERACTIVE_TEXT */ sub_17774( ref l_U645, 30, "POI_MAGAZINE" );
     /* P_SET_POI_FORCE_WALK */ sub_17984( ref l_U645, 0 );
     /* P_SET_POI_AVAILABLE */ sub_18244( ref l_U645, 0 );
     /* P_SET_POI_REUSABLE */ sub_18326( ref l_U645, 1 );
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_15149(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_15574(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_15994(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATEDOORSTRUCT */ void sub_16109(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

/* P_OPENDOOR */ void sub_16231(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if (( /* F_DOESDOOREXIST */ sub_16256( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16340( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_16256(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_16340(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORLATCH */ void sub_16508(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_16256( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16340( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_SETDOORLOCKED */ void sub_16666(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_16256( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16340( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* P_CREATEPOISTRUCTTRIGGERCOORD */ void sub_17008(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31)
{
     /* P_CREATEBLANKPOISTRUCT */ sub_17055( iParam0, uParam30 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU80 = 1;
    iParam0->_fU116 = {uParam5};
    iParam0->_fU200 = {uParam26};
    iParam0->_fU212 = uParam29;
    iParam0->_fU320 = uParam31;
    iParam0->_fU20 = {uParam2};
     /* P_CREATEPOIGLINT */ sub_17446( iParam0 );
    return;
}

/* P_CREATEBLANKPOISTRUCT */ void sub_17055(int iParam0, unknown uParam1)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = 0;
    iParam0->_fU8 = 0;
    iParam0->_fU12 = nil;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU52 = 1;
    iParam0->_fU56 = 1;
    iParam0->_fU60 = 0;
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = 0;
    iParam0->_fU80 = 0;
    iParam0->_fU84 = 0;
    iParam0->_fU100 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU112 = 0.00000000;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU96 = 0;
    iParam0->_fU200 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU212 = 0.00000000;
    iParam0->_fU300 = 0;
    iParam0->_fU304 = 1;
    iParam0->_fU308 = 0;
    iParam0->_fU324 = 1;
    iParam0->_fU328 = 0;
    iParam0->_fU340 = 0;
    iParam0->_fU336 = 0.20000000;
    return;
}

/* P_CREATEPOIGLINT */ void sub_17446(int iParam0)
{
    if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            REMOVE_GLINT( iParam0->_fU12 );
        }
    }
    iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
     /* P_INITPOIGLINT */ sub_17544( iParam0 );
    return;
}

/* P_INITPOIGLINT */ void sub_17544(int iParam0)
{
    if (iParam0->_fU0 == 1)
    {
        if (iParam0->_fU320 == 1)
        {
            if ((iParam0->_fU8 > 0) AND (iParam0->_fU4 == 0))
            {
                 /* P_ENABLEPOIGLINT */ sub_7079( iParam0, 1 );
            }
            else if ((iParam0->_fU8 < 2) AND (iParam0->_fU4 == 1))
            {
                 /* P_ENABLEPOIGLINT */ sub_7079( iParam0, 1 );
            }
            else if ((iParam0->_fU8 == 1) AND (iParam0->_fU4 == 2))
            {
                 /* P_ENABLEPOIGLINT */ sub_7079( iParam0, 1 );
            }
            else
            {
                 /* P_ENABLEPOIGLINT */ sub_7079( iParam0, 0 );
            };;;
        }
        else
        {
             /* P_ENABLEPOIGLINT */ sub_7079( iParam0, 0 );
        }
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_7079( iParam0, 0 );
    }
    return;
}

/* P_SET_INTERACTIVE_TEXT */ void sub_17774(int iParam0, unknown uParam1, unknown uParam2)
{
    StrCopy( ref iParam0->_fU32, uParam2, 16 );
    iParam0->_fU48 = uParam1;
     /* P_INITINTERACTIVETEXT */ sub_17830( iParam0 );
    return;
}

/* P_INITINTERACTIVETEXT */ void sub_17830(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND (iParam0->_fU0 == 1))
    {
        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
        {
            SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
            SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
    }
    return;
}

/* P_SET_POI_FORCE_WALK */ void sub_17984(int iParam0, unknown uParam1)
{
    iParam0->_fU324 = uParam1;
    return;
}

/* P_CREATEPOISTRUCTCOORD */ void sub_18075(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14)
{
     /* P_CREATEBLANKPOISTRUCT */ sub_17055( iParam0, uParam13 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU100 = {uParam5};
    iParam0->_fU112 = uParam11;
    iParam0->_fU200 = {uParam8};
    iParam0->_fU212 = uParam12;
    iParam0->_fU320 = uParam14;
    iParam0->_fU20 = {uParam2};
     /* P_CREATEPOIGLINT */ sub_17446( iParam0 );
    return;
}

/* P_SET_POI_AVAILABLE */ void sub_18244(int iParam0, int iParam1)
{
    if (iParam1 == 0)
    {
        iParam0->_fU60 = 1;
    }
    else
    {
        iParam0->_fU60 = 0;
    }
     /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_7478( iParam0 );
    return;
}

/* P_SET_POI_REUSABLE */ void sub_18326(int iParam0, unknown uParam1)
{
    iParam0->_fU68 = uParam1;
    return;
}

/* TELEPORTPED */ void sub_18491(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_REQUEST_HW_PERSISTENT_ASSETS */ void sub_18689()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_REQUEST_HW_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_18790( ref l_U106, ref g_U821 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_21712( ref l_U114, ref g_U918 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23763( "LEVEL_S_ROOFTOP_CP_01", ref g_U1028 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23763( "DAM_DEAD", ref g_U1028 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_25695( "SCRIPT_MISSION\S_FASHION_LOBBY", ref g_U1221 );
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_REQUEST_HW_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_18790(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_18863( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_18863(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_18930( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19188( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_18930(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19188( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19188( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19188( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20719( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19188( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19188( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_19188(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19249( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_19249(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_20719(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_21712(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21786( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_21786(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_21840( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22101( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_21840(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22101( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22101( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22101( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20719( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22101( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22101( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_22101(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19249( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_23763(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_23815( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_24067( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_23815(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_24067( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_24067( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_24067( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20719( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_24067( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_24067( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_24067(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19249( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_25695(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_25748( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26003( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_25748(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26003( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26003( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26003( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20719( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26003( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26003( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_26003(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19249( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_HW_NONPERSISTENT_ASSETS */ void sub_27645()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_REQUEST_HW_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_27753( -903619740, ref g_U967 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_27753( -407521813, ref g_U967 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_27753( -1712187272, ref g_U967 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_27753( -770391621, ref g_U967 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_27753( 127872207, ref g_U967 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_27753( -58648941, ref g_U967 );
     /* P_STREAMREQ_SCRIPT_STREAM_INSERT */ sub_30641( "ROOFTOP_PIANO_01", ref g_U1168 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "ROOFTOP_ONESHOT_START", 0 );
    if (g_U723 == 0)
    {
         /* LOADSEAMLESSCUTSCENE */ sub_32840( "01_01_RP_concat", 0 );
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_REQUEST_HW_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_27753(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_27814( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28064( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_27814(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28064( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28064( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28064( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28064( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_20719( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_20719( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28064( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28064( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_28064(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19249( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_INSERT */ void sub_30641(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_IS_INDEX_AVAILABLE */ sub_30697( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing SCRIPT_STREAM asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30961( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_INDEX_AVAILABLE */ int sub_30697(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30961( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is already loading!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30961( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (Result <= 2)
                {
                    if ((GET_SCRIPT_STREAM_STATE( uParam0, Result )) == 2)
                    {
                        DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                        DISPLAYF( "The SCRIPT_STREAM asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30961( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The SCRIPT_STREAM asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                        (uParam1^)[Result]._fU32 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_20719( ref (uParam1^)[Result]._fU36 );
                        return Result;
                    }
                }
                else
                {
                    DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The SCRIPT_STREAM asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30961( Result, uParam1, uParam2 );
                    return -1;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30961( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (Result <= 2)
        {
            if ((GET_SCRIPT_STREAM_STATE( uParam0, iVar6 )) == 2)
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1537, uParam0 );
                DISPLAYF( "The SCRIPT_STREAM asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing SCRIPT_STREAM: {} ###", 1, 1537, uParam0 );
                StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
                (uParam1^)[iVar6]._fU32 = 3;
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_30961( iVar6, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar6;
            }
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The SCRIPT_STREAM - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ void sub_30961(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19249( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The SCRIPT_STREAM asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_32840(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_33312(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_33709(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_34111(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_34502(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ int sub_34916(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_35302(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_35890(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_456( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_8936( uParam0,  /* PLAYER_PED_ID */ sub_952() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* F_HW_CREATE_V1_ENEMY */ int sub_36374()
{
    unknown uVar2;

    if (NOT (DOES_PED_EXIST( l_U235 )))
    {
        l_U235 =  /* CREATEPED */ sub_36429( ref l_U222 );
        uVar2 =  /* F_GIVEPEDWEAPON */ sub_11428( l_U235, 68019059, 25000, 0, 0 );
        SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 50 );
         /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_37443( ref l_U235, "AIT_NOVICE", -1082130432, -1082130432 );
         /* P_DEACTIVATEPED */ sub_37570( l_U235 );
        if (NOT (IS_PED_DEAD( l_U235 )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U235, ref g_U1563 );
            SET_PED_AS_ONE_SHOT_KILL( l_U235, 1 );
            SET_PED_COMBAT_MOVEMENT( l_U235, 0 );
            SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U235, 0 );
            SET_PED_PATH_CAN_DROP_FROM_HEIGHT( l_U235, 0 );
            SET_PED_FLAG_BLOCK_WOUNDED_MOVEMENT( l_U235, 1 );
            SET_PED_USES_DYING_ANIM( l_U235, 0 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U235, 1 );
            SET_PED_NAME_DEBUG( l_U235, "pi_HW_V1_Enemy" );
        }
    }
    return 1;
}

/* CREATEPED */ void sub_36429(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_36611( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_37160( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_37261( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_36611(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_11037( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_37160(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_37261(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_SET_PED_TEMPLATE_AND_RANGES */ void sub_37443(unknown uParam0, unknown uParam1, float fParam2, float fParam3)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_37570(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* CUTSYS_DEFAULT_PRECUTSCENESETUP */ int sub_38247()
{
    return 1;
}

/* P_HW_0101RP_CUTSCENEREGISTRATION */ void sub_38300()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_0101RP_CutsceneRegistration start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
         /* WRITESCRIPTLOG */ sub_456( "CCB", "Registering the Player ped.", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_952(), g_U1333[1], g_U1450[1] );
        ISEQ_REGISTER_ENTITY( -903619740, "player",  /* PLAYER_PED_ID */ sub_952(), 0 );
        CUTSCENE_REGISTER_ISEQ( -903619740 );
    }
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "P_RT_SecG_M", -933116240 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_F^120", 2003364081 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_F^121", -511418981 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_F^122", 1500701004 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_F^123", 1926509844 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_F^124", -1878920547 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_F^126", 1565471227 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_M", 424656717 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_M^120", -1717828661 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_M^121", 1899281545 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_M^122", 99794434 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_M^123", -1638730858 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_M^124", 1646697317 );
    REGISTER_HIDE_ENTITY_AT_POSITION( 1006726227, 11.84674000, 11.18991000, 9.10791000 );
    REGISTER_HIDE_ENTITY_AT_POSITION( 1006726227, 11.84674000, 8.78723000, 9.10791000 );
    CUTSCENE_ENABLE_SKIP( 0 );
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_0101RP_CutsceneRegistration end", 0 );
    return;
}

/* P_HW_0101RP_HANDLECUTSCENE */ void sub_39040()
{
    if (l_U119._fU52)
    {
         /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_39094( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
        {
            FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_952(), 0 );
        }
        SET_CAM_VIEW_MODE( 0 );
    }
    if (NOT l_U146)
    {
        if (GET_CUTSCENE_TIME_MS() > 4853)
        {
             /* WRITESCRIPTLOG */ sub_456( "GA", "Starting music track ROOFTOP_SONG_03 at mood ROOFTOP_SONG_03_2 fade in 6, fade out 5.", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_2", "", 0.00000000, 6000, 5000, -1082130432, 0 );
            l_U146 = 1;
        }
    }
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_39094(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_952(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_952(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_952(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_952(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_952(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* CUTSYS_DEFAULT_POSTCUTSCENE */ int sub_39607()
{
    return 1;
}

/* P_HW_0101RP_PREPAREBLENDOUT */ void sub_39656()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_0101RP_PrepareBlendout start", 0 );
    if ((NOT (ISEQ_QUERY_STATE( -903619740, 3 ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() ))))
    {
        CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_952() );
        RESET_PLAYER_INPUT_GAIT( 0 );
         /* P_RESET_MAX_ACTION_TREE */ sub_1798();
         /* TELEPORTPED */ sub_18491(  /* PLAYER_PED_ID */ sub_952(), g_U1333[1], g_U1450[1] );
        ISEQ_REGISTER_ENTITY( -903619740, "player",  /* PLAYER_PED_ID */ sub_952(), 0 );
        ISEQ_START( -903619740 );
    }
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_990(), 1, 0 );
        SET_PED_DEFAULT_AIM_AT_COORD(  /* PLAYER_PED_ID */ sub_952(), -3.64000000, 4.00000000, -5.65000000 );
        SET_ADRENALINE_AMT( 0.75000000 );
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "Enabling woman screaming and sounds from penthouse.", 0 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_CONDO_WOMAN_SCREAM", 1 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_CONDO_MAN_SWEAR", 1 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_CONDO_GUNSHOTS", 1 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_CONDO_YELLING", 1 );
    if (NOT AUDIO_IS_MUSIC_PLAYING())
    {
         /* WRITESCRIPTLOG */ sub_456( "GA", "Starting music track ROOFTOP_SONG_03 at mood ROOFTOP_SONG_03_2 fade in 6, fade out 5.", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_2", "", 0.00000000, 6000, 5000, -1082130432, 0 );
    }
    CAMERA_PLAY_ANIMATED( "LEVEL_S_ROOFTOP_CP_01", "B_OUT_MID_01_RP_MAX_CAM", 0, 0, 0, 0, 0.00000000, 0, 0 );
     /* P_HW_CREATE_PH_DOORS */ sub_40410();
     /* STARTTIMER */ sub_2571( ref l_U147 );
     /* STARTTIMER */ sub_2571( ref l_U167 );
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_0101RP_PrepareBlendout end", 0 );
    return;
}

/* P_HW_CREATE_PH_DOORS */ void sub_40410()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_CREATE_PH_DOORS start", 0 );
    l_U236 =  /* CREATEOBJECTNOOFFSET */ sub_40523( 990918269, -1.66100000, 2.33300000, -5.80900000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U236 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U236, ref g_U1563 );
        FREEZE_OBJECT_POSITION( l_U236, 1 );
    }
    l_U237 =  /* CREATEOBJECTNOOFFSET */ sub_40523( 1459973966, -4.71900000, 2.32200000, -5.80900000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U237 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U237, ref g_U1563 );
        FREEZE_OBJECT_POSITION( l_U237, 1 );
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_CREATE_PH_DOORS end", 0 );
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_40523(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_36611( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* F_HW_0101RP_HANDLEBLENDOUT */ int sub_41098()
{
    unknown uVar2;
    unknown uVar3;

    if (l_U119._fU52)
    {
        DO_SCREEN_FADE_IN( 0 );
         /* P_HW_CREATE_PH_VICTIM */ sub_41159();
        l_U372 = 1;
    }
     /* F_HW_SPAWN_PENTHOUSE_ENEMIES */ sub_42284();
    if (NOT l_U238)
    {
        uVar2 = DOOR_FIND_CLOSEST( l_U183._fU0, l_U183._fU4 );
        uVar3 = DOOR_FIND_CLOSEST( l_U176._fU0, l_U176._fU4 );
        if ((DOES_OBJECT_EXIST( uVar3 )) AND (DOES_OBJECT_EXIST( uVar2 )))
        {
             /* WRITESCRIPTLOG */ sub_456( "GA", "Hiding penthouse doors.", 0 );
            SET_OBJECT_VISIBLE( uVar2, 0 );
            SET_OBJECT_COLLISION( uVar2, 0 );
            SET_OBJECT_VISIBLE( uVar3, 0 );
            SET_OBJECT_COLLISION( uVar3, 0 );
            l_U238 = 1;
        }
    }
    if ( /* ISTIMERDONE */ sub_2704( ref l_U147 ))
    {
        if (NOT (IS_PED_DEAD( l_U235 )))
        {
            REGISTER_TARGET( l_U235,  /* PLAYER_PED_ID */ sub_952() );
            SET_LOCKED_TARGET( l_U235,  /* PLAYER_PED_ID */ sub_952() );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U235, 0 );
             /* P_ACTIVATEPED */ sub_44195( l_U235 );
             /* TELEPORTPED */ sub_18491( l_U235, l_U222._fU0, l_U222._fU12 );
            ISEQ_REGISTER_ENTITY( -407521813, "PED", l_U235, 0 );
            ISEQ_REGISTER_ENTITY( -407521813, "DOOR_R", l_U236, 1 );
            ISEQ_START( -407521813 );
            ISEQ_REGISTER_ENTITY( -1712187272, "DOOR_L", l_U237, 1 );
            ISEQ_START( -1712187272 );
        }
        PLAY_SOUND_FROM_COORD( -1, "S_FASHION_LOBBY_DOOR_KICK", -3.20000000, 2.32000000, -6.63000000 );
    }
    if ( /* ISTIMERDONE */ sub_2704( ref l_U167 ))
    {
         /* P_SPEECH_PLAY_MONOLOGUE */ sub_44522( "SRTP_BLTTA", ref l_U157 );
    }
    if (NOT l_U156)
    {
        if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_ROOFTOP_CP_01", "B_OUT_MID_01_RP_MAX_CAM" )) - 1))
        {
            CAMERA_SNAP_POINT_AT_COORD( -3.64000000, 4.00000000, -5.65000000 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U1486[1], 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U1522[1], 1065353216, 0 );
            CAMERA_FREEZE_FRAME( 1, 500, 0, 0 );
            l_U156 = 1;
        }
    }
    if ((ISEQ_QUERY_ENTITY_STATE( -903619740, "player", 5 )) || (ISEQ_QUERY_ENTITY_STATE( -903619740, "player", 6 )))
    {
        if (NOT l_U156)
        {
            CAMERA_SNAP_POINT_AT_COORD( -3.64000000, 4.00000000, -5.65000000 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U1486[1], 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U1522[1], 1065353216, 0 );
            CAMERA_FREEZE_FRAME( 1, 500, 0, 0 );
            l_U156 = 1;
        }
        SET_GAME_PAUSED( 1 );
        DISABLE_RESTART_CHECKPOINT( 1 );
         /* WRITESCRIPTLOG */ sub_456( "GA", "Disabling control config settings.", 0 );
        SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
         /* P_CLOSEDOOR */ sub_46222( ref l_U190[0], 1 );
         /* P_SETDOORLOCKED */ sub_16666( ref l_U190[0], 1 );
         /* WRITESCRIPTLOG */ sub_456( "GA", "Starting music track ROOFTOP_SONG_03 at mood ROOFTOP_SONG_03_2 fade in 1, fade out 5.", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_2_3", "", 0.00000000, 1000, 5000, -1082130432, 0 );
         /* WRITESCRIPTLOG */ sub_456( "GA", "Playing audio music one shot ROOFTOP_ONESHOT_START", 0 );
        AUDIO_MUSIC_PLAY_ONESHOT();
        return 1;
    }
    return 0;
}

/* P_HW_CREATE_PH_VICTIM */ void sub_41159()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_CREATE_PH_VICTIM start", 0 );
    l_U493 =  /* CREATEPED */ sub_36429( ref l_U480 );
    if (NOT (IS_PED_DEAD( l_U493 )))
    {
        SET_ROOM_FOR_PED_BY_NAME( l_U493, ref g_U1563 );
         /* P_CREATE_DEAD_BODY */ sub_41288( l_U493, 11 );
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_CREATE_PH_VICTIM end", 0 );
    return;
}

/* P_CREATE_DEAD_BODY */ void sub_41288(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
         /* WRITE_STRING */ sub_11037( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

/* F_HW_SPAWN_PENTHOUSE_ENEMIES */ int sub_42284()
{
    unknown uVar2;

    switch (l_U372)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_456( "GA", "e_HW_PenthouseEnemySpawnState = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_42434( ref l_U432, 1056964608, 0 );
        l_U373 = 0;
         /* WRITESCRIPTLOG */ sub_456( "GA", "e_HW_PenthouseEnemySpawnState = ENTITY_STATE_CREATING", 0 );
        l_U372 = 2;
        break;
        case 2:
        l_U427[l_U373] =  /* CREATEPED */ sub_36429( ref l_U374[l_U373] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_42947( l_U427[l_U373], ref l_U432 );
         /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_37443( ref l_U427[l_U373], "AIT_NOVICE", 3, 25 );
        uVar2 =  /* F_GIVEPEDWEAPON */ sub_11428( l_U427[l_U373], 68019059, 25000, 0, 0 );
        SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 50 );
        if (NOT (IS_PED_DEAD( l_U427[l_U373] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U427[l_U373], ref g_U1563 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U427[l_U373], 1 );
            SET_PED_ALERTNESS( l_U427[l_U373], 3 );
            SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U427[l_U373], 0 );
            SET_PED_PATH_CAN_DROP_FROM_HEIGHT( l_U427[l_U373], 0 );
            SET_PED_COMBAT_ATTRIBUTES( l_U427[l_U373], 1, 0 );
        }
         /* P_DEACTIVATEPED */ sub_37570( l_U427[l_U373] );
        l_U373++;
        if (l_U373 >= 4)
        {
             /* WRITESCRIPTLOG */ sub_456( "GA", "e_HW_PenthouseEnemySpawnState = ENTITY_STATE_POST_CREATE_SETUP", 0 );
            l_U372 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_43706( ref l_U427, "pi_HW_PenthouseEnemy" );
         /* WRITESCRIPTLOG */ sub_456( "GA", "e_HW_PenthouseEnemySpawnState = ENTITY_STATE_COMPLETE", 0 );
        l_U372 = 4;
        break;
    }
    if (l_U372 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_42434(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_42947(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_11037( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_42434( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_42434( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_43706(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_ACTIVATEPED */ void sub_44195(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_44522(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_44560( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_44669( 0,  /* PLAYER_PED_ID */ sub_952(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_44669( 1,  /* PLAYER_PED_ID */ sub_952(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_44922( uParam0, uParam1, 8, 1 );
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_44560(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_44669(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_44922(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_44967( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_44967(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_45054( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_45054(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_45106( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_45624( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_45106(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_45624(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_CLOSEDOOR */ void sub_46222(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_16256( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16340( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_46628(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_456( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_46852( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 46749, 46799, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_46749()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_46799()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_46852(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_HANDLECUTSCENE */ void sub_47187(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_456( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_456( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_456( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_456( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_456( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_456( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_32840( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_456( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_48078( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_48078( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_456( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_39094( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_48078( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_48738( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_48738( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* NIS_PRE_SETUP */ void sub_48078(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_990(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_952(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_952() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_952(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* NIS_POST_SETUP */ void sub_48738(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_990(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_952(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_48836();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_48836()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_952(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_952(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_952(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_952(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_49202(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_456( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_456( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_12202( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_49493( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_49970( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_49970( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50230( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_49970( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50230( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50230( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_49970( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50230( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50230( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50230( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_49970( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50230( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50230( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50230( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_50230( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_51810( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_49493(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_9217( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_456( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_456( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_49970(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_50230(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_51810(int iParam0)
{
     /* WRITE_STRING */ sub_11037( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_51898( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_51975( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_51975( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_51975( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_51975( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_51975( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_52845( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU52 );
     /* WRITE_STRING */ sub_11037( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU96 );
     /* WRITE_STRING */ sub_11037( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU100 );
     /* WRITE_STRING */ sub_11037( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU104 );
     /* WRITE_STRING */ sub_11037( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU108 );
     /* WRITE_STRING */ sub_11037( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU112 );
     /* WRITE_STRING */ sub_11037( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU116 );
     /* WRITE_STRING */ sub_11037( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU120 );
     /* WRITE_STRING */ sub_11037( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU124 );
     /* WRITE_STRING */ sub_11037( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU128 );
     /* WRITE_STRING */ sub_11037( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_52144( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_52144( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_52144( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_51898(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_51975(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_52144(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_52845(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_HW_CREATE_PLACEMENTS */ void sub_53800()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_CREATE_PLACEMENTS start", 0 );
     /* P_CREATE_S_FAS_GG_PT_01 */ sub_53877();
    l_U212 =  /* CREATEPLACEMENT */ sub_54523( -4072149, 1.43000000, -14.91000000, -7.36000000, 0.00000000, 0.00000000, 0.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U212 ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U212, ref g_U1563 );
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_CREATE_PLACEMENTS end", 0 );
    return;
}

/* P_CREATE_S_FAS_GG_PT_01 */ void sub_53877()
{
     /* WRITESCRIPTLOG */ sub_456( "CO", "P_CREATE_S_FAS_GG_PT_01", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_54013( ref g_U665, g_U719, -2005387757, -906480527, -14.51000000, 2.99000000, -7.52000000, 1.50000000, 0.00000000, 1.00000000, "MLORoom01" );
     /* P_CREATECOLLECTIBLE */ sub_54170( ref g_U665 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_54013(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_456( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_54170(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_456( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_54253( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_456( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_456( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_54253( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_8339( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_54523( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_456( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_456( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_54253(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* CREATEPLACEMENT */ void sub_54523(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_PH_CREATE_CELEBRITY_MAGAZINE */ void sub_54993()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_PH_CREATE_CELEBRITY_MAGAZINE start", 0 );
    l_U641 =  /* CREATEOBJECTNOOFFSET */ sub_40523( -274880563, l_U642, 0, 0, 65456, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U641 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U641, ref g_U1563 );
        FREEZE_OBJECT_POSITION( l_U641, 1 );
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_PH_CREATE_CELEBRITY_MAGAZINE end", 0 );
    return;
}

/* P_START_SP_CHALLENGES */ void sub_55220()
{
     /* WRITESCRIPTLOG */ sub_456( "CCB", "P_START_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_456( "CCB", "Starting the Rooftop_Party_Penthouse_Hallways context...", 0 );
    START_CONTEXT( "Rooftop_Party_Penthouse_Hallways" );
     /* WRITESCRIPTLOG */ sub_456( "CCB", "Starting the Rooftop_Party context...", 0 );
    START_CONTEXT( "Rooftop_Party" );
    return;
}

/* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ void sub_55593(unknown uParam0, boolean bParam1)
{
    UI_SET( 25, 2, 1537, "SPSlotLoader", 1537, uParam0 );
    if (bParam1)
    {
        STOP_IMAGEFX( g_U1697, 0 );
        g_U1697 = PLAY_IMAGEFX( "INTERLACE_DESATURATED_PANEL_02", 3, 0 );
    }
    return;
}

/* P_START_ROOFTOP_HALLWAYS_TUTORIAL_MPM */ void sub_56212()
{
     /* WRITESCRIPTLOG */ sub_456( "CCB", "P_START_ROOFTOP_HALLWAYS_TUTORIAL_MPM", 0 );
    SET_CAM_VIEW_MODE( 0 );
    DISPLAY_HUD( 0 );
    ENABLE_PLAYERHEALTH( 1 );
    ENABLE_CROSSHAIR( 1 );
    SET_CROSSHAIR_PULSE();
    ENABLE_MPM( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        SET_PED_CONSUMING_AMMO(  /* PLAYER_PED_ID */ sub_952(), 0 );
    }
    SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_990(), 0, 256 );
    REENABLE_PLAYER_INPUT( 14 );
    REENABLE_PLAYER_INPUT( 15 );
    REENABLE_PLAYER_INPUT( 16 );
    REENABLE_PLAYER_INPUT( 17 );
    REENABLE_PLAYER_INPUT( 4 );
    REENABLE_PLAYER_INPUT( 6 );
    return;
}

/* F_HW_HAS_FIGHT_STARTED */ int sub_56493()
{
    if (IS_PED_DEAD( l_U235 ))
    {
        return 1;
    }
    else if (IS_PED_SHOOTING( l_U235 ))
    {
        return 1;
    }
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        if (IS_PED_SHOOTING(  /* PLAYER_PED_ID */ sub_952() ))
        {
            return 1;
        }
    }
    return 0;
}

/* P_HW_ENEMY_START_FIGHT */ void sub_56628()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_ENEMY_START_FIGHT start", 0 );
    if (NOT (IS_PED_DEAD( l_U235 )))
    {
        PED_SET_ACTION_INTENTION( l_U235, 47, -1, 0.00000000, 0.00000000, 0.00000000 );
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_ENEMY_START_FIGHT end", 0 );
    return;
}

/* F_IS_PLAYER_PRESSING_AIM_STICK */ int sub_56819()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        GET_POSITION_OF_ANALOGUE_STICKS( 0, ref uVar2, ref uVar3, ref uVar4, ref uVar5 );
        if ((IS_USING_CONTROLLER()) AND (IS_IN_SOUTHPAW_MODE()))
        {
            if ((((ABSI( uVar4 )) > 1) || (((ABSI( uVar5 )) > 1) AND (NOT IS_USING_CONTROLLER()))) || (((ABSI( uVar2 )) > 35) || ((ABSI( uVar3 )) > 35)))
            {
                return 1;
            }
        }
        else if ((((ABSI( uVar4 )) > 1) || (((ABSI( uVar5 )) > 1) AND (NOT IS_USING_CONTROLLER()))) || (((ABSI( uVar4 )) > 35) || ((ABSI( uVar5 )) > 35)))
        {
            return 1;
        }
    }
    return 0;
}

/* P_STOP_ROOFTOP_HALLWAYS_TUTORIAL_MPM */ void sub_57567()
{
     /* WRITESCRIPTLOG */ sub_456( "CCB", "P_STOP_ROOFTOP_HALLWAYS_TUTORIAL_MPM", 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    SET_CAM_VIEW_MODE( 1 );
    SET_CAMERA_OVERRIDE( "", "", 0, 1, 1 );
    DISPLAY_HUD( 0 );
    ENABLE_PLAYERHEALTH( 0 );
    ENABLE_CROSSHAIR( 0 );
    ENABLE_MPM( 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        SET_PED_CONSUMING_AMMO(  /* PLAYER_PED_ID */ sub_952(), 1 );
        SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_990(), 0, 0 );
    }
    return;
}

/* P_HW_START_DOOR_PENTHOUSE_ENEMIES */ void sub_57934()
{
     /* P_ACTIVATEPED */ sub_44195( l_U427[0] );
     /* P_ACTIVATEPED */ sub_44195( l_U427[1] );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        if (NOT (IS_PED_DEAD( l_U427[0] )))
        {
            ISEQ_REGISTER_ENTITY( -58648941, "gmed", l_U427[0], 0 );
            REGISTER_TARGET( l_U427[0],  /* PLAYER_PED_ID */ sub_952() );
            TASK_AIM_GUN_AT_PED( l_U427[0],  /* PLAYER_PED_ID */ sub_952(), -1, 0 );
            SET_PED_FLAG_BLOCK_WOUNDED_MOVEMENT( l_U427[0], 1 );
            SET_PED_USES_DYING_ANIM( l_U427[0], 0 );
            SET_PED_AS_ONE_SHOT_KILL( l_U427[0], 1 );
        }
        if (NOT (IS_PED_DEAD( l_U427[1] )))
        {
            ISEQ_REGISTER_ENTITY( -58648941, "gmed1", l_U427[1], 0 );
            REGISTER_TARGET( l_U427[1],  /* PLAYER_PED_ID */ sub_952() );
            TASK_AIM_GUN_AT_PED( l_U427[1],  /* PLAYER_PED_ID */ sub_952(), -1, 0 );
            SET_PED_FLAG_BLOCK_WOUNDED_MOVEMENT( l_U427[1], 1 );
            SET_PED_USES_DYING_ANIM( l_U427[1], 0 );
            SET_PED_AS_ONE_SHOT_KILL( l_U427[1], 1 );
        }
    }
    ISEQ_START( -58648941 );
    return;
}

/* PAUSETIMER */ void sub_58934(int iParam0, int iParam1)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if (iParam1 == 1)
    {
        iParam0->_fU8 = iParam0->_fU4 - iParam0->_fU0;
         /* RESETTIMER */ sub_3280( iParam0 );
    }
    else if (iParam0->_fU8 > 0)
    {
         /* STARTTIMER */ sub_2571( iParam0 );
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA() - iParam0->_fU8;
        }
        else
        {
            iParam0->_fU0 = TIMERB() - iParam0->_fU8;
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM() - iParam0->_fU8;
        }
        iParam0->_fU4 = iParam0->_fU0;
        iParam0->_fU8 = 0;
    }
    return;
}

/* P_HW_HANDLE_LOCK_ON_TUTORIAL */ void sub_59197()
{
    if (l_U351)
    {
        if (IS_CONTROL_JUST_PRESSED( 2, 6 ))
        {
             /* WRITESCRIPTLOG */ sub_456( "GA", "End lock on tutorial.", 0 );
            SET_GAME_PAUSED( 0 );
            DISABLE_RESTART_CHECKPOINT( 0 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
             /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1518();
            if (NOT l_U333._fU16)
            {
                 /* PAUSETIMER */ sub_58934( ref l_U333, 0 );
            }
            l_U351 = 0;
        }
    }
    return;
}

/* F_HW_CAN_START_VIG_01B */ int sub_59459()
{
    if (NOT (IS_PED_DEAD( l_U427[2] )))
    {
        if (IS_PED_ON_SCREEN( l_U427[2], 1 ))
        {
            return 1;
        }
    }
    if (NOT (IS_PED_DEAD( l_U427[3] )))
    {
        if (IS_PED_ON_SCREEN( l_U427[3], 1 ))
        {
            return 1;
        }
    }
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_59592( l_U440 ))
    {
        return 1;
    }
    return 0;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_59592(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_59635(  /* PLAYER_PED_ID */ sub_952(), uParam0 );
}

/* F_ISPEDINTRIGGERBOX */ int sub_59635(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_HW_START_VIG_01_B */ void sub_59738()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_START_VIG_01_B start", 0 );
     /* P_ACTIVATEPED */ sub_44195( l_U427[2] );
     /* P_ACTIVATEPED */ sub_44195( l_U427[3] );
     /* P_TETHERPED */ sub_59848( ref l_U438, l_U427[2], 1 );
     /* P_TETHERPED */ sub_59848( ref l_U438, l_U427[3], 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        if (NOT (IS_PED_DEAD( l_U427[2] )))
        {
            ISEQ_REGISTER_ENTITY( -770391621, "gmed1", l_U427[2], 0 );
             /* TELEPORTPED */ sub_18491( l_U427[2], l_U374[2]._fU0, l_U374[2]._fU12 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U427[2], 0 );
            REGISTER_TARGET( l_U427[2],  /* PLAYER_PED_ID */ sub_952() );
        }
        if (NOT (IS_PED_DEAD( l_U427[3] )))
        {
            ISEQ_REGISTER_ENTITY( -770391621, "gmed", l_U427[3], 0 );
             /* TELEPORTPED */ sub_18491( l_U427[3], l_U374[3]._fU0, l_U374[3]._fU12 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U427[3], 0 );
            REGISTER_TARGET( l_U427[3],  /* PLAYER_PED_ID */ sub_952() );
        }
        ISEQ_START( -770391621 );
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_HW_START_VIG_01_B end", 0 );
    return;
}

/* P_TETHERPED */ void sub_59848(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_START_CHECKPOINT_THREAD */ void sub_60318(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* P_GBL_HANDLE_PAINKILLER_TUTORIAL */ void sub_60793()
{
    if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_990() ))) AND ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() ))) AND ((NOT g_U1699) AND ( /* F_IS_TUTORIAL_LEVEL */ sub_60838()))))
    {
        if (NOT g_U1698)
        {
            if ((GET_PAYNEKILLER_AMT() > 0) AND ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND (IS_PLAYER_CONTROL_ON(  /* PLAYER_ID */ sub_990() )))))
            {
                if (( /* F_GET_PLAYER_HEALTH_PERCENT */ sub_61007()) < 0.40000000)
                {
                     /* P_DISPLAY_TUTORIAL_INSTRUCTION_NEWHOT */ sub_55593( "TUT_PAINKILLER", 1 );
                    SET_GAME_PAUSED( 1 );
                    DISABLE_RESTART_CHECKPOINT( 1 );
                    SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
                     /* CREATETIMER */ sub_2421( ref g_U1700, 500, 1, 1 );
                     /* STARTTIMER */ sub_2571( ref g_U1700 );
                    g_U1698 = 1;
                }
            }
        }
        else if ((g_U1700._fU16) || ( /* ISTIMERDONE */ sub_2704( ref g_U1700 )))
        {
            if (IS_CONTROL_PRESSED( 2, 19 ))
            {
                 /* WRITESCRIPTLOG */ sub_456( "GA", "Player completed painkiller tutorial.", 0 );
                 /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1518();
                STOP_IMAGEFX( g_U1697, 0 );
                SET_GAME_PAUSED( 0 );
                DISABLE_RESTART_CHECKPOINT( 0 );
                SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
                SET_PLAYER_FORCE_PAIN_KILLER( 1 );
                g_U1698 = 0;
                g_U1699 = 1;
            }
        }
        if ((IS_LAST_MAN_STANDING_ACTIVE()) || (IS_BULLET_CAMERA_ACTIVE()))
        {
             /* WRITESCRIPTLOG */ sub_456( "GA", "Prematurely ending painkiller tutorial.", 0 );
             /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1518();
            SET_GAME_PAUSED( 0 );
            DISABLE_RESTART_CHECKPOINT( 0 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
            SET_PLAYER_FORCE_PAIN_KILLER( 0 );
            g_U1698 = 0;
        }
    }
    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )) AND (g_U1698))
    {
         /* P_GBL_EARLY_CANCEL_PAINKILLER_TUTORIAL */ sub_61520();
    }
    return;
}

/* F_IS_TUTORIAL_LEVEL */ int sub_60838()
{
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (IS_TUTORIAL_COMPLETE())
    {
        return 0;
    }
    return 1;
}

/* F_GET_PLAYER_HEALTH_PERCENT */ float sub_61007()
{
    unknown uVar2;
    unknown uVar3;
    float Result;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        uVar2 = TO_FLOAT( (GET_PED_MAX_HEALTH(  /* PLAYER_PED_ID */ sub_952() )) - 100 );
        uVar3 = TO_FLOAT( (GET_PED_HEALTH(  /* PLAYER_PED_ID */ sub_952() )) - 100 );
        Result = uVar3 / uVar2;
        return Result;
    }
    return 0.00000000;
}

/* P_GBL_EARLY_CANCEL_PAINKILLER_TUTORIAL */ void sub_61520()
{
    if (g_U1698)
    {
         /* P_END_TUTORIAL_INSTRUCTION_NEWHOT */ sub_1518();
        STOP_IMAGEFX( g_U1697, 0 );
        SET_GAME_PAUSED( 0 );
        DISABLE_RESTART_CHECKPOINT( 0 );
        SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
        SET_PLAYER_FORCE_PAIN_KILLER( 0 );
        g_U1698 = 0;
    }
    return;
}

/* P_PH_HANDLE_CELEBRITY_MAGAZINE_EXPLORATION */ void sub_61653()
{
    if (NOT ( /* F_IS_POI_AVAILABLE */ sub_61712( ref l_U645 )))
    {
        if (( /* F_POI_CAN_PLAY_UNAVALIABLE_MONO */ sub_61768( ref l_U645 )) == 1)
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_44522( "EXPLORE_ITEM", ref l_U773 );
        }
    }
    if ( /* F_HANDLE_POI */ sub_62086( ref l_U645 ))
    {
         /* WRITESCRIPTLOG */ sub_456( "GA", "Starting Celebrity Magazine Log investigation.", 0 );
         /* NIS_PRE_SETUP */ sub_48078( 1, 0, 0, 1 );
         /* NIS_CREATE_STATIC_CAM */ sub_63953( ref l_U731, 3.04000000, -15.75000000, -6.69000000, -46.36000000, 0.00000000, 98.18000000, 32.19000000, 3000 );
         /* NIS_PLAY_STATIC_CAMERA */ sub_64188( ref l_U731 );
        SHAKE_CAM( l_U731._fU0, "HAND_SHAKE", 1.50000000 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
        {
            CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_952() );
            RESET_PLAYER_INPUT_GAIT( 0 );
             /* P_RESET_MAX_ACTION_TREE */ sub_1798();
            SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_952(), 0 );
        }
         /* TELEPORTPED */ sub_18491(  /* PLAYER_PED_ID */ sub_952(), 3.51000000, -15.70000000, -7.83000000, 87.00000000 );
        if (NOT (HAS_EXPLORATION_ITEM_BEEN_FOUND( "sfas_CelebMag" )))
        {
             /* KILL_ANY_MISSION_SPEECH */ sub_64447( 0 );
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_44522( "SRTP_FBMAG", ref l_U763 );
            FOUND_EXPLORATION_ITEM( "sfas_CelebMag" );
        }
        SET_FORCED_AIM_INTENTION_DIRECTION( -0.83799300, -0.54546900, -0.01518200 );
        SET_FORCED_FORWARD_DIRECTION( -0.99863000, 0.05233600, 0.00000000 );
        l_U762 = 1;
    }
    if (l_U762)
    {
        if ( /* NIS_IS_SHOT_FINISHED */ sub_64760( ref l_U731, 1 ))
        {
             /* WRITESCRIPTLOG */ sub_456( "GA", "Ending prisoner log exploration item.", 0 );
             /* NIS_RETURN_TO_GAMEPLAY_CAM */ sub_64987( 0, 0, 0, 35.37000000, -5.18000000, 0 );
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_952(), 1 );
            }
             /* NIS_POST_SETUP */ sub_48738( 1, 1 );
            RESET_FORCED_AIM_INTENTION_DIRECTION();
            RESET_FORCED_FORWARD_DIRECTION();
             /* P_ENABLE_POI */ sub_7020( ref l_U645, 1 );
        }
    }
    return;
}

/* F_IS_POI_AVAILABLE */ void sub_61712(int iParam0)
{
    return iParam0->_fU56;
}

/* F_POI_CAN_PLAY_UNAVALIABLE_MONO */ int sub_61768(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND ((iParam0->_fU76 == 0) AND (( /* F_IS_POI_AVAILABLE */ sub_61712( iParam0 )) == 0)))
    {
        if ((( /* F_HASACTIONBEENPRESSED */ sub_61958()) == 1) AND (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_952() )) == 0) AND (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_952() )) == 0) AND (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_952() )) == 0) AND (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_952() )) == 0) AND (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_952() )) == 0) AND ((IS_PLAYER_SHOOTDODGING() == 0) AND ((IS_MONOLOGUE_PLAYING() == 0) AND ((IS_INTERACTIONTEXT_AVAILABLE() == 0) AND (IS_INTERACTIONTEXT_ONSCREEN() == 1))))))))))
        {
            iParam0->_fU76 = 1;
            return 1;
        }
    }
    return 0;
}

/* F_HASACTIONBEENPRESSED */ int sub_61958()
{
    if ((IS_CONTROL_JUST_PRESSED( 0, 30 )) == 1)
    {
        return 1;
    }
    return 0;
}

/* F_HANDLE_POI */ int sub_62086(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    int iVar6;
    int iVar7;
    int iVar8;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )) == 0)
    {
        if (iParam0->_fU0 == 1)
        {
            uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_952() )};
            iVar6 = 0;
            if (iParam0->_fU80 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_59635(  /* PLAYER_PED_ID */ sub_952(), iParam0->_fU116 )) == 1)
                {
                    if (iParam0->_fU300 == 1)
                    {
                        if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                        {
                            iVar6 = 1;
                        }
                    }
                    else
                    {
                        iVar6 = 1;
                    }
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU84 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_PED_ON_SCREEN( iParam0->_fU316, 0 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU100, 1 )) <= iParam0->_fU112)
            {
                if (iParam0->_fU300 == 1)
                {
                    if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                    {
                        iVar6 = 1;
                    }
                }
                else
                {
                    iVar6 = 1;
                }
            };;;;
            iVar7 = 0;
            if (iParam0->_fU88 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_59635(  /* PLAYER_PED_ID */ sub_952(), iParam0->_fU216 )) == 1)
                {
                    iVar7 = 1;
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU92 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU200, 1 )) <= iParam0->_fU212)
            {
                iVar7 = 1;
            };;;;
            if (iVar6 == 1)
            {
                if ((iParam0->_fU4 != 3) AND (iParam0->_fU52 == 1))
                {
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_7478( iParam0 );
                    }
                    iVar8 = 0;
                    if ((IS_WEAPON_PICKUP_VISIBLE() == 0) AND ((iParam0->_fU60 == 0) AND (( /* F_ISACTIONINGAVAILABLE */ sub_7574( iParam0 )) == 1)))
                    {
                        SET_ACTION_CONSUMED( 0, 1 );
                        if (( /* F_HASACTIONBEENPRESSED */ sub_61958()) == 1)
                        {
                            iVar8 = 1;
                        }
                    }
                    if (iVar8 == 1)
                    {
                        if (iParam0->_fU332 == 0)
                        {
                             /* P_ENABLE_POI */ sub_7020( iParam0, 0 );
                            iParam0->_fU64 = 1;
                        }
                        if (iParam0->_fU68 == 1)
                        {
                            iParam0->_fU72 = 0;
                        }
                        return 1;
                    }
                    else if (iParam0->_fU8 != 2)
                    {
                        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                        {
                             /* P_ENABLEPOIGLINT */ sub_7079( iParam0, 0 );
                             /* P_ENABLEPOIINTERACTIONTEXT */ sub_7298( iParam0, 1 );
                        }
                        else if (iParam0->_fU320 == 1)
                        {
                             /* P_ENABLEPOIGLINT */ sub_7079( iParam0, 1 );
                        }
                        iParam0->_fU8 = 2;
                    }
                    if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                    {
                        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )) == 0)
                        {
                            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_952(), 1 );
                            iParam0->_fU328 = 1;
                        }
                    }
                }
            }
            else if (iVar7 == 1)
            {
                if (iParam0->_fU8 != 1)
                {
                    if ((iParam0->_fU4 != 3) AND (iParam0->_fU320 == 1))
                    {
                         /* P_ENABLEPOIGLINT */ sub_7079( iParam0, 1 );
                    }
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_ENABLEPOIINTERACTIONTEXT */ sub_7298( iParam0, 0 );
                    }
                    if (iParam0->_fU96 == 1)
                    {
                        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )) == 0) AND ((((IS_PED_DEAD( iParam0->_fU316 )) == 1) || ((IS_PED_DEAD( iParam0->_fU316 )) == 0)) AND ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)))
                        {
                            TASK_LOOK_AT_PED(  /* PLAYER_PED_ID */ sub_952(), iParam0->_fU316, -1, 0 );
                        }
                    }
                    else if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )) == 0)
                    {
                        TASK_LOOK_AT_COORD(  /* PLAYER_PED_ID */ sub_952(), iParam0->_fU100, -1, 0 );
                    }
                    iParam0->_fU340 = 1;
                    if ((iParam0->_fU72 == 0) AND ((iParam0->_fU68 == 1) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU8 == 2))))
                    {
                        iParam0->_fU72 = 1;
                    }
                    iParam0->_fU8 = 1;
                }
                if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                {
                    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )) == 0)
                    {
                        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_952(), 1 );
                        iParam0->_fU328 = 1;
                    }
                }
            }
            else if ((iParam0->_fU4 == 1) || (iParam0->_fU4 == 3))
            {
                ;
            }
            else if (iParam0->_fU8 != 0)
            {
                if (iParam0->_fU320 == 1)
                {
                     /* P_ENABLEPOIGLINT */ sub_7079( iParam0, 0 );
                }
            }
            if (iParam0->_fU8 == 2)
            {
                if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                {
                     /* P_ENABLEPOIINTERACTIONTEXT */ sub_7298( iParam0, 0 );
                }
            }
            if (iParam0->_fU340)
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )) == 0)
                {
                    TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_952() );
                    iParam0->_fU340 = 0;
                }
            }
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )) == 0)
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_952(), 0 );
                    iParam0->_fU328 = 0;
                }
            }
            if (iParam0->_fU332 == 1)
            {
                 /* P_ENABLEPOIINTERACTIONTEXT */ sub_7298( iParam0, 0 );
            }
            iParam0->_fU8 = 0;;;
        }
    }
    return 0;
}

/* NIS_CREATE_STATIC_CAM */ void sub_63953(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_2421( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U649, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* NIS_PLAY_STATIC_CAMERA */ void sub_64188(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_2571( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* KILL_ANY_MISSION_SPEECH */ void sub_64447(unknown uParam0)
{
    int I;

    for ( I = 0; I <= 3; I++ )
    {
        PRINTSTRING( "\n KILL_ANY_MISSION_SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( I ))
        {
            if ((g_U1[I] <= 8) AND (g_U1[I] >= 4))
            {
                STOP_SCRIPTED_CONVERSATION( I, uParam0, 0 );
            }
        }
    }
    return;
}

/* NIS_IS_SHOT_FINISHED */ int sub_64760(int iParam0, boolean bParam1)
{
    if (bParam1 == 1)
    {
        if (NOT iParam0->_fU44)
        {
            if ((ref iParam0->_fU48->_fU16) || ( /* ISTIMERDONE */ sub_2704( iParam0 + 48 )))
            {
                iParam0->_fU44 = 1;
                iParam0->_fU36 = 1;
                return 1;
            }
        }
    }
    if (NOT bParam1)
    {
        if ((ref iParam0->_fU48->_fU16) || ( /* ISTIMERDONE */ sub_2704( iParam0 + 48 )))
        {
            iParam0->_fU36 = 1;
            return 1;
        }
    }
    return 0;
}

/* NIS_RETURN_TO_GAMEPLAY_CAM */ void sub_64987(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, float fParam4, unknown uParam5)
{
    SET_CAM_SIDE_LEFT( uParam2 );
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam3, 1065353216, 0 );
    }
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( fParam4, 1065353216, 0 );
    }
    RENDER_SCRIPT_CAMS( 0, uParam1, uParam0, uParam5 );
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_65360(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_65646(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_59635(  /* PLAYER_PED_ID */ sub_952(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* P_PH_START_PIANOS_NIS */ void sub_66737()
{
     /* WRITESCRIPTLOG */ sub_456( "SA", "P_PH_START_PIANOS_NIS start.", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
    {
        ISEQ_REGISTER_ENTITY( 127872207, "Max",  /* PLAYER_PED_ID */ sub_952(), 0 );
        ISEQ_START( 127872207 );
    }
    l_U587 = 1;
     /* WRITESCRIPTLOG */ sub_456( "SA", "P_PH_START_PIANOS_NIS end.", 0 );
    return;
}

/* P_PH_HANDLE_PIANO_NIS */ void sub_66927()
{
    switch (l_U587)
    {
        case 0: break;
        case 1:
         /* NIS_PRE_SETUP */ sub_48078( 1, 1, 0, 1 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
        {
            CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_952() );
            RESET_PLAYER_INPUT_GAIT( 0 );
             /* P_RESET_MAX_ACTION_TREE */ sub_1798();
        }
         /* TELEPORTPED */ sub_18491(  /* PLAYER_PED_ID */ sub_952(), l_U583, l_U586 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_952() )))
        {
            if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_952(), 1, 0 ) ))
            {
                SET_WEAPON_VISIBLE( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_952(), 1, 0 ), 0 );
            }
        }
        CAMERA_PLAY_ANIMATED( "LEVEL_S_ROOFTOP_CP_01", "VIG_01C_RP_MAX_PIANO_RIGHT_CAM", 0, 0, 0, 0, 0, 0, 0 );
         /* P_STREAMREQ_SCRIPT_STREAM_PLAY_FRONTEND */ sub_67255( "ROOFTOP_PIANO_01", ref g_U1168 );
         /* STARTTIMER */ sub_2571( ref l_U610 );
        SET_FORCED_AIM_INTENTION_DIRECTION( 0.12762200, -0.99040000, -0.05309900 );
        l_U587 = 2;
        break;
        case 2:
        if ( /* ISTIMERDONE */ sub_2704( ref l_U610 ))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_44522( "SRTP_MPPNA", ref l_U619 );
        }
        if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_ROOFTOP_CP_01", "VIG_01C_RP_MAX_PIANO_RIGHT_CAM" )) - 1))
        {
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( 8.27000000, 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( -11.73000000, 1065353216, 0 );
            CAMERA_FREEZE_FRAME( 1, 0, 0, 0 );
            if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_952(), 1, 0 ) ))
            {
                SET_WEAPON_VISIBLE( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_952(), 1, 0 ), 1 );
            }
            SIMULATE_PLAYER_INPUT_GAIT(  /* PLAYER_ID */ sub_990(), 2, 3000, 0 );
            l_U587 = 3;
            AUDIO_MUSIC_ADJUST_VOLUME( 0.00000000 );
        }
        else
        {
            AUDIO_MUSIC_ADJUST_VOLUME( -24.00000000 );
        }
        break;
        case 3:
        if ((ISEQ_QUERY_ENTITY_STATE( 127872207, "Max", 6 )) || (ISEQ_QUERY_ENTITY_STATE( 127872207, "Max", 5 )))
        {
            CAMERA_FREEZE_FRAME( 0, 0, 0, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( 8.27000000, 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( -11.73000000, 1065353216, 0 );
             /* NIS_POST_SETUP */ sub_48738( 1, 1 );
            RESET_FORCED_AIM_INTENTION_DIRECTION();
            l_U587 = 4;
        }
        break;
        case 4: break;
    }
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_PLAY_FRONTEND */ void sub_67255(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_5489( uParam0, uParam1 ))
    {
        iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_5698( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            DISPLAYF( "[CCB]### Playing the SCRIPT_STREAM: {} ###", 1, 1281, ref (uParam1^)[iVar4]._fU0 );
            PLAY_SCRIPT_STREAM_FRONTEND( iVar4 );
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam0 );
            SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam0 );
        SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* P_HW_DEBUG_TUNING_WIDGET */ void sub_68440()
{
    if (NOT l_U891)
    {
        START_WIDGET_GROUP( "Hallway Tuning" );
        ADD_WIDGET_INT_SLIDER( "Time until raise arm in aim", ref l_U249, 0, 100000, 50 );
        ADD_WIDGET_INT_SLIDER( "Time End Forced Bullet Time", ref l_U292, 0, 10000000, 50 );
        ADD_WIDGET_INT_SLIDER( "Time Player Run", ref l_U302, 0, 10000000, 50 );
        ADD_WIDGET_INT_SLIDER( "Delay shootdodge enemies", ref l_U322, 0, 10000000, 50 );
        ADD_WIDGET_INT_SLIDER( "Time In Position for SD", ref l_U312, 0, 10000000, 50 );
        ADD_WIDGET_INT_SLIDER( "Time to land", ref l_U332, 0, 100000, 50 );
        ADD_WIDGET_INT_SLIDER( "Delay Piano monologue", ref l_U609, 0, 1000000, 50 );
        STOP_WIDGET_GROUP();
        l_U891 = 1;
    }
    return;
}

/* P_RELEASE_HW_ASSETS */ void sub_68870()
{
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_RELEASE_HW_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_68949( ref l_U106, ref g_U821 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_69497( ref l_U114, ref g_U918 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_69944( "LEVEL_S_ROOFTOP_CP_01", ref g_U1028 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_69944( "DAM_DEAD", ref g_U1028 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_70338( "SCRIPT_MISSION\S_FASHION_LOBBY", ref g_U1221 );
     /* WRITESCRIPTLOG */ sub_456( "GA", "P_RELEASE_HW_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_68949(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_69022( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_69022(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4361( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_69497(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_69571( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_69571(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4361( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_69944(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4361( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_70338(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4361( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

