void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U40 = 0;
    l_U41 = 0;
    l_U42 = 1500;
    l_U52 = {0, 0, 0};
    StrCopy( ref l_U55, "DUMMY", 32 );
    l_U63 = 1;
    l_U68 = 0;
    l_U69 = 0;
    l_U70 = 0;
    l_U73 = 0;
    l_U118 = -1;
    l_U119 = {64536, 64536, 64536};
    l_U123 = 0;
    l_U169 = 0;
    l_U171 = 0;
    l_U383 = {-39.42100000, 3.16200000, 6.05000000};
    l_U386 = 154.80000000;
    l_U759 = 0;
     /* WRITESCRIPTLOG */ sub_418( "SP", "Script s_pana_Deck2.sc is starting up...", 0 );
     /* P_2D_SETUP_DATA_ARRAYS */ sub_536();
    l_U169 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_758();
        if (l_U171 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_12184();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_2D */ sub_4715();
     /* P_RELEASE_2D_ASSETS */ sub_57967();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_pana_Deck2" );
     /* WRITESCRIPTLOG */ sub_418( "SP", "Script s_pana_Deck2.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_418(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_2D_SETUP_DATA_ARRAYS */ void sub_536()
{
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_2D_SETUP_DATA_ARRAYS start", 0 );
    l_U161[0] = g_U1518;
    l_U161[1] = g_U1528;
    l_U161[2] = g_U1583;
    l_U161[3] = -1409914275;
    l_U166[0] = -612753081;
    l_U166[1] = -1404433099;
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_2D_SETUP_DATA_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_758()
{
    if (g_U834 == 5)
    {
        switch (l_U171)
        {
            case 0:
             /* ISMAXOVERBOARD */ sub_860( 1 );
            if ((l_U759 == 1) || (( /* RESTARTING_CHECKPOINT */ sub_2424()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() ))))
            {
                l_U171 = 1;
                 /* WRITESCRIPTLOG */ sub_418( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_2950())
            {
                if ((g_U835[6]._fU40 != 4) AND (g_U835[6]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_418( "GA", "Shutting down script for top deck.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_3087( ref g_U835[6] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U835[6]._fU32 );
                }
                l_U171 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_3180( 0 )) == 1)
            {
                if ((g_U835[6]._fU40 != 4) AND (g_U835[6]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_418( "GA", "Shutting down script for top deck.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_3087( ref g_U835[6] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U835[6]._fU32 );
                }
                l_U171 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() )))
            {
                l_U171 = 3;
                 /* WRITESCRIPTLOG */ sub_418( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_418( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_925() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_925(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_887() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_887(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
             /* P_CLEANUP_2D */ sub_4715();
            LOAD_SCENE( -60.36033000, 4.03825700, 6.08244300 );
            LOAD_SCENE( -9.51633800, 3.89024600, 13.19525000 );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "Deck2exit", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "Deck2exit", 0 ), GET_HASH_KEY( ref g_U3271 ) );
            STREAM_HELPERS_REQUEST_AT_LOC( g_U980[5], 0 );
             /* MAL_TELEPORTPLAYER */ sub_7082( g_U980[5], g_U1086[5], g_U1158[5], g_U1122[5] );
             /* MAL_FREEZEPLAYER */ sub_7243( 1 );
            l_U171 = 4;
             /* WRITESCRIPTLOG */ sub_418( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_418( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U125._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_7476( ref l_U125,  /* PLAYER_PED_ID */ sub_887() );
            }
            l_U171 = 5;
             /* WRITESCRIPTLOG */ sub_418( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_418( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U169 = 1;
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_925() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_925(), 1, 0 );
            }
            l_U171 = 0;
             /* WRITESCRIPTLOG */ sub_418( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* ISMAXOVERBOARD */ int sub_860(int iParam0)
{
    if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() )))))
    {
        if ((IS_PED_IN_WATER(  /* PLAYER_PED_ID */ sub_887() )) == 1)
        {
            if (NOT g_U3626._fU32)
            {
                 /* P_GBL_QUICK_GAMEPLAY_CAM_COPY */ sub_1046();
            }
            if (iParam0 == 1)
            {
                 /* P_GLOBAL_MAX_WATER_IMPACT_DEATH */ sub_2002();
            }
             /* NIS_POST_SETUP */ sub_2094( 1, 1 );
            return 1;
        }
    }
    return 0;
}

/* PLAYER_PED_ID */ int sub_887()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_925() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_925()
{
    return GET_PLAYER_ID();
}

/* P_GBL_QUICK_GAMEPLAY_CAM_COPY */ void sub_1046()
{
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_GBL_QUICK_GAMEPLAY_CAM_COPY - START", 0 );
     /* NIS_CREATE_GAMEPLAY_CAM_COPY */ sub_1146( ref g_U3626, 50 );
     /* NIS_PRE_SETUP */ sub_1524( 0, 0, 0, 1 );
     /* NIS_PLAY_STATIC_CAMERA */ sub_1703( ref g_U3626 );
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_GBL_QUICK_GAMEPLAY_CAM_COPY - END", 0 );
    return;
}

/* NIS_CREATE_GAMEPLAY_CAM_COPY */ void sub_1146(int iParam0, unknown uParam1)
{
    iParam0->_fU4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_GAMEPLAY_CAM_ROT()};
    iParam0->_fU16 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_GAMEPLAY_CAM_COORD()};
    iParam0->_fU28 = GET_GAMEPLAY_CAM_FOV();
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam1;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_1300( iParam0 + 48, uParam1, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U703, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* CREATETIMER */ void sub_1300(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* NIS_PRE_SETUP */ void sub_1524(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_925(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_887(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_887() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_887(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* NIS_PLAY_STATIC_CAMERA */ void sub_1703(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_1783( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* STARTTIMER */ void sub_1783(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* P_GLOBAL_MAX_WATER_IMPACT_DEATH */ void sub_2002()
{
    SET_PAD_SHAKE( 0, 100, 250 );
    WAIT( 90 );
    SET_PED_HEALTH(  /* PLAYER_PED_ID */ sub_887(), 0, 0 );
    return;
}

/* NIS_POST_SETUP */ void sub_2094(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_925(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_887(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_2192();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_2192()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_887(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_887(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_887(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_887(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* RESTARTING_CHECKPOINT */ int sub_2424()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_887(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_925(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_925(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_887() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_887(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_2950()
{
    return g_U648;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_3087(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* F_CHECK_QUIT_RETRY */ int sub_3180(int iParam0)
{
    iParam0 = 1;
    switch (l_U41)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_3262( ref l_U43 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() )))
            {
                l_U42 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1300( ref l_U43, l_U42, 1, 1 );
             /* STARTTIMER */ sub_1783( ref l_U43 );
        }
        if ( /* ISTIMERDONE */ sub_3414( ref l_U43 ))
        {
             /* WRITESCRIPTLOG */ sub_418( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_925() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_925(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U41 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U41 = 2;
            }
            else
            {
                l_U41 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_418( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_3915();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_418( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_3915();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_3262(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* ISTIMERDONE */ int sub_3414(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_3915()
{
     /* WRITESCRIPTLOG */ sub_418( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_3990( ref l_U43 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_925() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_925(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U40 = 0;
    l_U40 = l_U40;
    l_U41 = 0;
    return;
}

/* RESETTIMER */ void sub_3990(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_CLEANUP_2D */ void sub_4715()
{
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_CLEANUP_2D start", 0 );
    SET_BCAM_STR_HELPER_TRACK_PLAYER( 0 );
     /* P_SAFE_STOP_SOUND */ sub_4786( g_U4175, 0 );
     /* P_SAFE_RELEASE_SOUND_ID */ sub_4969( ref g_U4175 );
    g_U4177 = 0;
    ISEQ_TERMINATE( -396548175 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_5200( -396548175, ref g_U1878 );
    ISEQ_TERMINATE( 505353008 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_5200( 505353008, ref g_U1878 );
    ISEQ_TERMINATE( 2061552818 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_5200( 2061552818, ref g_U1878 );
    ISEQ_TERMINATE( 1082972171 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_5200( 1082972171, ref g_U1878 );
    ISEQ_TERMINATE( 797357567 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_5200( 797357567, ref g_U1878 );
    ISEQ_TERMINATE( -890990590 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_5200( -890990590, ref g_U1878 );
     /* CLEANPLACEMENT */ sub_6398( l_U172 );
     /* CLEANPLACEMENT */ sub_6398( l_U173 );
     /* CLEANPED */ sub_6473( l_U369 );
     /* CLEANPEDARRAY */ sub_6562( ref l_U387 );
     /* CLEANPEDARRAY */ sub_6562( ref l_U521 );
     /* CLEANPED */ sub_6473( l_U761 );
     /* CLEANPED */ sub_6473( l_U798 );
     /* P_STOP_SP_CHALLENGES */ sub_6665();
    if ((AUDIO_MUSIC_IS_ONESHOT_PREPARED( "PANAMA_OS_2" )) || (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "PANAMA_OS_4" )))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_CLEANUP_2D end", 0 );
    return;
}

/* P_SAFE_STOP_SOUND */ void sub_4786(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
         /* WRITESCRIPTLOG */ sub_418( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_418( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

/* P_SAFE_RELEASE_SOUND_ID */ void sub_4969(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
         /* WRITESCRIPTLOG */ sub_418( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_418( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_5200(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5338( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_5338(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* CLEANPLACEMENT */ void sub_6398(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* CLEANPED */ void sub_6473(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANPEDARRAY */ void sub_6562(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_6473( (uParam0^)[I] );
    }
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_6665()
{
     /* WRITESCRIPTLOG */ sub_418( "CCB", "P_STOP_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_418( "CCB", "Stopping the Panama_Second_Deck context...", 0 );
    END_CONTEXT( "Panama_Second_Deck" );
    return;
}

/* MAL_TELEPORTPLAYER */ void sub_7082(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    unknown uVar8;

    uVar8 =  /* PLAYER_PED_ID */ sub_887();
     /* MAL_TELEPORTPED */ sub_7129( uVar8, uParam0, uParam3 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam4, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( uParam5, 1065353216, 0 );
    return;
}

/* MAL_TELEPORTPED */ void sub_7129(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* MAL_FREEZEPLAYER */ void sub_7243(unknown uParam0)
{
    unknown uVar3;

    uVar3 =  /* PLAYER_PED_ID */ sub_887();
     /* MAL_FREEZEPED */ sub_7282( ref uVar3, uParam0 );
    return;
}

/* MAL_FREEZEPED */ void sub_7282(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        FREEZE_PED_POSITION( (uParam0^), uParam1 );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_7476(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_418( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_7695( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_8859( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9173( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9652( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9173( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9652( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9173( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9652( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9968( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9652( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9968( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9652( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_10540( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_10742( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_887(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_418( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_7695(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7757( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_7757(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_8859(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_9173(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9577( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_9577(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_9652(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_9968(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9577( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_10540(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_10742(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7757( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_10840( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_10840(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_12184()
{
    int iVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    iVar2 = l_U169;
     /* P_HANDLE_SP_CHALLENGES */ sub_12219();
    switch (l_U169)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_418( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_12898();
         /* P_SET_STATIC_DATA */ sub_13173();
         /* P_INITIALIZE_SP_CHALLENGES */ sub_15970();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U169 = 2;
         /* WRITESCRIPTLOG */ sub_418( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_418( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_2D_PERSISTENT_ASSETS */ sub_16744();
         /* P_REQUEST_2D_NONPERSISTENT_ASSETS */ sub_26452();
        l_U169 = 3;
         /* WRITESCRIPTLOG */ sub_418( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_31184( ref g_U3026 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_30770( ref g_U1878 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_30379( ref g_U1975 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_29977( ref g_U1829 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_29580( ref g_U1588 ))))))
        {
            if ((NOT l_U125._fU0) AND (g_U833 == 5))
            {
                l_U169 = 4;
                 /* WRITESCRIPTLOG */ sub_418( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U169 = 6;
                 /* WRITESCRIPTLOG */ sub_418( "SP", "eCheckpointState = CP_2D_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_418( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U1230[5] = 1;
         /* P_CLOSEDOOR */ sub_31793( ref g_U3777[10], 1 );
         /* P_SETDOORLOCKED */ sub_32053( ref g_U3777[10], 1 );
         /* P_CLOSEDOOR */ sub_31793( ref g_U3777[9], 1 );
        AUD_SET_IS_POWER_ON( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() )))
        {
            FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_887(), 0 );
        }
        if (( /* HAS_SAVEFILE_LOADED */ sub_32255( ref l_U125 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_9968(  /* PLAYER_PED_ID */ sub_887(), -1404433099, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_9173(  /* PLAYER_PED_ID */ sub_887(), -612753081, 0, 200, 0 );
            l_U169 = 5;
             /* WRITESCRIPTLOG */ sub_418( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U169 = 6;
             /* WRITESCRIPTLOG */ sub_418( "SP", "eCheckpointState = CP_2D_PRE_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_887(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_887(), 0, 0 ) )))
            {
                l_U169 = 6;
                 /* WRITESCRIPTLOG */ sub_418( "GA", "eCheckpointState = CP_2D_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if (l_U170)
        {
             /* P_GLOBAL_CREATE_LOCKS */ sub_32793( 0, 0 );
             /* P_CREATE_PICKUPS */ sub_33868();
        }
        if ( /* F_HANDLE_PED_ARRAY_SPAWN */ sub_34223( ref l_U387, ref l_U393, -1, 0, 0, 0, 1 ))
        {
             /* P_2ND_GRAPPLE_REBELS_SETUP */ sub_35875();
            l_U169 = 7;
             /* WRITESCRIPTLOG */ sub_418( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        break;
        case 7:
        if (g_U1230[5])
        {
            if (NOT l_U125._fU0)
            {
                g_U834 = 5;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_38563( ref l_U125, g_U834,  /* PLAYER_PED_ID */ sub_887(), g_U980[5], g_U1086[5], g_U1158[5], g_U1122[5], 1 );
            }
             /* P_GLOBAL_LOCK_2_GATES_OPEN */ sub_43120();
            DO_SCREEN_FADE_IN( 0 );
             /* P_START_SP_CHALLENGES */ sub_43554();
            l_U169 = 8;
             /* WRITESCRIPTLOG */ sub_418( "GA", "eCheckpointState = CP_2D_GAMEPLAY", 0 );
        }
        break;
        case 8:
        if (l_U170)
        {
             /* P_CREATE_DEAD_HOTTUB_BODY */ sub_43785();
             /* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ sub_44138();
            SET_BCAM_STR_HELPER_TRACK_PLAYER( 1 );
             /* MAL_FREEZEPLAYER */ sub_7243( 0 );
        }
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_44334( ref l_U387, 0.00000000, 1, 0 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_44334( ref l_U521, 0.00000000, 1, 0 );
         /* P_PED_Z_SAFETY_CHECK */ sub_44400( l_U761, 0.00000000, 1, 0 );
         /* P_PED_Z_SAFETY_CHECK */ sub_44400( l_U798, 0.00000000, 1, 0 );
         /* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ sub_44583();
         /* P_ASSIGN_BULLET_CAMS */ sub_46320();
        if (g_U4177 == 1)
        {
            if (NOT (IS_OBJECT_PLAYING_ANIM( g_U4171, "P_LockGate", "pa_doors" )))
            {
                 /* WRITESCRIPTLOG */ sub_418( "GA", "Stop lock2 sound.", 0 );
                 /* P_SAFE_STOP_SOUND */ sub_4786( g_U4175, 0 );
                 /* P_SAFE_RELEASE_SOUND_ID */ sub_4969( ref g_U4175 );
                g_U4177 = 0;
            }
        }
        if (NOT l_U465)
        {
            if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_47488( ref l_U466, 0 ))
            {
                 /* P_2ND_GRAPPLE_REBEL_A_CLIMB */ sub_47623();
                 /* P_2ND_GRAPPLE_REBEL_B_CLIMB */ sub_47968();
                 /* STARTTIMER */ sub_1783( ref l_U488 );
                 /* STARTTIMER */ sub_1783( ref l_U497 );
                l_U465 = 1;
            }
        }
        if (( /* ISTIMERDONE */ sub_3414( ref l_U488 )) == 1)
        {
             /* P_2ND_GRAPPLE_REBEL_C_CLIMB */ sub_48184();
             /* P_2ND_GRAPPLE_REBEL_ATTACK */ sub_48366( l_U387[2] );
             /* STARTTIMER */ sub_1783( ref l_U506 );
        }
        if (l_U465 == 1)
        {
            if (l_U487 == 0)
            {
                if ( /* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ sub_48641( ref l_U387,  /* PLAYER_PED_ID */ sub_887(), 0, 1, 1, 1, 1 ))
                {
                     /* P_2ND_GRAPPLE_REBEL_ATTACK */ sub_48366( l_U387[0] );
                     /* P_2ND_GRAPPLE_REBEL_ATTACK */ sub_48366( l_U387[1] );
                    l_U487 = 1;
                     /* WRITESCRIPTLOG */ sub_418( "CR", "MUSIC: Playing: PANAMA_FINAL, Mood: PANAMA_FINAL_2_6", 0 );
                    AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2_6", "PANAMA_FINAL_2_6", 0, 3000, -1, -1082130432, 0 );
                     /* WRITESCRIPTLOG */ sub_418( "CR", "Playing audio music one shot PANAMA_OS_4", 0 );
                    AUDIO_MUSIC_PLAY_ONESHOT();
                }
            }
        }
        if (l_U487 == 1)
        {
            if (( /* ISTIMERDONE */ sub_3414( ref l_U497 )) == 1)
            {
                 /* P_2ND_GRAPPLE_REBELS_A_B_SPEECH */ sub_49410();
            }
        }
        if (( /* ISTIMERDONE */ sub_3414( ref l_U506 )) == 1)
        {
             /* P_2ND_GRAPPLE_REBELS_C_SPEECH */ sub_49960();
        }
        if ( /* MAL_ISACTINTCOMPLETED */ sub_50230( ref l_U387[0], 47, 1 ))
        {
            SET_PED_AS_ONE_SHOT_KILL( l_U387[0], 0 );
        }
        if ( /* MAL_ISACTINTCOMPLETED */ sub_50230( ref l_U387[1], 47, 1 ))
        {
            SET_PED_AS_ONE_SHOT_KILL( l_U387[1], 0 );
        }
        if ( /* MAL_ISACTINTCOMPLETED */ sub_50230( ref l_U387[2], 47, 1 ))
        {
            SET_PED_AS_ONE_SHOT_KILL( l_U387[2], 0 );
        }
        if (NOT l_U515)
        {
            if ((( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_46738( ref l_U521 )) > 0) || (( /* F_ISPLAYERINTRIGGERBOX */ sub_50547( l_U572 )) || ( /* F_ISPLAYERINTRIGGERBOX */ sub_50547( l_U593 ))))
            {
                 /* P_2ND_START_GRAPPLE_REBELS_D_E */ sub_50632();
                l_U515 = 1;
            }
        }
        else
        {
             /* P_2ND_HANDLE_GRAPPLE_REBEL_D_E */ sub_50856();
        }
        if ( /* F_ISPLAYERINTRIGGERREGIONFIRSTTIME */ sub_51254( ref l_U217, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_418( "CR", "MUSIC: Playing PANAMA_FINAL Mood: PANAMA_FINAL_2_3_6", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2_3_6", "PANAMA_FINAL_2_3_6", 0.00000000, 3000, -1, -1082130432, 0 );
        }
        if ((NOT ( /* F_ISPEDINTRIGGERBOX */ sub_12371( l_U761, l_U776 ))) AND (NOT (IS_PED_DEAD( l_U761 ))))
        {
            RESET_PED_TETHERING( l_U761 );
        }
        if (NOT l_U520)
        {
            if ((l_U487) || (( /* F_ISPLAYERINTRIGGERBOX */ sub_50547( l_U572 )) || ( /* F_ISPLAYERINTRIGGERBOX */ sub_50547( l_U593 ))))
            {
                 /* WRITESCRIPTLOG */ sub_418( "GA", "Player has activated the bar fight.", 0 );
                 /* P_2ND_ROOFTOP_REBEL_START */ sub_51826();
                l_U520 = 1;
            }
        }
        else if (( /* F_HANDLE_PED_ARRAY_SPAWN */ sub_34223( ref l_U521, ref l_U525, -1, 1, 1, 0, 1 )) == 1)
        {
             /* P_2ND_BAR_REBELS_SETUP */ sub_52242();
             /* P_2ND_BAR_REBELS_FIRST_WAVE_ATTACK */ sub_52946();
             /* STARTTIMER */ sub_1783( ref l_U615 );
             /* STARTTIMER */ sub_1783( ref l_U624 );
        }
        if (NOT l_U614)
        {
            if ( /* F_HAS_PED_ARRAY_SPAWNED */ sub_46470( ref l_U521, 1 ))
            {
                if (( /* ISTIMERDONE */ sub_3414( ref l_U615 )) || ((IS_PED_DEAD( l_U761 )) || (( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_46738( ref l_U521 )) > 0)))
                {
                     /* P_2ND_BAR_FIGHT_HAS_STARTED */ sub_53324();
                    l_U614 = 1;
                }
            }
        }
        if ( /* ISTIMERDONE */ sub_3414( ref l_U624 ))
        {
             /* P_2ND_BAR_REBELS_SECOND_WAVE_ATTACK */ sub_53719();
        }
        if (( /* F_2ND_SHOULD_SPAWN_REINFORCEMENTS */ sub_54136()) AND (NOT l_U797))
        {
            l_U797 = 1;
             /* P_2ND_BAR_SPAWN_REINFORCEMENTS */ sub_54277();
             /* P_2ND_CLEAR_BULLET_CAM_FROM_REBELS */ sub_54721();
        }
        if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_55116( ref l_U633,  /* PLAYER_PED_ID */ sub_887(), 0 ))
        {
             /* P_2ND_UNTETHER_BAR_ENEMIES */ sub_55245();
        }
        if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_47488( ref l_U996, 0 )) == 1)
        {
             /* P_START_CHECKPOINT_THREAD */ sub_55360( ref g_U835[6] );
             /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_55457( "SCRIPT_MISSION\S_PANA_REPEL_GMED_FWD", ref g_U3026 );
        }
        if ((( /* ISPEDVALID */ sub_36484( l_U798, 0 )) == 0) AND (((IS_PED_DEAD( l_U761 )) == 1) AND ((( /* F_IS_PED_ARRAY_DEFEATED */ sub_46431( ref l_U521, 1 )) == 1) AND (( /* F_IS_PED_ARRAY_DEFEATED */ sub_46431( ref l_U387, 1 )) == 1))))
        {
             /* P_START_CHECKPOINT_THREAD */ sub_55360( ref g_U835[6] );
             /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_55457( "SCRIPT_MISSION\S_PANA_REPEL_GMED_FWD", ref g_U3026 );
            if (l_U358 == 0)
            {
                 /* WRITESCRIPTLOG */ sub_418( "CR", "MUSIC: Playing: PANAMA_FINAL, Mood: PANAMA_FINAL_2", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2", "PANAMA_FINAL_2", 0.00000000, -1, 6000, -1082130432, 0 );
                 /* WRITESCRIPTLOG */ sub_418( "CR", "Playing audio music one shot PANAMA_OS_2", 0 );
                AUDIO_MUSIC_PLAY_ONESHOT();
                 /* STARTTIMER */ sub_1783( ref l_U359 );
                l_U358 = 1;
            }
        }
        if ((NOT l_U368) AND ( /* ISTIMERDONE */ sub_3414( ref l_U359 )))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_44997( "SPAN_MKFEVR", ref g_U1246 );
            l_U368 = 1;
             /* WRITESCRIPTLOG */ sub_418( "CR", "Playing monologue - SPAN_MKFEVR - I was on a ghost ship, in a ghost canal...", 0 );
        }
        if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_47488( ref l_U1017, 0 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_418( "GA", "Close the yacht door behind the player.", 0 );
             /* P_SETDOORLATCH */ sub_56356( ref g_U3890[1], 0 );
             /* P_SETDOORAUTOCLOSE */ sub_56440( ref g_U3890[1], 1 );
             /* P_CLOSEDOOR */ sub_31793( ref g_U3890[1], 0 );
            DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3890[1]._fU0, g_U3890[1]._fU4 ), 0 );
        }
        if (l_U1017._fU64)
        {
            if (NOT (DOOR_GET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3890[1]._fU0, g_U3890[1]._fU4 ) )))
            {
                DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U3890[1]._fU0, g_U3890[1]._fU4 ), 0 );
            }
            uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_887() )};
            if ((uVar3._fU0 > -8.40000000) || ( /* F_ISPLAYERINTRIGGERBOX */ sub_50547( l_U1017 )))
            {
                if (NOT (IS_SPHERE_VISIBLE( g_U3890[1]._fU4, 1.00000000, 0 )))
                {
                     /* WRITESCRIPTLOG */ sub_418( "SA", "Shutting 2nd Deck door.", 0 );
                     /* P_CLOSEDOOR */ sub_31793( ref g_U3890[1], 1 );
                }
                if ( /* F_IS_DOOR_CLOSED */ sub_56797( g_U3890[1], 1008981770 ))
                {
                     /* P_SETDOORLOCKED */ sub_32053( ref g_U3890[1], 1 );
                    g_U1230[6] = 1;
                    l_U169 = 9;
                     /* WRITESCRIPTLOG */ sub_418( "GA", "eCheckpointState = CP_FINISHED", 0 );
                }
            }
        }
        break;
        case 9:
        if (g_U834 == 6)
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U169 = 0;
             /* WRITESCRIPTLOG */ sub_418( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
     /* P_HANDLE_KILLBOXES */ sub_57111();
    if (l_U169 != iVar2)
    {
        l_U170 = 1;
    }
    else
    {
        l_U170 = 0;
    }
    return;
}

/* P_HANDLE_SP_CHALLENGES */ void sub_12219()
{
    switch (l_U1038)
    {
        case 0:
         /* WRITESCRIPTLOG */ sub_418( "CCB", "eTakeABow - STATE_CHALLENGE_IDLE", 0 );
        l_U1038 = 1;
        break;
        case 1:
        if (l_U169 >= 8)
        {
            if ( /* F_ISPEDINTRIGGERBOX */ sub_12371(  /* PLAYER_PED_ID */ sub_887(), l_U1039 ))
            {
                if (SCRIPT_VAR_HASH_EXISTS( 256773409 ))
                {
                     /* WRITESCRIPTLOG */ sub_418( "CCB", "The player left the bow of the ship...", 0 );
                    SCRIPT_VAR_HASH_SET_INT( 256773409, 1 );
                    DISPLAYF( "[CCB] ### The current TakeABow value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 256773409 ) );
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_418( "CCB", "The TakeABow script variable is NOT valid!!!", 0 );
                }
                 /* WRITESCRIPTLOG */ sub_418( "CCB", "eTakeABow - STATE_CHALLENGE_COMPLETE", 0 );
                l_U1038 = 2;
            }
        }
        break;
        case 2: break;
    }
    return;
}

/* F_ISPEDINTRIGGERBOX */ int sub_12371(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_12898()
{
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U170 = 1;
    l_U465 = 0;
    l_U487 = 0;
     /* CREATETIMER */ sub_1300( ref l_U488, 2000, 1, 0 );
     /* CREATETIMER */ sub_1300( ref l_U497, 1500, 1, 0 );
     /* CREATETIMER */ sub_1300( ref l_U506, 1500, 1, 0 );
    l_U515 = 0;
    l_U358 = 0;
    l_U368 = 0;
     /* CREATETIMER */ sub_1300( ref l_U359, 2750, 1, 0 );
    l_U520 = 0;
    l_U614 = 0;
     /* CREATETIMER */ sub_1300( ref l_U615, 10000, 1, 0 );
     /* CREATETIMER */ sub_1300( ref l_U624, 3000, 1, 0 );
    l_U797 = 0;
    l_U759 = 0;
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_13173()
{
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13265( ref l_U370, l_U383, l_U386, -1013219818, 5, 2, 0, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13265( ref l_U393[0], -58.06900000, -0.53700000, 4.30100000, 65446, 572100371, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13265( ref l_U393[1], -58.54400000, 8.12500000, 4.20600000, 65446, -501919160, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13265( ref l_U393[2], -55.82300000, 9.22700000, 4.37600000, 65446, 567034152, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13265( ref l_U393[3], -39.30000000, -4.52700000, 3.75000000, 90, 306406384, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13265( ref l_U393[4], -32.84100000, 12.54600000, 4.15000000, 90, -333100553, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13265( ref l_U525[0], -11.12809000, 2.46557700, 5.25403100, 78.72780000, -118136450, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13265( ref l_U525[1], -9.71000000, 7.13000000, 5.30000000, 111.14550000, 548293019, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13265( ref l_U525[2], -10.22000000, 0.31000000, 5.25000000, 84.93000000, -985197946, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13265( ref l_U762, -12.52352000, 9.64017600, 9.06201400, 90.00000000, 227068575, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_13265( ref l_U799, -9.71000000, 8.63000000, 5.30000000, 84.93000000, 788843665, 7, 3, 2, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U466, "Trigger_Spawn_Grapple_Rebels", -42.73000000, 5.37000000, 2.08000000, 5.29000000, 7.73000000, 2.42000000, 0.00000000, 0.00000000, -34.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U572, "Trigger_Spawn_Bar_RebelsL", -49.08000000, 7.47000000, 3.46000000, 2.70000000, 3.44000000, 2.42000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U593, "Trigger_Spawn_Bar_RebelsR", -49.08000000, -0.16000000, 3.46000000, 2.70000000, 3.44000000, 2.42000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U812[0], "Trigger_SpawnArea01", -16.99000000, 3.91000000, 5.04000000, 4.02000000, 2.77000000, 3.20000000, 0.00088825, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U812[1], "Trigger_SpawnArea02", -11.82000000, 3.87000000, 5.04000000, 6.48000000, 10.26000000, 3.20000000, 0.00088825, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERREGION */ sub_14345( ref l_U855, ref l_U812 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U633, "Trigger_Entered_Bar", -27.69000000, 3.92000000, 5.04000000, 3.69000000, 12.07000000, 3.20000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U996, "Trigger_Start_3rdDeck", -33.06000000, 3.92000000, 4.97000000, 12.00000000, 24.42000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U1017, "tb_2D_TopDeckArea", 2.28000000, 11.07000000, 4.77000000, 27.62000000, 3.26000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U776, "tb2ND_RooftopRebel", -20.63000000, 3.98000000, 8.01000000, 20.23000000, 13.62000000, 3.20000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U174[0], "tb2ND_MaxUpstairsLeft", -49.08000000, 7.47000000, 3.46000000, 2.70000000, 3.44000000, 2.42000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U174[1], "tb2ND_MaxUpstairsRight", -49.08000000, -0.16000000, 3.46000000, 2.70000000, 3.44000000, 2.42000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERREGION */ sub_14345( ref l_U217, ref l_U174 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U654, "tbKillBox01", -36.49000000, 14.30000000, -0.50000000, 31.78000000, 6.42000000, 6.68000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U675, "tbKillBox02", -36.51000000, -7.04000000, -0.50000000, 31.78000000, 6.42000000, 6.68000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U696, "tbKillBox03", -62.30000000, -1.80000000, -0.50000000, 31.78000000, 6.42000000, 6.68000000, 0.00000000, 0.00000000, -20.74000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U717, "tbKillBox04", -63.47000000, 9.38000000, -0.50000000, 31.78000000, 6.42000000, 6.68000000, 0.00000000, 0.00000000, 19.14000000, 1 );
     /* P_CREATETETHERBOX */ sub_15491( ref l_U516, "DeckTether", -37.65000000, 3.98000000, 5.14000000, 20.55000000, 13.23000000, 3.20000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_15491( ref l_U519, "GrappleTether", -54.14000000, 3.79000000, 4.04000000, 7.15000000, 7.90000000, 2.42000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_15491( ref l_U517, "LeftStairsTether", -49.31000000, 7.82000000, 4.04000000, 3.98000000, 2.30000000, 2.42000000, 0.00000000, 0.00000000, 16.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_15491( ref l_U518, "RightStairsTether", -49.31000000, -0.23000000, 4.04000000, 3.90000000, 2.30000000, 2.42000000, 0.00000000, 0.00000000, -14.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_15491( ref l_U571, "BarTether", -23.97000000, 3.98000000, 5.04000000, 7.23000000, 9.62000000, 3.20000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_15491( ref l_U775, "RoofTether", -27.63000000, 3.98000000, 8.01000000, 7.23000000, 9.62000000, 3.20000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_13265(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_13904(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETRIGGERREGION */ void sub_14345(int iParam0, unknown uParam1)
{
    int iVar4;
    int I;

    iVar4 = (uParam1^);
    if (iVar4 > 6)
    {
         /* WRITESCRIPTLOG */ sub_418( "[SA]", "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
        SCRIPT_ASSERT( "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
    }
    for ( I = 0; I < iVar4; I++ )
    {
        iParam0->_fU0[I] = {(uParam1^)[I]};
    }
    iParam0->_fU508 = iVar4;
    iParam0->_fU548 = 0;
    iParam0->_fU552 = 0;
    iParam0->_fU556 = 0;
    iParam0->_fU560 = 0;
    return;
}

/* P_CREATETETHERBOX */ void sub_15491(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_INITIALIZE_SP_CHALLENGES */ void sub_15970()
{
     /* WRITESCRIPTLOG */ sub_418( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
    l_U1038 = 0;
     /* P_CREATETRIGGERBOX */ sub_13904( ref l_U1039, "TRIGGER_TAKE_A_BOW", -54.97000000, 3.90000000, 2.95000000, 20.00000000, 12.00000000, 5.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    if (NOT (SCRIPT_VAR_HASH_EXISTS( 256773409 )))
    {
         /* WRITESCRIPTLOG */ sub_418( "CCB", "Creating the TakeABow script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( 256773409 );
        DISPLAYF( "[CCB] ### The current TakeABow value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 256773409 ) );
        if (SCRIPT_VAR_HASH_EXISTS( 256773409 ))
        {
             /* WRITESCRIPTLOG */ sub_418( "CCB", "The TakeABow script variable was successfully created...", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_418( "CCB", "The TakeABow script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_418( "CCB", "The TakeABow script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( 256773409, 0 );
        DISPLAYF( "[CCB] ### The current TakeABow value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 256773409 ) );
    }
    return;
}

/* P_REQUEST_2D_PERSISTENT_ASSETS */ void sub_16744()
{
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_REQUEST_2D_PERSISTENT_ASSETS start", 0 );
     /* P_GLOBAL_LOAD_PISTOL_ANIMS */ sub_16837();
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_20288( ref l_U161, ref g_U1588 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_22367( ref l_U166, ref g_U1829 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_24398( ref g_U3079, ref g_U3026 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_24398( "SCRIPT_MISSION\S_PANA_REPEL_GMED_FWD", ref g_U3026 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "LEVEL_S_PAN_CP_04", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "LEVEL_S_PAN_BOW", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_REQUEST_2D_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_GLOBAL_LOAD_PISTOL_ANIMS */ void sub_16837()
{
     /* WRITESCRIPTLOG */ sub_418( "CR", "P_GLOBAL_LOAD_PISTOL_ANIMS - Start", 0 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "NPC_PSTL_CORE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "NPC_PSTL_COVER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "NPC_PSTL_COVER_ENTER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "NPC_PSTL_COVER_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "NPC_PSTL_DODGE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "NPC_PSTL_FLAVOR", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "NPC_PSTL_FULLBODY", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "NPC_PSTL_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "NPC_PSTL_SEARCH", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "NPC_PSTL_STAIRS", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "NPC_PSTL_REACT", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "AMED_PSTL_PRONE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "PLGE_PSTL_CROUCH", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "PLGE_PSTL_CORE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "PLGE_PSTL_CORE_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "PLGE_PSTL_HANDSIG", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "PLGE_PSTL_ACTIONS", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "PLGE_PSTL_KNEE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "PLGE_PSTL_COVER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "PLGE_PSTL_REACT", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_16944( "PLGE_PSTL_COVER_EXIT", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_418( "CR", "P_GLOBAL_LOAD_PISTOL_ANIMS - End", 0 );
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_16944(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_16996( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_17248( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_16996(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_17248( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_17248( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_17248( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18819( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_17248( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_17248( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_17248(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17310( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_17310(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_18819(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_20288(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_20361( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_20361(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_20428( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20686( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_20428(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20686( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20686( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20686( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18819( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20686( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_20686( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_20686(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17310( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_22367(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_22441( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_22441(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_22495( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22756( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_22495(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22756( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22756( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22756( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18819( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22756( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22756( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_22756(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17310( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_24398(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_24451( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24706( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_24451(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24706( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24706( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24706( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18819( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24706( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24706( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_24706(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17310( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_2D_NONPERSISTENT_ASSETS */ void sub_26452()
{
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_REQUEST_2D_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26560( -396548175, ref g_U1878 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26560( 505353008, ref g_U1878 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26560( 2061552818, ref g_U1878 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26560( 1082972171, ref g_U1878 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26560( 797357567, ref g_U1878 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26560( -890990590, ref g_U1878 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_4", 0 );
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_REQUEST_2D_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_26560(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_26621( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26871( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_26621(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26871( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26871( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26871( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26871( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_18819( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_18819( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26871( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26871( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_26871(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17310( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_29580(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_29977(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_30379(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_30770(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_31184(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* P_CLOSEDOOR */ void sub_31793(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_31819( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_31903( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_31819(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_31903(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORLOCKED */ void sub_32053(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_31819( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_31903( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* HAS_SAVEFILE_LOADED */ int sub_32255(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_418( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_7476( uParam0,  /* PLAYER_PED_ID */ sub_887() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_GLOBAL_CREATE_LOCKS */ void sub_32793(int iParam0, int iParam1)
{
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_GLOBAL_CREATE_LOCKS start", "###" );
     /* CLEANOBJECT */ sub_32878( g_U4167 );
    g_U4167 =  /* CREATEOBJECTNOOFFSET */ sub_32961( g_U1583, g_U4168, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4167 ))
    {
        FREEZE_OBJECT_POSITION( g_U4167, 1 );
        if (iParam0 == 1)
        {
            PLAY_OBJECT_ANIM( g_U4167, "P_LockGate", "pa_doors", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( g_U4167, "P_LockGate", "pa_doors", 1.00000000 );
        }
    }
     /* CLEANOBJECT */ sub_32878( g_U4171 );
    g_U4171 =  /* CREATEOBJECTNOOFFSET */ sub_32961( g_U1583, g_U4172, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U4171 )) == 1)
    {
        FREEZE_OBJECT_POSITION( g_U4171, 1 );
        if (iParam1 == 1)
        {
            PLAY_OBJECT_ANIM( g_U4171, "P_LockGate", "pa_doors", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( g_U4171, "P_LockGate", "pa_doors", 1.00000000 );
        }
    }
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_GLOBAL_CREATE_LOCKS end", "###" );
    return;
}

/* CLEANOBJECT */ void sub_32878(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_32961(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_33094( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* LOADMODEL */ void sub_33094(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_9577( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_CREATE_PICKUPS */ void sub_33868()
{
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_CREATE_PICKUPS start", 0 );
    l_U173 =  /* CREATEPLACEMENT */ sub_33977( -4072149, -12.90000000, 6.30000000, 5.88000000, 0.00000000, 0.00000000, 70.00000000, 1, 1, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U173, ref g_U3287 );
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_CREATE_PICKUPS end", 0 );
    return;
}

/* CREATEPLACEMENT */ void sub_33977(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* F_HANDLE_PED_ARRAY_SPAWN */ int sub_34223(unknown uParam0, unknown uParam1, int iParam2, boolean bParam3, boolean bParam4, int iParam5, unknown uParam6)
{
    int iVar9;
    int iVar10;
    int Result;

    iVar9 =  /* F_GET_NUM_SPAWNED_PED_IN_ARRAY */ sub_34264( uParam0, uParam1 );
    if (iParam2 == -1)
    {
        iVar10 = (uParam0^);
    }
    else
    {
        iVar10 = iParam2;
    }
    if (iVar9 < iVar10)
    {
        if ((uParam1^)[iVar9]._fU16 == 0)
        {
            SCRIPT_ASSERT( "Invalid Ped Struct!  No Model Defined! Aborting Ped Spawn", 0 );
             /* WRITESCRIPTLOG */ sub_418( "MF", "Invalid Ped Struct!  No Model Defined! Aborting Ped Spawn", 0 );
            PRINTSTRING( "INVALID SPAWN INDEX: " );
             /* WRITE_INT */ sub_34627( iVar9 );
            return 0;
        }
        if (NOT (DOES_PED_EXIST( (uParam0^)[iVar9] )))
        {
             /* LOADMODEL */ sub_33094( (uParam1^)[iVar9]._fU16, uParam6 );
            (uParam0^)[iVar9] =  /* CREATEPED */ sub_34722( ref (uParam1^)[iVar9] );
            if (NOT bParam4)
            {
                SET_PED_VISIBLE( (uParam0^)[iVar9], bParam4 );
                 /* WRITE_STRING */ sub_9577( "SPAWNING INVISIBLE PED!!!" );
            }
            if (iParam5 == 1)
            {
                 /* P_DEACTIVATEPED */ sub_35513( (uParam0^)[iVar9] );
                 /* WRITE_STRING */ sub_9577( "Deactivating Ped..." );
            }
        }
    }
    if (bParam3)
    {
        if (iVar9 == (iVar10 - 1))
        {
             /* WRITESCRIPTLOG */ sub_418( "MF", "F_HANDLE_PED_ARRAY_SPAWN: Returning true Once.  If you see this looping, you likely have unitialized ped model data in your pedstruct array.", 0 );
            Result = 1;
        }
        return Result;
    }
    else if (iVar9 >= iVar10)
    {
        return 1;
    }
    return 0;
}

/* F_GET_NUM_SPAWNED_PED_IN_ARRAY */ void sub_34264(unknown uParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = (uParam1^);
    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (DOES_PED_EXIST( (uParam0^)[I] )))
        {
            if ((uParam1^)[I]._fU16 != 0)
            {
                if (I < Result)
                {
                    Result = I;
                }
            }
        }
    }
    return Result;
}

/* WRITE_INT */ void sub_34627(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* CREATEPED */ void sub_34722(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_33094( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_35213( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_35314( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_35213(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_35314(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_35513(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* P_2ND_GRAPPLE_REBELS_SETUP */ void sub_35875()
{
    int I;

     /* P_SETUP_AI_GROUP */ sub_35924( ref l_U459, 1.00000000, 0 );
     /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_36328( ref l_U387, "Rappeller - " );
    for ( I = 0; I < l_U387; I++ )
    {
        if ( /* ISPEDVALID */ sub_36484( l_U387[I], 0 ))
        {
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_36618( l_U387[I], ref l_U459 );
            SET_PED_ALERTNESS( l_U387[I], 3 );
            SET_PED_DIES_INSTANTLY_IN_WATER( l_U387[I], 1 );
             /* P_2ND_TETHER_PED_TO_DECK_BAR_AND_BOW */ sub_37041( ref l_U387[I] );
        }
    }
    if ( /* ISPEDVALID */ sub_36484( l_U387[0], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U387[0], ref g_U1488 );
        SET_PED_COMBAT_RANGE_MIN( l_U387[0], 7 );
        SET_PED_COMBAT_RANGE_MAX( l_U387[0], 15 );
        SET_PED_COMBAT_MOVEMENT( l_U387[0], 1 );
         /* F_GIVEPEDWEAPON */ sub_9968( l_U387[0], -612753081, 25000, 0, 0 );
        SET_PED_AS_ONE_SHOT_KILL( l_U387[0], 1 );
    }
    if ( /* ISPEDVALID */ sub_36484( l_U387[1], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U387[1], ref g_U1504 );
        SET_PED_COMBAT_RANGE_MIN( l_U387[1], 5 );
        SET_PED_COMBAT_RANGE_MAX( l_U387[1], 15 );
        SET_PED_COMBAT_MOVEMENT( l_U387[1], 1 );
         /* F_GIVEPEDWEAPON */ sub_9968( l_U387[1], -1404433099, 25000, 0, 0 );
        SET_PED_AS_ONE_SHOT_KILL( l_U387[1], 1 );
    }
    if ( /* ISPEDVALID */ sub_36484( l_U387[2], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U387[2], ref g_U1480 );
        SET_PED_COMBAT_RANGE_MIN( l_U387[2], 4 );
        SET_PED_COMBAT_RANGE_MAX( l_U387[2], 6 );
        SET_PED_COMBAT_MOVEMENT( l_U387[2], 2 );
         /* F_GIVEPEDWEAPON */ sub_9968( l_U387[2], -1404433099, 25000, 0, 0 );
        SET_PED_AS_ONE_SHOT_KILL( l_U387[2], 1 );
    }
    if ( /* ISPEDVALID */ sub_36484( l_U387[3], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U387[3], ref g_U1488 );
        SET_PED_COMBAT_RANGE_MIN( l_U387[3], 7 );
        SET_PED_COMBAT_RANGE_MAX( l_U387[3], 15 );
         /* F_GIVEPEDWEAPON */ sub_9968( l_U387[3], -612753081, 25000, 0, 0 );
        SET_PED_AS_ONE_SHOT_KILL( l_U387[3], 1 );
        SET_PED_PRIMARY_LOOKAT( l_U387[3],  /* PLAYER_PED_ID */ sub_887() );
    }
    if ( /* ISPEDVALID */ sub_36484( l_U387[4], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U387[4], ref g_U1488 );
        SET_PED_COMBAT_RANGE_MIN( l_U387[4], 7 );
        SET_PED_COMBAT_RANGE_MAX( l_U387[4], 15 );
         /* F_GIVEPEDWEAPON */ sub_9968( l_U387[4], -1404433099, 25000, 0, 0 );
        SET_PED_AS_ONE_SHOT_KILL( l_U387[4], 1 );
    }
    ISEQ_REGISTER_ENTITY( -396548175, "s_pan_rappel_gmed1", l_U387[0], 0 );
    ISEQ_REGISTER_ENTITY( 505353008, "s_pan_rappel_gmed2", l_U387[1], 0 );
    ISEQ_REGISTER_ENTITY( 2061552818, "s_pan_rappel_gmed3", l_U387[2], 0 );
    ISEQ_REGISTER_ENTITY( 1082972171, "s_pan_rappel_gmed1", l_U387[3], 0 );
    ISEQ_REGISTER_ENTITY( 797357567, "s_pan_rappel_gmed1", l_U387[4], 0 );
    ISEQ_START( -396548175 );
    ISEQ_START( 505353008 );
    ISEQ_START( 2061552818 );
    ISEQ_START( 1082972171 );
    ISEQ_START( 797357567 );
     /* MAL_TELEPORTPED */ sub_7129( l_U387[0], l_U393[0]._fU0, l_U393[0]._fU12 );
     /* MAL_TELEPORTPED */ sub_7129( l_U387[1], l_U393[1]._fU0, l_U393[1]._fU12 );
     /* MAL_TELEPORTPED */ sub_7129( l_U387[2], l_U393[2]._fU0, l_U393[2]._fU12 );
     /* MAL_TELEPORTPED */ sub_7129( l_U387[3], l_U393[3]._fU0, l_U393[3]._fU12 );
     /* MAL_TELEPORTPED */ sub_7129( l_U387[4], l_U393[4]._fU0, l_U393[4]._fU12 );
     /* P_DEACTIVATEPEDARRAY */ sub_38331( ref l_U387 );
    return;
}

/* P_SETUP_AI_GROUP */ void sub_35924(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_36328(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* ISPEDVALID */ void sub_36484(unknown uParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((DOES_PED_EXIST( uParam0 )) == 1)
    {
        Result = 1;
    }
    else
    {
        Result = 0;
    }
    if (Result == 1)
    {
        if ((IS_PED_DEAD( uParam0 )) == 1)
        {
            if (iParam1 == 1)
            {
                Result = 1;
            }
            else
            {
                Result = 0;
            }
        }
        else
        {
            Result = 1;
        }
    }
    return Result;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_36618(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_9577( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_35924( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_35924( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_2ND_TETHER_PED_TO_DECK_BAR_AND_BOW */ void sub_37041(unknown uParam0)
{
     /* P_TETHERPED */ sub_37098( ref l_U571, (uParam0^), 1 );
     /* P_TETHERPED */ sub_37098( ref l_U516, (uParam0^), 1 );
     /* P_TETHERPED */ sub_37098( ref l_U517, (uParam0^), 1 );
     /* P_TETHERPED */ sub_37098( ref l_U518, (uParam0^), 1 );
     /* P_TETHERPED */ sub_37098( ref l_U519, (uParam0^), 1 );
    return;
}

/* P_TETHERPED */ void sub_37098(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_DEACTIVATEPEDARRAY */ void sub_38331(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_35513( (uParam0^)[I] );
    }
    return;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_38563(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_418( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_418( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_10742( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_38854( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_39331( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_39331( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_39591( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_39331( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_39591( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_39591( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_39331( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_39591( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_39591( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_39591( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_39331( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_39591( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_39591( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_39591( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_39591( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_41171( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_418( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_38854(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7757( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_418( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_418( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_39331(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_39591(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_41171(int iParam0)
{
     /* WRITE_STRING */ sub_9577( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_41259( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_41336( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_41336( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_41336( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_41336( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_41336( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_42165( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU52 );
     /* WRITE_STRING */ sub_9577( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU96 );
     /* WRITE_STRING */ sub_9577( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU100 );
     /* WRITE_STRING */ sub_9577( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU104 );
     /* WRITE_STRING */ sub_9577( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU108 );
     /* WRITE_STRING */ sub_9577( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU112 );
     /* WRITE_STRING */ sub_9577( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU116 );
     /* WRITE_STRING */ sub_9577( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU120 );
     /* WRITE_STRING */ sub_9577( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU124 );
     /* WRITE_STRING */ sub_9577( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU128 );
     /* WRITE_STRING */ sub_9577( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_34627( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_34627( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_34627( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_41259(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_41336(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_42165(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_GLOBAL_LOCK_2_GATES_OPEN */ void sub_43120()
{
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_GLOBAL_LOCK_2_GATES_OPEN: START", 0 );
    if (DOES_OBJECT_EXIST( g_U4171 ))
    {
        PLAY_OBJECT_ANIM( g_U4171, "P_LockGate", "pa_doors", 0.00000000, 0, 1 );
        SET_OBJECT_ANIM_CURRENT_TIME( g_U4171, "P_LockGate", "pa_doors", 0.00000000 );
        SET_OBJECT_ANIM_SPEED( g_U4171, "P_LockGate", "pa_doors", 1.00000000 );
        START_PARTICLE_FX_NON_LOOPED_ON_OBJECT( "Pana_Water_LockGate_01_S", g_U4171, 0.00000000, 0.00000000, -1.39000000, 0.00000000, 0.00000000, 0.00000000, 1.00000000 );
         /* P_SAFE_STOP_SOUND */ sub_4786( g_U4175, 0 );
         /* P_SAFE_RELEASE_SOUND_ID */ sub_4969( ref g_U4175 );
        g_U4175 = GET_SOUND_ID();
        PLAY_SOUND_FROM_OBJECT( g_U4175, "CANAL_LOCK", g_U4171 );
        g_U4177 = 1;
    }
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_GLOBAL_LOCK_2_GATES_OPEN: END", 0 );
    return;
}

/* P_START_SP_CHALLENGES */ void sub_43554()
{
     /* WRITESCRIPTLOG */ sub_418( "CCB", "P_START_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_418( "CCB", "Starting the Panama_Second_Deck context...", 0 );
    START_CONTEXT( "Panama_Second_Deck" );
    return;
}

/* P_CREATE_DEAD_HOTTUB_BODY */ void sub_43785()
{
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_CREATE_DEAD_HOTTUB_BODY - START", 0 );
    l_U369 =  /* CREATEPED */ sub_34722( ref l_U370 );
    if ( /* ISPEDVALID */ sub_36484( l_U369, 0 ))
    {
        ISEQ_REGISTER_ENTITY( -890990590, "DeadGirl", l_U369, 0 );
        ISEQ_START( -890990590 );
        ENABLE_PED_PAIN( l_U369, 0 );
        SET_PED_INVINCIBLE( l_U369, 1 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U369, 1 );
        FREEZE_PED_POSITION( l_U369, 1 );
        SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( l_U369, 1 );
        STOP_PED_SPEAKING( l_U369, 1 );
        SET_PED_CAN_BE_TARGETTED( l_U369, 0 );
        SET_FREEZE_PED_AIM( l_U369, 1 );
        SET_PED_COLLISION( l_U369, 0 );
        SET_PED_AIM_LOCKONABLE( l_U369, 0 );
        SET_PED_BLOODSPRAY_ENABLE( l_U369, 0 );
    }
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_CREATE_DEAD_HOTTUB_BODY - END", 0 );
    return;
}

/* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ void sub_44138()
{
     /* WRITESCRIPTLOG */ sub_418( "CR", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - START", 0 );
    g_U4062 = GET_PAYNEKILLER_AMT();
     /* WRITESCRIPTLOG */ sub_418( "CR", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - END", 0 );
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_44334(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_44400( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_44400(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_6473( uParam0 );
            }
        }
    }
    return;
}

/* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ void sub_44583()
{
    if (NOT ( /* HASTIMERBEENACTIVATED */ sub_3262( ref g_U4052 )))
    {
         /* P_CREATE_AND_START_TIMER */ sub_44653( ref g_U4052, g_U4061 );
    }
    if (((g_U4052._fU16) || ( /* ISTIMERDONE */ sub_3414( ref g_U4052 ))) AND ( /* F_GBL_HAS_PLAYER_JUST_ACQUIRED_PAIN_KILLERS */ sub_44716()))
    {
         /* WRITESCRIPTLOG */ sub_418( "MF", "Playing Speech: SPAN_MXFNDS1", 0 );
         /* P_SPEECH_PLAY_MONOLOGUE */ sub_44997( ref g_U4063, ref g_U1246 );
         /* RESETTIMER */ sub_3990( ref g_U4052 );
    }
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_44653(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_1300( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_1783( uParam0 );
    return;
}

/* F_GBL_HAS_PLAYER_JUST_ACQUIRED_PAIN_KILLERS */ int sub_44716()
{
    if (GET_PAYNEKILLER_AMT() > g_U4062)
    {
         /* WRITESCRIPTLOG */ sub_418( "CR", "Player picked up Payne Killers!", 0 );
        PRINTSTRING( "HAD: " );
         /* WRITE_INT */ sub_34627( g_U4062 );
        PRINTSTRING( "NOW: " );
         /* WRITE_INT */ sub_34627( GET_PAYNEKILLER_AMT() );
        g_U4062 = GET_PAYNEKILLER_AMT();
        return 1;
    }
    g_U4062 = GET_PAYNEKILLER_AMT();
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_44997(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_45035( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45144( 0,  /* PLAYER_PED_ID */ sub_887(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45144( 1,  /* PLAYER_PED_ID */ sub_887(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_45397( uParam0, uParam1, 8, 1 );
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_45035(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_45144(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_45397(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_45442( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_45442(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_45529( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_45529(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_45581( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_46099( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_45581(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_46099(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_ASSIGN_BULLET_CAMS */ void sub_46320()
{
    if ((IS_PED_DEAD( l_U798 )) AND (( /* F_IS_PED_ARRAY_DEFEATED */ sub_46431( ref l_U387, 0 )) AND ( /* F_IS_PED_DEFEATED */ sub_46357( ref l_U761 ))))
    {
         /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_46912( ref l_U521 );
        AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_2", 0 );
    }
    if ((IS_PED_DEAD( l_U798 )) AND (( /* F_IS_PED_ARRAY_DEFEATED */ sub_46431( ref l_U387, 0 )) AND ( /* F_IS_PED_ARRAY_DEFEATED */ sub_46431( ref l_U521, 0 ))))
    {
        if ( /* ISPEDVALID */ sub_36484( l_U761, 0 ))
        {
            SET_PED_CAN_TRIGGER_BULLET_CAM( l_U761, 1 );
            AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_2", 0 );
        }
    }
    if ((IS_PED_DEAD( l_U798 )) AND (( /* F_IS_PED_DEFEATED */ sub_46357( ref l_U761 )) AND ( /* F_IS_PED_ARRAY_DEFEATED */ sub_46431( ref l_U521, 0 ))))
    {
         /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_46912( ref l_U387 );
        AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_2", 0 );
    }
    if (( /* F_IS_PED_DEFEATED */ sub_46357( ref l_U761 )) AND (( /* F_IS_PED_ARRAY_DEFEATED */ sub_46431( ref l_U387, 0 )) AND ( /* F_IS_PED_ARRAY_DEFEATED */ sub_46431( ref l_U521, 0 ))))
    {
        if ( /* ISPEDVALID */ sub_36484( l_U798, 0 ))
        {
            SET_PED_CAN_TRIGGER_BULLET_CAM( l_U798, 1 );
            AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_2", 0 );
        }
    }
    return;
}

/* F_IS_PED_DEFEATED */ int sub_46357(unknown uParam0)
{
    if ((IS_PED_DEAD( (uParam0^) )) AND (DOES_PED_EXIST( (uParam0^) )))
    {
        return 1;
    }
    return 0;
}

/* F_IS_PED_ARRAY_DEFEATED */ int sub_46431(unknown uParam0, boolean bParam1)
{
    if (( /* F_HAS_PED_ARRAY_SPAWNED */ sub_46470( uParam0, 0 )) == 1)
    {
        if (NOT bParam1)
        {
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_46605( uParam0 )) == 0)
            {
                return 1;
            }
        }
        if (bParam1)
        {
            if (( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_46738( uParam0 )) == (uParam0^))
            {
                return 1;
            }
        }
    }
    return 0;
}

/* F_HAS_PED_ARRAY_SPAWNED */ void sub_46470(unknown uParam0, boolean bParam1)
{
    int I;
    int Result;

    Result = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if ((DOES_PED_EXIST( (uParam0^)[I] )) == 1)
        {
            Result = 1;
            if (NOT bParam1)
            {
                return 1;
            }
        }
        else
        {
            Result = 0;
        }
    }
    return Result;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_46605(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ void sub_46738(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            if (IS_PED_DEAD( (uParam0^)[I] ))
            {
                Result++;
            }
        }
    }
    return Result;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_46912(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_46605( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_47488(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_12371(  /* PLAYER_PED_ID */ sub_887(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* P_2ND_GRAPPLE_REBEL_A_CLIMB */ void sub_47623()
{
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_GRAPPLE_REBEL_A_CLIMB: START", 0 );
     /* P_ACTIVATEPED */ sub_47719( l_U387[0] );
     /* MAL_SETACTINT */ sub_47846( l_U387[0], 47, 1000 );
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_GRAPPLE_REBEL_A_CLIMB: END", 0 );
    return;
}

/* P_ACTIVATEPED */ void sub_47719(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* MAL_SETACTINT */ void sub_47846(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        PED_SET_ACTION_INTENTION( uParam0, uParam1, uParam2, l_U52 );
    }
    return;
}

/* P_2ND_GRAPPLE_REBEL_B_CLIMB */ void sub_47968()
{
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_GRAPPLE_REBEL_B_CLIMB: START", 0 );
     /* P_ACTIVATEPED */ sub_47719( l_U387[1] );
     /* MAL_SETACTINT */ sub_47846( l_U387[1], 47, 1000 );
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_GRAPPLE_REBEL_B_CLIMB: START", 0 );
    return;
}

/* P_2ND_GRAPPLE_REBEL_C_CLIMB */ void sub_48184()
{
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_GRAPPLE_REBEL_C_CLIMB: START", 0 );
     /* P_ACTIVATEPED */ sub_47719( l_U387[2] );
     /* MAL_SETACTINT */ sub_47846( l_U387[2], 47, 1000 );
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_GRAPPLE_REBEL_C_CLIMB: END", 0 );
    return;
}

/* P_2ND_GRAPPLE_REBEL_ATTACK */ void sub_48366(unknown uParam0)
{
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_GRAPPLE_REBELS_ATTACK - START", 0 );
    OPEN_SEQUENCE_TASK( ref uVar3 );
    TASK_SHOOT_AT_PED( 0,  /* PLAYER_PED_ID */ sub_887(), 2000, 0, 0, 0, 0 );
    TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_887() );
    CLOSE_SEQUENCE_TASK( uVar3 );
    if (( /* ISPEDVALID */ sub_36484( uParam0, 0 )) == 1)
    {
        TASK_PERFORM_SEQUENCE( uParam0, uVar3 );
    }
    CLEAR_SEQUENCE_TASK( uVar3 );
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_GRAPPLE_REBELS_ATTACK - END", 0 );
    return;
}

/* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ int sub_48641(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (( /* F_IS_PED_AWARE_OF_PED */ sub_48721( ref (uParam0^)[I], uParam1, uParam2, uParam3, uParam4, uParam5, uParam6 )) == 1)
        {
            return 1;
        }
    }
    return 0;
}

/* F_IS_PED_AWARE_OF_PED */ int sub_48721(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, int iParam6)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        if ((uParam3) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 1 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_418( "MF", "ped has SEEN target ped", 0 );
            }
            return 1;
        }
        else if ((uParam4) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 8 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_418( "MF", "ped has BEEN SHOT AT by target ped", 0 );
            }
            return 1;
        }
        else if ((uParam2) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 2 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_418( "MF", "ped has HEARD target ped", 0 );
            }
            return 1;
        }
        else if ((uParam5) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 4 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_418( "MF", "ped has BEEN TOLD ABOUT target ped", 0 );
            }
            return 1;
        };;;;
    }
    return 0;
}

/* P_2ND_GRAPPLE_REBELS_A_B_SPEECH */ void sub_49410()
{
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_GRAPPLE_REBELS_A_B_SPEECH: START", 0 );
     /* KILL_SPEECH */ sub_49511( ref g_U1246, 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_45035( ref g_U1246 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45144( 1, l_U387[0], "M11_REBL_19_Avg", ref g_U1246, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45144( 2, l_U387[1], "M11_REBL_20_Mus", ref g_U1246, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_45397( "SPAN_VIG072A", ref g_U1246, 8, 1 );
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_GRAPPLE_REBELS_A_B_SPEECH: END", 0 );
    return;
}

/* KILL_SPEECH */ void sub_49511(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_49539( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_49539(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* P_2ND_GRAPPLE_REBELS_C_SPEECH */ void sub_49960()
{
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_GRAPPLE_REBELS_A_B_SPEECH: START", 0 );
     /* KILL_SPEECH */ sub_49511( ref g_U1246, 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_45035( ref g_U1246 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45144( 0, l_U387[2], "M11_REBL_18_Mus", ref g_U1246, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45144( 1,  /* PLAYER_PED_ID */ sub_887(), "MAX", ref g_U1246, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_45397( "SPAN_VIG071A", ref g_U1246, 8, 1 );
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_GRAPPLE_REBELS_A_B_SPEECH: END", 0 );
    return;
}

/* MAL_ISACTINTCOMPLETED */ int sub_50230(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (( /* MAL_GETACTINTSTATUS */ sub_50269( (uParam0^), uParam1 )) == 1)
    {
        if (bParam2)
        {
             /* MAL_FINISHACTINT */ sub_50357( uParam0, uParam1 );
        }
        return 1;
    }
    return 0;
}

/* MAL_GETACTINTSTATUS */ int sub_50269(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return PED_GET_ACTION_INTENTION_STATUS( uParam0, uParam1 );
    }
    return 0;
}

/* MAL_FINISHACTINT */ void sub_50357(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        PED_FINISH_ACTION_INTENTION( (uParam0^), uParam1 );
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_50547(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_12371(  /* PLAYER_PED_ID */ sub_887(), uParam0 );
}

/* P_2ND_START_GRAPPLE_REBELS_D_E */ void sub_50632()
{
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_2ND_START_GRAPPLE_REBELS_D_E start", 0 );
     /* P_ACTIVATEPED */ sub_47719( l_U387[3] );
     /* MAL_SETACTINT */ sub_47846( l_U387[3], 47, 1000 );
     /* P_ACTIVATEPED */ sub_47719( l_U387[4] );
     /* MAL_SETACTINT */ sub_47846( l_U387[4], 47, 1000 );
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_2ND_START_GRAPPLE_REBELS_D_E end", 0 );
    return;
}

/* P_2ND_HANDLE_GRAPPLE_REBEL_D_E */ void sub_50856()
{
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() )))
    {
        if (NOT (IS_PED_DEAD( l_U387[3] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U387[3], 48 )) == 3)
            {
                 /* WRITESCRIPTLOG */ sub_418( "GA", "Repel D combat player", 0 );
                SET_PED_AS_ONE_SHOT_KILL( l_U387[3], 0 );
                REGISTER_TARGET( l_U387[3],  /* PLAYER_PED_ID */ sub_887() );
                TASK_SHOOT_AT_PED( l_U387[3],  /* PLAYER_PED_ID */ sub_887(), 2000, 0, 0, 0, 0 );
                PED_FINISH_ACTION_INTENTION( l_U387[3], 48 );
            }
        }
        if (NOT (IS_PED_DEAD( l_U387[4] )))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U387[4], 48 )) == 3)
            {
                 /* WRITESCRIPTLOG */ sub_418( "GA", "Repel E combat player", 0 );
                SET_PED_AS_ONE_SHOT_KILL( l_U387[4], 0 );
                REGISTER_TARGET( l_U387[4],  /* PLAYER_PED_ID */ sub_887() );
                TASK_SHOOT_AT_PED( l_U387[4],  /* PLAYER_PED_ID */ sub_887(), 2000, 0, 0, 0, 0 );
                PED_FINISH_ACTION_INTENTION( l_U387[4], 48 );
            }
        }
    }
    return;
}

/* F_ISPLAYERINTRIGGERREGIONFIRSTTIME */ void sub_51254(int iParam0, unknown uParam1)
{
    if (iParam0->_fU548)
    {
        return 0;
    }
    else
    {
        iParam0->_fU548 =  /* F_ISPLAYERINTRIGGERREGION */ sub_51326( iParam0, uParam1 );
    }
    return iParam0->_fU548;
}

/* F_ISPLAYERINTRIGGERREGION */ void sub_51326(int iParam0, unknown uParam1)
{
    int Result;
    int I;
    int J;

    Result = 0;
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_887() )))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            if ( /* F_ISPLAYERINTRIGGERBOX */ sub_50547( iParam0->_fU0[I] ))
            {
                Result = 1;
            }
        }
    }
    if ((uParam1) AND (Result))
    {
        for ( J = 0; J < iParam0->_fU508; J++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[J]._fU0, 0 );
        }
    }
    iParam0->_fU548 = 1;
    return Result;
}

/* P_2ND_ROOFTOP_REBEL_START */ void sub_51826()
{
    unknown uVar2;

     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_ROOFTOP_REBEL_START: START", 0 );
    l_U761 =  /* CREATEPED */ sub_34722( ref l_U762 );
    OPEN_SEQUENCE_TASK( ref uVar2 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
    TASK_FOLLOW_NAV_MESH_TO_COORD( 0, -24.69212000, 4.05878800, 8.88159800, 3, 20000, 1048576000, 0, 0 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_887() );
    CLOSE_SEQUENCE_TASK( uVar2 );
    if ( /* ISPEDVALID */ sub_36484( l_U761, 0 ))
    {
         /* F_GIVEPEDWEAPON */ sub_9968( l_U761, -612753081, 25000, 0, 0 );
        SET_PED_ALERTNESS( l_U761, 3 );
        SET_PED_AI_TEMPLATE( l_U761, ref g_U1480 );
        SET_PED_COMBAT_RANGE_MIN( l_U761, 7 );
        SET_PED_COMBAT_RANGE_MAX( l_U761, 40 );
        SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U761, 1 );
         /* P_TETHERPED */ sub_37098( ref l_U775, l_U761, 1 );
        TASK_PERFORM_SEQUENCE( l_U761, uVar2 );
    }
    CLEAR_SEQUENCE_TASK( uVar2 );
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_ROOFTOP_REBEL_START: END", 0 );
    return;
}

/* P_2ND_BAR_REBELS_SETUP */ void sub_52242()
{
    int I;

     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_BAR_REBELS_SETUP: START", 0 );
     /* P_SETUP_AI_GROUP */ sub_35924( ref l_U565, 1.00000000, 0 );
     /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_36328( ref l_U521, "pi2ND_BarRebels" );
    for ( I = 0; I < l_U521; I++ )
    {
        if ( /* ISPEDVALID */ sub_36484( l_U521[I], 0 ))
        {
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_36618( l_U521[I], ref l_U565 );
            SET_PED_ALERTNESS( l_U521[I], 3 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U521[I], 1 );
            if (( /* ISPEDVALID */ sub_36484(  /* PLAYER_PED_ID */ sub_887(), 0 )) == 1)
            {
                REGISTER_TARGET( l_U521[I],  /* PLAYER_PED_ID */ sub_887() );
            }
            SET_ROOM_FOR_PED_BY_NAME( l_U521[I], ref g_U3287 );
            REGISTER_TARGET( l_U521[I],  /* PLAYER_PED_ID */ sub_887() );
        }
    }
    if ( /* ISPEDVALID */ sub_36484( l_U521[0], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U521[0], ref g_U1488 );
        SET_PED_COMBAT_RANGE_MIN( l_U521[0], 10 );
        SET_PED_COMBAT_RANGE_MAX( l_U521[0], 15 );
         /* F_GIVEPEDWEAPON */ sub_9968( l_U521[0], -612753081, 25000, 0, 0 );
    }
    if ( /* ISPEDVALID */ sub_36484( l_U521[1], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U521[1], ref g_U1472 );
        SET_PED_COMBAT_RANGE_MIN( l_U521[1], 6 );
        SET_PED_COMBAT_RANGE_MAX( l_U521[1], 17 );
         /* F_GIVEPEDWEAPON */ sub_9968( l_U521[1], -612753081, 25000, 0, 0 );
         /* P_TETHERPED */ sub_37098( ref l_U571, l_U521[1], 3 );
        SET_PED_FREEZE_PROCESSING( l_U521[1], 1 );
    }
    if ( /* ISPEDVALID */ sub_36484( l_U521[2], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U521[2], ref g_U1472 );
        SET_PED_COMBAT_RANGE_MIN( l_U521[2], 5 );
        SET_PED_COMBAT_RANGE_MAX( l_U521[2], 17 );
         /* F_GIVEPEDWEAPON */ sub_9968( l_U521[2], -612753081, 25000, 0, 0 );
         /* P_TETHERPED */ sub_37098( ref l_U571, l_U521[2], 1 );
        SET_PED_FREEZE_PROCESSING( l_U521[2], 1 );
    }
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_BAR_REBELS_SETUP: END", 0 );
    return;
}

/* P_2ND_BAR_REBELS_FIRST_WAVE_ATTACK */ void sub_52946()
{
    unknown uVar2;
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_BAR_REBELS_FIRST_WAVE_ATTACK: START", 0 );
    OPEN_SEQUENCE_TASK( ref uVar3 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
    TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, -31.58000000, 8.40000000, 5.30000000,  /* PLAYER_PED_ID */ sub_887(), 3, 1, 1056964608, 0, 1, 0 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_887() );
    CLOSE_SEQUENCE_TASK( uVar3 );
    if ( /* ISPEDVALID */ sub_36484( l_U521[0], 0 ))
    {
        TASK_PERFORM_SEQUENCE( l_U521[0], uVar3 );
    }
    CLEAR_SEQUENCE_TASK( uVar3 );
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_BAR_REBELS_FIRST_WAVE_ATTACK: END", 0 );
    return;
}

/* P_2ND_BAR_FIGHT_HAS_STARTED */ void sub_53324()
{
    int I;

     /* WRITESCRIPTLOG */ sub_418( "GA", "P_2ND_BAR_FIGHT_HAS_STARTED start", 0 );
    for ( I = 0; I < l_U521; I++ )
    {
         /* P_REMOVEALLTETHERSFROMPED */ sub_53436( l_U521[I] );
    }
     /* P_2ND_TETHER_PED_TO_BAR_AND_DECK */ sub_53537( ref l_U521[0] );
     /* P_2ND_TETHER_PED_TO_BAR_AND_DECK */ sub_53537( ref l_U521[1] );
     /* P_TETHERPED */ sub_37098( ref l_U571, l_U521[2], 1 );
     /* WRITESCRIPTLOG */ sub_418( "GA", "P_2ND_BAR_FIGHT_HAS_STARTED end", 0 );
    return;
}

/* P_REMOVEALLTETHERSFROMPED */ void sub_53436(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        RESET_PED_TETHERING( uParam0 );
    }
    return;
}

/* P_2ND_TETHER_PED_TO_BAR_AND_DECK */ void sub_53537(unknown uParam0)
{
     /* P_TETHERPED */ sub_37098( ref l_U571, (uParam0^), 1 );
     /* P_TETHERPED */ sub_37098( ref l_U516, (uParam0^), 1 );
    return;
}

/* P_2ND_BAR_REBELS_SECOND_WAVE_ATTACK */ void sub_53719()
{
    int I;
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_BAR_REBELS_SECOND_WAVE_ATTACK: START", 0 );
    for ( I = 1; I <= (l_U521 - 1); I++ )
    {
        SET_PED_FREEZE_PROCESSING( l_U521[I], 0 );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        if (I == 1)
        {
            TASK_FOLLOW_NAV_MESH_TO_COORD( 0, -25.00000000, 3.01000000, 5.30000000, 3, 20000, 1048576000, 0, 0 );
        }
        else if (I == 2)
        {
            TASK_PAUSE( 0, 200 );
            TASK_FOLLOW_NAV_MESH_TO_COORD( 0, -20.72000000, 3.99000000, 5.30000000, 3, 20000, 1048576000, 0, 0 );
        }
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_887() );
        CLOSE_SEQUENCE_TASK( uVar3 );
        if ( /* ISPEDVALID */ sub_36484( l_U521[I], 0 ))
        {
            TASK_PERFORM_SEQUENCE( l_U521[I], uVar3 );
        }
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_BAR_REBELS_SECOND_WAVE_ATTACK: END", 0 );
    return;
}

/* F_2ND_SHOULD_SPAWN_REINFORCEMENTS */ int sub_54136()
{
    int iVar2;

    iVar2 = ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_46605( ref l_U521 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_46605( ref l_U387 ));
    if (NOT ( /* F_IS_PED_DEFEATED */ sub_46357( ref l_U761 )))
    {
        iVar2++;
    }
    if (iVar2 > 1)
    {
        return 0;
    }
    if ( /* F_ISPLAYERINTRIGGERREGION */ sub_51326( ref l_U855, 0 ))
    {
        return 0;
    }
    return 1;
}

/* P_2ND_BAR_SPAWN_REINFORCEMENTS */ void sub_54277()
{
    unknown uVar2;
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_418( "SA", "P_2ND_BAR_SPAWN_REINFORCEMENTS start", 0 );
    l_U798 =  /* CREATEPED */ sub_34722( ref l_U799 );
    if ( /* ISPEDVALID */ sub_36484( l_U798, 0 ))
    {
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_36618( l_U798, ref l_U565 );
        SET_PED_ALERTNESS( l_U798, 3 );
        SET_ROOM_FOR_PED_BY_NAME( l_U798, ref g_U3287 );
        REGISTER_TARGET( l_U798,  /* PLAYER_PED_ID */ sub_887() );
        SET_PED_AI_TEMPLATE( l_U798, ref g_U1472 );
        SET_PED_COMBAT_RANGE_MIN( l_U798, 6 );
        SET_PED_COMBAT_RANGE_MAX( l_U798, 17 );
         /* F_GIVEPEDWEAPON */ sub_9968( l_U798, -1404433099, 25000, 0, 0 );
        if (NOT l_U633._fU64)
        {
             /* P_TETHERPED */ sub_37098( ref l_U571, l_U798, 1 );
        }
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, -20.72000000, 3.99000000, 5.30000000,  /* PLAYER_PED_ID */ sub_887(), 3, 1, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_887() );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( l_U798, uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
     /* WRITESCRIPTLOG */ sub_418( "SA", "P_2ND_BAR_SPAWN_REINFORCEMENTS end", 0 );
    return;
}

/* P_2ND_CLEAR_BULLET_CAM_FROM_REBELS */ void sub_54721()
{
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_CLEAR_BULLET_CAM_FROM_REBELS - START", 0 );
     /* P_REMOVE_BULLET_CAM_FROM_PED_ARRAY */ sub_54828( ref l_U521 );
     /* P_REMOVE_BULLET_CAM_FROM_PED_ARRAY */ sub_54828( ref l_U387 );
    if ( /* ISPEDVALID */ sub_36484( l_U761, 0 ))
    {
        if (GET_PED_CAN_TRIGGER_BULLET_CAM( l_U761 ))
        {
            SET_PED_CAN_TRIGGER_BULLET_CAM( l_U761, 0 );
        }
    }
     /* WRITESCRIPTLOG */ sub_418( "MF", "P_2ND_CLEAR_BULLET_CAM_FROM_REBELS - END", 0 );
    return;
}

/* P_REMOVE_BULLET_CAM_FROM_PED_ARRAY */ void sub_54828(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 0 );
            PRINTSTRING( "CLEARING BULLET CAM FROM PED:" );
             /* WRITE_INT */ sub_34627( I );
        }
    }
    return;
}

/* F_ISPEDINTRIGGERBOXFIRSTTIME */ void sub_55116(int iParam0, unknown uParam1, unknown uParam2)
{
    if (iParam0->_fU68 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU68 =  /* F_ISPEDINTRIGGERBOX */ sub_12371( uParam1, (iParam0^) );
        if ((iParam0->_fU68) AND (uParam2))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU68;
}

/* P_2ND_UNTETHER_BAR_ENEMIES */ void sub_55245()
{
     /* P_REMOVEALLTETHERSFROMPED */ sub_53436( l_U521[2] );
     /* P_2ND_TETHER_PED_TO_BAR_AND_DECK */ sub_53537( ref l_U521[2] );
     /* P_REMOVEALLTETHERSFROMPED */ sub_53436( l_U798 );
     /* P_2ND_TETHER_PED_TO_BAR_AND_DECK */ sub_53537( ref l_U798 );
    return;
}

/* P_START_CHECKPOINT_THREAD */ void sub_55360(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_55457(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5338( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_SETDOORLATCH */ void sub_56356(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_31819( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_31903( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_SETDOORAUTOCLOSE */ void sub_56440(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_31819( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_31903( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* F_IS_DOOR_CLOSED */ int sub_56797(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, float fParam7)
{
    if ((ABSF(  /* F_GETDOOROPENRATIO */ sub_56827( ref uParam0 ) )) < fParam7)
    {
        return 1;
        break;
    }
    return 0;
}

/* F_GETDOOROPENRATIO */ void sub_56827(int iParam0)
{
    int iVar3;
    float Result;

    if (( /* F_DOESDOOREXIST */ sub_31819( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_31903( iParam0 );
    }
    iVar3 = 0;
    Result = 0.00000000;
    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar3, ref Result );
    return Result;
}

/* P_HANDLE_KILLBOXES */ void sub_57111()
{
    if ((( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_55116( ref l_U717,  /* PLAYER_PED_ID */ sub_887(), 0 )) == 1) || ((( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_55116( ref l_U696,  /* PLAYER_PED_ID */ sub_887(), 0 )) == 1) || ((( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_55116( ref l_U675,  /* PLAYER_PED_ID */ sub_887(), 0 )) == 1) || (( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_55116( ref l_U654,  /* PLAYER_PED_ID */ sub_887(), 0 )) == 1))))
    {
         /* WRITESCRIPTLOG */ sub_418( "kja", "Player Hit the Kill Box", 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_887(), 1 );
         /* KILL_ANY_MISSION_SPEECH */ sub_57270( 0 );
         /* KILL_ANY_AMBIENT_SPEECH */ sub_57470( 0 );
        BULLET_CAMERA_PRELOAD_TEXT_BINK( "MISS_DEATH_FALL_01A", 1 );
        l_U760 = CREATE_CAM( "DEFAULT_BULLET_CAMERA", 1 );
        SETUP_BULLET_CAMERA_SCENE( l_U760, "MISS_DEATH_FALL_01A", 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, "", "" );
        SET_CAM_ACTIVE( l_U760, 1 );
        STREAM_HELPERS_REQUEST_AT_LOC( g_U980[5], 1 );
        l_U759 = 1;
    }
    return;
}

/* KILL_ANY_MISSION_SPEECH */ void sub_57270(unknown uParam0)
{
    int I;

    for ( I = 0; I <= 3; I++ )
    {
        PRINTSTRING( "\n KILL_ANY_MISSION_SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( I ))
        {
            if ((g_U1[I] <= 8) AND (g_U1[I] >= 4))
            {
                STOP_SCRIPTED_CONVERSATION( I, uParam0, 0 );
            }
        }
    }
    return;
}

/* KILL_ANY_AMBIENT_SPEECH */ void sub_57470(unknown uParam0)
{
    int I;

    for ( I = 0; I <= 3; I++ )
    {
        PRINTSTRING( "\n KILL_ANY_AMBIENT_SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( I ))
        {
            if ((g_U1[I] <= 3) AND (g_U1[I] >= 1))
            {
                STOP_SCRIPTED_CONVERSATION( I, uParam0, 0 );
            }
        }
    }
    return;
}

/* P_RELEASE_2D_ASSETS */ void sub_57967()
{
     /* WRITESCRIPTLOG */ sub_418( "SP", "P_RELEASE_2D_ASSETS start", 0 );
     /* P_GLOBAL_UNLOAD_PISTOL_ANIMS */ sub_58038();
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_59114( ref l_U161, ref g_U1588 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_59662( ref l_U166, ref g_U1829 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_55457( ref g_U3079, ref g_U3026 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_55457( "SCRIPT_MISSION\S_PANA_REPEL_GMED_FWD", ref g_U3026 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "LEVEL_S_PAN_CP_04", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "LEVEL_S_PAN_BOW", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_418( "SP", "P_RELEASE_2D_ASSETS end", 0 );
    return;
}

/* P_GLOBAL_UNLOAD_PISTOL_ANIMS */ void sub_58038()
{
     /* WRITESCRIPTLOG */ sub_418( "CR", "P_GLOBAL_UNLOAD_PISTOL_ANIMS - Start", 0 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "NPC_PSTL_CORE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "NPC_PSTL_COVER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "NPC_PSTL_COVER_ENTER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "NPC_PSTL_COVER_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "NPC_PSTL_DODGE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "NPC_PSTL_FLAVOR", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "NPC_PSTL_FULLBODY", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "NPC_PSTL_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "NPC_PSTL_SEARCH", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "NPC_PSTL_STAIRS", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "NPC_PSTL_REACT", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "AMED_PSTL_PRONE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "PLGE_PSTL_CROUCH", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "PLGE_PSTL_CORE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "PLGE_PSTL_CORE_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "PLGE_PSTL_HANDSIG", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "PLGE_PSTL_ACTIONS", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "PLGE_PSTL_KNEE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "PLGE_PSTL_COVER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "PLGE_PSTL_REACT", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_58149( "PLGE_PSTL_COVER_EXIT", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_418( "CR", "P_GLOBAL_UNLOAD_PISTOL_ANIMS - End", 0 );
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_58149(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5338( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_59114(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_59187( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_59187(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5338( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_59662(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_59736( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_59736(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5338( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

