void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U39 = -1;
    l_U40 = {64536, 64536, 64536};
    l_U43 = {0, 0, 0};
    StrCopy( ref l_U46, "DUMMY", 32 );
    l_U54 = 1;
    l_U59 = 0;
    l_U60 = 0;
    l_U61 = 0;
    l_U64 = 0;
    l_U128 = 0;
    l_U129 = 0;
    l_U130 = 1500;
    l_U190 = 0;
    l_U192 = 0;
    l_U358 = {-8.78000000, 3.88800000, 8.20700000};
    l_U370 = -1;
    l_U468 = {-9.26000000, 1.05000000, 9.64700000};
    l_U471 = {-9.09000000, 1.02000000, 10.07000000};
    l_U474 = 0.00000000;
    l_U475 = 0;
     /* WRITESCRIPTLOG */ sub_464( "MF", "Script s_pana_HeliPad.sc is starting up...", 0 );
     /* P_HP_SETUP_DATA_ARRAYS */ sub_582();
    l_U190 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_882();
        if (l_U192 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_10784();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_HELIPAD */ sub_5110( 0 );
     /* P_RELEASE_HELIPAD_ASSETS */ sub_47165();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_pana_HeliPad" );
     /* WRITESCRIPTLOG */ sub_464( "MF", "Script s_pana_HeliPad.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_464(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_HP_SETUP_DATA_ARRAYS */ void sub_582()
{
     /* WRITESCRIPTLOG */ sub_464( "GA", "P_HP_SETUP_DATA_ARRAYS start", 0 );
    l_U176[0] = g_U1583;
    l_U176[1] = g_U1573;
    l_U176[2] = g_U1572;
    l_U176[3] = 1454823397;
    l_U176[4] = 1422154951;
    l_U176[5] = g_U1520;
    l_U176[6] = g_U830;
    l_U176[7] = -1409914275;
    l_U176[8] = -1321101597;
    l_U176[9] = -1246378211;
    l_U187[0] = 1308526797;
    l_U187[1] = -184942895;
     /* WRITESCRIPTLOG */ sub_464( "GA", "P_HP_SETUP_DATA_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_882()
{
    if (g_U834 == 7)
    {
        switch (l_U192)
        {
            case 0:
             /* ISMAXOVERBOARD */ sub_984( 1 );
             /* P_G_HANDLE_MAX_FALLING_DOWN_FROM_TOP_DECK */ sub_2536();
            if (( /* RESTARTING_CHECKPOINT */ sub_2781()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() )))
            {
                l_U192 = 1;
                 /* WRITESCRIPTLOG */ sub_464( "MF", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_3299())
            {
                if ((g_U835[8]._fU40 != 4) AND (g_U835[8]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_464( "GA", "Shutting down script for operations building 1.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_3449( ref g_U835[8] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U835[8]._fU32 );
                }
                l_U192 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_3542( 0 )) == 1)
            {
                if ((g_U835[8]._fU40 != 4) AND (g_U835[8]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_464( "GA", "Shutting down script for operations building 1.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_3449( ref g_U835[8] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U835[8]._fU32 );
                }
                l_U192 = 2;
            }
            break;
            case 2:
            if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() ))) AND (NOT IS_LAST_MAN_STANDING_ACTIVE())))
            {
                l_U192 = 3;
                 /* WRITESCRIPTLOG */ sub_464( "MF", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_464( "MF", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1049() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1049(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1011() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1011(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
             /* P_CLEANUP_HELIPAD */ sub_5110( 1 );
            l_U192 = 4;
             /* WRITESCRIPTLOG */ sub_464( "MF", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_464( "MF", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U140._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_6108( ref l_U140,  /* PLAYER_PED_ID */ sub_1011() );
            }
            l_U192 = 5;
             /* WRITESCRIPTLOG */ sub_464( "MF", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_464( "MF", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U190 = 1;
            l_U192 = 0;
             /* WRITESCRIPTLOG */ sub_464( "MF", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* ISMAXOVERBOARD */ int sub_984(int iParam0)
{
    if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() )))))
    {
        if ((IS_PED_IN_WATER(  /* PLAYER_PED_ID */ sub_1011() )) == 1)
        {
            if (NOT g_U3626._fU32)
            {
                 /* P_GBL_QUICK_GAMEPLAY_CAM_COPY */ sub_1170();
            }
            if (iParam0 == 1)
            {
                 /* P_GLOBAL_MAX_WATER_IMPACT_DEATH */ sub_2126();
            }
             /* NIS_POST_SETUP */ sub_2218( 1, 1 );
            return 1;
        }
    }
    return 0;
}

/* PLAYER_PED_ID */ int sub_1011()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1049() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1049()
{
    return GET_PLAYER_ID();
}

/* P_GBL_QUICK_GAMEPLAY_CAM_COPY */ void sub_1170()
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_GBL_QUICK_GAMEPLAY_CAM_COPY - START", 0 );
     /* NIS_CREATE_GAMEPLAY_CAM_COPY */ sub_1270( ref g_U3626, 50 );
     /* NIS_PRE_SETUP */ sub_1648( 0, 0, 0, 1 );
     /* NIS_PLAY_STATIC_CAMERA */ sub_1827( ref g_U3626 );
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_GBL_QUICK_GAMEPLAY_CAM_COPY - END", 0 );
    return;
}

/* NIS_CREATE_GAMEPLAY_CAM_COPY */ void sub_1270(int iParam0, unknown uParam1)
{
    iParam0->_fU4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_GAMEPLAY_CAM_ROT()};
    iParam0->_fU16 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_GAMEPLAY_CAM_COORD()};
    iParam0->_fU28 = GET_GAMEPLAY_CAM_FOV();
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam1;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_1424( iParam0 + 48, uParam1, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U703, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* CREATETIMER */ void sub_1424(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* NIS_PRE_SETUP */ void sub_1648(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1049(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1011(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1011() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1011(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* NIS_PLAY_STATIC_CAMERA */ void sub_1827(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_1907( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* STARTTIMER */ void sub_1907(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* P_GLOBAL_MAX_WATER_IMPACT_DEATH */ void sub_2126()
{
    SET_PAD_SHAKE( 0, 100, 250 );
    WAIT( 90 );
    SET_PED_HEALTH(  /* PLAYER_PED_ID */ sub_1011(), 0, 0 );
    return;
}

/* NIS_POST_SETUP */ void sub_2218(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1049(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1011(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_2316();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_2316()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1011(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1011(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1011(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1011(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_G_HANDLE_MAX_FALLING_DOWN_FROM_TOP_DECK */ void sub_2536()
{
    if ( /* F_ISPEDINTRIGGERBOX */ sub_2601(  /* PLAYER_PED_ID */ sub_1011(), g_U3657 ))
    {
         /* P_KILL_PED */ sub_2683(  /* PLAYER_PED_ID */ sub_1011() );
    }
    return;
}

/* F_ISPEDINTRIGGERBOX */ int sub_2601(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_KILL_PED */ void sub_2683(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* RESTARTING_CHECKPOINT */ int sub_2781()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1011(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1049(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1049(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1011() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1011(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_3299()
{
    return g_U648;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_3449(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* F_CHECK_QUIT_RETRY */ int sub_3542(int iParam0)
{
    iParam0 = 1;
    switch (l_U129)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_3624( ref l_U131 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() )))
            {
                l_U130 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1424( ref l_U131, l_U130, 1, 1 );
             /* STARTTIMER */ sub_1907( ref l_U131 );
        }
        if ( /* ISTIMERDONE */ sub_3776( ref l_U131 ))
        {
             /* WRITESCRIPTLOG */ sub_464( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1049() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1049(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U129 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U129 = 2;
            }
            else
            {
                l_U129 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_464( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_4277();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_464( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_4277();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_3624(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* ISTIMERDONE */ int sub_3776(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_4277()
{
     /* WRITESCRIPTLOG */ sub_464( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_4352( ref l_U131 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1049() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1049(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U128 = 0;
    l_U128 = l_U128;
    l_U129 = 0;
    return;
}

/* RESETTIMER */ void sub_4352(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_CLEANUP_HELIPAD */ void sub_5110(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_CLEANUP_HELIPAD", 0 );
     /* P_SAFE_STOP_SOUND */ sub_5177( l_U370, 0 );
     /* P_SAFE_RELEASE_SOUND_ID */ sub_5360( ref l_U370 );
     /* P_SAFE_STOP_SOUND */ sub_5177( g_U4236, 0 );
     /* P_SAFE_RELEASE_SOUND_ID */ sub_5360( ref g_U4236 );
     /* P_SAFE_STOP_SOUND */ sub_5177( g_U4235, 0 );
     /* P_SAFE_RELEASE_SOUND_ID */ sub_5360( ref g_U4235 );
     /* CLEANPLACEMENT */ sub_5609( l_U372 );
     /* CLEANPLACEMENT */ sub_5609( l_U373 );
    if (iParam0 == 1)
    {
         /* CLEANPEDARRAY */ sub_5692( ref g_U3375 );
         /* CLEANPEDARRAY */ sub_5692( ref g_U3379 );
         /* CLEANOBJECT */ sub_5860( g_U3382 );
         /* CLEANOBJECT */ sub_5860( g_U4226 );
         /* CLEANOBJECT */ sub_5860( g_U4225 );
         /* CLEANOBJECT */ sub_5860( g_U4231 );
         /* CLEANOBJECT */ sub_5860( g_U4230 );
         /* CLEANOBJECT */ sub_5860( g_U3383 );
         /* CLEANPLACEMENT */ sub_5609( g_U773._fU0 );
    }
    return;
}

/* P_SAFE_STOP_SOUND */ void sub_5177(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
         /* WRITESCRIPTLOG */ sub_464( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_464( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

/* P_SAFE_RELEASE_SOUND_ID */ void sub_5360(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
         /* WRITESCRIPTLOG */ sub_464( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_464( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_5609(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* CLEANPEDARRAY */ void sub_5692(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_5742( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_5742(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANOBJECT */ void sub_5860(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_6108(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_464( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_6327( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_7491( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7805( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8284( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7805( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8284( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7805( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8284( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8600( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8284( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8600( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8284( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_9172( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_9374( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1011(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_464( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_6327(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6389( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_6389(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_7491(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_7805(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_8209( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_8209(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_8284(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_8600(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_8209( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_9172(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_9374(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6389( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_9472( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_9472(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_10784()
{
    int iVar2;

    iVar2 = l_U190;
     /* P_HANDLE_SAFE */ sub_10819();
     /* P_HANDLE_BULLET_CAMS */ sub_11070();
     /* P_GBL_HANDLE_HELIPAD_DOOR_AUDIO */ sub_11776();
    if (l_U193)
    {
        if ((g_U835[6]._fU40 == 4) || (g_U835[6]._fU40 == 0))
        {
             /* P_START_CHECKPOINT_THREAD */ sub_12214( ref g_U835[8] );
        }
    }
    switch (l_U190)
    {
        case 0:
         /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_IDLE", 0 );
        break;
        case 1:
         /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_12487();
         /* P_SET_STATIC_DATA */ sub_12690();
        l_U190 = 2;
         /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_HELIPAD_PERSISTENT_ASSETS */ sub_14115();
         /* P_REQUEST_HELIPAD_NONPERSISTENT_ASSETS */ sub_23828();
        l_U190 = 3;
         /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_25287( ref g_U3026 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_24896( ref g_U1975 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_24494( ref g_U1829 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_24097( ref g_U1588 )))))
        {
            if ((NOT l_U140._fU0) AND (g_U833 == 7))
            {
                l_U190 = 4;
                 /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U190 = 7;
                 /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1011(), 0 );
        g_U1230[7] = 1;
        if (( /* HAS_SAVEFILE_LOADED */ sub_25904( ref l_U140 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_8600(  /* PLAYER_PED_ID */ sub_1011(), 1308526797, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7805(  /* PLAYER_PED_ID */ sub_1011(), -1404433099, 1, 200, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7805(  /* PLAYER_PED_ID */ sub_1011(), -612753081, 0, 200, 0 );
            l_U190 = 6;
             /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U190 = 7;
             /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        break;
        case 6:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1011(), 0 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1011(), 1 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1011(), 0, 0 ) ))))
            {
                l_U190 = 7;
                 /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 7:
        if (g_U1230[7])
        {
            if (NOT l_U140._fU0)
            {
                g_U834 = 7;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_26546( ref l_U140, 7,  /* PLAYER_PED_ID */ sub_1011(), g_U980[7], g_U1086[7], g_U1158[7], g_U1122[7], 1 );
            }
             /* P_CLOSEDOOR */ sub_31152( ref g_U3890[1], 1 );
             /* P_SETDOORLOCKED */ sub_31412( ref g_U3890[1], 1 );
            l_U190 = 5;
        }
        break;
        case 5:
        if (NOT (DOES_OBJECT_EXIST( g_U3382 )))
        {
             /* P_GBL_CREATE_HELIPAD_DOOR_PROPS */ sub_31588( 1 );
             /* P_GBL_HELIPAD_DOOR_ANIMATE */ sub_33205( 0, 1 );
        }
        if (NOT AUDIO_IS_SCRIPTED_MUSIC_PLAYING())
        {
             /* WRITESCRIPTLOG */ sub_464( "CR", "MUSIC: Playing PANAMA_FINAL Mood: PANAMA_FINAL_3_6", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_3_6", "PANAMA_FINAL_3_6", 0, -1, -1, -1082130432, 0 );
        }
         /* P_HP_CREATE_PLACEMENTS */ sub_34132();
         /* P_HP_PROPS_CREATE_BRIDGE_DOORS */ sub_35829();
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1049(), 1, 0 );
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U190 = 8;
        break;
        case 8:
        if (l_U191 == 1)
        {
            DO_SCREEN_FADE_IN( 100 );
        }
        if ( /* F_GBL_HELIPAD_DOOR_IS_VISIBLE */ sub_36123())
        {
            if (NOT ( /* HASTIMERBEENACTIVATED */ sub_3624( ref g_U4240 )))
            {
                 /* WRITESCRIPTLOG */ sub_464( "MF", "Starting... tmrGBL_HelipadInitialOpenDelay", 0 );
                 /* STARTTIMER */ sub_1907( ref g_U4240 );
            }
        }
        if ( /* HASTIMERBEENACTIVATED */ sub_3624( ref g_U4240 ))
        {
            if (NOT ( /* F_GBL_HELIPAD_DOOR_IS_VISIBLE */ sub_36123()))
            {
                 /* WRITESCRIPTLOG */ sub_464( "MF", "Stopping... tmrGBL_HelipadInitialOpenDelay", 0 );
                 /* DISABLETIMER */ sub_36439( ref g_U4240 );
            }
        }
        if ((g_U4240._fU16) || ( /* ISTIMERDONE */ sub_3776( ref g_U4240 )))
        {
            if ( /* F_GBL_HELIPAD_DOOR_IS_VISIBLE */ sub_36123())
            {
                 /* P_GBL_HELIPAD_DOOR_ANIMATE */ sub_33205( 1, 0 );
                 /* P_GBL_HELIPAD_DOOR_SET_LOCKED */ sub_36524( 0 );
                l_U190 = 9;
            }
        }
        break;
        case 9:
        if (l_U191)
        {
             /* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ sub_37111();
        }
         /* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ sub_37282();
         /* P_HP_HANDLE_HELIPAD_DOOR_TRIGGERING */ sub_39019();
         /* P_HP_HANDLE_HELIPAD_DOOR_MOVEMENT */ sub_39461();
        if ( /* F_HANDLE_PED_ARRAY_SPAWN */ sub_39588( ref g_U3379, ref l_U331, -1, 1, 1, 0, 1 ))
        {
             /* P_HP_HELIPAD_REBEL_ATTACK_PLAYER */ sub_41199();
        }
        if (( /* F_HANDLE_PED_ARRAY_SPAWN */ sub_39588( ref g_U3375, ref l_U215, -1, 1, 1, 0, 1 )) == 1)
        {
             /* P_HP_BRIDGE_REBELS_SETUP */ sub_42027();
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_43580( ref l_U261, 0 ))
        {
             /* STARTTIMER */ sub_1907( ref l_U361 );
             /* P_HP_BRIDGE_DOOR_PLAY_SOUND */ sub_43724();
             /* P_GBL_HELIPAD_DOOR_SET_LOCKED */ sub_36524( 0 );
        }
        if ( /* ISTIMERDONE */ sub_3776( ref l_U361 ))
        {
             /* P_HP_PROPS_OPEN_BRIDGE_DOORS */ sub_43937();
            l_U371 = 1;
             /* P_HP_BRIDGE_REBELS_START_COMBAT */ sub_44309();
            l_U190 = 10;
        }
        break;
        case 10:
        if (l_U191)
        {
             /* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ sub_37111();
        }
         /* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ sub_37282();
         /* P_HP_HANDLE_HELIPAD_DOOR_TRIGGERING */ sub_39019();
         /* P_HP_HANDLE_HELIPAD_DOOR_MOVEMENT */ sub_39461();
        if ((DOES_OBJECT_EXIST( g_U3383 )) AND (l_U371))
        {
            if (NOT (IS_OBJECT_PLAYING_ANIM( g_U3383, "P_BRDGDRSANIM_H", "pa_doors" )))
            {
                STOP_SOUND( l_U370, 0 );
                l_U371 = 0;
            }
        }
        if (( /* F_IS_PED_ARRAY_DEFEATED */ sub_11108( ref g_U3379, 0 )) AND (( /* F_IS_PED_ARRAY_DEFEATED */ sub_11108( ref g_U3375, 0 )) AND (NOT l_U193)))
        {
            if ( /* F_ISPEDINTRIGGERBOX */ sub_2601(  /* PLAYER_PED_ID */ sub_1011(), l_U194 ))
            {
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "Pre-loading the Building checkpoint...", 0 );
                l_U193 = 1;
            }
        }
        if ( /* F_IS_PED_ARRAY_DEFEATED */ sub_11108( ref g_U3375, 0 ))
        {
            if ( /* F_ISPEDINTRIGGERBOX */ sub_2601(  /* PLAYER_PED_ID */ sub_1011(), l_U194 ))
            {
                if (IS_BULLET_CAMERA_RUNNING( 0 ))
                {
                    if (IS_BULLET_CAMERA_TO_GAMEPLAY_ALLOWED())
                    {
                         /* WRITESCRIPTLOG */ sub_464( "CCB", "Disabling ALLOW_BULLET_CAMERA_TO_GAMEPLAY...", 0 );
                        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
                        BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
                    }
                }
            }
             /* WRITESCRIPTLOG */ sub_464( "CCB", "eHP_CurrState - eHP_BRIDGE_TRANSITION", 0 );
            l_U190 = 11;
        }
        break;
        case 11:
         /* P_HP_HANDLE_HELIPAD_DOOR_TRIGGERING */ sub_39019();
         /* P_HP_HANDLE_HELIPAD_DOOR_MOVEMENT */ sub_39461();
        if (NOT l_U374)
        {
            if ( /* F_ISPEDINTRIGGERBOX */ sub_2601(  /* PLAYER_PED_ID */ sub_1011(), l_U385 ))
            {
                l_U374 = 1;
                g_U1244 = 1;
                 /* P_CLEANUP_TOP_DECK */ sub_45419();
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "Pre-loading the Building checkpoint...", 0 );
                l_U193 = 1;
            }
        }
        if (NOT ( /* F_ISPEDINTRIGGERBOX */ sub_2601(  /* PLAYER_PED_ID */ sub_1011(), l_U194 )))
        {
            if (NOT (IS_BULLET_CAMERA_RUNNING( 0 )))
            {
                if (NOT IS_LAST_MAN_STANDING_ACTIVE())
                {
                    if (NOT IS_BULLET_CAMERA_TO_GAMEPLAY_ALLOWED())
                    {
                         /* WRITESCRIPTLOG */ sub_464( "CCB", "Enabling bullet camera to gameplay...", 0 );
                        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
                    }
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_464( "CCB", "Waiting for last man standing to finish...", 0 );
                }
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "Waiting for bulletcam to finish...", 0 );
            }
        }
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_3624( ref l_U457 )))
        {
            if (NOT IS_BULLET_CAMERA_ACTIVE())
            {
                 /* STARTTIMER */ sub_1907( ref l_U457 );
            }
        }
        if (NOT ( /* F_ISPEDINTRIGGERBOX */ sub_2601(  /* PLAYER_PED_ID */ sub_1011(), l_U436 )))
        {
            if ( /* ISTIMERDONE */ sub_3776( ref l_U457 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_37696( "SPAN_MSTCBR", ref g_U1246 );
            }
        }
        if (((NOT IS_BULLET_CAMERA_ACTIVE()) AND ( /* F_ISPLAYERINTRIGGERBOX */ sub_36171( l_U194 ))) || ( /* F_CUTSYS_TRIGGERGENERAL */ sub_46106( ref l_U375, l_U194, "11_02_PANAMA_concat", ref l_U376, 0, 1500 )))
        {
             /* P_RELEASE_HELIPAD_ASSETS */ sub_47165();
             /* P_CLEANUP_TOP_DECK */ sub_45419();
            g_U1245 = 1;
            g_U1244 = 1;
            g_U1230[8] = 1;
            if ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_49702( g_U1246 ))
            {
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "Killing speech...", 0 );
                 /* KILL_SPEECH */ sub_49962( ref g_U1246, 0 );
            }
             /* WRITESCRIPTLOG */ sub_464( "CCB", "eHP_CurrState - eHP_OUT", 0 );
            l_U190 = 12;
        }
        break;
        case 12:
         /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_FINISHED", 0 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        l_U190 = 0;
         /* WRITESCRIPTLOG */ sub_464( "MF", "eCheckpointState = CP_IDLE", 0 );
        break;
    }
    if (l_U190 != iVar2)
    {
        l_U191 = 1;
    }
    else
    {
        l_U191 = 0;
    }
    return;
}

/* P_HANDLE_SAFE */ void sub_10819()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;

    if (NOT l_U475)
    {
        if (DOES_OBJECT_EXIST( l_U467 ))
        {
            if ((GET_OBJECT_HEALTH( l_U467 )) < (l_U474 + 100))
            {
                FREEZE_OBJECT_POSITION( l_U467, 0 );
            }
            uVar2 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( l_U467 )};
            if (uVar2._fU8 < (l_U471._fU8 - 0.50000000))
            {
                 /* WRITESCRIPTLOG */ sub_464( "CR", "P_HANDLE_SAFE CRACKED", 0 );
                if ((DOES_OBJECT_EXIST( l_U466 )) == 1)
                {
                    SET_OBJECT_ANIM_SPEED( l_U466, "P_PA_SafmainNEW_Aa_H", "pa_anim", 1.00000000 );
                }
                l_U475 = 1;
            }
        }
    }
    return;
}

/* P_HANDLE_BULLET_CAMS */ void sub_11070()
{
    if ( /* F_IS_PED_ARRAY_DEFEATED */ sub_11108( ref g_U3375, 0 ))
    {
         /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_11575( ref g_U3379 );
    }
    if ( /* F_IS_PED_ARRAY_DEFEATED */ sub_11108( ref g_U3379, 0 ))
    {
         /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_11575( ref g_U3375 );
    }
    return;
}

/* F_IS_PED_ARRAY_DEFEATED */ int sub_11108(unknown uParam0, boolean bParam1)
{
    if (( /* F_HAS_PED_ARRAY_SPAWNED */ sub_11147( uParam0, 0 )) == 1)
    {
        if (NOT bParam1)
        {
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_11282( uParam0 )) == 0)
            {
                return 1;
            }
        }
        if (bParam1)
        {
            if (( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_11415( uParam0 )) == (uParam0^))
            {
                return 1;
            }
        }
    }
    return 0;
}

/* F_HAS_PED_ARRAY_SPAWNED */ void sub_11147(unknown uParam0, boolean bParam1)
{
    int I;
    int Result;

    Result = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if ((DOES_PED_EXIST( (uParam0^)[I] )) == 1)
        {
            Result = 1;
            if (NOT bParam1)
            {
                return 1;
            }
        }
        else
        {
            Result = 0;
        }
    }
    return Result;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_11282(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ void sub_11415(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            if (IS_PED_DEAD( (uParam0^)[I] ))
            {
                Result++;
            }
        }
    }
    return Result;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_11575(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_11282( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_GBL_HANDLE_HELIPAD_DOOR_AUDIO */ void sub_11776()
{
    if (g_U4235 != -1)
    {
        if (NOT ( /* F_IS_OBJECT_PLAYING_ANIM */ sub_11866( g_U3382, "pa_anim", "P_PA_HelDor_Aa_H" )))
        {
             /* WRITESCRIPTLOG */ sub_464( "GA", "Stopping the Heli Door Opening Sound.", 0 );
             /* P_SAFE_STOP_SOUND */ sub_5177( g_U4235, 0 );
             /* P_SAFE_RELEASE_SOUND_ID */ sub_5360( ref g_U4235 );
        }
    }
    if (g_U4236 != -1)
    {
        if (NOT ( /* F_IS_OBJECT_PLAYING_ANIM */ sub_11866( g_U3382, "pa_anim", "P_PA_HelDor_Aa_H" )))
        {
             /* WRITESCRIPTLOG */ sub_464( "GA", "Stopping the Heli Door Closing Sound.", 0 );
             /* P_SAFE_STOP_SOUND */ sub_5177( g_U4236, 0 );
             /* P_SAFE_RELEASE_SOUND_ID */ sub_5360( ref g_U4236 );
        }
    }
    return;
}

/* F_IS_OBJECT_PLAYING_ANIM */ int sub_11866(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if ((DOES_OBJECT_EXIST( uParam0 )) == 1)
    {
        if (IS_OBJECT_PLAYING_ANIM( uParam0, uParam2, uParam1 ))
        {
            return 1;
        }
    }
    return 0;
}

/* P_START_CHECKPOINT_THREAD */ void sub_12214(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_12487()
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U191 = 1;
    l_U193 = 0;
    l_U374 = 0;
    l_U370 = GET_SOUND_ID();
     /* CREATETIMER */ sub_1424( ref l_U361, 500, 1, 0 );
    l_U371 = 0;
     /* CREATETIMER */ sub_1424( ref l_U313, 100, 1, 0 );
     /* CREATETIMER */ sub_1424( ref l_U322, 500, 1, 0 );
     /* CREATETIMER */ sub_1424( ref l_U406, 10500, 1, 0 );
     /* CREATETIMER */ sub_1424( ref l_U457, 1500, 1, 0 );
     /* CREATETIMER */ sub_1424( ref l_U282, 6000, 1, 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_12690()
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_SET_STATIC_DATA", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12790( ref l_U331[0], -3.77000000, 3.39000000, 8.19000000, -90.00000000, 48565103, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12790( ref l_U331[1], -1.64000000, 7.02000000, 8.19000000, -120.00000000, -115052442, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12790( ref l_U215[0], -12.77000000, 6.40000000, 9.07000000, 104.25000000, -1015903641, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12790( ref l_U215[1], -13.10000000, 1.59000000, 9.07000000, 63.86000000, 1636235874, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12790( ref l_U215[2], -14.77000000, 3.93000000, 9.07000000, 0.86000000, 1498683894, 7, 3, 2, 0, 0 );
     /* P_G_SETUP_MAX_FALLING_DOWN_FROM_TOP_DECK */ sub_13098();
     /* P_CREATETRIGGERBOX */ sub_13226( ref l_U385, "TRIGGER_BUILDING_PRELOAD", -13.12000000, 3.85000000, 8.13000000, 16.01000000, 9.61000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13226( ref l_U292, "Trigger_Helipad_Door_Sensor", 5.80000000, 3.87000000, 8.07000000, 9.52000000, 4.43000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13226( ref l_U261, "tbHP_OpenBridgeDoor", 3.01000000, 3.87000000, 8.07000000, 3.00000000, 10.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13226( ref l_U194, "TRIGGER_MID03_FORCEWALK", -17.70000000, 3.85000000, 9.00000000, 11.73000000, 9.61000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13226( ref l_U436, "TRIGGER_HP_BRIDGE_HINT", -16.20000000, 3.85000000, 9.00000000, 10.28000000, 10.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_13226( ref l_U415, "Trigger_HPDeck_EngineMonologue", -5.89000000, 3.79000000, 8.51000000, 5.73000000, 4.95000000, 2.42000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_13906( ref l_U291, "BRIDGE_REBEL_TETHER", -6.40000000, 3.93000000, 7.97000000, 20.86000000, 6.85000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_12790(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_G_SETUP_MAX_FALLING_DOWN_FROM_TOP_DECK */ void sub_13098()
{
     /* P_CREATETRIGGERBOX */ sub_13226( ref g_U3657, "TRIGGER_MAIN_DECK_KILL", 37.94000000, 3.91000000, 1.60000000, 19.26000000, 15.05000000, 2.05000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    return;
}

/* P_CREATETRIGGERBOX */ void sub_13226(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_13906(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_REQUEST_HELIPAD_PERSISTENT_ASSETS */ void sub_14115()
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_REQUEST_HELIPAD_PERSISTENT_ASSETS start", 0 );
     /* P_GLOBAL_LOAD_RIFLE_ANIMS */ sub_14218();
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_17686( ref l_U176, ref g_U1588 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_19765( ref l_U187, ref g_U1829 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_21834( "SCRIPT_MISSION\S_PANA_YACHT_BRIDGE_DOOR", ref g_U3026 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "DAM_DEAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "pa_anim", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_REQUEST_HELIPAD_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_GLOBAL_LOAD_RIFLE_ANIMS */ void sub_14218()
{
     /* WRITESCRIPTLOG */ sub_464( "CR", "P_GLOBAL_LOAD_RIFLE_ANIMS - Start", 0 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "NPC_RIFLE_CORE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "NPC_RIFLE_COVER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "NPC_RIFLE_COVER_ENTER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "NPC_RIFLE_COVER_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "NPC_RIFLE_DODGE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "NPC_RIFLE_FLAVOR", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "NPC_RIFLE_FULLBODY", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "NPC_RIFLE_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "NPC_RIFLE_SEARCH", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "NPC_RIFLE_STAIRS", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "NPC_RIFLE_REACT", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "AMED_RIFL_PRONE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "PLGE_RIFLE_CROUCH", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "PLGE_RIFLE_CORE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "PLGE_RIFLE_CORE_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "PLGE_RIFLE_HANDSIG", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "PLGE_RIFLE_ACTIONS", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "PLGE_RIFLE_KNEE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "PLGE_RIFLE_COVER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "PLGE_RIFLE_REACT", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_14324( "PLGE_RIFLE_COVER_EXIT", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_464( "CR", "P_GLOBAL_LOAD_RIFLE_ANIMS - End", 0 );
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_14324(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_14376( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_14628( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_14376(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_14628( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_14628( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_14628( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16199( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_14628( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_14628( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_14628(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14690( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_14690(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_16199(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_17686(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_17759( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_17759(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_17826( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_18084( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_17826(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_18084( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_18084( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_18084( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16199( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_18084( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_18084( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_18084(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14690( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_19765(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19839( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_19839(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_19893( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20154( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_19893(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20154( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20154( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20154( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16199( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20154( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20154( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_20154(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14690( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_21834(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_21887( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_22142( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_21887(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_22142( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_22142( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_22142( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16199( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_22142( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_22142( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_22142(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14690( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_HELIPAD_NONPERSISTENT_ASSETS */ void sub_23828()
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_REQUEST_HELIPAD_NONPERSISTENT_ASSETS start", 0 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_4", 0 );
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_REQUEST_HELIPAD_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_24097(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_24494(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_24896(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_25287(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_25904(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_464( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_6108( uParam0,  /* PLAYER_PED_ID */ sub_1011() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_26546(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_464( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_464( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_9374( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_26837( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_27314( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_27314( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_27574( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_27314( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_27574( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_27574( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_27314( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_27574( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_27574( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_27574( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_27314( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_27574( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_27574( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_27574( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_27574( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_29154( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_464( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_26837(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6389( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_464( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_464( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_27314(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_27574(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_29154(int iParam0)
{
     /* WRITE_STRING */ sub_8209( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_29242( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_29319( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_29319( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_29319( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_29319( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_29319( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_30189( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU52 );
     /* WRITE_STRING */ sub_8209( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU96 );
     /* WRITE_STRING */ sub_8209( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU100 );
     /* WRITE_STRING */ sub_8209( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU104 );
     /* WRITE_STRING */ sub_8209( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU108 );
     /* WRITE_STRING */ sub_8209( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU112 );
     /* WRITE_STRING */ sub_8209( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU116 );
     /* WRITE_STRING */ sub_8209( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU120 );
     /* WRITE_STRING */ sub_8209( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU124 );
     /* WRITE_STRING */ sub_8209( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU128 );
     /* WRITE_STRING */ sub_8209( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_29488( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_29488( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_29488( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_29242(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_29319(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_29488(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_30189(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_CLOSEDOOR */ void sub_31152(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_31178( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_31262( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_31178(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_31262(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORLOCKED */ void sub_31412(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_31178( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_31262( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* P_GBL_CREATE_HELIPAD_DOOR_PROPS */ void sub_31588(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_GBL_CREATE_HELIPAD_DOOR_PROPS - START", 0 );
    g_U3382 =  /* CREATEOBJECT */ sub_31714( g_U1572, g_U4200, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U3382 ))
    {
        FREEZE_OBJECT_POSITION( g_U3382, 1 );
        PLAY_OBJECT_ANIM( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.00000000, 0, 1 );
    }
    g_U4226 =  /* CREATEOBJECTNOOFFSET */ sub_32370( 1454823397, g_U4227, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4226 ))
    {
        FREEZE_OBJECT_POSITION( g_U4226, 1 );
        SET_OBJECT_VISIBLE( g_U4226, 0 );
    }
    g_U4225 =  /* CREATEOBJECTNOOFFSET */ sub_32370( 1422154951, g_U4227, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4225 ))
    {
        FREEZE_OBJECT_POSITION( g_U4225, 1 );
    }
    g_U4231 =  /* CREATEOBJECTNOOFFSET */ sub_32370( 1454823397, g_U4232, 0.00000000, 0.00000000, 180.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4231 ))
    {
        FREEZE_OBJECT_POSITION( g_U4231, 1 );
        SET_OBJECT_VISIBLE( g_U4231, 0 );
    }
    g_U4230 =  /* CREATEOBJECTNOOFFSET */ sub_32370( 1422154951, g_U4232, 0.00000000, 0.00000000, 180.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4230 ))
    {
        FREEZE_OBJECT_POSITION( g_U4230, 1 );
    }
    if (bParam0)
    {
        SET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.00000000 );
    }
    else
    {
        SET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 1.00000000 );
    }
     /* P_CREATETRIGGERBOX */ sub_13226( ref g_U4203, "TRIGGER_HELI_PAD_DOOR_SIGHT_CHECK", 16.30000000, 3.79000000, 8.16000000, 20.75000000, 15.60000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_GBL_CREATE_HELIPAD_DOOR_PROPS - END", 0 );
    return;
}

/* CREATEOBJECT */ void sub_31714(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_31839( uParam0, 1 );
    }
    Result = CREATE_OBJECT( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* LOADMODEL */ void sub_31839(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_8209( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_32370(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_31839( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_GBL_HELIPAD_DOOR_ANIMATE */ void sub_33205(int iParam0, int iParam1)
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_GBL_HELIPAD_DOOR_ANIMATE - START", 0 );
    if ((DOES_OBJECT_EXIST( g_U3382 )) == 1)
    {
         /* P_SAFE_STOP_SOUND */ sub_5177( g_U4235, 0 );
         /* P_SAFE_RELEASE_SOUND_ID */ sub_5360( ref g_U4235 );
         /* P_SAFE_STOP_SOUND */ sub_5177( g_U4236, 0 );
         /* P_SAFE_RELEASE_SOUND_ID */ sub_5360( ref g_U4236 );
        if (iParam0 == 1)
        {
             /* WRITE_STRING */ sub_8209( "OPENING DOOR..." );
            PLAY_OBJECT_ANIM( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_SPEED( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.65000000 );
            if (iParam1 == 1)
            {
                SET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 1.00000000 );
            }
            else
            {
                SET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.00000000 );
                g_U4235 = GET_SOUND_ID();
                PLAY_SOUND_FROM_OBJECT( g_U4235, "S_PANA_HELICOPTER_DOOR_OPEN", g_U3382 );
            }
        }
        else
        {
             /* WRITE_STRING */ sub_8209( "CLOSING DOOR..." );
            PLAY_OBJECT_ANIM( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_SPEED( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", -0.65000000 );
            if (iParam1 == 1)
            {
                SET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.00000000 );
            }
            else
            {
                SET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 1.00000000 );
                g_U4235 = GET_SOUND_ID();
                PLAY_SOUND_FROM_OBJECT( g_U4235, "S_PANA_HELICOPTER_DOOR_OPEN", g_U3382 );
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_GBL_HELIPAD_DOOR_ANIMATE - END", 0 );
    return;
}

/* P_HP_CREATE_PLACEMENTS */ void sub_34132()
{
     /* WRITESCRIPTLOG */ sub_464( "CR", "P_CREATE_PLACEMENTS start", 0 );
    l_U372 =  /* CREATEPLACEMENT */ sub_34250( -4072149, -5.62500000, 8.35000000, 9.12000000, 0.00000000, 0.00000000, 34.00000000, 0, 0, 1, 100.00000000 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U372, ref g_U3311 );
    l_U373 =  /* CREATEPLACEMENT */ sub_34250( -4072149, -5.57500000, 8.25000000, 9.12000000, 0.00000000, 0.00000000, 34.00000000, 0, 0, 1, 100.00000000 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U373, ref g_U3311 );
     /* P_CREATE_S_PAN_GG_AK_01 */ sub_34511();
     /* P_SETUP_SAFE */ sub_35326();
     /* WRITESCRIPTLOG */ sub_464( "CR", "P_CREATE_PLACEMENTS end", 0 );
    return;
}

/* CREATEPLACEMENT */ void sub_34250(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_CREATE_S_PAN_GG_AK_01 */ void sub_34511()
{
     /* WRITESCRIPTLOG */ sub_464( "CO", "P_CREATE_S_PAN_GG_AK_01", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_34647( ref g_U773, g_U830, -1858240064, 374013514, -9.15000000, 1.03000000, 9.42000000, 1.50000000, 0.00000000, 1.50000000, "Deck4_Room" );
     /* P_CREATECOLLECTIBLE */ sub_34804( ref g_U773 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_34647(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_464( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_34804(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_464( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_34887( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_464( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_464( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_34887( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_5609( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_34250( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_464( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_464( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_34887(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_SETUP_SAFE */ void sub_35326()
{
     /* WRITESCRIPTLOG */ sub_464( "CO", "P_SETUP_SAFE start", 0 );
     /* CLEANOBJECT */ sub_5860( l_U466 );
     /* CLEANOBJECT */ sub_5860( l_U467 );
    l_U466 = CREATE_OBJECT_NO_OFFSET( -1321101597, l_U468, 0, 0 );
    l_U467 = CREATE_OBJECT_NO_OFFSET( -1246378211, l_U471, 0, 0 );
    l_U475 = 0;
    if ((DOES_OBJECT_EXIST( l_U466 )) == 1)
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U466, ref g_U3311 );
        PLAY_OBJECT_ANIM( l_U466, "P_PA_SafmainNEW_Aa_H", "pa_anim", 0.10000000, 0, 1 );
        SET_OBJECT_ANIM_CURRENT_TIME( l_U466, "P_PA_SafmainNEW_Aa_H", "pa_anim", 0.00100000 );
        SET_OBJECT_ANIM_SPEED( l_U466, "P_PA_SafmainNEW_Aa_H", "pa_anim", 0.00000000 );
        SET_OBJECT_PROOFS( l_U466, 1, 1, 1, 1, 1 );
        FREEZE_OBJECT_POSITION( l_U466, 1 );
    }
    if ((DOES_OBJECT_EXIST( l_U467 )) == 1)
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U467, ref g_U3311 );
        SET_OBJECT_HEADING( l_U467, 90.00000000 );
        FREEZE_OBJECT_POSITION( l_U467, 1 );
        SET_OBJECT_PROOFS( l_U467, 0, 1, 1, 1, 1 );
        l_U474 = GET_OBJECT_HEALTH( l_U467 );
    }
    return;
}

/* P_HP_PROPS_CREATE_BRIDGE_DOORS */ void sub_35829()
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_HP_PROPS_CREATE_BRIDGE_DOORS: START", 0 );
    g_U3383 =  /* CREATEOBJECTNOOFFSET */ sub_32370( g_U1573, l_U358, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U3383 )) == 1)
    {
        FREEZE_OBJECT_POSITION( g_U3383, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U3383, ref g_U3311 );
    }
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_HP_PROPS_CREATE_BRIDGE_DOORS: END", 0 );
    return;
}

/* F_GBL_HELIPAD_DOOR_IS_VISIBLE */ int sub_36123()
{
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_36171( g_U4203 ))
    {
        if (IS_SPHERE_VISIBLE( g_U4237, 0.20000000, 0 ))
        {
            return 1;
        }
    }
    return 0;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_36171(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_2601(  /* PLAYER_PED_ID */ sub_1011(), uParam0 );
}

/* DISABLETIMER */ void sub_36439(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* P_GBL_HELIPAD_DOOR_SET_LOCKED */ void sub_36524(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_GBL_HELIPAD_DOOR_SET_LOCKED - START", 0 );
    g_U4224 = uParam0;
     /* P_GBL_HELIPAD_DOOR_SET_LIGHT_LOCKED */ sub_36629( g_U4224 );
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_GBL_HELIPAD_DOOR_SET_LOCKED - END", 0 );
    return;
}

/* P_GBL_HELIPAD_DOOR_SET_LIGHT_LOCKED */ void sub_36629(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_464( "GA", "P_GBL_HELIPAD_DOOR_SET_ACTIVE start", 0 );
    if (bParam0)
    {
        if (DOES_OBJECT_EXIST( g_U4226 ))
        {
            SET_OBJECT_VISIBLE( g_U4226, 0 );
        }
        if (DOES_OBJECT_EXIST( g_U4225 ))
        {
            SET_OBJECT_VISIBLE( g_U4225, 1 );
        }
        if (DOES_OBJECT_EXIST( g_U4231 ))
        {
            SET_OBJECT_VISIBLE( g_U4231, 0 );
        }
        if (DOES_OBJECT_EXIST( g_U4230 ))
        {
            SET_OBJECT_VISIBLE( g_U4230, 1 );
        }
    }
    else if (DOES_OBJECT_EXIST( g_U4226 ))
    {
        SET_OBJECT_VISIBLE( g_U4226, 1 );
    }
    if (DOES_OBJECT_EXIST( g_U4225 ))
    {
        SET_OBJECT_VISIBLE( g_U4225, 0 );
    }
    if (DOES_OBJECT_EXIST( g_U4231 ))
    {
        SET_OBJECT_VISIBLE( g_U4231, 1 );
    }
    if (DOES_OBJECT_EXIST( g_U4230 ))
    {
        SET_OBJECT_VISIBLE( g_U4230, 0 );
    }
     /* WRITESCRIPTLOG */ sub_464( "GA", "P_GBL_HELIPAD_DOOR_SET_ACTIVE end", 0 );
    return;
}

/* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ void sub_37111()
{
     /* WRITESCRIPTLOG */ sub_464( "CR", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - START", 0 );
    g_U4062 = GET_PAYNEKILLER_AMT();
     /* WRITESCRIPTLOG */ sub_464( "CR", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - END", 0 );
    return;
}

/* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ void sub_37282()
{
    if (NOT ( /* HASTIMERBEENACTIVATED */ sub_3624( ref g_U4052 )))
    {
         /* P_CREATE_AND_START_TIMER */ sub_37352( ref g_U4052, g_U4061 );
    }
    if (((g_U4052._fU16) || ( /* ISTIMERDONE */ sub_3776( ref g_U4052 ))) AND ( /* F_GBL_HAS_PLAYER_JUST_ACQUIRED_PAIN_KILLERS */ sub_37415()))
    {
         /* WRITESCRIPTLOG */ sub_464( "MF", "Playing Speech: SPAN_MXFNDS1", 0 );
         /* P_SPEECH_PLAY_MONOLOGUE */ sub_37696( ref g_U4063, ref g_U1246 );
         /* RESETTIMER */ sub_4352( ref g_U4052 );
    }
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_37352(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_1424( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_1907( uParam0 );
    return;
}

/* F_GBL_HAS_PLAYER_JUST_ACQUIRED_PAIN_KILLERS */ int sub_37415()
{
    if (GET_PAYNEKILLER_AMT() > g_U4062)
    {
         /* WRITESCRIPTLOG */ sub_464( "CR", "Player picked up Payne Killers!", 0 );
        PRINTSTRING( "HAD: " );
         /* WRITE_INT */ sub_29488( g_U4062 );
        PRINTSTRING( "NOW: " );
         /* WRITE_INT */ sub_29488( GET_PAYNEKILLER_AMT() );
        g_U4062 = GET_PAYNEKILLER_AMT();
        return 1;
    }
    g_U4062 = GET_PAYNEKILLER_AMT();
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_37696(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_37734( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37843( 0,  /* PLAYER_PED_ID */ sub_1011(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37843( 1,  /* PLAYER_PED_ID */ sub_1011(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_38096( uParam0, uParam1, 8, 1 );
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_37734(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_37843(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_38096(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_38141( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_38141(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_38228( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_38228(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_38280( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_38798( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_38280(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_38798(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_HP_HANDLE_HELIPAD_DOOR_TRIGGERING */ void sub_39019()
{
    if (( /* F_ISPEDINTRIGGERBOX */ sub_2601( g_U3375[1], l_U292 )) || (( /* F_ISPEDINTRIGGERBOX */ sub_2601( g_U3375[0], l_U292 )) || (( /* F_ISPEDINTRIGGERBOX */ sub_2601( g_U3379[1], l_U292 )) || (( /* F_ISPEDINTRIGGERBOX */ sub_2601( g_U3379[0], l_U292 )) || ( /* F_ISPLAYERINTRIGGERBOX */ sub_36171( l_U292 ))))))
    {
        if ( /* F_GBL_HELIPAD_DOOR_IS_CLOSED */ sub_39163())
        {
            if (NOT ( /* HASTIMERBEENACTIVATED */ sub_3624( ref l_U313 )))
            {
                 /* STARTTIMER */ sub_1907( ref l_U313 );
            }
        }
    }
    else if ( /* F_GBL_HELIPAD_DOOR_IS_OPEN */ sub_39303())
    {
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_3624( ref l_U322 )))
        {
             /* STARTTIMER */ sub_1907( ref l_U322 );
        }
    }
    return;
}

/* F_GBL_HELIPAD_DOOR_IS_CLOSED */ int sub_39163()
{
    if ((GET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim" )) == 0.00000000)
    {
        return 1;
    }
    return 0;
}

/* F_GBL_HELIPAD_DOOR_IS_OPEN */ int sub_39303()
{
    if (DOES_OBJECT_EXIST( g_U3382 ))
    {
        if ((GET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim" )) == 1.00000000)
        {
            return 1;
        }
    }
    return 0;
}

/* P_HP_HANDLE_HELIPAD_DOOR_MOVEMENT */ void sub_39461()
{
    if ( /* ISTIMERDONE */ sub_3776( ref l_U313 ))
    {
         /* P_GBL_HELIPAD_DOOR_ANIMATE */ sub_33205( 1, 0 );
         /* RESETTIMER */ sub_4352( ref l_U313 );
    }
    if ( /* ISTIMERDONE */ sub_3776( ref l_U322 ))
    {
         /* P_GBL_HELIPAD_DOOR_ANIMATE */ sub_33205( 0, 0 );
         /* RESETTIMER */ sub_4352( ref l_U322 );
    }
    return;
}

/* F_HANDLE_PED_ARRAY_SPAWN */ int sub_39588(unknown uParam0, unknown uParam1, int iParam2, boolean bParam3, boolean bParam4, int iParam5, unknown uParam6)
{
    int iVar9;
    int iVar10;
    int Result;

    iVar9 =  /* F_GET_NUM_SPAWNED_PED_IN_ARRAY */ sub_39629( uParam0, uParam1 );
    if (iParam2 == -1)
    {
        iVar10 = (uParam0^);
    }
    else
    {
        iVar10 = iParam2;
    }
    if (iVar9 < iVar10)
    {
        if ((uParam1^)[iVar9]._fU16 == 0)
        {
            SCRIPT_ASSERT( "Invalid Ped Struct!  No Model Defined! Aborting Ped Spawn", 0 );
             /* WRITESCRIPTLOG */ sub_464( "MF", "Invalid Ped Struct!  No Model Defined! Aborting Ped Spawn", 0 );
            PRINTSTRING( "INVALID SPAWN INDEX: " );
             /* WRITE_INT */ sub_29488( iVar9 );
            return 0;
        }
        if (NOT (DOES_PED_EXIST( (uParam0^)[iVar9] )))
        {
             /* LOADMODEL */ sub_31839( (uParam1^)[iVar9]._fU16, uParam6 );
            (uParam0^)[iVar9] =  /* CREATEPED */ sub_40046( ref (uParam1^)[iVar9] );
            if (NOT bParam4)
            {
                SET_PED_VISIBLE( (uParam0^)[iVar9], bParam4 );
                 /* WRITE_STRING */ sub_8209( "SPAWNING INVISIBLE PED!!!" );
            }
            if (iParam5 == 1)
            {
                 /* P_DEACTIVATEPED */ sub_40837( (uParam0^)[iVar9] );
                 /* WRITE_STRING */ sub_8209( "Deactivating Ped..." );
            }
        }
    }
    if (bParam3)
    {
        if (iVar9 == (iVar10 - 1))
        {
             /* WRITESCRIPTLOG */ sub_464( "MF", "F_HANDLE_PED_ARRAY_SPAWN: Returning true Once.  If you see this looping, you likely have unitialized ped model data in your pedstruct array.", 0 );
            Result = 1;
        }
        return Result;
    }
    else if (iVar9 >= iVar10)
    {
        return 1;
    }
    return 0;
}

/* F_GET_NUM_SPAWNED_PED_IN_ARRAY */ void sub_39629(unknown uParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = (uParam1^);
    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (DOES_PED_EXIST( (uParam0^)[I] )))
        {
            if ((uParam1^)[I]._fU16 != 0)
            {
                if (I < Result)
                {
                    Result = I;
                }
            }
        }
    }
    return Result;
}

/* CREATEPED */ void sub_40046(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_31839( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_40537( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_40638( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_40537(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_40638(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_40837(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* P_HP_HELIPAD_REBEL_ATTACK_PLAYER */ void sub_41199()
{
    unknown uVar2;

     /* WRITESCRIPTLOG */ sub_464( "MF", "P_HP_HELIPAD_REBEL_ATTACK_PLAYER - START", 0 );
    OPEN_SEQUENCE_TASK( ref uVar2 );
    TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, 2.88000000, 3.59000000, 9.20000000,  /* PLAYER_PED_ID */ sub_1011(), 0, 10.00000000, 20.00000000, -1082130432, 3 );
    TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1011() );
    CLOSE_SEQUENCE_TASK( uVar2 );
    if ( /* ISPEDVALID */ sub_41382( g_U3379[0], 0 ))
    {
         /* F_GIVEPEDWEAPON */ sub_8600( g_U3379[0], 1308526797, 25000, 0, 0 );
        TASK_PERFORM_SEQUENCE( g_U3379[0], uVar2 );
         /* P_PED_REGISISTER_AND_LOCK_TARGET */ sub_41556( ref g_U3379[0],  /* PLAYER_PED_ID */ sub_1011() );
         /* P_TETHERPED */ sub_41683( ref l_U291, g_U3379[0], 1 );
        SET_PED_AI_TEMPLATE( g_U3379[0], ref g_U1472 );
        SET_PED_ALERTNESS( g_U3379[0], 3 );
    }
    if ( /* ISPEDVALID */ sub_41382( g_U3379[1], 0 ))
    {
         /* F_GIVEPEDWEAPON */ sub_8600( g_U3379[1], -184942895, 25000, 0, 0 );
        TASK_PERFORM_SEQUENCE( g_U3379[1], uVar2 );
         /* P_PED_REGISISTER_AND_LOCK_TARGET */ sub_41556( ref g_U3379[1],  /* PLAYER_PED_ID */ sub_1011() );
         /* P_TETHERPED */ sub_41683( ref l_U291, g_U3379[1], 1 );
        SET_PED_AI_TEMPLATE( g_U3379[1], ref g_U1472 );
        SET_PED_ALERTNESS( g_U3379[1], 3 );
    }
    CLEAR_SEQUENCE_TASK( uVar2 );
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_HP_HELIPAD_REBEL_ATTACK_PLAYER - END", 0 );
    return;
}

/* ISPEDVALID */ void sub_41382(unknown uParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((DOES_PED_EXIST( uParam0 )) == 1)
    {
        Result = 1;
    }
    else
    {
        Result = 0;
    }
    if (Result == 1)
    {
        if ((IS_PED_DEAD( uParam0 )) == 1)
        {
            if (iParam1 == 1)
            {
                Result = 1;
            }
            else
            {
                Result = 0;
            }
        }
        else
        {
            Result = 1;
        }
    }
    return Result;
}

/* P_PED_REGISISTER_AND_LOCK_TARGET */ void sub_41556(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( (uParam0^) ))) AND (NOT (IS_PED_DEAD( uParam1 ))))
    {
        CLEAR_LOCKED_TARGET( (uParam0^) );
        REGISTER_TARGET( (uParam0^), uParam1 );
        SET_LOCKED_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* P_TETHERPED */ void sub_41683(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_HP_BRIDGE_REBELS_SETUP */ void sub_42027()
{
    int I;

     /* WRITESCRIPTLOG */ sub_464( "MF", "P_HP_BRIDGE_REBELS_SETUP: START", 0 );
     /* P_SETUP_AI_GROUP */ sub_42119( ref l_U255, 1.00000000, 0 );
    for ( I = 0; I < 3; I++ )
    {
        if (NOT (IS_PED_DEAD( g_U3375[I] )))
        {
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_42551( g_U3375[I], ref l_U255 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U3375[I], 1 );
            SET_ROOM_FOR_PED_BY_NAME( g_U3375[I], ref g_U3311 );
            SET_PED_ALERTNESS( g_U3375[I], 3 );
             /* P_TETHERPED */ sub_41683( ref l_U291, g_U3375[I], 1 );
             /* P_PED_REGISISTER_AND_LOCK_TARGET */ sub_41556( ref g_U3375[I],  /* PLAYER_PED_ID */ sub_1011() );
        }
    }
    if ( /* ISPEDVALID */ sub_41382( g_U3375[0], 0 ))
    {
        SET_PED_AI_TEMPLATE( g_U3375[0], ref g_U1480 );
        SET_PED_COMBAT_RANGE_MIN( g_U3375[0], 3 );
        SET_PED_COMBAT_RANGE_MAX( g_U3375[0], 15 );
        SET_PED_COMBAT_MOVEMENT( g_U3375[0], 2 );
        SET_PED_FIELD_OF_VIEW( g_U3375[0], 60.00000000, -1030356992, 1114636288 );
         /* F_GIVEPEDWEAPON */ sub_8600( g_U3375[0], -184942895, 25000, 0, 0 );
    }
    if ( /* ISPEDVALID */ sub_41382( g_U3375[1], 0 ))
    {
        SET_PED_AI_TEMPLATE( g_U3375[1], ref g_U1504 );
        SET_PED_COMBAT_RANGE_MIN( g_U3375[1], 4 );
        SET_PED_COMBAT_RANGE_MAX( g_U3375[1], 15 );
         /* F_GIVEPEDWEAPON */ sub_8600( g_U3375[1], 1308526797, 25000, 0, 0 );
    }
    if ( /* ISPEDVALID */ sub_41382( g_U3375[2], 0 ))
    {
        SET_PED_AI_TEMPLATE( g_U3375[2], ref g_U1504 );
        SET_PED_COMBAT_RANGE_MIN( g_U3375[2], 4 );
        SET_PED_COMBAT_RANGE_MAX( g_U3375[2], 15 );
         /* F_GIVEPEDWEAPON */ sub_8600( g_U3375[2], -184942895, 25000, 0, 0 );
    }
     /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_43394( ref g_U3375, "piGBL_BRIDGE_REBELS" );
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_HP_BRIDGE_REBELS_SETUP: END", 0 );
    return;
}

/* P_SETUP_AI_GROUP */ void sub_42119(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_42551(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_8209( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_42119( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_42119( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_43394(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_43580(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_2601(  /* PLAYER_PED_ID */ sub_1011(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* P_HP_BRIDGE_DOOR_PLAY_SOUND */ void sub_43724()
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_HP_BRIDGE_DOOR_PLAY_SOUND start", 0 );
    if (DOES_OBJECT_EXIST( g_U3383 ))
    {
        PLAY_SOUND_FROM_OBJECT( l_U370, "BRIDGE_DOOR_OPEN", g_U3383 );
    }
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_HP_BRIDGE_DOOR_PLAY_SOUND end", 0 );
    return;
}

/* P_HP_PROPS_OPEN_BRIDGE_DOORS */ void sub_43937()
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_HP_PROPS_OPEN_BRIDGE_DOORS: START", 0 );
    if ((DOES_OBJECT_EXIST( g_U3383 )) == 1)
    {
        PLAY_OBJECT_ANIM( g_U3383, "P_BRDGDRSANIM_H", "pa_doors", 0.00000000, 0, 1 );
        SET_OBJECT_ANIM_CURRENT_TIME( g_U3383, "P_BRDGDRSANIM_H", "pa_doors", 0.00000000 );
        SET_OBJECT_ANIM_SPEED( g_U3383, "P_BRDGDRSANIM_H", "pa_doors", 1.20000000 );
    }
     /* WRITESCRIPTLOG */ sub_464( "CR", "Playing audio music one shot PANAMA_OS_4", 0 );
    AUDIO_MUSIC_PLAY_ONESHOT();
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_HP_PROPS_OPEN_BRIDGE_DOORS: END", 0 );
    return;
}

/* P_HP_BRIDGE_REBELS_START_COMBAT */ void sub_44309()
{
    unknown uVar2;
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_464( "MF", "P_HP_BRIDGE_REBELS_START_COMBAT: START", 0 );
    OPEN_SEQUENCE_TASK( ref uVar2 );
    TASK_PAUSE( 0, 750 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1011() );
    CLOSE_SEQUENCE_TASK( uVar2 );
     /* TELEPORTPED */ sub_44485( g_U3375[0], -10.32000000, 3.82000000, 8.21000000, -90.00000000 );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() ))) AND (NOT (IS_PED_DEAD( g_U3375[0] ))))
    {
        REGISTER_TARGET( g_U3375[0],  /* PLAYER_PED_ID */ sub_1011() );
        TASK_PERFORM_SEQUENCE( g_U3375[0], uVar2 );
    }
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() ))) AND (NOT (IS_PED_DEAD( g_U3375[1] ))))
    {
        REGISTER_TARGET( g_U3375[1],  /* PLAYER_PED_ID */ sub_1011() );
        TASK_PERFORM_SEQUENCE( g_U3375[1], uVar2 );
    }
    CLEAR_SEQUENCE_TASK( uVar2 );
    OPEN_SEQUENCE_TASK( ref uVar3 );
    TASK_COMBAT_MOVE_TO_COVER( 0, "GenCover", "981380D9_D680D911_Popover2",  /* PLAYER_PED_ID */ sub_1011() );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1011() );
    CLOSE_SEQUENCE_TASK( uVar3 );
    if (NOT (IS_PED_DEAD( g_U3375[2] )))
    {
        SET_PED_FLAG_BLOCK_BLINDFIRE_IN_COVER( g_U3375[2], 1 );
        TASK_PERFORM_SEQUENCE( g_U3375[2], uVar3 );
    }
    CLEAR_SEQUENCE_TASK( uVar3 );
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_HP_BRIDGE_REBELS_START_COMBAT: END", 0 );
    return;
}

/* TELEPORTPED */ void sub_44485(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_CLEANUP_TOP_DECK */ void sub_45419()
{
     /* CLEANPEDARRAY */ sub_5692( ref g_U3349 );
     /* CLEANVEHICLE */ sub_45464( g_U3359 );
     /* CLEANVEHICLE */ sub_45464( g_U3361 );
     /* CLEANVEHICLE */ sub_45464( g_U3360 );
     /* CLEANPED */ sub_5742( g_U3362 );
     /* CLEANPED */ sub_5742( g_U3363 );
     /* CLEANPED */ sub_5742( g_U3364 );
     /* CLEANPED */ sub_5742( g_U3365 );
     /* CLEANPEDARRAY */ sub_5692( ref g_U3366 );
     /* CLEANPEDARRAY */ sub_5692( ref g_U4148 );
     /* CLEANPLACEMENT */ sub_5609( g_U3373 );
     /* CLEANPLACEMENT */ sub_5609( g_U3374 );
    if (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "PANAMA_OS_4" ))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
    return;
}

/* CLEANVEHICLE */ void sub_45464(unknown uParam0)
{
    if (IS_VEHICLE_DEAD( uParam0 ))
    {
        ;
    }
    if (DOES_VEHICLE_EXIST( uParam0 ))
    {
        DELETE_VEHICLE( ref uParam0 );
    }
    return;
}

/* F_CUTSYS_TRIGGERGENERAL */ int sub_46106(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, boolean bParam24, unknown uParam25)
{
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1011() )))
    {
        if (((uParam0^) < 3) AND ((uParam0^) > 1))
        {
            if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_36171( uParam1 )))
            {
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "Resetting Cutscene Blend In...", 0 );
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "Disabling forced walk...", 0 );
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1011(), 0 );
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "Disabling forced run...", 0 );
                SET_PED_FORCED_TO_RUN(  /* PLAYER_PED_ID */ sub_1011(), 0 );
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "Enabling shootdodge...", 0 );
                SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1049(), 1 );
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "Unloading cutscene...", 0 );
                CLEAR_NAMED_CUTSCENE( uParam22 );
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "eCutsceneBlendInRef - STATE_CUTSCENE_BLEND_IN_INIT", 0 );
                (uParam0^) = 0;
            }
        }
        switch ((uParam0^))
        {
            case 0:
             /* CREATETIMER */ sub_1424( uParam23, 0, 1, 0 );
             /* STARTTIMER */ sub_1907( uParam23 );
             /* WRITESCRIPTLOG */ sub_464( "CCB", "eCutsceneBlendInRef - STATE_CUTSCENE_BLEND_IN_TRIGGER", 0 );
            (uParam0^) = 1;
            break;
            case 1:
            if ( /* F_ISPLAYERINTRIGGERBOX */ sub_36171( uParam1 ))
            {
                if (NOT bParam24)
                {
                     /* WRITESCRIPTLOG */ sub_464( "CCB", "Enabling forced walk...", 0 );
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1011(), 1 );
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_464( "CCB", "Enabling forced run...", 0 );
                    SET_PED_FORCED_TO_RUN(  /* PLAYER_PED_ID */ sub_1011(), 1 );
                }
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "Disabling shootdodge...", 0 );
                SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1049(), 0 );
                if (NOT (CUTSCENE_IS_LOADED( uParam22 )))
                {
                     /* WRITESCRIPTLOG */ sub_464( "CCB", "Loading the cutscene...", 0 );
                    PRE_STREAM_SEAMLESS_CUTSCENE( uParam22 );
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_464( "CCB", "The cutscene is already loaded.", 0 );
                }
                 /* CREATETIMER */ sub_1424( uParam23, uParam25, 1, 0 );
                 /* STARTTIMER */ sub_1907( uParam23 );
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "eCutsceneBlendInRef - STATE_CUTSCENE_BLEND_IN_WAIT", 0 );
                (uParam0^) = 2;
            }
            break;
            case 2:
            if ( /* ISTIMERDONE */ sub_3776( uParam23 ))
            {
                 /* WRITESCRIPTLOG */ sub_464( "CCB", "eCutsceneBlendInRef - STATE_CUTSCENE_BLEND_IN_COMPLETE", 0 );
                (uParam0^) = 3;
            }
            break;
            case 3:
            return 1;
            break;
        }
    }
    return 0;
}

/* P_RELEASE_HELIPAD_ASSETS */ void sub_47165()
{
     /* WRITESCRIPTLOG */ sub_464( "MF", "P_RELEASE_HELIPAD_ASSETS", 0 );
     /* P_SAFE_RELEASE_SOUND_ID */ sub_5360( ref l_U370 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_47257( ref l_U176, ref g_U1588 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_48487( ref l_U187, ref g_U1829 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_48952( "SCRIPT_MISSION\S_PANA_YACHT_BRIDGE_DOOR", ref g_U3026 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_49306( "DAM_DEAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_49306( "pa_anim", ref g_U1975 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_47257(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_47330( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_47330(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_47474( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_47474(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_48487(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_48561( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_48561(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_47474( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_48952(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_47474( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_49306(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_47474( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_49702(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_49745( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_49745(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* KILL_SPEECH */ void sub_49962(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_49745( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

