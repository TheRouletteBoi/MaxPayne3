void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U58 = 0;
    l_U59 = 0;
    l_U60 = 1500;
    l_U70 = {0, 0, 0};
    StrCopy( ref l_U73, "DUMMY", 32 );
    l_U81 = 1;
    l_U86 = 0;
    l_U87 = 0;
    l_U88 = 0;
    l_U91 = 0;
    l_U136 = -1;
    l_U137 = {64536, 64536, 64536};
    l_U187 = 0;
    l_U189 = 0;
    l_U661 = {42.23932000, 10.95628000, 2.26695600};
    l_U664 = {42.90765000, -3.17603600, 2.26707200};
    l_U667 = {49.74000000, 2.98000000, 3.02000000};
    l_U759 = -1;
    l_U1004 = {51.88000000, 3.49000000, -0.51000000};
    l_U1007 = -84.15000000;
    l_U1008 = 8000;
    l_U1029 = 0;
     /* WRITESCRIPTLOG */ sub_489( "SP", "Script s_pana_MD1.sc is starting up...", 0 );
     /* P_MD1_POPULATE_SCRIPT_ARRAYS */ sub_607();
    l_U187 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_886();
        if (l_U189 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_11400();
        }
         /* P_MD_DEBUG_TUNING_WIDGET */ sub_65823();
        WAIT( 0 );
    }
     /* P_CLEANUP_MD1 */ sub_3359();
     /* P_RELEASE_MD1_ASSETS */ sub_66196();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_pana_MD1" );
     /* WRITESCRIPTLOG */ sub_489( "SP", "Script s_pana_MD1.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_489(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_MD1_POPULATE_SCRIPT_ARRAYS */ void sub_607()
{
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_MD1_POPULATE_SCRIPT_ARRAYS start", 0 );
    l_U176[0] = g_U1515;
    l_U176[1] = g_U1526;
    l_U176[2] = -409680696;
    l_U176[3] = 1914709263;
    l_U176[4] = 301129366;
    l_U176[5] = g_U828;
    l_U176[6] = -1409914275;
    l_U184[0] = -612753081;
    l_U184[1] = -1404433099;
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_MD1_POPULATE_SCRIPT_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_886()
{
    if (g_U834 == 3)
    {
        switch (l_U189)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1094()) || ((g_U1243) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() ))))
            {
                l_U189 = 1;
                 /* WRITESCRIPTLOG */ sub_489( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_1612())
            {
                l_U189 = 2;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_1672( 0 )) == 1)
            {
                l_U189 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )))
            {
                l_U189 = 3;
                 /* WRITESCRIPTLOG */ sub_489( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_489( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1025() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1025(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_987() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_987(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
             /* P_CLEANUP_MD1 */ sub_3359();
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "Deck1exit", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "Deck1exit", 0 ), GET_HASH_KEY( ref g_U3223 ) );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "Deck2", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "Deck2", 0 ), GET_HASH_KEY( ref g_U3231 ) );
            LOAD_SCENE( 46.59128000, 3.98778500, 3.97410100 );
            l_U189 = 4;
             /* WRITESCRIPTLOG */ sub_489( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_489( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U140._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_6718( ref l_U140,  /* PLAYER_PED_ID */ sub_987() );
            }
            l_U189 = 5;
             /* WRITESCRIPTLOG */ sub_489( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_489( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U187 = 1;
            l_U189 = 0;
            g_U1243 = 0;
             /* WRITESCRIPTLOG */ sub_489( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_987()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1025() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1025()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1094()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_987(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1025(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1025(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_987() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_987(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_1612()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_1672(int iParam0)
{
    iParam0 = 1;
    switch (l_U59)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_1754( ref l_U61 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )))
            {
                l_U60 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1888( ref l_U61, l_U60, 1, 1 );
             /* STARTTIMER */ sub_2038( ref l_U61 );
        }
        if ( /* ISTIMERDONE */ sub_2171( ref l_U61 ))
        {
             /* WRITESCRIPTLOG */ sub_489( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1025() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1025(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U59 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U59 = 2;
            }
            else
            {
                l_U59 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_489( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_2672();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_489( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_2672();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_1754(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_1888(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2038(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2171(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_2672()
{
     /* WRITESCRIPTLOG */ sub_489( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_2747( ref l_U61 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1025() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1025(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U58 = 0;
    l_U58 = l_U58;
    l_U59 = 0;
    return;
}

/* RESETTIMER */ void sub_2747(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_CLEANUP_MD1 */ void sub_3359()
{
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_CLEANUP_MD1 start", 0 );
    SET_BCAM_STR_HELPER_TRACK_PLAYER( 0 );
    ISEQ_TERMINATE( -1991124254 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3447( -1991124254, ref g_U1878 );
    ISEQ_TERMINATE( -829350039 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3447( -829350039, ref g_U1878 );
     /* P_ENABLE_POI */ sub_4543( ref l_U190._fU0, 0 );
     /* P_ENABLE_POI */ sub_4543( ref l_U286._fU0, 0 );
     /* CLEANPEDARRAY */ sub_5562( ref l_U676 );
     /* CLEANPEDARRAY */ sub_5562( ref g_U3319 );
     /* CLEANPED */ sub_5612( l_U736 );
     /* CLEANCAMERA */ sub_5739( ref l_U1019 );
     /* CLEANPLACEMENTARRAY */ sub_5835( ref l_U423 );
     /* CLEANPLACEMENT */ sub_5890( g_U737._fU0 );
     /* P_SAFE_STOP_SOUND */ sub_5987( l_U759, 0 );
     /* P_SAFE_RELEASE_SOUND_ID */ sub_6170( ref l_U759 );
    if (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "PANAMA_OS_3" ))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_CLEANUP_MD1 end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_3447(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3585( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_3585(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_ENABLE_POI */ void sub_4543(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if ((iParam0->_fU4 == 1) AND (iParam0->_fU320 == 1))
        {
             /* P_ENABLEPOIGLINT */ sub_4602( iParam0, 1 );
        }
        iParam0->_fU0 = 1;
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_4602( iParam0, 0 );
         /* P_ENABLEPOIINTERACTIONTEXT */ sub_4821( iParam0, 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )) == 0)
        {
            TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_987() );
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_987(), 0 );
                iParam0->_fU328 = 0;
            }
        }
        iParam0->_fU8 = 0;
        iParam0->_fU0 = 0;
    }
    return;
}

/* P_ENABLEPOIGLINT */ void sub_4602(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if (iParam0->_fU12 != nil)
        {
            if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
            {
                ENABLE_GLINT( iParam0->_fU12, 1 );
            }
            else
            {
                iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
            }
        }
        else
        {
            iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
        }
    }
    else if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            ENABLE_GLINT( iParam0->_fU12, 0 );
        }
    }
    return;
}

/* P_ENABLEPOIINTERACTIONTEXT */ void sub_4821(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
        SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
        if ((iParam0->_fU72 == 0) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU68 == 1)))
        {
            SET_INTERACTIONTEXT_VISIBLE( 0 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
        else
        {
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_5001( iParam0 );
        if (iParam0->_fU332 == 1)
        {
            SET_INTERACTIONTEXT_PULSE( 1 );
            SET_INTERACTIONTEXT_PULSE_PERIOD( iParam0->_fU336 );
        }
    }
    else
    {
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
    }
    return;
}

/* P_UPDATEINTERACTIONTEXTAVAILABLE */ void sub_5001(int iParam0)
{
    if (iParam0->_fU60 == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 0 );
        iParam0->_fU56 = 0;
    }
    else if (iParam0->_fU56 == 1)
    {
        if (( /* F_ISACTIONINGAVAILABLE */ sub_5097( iParam0 )) == 0)
        {
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
    }
    else if (( /* F_ISACTIONINGAVAILABLE */ sub_5097( iParam0 )) == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 1 );
        iParam0->_fU56 = 1;
    };;;
    return;
}

/* F_ISACTIONINGAVAILABLE */ int sub_5097(int iParam0)
{
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1025() )) == 0))
    {
        if (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_987() )) == 1) || (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_987() )) == 1) || (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_987() )) == 1) || (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_987() )) == 1) || (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_987() )) == 1) || (IS_PLAYER_SHOOTDODGING() == 1))))))
        {
            return 0;
        }
        if (iParam0->_fU304 == 0)
        {
            if ((IS_MONOLOGUE_PLAYING() == 1) || ((IS_ANY_SPEECH_PLAYING(  /* PLAYER_PED_ID */ sub_987() )) == 1))
            {
                return 0;
            }
        }
        return 1;
    }
    return 0;
}

/* CLEANPEDARRAY */ void sub_5562(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_5612( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_5612(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANCAMERA */ void sub_5739(unknown uParam0)
{
    if ((DOES_CAM_EXIST( (uParam0^) )) == 1)
    {
        if ((IS_CAM_ACTIVE( (uParam0^) )) == 1)
        {
            SET_CAM_ACTIVE( (uParam0^), 0 );
        }
        DESTROY_CAM( (uParam0^) );
    }
    (uParam0^) = nil;
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_5835(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_5890( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_5890(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_SAFE_STOP_SOUND */ void sub_5987(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
         /* WRITESCRIPTLOG */ sub_489( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_489( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

/* P_SAFE_RELEASE_SOUND_ID */ void sub_6170(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
         /* WRITESCRIPTLOG */ sub_489( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_489( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_6718(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_489( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_6937( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_8101( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8415( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8894( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8415( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8894( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8415( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8894( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9210( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8894( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9210( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8894( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_9782( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_9984( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_987(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_489( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_6937(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6999( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_6999(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_8101(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_8415(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_8819( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_8819(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_8894(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_9210(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_8819( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_9782(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_9984(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6999( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_10082( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_10082(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_11400()
{
    int iVar2;
    unknown uVar3;

    iVar2 = l_U187;
    if (g_U4176 == 1)
    {
        if (NOT (IS_OBJECT_PLAYING_ANIM( g_U4167, "P_LockGate", "pa_doors" )))
        {
             /* P_SAFE_STOP_SOUND */ sub_5987( g_U4175, 0 );
             /* P_SAFE_RELEASE_SOUND_ID */ sub_6170( ref g_U4175 );
             /* WRITE_STRING */ sub_8819( "Stopping boat aft Lock Gate sound" );
            g_U4176 = 0;
        }
    }
    if (g_U4080 == 1)
    {
        if ((GET_OBJECT_ANIM_CURRENT_TIME( g_U4075, "P_MI_DoorsAnim_H", "pa_doors" )) <= 0.00000000)
        {
             /* P_SAFE_STOP_SOUND */ sub_5987( g_U4081, 0 );
             /* P_SAFE_RELEASE_SOUND_ID */ sub_6170( ref g_U4081 );
            g_U4080 = 0;
        }
    }
    if (g_U4079 == 1)
    {
        if ((GET_OBJECT_ANIM_CURRENT_TIME( g_U4075, "P_MI_DoorsAnim_H", "pa_doors" )) >= 1.00000000)
        {
             /* P_SAFE_STOP_SOUND */ sub_5987( g_U4081, 0 );
             /* P_SAFE_RELEASE_SOUND_ID */ sub_6170( ref g_U4081 );
            g_U4079 = 0;
        }
    }
     /* P_MD_HANDLE_POI_PARTICLE_EFFECTS */ sub_11738();
    switch (l_U187)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_489( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_14085();
         /* P_SET_STATIC_DATA */ sub_14345();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U187 = 2;
         /* WRITESCRIPTLOG */ sub_489( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_489( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_MD1_PERSISTENT_ASSETS */ sub_18087();
         /* P_REQUEST_MD1_NONPERSISTENT_ASSETS */ sub_27743();
        l_U187 = 3;
         /* WRITESCRIPTLOG */ sub_489( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_32382( ref g_U1878 )) AND (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_32008( ref g_U3026 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_31617( ref g_U1975 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_31215( ref g_U1829 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_30818( ref g_U1588 ))))))
        {
            if ((NOT l_U140._fU0) AND (g_U833 == 3))
            {
                l_U187 = 4;
                 /* WRITESCRIPTLOG */ sub_489( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U187 = 6;
                 /* WRITESCRIPTLOG */ sub_489( "SP", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U1230[3] = 1;
        if (( /* HAS_SAVEFILE_LOADED */ sub_33026( ref l_U140 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_9210(  /* PLAYER_PED_ID */ sub_987(), -612753081, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8415(  /* PLAYER_PED_ID */ sub_987(), -1404433099, 1, 200, 0 );
            l_U187 = 5;
             /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U187 = 6;
             /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_987(), 1 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_987(), 0, 0 ) )))
            {
                l_U187 = 6;
                 /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 6:
        if (l_U188)
        {
             /* P_GLOBAL_CREATE_LOCKS */ sub_33562( 0, 0 );
             /* P_CREATE_PLACEMENTS */ sub_34637();
        }
        if (g_U1230[3])
        {
            if (g_U834 != 3)
            {
                l_U187 = 7;
                 /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_MD1_STARTING_FROM_FLOW", 0 );
            }
            else
            {
                l_U187 = 8;
                 /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_MD1_STARTING_DIRECTLY", 0 );
            }
            if (NOT l_U140._fU0)
            {
                g_U834 = 3;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_36021( ref l_U140, g_U834,  /* PLAYER_PED_ID */ sub_987(), g_U980[3], g_U1086[3], g_U1158[3], g_U1122[3], 1 );
            }
        }
        break;
        case 7:
         /* P_GLOBAL_LOCK_1_GATES_CLOSE */ sub_40624();
         /* P_GLOBAL_YACHT_REAR_DOOR_OPEN */ sub_41032();
        AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2_3", "PANAMA_FINAL_2_3", 0.00000000, 5000, -1, -1082130432, 0 );
         /* WRITESCRIPTLOG */ sub_489( "CR", "MUSIC: Playing PANAMA_FINAL Mood: PANAMA_FINAL_2_3", 0 );
        l_U187 = 9;
         /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_MD1_GAMEPLAY", 0 );
        break;
        case 8:
        if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1025() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1025(), 1, 0 );
        }
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )))
        {
            FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_987(), 0 );
        }
         /* P_GLOBAL_CREATE_YACHT_BAY_DOORS */ sub_41669();
        AUD_SET_IS_POWER_ON( 0 );
         /* P_MD_SET_LOCK_AND_BAY_DOORS_FOR_CHECKPOINT */ sub_42199();
        DO_SCREEN_FADE_IN( 500 );
        if (NOT AUDIO_IS_MUSIC_PLAYING())
        {
            AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2_3", "PANAMA_FINAL_2_3", 0, -1, -1, -1082130432, 0 );
             /* WRITESCRIPTLOG */ sub_489( "CR", "Playing: PANAMA_FINAL Mood: PANAMA_FINAL_2_3", 0 );
        }
        l_U187 = 9;
         /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_MD1_GAMEPLAY", 0 );
        break;
        case 9:
        if (l_U188)
        {
             /* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ sub_42682();
            if (NOT l_U391)
            {
                 /* STARTTIMER */ sub_2038( ref l_U382 );
            }
        }
         /* P_MD1_HANDLE_MAX_FALLING_INTO_THE_WATER */ sub_42873();
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_44775( ref l_U676, 5.60000000, 1, 0 );
         /* P_PED_Z_SAFETY_CHECK */ sub_44841( l_U736, 2.00000000, 1, 1 );
         /* P_HANDLE_BLOOD_SPLASH_POI */ sub_44991();
         /* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ sub_46783();
        if ( /* ISTIMERDONE */ sub_2171( ref l_U382 ))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_47197( "SPAN_THDRSPN1", ref g_U1246 );
            l_U391 = 1;
             /* WRITESCRIPTLOG */ sub_489( "CR", "Playing monologue - SPAN_THDRSPN1 - So, this was famous Panama Canal...", 0 );
        }
        if ((NOT l_U401) AND ( /* F_IS_PED_ARRAY_DEFEATED */ sub_47454( ref l_U676, 1 )))
        {
             /* STARTTIMER */ sub_2038( ref l_U392 );
            l_U401 = 1;
        }
        if ( /* ISTIMERDONE */ sub_2171( ref l_U392 ))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_47197( "SPAN_MXGND1", ref g_U1246 );
             /* WRITESCRIPTLOG */ sub_489( "CR", "Playing monologue - SPAN_MXGND1 - It was a different scene than the one I'd stumbled...", 0 );
        }
        if ( /* F_IS_PED_ARRAY_DEFEATED */ sub_47454( ref l_U676, 0 ))
        {
            if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_43054( ref l_U402, 0 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_47197( "SPAN_MXGND3", ref g_U1246 );
                 /* WRITESCRIPTLOG */ sub_489( "CR", "Playing monologue - SPAN_MXGND3 - I didn't like to think what was behind the door....", 0 );
            }
        }
        if (((g_U835[2]._fU40 == 4) || (g_U835[2]._fU40 == 0)) AND (NOT g_U835[4]._fU36))
        {
             /* P_START_CHECKPOINT_THREAD */ sub_48176( ref g_U835[4] );
        }
        if (( /* F_HAS_PED_ARRAY_SPAWNED */ sub_47493( ref l_U676, 1 )) == 1)
        {
            uVar3 =  /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_48251( ref l_U676 );
            if (NOT (IS_PED_DEAD( uVar3 )))
            {
                SET_BULLET_CAM_PREF( uVar3, "PIST_NORMAL_05_MF", "SMG_NORMAL_04_F", "ALL_LMS_01", "", 0, 0, 0, 0, 0, 0, 0, 0 );
            }
        }
        if (( /* F_HANDLE_PED_ARRAY_SPAWN */ sub_48519( ref l_U676, ref l_U681, -1, 1, 1, 0, 1 )) == 1)
        {
             /* P_MD_BALCONY_REBEL_SETUP */ sub_50132();
             /* P_MD_GYM_EXECUTE_PED_SPAWN */ sub_52001();
        }
        if (NOT l_U811)
        {
            if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_43054( ref l_U790, 0 )) || ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_43054( ref l_U769, 0 )))
            {
                 /* P_MD_GLASS_BREAK_HACK_BALCONY */ sub_52405();
                 /* P_MD_GLASS_BREAK_HACK_LOUNGE */ sub_52600();
                if ( /* F_ISPLAYERINTRIGGERBOX */ sub_52800( l_U769 ))
                {
                     /* P_MD_GYM_EXECUTE_PEDS_SETUP_LEFT_STAIRS */ sub_52861();
                }
                else if ( /* F_ISPLAYERINTRIGGERBOX */ sub_52800( l_U790 ))
                {
                     /* P_MD_GYM_EXECUTE_PEDS_SETUP_RIGHT_STAIRS */ sub_53177();
                }
                else
                {
                    SCRIPT_ASSERT( "FAILED TO SET UP GYM EXECUTION!", 0 );
                }
                SET_BCAM_STR_HELPER_TRACK_PLAYER( 1 );
                 /* P_MD_GYM_CIV_VICTIM_SCREAM */ sub_53464();
                 /* P_MD_GYM_EXECUTE_PEDS_ANIMATE */ sub_54025();
                 /* P_MD_BALCONY_REBEL_ATTACK */ sub_54361();
                 /* STARTTIMER */ sub_2038( ref l_U750 );
                 /* STARTTIMER */ sub_2038( ref l_U760 );
                l_U811 = 1;
            }
        }
        if ( /* ISTIMERDONE */ sub_2171( ref l_U760 ))
        {
             /* P_MD_GYM_CIV_VICTIM_DEATHSCREAM */ sub_55261();
        }
        if (NOT (IS_PED_DEAD( l_U736 )))
        {
            if (( /* ISTIMERDONE */ sub_2171( ref l_U750 )) == 1)
            {
                SET_PED_ONLY_DAMAGED_BY_PLAYER( l_U736, 0 );
            }
        }
        if (NOT l_U812)
        {
            if ( /* ISPEDVALID */ sub_50224( l_U736, 1 ))
            {
                if ((IS_PED_DEAD( l_U736 )) || (( /* MAL_GETACTINTSTATUS */ sub_55548( l_U736, 47 )) == 1))
                {
                     /* MAL_FINISHACTINT */ sub_55645( ref l_U736, 47 );
                     /* P_MD_GYM_SETUP_EXECUTOR_COMBAT */ sub_55710();
                     /* P_MD_GYM_CIV_VICTIM_KILLED */ sub_55816();
                    l_U812 = 1;
                }
            }
        }
        if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_43054( ref l_U813, 0 )) == 1)
        {
             /* P_GLOBAL_CREATE_YACHT_BAY_DOORS */ sub_41669();
             /* P_GLOBAL_YACHT_REAR_DOOR_CLOSE */ sub_56203();
             /* CLEANOBJECT */ sub_33647( g_U4071 );
        }
        if ( /* CUTSYS_HANDLETRIGGERTYPEDOOR_NOHOLSTERING */ sub_56603( ref l_U834, ref l_U855, 0, 0 ))
        {
            g_U1230[4] = 1;
             /* P_GLOBAL_MAIN_DECK_BODIES_SAVE */ sub_56864( l_U676[0], l_U676[1], l_U676[2], l_U676[3], l_U736 );
            l_U187 = 15;
             /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 10:
        if (l_U188)
        {
             /* NIS_PRE_SETUP */ sub_44272( 1, 0, 0, 1 );
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )))
            {
                 /* MAL_SETPEDVISIBLE */ sub_57797(  /* PLAYER_PED_ID */ sub_987(), 0 );
                 /* P_RESET_MAX_ACTION_TREE */ sub_58020();
                RESET_PLAYER_INPUT_GAIT( 0 );
                TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_987() );
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_987() );
            }
            CAMERA_PLAY_ANIMATED( "EXPL_CAM", "EXPL_CAM_GND_45_F_CAM", 1, l_U1004, l_U1007, 0, 0 );
            if (NOT (HAS_EXPLORATION_ITEM_BEEN_FOUND( "span_BloodTrail" )))
            {
                 /* KILL_ANY_MISSION_SPEECH */ sub_58477( 0 );
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_47197( "SPAN_EXPBLDT", ref l_U1009 );
                FOUND_EXPLORATION_ITEM( "span_BloodTrail" );
            }
        }
        if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "EXPL_CAM", "EXPL_CAM_GND_45_F_CAM" )) - l_U1008))
        {
             /* MAL_SETPEDVISIBLE */ sub_57797(  /* PLAYER_PED_ID */ sub_987(), 1 );
            CAMERA_ANIMATED_STOP( 0, 0 );
             /* NIS_POST_SETUP */ sub_58808( 0, 0 );
             /* P_ENABLE_POI */ sub_4543( ref l_U876, 1 );
            l_U187 = 9;
             /* WRITESCRIPTLOG */ sub_489( "CR", "eCheckpointState = CP_MD1_GAMEPLAY", 0 );
        }
        break;
        case 11:
        if (CUTSCENE_IS_LOADED( "MID_02_PANAMA_concat" ))
        {
            CLEAR_NAMED_CUTSCENE( "MID_02_PANAMA_concat" );
        }
        if ((NOT (CUTSCENE_IS_LOADED( "MID_02_PANAMA_concat" ))) AND (NOT (CUTSCENE_NAMED_IS_LOADING( "MID_02_PANAMA_concat" ))))
        {
            l_U187 = 12;
             /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_MD1_LOAD_MID_01C_PANAMA", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_489( "GA", "Waiting to unload MID_02_PANAMA_concat", 0 );
        }
        break;
        case 12:
        if (l_U188)
        {
             /* LOADSEAMLESSCUTSCENE */ sub_59469( "MID_01C_PANAMA", 0 );
        }
        if (CUTSCENE_IS_LOADED( "MID_01C_PANAMA" ))
        {
            l_U187 = 13;
             /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_HANDLE_MID_01C_PANAMA", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_489( "GA", "Waiting to load cutscene MID_01C_PANAMA", 0 );
        }
        break;
        case 13:
        if (l_U188)
        {
            SET_PED_PTFX_SPLASH_OUT_SPECIAL_EFFECT( 1 );
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUTANDBLENDIN */ sub_61560( ref l_U498, "MID_01C_PANAMA", 60003, 60056, 60549, 60886, 61011, 61119, 61314, 61443, 250, 0 );
            l_U498._fU4 = 2;
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_62020( ref l_U498 ))
        {
            SET_PED_PTFX_SPLASH_OUT_SPECIAL_EFFECT( 0 );
            l_U187 = 9;
             /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_MD1_GAMEPLAY", 0 );
        }
        break;
        case 14:
        if (l_U188)
        {
             /* P_MD_MID_01D_REBEL_SHOOT_PLAYER */ sub_63831();
             /* P_MD_MID_01D_PLAY_CAMERA */ sub_64834();
        }
        if ((IS_PED_SHOOTING( l_U565 )) AND (NOT (IS_PED_DEAD( l_U565 ))))
        {
            SHAKE_CAM( l_U630._fU0, "SMALL_EXPLOSION_SHAKE", 0.15000000 );
             /* WRITESCRIPTLOG */ sub_489( "CR", "Shaking Cam as Ped Shoot", 0 );
        }
        if (( /* ISTIMERDONE */ sub_2171( ref l_U1020 )) == 1)
        {
            l_U1019 = CREATE_CAM( "DEFAULT_BULLET_CAMERA", 1 );
            SETUP_BULLET_CAMERA_SCENE( l_U1019, "MISS_DEATH_FALL_01A", 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, "", "" );
            SET_CAM_ACTIVE( l_U1019, 1 );
        }
        if ( /* NIS_IS_SHOT_FINISHED */ sub_65548( ref l_U630, 1 ))
        {
            g_U1243 = 1;
        }
        break;
        case 15:
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        l_U187 = 0;
         /* WRITESCRIPTLOG */ sub_489( "SP", "eCheckpointState = CP_IDLE", 0 );
        break;
    }
    if (l_U187 != iVar2)
    {
        l_U188 = 1;
    }
    else
    {
        l_U188 = 0;
    }
    return;
}

/* P_MD_HANDLE_POI_PARTICLE_EFFECTS */ void sub_11738()
{
    if (( /* F_HANDLE_POI */ sub_11789( ref l_U190._fU0 )) == 1)
    {
        START_PARTICLE_FX_LOOPED_AT_COORD( l_U190._fU380, l_U190._fU356, l_U190._fU368, 1065353216 );
         /* WRITE_STRING */ sub_8819( "starting particle effect: poiFXMD_ShowerL_B" );
    }
    if (( /* F_HANDLE_POI */ sub_11789( ref l_U286._fU0 )) == 1)
    {
        START_PARTICLE_FX_LOOPED_AT_COORD( l_U286._fU380, l_U286._fU356, l_U286._fU368, 1065353216 );
         /* WRITE_STRING */ sub_8819( "starting particle effect: poiFXMD_ShowerR_B" );
    }
    return;
}

/* F_HANDLE_POI */ int sub_11789(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    int iVar6;
    int iVar7;
    int iVar8;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )) == 0)
    {
        if (iParam0->_fU0 == 1)
        {
            uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_987() )};
            iVar6 = 0;
            if (iParam0->_fU80 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_11890(  /* PLAYER_PED_ID */ sub_987(), iParam0->_fU116 )) == 1)
                {
                    if (iParam0->_fU300 == 1)
                    {
                        if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                        {
                            iVar6 = 1;
                        }
                    }
                    else
                    {
                        iVar6 = 1;
                    }
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU84 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_PED_ON_SCREEN( iParam0->_fU316, 0 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU100, 1 )) <= iParam0->_fU112)
            {
                if (iParam0->_fU300 == 1)
                {
                    if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                    {
                        iVar6 = 1;
                    }
                }
                else
                {
                    iVar6 = 1;
                }
            };;;;
            iVar7 = 0;
            if (iParam0->_fU88 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_11890(  /* PLAYER_PED_ID */ sub_987(), iParam0->_fU216 )) == 1)
                {
                    iVar7 = 1;
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU92 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU200, 1 )) <= iParam0->_fU212)
            {
                iVar7 = 1;
            };;;;
            if (iVar6 == 1)
            {
                if ((iParam0->_fU4 != 3) AND (iParam0->_fU52 == 1))
                {
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_5001( iParam0 );
                    }
                    iVar8 = 0;
                    if ((IS_WEAPON_PICKUP_VISIBLE() == 0) AND ((iParam0->_fU60 == 0) AND (( /* F_ISACTIONINGAVAILABLE */ sub_5097( iParam0 )) == 1)))
                    {
                        SET_ACTION_CONSUMED( 0, 1 );
                        if (( /* F_HASACTIONBEENPRESSED */ sub_12753()) == 1)
                        {
                            iVar8 = 1;
                        }
                    }
                    if (iVar8 == 1)
                    {
                        if (iParam0->_fU332 == 0)
                        {
                             /* P_ENABLE_POI */ sub_4543( iParam0, 0 );
                            iParam0->_fU64 = 1;
                        }
                        if (iParam0->_fU68 == 1)
                        {
                            iParam0->_fU72 = 0;
                        }
                        return 1;
                    }
                    else if (iParam0->_fU8 != 2)
                    {
                        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                        {
                             /* P_ENABLEPOIGLINT */ sub_4602( iParam0, 0 );
                             /* P_ENABLEPOIINTERACTIONTEXT */ sub_4821( iParam0, 1 );
                        }
                        else if (iParam0->_fU320 == 1)
                        {
                             /* P_ENABLEPOIGLINT */ sub_4602( iParam0, 1 );
                        }
                        iParam0->_fU8 = 2;
                    }
                    if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                    {
                        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )) == 0)
                        {
                            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_987(), 1 );
                            iParam0->_fU328 = 1;
                        }
                    }
                }
            }
            else if (iVar7 == 1)
            {
                if (iParam0->_fU8 != 1)
                {
                    if ((iParam0->_fU4 != 3) AND (iParam0->_fU320 == 1))
                    {
                         /* P_ENABLEPOIGLINT */ sub_4602( iParam0, 1 );
                    }
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_ENABLEPOIINTERACTIONTEXT */ sub_4821( iParam0, 0 );
                    }
                    if (iParam0->_fU96 == 1)
                    {
                        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )) == 0) AND ((((IS_PED_DEAD( iParam0->_fU316 )) == 1) || ((IS_PED_DEAD( iParam0->_fU316 )) == 0)) AND ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)))
                        {
                            TASK_LOOK_AT_PED(  /* PLAYER_PED_ID */ sub_987(), iParam0->_fU316, -1, 0 );
                        }
                    }
                    else if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )) == 0)
                    {
                        TASK_LOOK_AT_COORD(  /* PLAYER_PED_ID */ sub_987(), iParam0->_fU100, -1, 0 );
                    }
                    iParam0->_fU340 = 1;
                    if ((iParam0->_fU72 == 0) AND ((iParam0->_fU68 == 1) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU8 == 2))))
                    {
                        iParam0->_fU72 = 1;
                    }
                    iParam0->_fU8 = 1;
                }
                if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                {
                    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )) == 0)
                    {
                        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_987(), 1 );
                        iParam0->_fU328 = 1;
                    }
                }
            }
            else if ((iParam0->_fU4 == 1) || (iParam0->_fU4 == 3))
            {
                ;
            }
            else if (iParam0->_fU8 != 0)
            {
                if (iParam0->_fU320 == 1)
                {
                     /* P_ENABLEPOIGLINT */ sub_4602( iParam0, 0 );
                }
            }
            if (iParam0->_fU8 == 2)
            {
                if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                {
                     /* P_ENABLEPOIINTERACTIONTEXT */ sub_4821( iParam0, 0 );
                }
            }
            if (iParam0->_fU340)
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )) == 0)
                {
                    TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_987() );
                    iParam0->_fU340 = 0;
                }
            }
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )) == 0)
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_987(), 0 );
                    iParam0->_fU328 = 0;
                }
            }
            if (iParam0->_fU332 == 1)
            {
                 /* P_ENABLEPOIINTERACTIONTEXT */ sub_4821( iParam0, 0 );
            }
            iParam0->_fU8 = 0;;;
        }
    }
    return 0;
}

/* F_ISPEDINTRIGGERBOX */ int sub_11890(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* F_HASACTIONBEENPRESSED */ int sub_12753()
{
    if ((IS_CONTROL_JUST_PRESSED( 0, 30 )) == 1)
    {
        return 1;
    }
    return 0;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_14085()
{
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U188 = 1;
     /* CREATETIMER */ sub_1888( ref l_U382, 2750, 1, 0 );
     /* CREATETIMER */ sub_1888( ref l_U392, 2750, 1, 0 );
    l_U401 = 0;
    l_U391 = 0;
     /* CREATETIMER */ sub_1888( ref l_U488, 3000, 1, 0 );
    l_U497 = 0;
     /* CREATETIMER */ sub_1888( ref l_U525, 50, 1, 0 );
     /* RESETTIMER */ sub_2747( ref l_U1020 );
    l_U811 = 0;
    l_U812 = 0;
     /* CREATETIMER */ sub_1888( ref l_U750, 1000, 1, 0 );
     /* CREATETIMER */ sub_1888( ref l_U760, 1400, 1, 0 );
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_14345()
{
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14449( ref l_U681[0], 22.79560000, 3.80268700, 8.28803600, 269.13350000, -682586276, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14449( ref l_U681[1], 15.96559000, 3.60329200, 8.19039200, 261.65900000, 1164548759, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14449( ref l_U681[2], 26.06151000, 3.47923900, 5.27079200, 246.71140000, -682586276, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14449( ref l_U681[3], 25.24916000, 3.88933500, 5.26929600, 232.47140000, 1164548759, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14449( ref l_U737, 33.76949000, 3.73510100, 2.16817000, -92.14000000, -1669148536, 5, 2, 1, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U446, "Trigger_MainDeck_MID_OverBoardKill_Right", 8.19000000, 16.03000000, 1.74000000, 99.00000000, 8.96000000, 2.70000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U425, "Trigger_MainDeck_MID_OverBoardKill_Left", 8.04000000, -8.08000000, 1.74000000, 99.00000000, 8.96000000, 2.70000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U467, "Trigger_MainDeck_MID_OverBoardKill_Rear", 59.39000000, 4.27000000, 1.74000000, 10.89000000, 14.96000000, 2.70000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U567, "Trigger_MainDeck_MID_01DLeft", 24.66000000, -8.08000000, -7.65000000, 45.00000000, 8.96000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U609, "Trigger_MainDeck_MID_01DBack", 58.89000000, 1.97000000, -7.66000000, 23.58000000, 37.36000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U588, "Trigger_MainDeck_MID_01DRight", 24.59000000, 15.91000000, -7.66000000, 45.00000000, 8.96000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U769, "Trigger_MainDeck_CivScreamA", 45.04000000, -1.22000000, 1.46000000, 4.80000000, 3.14000000, 3.09000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U790, "Trigger_MainDeck_CivScreamB", 45.32000000, 8.90000000, 1.46000000, 4.14000000, 2.90000000, 3.09000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U813, "Trigger_ExitDoor_Close", 44.81000000, 3.92000000, 2.28000000, 4.96000000, 13.79000000, 2.47000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U834, "Trigger_MainDeck_START_PLAYER_SNEAK", 26.51000000, 0.81000000, 1.92000000, 3.39000000, 4.08000000, 3.09000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U855, "TRIGGER_START_LOUNGE_CUT", 25.06000000, 0.01000000, 1.92000000, 1.28000000, 1.74000000, 3.09000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U402, "Trigger_MainDeck_NearDoor", 28.00000000, 3.21900000, 2.56000000, 7.00000000, 7.00000000, 2.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U962, "Trigger_BloodSplashActivate_Activate", 52.21000000, 3.65000000, -1.27000000, 2.50000000, 2.50000000, 2.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_14843( ref l_U983, "Trigger_BloodSplash_Radius", 52.21000000, 3.65000000, -1.27000000, 4.00000000, 4.00000000, 2.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_16171( ref l_U734, "Thrb_MD_Gym_Rebels_Balcony", 32.76000000, 3.94000000, 5.19000000, 2.02000000, 3.50000000, 2.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_16171( ref l_U735, "Thrb_MD_Gym_Rebels_Helipad", 28.00000000, 3.76200000, 8.18300000, 2.50000000, 6.00000000, 2.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* PARTICLE_FX_POI_CREATE */ sub_16398( ref l_U190, 46.53000000, 10.41000000, -0.13000000, 46.32000000, 10.44000000, 0.94300000, 0.00000000, 35.00000000, 0.00000000, "Ambient_Shower_S" );
     /* PARTICLE_FX_POI_CREATE */ sub_16398( ref l_U286, 46.53000000, -2.63000000, -0.13000000, 46.36000000, -2.60000000, 0.95300000, 0.00000000, 35.00000000, 0.00000000, "Ambient_Shower_S" );
     /* P_CREATEPOISTRUCTTRIGGER */ sub_17361( ref l_U876, 2, 0.00000000, 0.00000000, 0.00000000, l_U962, l_U983, 1, 0 );
     /* P_SET_INTERACTIVE_TEXT */ sub_17513( ref l_U876, 30, "POI_PAN_BLOOD" );
     /* P_SET_POI_FORCE_WALK */ sub_17723( ref l_U876, 0 );
     /* P_SET_POI_REUSABLE */ sub_17778( ref l_U876, 1 );
     /* P_SET_POI_AVAILABLE */ sub_17831( ref l_U876, 0 );
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_14449(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_14843(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_16171(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* PARTICLE_FX_POI_CREATE */ void sub_16398(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU344 = {uParam1};
    iParam0->_fU356 = {uParam4};
    iParam0->_fU368 = {uParam7};
    iParam0->_fU380 = uParam10;
     /* P_CREATEPOISTRUCTCOORD */ sub_16502( iParam0 + 0, 0, uParam1, uParam1, uParam1, 0.80000000, 0.80000000, 1, 0 );
    return;
}

/* P_CREATEPOISTRUCTCOORD */ void sub_16502(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14)
{
     /* P_CREATEBLANKPOISTRUCT */ sub_16542( iParam0, uParam13 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU100 = {uParam5};
    iParam0->_fU112 = uParam11;
    iParam0->_fU200 = {uParam8};
    iParam0->_fU212 = uParam12;
    iParam0->_fU320 = uParam14;
    iParam0->_fU20 = {uParam2};
     /* P_CREATEPOIGLINT */ sub_16935( iParam0 );
    return;
}

/* P_CREATEBLANKPOISTRUCT */ void sub_16542(int iParam0, unknown uParam1)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = 0;
    iParam0->_fU8 = 0;
    iParam0->_fU12 = nil;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU52 = 1;
    iParam0->_fU56 = 1;
    iParam0->_fU60 = 0;
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = 0;
    iParam0->_fU80 = 0;
    iParam0->_fU84 = 0;
    iParam0->_fU100 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU112 = 0.00000000;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU96 = 0;
    iParam0->_fU200 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU212 = 0.00000000;
    iParam0->_fU300 = 0;
    iParam0->_fU304 = 1;
    iParam0->_fU308 = 0;
    iParam0->_fU324 = 1;
    iParam0->_fU328 = 0;
    iParam0->_fU340 = 0;
    iParam0->_fU336 = 0.20000000;
    return;
}

/* P_CREATEPOIGLINT */ void sub_16935(int iParam0)
{
    if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            REMOVE_GLINT( iParam0->_fU12 );
        }
    }
    iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
     /* P_INITPOIGLINT */ sub_17033( iParam0 );
    return;
}

/* P_INITPOIGLINT */ void sub_17033(int iParam0)
{
    if (iParam0->_fU0 == 1)
    {
        if (iParam0->_fU320 == 1)
        {
            if ((iParam0->_fU8 > 0) AND (iParam0->_fU4 == 0))
            {
                 /* P_ENABLEPOIGLINT */ sub_4602( iParam0, 1 );
            }
            else if ((iParam0->_fU8 < 2) AND (iParam0->_fU4 == 1))
            {
                 /* P_ENABLEPOIGLINT */ sub_4602( iParam0, 1 );
            }
            else if ((iParam0->_fU8 == 1) AND (iParam0->_fU4 == 2))
            {
                 /* P_ENABLEPOIGLINT */ sub_4602( iParam0, 1 );
            }
            else
            {
                 /* P_ENABLEPOIGLINT */ sub_4602( iParam0, 0 );
            };;;
        }
        else
        {
             /* P_ENABLEPOIGLINT */ sub_4602( iParam0, 0 );
        }
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_4602( iParam0, 0 );
    }
    return;
}

/* P_CREATEPOISTRUCTTRIGGER */ void sub_17361(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47, unknown uParam48)
{
     /* P_CREATEBLANKPOISTRUCT */ sub_16542( iParam0, uParam47 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU80 = 1;
    iParam0->_fU116 = {uParam5};
    iParam0->_fU88 = 1;
    iParam0->_fU216 = {uParam26};
    iParam0->_fU320 = uParam48;
    iParam0->_fU20 = {uParam2};
     /* P_CREATEPOIGLINT */ sub_16935( iParam0 );
    return;
}

/* P_SET_INTERACTIVE_TEXT */ void sub_17513(int iParam0, unknown uParam1, unknown uParam2)
{
    StrCopy( ref iParam0->_fU32, uParam2, 16 );
    iParam0->_fU48 = uParam1;
     /* P_INITINTERACTIVETEXT */ sub_17569( iParam0 );
    return;
}

/* P_INITINTERACTIVETEXT */ void sub_17569(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND (iParam0->_fU0 == 1))
    {
        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
        {
            SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
            SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
    }
    return;
}

/* P_SET_POI_FORCE_WALK */ void sub_17723(int iParam0, unknown uParam1)
{
    iParam0->_fU324 = uParam1;
    return;
}

/* P_SET_POI_REUSABLE */ void sub_17778(int iParam0, unknown uParam1)
{
    iParam0->_fU68 = uParam1;
    return;
}

/* P_SET_POI_AVAILABLE */ void sub_17831(int iParam0, int iParam1)
{
    if (iParam1 == 0)
    {
        iParam0->_fU60 = 1;
    }
    else
    {
        iParam0->_fU60 = 0;
    }
     /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_5001( iParam0 );
    return;
}

/* P_REQUEST_MD1_PERSISTENT_ASSETS */ void sub_18087()
{
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_REQUEST_MD1_PERSISTENT_ASSETS start", 0 );
     /* P_GLOBAL_LOAD_PISTOL_ANIMS */ sub_18182();
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_21633( ref l_U176, ref g_U1588 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_23712( ref l_U184, ref g_U1829 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_25743( ref g_U3079, ref g_U3026 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "LEVEL_S_PAN_CP_03", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "EXPL_CAM", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_REQUEST_MD1_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_GLOBAL_LOAD_PISTOL_ANIMS */ void sub_18182()
{
     /* WRITESCRIPTLOG */ sub_489( "CR", "P_GLOBAL_LOAD_PISTOL_ANIMS - Start", 0 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "NPC_PSTL_CORE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "NPC_PSTL_COVER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "NPC_PSTL_COVER_ENTER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "NPC_PSTL_COVER_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "NPC_PSTL_DODGE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "NPC_PSTL_FLAVOR", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "NPC_PSTL_FULLBODY", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "NPC_PSTL_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "NPC_PSTL_SEARCH", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "NPC_PSTL_STAIRS", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "NPC_PSTL_REACT", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "AMED_PSTL_PRONE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "PLGE_PSTL_CROUCH", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "PLGE_PSTL_CORE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "PLGE_PSTL_CORE_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "PLGE_PSTL_HANDSIG", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "PLGE_PSTL_ACTIONS", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "PLGE_PSTL_KNEE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "PLGE_PSTL_COVER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "PLGE_PSTL_REACT", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18289( "PLGE_PSTL_COVER_EXIT", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_489( "CR", "P_GLOBAL_LOAD_PISTOL_ANIMS - End", 0 );
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_18289(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_18341( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18593( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_18341(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18593( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18593( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18593( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20164( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18593( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18593( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_18593(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_18655( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_18655(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_20164(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_21633(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_21706( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_21706(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_21773( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_22031( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_21773(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_22031( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_22031( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_22031( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20164( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_22031( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_22031( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_22031(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_18655( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_23712(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_23786( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_23786(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_23840( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_24101( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_23840(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_24101( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_24101( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_24101( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20164( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_24101( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_24101( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_24101(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_18655( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_25743(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_25796( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26051( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_25796(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26051( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26051( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26051( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20164( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26051( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26051( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_26051(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_18655( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_MD1_NONPERSISTENT_ASSETS */ void sub_27743()
{
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_REQUEST_MD1_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_27853( -1991124254, ref g_U1878 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_27853( -829350039, ref g_U1878 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_3", 0 );
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_REQUEST_MD1_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_27853(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_27914( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28164( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_27914(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28164( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28164( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28164( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28164( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_20164( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_20164( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28164( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_28164( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_28164(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_18655( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_30818(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_31215(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_31617(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_32008(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_32382(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_33026(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_489( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_6718( uParam0,  /* PLAYER_PED_ID */ sub_987() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_GLOBAL_CREATE_LOCKS */ void sub_33562(int iParam0, int iParam1)
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GLOBAL_CREATE_LOCKS start", "###" );
     /* CLEANOBJECT */ sub_33647( g_U4167 );
    g_U4167 =  /* CREATEOBJECTNOOFFSET */ sub_33730( g_U1583, g_U4168, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4167 ))
    {
        FREEZE_OBJECT_POSITION( g_U4167, 1 );
        if (iParam0 == 1)
        {
            PLAY_OBJECT_ANIM( g_U4167, "P_LockGate", "pa_doors", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( g_U4167, "P_LockGate", "pa_doors", 1.00000000 );
        }
    }
     /* CLEANOBJECT */ sub_33647( g_U4171 );
    g_U4171 =  /* CREATEOBJECTNOOFFSET */ sub_33730( g_U1583, g_U4172, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U4171 )) == 1)
    {
        FREEZE_OBJECT_POSITION( g_U4171, 1 );
        if (iParam1 == 1)
        {
            PLAY_OBJECT_ANIM( g_U4171, "P_LockGate", "pa_doors", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( g_U4171, "P_LockGate", "pa_doors", 1.00000000 );
        }
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GLOBAL_CREATE_LOCKS end", "###" );
    return;
}

/* CLEANOBJECT */ void sub_33647(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_33730(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_33863( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* LOADMODEL */ void sub_33863(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_8819( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_CREATE_PLACEMENTS */ void sub_34637()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_CREATE_PLACEMENTS start", 0 );
    l_U423[0] =  /* CREATEPLACEMENT */ sub_34751( -4072149, 20.90000000, 3.85000000, 3.44200000, 0.00000000, 0.00000000, 48.00000000, 1, 1, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U423[0], ref g_U3231 );
     /* P_CREATE_S_PAN_GG_SS_02 */ sub_34948();
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_CREATE_PLACEMENTS end", 0 );
    return;
}

/* CREATEPLACEMENT */ void sub_34751(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_CREATE_S_PAN_GG_SS_02 */ void sub_34948()
{
     /* WRITESCRIPTLOG */ sub_489( "CO", "P_CREATE_S_PAN_GG_SS_02", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_35073( ref g_U737, g_U828, -1142923965, 1962345206, 17.22000000, 10.36000000, 2.24000000, 1.50000000, 0.00000000, 1.00000000, "" );
     /* P_CREATECOLLECTIBLE */ sub_35230( ref g_U737 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_35073(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_489( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_35230(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_489( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_35313( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_489( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_489( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_35313( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_5890( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_34751( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_489( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_489( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_35313(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_36021(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_489( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_489( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_9984( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_36312( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_36789( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_36789( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37049( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_36789( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37049( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37049( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_36789( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37049( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37049( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37049( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_36789( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37049( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37049( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37049( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37049( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_38629( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_489( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_36312(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6999( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_489( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_489( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_36789(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_37049(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_38629(int iParam0)
{
     /* WRITE_STRING */ sub_8819( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_38717( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_38794( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_38794( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_38794( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_38794( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_38794( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_39664( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU52 );
     /* WRITE_STRING */ sub_8819( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU96 );
     /* WRITE_STRING */ sub_8819( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU100 );
     /* WRITE_STRING */ sub_8819( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU104 );
     /* WRITE_STRING */ sub_8819( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU108 );
     /* WRITE_STRING */ sub_8819( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU112 );
     /* WRITE_STRING */ sub_8819( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU116 );
     /* WRITE_STRING */ sub_8819( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU120 );
     /* WRITE_STRING */ sub_8819( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU124 );
     /* WRITE_STRING */ sub_8819( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU128 );
     /* WRITE_STRING */ sub_8819( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_38963( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_38963( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_38963( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_38717(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_38794(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_38963(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_39664(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_GLOBAL_LOCK_1_GATES_CLOSE */ void sub_40624()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GLOBAL_LOCK_1_GATES_CLOSE: START", 0 );
    if (DOES_OBJECT_EXIST( g_U4167 ))
    {
        PLAY_OBJECT_ANIM( g_U4167, "P_LockGate", "pa_doors", 0.00000000, 0, 1 );
        SET_OBJECT_ANIM_CURRENT_TIME( g_U4167, "P_LockGate", "pa_doors", 0.45000000 );
        SET_OBJECT_ANIM_SPEED( g_U4167, "P_LockGate", "pa_doors", -1.00000000 );
        START_PARTICLE_FX_NON_LOOPED_ON_OBJECT( "Pana_Water_LockGate_S", g_U4167, g_U4178, g_U4181, g_U4184 );
         /* P_SAFE_STOP_SOUND */ sub_5987( g_U4175, 0 );
         /* P_SAFE_RELEASE_SOUND_ID */ sub_6170( ref g_U4175 );
        g_U4175 = GET_SOUND_ID();
        PLAY_SOUND_FROM_OBJECT( g_U4175, "CANAL_LOCK", g_U4167 );
        g_U4176 = 1;
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GLOBAL_LOCK_1_GATES_CLOSE: END", 0 );
    return;
}

/* P_GLOBAL_YACHT_REAR_DOOR_OPEN */ void sub_41032()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GLOBAL_YACHT_REAR_DOOR_OPEN: START", 0 );
    if (DOES_OBJECT_EXIST( g_U4075 ))
    {
        PLAY_OBJECT_ANIM( g_U4075, "P_MI_DoorsAnim_H", "pa_doors", 0.00000000, 0, 1 );
        SET_OBJECT_ANIM_CURRENT_TIME( g_U4075, "P_MI_DoorsAnim_H", "pa_doors", 0.00000000 );
        SET_OBJECT_ANIM_SPEED( g_U4075, "P_MI_DoorsAnim_H", "pa_doors", 0.70000000 );
         /* P_SAFE_STOP_SOUND */ sub_5987( g_U4081, 0 );
         /* P_SAFE_RELEASE_SOUND_ID */ sub_6170( ref g_U4081 );
        g_U4081 = GET_SOUND_ID();
        PLAY_SOUND_FROM_OBJECT( g_U4081, "SHIP_DOOR", g_U4075 );
        g_U4079 = 1;
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GLOBAL_YACHT_REAR_DOOR_OPEN: END", 0 );
    return;
}

/* P_GLOBAL_CREATE_YACHT_BAY_DOORS */ void sub_41669()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GLOBAL_CREATE_YACHT_BAY_DOORS start", "###" );
     /* CLEANOBJECT */ sub_33647( g_U4075 );
    g_U4075 =  /* CREATEOBJECT */ sub_41808( 301129366, g_U4076, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( g_U4075, 1 );
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GLOBAL_CREATE_YACHT_BAY_DOORS end", "###" );
    return;
}

/* CREATEOBJECT */ void sub_41808(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_33863( uParam0, 1 );
    }
    Result = CREATE_OBJECT( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_MD_SET_LOCK_AND_BAY_DOORS_FOR_CHECKPOINT */ void sub_42199()
{
     /* P_GLOBAL_LOCK_1_GATES_CLOSE */ sub_40624();
    SET_OBJECT_ANIM_CURRENT_TIME( g_U4167, "P_LockGate", "pa_doors", 0.35000000 );
     /* P_GLOBAL_YACHT_REAR_DOOR_OPEN */ sub_41032();
    SET_OBJECT_ANIM_CURRENT_TIME( g_U4075, "P_MI_DoorsAnim_H", "pa_doors", 0.50000000 );
    if (NOT (DOES_OBJECT_EXIST( g_U4071 )))
    {
        g_U4071 =  /* CREATEOBJECTNOOFFSET */ sub_33730( g_U1548, g_U4072, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        if (DOES_OBJECT_EXIST( g_U4071 ))
        {
            FREEZE_OBJECT_POSITION( g_U4071, 1 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U4071, ref g_U3223 );
        }
    }
    return;
}

/* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ void sub_42682()
{
     /* WRITESCRIPTLOG */ sub_489( "CR", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - START", 0 );
    g_U4062 = GET_PAYNEKILLER_AMT();
     /* WRITESCRIPTLOG */ sub_489( "CR", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - END", 0 );
    return;
}

/* P_MD1_HANDLE_MAX_FALLING_INTO_THE_WATER */ void sub_42873()
{
    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_42929( ref l_U676 )) == 0)
    {
        if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_43054( ref l_U467, 0 )) || (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_43054( ref l_U446, 0 )) || ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_43054( ref l_U425, 0 ))))
        {
            l_U497 = 1;
             /* STARTTIMER */ sub_2038( ref l_U488 );
        }
    }
    if ( /* ISTIMERDONE */ sub_2171( ref l_U488 ))
    {
        l_U497 = 0;
    }
    if (NOT l_U497)
    {
        if (( /* F_MD_WATER_EXIT_SAFETY_CHECK */ sub_43257()) == 1)
        {
            if ((IS_PED_IN_WATER(  /* PLAYER_PED_ID */ sub_987() )) == 1)
            {
                SET_PED_PTFX_SPLASH_OUT_SPECIAL_EFFECT( 1 );
                 /* P_GBL_QUICK_GAMEPLAY_CAM_COPY */ sub_43935();
                l_U187 = 11;
                 /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_MD1_UNLOAD_MID_02_PANAMA", 0 );
            }
        }
        else
        {
             /* P_GBL_QUICK_GAMEPLAY_CAM_COPY */ sub_43935();
            l_U187 = 14;
             /* WRITESCRIPTLOG */ sub_489( "GA", "eCheckpointState = CP_HANDLE_MID_01D_PANAMA", 0 );
        }
    }
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_42929(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_43054(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_11890(  /* PLAYER_PED_ID */ sub_987(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* F_MD_WATER_EXIT_SAFETY_CHECK */ int sub_43257()
{
    if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (IS_PED_IN_WATER(  /* PLAYER_PED_ID */ sub_987() )))
    {
        if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_42929( ref l_U676 )) == 0)
        {
            return 1;
        }
        if (NOT l_U811)
        {
            return 1;
        }
        if (NOT ( /* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ sub_43373( ref l_U676,  /* PLAYER_PED_ID */ sub_987(), 1, 1, 1, 1, 0 )))
        {
            return 1;
        }
        return 0;
    }
    return 1;
}

/* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ int sub_43373(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (( /* F_IS_PED_AWARE_OF_PED */ sub_43453( ref (uParam0^)[I], uParam1, uParam2, uParam3, uParam4, uParam5, uParam6 )) == 1)
        {
            return 1;
        }
    }
    return 0;
}

/* F_IS_PED_AWARE_OF_PED */ int sub_43453(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, int iParam6)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        if ((uParam3) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 1 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_489( "MF", "ped has SEEN target ped", 0 );
            }
            return 1;
        }
        else if ((uParam4) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 8 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_489( "MF", "ped has BEEN SHOT AT by target ped", 0 );
            }
            return 1;
        }
        else if ((uParam2) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 2 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_489( "MF", "ped has HEARD target ped", 0 );
            }
            return 1;
        }
        else if ((uParam5) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 4 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_489( "MF", "ped has BEEN TOLD ABOUT target ped", 0 );
            }
            return 1;
        };;;;
    }
    return 0;
}

/* P_GBL_QUICK_GAMEPLAY_CAM_COPY */ void sub_43935()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GBL_QUICK_GAMEPLAY_CAM_COPY - START", 0 );
     /* NIS_CREATE_GAMEPLAY_CAM_COPY */ sub_44035( ref g_U3626, 50 );
     /* NIS_PRE_SETUP */ sub_44272( 0, 0, 0, 1 );
     /* NIS_PLAY_STATIC_CAMERA */ sub_44451( ref g_U3626 );
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GBL_QUICK_GAMEPLAY_CAM_COPY - END", 0 );
    return;
}

/* NIS_CREATE_GAMEPLAY_CAM_COPY */ void sub_44035(int iParam0, unknown uParam1)
{
    iParam0->_fU4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_GAMEPLAY_CAM_ROT()};
    iParam0->_fU16 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_GAMEPLAY_CAM_COORD()};
    iParam0->_fU28 = GET_GAMEPLAY_CAM_FOV();
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam1;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_1888( iParam0 + 48, uParam1, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U703, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* NIS_PRE_SETUP */ void sub_44272(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1025(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_987(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_987() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_987(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* NIS_PLAY_STATIC_CAMERA */ void sub_44451(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_2038( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_44775(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_44841( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_44841(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_5612( uParam0 );
            }
        }
    }
    return;
}

/* P_HANDLE_BLOOD_SPLASH_POI */ void sub_44991()
{
    if ((NOT ( /* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ sub_43373( ref l_U676,  /* PLAYER_PED_ID */ sub_987(), 1, 1, 1, 1, 0 ))) || (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_42929( ref l_U676 )) == 0))
    {
        if (NOT ( /* F_IS_POI_AVAILABLE */ sub_45070( ref l_U876 )))
        {
             /* P_SET_POI_AVAILABLE */ sub_17831( ref l_U876, 1 );
        }
    }
    if ( /* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ sub_43373( ref l_U676,  /* PLAYER_PED_ID */ sub_987(), 1, 1, 1, 1, 0 ))
    {
        if ( /* F_IS_POI_AVAILABLE */ sub_45070( ref l_U876 ))
        {
             /* P_SET_POI_AVAILABLE */ sub_17831( ref l_U876, 0 );
        }
    }
    if (( /* F_POI_CAN_PLAY_UNAVALIABLE_MONO */ sub_45184( ref l_U876 )) == 1)
    {
         /* RESET_SCRIPT_SPEECH_STRUCT */ sub_45419( ref g_U1276 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45530( 0,  /* PLAYER_PED_ID */ sub_987(), "MAX", ref g_U1276, 2, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45530( 1,  /* PLAYER_PED_ID */ sub_987(), "MAX", ref g_U1276, 2, 0 );
         /* PLAY_SINGLE_SPEECH */ sub_45800( "EXPLORE_ITEM", ref g_U1276, 8, 1 );
    }
    if (( /* F_HANDLE_POI */ sub_11789( ref l_U876 )) == 1)
    {
        l_U187 = 10;
         /* WRITESCRIPTLOG */ sub_489( "CR", "eCheckpointState = CP_MD1_POI_BLOODSPLASH", 0 );
    }
    return;
}

/* F_IS_POI_AVAILABLE */ void sub_45070(int iParam0)
{
    return iParam0->_fU56;
}

/* F_POI_CAN_PLAY_UNAVALIABLE_MONO */ int sub_45184(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND ((iParam0->_fU76 == 0) AND (( /* F_IS_POI_AVAILABLE */ sub_45070( iParam0 )) == 0)))
    {
        if ((( /* F_HASACTIONBEENPRESSED */ sub_12753()) == 1) AND (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_987() )) == 0) AND (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_987() )) == 0) AND (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_987() )) == 0) AND (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_987() )) == 0) AND (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_987() )) == 0) AND ((IS_PLAYER_SHOOTDODGING() == 0) AND ((IS_MONOLOGUE_PLAYING() == 0) AND ((IS_INTERACTIONTEXT_AVAILABLE() == 0) AND (IS_INTERACTIONTEXT_ONSCREEN() == 1))))))))))
        {
            iParam0->_fU76 = 1;
            return 1;
        }
    }
    return 0;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_45419(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_45530(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_45800(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_45845( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_45845(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_45932( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_45932(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_45984( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_46502( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_45984(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_46502(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ void sub_46783()
{
    if (NOT ( /* HASTIMERBEENACTIVATED */ sub_1754( ref g_U4052 )))
    {
         /* P_CREATE_AND_START_TIMER */ sub_46853( ref g_U4052, g_U4061 );
    }
    if (((g_U4052._fU16) || ( /* ISTIMERDONE */ sub_2171( ref g_U4052 ))) AND ( /* F_GBL_HAS_PLAYER_JUST_ACQUIRED_PAIN_KILLERS */ sub_46916()))
    {
         /* WRITESCRIPTLOG */ sub_489( "MF", "Playing Speech: SPAN_MXFNDS1", 0 );
         /* P_SPEECH_PLAY_MONOLOGUE */ sub_47197( ref g_U4063, ref g_U1246 );
         /* RESETTIMER */ sub_2747( ref g_U4052 );
    }
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_46853(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_1888( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_2038( uParam0 );
    return;
}

/* F_GBL_HAS_PLAYER_JUST_ACQUIRED_PAIN_KILLERS */ int sub_46916()
{
    if (GET_PAYNEKILLER_AMT() > g_U4062)
    {
         /* WRITESCRIPTLOG */ sub_489( "CR", "Player picked up Payne Killers!", 0 );
        PRINTSTRING( "HAD: " );
         /* WRITE_INT */ sub_38963( g_U4062 );
        PRINTSTRING( "NOW: " );
         /* WRITE_INT */ sub_38963( GET_PAYNEKILLER_AMT() );
        g_U4062 = GET_PAYNEKILLER_AMT();
        return 1;
    }
    g_U4062 = GET_PAYNEKILLER_AMT();
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_47197(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_45419( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45530( 0,  /* PLAYER_PED_ID */ sub_987(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45530( 1,  /* PLAYER_PED_ID */ sub_987(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_45800( uParam0, uParam1, 8, 1 );
    return;
}

/* F_IS_PED_ARRAY_DEFEATED */ int sub_47454(unknown uParam0, boolean bParam1)
{
    if (( /* F_HAS_PED_ARRAY_SPAWNED */ sub_47493( uParam0, 0 )) == 1)
    {
        if (NOT bParam1)
        {
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_42929( uParam0 )) == 0)
            {
                return 1;
            }
        }
        if (bParam1)
        {
            if (( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_47653( uParam0 )) == (uParam0^))
            {
                return 1;
            }
        }
    }
    return 0;
}

/* F_HAS_PED_ARRAY_SPAWNED */ void sub_47493(unknown uParam0, boolean bParam1)
{
    int I;
    int Result;

    Result = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if ((DOES_PED_EXIST( (uParam0^)[I] )) == 1)
        {
            Result = 1;
            if (NOT bParam1)
            {
                return 1;
            }
        }
        else
        {
            Result = 0;
        }
    }
    return Result;
}

/* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ void sub_47653(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            if (IS_PED_DEAD( (uParam0^)[I] ))
            {
                Result++;
            }
        }
    }
    return Result;
}

/* P_START_CHECKPOINT_THREAD */ void sub_48176(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_48251(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_42929( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* F_HANDLE_PED_ARRAY_SPAWN */ int sub_48519(unknown uParam0, unknown uParam1, int iParam2, boolean bParam3, boolean bParam4, int iParam5, unknown uParam6)
{
    int iVar9;
    int iVar10;
    int Result;

    iVar9 =  /* F_GET_NUM_SPAWNED_PED_IN_ARRAY */ sub_48560( uParam0, uParam1 );
    if (iParam2 == -1)
    {
        iVar10 = (uParam0^);
    }
    else
    {
        iVar10 = iParam2;
    }
    if (iVar9 < iVar10)
    {
        if ((uParam1^)[iVar9]._fU16 == 0)
        {
            SCRIPT_ASSERT( "Invalid Ped Struct!  No Model Defined! Aborting Ped Spawn", 0 );
             /* WRITESCRIPTLOG */ sub_489( "MF", "Invalid Ped Struct!  No Model Defined! Aborting Ped Spawn", 0 );
            PRINTSTRING( "INVALID SPAWN INDEX: " );
             /* WRITE_INT */ sub_38963( iVar9 );
            return 0;
        }
        if (NOT (DOES_PED_EXIST( (uParam0^)[iVar9] )))
        {
             /* LOADMODEL */ sub_33863( (uParam1^)[iVar9]._fU16, uParam6 );
            (uParam0^)[iVar9] =  /* CREATEPED */ sub_48977( ref (uParam1^)[iVar9] );
            if (NOT bParam4)
            {
                SET_PED_VISIBLE( (uParam0^)[iVar9], bParam4 );
                 /* WRITE_STRING */ sub_8819( "SPAWNING INVISIBLE PED!!!" );
            }
            if (iParam5 == 1)
            {
                 /* P_DEACTIVATEPED */ sub_49768( (uParam0^)[iVar9] );
                 /* WRITE_STRING */ sub_8819( "Deactivating Ped..." );
            }
        }
    }
    if (bParam3)
    {
        if (iVar9 == (iVar10 - 1))
        {
             /* WRITESCRIPTLOG */ sub_489( "MF", "F_HANDLE_PED_ARRAY_SPAWN: Returning true Once.  If you see this looping, you likely have unitialized ped model data in your pedstruct array.", 0 );
            Result = 1;
        }
        return Result;
    }
    else if (iVar9 >= iVar10)
    {
        return 1;
    }
    return 0;
}

/* F_GET_NUM_SPAWNED_PED_IN_ARRAY */ void sub_48560(unknown uParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = (uParam1^);
    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (DOES_PED_EXIST( (uParam0^)[I] )))
        {
            if ((uParam1^)[I]._fU16 != 0)
            {
                if (I < Result)
                {
                    Result = I;
                }
            }
        }
    }
    return Result;
}

/* CREATEPED */ void sub_48977(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_33863( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_49468( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_49569( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_49468(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_49569(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_49768(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* P_MD_BALCONY_REBEL_SETUP */ void sub_50132()
{
    int I;

     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_BALCONY_REBEL_SETUP - START", 0 );
    if ( /* ISPEDVALID */ sub_50224( l_U676[0], 0 ))
    {
         /* F_GIVEPEDWEAPON */ sub_9210( l_U676[0], -1404433099, 25000, 0, 0 );
        SET_PED_AI_TEMPLATE( l_U676[0], ref g_U1480 );
        SET_BLOCKING_OF_PED_TARGETTING( l_U676[0], 1 );
         /* P_TETHERPED */ sub_50417( ref l_U735, l_U676[0], 1 );
    }
    if ( /* ISPEDVALID */ sub_50224( l_U676[1], 0 ))
    {
         /* F_GIVEPEDWEAPON */ sub_9210( l_U676[1], -612753081, 25000, 0, 0 );
        SET_PED_AI_TEMPLATE( l_U676[1], ref g_U1504 );
         /* P_TETHERPED */ sub_50417( ref l_U735, l_U676[1], 1 );
    }
    if ( /* ISPEDVALID */ sub_50224( l_U676[2], 0 ))
    {
         /* F_GIVEPEDWEAPON */ sub_9210( l_U676[2], -612753081, 25000, 0, 0 );
        SET_PED_AI_TEMPLATE( l_U676[2], ref g_U1480 );
         /* P_TETHERPED */ sub_50417( ref l_U734, l_U676[2], 1 );
    }
    if ( /* ISPEDVALID */ sub_50224( l_U676[3], 0 ))
    {
         /* F_GIVEPEDWEAPON */ sub_9210( l_U676[3], -1404433099, 25000, 0, 0 );
        SET_PED_AI_TEMPLATE( l_U676[3], ref g_U1504 );
         /* P_TETHERPED */ sub_50417( ref l_U734, l_U676[3], 1 );
    }
    for ( I = 0; I < l_U676; I++ )
    {
        if ( /* ISPEDVALID */ sub_50224( l_U676[I], 0 ))
        {
            SET_PED_COMBAT_RANGE_MIN( l_U676[I], 4.50000000 );
            SET_PED_COMBAT_RANGE_MAX( l_U676[I], 40 );
            SET_PED_EMOTION_STATE( l_U676[I], 1 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U676[I], 1 );
            SET_PED_COMBAT_ATTRIBUTES( l_U676[I], 1, 0 );
            SET_PED_ALERTNESS( l_U676[I], 2 );
            SET_PED_PATH_VAULTING_USAGE( l_U676[I], 1, 1, 1 );
            SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U676[I], 0 );
        }
    }
     /* P_ADD_PED_ARRAY_TO_AI_GROUP */ sub_50945( ref l_U676, l_U670 );
     /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_51819( ref l_U676, "piMD_BalconyRebels" );
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_BALCONY_REBEL_SETUP - END", 0 );
    return;
}

/* ISPEDVALID */ void sub_50224(unknown uParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((DOES_PED_EXIST( uParam0 )) == 1)
    {
        Result = 1;
    }
    else
    {
        Result = 0;
    }
    if (Result == 1)
    {
        if ((IS_PED_DEAD( uParam0 )) == 1)
        {
            if (iParam1 == 1)
            {
                Result = 1;
            }
            else
            {
                Result = 0;
            }
        }
        else
        {
            Result = 1;
        }
    }
    return Result;
}

/* P_TETHERPED */ void sub_50417(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_ADD_PED_ARRAY_TO_AI_GROUP */ void sub_50945(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_51012( (uParam0^)[I], ref uParam1 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_51012(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_8819( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_51182( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_51182( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_SETUP_AI_GROUP */ void sub_51182(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_51819(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_MD_GYM_EXECUTE_PED_SPAWN */ void sub_52001()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GYM_EXECUTE_PEDS_SPAWN: START", 0 );
    l_U736 =  /* CREATEPED */ sub_48977( ref l_U737 );
    if (( /* ISPEDVALID */ sub_50224( l_U736, 0 )) == 1)
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U736, 1 );
        SET_PED_USES_DYING_ANIM( l_U736, 0 );
        ENABLE_PED_PAIN( l_U736, 0 );
        SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( l_U736, 1 );
        STOP_PED_SPEAKING( l_U736, 1 );
        SET_PED_CAN_BE_TARGETTED( l_U736, 0 );
        SET_FREEZE_PED_AIM( l_U736, 1 );
        SET_PED_AIM_LOCKONABLE( l_U736, 0 );
        SET_PED_ONLY_DAMAGED_BY_PLAYER( l_U736, 1 );
         /* P_DEACTIVATEPED */ sub_49768( l_U736 );
    }
    if ((IS_GERMAN_VERSION() == 1) || (IS_JAPANESE_GAME()))
    {
        SET_PED_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP( l_U736, 0, 0 );
        SET_PED_GORE_FROM_PLAYER( l_U736, 0 );
    }
    else
    {
        SET_PED_AS_ONE_SHOT_KILL( l_U736, 1 );
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GYM_EXECUTE_PEDS_SPAWN: END", 0 );
    return;
}

/* P_MD_GLASS_BREAK_HACK_BALCONY */ void sub_52405()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GLASS_BREAK_HACK_BALCONY: START", 0 );
    SHOOT_SINGLE_BULLET_BETWEEN_COORDS( 34.68000000, 4.03000000, 5.92000000, 32.68000000, 4.03000000, 5.92000000, 99, 1, -1074756423, 0 );
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GLASS_BREAK_HACK_BALCONY: END", 0 );
    return;
}

/* P_MD_GLASS_BREAK_HACK_LOUNGE */ void sub_52600()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GLASS_BREAK_HACK_LOUNGE: START", 0 );
    SHOOT_SINGLE_BULLET_BETWEEN_COORDS( 17.70000000, -0.84000000, 3.72000000, 17.58000000, -2.72000000, 3.64000000, 99, 1, -1074756423, 0 );
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GLASS_BREAK_HACK_LOUNGE: END", 0 );
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_52800(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_11890(  /* PLAYER_PED_ID */ sub_987(), uParam0 );
}

/* P_MD_GYM_EXECUTE_PEDS_SETUP_LEFT_STAIRS */ void sub_52861()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GYM_EXECUTE_PEDS_SETUP_LEFT_STAIRS - START", 0 );
    if (( /* ISPEDVALID */ sub_50224( l_U736, 0 )) == 1)
    {
         /* TELEPORTPED */ sub_53018( l_U736, 35.58926000, 4.10945900, 2.16366600, -45.62000000 );
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GYM_EXECUTE_PEDS_SETUP_LEFT_STAIRS - END", 0 );
    return;
}

/* TELEPORTPED */ void sub_53018(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_MD_GYM_EXECUTE_PEDS_SETUP_RIGHT_STAIRS */ void sub_53177()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GYM_EXECUTE_PEDS_SETUP_RIGHT_STAIRS - START", 0 );
    if (( /* ISPEDVALID */ sub_50224( l_U736, 0 )) == 1)
    {
         /* TELEPORTPED */ sub_53018( l_U736, 36.74786000, 3.52092000, 2.16291200, -123.84000000 );
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GYM_EXECUTE_PEDS_SETUP_RIGHT_STAIRS - END", 0 );
    return;
}

/* P_MD_GYM_CIV_VICTIM_SCREAM */ void sub_53464()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GYM_CIV_VICTIM_SCREAM: START", 0 );
     /* KILL_SPEECH */ sub_53555( ref g_U1246, 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_45419( ref g_U1246 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45530( 1,  /* PLAYER_PED_ID */ sub_987(), "MAX", ref g_U1246, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45530( 0, l_U736, "M11_YPGF_03_Avg", ref g_U1246, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_45800( "SPAN_VIG03A", ref g_U1246, 8, 1 );
     /* WRITESCRIPTLOG */ sub_489( "CR", "Playing audio music one shot PANAMA_OS_3", 0 );
    AUDIO_MUSIC_PLAY_ONESHOT();
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GYM_CIV_VICTIM_SCREAM: END", 0 );
    return;
}

/* KILL_SPEECH */ void sub_53555(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_53583( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_53583(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* P_MD_GYM_EXECUTE_PEDS_ANIMATE */ void sub_54025()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GYM_EXECUTE_PEDS_ANIMATE: START", 0 );
     /* P_ACTIVATEPED */ sub_54122( l_U736 );
    if (( /* ISPEDVALID */ sub_50224( l_U736, 0 )) == 1)
    {
        ISEQ_REGISTER_ENTITY( -1991124254, "s_pan_execute_flge", l_U736, 0 );
        ISEQ_START( -1991124254 );
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GYM_EXECUTE_PEDS_ANIMATE: END", 0 );
    return;
}

/* P_ACTIVATEPED */ void sub_54122(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_MD_BALCONY_REBEL_ATTACK */ void sub_54361()
{
    unknown uVar2;
    vector vVar3;
    unknown uVar6;
    vector vVar7;
    unknown uVar10;
    unknown uVar11;

     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_BALCONY_REBEL_ATTACK: START", 0 );
    vVar3 = {28.71822000, 3.86127600, 8.28291300};
    OPEN_SEQUENCE_TASK( ref uVar2 );
    TASK_ATTACK_MOVE_WHILE_AIMING_AT_COORD( 0, vVar3, 30.96875000, 3.84594300, 9.51374400, 1, 1092616192, 1101004800, -1082130432, 3 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if (( /* ISPEDVALID */ sub_50224(  /* PLAYER_PED_ID */ sub_987(), 0 )) == 1)
    {
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_987() );
    }
    CLOSE_SEQUENCE_TASK( uVar2 );
    if ( /* ISPEDVALID */ sub_50224( l_U676[0], 0 ))
    {
        SET_PED_ACCURACY( l_U676[0], 31186664 );
        SET_PED_IGNORE_LOS_CHECKS( l_U676[0], 1 );
        SET_PED_ALERTNESS( l_U676[0], 3 );
        SET_BLOCKING_OF_PED_TARGETTING( l_U676[0], 0 );
        REGISTER_TARGET( l_U676[0], l_U736 );
        TASK_PERFORM_SEQUENCE( l_U676[0], uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
    }
    vVar7 = {28.34551000, 2.41186500, 8.28302700};
    OPEN_SEQUENCE_TASK( ref uVar6 );
    TASK_PAUSE( 0, 5000 );
    TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, vVar7,  /* PLAYER_PED_ID */ sub_987(), 1, 1092616192, 1101004800, -1082130432, 3 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if (( /* ISPEDVALID */ sub_50224(  /* PLAYER_PED_ID */ sub_987(), 0 )) == 1)
    {
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_987() );
    }
    CLOSE_SEQUENCE_TASK( uVar6 );
    if ( /* ISPEDVALID */ sub_50224( l_U676[1], 0 ))
    {
        REGISTER_TARGET( l_U676[1],  /* PLAYER_PED_ID */ sub_987() );
        TASK_PERFORM_SEQUENCE( l_U676[1], uVar6 );
        CLEAR_SEQUENCE_TASK( uVar6 );
    }
    OPEN_SEQUENCE_TASK( ref uVar6 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if (( /* ISPEDVALID */ sub_50224(  /* PLAYER_PED_ID */ sub_987(), 0 )) == 1)
    {
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_987() );
    }
    CLOSE_SEQUENCE_TASK( uVar6 );
    if ( /* ISPEDVALID */ sub_50224( l_U676[2], 0 ))
    {
        REGISTER_TARGET( l_U676[2],  /* PLAYER_PED_ID */ sub_987() );
        SET_PED_PATH_CAN_AVOID_LINE_OF_FIRE( l_U676[2], 0 );
        TASK_PERFORM_SEQUENCE( l_U676[2], uVar6 );
        CLEAR_SEQUENCE_TASK( uVar6 );
    }
    OPEN_SEQUENCE_TASK( ref uVar11 );
    TASK_PAUSE( 0, 3500 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if (( /* ISPEDVALID */ sub_50224(  /* PLAYER_PED_ID */ sub_987(), 0 )) == 1)
    {
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_987() );
    }
    CLOSE_SEQUENCE_TASK( uVar11 );
    if ( /* ISPEDVALID */ sub_50224( l_U676[3], 0 ))
    {
        REGISTER_TARGET( l_U676[3],  /* PLAYER_PED_ID */ sub_987() );
        SET_PED_PATH_CAN_AVOID_LINE_OF_FIRE( l_U676[3], 0 );
        TASK_PERFORM_SEQUENCE( l_U676[3], uVar11 );
        CLEAR_SEQUENCE_TASK( uVar11 );
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_BALCONY_REBEL_ATTACK: END", 0 );
    return;
}

/* P_MD_GYM_CIV_VICTIM_DEATHSCREAM */ void sub_55261()
{
     /* WRITESCRIPTLOG */ sub_489( "CR", "P_MD_GYM_CIV_VICTIM_DEATHSCREAM: START", 0 );
    l_U759 = GET_SOUND_ID();
    PLAY_SOUND_FROM_PED( l_U759, "S_PANA_WOMAN_SCREAM", l_U736 );
     /* WRITESCRIPTLOG */ sub_489( "CR", "P_MD_GYM_CIV_VICTIM_DEATHSCREAM: END", 0 );
    return;
}

/* MAL_GETACTINTSTATUS */ int sub_55548(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return PED_GET_ACTION_INTENTION_STATUS( uParam0, uParam1 );
    }
    return 0;
}

/* MAL_FINISHACTINT */ void sub_55645(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        PED_FINISH_ACTION_INTENTION( (uParam0^), uParam1 );
    }
    return;
}

/* P_MD_GYM_SETUP_EXECUTOR_COMBAT */ void sub_55710()
{
    if ( /* ISPEDVALID */ sub_50224( l_U676[1], 0 ))
    {
        SET_PED_ACCURACY( l_U676[1], -729479261 );
        SET_PED_IGNORE_LOS_CHECKS( l_U676[1], 0 );
    }
    return;
}

/* P_MD_GYM_CIV_VICTIM_KILLED */ void sub_55816()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GYM_CIV_VICTIM_KILLED: START", 0 );
    if ( /* ISPEDVALID */ sub_50224( l_U736, 0 ))
    {
         /* P_ADD_GORE_TO_PED */ sub_55939( l_U736, 1, 14989, 1.00000000, 1, 2, 1.50000000 );
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_GYM_CIV_VICTIM_KILLED: END", 0 );
    return;
}

/* P_ADD_GORE_TO_PED */ void sub_55939(unknown uParam0, boolean bParam1, unknown uParam2, unknown uParam3, boolean bParam4, int iParam5, unknown uParam6)
{
    int I;

    if (bParam1)
    {
        if ((DOES_PED_EXIST( uParam0 )) == 1)
        {
            START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE( "Blood_headsoup_S_01", uParam0, 0, 0, 0, 0, 0, 0, uParam2, uParam3 );
        }
    }
    I = 0;
    if (bParam4)
    {
        if ((DOES_PED_EXIST( uParam0 )) == 1)
        {
            for ( I = 0; I < iParam5; I++ )
            {
                DAMAGE_DECALS_ON_PED( uParam0, uParam6 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* P_GLOBAL_YACHT_REAR_DOOR_CLOSE */ void sub_56203()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GLOBAL_YACHT_REAR_DOOR_CLOSE: START", 0 );
    if (DOES_OBJECT_EXIST( g_U4075 ))
    {
        PLAY_OBJECT_ANIM( g_U4075, "P_MI_DoorsAnim_H", "pa_doors", 0.00000000, 0, 1 );
        SET_OBJECT_ANIM_CURRENT_TIME( g_U4075, "P_MI_DoorsAnim_H", "pa_doors", 1.00000000 );
        SET_OBJECT_ANIM_SPEED( g_U4075, "P_MI_DoorsAnim_H", "pa_doors", -1.00000000 );
         /* P_SAFE_STOP_SOUND */ sub_5987( g_U4081, 0 );
         /* P_SAFE_RELEASE_SOUND_ID */ sub_6170( ref g_U4081 );
        g_U4081 = GET_SOUND_ID();
        PLAY_SOUND_FROM_OBJECT( g_U4081, "SHIP_DOOR", g_U4075 );
        g_U4080 = 1;
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GLOBAL_YACHT_REAR_DOOR_CLOSE: END", 0 );
    return;
}

/* CUTSYS_HANDLETRIGGERTYPEDOOR_NOHOLSTERING */ int sub_56603(int iParam0, unknown uParam1, boolean bParam2, boolean bParam3)
{
    if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_43054( iParam0, 0 )) == 1)
    {
        if (NOT bParam3)
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_987(), 1 );
        }
        if (NOT bParam2)
        {
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1025(), 0 );
        }
    }
    if ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_52800( (iParam0^) ))) AND (iParam0->_fU64))
    {
        iParam0->_fU64 = 0;
        if (NOT bParam3)
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_987(), 0 );
        }
        if (NOT bParam2)
        {
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1025(), 1 );
        }
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_43054( uParam1, 0 ))
    {
        return 1;
    }
    return 0;
}

/* P_GLOBAL_MAIN_DECK_BODIES_SAVE */ void sub_56864(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GLOBAL_MAIN_DECK_BODIES_SAVE - START", 0 );
     /* WRITESCRIPTLOG */ sub_489( "MF", "Saving Dead Ped Data...", 0 );
    if ((IS_PED_DEAD( uParam0 )) AND (DOES_PED_EXIST( uParam0 )))
    {
         /* WRITESCRIPTLOG */ sub_489( "MF", "First rebel is dead...Creating Struct...", 0 );
        g_U4154[0] = 1;
         /* P_CREATEPEDSTRUCTWITHNAME */ sub_14449( ref g_U4082[0], "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 ), GET_PED_HEADING( uParam0 ), 309970845, 7, 3, 2, 0, 0 );
    }
    if ((IS_PED_DEAD( uParam1 )) AND (DOES_PED_EXIST( uParam1 )))
    {
         /* WRITESCRIPTLOG */ sub_489( "MF", "Second rebel is dead...Creating Struct...", 0 );
        g_U4154[1] = 1;
         /* P_CREATEPEDSTRUCTWITHNAME */ sub_14449( ref g_U4082[1], "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 ), GET_PED_HEADING( uParam1 ), -1571857769, 7, 3, 2, 0, 0 );
    }
    if ((IS_PED_DEAD( uParam2 )) AND (DOES_PED_EXIST( uParam2 )))
    {
         /* WRITESCRIPTLOG */ sub_489( "MF", "Third rebel is dead...Creating Struct...", 0 );
        g_U4154[2] = 1;
         /* P_CREATEPEDSTRUCTWITHNAME */ sub_14449( ref g_U4082[2], "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam2 ), GET_PED_HEADING( uParam2 ), 309970845, 7, 3, 2, 0, 0 );
    }
    if ((IS_PED_DEAD( uParam3 )) AND (DOES_PED_EXIST( uParam3 )))
    {
         /* WRITESCRIPTLOG */ sub_489( "MF", "Fourth rebel is dead...Creating Struct...", 0 );
        g_U4154[3] = 1;
         /* P_CREATEPEDSTRUCTWITHNAME */ sub_14449( ref g_U4082[3], "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam3 ), GET_PED_HEADING( uParam3 ), -1571857769, 7, 3, 2, 0, 0 );
    }
    g_U4154[4] = 1;
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14449( ref g_U4082[4], "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam4 ), (GET_PED_HEADING( uParam4 )) + 180.00000000, 923995809, 7, 3, 2, 0, 0 );
    if (g_U4082[2]._fU0._fU0 > 32.00000000)
    {
        g_U4082[2]._fU0._fU0 = 32.00000000;
    }
    if (g_U4082[3]._fU0._fU0 > 32.00000000)
    {
        g_U4082[3]._fU0._fU0 = 32.00000000;
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_GLOBAL_MAIN_DECK_BODIES_SAVE - END", 0 );
    return;
}

/* MAL_SETPEDVISIBLE */ void sub_57797(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_VISIBLE( uParam0, uParam1 );
    }
    else
    {
         /* MAL_WRITESCRIPTLOG */ sub_57903( "MAL_SetPedVisible DOES NOT HAVE VALID PED!" );
    }
    return;
}

/* MAL_WRITESCRIPTLOG */ void sub_57903(unknown uParam0)
{
    unknown uVar3;

    uVar3 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar3, 1537, "MSWW", 1537, uParam0, 1537, "###" );
    return;
}

/* P_RESET_MAX_ACTION_TREE */ void sub_58020()
{
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_RESET_MAX_ACTION_TREE start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )))
    {
        if (IS_PLAYER_SHOOTDODGING())
        {
            SCRIPT_ASSERT( "Do not try to reset Max's action tree when he is shoot dodging.", 0 );
             /* WRITESCRIPTLOG */ sub_489( "GA", "You cannot reset Max's action tree during a shoot dodge.", 0 );
        }
        else
        {
            PED_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_987(), "/Global/Player" );
        }
    }
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_RESET_MAX_ACTION_TREE end", 0 );
    return;
}

/* KILL_ANY_MISSION_SPEECH */ void sub_58477(unknown uParam0)
{
    int I;

    for ( I = 0; I <= 3; I++ )
    {
        PRINTSTRING( "\n KILL_ANY_MISSION_SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( I ))
        {
            if ((g_U1[I] <= 8) AND (g_U1[I] >= 4))
            {
                STOP_SCRIPTED_CONVERSATION( I, uParam0, 0 );
            }
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_58808(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1025(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_987(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_58906();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_58906()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_987(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_987(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_987(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_987(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_59469(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* CUTSYS_DEFAULT_PRECUTSCENESETUP */ int sub_60003()
{
    return 1;
}

/* P_MD_MID_01C_REGISTER */ void sub_60056()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_MID_01C_REGISTER - START", 0 );
    if ( /* ISPEDVALID */ sub_50224(  /* PLAYER_PED_ID */ sub_987(), 0 ))
    {
        if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_987(), 0, 0 ) ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_987(), 0, 0 ), "W_PI_Clt1911_Aa_H", 0 );
        }
        if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_987(), 1, 0 ) ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_987(), 1, 0 ), "W_PI_Glk18_Aa_H", 0 );
        }
        else if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_987(), 2 ) ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_987(), 2 ), "W_PI_Glk18_Aa_H", 0 );
        }
        CUTSCENE_OBJECT_OVERRIDE_VISIBILITY( "W_PI_Clt1911_Aa_H" );
        CUTSCENE_OBJECT_OVERRIDE_VISIBILITY( "W_PI_Glk18_Aa_H" );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_987(), "Global/Player/PlayerRoot/PLAYER_INITIALIZE_IDLE" );
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_987(), 52.67000000, 9.62000000, -1.28633800, -175.97000000 );
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_MID_01C_REGISTER - END", 0 );
    return;
}

/* P_MD_MID_01C_HANDLE */ void sub_60549()
{
    if (l_U498._fU52)
    {
         /* NIS_CREATE_STATIC_CAM */ sub_60638( ref l_U534, 55.73072000, 12.52482000, 0.74904500, -6.24701100, -0.00001100, 133.58310000, 45, 300 );
         /* NIS_PLAY_STATIC_CAMERA */ sub_44451( ref l_U534 );
    }
    return;
}

/* NIS_CREATE_STATIC_CAM */ void sub_60638(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_1888( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U703, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* F_MD_MID_01C_POST */ int sub_60886()
{
    if (HAS_CUTSCENE_UNLOADED() == 1)
    {
         /* WRITE_STRING */ sub_8819( "Loading MID_02_PANAMA_concat..." );
         /* LOADSEAMLESSCUTSCENE */ sub_59469( "MID_02_PANAMA_concat", 0 );
        return 1;
    }
    return 0;
}

/* P_MD_MID_01C_PREPARE_BLEND_OUT */ void sub_61011()
{
     /* NIS_CREATE_STATIC_CAM */ sub_60638( ref l_U534, 55.73072000, 12.52482000, 0.74904500, -6.24701100, -0.00001100, 133.58310000, 45, 300 );
     /* NIS_PLAY_STATIC_CAMERA */ sub_44451( ref l_U534 );
    return;
}

/* F_MD_MID_01C_HANDLE_BLEND_OUT */ int sub_61119()
{
     /* NIS_RETURN_TO_GAMEPLAY_CAM */ sub_61179( 500, 1, 0, -50.45000000, -6.24000000, 0 );
    return 1;
}

/* NIS_RETURN_TO_GAMEPLAY_CAM */ void sub_61179(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, float fParam4, unknown uParam5)
{
    SET_CAM_SIDE_LEFT( uParam2 );
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam3, 1065353216, 0 );
    }
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( fParam4, 1065353216, 0 );
    }
    RENDER_SCRIPT_CAMS( 0, uParam1, uParam0, uParam5 );
    return;
}

/* P_MD_MID_01C_PREPARE_BLEND_IN */ void sub_61314()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "WriteScriptLog - START", 0 );
     /* STARTTIMER */ sub_2038( ref l_U525 );
     /* WRITESCRIPTLOG */ sub_489( "MF", "WriteScriptLog - END", 0 );
    return;
}

/* F_MD_MID_01C_HANDLE_BLEND_IN */ int sub_61443()
{
    if (( /* ISTIMERDONE */ sub_2171( ref l_U525 )) == 1)
    {
        DO_SCREEN_FADE_OUT( 150 );
    }
    if (IS_SCREEN_FADED_OUT() == 1)
    {
         /* NIS_RETURN_TO_GAMEPLAY_CAM */ sub_61179( 0, 0, 0, -859915232, -859915232, 0 );
        return 1;
    }
    return 0;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUTANDBLENDIN */ void sub_61560(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
     /* WRITESCRIPTLOG */ sub_489( "MSWW", "CutSys_CreateCutsceneWithBlendOutAndBlendIn", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_61710( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam11, 1, uParam6, uParam7, 1, uParam8, uParam9, uParam10 );
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_61710(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_HANDLECUTSCENE */ void sub_62020(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_489( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_489( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_489( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_489( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_489( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_489( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_59469( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_489( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_44272( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_44272( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_489( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_63285( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_44272( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_58808( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_58808( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_63285(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_987() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_987(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_987(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_987(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_987(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_987(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* P_MD_MID_01D_REBEL_SHOOT_PLAYER */ void sub_63831()
{
    vector vVar2;

     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_MID_01D_REBEL_SHOOT_PLAYER - start", 0 );
    l_U565 =  /* F_MID_01D_GET_REBEL */ sub_63928();
    SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U565, 1 );
    CLEAR_PED_TASKS_IMMEDIATELY( l_U565 );
    FREEZE_PED_POSITION( l_U565, 1 );
     /* P_UPDATE_MID_01D_CURR_STATE */ sub_64074();
    ISEQ_REGISTER_ENTITY( -829350039, "Ped", l_U565, 0 );
    ISEQ_START( -829350039 );
     /* CREATETIMER */ sub_1888( ref l_U1020, 2200, 1, 0 );
     /* STARTTIMER */ sub_2038( ref l_U1020 );
    switch (l_U566)
    {
        case 2:
         /* TELEPORTPED */ sub_53018( l_U565, l_U667, 65446 );
        vVar2 = {55.40340000, 2.35010400, 4.00000000};
        break;
        case 0:
         /* TELEPORTPED */ sub_53018( l_U565, l_U664, 180 );
        vVar2 = {42.45063000, -7.63203000, 1.00000000};
        break;
        case 1:
         /* TELEPORTPED */ sub_53018( l_U565, l_U661, 0 );
        vVar2 = {42.44620000, 14.90653000, -1.00000000};
        break;
    }
    if ( /* ISPEDVALID */ sub_50224( l_U565, 0 ))
    {
        SET_PED_CONSUMING_AMMO( l_U565, 0 );
         /* P_RESET_PED_AMMO_IN_CLIP */ sub_64488( l_U565 );
        CLEAR_PED_DEFAULT_AIM( l_U565 );
        if (l_U565 == l_U676[1])
        {
            TASK_SHOOT_AT_COORD( l_U565, vVar2, -1, -256437761, 0, 0 );
        }
    }
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_MID_01D_REBEL_SHOOT_PLAYER - end", 0 );
    return;
}

/* F_MID_01D_GET_REBEL */ void sub_63928()
{
    int I;

    for ( I = 0; I < l_U676; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U676[I] )))
        {
            return l_U676[I];
        }
    }
    return nil;
}

/* P_UPDATE_MID_01D_CURR_STATE */ void sub_64074()
{
    if ( /* ISPEDVALID */ sub_50224(  /* PLAYER_PED_ID */ sub_987(), 0 ))
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_11890(  /* PLAYER_PED_ID */ sub_987(), l_U567 ))
        {
            l_U566 = 0;
        }
        else if ( /* F_ISPEDINTRIGGERBOX */ sub_11890(  /* PLAYER_PED_ID */ sub_987(), l_U588 ))
        {
            l_U566 = 1;
        }
        else if ( /* F_ISPEDINTRIGGERBOX */ sub_11890(  /* PLAYER_PED_ID */ sub_987(), l_U609 ))
        {
            l_U566 = 2;
        };;;
    }
    return;
}

/* P_RESET_PED_AMMO_IN_CLIP */ void sub_64488(unknown uParam0)
{
    unknown uVar3;

    uVar3 = GET_MAX_AMMO_IN_CLIP( uParam0,  /* F_GET_PED_CUR_WEAPON_TYPE */ sub_64529( uParam0 ) );
    SET_AMMO_IN_CLIP( uParam0,  /* F_GET_PED_CUR_WEAPON_TYPE */ sub_64529( uParam0 ), uVar3 );
    return;
}

/* F_GET_PED_CUR_WEAPON_TYPE */ int sub_64529(unknown uParam0)
{
    int iVar3;

    iVar3 =  /* F_GET_PED_CUR_WEAPON */ sub_64569( uParam0 );
    if (iVar3 != nil)
    {
        return GET_WEAPON_TYPE( iVar3 );
    }
    return -1569615261;
}

/* F_GET_PED_CUR_WEAPON */ void sub_64569(unknown uParam0)
{
    int Result;

    Result = GET_WEAPON_FROM_HAND( uParam0, 0, 0 );
    if (Result == nil)
    {
        Result = GET_WEAPON_FROM_HAND( uParam0, 1, 0 );
    }
    return Result;
}

/* P_MD_MID_01D_PLAY_CAMERA */ void sub_64834()
{
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_MID_01D_PLAY_CAMERA - START", 0 );
     /* P_UPDATE_MID_01D_CURR_STATE */ sub_64074();
    switch (l_U566)
    {
        case 2:
         /* NIS_CREATE_STATIC_CAM */ sub_60638( ref l_U630, 52.61000000, 2.23000000, 2.44000000, 31.76000000, 0.00000000, 55.55000000, 45, 2500 );
        break;
        case 0:
         /* NIS_CREATE_STATIC_CAM */ sub_60638( ref l_U630, 41.95000000, -4.99000000, 2.59000000, 21.62000000, -0.50000000, -47.79000000, 45, 2500 );
        break;
        case 1:
         /* NIS_CREATE_STATIC_CAM */ sub_60638( ref l_U630, 43.10000000, 12.31000000, 2.59000000, 27.15000000, 0.19000000, 129.98000000, 45, 2500 );
        break;
    }
     /* NIS_PRE_SETUP */ sub_44272( 1, 0, 0, 1 );
     /* NIS_PLAY_STATIC_CAMERA */ sub_44451( ref l_U630 );
    DO_SCREEN_FADE_IN( 500 );
    WAIT( 0 );
    SHAKE_CAM( l_U630._fU0, "HAND_SHAKE", 2.00000000 );
     /* WRITESCRIPTLOG */ sub_489( "MF", "P_MD_MID_01D_PLAY_CAMERA - END", 0 );
    return;
}

/* NIS_IS_SHOT_FINISHED */ int sub_65548(int iParam0, boolean bParam1)
{
    if (bParam1 == 1)
    {
        if (NOT iParam0->_fU44)
        {
            if ((ref iParam0->_fU48->_fU16) || ( /* ISTIMERDONE */ sub_2171( iParam0 + 48 )))
            {
                iParam0->_fU44 = 1;
                iParam0->_fU36 = 1;
                return 1;
            }
        }
    }
    if (NOT bParam1)
    {
        if ((ref iParam0->_fU48->_fU16) || ( /* ISTIMERDONE */ sub_2171( iParam0 + 48 )))
        {
            iParam0->_fU36 = 1;
            return 1;
        }
    }
    return 0;
}

/* P_MD_DEBUG_TUNING_WIDGET */ void sub_65823()
{
    if (NOT l_U1029)
    {
        START_WIDGET_GROUP( "Main Deck 1 Tuning" );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_65928( ref l_U1004, "Blood Cam Offset", 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Blood Cam Rotation", ref l_U1007, -1E8, 1E8, 0.10000000 );
        ADD_WIDGET_INT_SLIDER( "Blood Cam Trim", ref l_U1008, 0, 10000000, 100 );
        STOP_WIDGET_GROUP();
        l_U1029 = 1;
    }
    return;
}

/* P_ADD_WIDGET_VECTOR_SLIDER */ void sub_65928(int iParam0, unknown uParam1, unknown uParam2)
{
    START_WIDGET_GROUP( uParam1 );
    ADD_WIDGET_FLOAT_SLIDER( "x", iParam0 + 0, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "y", iParam0 + 4, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "z", iParam0 + 8, 60536, 5000, uParam2 );
    STOP_WIDGET_GROUP();
    return;
}

/* P_RELEASE_MD1_ASSETS */ void sub_66196()
{
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_RELEASE_MD1_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_66277( ref l_U176, ref g_U1588 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_66825( ref l_U184, ref g_U1829 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_67252( ref g_U3079, ref g_U3026 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_67615( "LEVEL_S_PAN_CP_03", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_67615( "EXPL_CAM", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_489( "GA", "P_RELEASE_MD1_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_66277(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_66350( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_66350(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3585( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_66825(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_66899( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_66899(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3585( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_67252(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3585( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_67615(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3585( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

