void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U58 = 0;
    l_U59 = 0;
    l_U60 = 1500;
    l_U70 = {0, 0, 0};
    StrCopy( ref l_U73, "DUMMY", 32 );
    l_U81 = 1;
    l_U86 = 0;
    l_U87 = 0;
    l_U88 = 0;
    l_U91 = 0;
    l_U136 = -1;
    l_U137 = {64536, 64536, 64536};
    l_U190 = 0;
    l_U192 = 0;
    l_U323 = {43.50432000, 32.01159000, 8.68126900};
    l_U326 = 90.00000000;
    l_U337 = 0;
    l_U388 = {15.93000000, 42.00000000, 4.87000000};
    l_U391 = 180.00000000;
    l_U426 = {24.40000000, 4.00000000, 10.00000000};
    l_U429 = -90.00000000;
    l_U872 = {-61.23590000, 30.93651000, 7.91160400};
    l_U875 = 0.60000000;
    l_U876 = 35000;
    l_U1034 = {18.83672000, 5.55908600, 6.13959900};
    l_U1110 = 0;
    l_U1112 = 0;
    l_U1113 = 0;
     /* WRITESCRIPTLOG */ sub_553( "SP", "Script s_pana_TD.sc is starting up...", 0 );
     /* P_TD_SETUP_DATA_ARRAYS */ sub_671();
    l_U190 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_971();
        if (l_U192 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_19100();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_TD */ sub_5152( 1 );
     /* P_RELEASE_TD_ASSETS */ sub_80515();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_pana_TD" );
     /* WRITESCRIPTLOG */ sub_553( "SP", "Script s_pana_TD.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_553(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_TD_SETUP_DATA_ARRAYS */ void sub_671()
{
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_SETUP_DATA_ARRAYS start", 0 );
    l_U176[0] = g_U1519;
    l_U176[1] = g_U1527;
    l_U176[2] = g_U1516;
    l_U176[3] = g_U1535;
    l_U176[4] = g_U1534;
    l_U176[5] = g_U1583;
    l_U176[6] = g_U1572;
    l_U176[7] = -1409914275;
    l_U176[8] = 1454823397;
    l_U176[9] = 1422154951;
    l_U187[0] = 1308526797;
    l_U187[1] = -184942895;
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_SETUP_DATA_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_971()
{
    if (g_U834 == 6)
    {
        switch (l_U192)
        {
            case 0:
             /* ISMAXOVERBOARD */ sub_1073( 1 );
             /* P_G_HANDLE_MAX_FALLING_DOWN_FROM_TOP_DECK */ sub_2625();
            if (( /* RESTARTING_CHECKPOINT */ sub_2870()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
            {
                l_U192 = 1;
                 /* WRITESCRIPTLOG */ sub_553( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_3388())
            {
                if ((g_U835[7]._fU40 != 4) AND (g_U835[7]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_553( "GA", "Shutting down script for helipad.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_3524( ref g_U835[7] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U835[7]._fU32 );
                }
                l_U192 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_3617( 0 )) == 1)
            {
                if ((g_U835[7]._fU40 != 4) AND (g_U835[7]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_553( "GA", "Shutting down script for helipad.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_3524( ref g_U835[7] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U835[7]._fU32 );
                }
                l_U192 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
            {
                l_U192 = 3;
                 /* WRITESCRIPTLOG */ sub_553( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_553( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1138() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1138(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1100() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1100(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
             /* P_CLEANUP_TD */ sub_5152( 0 );
            if (g_U834 == 6)
            {
                SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "Deck3exit", 0 ), 1, 0 );
                LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "Deck3exit", 0 ), GET_HASH_KEY( ref g_U3303 ) );
            }
            l_U192 = 4;
             /* WRITESCRIPTLOG */ sub_553( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_553( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U140._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_9680( ref l_U140,  /* PLAYER_PED_ID */ sub_1100() );
            }
            l_U192 = 5;
             /* WRITESCRIPTLOG */ sub_553( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_553( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U190 = 1;
             /* P_GLOBAL_CREATE_ALL_DOORS */ sub_14289();
            l_U192 = 0;
             /* WRITESCRIPTLOG */ sub_553( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* ISMAXOVERBOARD */ int sub_1073(int iParam0)
{
    if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))))
    {
        if ((IS_PED_IN_WATER(  /* PLAYER_PED_ID */ sub_1100() )) == 1)
        {
            if (NOT g_U3626._fU32)
            {
                 /* P_GBL_QUICK_GAMEPLAY_CAM_COPY */ sub_1259();
            }
            if (iParam0 == 1)
            {
                 /* P_GLOBAL_MAX_WATER_IMPACT_DEATH */ sub_2215();
            }
             /* NIS_POST_SETUP */ sub_2307( 1, 1 );
            return 1;
        }
    }
    return 0;
}

/* PLAYER_PED_ID */ int sub_1100()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1138() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1138()
{
    return GET_PLAYER_ID();
}

/* P_GBL_QUICK_GAMEPLAY_CAM_COPY */ void sub_1259()
{
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_GBL_QUICK_GAMEPLAY_CAM_COPY - START", 0 );
     /* NIS_CREATE_GAMEPLAY_CAM_COPY */ sub_1359( ref g_U3626, 50 );
     /* NIS_PRE_SETUP */ sub_1737( 0, 0, 0, 1 );
     /* NIS_PLAY_STATIC_CAMERA */ sub_1916( ref g_U3626 );
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_GBL_QUICK_GAMEPLAY_CAM_COPY - END", 0 );
    return;
}

/* NIS_CREATE_GAMEPLAY_CAM_COPY */ void sub_1359(int iParam0, unknown uParam1)
{
    iParam0->_fU4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_GAMEPLAY_CAM_ROT()};
    iParam0->_fU16 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_GAMEPLAY_CAM_COORD()};
    iParam0->_fU28 = GET_GAMEPLAY_CAM_FOV();
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam1;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_1513( iParam0 + 48, uParam1, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U703, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* CREATETIMER */ void sub_1513(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* NIS_PRE_SETUP */ void sub_1737(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1138(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1100(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1100() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1100(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* NIS_PLAY_STATIC_CAMERA */ void sub_1916(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_1996( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* STARTTIMER */ void sub_1996(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* P_GLOBAL_MAX_WATER_IMPACT_DEATH */ void sub_2215()
{
    SET_PAD_SHAKE( 0, 100, 250 );
    WAIT( 90 );
    SET_PED_HEALTH(  /* PLAYER_PED_ID */ sub_1100(), 0, 0 );
    return;
}

/* NIS_POST_SETUP */ void sub_2307(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1138(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1100(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_2405();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_2405()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1100(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1100(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1100(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1100(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_G_HANDLE_MAX_FALLING_DOWN_FROM_TOP_DECK */ void sub_2625()
{
    if ( /* F_ISPEDINTRIGGERBOX */ sub_2690(  /* PLAYER_PED_ID */ sub_1100(), g_U3657 ))
    {
         /* P_KILL_PED */ sub_2772(  /* PLAYER_PED_ID */ sub_1100() );
    }
    return;
}

/* F_ISPEDINTRIGGERBOX */ int sub_2690(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_KILL_PED */ void sub_2772(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* RESTARTING_CHECKPOINT */ int sub_2870()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1100(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1138(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1138(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1100() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1100(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_3388()
{
    return g_U648;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_3524(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* F_CHECK_QUIT_RETRY */ int sub_3617(int iParam0)
{
    iParam0 = 1;
    switch (l_U59)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_3699( ref l_U61 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
            {
                l_U60 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1513( ref l_U61, l_U60, 1, 1 );
             /* STARTTIMER */ sub_1996( ref l_U61 );
        }
        if ( /* ISTIMERDONE */ sub_3851( ref l_U61 ))
        {
             /* WRITESCRIPTLOG */ sub_553( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1138() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1138(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U59 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U59 = 2;
            }
            else
            {
                l_U59 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_553( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_4352();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_553( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_4352();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_3699(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* ISTIMERDONE */ int sub_3851(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_4352()
{
     /* WRITESCRIPTLOG */ sub_553( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_4427( ref l_U61 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1138() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1138(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U58 = 0;
    l_U58 = l_U58;
    l_U59 = 0;
    return;
}

/* RESETTIMER */ void sub_4427(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_CLEANUP_TD */ void sub_5152(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_CLEANUP_TD start", 0 );
     /* P_STOP_SP_CHALLENGES */ sub_5209();
     /* P_STREAMREQ_SCRIPT_STREAM_STOP */ sub_5389( "S_PANA_SHORE_TRUCK", ref g_U2986 );
     /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_6179( "S_PANA_SHORE_TRUCK", ref g_U2986 );
     /* P_STREAMREQ_SCRIPT_STREAM_STOP */ sub_5389( "Mid_02B_Panama_CENTER_MG", ref g_U2986 );
     /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_6179( "Mid_02B_Panama_CENTER_MG", ref g_U2986 );
     /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_6179( "S_PANA_HELI_ARRIVE", ref g_U2986 );
     /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_6179( "S_PANA_HELI_LOOP", ref g_U2986 );
     /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_6179( "S_PANA_HELI_DEPART", ref g_U2986 );
    ISEQ_TERMINATE( -1244939386 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_7387( -1244939386, ref g_U1878 );
    if ((CUTSCENE_NAMED_IS_LOADING( "MID_02B_PANAMA" )) || (CUTSCENE_IS_LOADED( "MID_02B_PANAMA" )))
    {
        CLEAR_NAMED_CUTSCENE( "MID_02B_PANAMA" );
    }
    if (DOES_VEHICLE_EXIST( g_U3361 ))
    {
        FREE_VEHICLE_INST_LIGHT_TUNE_DATA( g_U3361 );
    }
     /* P_ENABLE_POI */ sub_7880( ref l_U948, 0 );
    if (NOT bParam0)
    {
         /* CLEANPEDARRAY */ sub_8895( ref g_U4148 );
         /* CLEANPEDARRAY */ sub_8895( ref g_U3349 );
         /* CLEANPED */ sub_8945( g_U3362 );
         /* CLEANPED */ sub_8945( g_U3363 );
         /* CLEANPEDARRAY */ sub_8895( ref g_U3366 );
         /* CLEANPEDARRAY */ sub_8895( ref l_U545 );
         /* CLEANOBJECT */ sub_9101( g_U4225 );
         /* CLEANOBJECT */ sub_9101( g_U4226 );
         /* CLEANOBJECT */ sub_9101( g_U4231 );
         /* CLEANOBJECT */ sub_9101( g_U4230 );
         /* CLEANOBJECT */ sub_9101( g_U3382 );
         /* CLEANVEHICLE */ sub_9200( g_U3361 );
         /* CLEANPLACEMENT */ sub_9274( g_U3373 );
         /* CLEANPLACEMENT */ sub_9274( g_U3374 );
    }
     /* CLEANPED */ sub_8945( g_U3364 );
     /* CLEANVEHICLE */ sub_9200( g_U3359 );
     /* CLEANPED */ sub_8945( g_U3365 );
     /* CLEANVEHICLE */ sub_9200( g_U3360 );
    if ((AUDIO_MUSIC_IS_ONESHOT_PREPARED( "PANAMA_OS_6" )) || (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "PANAMA_OS_3" )))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_CLEANUP_TD end", 0 );
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_5209()
{
     /* WRITESCRIPTLOG */ sub_553( "CCB", "P_STOP_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_553( "CCB", "Stopping the Panama_Top_Deck context...", 0 );
    END_CONTEXT( "Panama_Top_Deck" );
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_STOP */ void sub_5389(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_5439( uParam0, uParam1 ))
    {
        iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_5648( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            DISPLAYF( "[CCB]### Stopping the SCRIPT_STREAM: {} ###", 1, 1281, ref (uParam1^)[iVar4]._fU0 );
            STOP_SCRIPT_STREAM( iVar4 );
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam0 );
            SCRIPT_ASSERT( "Attempting to stop a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam0 );
        DISPLAYF( "Attempting to stop a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ int sub_5439(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB]### The SCRIPT_STREAM is loaded: {} ###", 1, 1281, ref (uParam1^)[I]._fU0 );
                return 1;
            }
        }
    }
    return 0;
}

/* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ int sub_5648(unknown uParam0, unknown uParam1)
{
    int Result;

    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
        {
            return Result;
        }
    }
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ void sub_6179(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6325( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a SCRIPT_STREAM asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_6325(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_7387(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6325( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* P_ENABLE_POI */ void sub_7880(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if ((iParam0->_fU4 == 1) AND (iParam0->_fU320 == 1))
        {
             /* P_ENABLEPOIGLINT */ sub_7939( iParam0, 1 );
        }
        iParam0->_fU0 = 1;
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_7939( iParam0, 0 );
         /* P_ENABLEPOIINTERACTIONTEXT */ sub_8158( iParam0, 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0)
        {
            TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_1100() );
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1100(), 0 );
                iParam0->_fU328 = 0;
            }
        }
        iParam0->_fU8 = 0;
        iParam0->_fU0 = 0;
    }
    return;
}

/* P_ENABLEPOIGLINT */ void sub_7939(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if (iParam0->_fU12 != nil)
        {
            if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
            {
                ENABLE_GLINT( iParam0->_fU12, 1 );
            }
            else
            {
                iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
            }
        }
        else
        {
            iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
        }
    }
    else if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            ENABLE_GLINT( iParam0->_fU12, 0 );
        }
    }
    return;
}

/* P_ENABLEPOIINTERACTIONTEXT */ void sub_8158(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
        SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
        if ((iParam0->_fU72 == 0) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU68 == 1)))
        {
            SET_INTERACTIONTEXT_VISIBLE( 0 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
        else
        {
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_8338( iParam0 );
        if (iParam0->_fU332 == 1)
        {
            SET_INTERACTIONTEXT_PULSE( 1 );
            SET_INTERACTIONTEXT_PULSE_PERIOD( iParam0->_fU336 );
        }
    }
    else
    {
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
    }
    return;
}

/* P_UPDATEINTERACTIONTEXTAVAILABLE */ void sub_8338(int iParam0)
{
    if (iParam0->_fU60 == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 0 );
        iParam0->_fU56 = 0;
    }
    else if (iParam0->_fU56 == 1)
    {
        if (( /* F_ISACTIONINGAVAILABLE */ sub_8434( iParam0 )) == 0)
        {
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
    }
    else if (( /* F_ISACTIONINGAVAILABLE */ sub_8434( iParam0 )) == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 1 );
        iParam0->_fU56 = 1;
    };;;
    return;
}

/* F_ISACTIONINGAVAILABLE */ int sub_8434(int iParam0)
{
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1138() )) == 0))
    {
        if (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_1100() )) == 1) || (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_1100() )) == 1) || (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_1100() )) == 1) || (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_1100() )) == 1) || (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1100() )) == 1) || (IS_PLAYER_SHOOTDODGING() == 1))))))
        {
            return 0;
        }
        if (iParam0->_fU304 == 0)
        {
            if ((IS_MONOLOGUE_PLAYING() == 1) || ((IS_ANY_SPEECH_PLAYING(  /* PLAYER_PED_ID */ sub_1100() )) == 1))
            {
                return 0;
            }
        }
        return 1;
    }
    return 0;
}

/* CLEANPEDARRAY */ void sub_8895(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_8945( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_8945(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANOBJECT */ void sub_9101(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANVEHICLE */ void sub_9200(unknown uParam0)
{
    if (IS_VEHICLE_DEAD( uParam0 ))
    {
        ;
    }
    if (DOES_VEHICLE_EXIST( uParam0 ))
    {
        DELETE_VEHICLE( ref uParam0 );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_9274(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_9680(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_553( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_9899( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_11063( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11377( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11856( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11377( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11856( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11377( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11856( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_12172( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11856( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_12172( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_11856( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_12744( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_12946( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1100(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_553( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_9899(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_9961( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_9961(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_11063(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_11377(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_11781( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_11781(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_11856(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_12172(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_11781( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_12744(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_12946(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_9961( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_13044( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_13044(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_GLOBAL_CREATE_ALL_DOORS */ void sub_14289()
{
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_GLOBAL_CREATE_ALL_DOORS - START", 0 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3713[0], g_U3689, -44.27758000, 5.32169000, 0.43664000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3713[0], 1, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_15029( ref g_U3713[0], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3713[1], g_U3690, -44.37815000, 2.33806000, 0.43171000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3713[1], 0, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_15029( ref g_U3713[1], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3713[2], g_U3687, -37.33594000, 5.32179000, 0.43720000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3713[3], g_U3688, -37.33504000, 2.33680000, 0.43720000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3713[3], 0, 1, 0.30000000 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3713[4], g_U3685, -30.53626000, 5.32230000, 0.43720000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3713[4], 1, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_15029( ref g_U3713[4], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3713[5], g_U3686, -30.53630000, 2.33804000, 0.43720000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3713[5], 0, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_15029( ref g_U3713[5], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3713[6], g_U3694, 1.90790000, -0.24320000, 0.56350000, 0.00000000, 0.00000000, 0.00000000, -0.01000000, 0.00000000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3713[6], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3713[7], g_U3695, 12.53256000, -3.39169000, 0.49154000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 0.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3713[7], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3713[8], g_U3696, 12.53157000, 10.52140000, 0.49412000, 0.00000000, 0.00000000, 0.00000000, -115.00000000, 0.00000000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3713[8], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[0], g_U3699, 24.75918000, -0.74805000, 3.24288000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 35.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3777[0], 1, 1, 0.30000000 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[1], g_U3703, -2.57487000, -0.57792000, 3.24329000, 0.00000000, 0.00000000, 0.00000000, 26.00000000, 27.00000000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3777[1], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[2], g_U3700, -2.54126000, 8.35078000, 3.25633000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3777[2], 0, 1, 0.35000000 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[3], g_U3699, -7.29046000, 1.42185000, 3.25776000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3777[3], 0, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_15029( ref g_U3777[3], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[4], g_U3698, -10.64608000, 4.89107000, 3.24594000, 0.00000000, 0.00000000, 0.00000000, -89.00000000, 130.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3777[4], 1, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_15029( ref g_U3777[4], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[5], g_U3699, -19.32917000, 0.72835000, 3.25671000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3777[5], 1, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_15029( ref g_U3777[5], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[6], g_U3700, -20.54160000, 0.65161000, 3.25298000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3777[6], 0, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_15029( ref g_U3777[6], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[7], g_U3698, -22.72606000, 4.14333000, 3.24594000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3777[7], 1, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_15029( ref g_U3777[7], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[8], g_U3700, -26.59765000, 0.63613000, 3.25294000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3777[8], 0, 1, 0.20000000 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[9], g_U3692, -33.21901000, 10.21093000, 3.24398000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 89.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3777[9], 0, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_15029( ref g_U3777[9], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[10], g_U3697, -37.06034000, -1.30501000, 3.42993000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 89.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3777[10], 1, 1, 0.60000000 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[11], g_U3691, -1.85550000, -1.59770000, 3.15740000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3777[11], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[12], g_U3691, -0.65170000, 9.35870000, 3.15740000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3777[12], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[13], g_U3691, -13.57990000, -3.15070000, 3.15440000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3777[13], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[14], g_U3702, -13.57990000, 10.94360000, 3.15440000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3777[14], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3777[15], g_U3696, 25.61931000, -3.35702000, 3.45269000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3777[15], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3890[0], g_U3693, -8.45170000, 8.45730000, 6.32890000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3890[0], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3890[1], g_U3704, -10.71540000, 9.35900000, 6.24680000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 80.00000000, 0, 0 );
     /* P_OPENDOOR */ sub_15212( ref g_U3890[1], 1, 1, 0.40000000 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3890[2], g_U3691, -10.71560000, -1.59800000, 6.24680000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3890[2], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3912[0], g_U3693, 12.52281000, -0.64584000, 6.27399000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3912[0], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3912[1], g_U3702, 12.26410000, 9.22190000, 6.22370000, 0.00000000, 0.00000000, 0.00000000, -100.00000000, 100.00000000, 0, 1 );
     /* P_OPENDOOR */ sub_15212( ref g_U3912[1], 0, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_15029( ref g_U3912[1], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3912[2], g_U3706, -1.53070000, -1.13090000, 9.18250000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3912[2], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3912[3], g_U3706, -1.53120000, 8.90860000, 9.18250000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3912[3], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3912[4], g_U3705, -13.57924000, -1.00988000, 10.05367000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3912[4], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3912[5], g_U3705, -12.37852000, 8.77084000, 10.05367000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3912[5], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_14430( ref g_U3955, g_U3701, -45.48747000, 29.79249000, 9.53181000, 0.00000000, 0.00000000, 0.00000000, -1028390912, 1119092736, 1, 0 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3955, 1 );
     /* P_CREATEDOORSTRUCT */ sub_14478( ref g_U3969, g_U1587, -113.63000000, -38.41000000, 23.75000000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3969, 1 );
     /* P_CREATEDOORSTRUCT */ sub_14478( ref g_U3962, g_U1587, -111.23000000, -38.41000000, 23.75000000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3962, 1 );
     /* P_CREATEDOORSTRUCT */ sub_14478( ref g_U3991[0], g_U3709, -79.78369000, -21.98512000, 9.11832000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3991[0], 1 );
     /* P_CREATEDOORSTRUCT */ sub_14478( ref g_U3991[1], g_U3710, -79.78369000, -24.27071000, 9.11714000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3991[1], 1 );
     /* P_CREATEDOORSTRUCT */ sub_14478( ref g_U3976[0], g_U3708, -94.53243000, -37.65765000, 17.14219000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3976[0], 1 );
     /* P_CREATEDOORSTRUCT */ sub_14478( ref g_U3976[1], g_U3708, -97.90794000, -37.65969000, 17.14219000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U3976[1], 1 );
     /* P_CREATEDOORSTRUCT */ sub_14478( ref g_U4006[0], g_U3711, -109.05910000, -45.77236000, 10.14501000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U4006[0], 1 );
     /* P_CREATEDOORSTRUCT */ sub_14478( ref g_U4006[1], g_U3712, -111.30410000, -45.77237000, 10.14501000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U4006[1], 1 );
     /* P_CREATEDOORSTRUCT */ sub_14478( ref g_U4006[2], g_U3711, -117.15460000, -44.32523000, 10.12627000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U4006[2], 1 );
     /* P_CREATEDOORSTRUCT */ sub_14478( ref g_U4006[3], g_U3712, -117.15460000, -42.08017000, 10.12627000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U4006[3], 1 );
     /* P_CREATEDOORSTRUCT */ sub_14478( ref g_U4006[4], g_U3711, -115.77770000, -39.97692000, 10.13279000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U4006[4], 1 );
     /* P_CREATEDOORSTRUCT */ sub_14478( ref g_U4006[5], g_U3712, -115.77770000, -37.73186000, 10.13279000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_15873( ref g_U4006[5], 1 );
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_GLOBAL_CREATE_ALL_DOORS - END", 0 );
    return;
}

/* P_GLOBAL_SETUP_YACHT_DOOR */ void sub_14430(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
     /* P_CREATEDOORSTRUCT */ sub_14478( uParam0, uParam1, uParam2, uParam5 );
     /* P_CLOSEDOOR */ sub_14545( uParam0, 1 );
     /* P_SETDOORMINMAXLIMIT */ sub_14805( uParam0, uParam8, uParam9 );
     /* P_SETDOORLATCH */ sub_15029( uParam0, uParam10 );
     /* P_SETDOORAUTOCLOSE */ sub_15110( uParam0, uParam11 );
    return;
}

/* P_CREATEDOORSTRUCT */ void sub_14478(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

/* P_CLOSEDOOR */ void sub_14545(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_14571( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_14655( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_14571(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_14655(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORMINMAXLIMIT */ void sub_14805(int iParam0, float fParam1, float fParam2)
{
    if (( /* F_DOESDOOREXIST */ sub_14571( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_14655( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        PRINTSTRING( "[SP]### Error: Door fMinLimit greater than fMaxLimit (default min:-81.0 max:81.0) ###" );
        PRINTNL();
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

/* P_SETDOORLATCH */ void sub_15029(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_14571( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_14655( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_SETDOORAUTOCLOSE */ void sub_15110(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_14571( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_14655( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_OPENDOOR */ void sub_15212(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if (( /* F_DOESDOOREXIST */ sub_14571( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_14655( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

/* P_SETDOORLOCKED */ void sub_15873(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_14571( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_14655( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_19100()
{
    int iVar2;

    iVar2 = l_U190;
    switch (l_U190)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_553( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_19306();
         /* P_SET_STATIC_DATA */ sub_19686();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U190 = 2;
         /* WRITESCRIPTLOG */ sub_553( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_553( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_TD_PERSISTENT_ASSETS */ sub_24058();
         /* P_REQUEST_TD_NONPERSISTENT_ASSETS */ sub_35899();
        l_U190 = 3;
         /* WRITESCRIPTLOG */ sub_553( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
         /* P_TD_SETUP_DATA_ARRAYS */ sub_671();
        if (( /* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ sub_43964( ref g_U2986 )) AND (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_43590( ref g_U3026 )) AND (( /* F_STREAMREQ_ACTION_TREE_IS_LOADED */ sub_43212( ref g_U2817 )) AND (( /* F_STREAMREQ_VEHICLE_RECORDING_IS_LOADED */ sub_42792( ref g_U2756 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_42378( ref g_U1878 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_41987( ref g_U1975 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_41585( ref g_U1829 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_41188( ref g_U1588 )))))))))
        {
            if ((NOT l_U140._fU0) AND (g_U833 == 6))
            {
                l_U190 = 4;
                 /* WRITESCRIPTLOG */ sub_553( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U190 = 6;
                 /* WRITESCRIPTLOG */ sub_553( "SP", "eCheckpointState = CP_TD_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_553( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U1230[6] = 1;
        AUD_SET_IS_POWER_ON( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
        {
            FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1100(), 0 );
        }
        if (( /* HAS_SAVEFILE_LOADED */ sub_44620( ref l_U140 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_12172(  /* PLAYER_PED_ID */ sub_1100(), 1308526797, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11377(  /* PLAYER_PED_ID */ sub_1100(), -1404433099, 1, 200, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_11377(  /* PLAYER_PED_ID */ sub_1100(), -612753081, 0, 200, 0 );
            l_U190 = 5;
             /* WRITESCRIPTLOG */ sub_553( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U190 = 6;
             /* WRITESCRIPTLOG */ sub_553( "SP", "eCheckpointState = CP_TD_PRE_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1100(), 0 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1100(), 1 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1100(), 0, 0 ) ))))
            {
                l_U190 = 6;
                 /* WRITESCRIPTLOG */ sub_553( "GA", "eCheckpointState = CP_TD_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if (l_U191)
        {
             /* P_TD_TRUCK_SPAWN */ sub_45198();
        }
        l_U190 = 7;
         /* WRITESCRIPTLOG */ sub_553( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        break;
        case 7:
        if (g_U1230[6])
        {
            if (NOT l_U140._fU0)
            {
                g_U834 = 6;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_46221( ref l_U140, g_U834,  /* PLAYER_PED_ID */ sub_1100(), g_U980[6], g_U1086[6], g_U1158[6], g_U1122[6], 1 );
            }
             /* P_GLOBAL_CREATE_LOCKS */ sub_50821( 0, 1 );
             /* P_GBL_CREATE_HELIPAD_DOOR_PROPS */ sub_51608( 0 );
             /* P_TD_TRUCK_REBELS_SPAWN */ sub_52677();
             /* P_TD_TRUCK_REBELS_SETUP */ sub_53633();
             /* P_TD_CREATE_PLACEMENTS */ sub_54365();
             /* STARTTIMER */ sub_1996( ref l_U392 );
             /* STARTTIMER */ sub_1996( ref l_U327 );
             /* STARTTIMER */ sub_1996( ref l_U877 );
             /* P_CLOSEDOOR */ sub_14545( ref g_U3890[1], 1 );
             /* P_SETDOORLOCKED */ sub_15873( ref g_U3890[1], 1 );
             /* WRITESCRIPTLOG */ sub_553( "MF", "MUSIC: Playing PANAMA_FINAL Mood: PANAMA_FINAL_2_3", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2_3", "PANAMA_FINAL_2_3", 0.00000000, 4000, -1, -1082130432, 0 );
            DO_SCREEN_FADE_IN( 0 );
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1138() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1138(), 1, 0 );
            }
             /* P_START_SP_CHALLENGES */ sub_55021();
            l_U190 = 8;
             /* WRITESCRIPTLOG */ sub_553( "GA", "eCheckpointState = CP_TD_GAMEPLAY_COMBAT", 0 );
        }
        break;
        case 8:
        if (l_U191)
        {
             /* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ sub_55253();
        }
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_55435( ref g_U3366, 0.00000000, 1, 0 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_55435( ref g_U3349, 4.00000000, 1, 0 );
         /* P_PED_Z_SAFETY_CHECK */ sub_55501( g_U3362, 4.00000000, 1, 0 );
         /* P_PED_Z_SAFETY_CHECK */ sub_55501( g_U3363, 4.00000000, 1, 0 );
         /* P_ASSIGN_BULLET_CAMS */ sub_55684();
         /* P_GBL_HANDLE_HELIPAD_DOOR_AUDIO */ sub_56598();
         /* P_TD_HANDLE_TRIGGERING_MID_02B_PANAMA */ sub_57358();
         /* P_HELICOPTER_BLADES_SPINNING */ sub_61939();
         /* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ sub_62062();
        if ( /* ISTIMERDONE */ sub_3851( ref l_U1101 ))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_62476( "SPAN_VIG09A", ref g_U1246 );
        }
        if ((l_U327._fU16) AND (l_U392._fU16))
        {
            if (NOT l_U194)
            {
                if (( /* F_HANDLE_PED_ARRAY_SPAWN */ sub_59992( ref g_U4148, ref g_U4082, -1, 1, 1, 0, 1 )) == 1)
                {
                     /* P_SET_BLOCKING_EVENTS_PED_ARRAY */ sub_63898( ref g_U4148, 1, 1 );
                    l_U194 = 1;
                }
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_64043( ref l_U548, 0 ))
        {
             /* P_GLOBAL_MAIN_DECK_BODIES_RESTORE */ sub_64178();
            AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_6", 0 );
        }
        if (l_U193 == 0)
        {
            if (( /* F_IS_PED_AWARE_OF_PED */ sub_65797( ref g_U3363,  /* PLAYER_PED_ID */ sub_1100(), 1, 1, 1, 1, 1 )) || (( /* F_IS_PED_AWARE_OF_PED */ sub_65797( ref g_U3362,  /* PLAYER_PED_ID */ sub_1100(), 1, 1, 1, 1, 1 )) || ( /* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ sub_65717( ref g_U3349,  /* PLAYER_PED_ID */ sub_1100(), 1, 1, 1, 1, 1 ))))
            {
                AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2_3", "PANAMA_FINAL_2_3", 0, -1, -1, -1082130432, 0 );
                 /* WRITESCRIPTLOG */ sub_553( "CR", "Playing: PANAMA_FINAL Mood: PANAMA_FINAL_2_3", 0 );
                 /* WRITESCRIPTLOG */ sub_553( "CR", "Playing audio music one shot PANAMA_OS_3", 0 );
                AUDIO_MUSIC_PLAY_ONESHOT();
                l_U193 = 1;
            }
        }
        if (NOT l_U858)
        {
            if ( /* F_HANDLE_PED_ARRAY_SPAWN */ sub_59992( ref g_U3349, ref l_U195, -1, 1, 1, 0, 1 ))
            {
                 /* P_TD_SHORE_REBELS_START */ sub_66495();
                l_U858 = 1;
            }
        }
        if ((NOT l_U857) AND ( /* F_ISPEDINTRIGGERBOX */ sub_2690(  /* PLAYER_PED_ID */ sub_1100(), l_U836 )))
        {
             /* P_TD_CLEANUP_SHORE_PEDS */ sub_68998();
            l_U857 = 1;
        }
        if ((l_U857) AND (NOT ( /* F_ISPEDINTRIGGERBOX */ sub_2690(  /* PLAYER_PED_ID */ sub_1100(), l_U836 ))))
        {
             /* P_TD_CLEANUP_SHORE_PEDS */ sub_68998();
            l_U857 = 0;
        }
        if (l_U1112 == 1)
        {
            if ( /* F_HANDLE_HELI_AUDIO_BOATFLYBY */ sub_69342( "S_PANA_HELI_LOOP" ))
            {
                l_U1112 = 0;
            }
        }
        if (((NOT l_U886) AND ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_64043( ref l_U548, 0 ))) || ( /* ISTIMERDONE */ sub_3851( ref l_U877 )))
        {
             /* P_SETUP_FLYBY_HELICOPTER */ sub_69845();
            l_U1111 = 1;
            l_U886 = 1;
            l_U1112 = 1;
        }
        if ((l_U319 == 0) AND ((l_U320 == 1) AND (( /* F_GET_NUM_ALIVE_PEDS_ON_SHORE */ sub_70727()) <= 5)))
        {
             /* P_TD_SHORE_REBELS_BACKUP_START */ sub_70904();
            l_U319 = 1;
        }
        if (( /* ISTIMERDONE */ sub_3851( ref l_U327 )) == 1)
        {
             /* P_TD_TRUCK_ARRIVE */ sub_72303();
        }
        if (l_U336 == 1)
        {
            if (( /* ISVEHICLEVALID */ sub_45840( ref g_U3361, 0 )) == 1)
            {
                if (NOT (IS_PLAYBACK_GOING_ON_FOR_VEHICLE( g_U3361 )))
                {
                     /* P_TD_TRUCK_ATTACK */ sub_73072();
                     /* STARTTIMER */ sub_1996( ref l_U339 );
                    l_U336 = 0;
                }
            }
        }
        else if (NOT l_U337)
        {
            if (IS_PLAYBACK_GOING_ON_FOR_VEHICLE( g_U3361 ))
            {
                l_U336 = 1;
                l_U337 = 1;
            }
        }
        if ( /* ISTIMERDONE */ sub_3851( ref l_U339 ))
        {
            SET_WEAPON_VISIBLE( l_U338, 1 );
        }
        if ( /* ISTIMERDONE */ sub_3851( ref l_U392 ))
        {
             /* P_TD_SETUP_REBEL_HELI */ sub_73587();
        }
        if (l_U1113 == 1)
        {
            if ( /* F_HANDLE_HELI_AUDIO_BOATFLYBY */ sub_69342( "S_PANA_HELI_DEPART" ))
            {
                l_U1113 = 0;
            }
        }
        if (NOT l_U401)
        {
            if (NOT (IS_VEHICLE_DEAD( g_U3359 )))
            {
                if (( /* F_ISPLAYERINTRIGGERBOX */ sub_74720( l_U404 )) || (NOT (IS_PLAYBACK_GOING_ON_FOR_VEHICLE( g_U3359 ))))
                {
                     /* P_STREAMREQ_SCRIPT_STREAM_STOP */ sub_5389( "S_PANA_HELI_ARRIVE", ref g_U2986 );
                    if ( /* F_HANDLE_HELI_AUDIO_BOATFLYBY */ sub_69342( "S_PANA_HELI_LOOP" ))
                    {
                         /* P_TD_HELI_LANDED */ sub_74841();
                        l_U1111 = 1;
                        l_U401 = 1;
                        l_U1113 = 1;
                    }
                }
            }
        }
        if (NOT l_U430)
        {
            if (NOT (IS_VEHICLE_DEAD( g_U3359 )))
            {
                if (NOT (IS_PLAYBACK_GOING_ON_FOR_VEHICLE( g_U3359 )))
                {
                     /* WRITESCRIPTLOG */ sub_553( "GA", "Helicopter has escaped.", 0 );
                     /* CLEANPED */ sub_8945( g_U3364 );
                     /* CLEANVEHICLE */ sub_9200( g_U3359 );
                    l_U430 = 1;
                }
            }
        }
        if (NOT l_U887)
        {
            if (NOT (IS_VEHICLE_DEAD( g_U3360 )))
            {
                if (NOT (IS_PLAYBACK_GOING_ON_FOR_VEHICLE( g_U3360 )))
                {
                     /* WRITESCRIPTLOG */ sub_553( "CR", "Flyby Helicopter has escaped.", 0 );
                     /* CLEANPED */ sub_8945( g_U3365 );
                     /* CLEANVEHICLE */ sub_9200( g_U3360 );
                    l_U887 = 1;
                }
            }
        }
        if ((l_U548._fU64) AND (NOT l_U569))
        {
            if (( /* F_HANDLE_PED_ARRAY_SPAWN */ sub_59992( ref g_U3366, ref l_U431, -1, 1, 0, 1, 1 )) == 1)
            {
                l_U569 = 1;
            }
        }
        if ((NOT l_U425) AND (l_U569))
        {
             /* P_TD_HIDE_HELI_REBELS */ sub_75430();
        }
        if (NOT l_U425)
        {
            if ((l_U569) AND (l_U401))
            {
                if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_64043( ref l_U404, 0 ))
                {
                     /* P_TD_HELI_REBELS_EXIT */ sub_75601();
                     /* P_STREAMREQ_SCRIPT_STREAM_STOP */ sub_5389( "S_PANA_HELI_LOOP", ref g_U2986 );
                    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
                    {
                        SET_PLAYER_THREAT_REACTION(  /* PLAYER_PED_ID */ sub_1100(), 1 );
                    }
                     /* WRITESCRIPTLOG */ sub_553( "CO", "Turned off Pana Piano Attckers", 0 );
                     /* RESETTIMER */ sub_4427( ref l_U806 );
                    l_U1110 = 1;
                    l_U947 = 1;
                    l_U402 = 1;
                     /* P_TD_HELICOPTER_LEAVE_SPEECH */ sub_76817();
                    l_U425 = 1;
                     /* P_TD_SHORE_REBELS_BACKUP_START */ sub_70904();
                    l_U319 = 1;
                }
            }
        }
        if (l_U402)
        {
            if ( /* F_HANDLE_HELI_AUDIO_BOATFLYBY */ sub_69342( "S_PANA_HELI_DEPART" ))
            {
                 /* P_TD_HELICOPTER_FLY_AWAY */ sub_77415();
                l_U430 = 0;
                l_U402 = 0;
            }
        }
        if (l_U425)
        {
            if ( /* F_ISPLAYERINTRIGGERREGIONFIRSTTIME */ sub_77852( ref l_U634, 0 ))
            {
                 /* P_TD_HELI_REBELS_COMBAT_PLAYER */ sub_78137();
                 /* WRITESCRIPTLOG */ sub_553( "CR", "MUSIC: Playing PANAMA_FINAL Mood: PANAMA_FINAL_3_6", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_3_6", "PANAMA_FINAL_3_6", 0.00000000, 4000, 5000, -1082130432, 0 );
            }
        }
        if ((NOT l_U796) AND (l_U634._fU548))
        {
            if ( /* F_TD_CAN_HELI_REBEL_END_AMBUSH */ sub_78927())
            {
                 /* P_TD_HELI_REBELS_END_AMBUSH */ sub_79169();
                l_U796 = 1;
                AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_1", 0 );
            }
        }
        if ( /* F_GBL_HELIPAD_DOOR_IS_OPEN */ sub_79417())
        {
            if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_64043( ref l_U815, 0 )) || (( /* F_GBL_HELIPAD_DOOR_IS_VISIBLE */ sub_79543()) == 1))
            {
                 /* P_GBL_HELIPAD_DOOR_ANIMATE */ sub_79658( 0, 0 );
            }
        }
        if ((IS_PED_DEAD( g_U3363 )) AND ((IS_PED_DEAD( g_U3362 )) AND ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55896( ref g_U3349 )) == 0) AND ( /* F_IS_PED_ARRAY_DEFEATED */ sub_55722( ref g_U3366, 1 )))))
        {
            if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (NOT (IS_BULLET_CAMERA_RUNNING( 0 ))))
            {
                 /* P_RELEASE_TD_ASSETS */ sub_80515();
                 /* P_START_CHECKPOINT_THREAD */ sub_82866( ref g_U835[7] );
                g_U1230[7] = 1;
                 /* WRITESCRIPTLOG */ sub_553( "CR", "Playing audio music one shot PANAMA_OS_1", 0 );
                AUDIO_MUSIC_PLAY_ONESHOT();
                l_U190 = 11;
                 /* WRITESCRIPTLOG */ sub_553( "GA", "eCheckpointState = CP_FINISHED", 0 );
            }
        }
        break;
        case 9:
        if (CUTSCENE_IS_LOADED( "MID_02B_PANAMA" ))
        {
            l_U190 = 10;
             /* WRITESCRIPTLOG */ sub_553( "GA", "eCheckpointState = CP_TD_HANDLE_MID_02B_PANAMA", 0 );
        }
        else if (CUTSCENE_NAMED_IS_LOADING( "MID_02B_PANAMA" ))
        {
             /* WRITESCRIPTLOG */ sub_553( "GA", "Waiting for cutscene MID_02B_PANAMA to load.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_553( "GA", "Requesting cutscene MID_02B_PANAMA to load.", 0 );
            PRE_STREAM_SEAMLESS_CUTSCENE( "MID_02B_PANAMA" );
        }
        break;
        case 10:
        if (l_U191)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_85290( ref l_U888, "MID_02B_PANAMA", 83354, 83407, 84755, 85005, 85054, 85183, 250, 0 );
            l_U888._fU4 = 2;
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_85824( ref l_U888 ))
        {
             /* STARTTIMER */ sub_1996( ref l_U1101 );
            RESET_FORCED_AIM_INTENTION_DIRECTION();
            RESET_FORCED_FORWARD_DIRECTION();
            l_U190 = 8;
             /* WRITESCRIPTLOG */ sub_553( "GA", "eCheckpointState = CP_TD_GAMEPLAY_COMBAT", 0 );
        }
        break;
        case 11:
        if (g_U834 == 7)
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U190 = 0;
             /* WRITESCRIPTLOG */ sub_553( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U190 != iVar2)
    {
        l_U191 = 1;
    }
    else
    {
        l_U191 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_19306()
{
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U191 = 1;
    l_U193 = 0;
    l_U194 = 0;
    l_U319 = 0;
    l_U320 = 0;
     /* CREATETIMER */ sub_1513( ref l_U327, 1000, 1, 0 );
    l_U336 = 0;
    l_U337 = 0;
    l_U374 = 0;
     /* CREATETIMER */ sub_1513( ref l_U339, 1000, 1, 0 );
     /* CREATETIMER */ sub_1513( ref l_U392, 50, 1, 0 );
    l_U401 = 0;
    l_U403 = 1;
    l_U402 = 0;
    l_U425 = 0;
    l_U430 = 1;
    l_U886 = 0;
    l_U887 = 0;
     /* CREATETIMER */ sub_1513( ref l_U877, 5000, 1, 0 );
    l_U569 = 0;
    l_U1111 = 0;
    l_U1112 = 0;
    l_U1113 = 0;
    l_U796 = 0;
     /* CREATETIMER */ sub_1513( ref l_U797, 3000, 1, 0 );
    l_U946 = 0;
    l_U947 = 0;
    l_U1100 = 0;
     /* CREATETIMER */ sub_1513( ref l_U1101, 1500, 1, 0 );
     /* RESETTIMER */ sub_4427( ref l_U806 );
    l_U1110 = 0;
    l_U857 = 0;
    l_U858 = 0;
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_19686()
{
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U195[0], 4.21000000, 28.33000000, 7.91000000, 280.00000000, 1235026996, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U195[1], 39.26000000, 26.77000000, 8.00000000, 82.00000000, -151376780, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U195[2], 39.68420000, 25.77496000, 7.91075800, 80.00000000, 2019397634, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U195[3], 44.82000000, 29.39000000, 8.00000000, 82.00000000, -1631541338, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U195[4], 42.00808000, 26.70070000, 7.91075800, 108.00000000, -629864533, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U195[5], 45.06000000, 31.50000000, 7.90000000, 91.00000000, -1227341335, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U195[6], 30.90000000, 24.75000000, 7.90000000, 82.00000000, -1631541338, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U195[7], 44.82000000, 29.39000000, 8.00000000, 108.00000000, -629864533, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U195[8], 30.55000000, 23.60000000, 7.90000000, 91.00000000, -1227341335, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U348, 35.03000000, 31.67000000, 8.00000000, 211.00000000, -2072690809, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U361, 39.84000000, 27.48000000, 8.00000000, 120.00000000, 1311173969, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U375, 0.00000000, 0.00000000, 0.00000000, 0.00000000, -2024702138, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U859, 0.00000000, 0.00000000, 0.00000000, 0.00000000, -2024702138, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U518[0], 24.75000000, 10.17000000, 8.05000000, 82.00000000, 1235026996, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U518[1], 24.72000000, -2.37000000, 8.05000000, 82.00000000, -151376780, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U859, 0.00000000, 0.00000000, 0.00000000, 0.00000000, -2024702138, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U431[0], 5.10000000, 3.44000000, 8.48000000, 65446, -1136528515, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U431[1], 14.14000000, 6.85000000, 8.37000000, -90.00000000, -951724058, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U431[2], 4.25000000, 3.80000000, 8.48000000, -90.00000000, 1246843230, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U431[3], 12.48000000, -0.30000000, 8.37000000, -90.00000000, -2138069307, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U431[4], 11.25000000, 2.53000000, 8.37000000, -90.00000000, 1991772887, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref l_U431[5], 8.74000000, 5.23000000, 8.37000000, -90.00000000, -1248357511, 7, 3, 2, 0, 0 );
    if (g_U833 > 3)
    {
         /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref g_U4082[0], 32.14069000, 5.09384000, 5.46220500, 233.86910000, 309970845, 7, 3, 2, 0, 0 );
        g_U4154[0] = 1;
         /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref g_U4082[1], 32.02513000, 2.10656300, 5.46438400, 160.53240000, -1571857769, 7, 3, 2, 0, 0 );
        g_U4154[1] = 1;
         /* P_CREATEPEDSTRUCTWITHNAME */ sub_19790( ref g_U4082[2], 42.32000000, 8.53000000, 2.16521700, 90.11731000, 923995809, 7, 3, 2, 0, 0 );
        g_U4154[2] = 1;
    }
     /* P_G_SETUP_MAX_FALLING_DOWN_FROM_TOP_DECK */ sub_20963();
     /* P_CREATETRIGGERBOX */ sub_21091( ref l_U404, "TRIGGER_TD_UNDERPAD", 27.89000000, 3.77000000, 4.63000000, 8.69000000, 15.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_21091( ref l_U548, "TRIGGER_PIANO_WINDOWS", 0.00000000, 10.00000000, 5.32000000, 5.00000000, 3.00000000, 2.42000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_21091( ref l_U570[0], "tbTD_ActivateHeliRebelsThroughDoor[0]", 29.27000000, 7.50000000, 5.06000000, 2.00000000, 2.00000000, 2.26000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_21091( ref l_U570[1], "tbTD_ActivateHeliRebelsThroughDoor[1]", 29.26000000, 0.40000000, 5.06000000, 2.00000000, 2.00000000, 2.26000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_21091( ref l_U570[2], "tbTD_ActivateHeliRebelsThroughDoor[2]", 31.78000000, 3.79000000, 5.06000000, 3.00000000, 15.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERREGION */ sub_21659( ref l_U634, ref l_U570 );
     /* P_CREATETRIGGERBOX */ sub_21091( ref l_U815, "Close_Helipad_Door_Safety", 19.03000000, 4.44000000, 8.16000000, 6.23000000, 15.60000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_21091( ref l_U1079, "TRIGGER_PRELOAD_MID_02B", 17.78000000, 3.52000000, 4.77000000, 11.00000000, 13.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_21091( ref l_U1037, "Trigger_PIANO_ACTIVATE", 18.86000000, 5.43000000, 5.32000000, 1.50000000, 2.00000000, 2.42000000, 0.00000000, 0.00000000, 36.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_21091( ref l_U1058, "Trigger_PIANO_RADIUS", 18.86000000, 5.43000000, 5.32000000, 2.50000000, 3.00000000, 2.42000000, 0.00000000, 0.00000000, 36.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_21091( ref l_U836, "TRIGGER_PROGRESSIVE_CLEANUP", 16.00000000, 6.00000000, 5.00000000, 8.00000000, 2.00000000, 2.75000000, 0.00000000, 0.00000000, 50.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_21091( ref l_U775, "TRIGGER_PIANO_TIMER", 17.45110000, 3.72322000, 4.77000000, 11.00000000, 11.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_22512( ref l_U321, "SHORE_TETHER", 12.75000000, 20.40000000, 7.00000000, 22.00000000, 3.50000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_22512( ref l_U322, "SHORE_TETHER_TRUCK_SAFE", 18.91000000, 21.76000000, 7.00000000, 7.18000000, 5.59000000, 3.05000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_22512( ref l_U516, "TETHER_HELIPAD_LEVEL", 14.50000000, 3.99000000, 8.00000000, 19.00000000, 15.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_22512( ref l_U517, "TETHER_HELIPAD_LEVEL_CENTRE", 17.50000000, 3.99000000, 8.00000000, 23.00000000, 6.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATEPOISTRUCTTRIGGER */ sub_22855( ref l_U948, 2, l_U1034, l_U1037, l_U1058, 1, 0 );
     /* P_SET_INTERACTIVE_TEXT */ sub_23619( ref l_U948, 30, "POI_PAN_PIANO" );
     /* P_SET_POI_FORCE_WALK */ sub_23829( ref l_U948, 0 );
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_19790(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_G_SETUP_MAX_FALLING_DOWN_FROM_TOP_DECK */ void sub_20963()
{
     /* P_CREATETRIGGERBOX */ sub_21091( ref g_U3657, "TRIGGER_MAIN_DECK_KILL", 37.94000000, 3.91000000, 1.60000000, 19.26000000, 15.05000000, 2.05000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    return;
}

/* P_CREATETRIGGERBOX */ void sub_21091(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETRIGGERREGION */ void sub_21659(int iParam0, unknown uParam1)
{
    int iVar4;
    int I;

    iVar4 = (uParam1^);
    if (iVar4 > 6)
    {
         /* WRITESCRIPTLOG */ sub_553( "[SA]", "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
        SCRIPT_ASSERT( "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
    }
    for ( I = 0; I < iVar4; I++ )
    {
        iParam0->_fU0[I] = {(uParam1^)[I]};
    }
    iParam0->_fU508 = iVar4;
    iParam0->_fU548 = 0;
    iParam0->_fU552 = 0;
    iParam0->_fU556 = 0;
    iParam0->_fU560 = 0;
    return;
}

/* P_CREATETETHERBOX */ void sub_22512(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATEPOISTRUCTTRIGGER */ void sub_22855(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47, unknown uParam48)
{
     /* P_CREATEBLANKPOISTRUCT */ sub_22899( iParam0, uParam47 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU80 = 1;
    iParam0->_fU116 = {uParam5};
    iParam0->_fU88 = 1;
    iParam0->_fU216 = {uParam26};
    iParam0->_fU320 = uParam48;
    iParam0->_fU20 = {uParam2};
     /* P_CREATEPOIGLINT */ sub_23290( iParam0 );
    return;
}

/* P_CREATEBLANKPOISTRUCT */ void sub_22899(int iParam0, unknown uParam1)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = 0;
    iParam0->_fU8 = 0;
    iParam0->_fU12 = nil;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU52 = 1;
    iParam0->_fU56 = 1;
    iParam0->_fU60 = 0;
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = 0;
    iParam0->_fU80 = 0;
    iParam0->_fU84 = 0;
    iParam0->_fU100 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU112 = 0.00000000;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU96 = 0;
    iParam0->_fU200 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU212 = 0.00000000;
    iParam0->_fU300 = 0;
    iParam0->_fU304 = 1;
    iParam0->_fU308 = 0;
    iParam0->_fU324 = 1;
    iParam0->_fU328 = 0;
    iParam0->_fU340 = 0;
    iParam0->_fU336 = 0.20000000;
    return;
}

/* P_CREATEPOIGLINT */ void sub_23290(int iParam0)
{
    if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            REMOVE_GLINT( iParam0->_fU12 );
        }
    }
    iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
     /* P_INITPOIGLINT */ sub_23388( iParam0 );
    return;
}

/* P_INITPOIGLINT */ void sub_23388(int iParam0)
{
    if (iParam0->_fU0 == 1)
    {
        if (iParam0->_fU320 == 1)
        {
            if ((iParam0->_fU8 > 0) AND (iParam0->_fU4 == 0))
            {
                 /* P_ENABLEPOIGLINT */ sub_7939( iParam0, 1 );
            }
            else if ((iParam0->_fU8 < 2) AND (iParam0->_fU4 == 1))
            {
                 /* P_ENABLEPOIGLINT */ sub_7939( iParam0, 1 );
            }
            else if ((iParam0->_fU8 == 1) AND (iParam0->_fU4 == 2))
            {
                 /* P_ENABLEPOIGLINT */ sub_7939( iParam0, 1 );
            }
            else
            {
                 /* P_ENABLEPOIGLINT */ sub_7939( iParam0, 0 );
            };;;
        }
        else
        {
             /* P_ENABLEPOIGLINT */ sub_7939( iParam0, 0 );
        }
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_7939( iParam0, 0 );
    }
    return;
}

/* P_SET_INTERACTIVE_TEXT */ void sub_23619(int iParam0, unknown uParam1, unknown uParam2)
{
    StrCopy( ref iParam0->_fU32, uParam2, 16 );
    iParam0->_fU48 = uParam1;
     /* P_INITINTERACTIVETEXT */ sub_23675( iParam0 );
    return;
}

/* P_INITINTERACTIVETEXT */ void sub_23675(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND (iParam0->_fU0 == 1))
    {
        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
        {
            SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
            SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
    }
    return;
}

/* P_SET_POI_FORCE_WALK */ void sub_23829(int iParam0, unknown uParam1)
{
    iParam0->_fU324 = uParam1;
    return;
}

/* P_REQUEST_TD_PERSISTENT_ASSETS */ void sub_24058()
{
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_REQUEST_TD_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_24159( ref l_U176, ref g_U1588 );
     /* P_GLOBAL_LOAD_RIFLE_ANIMS */ sub_27073();
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_29698( ref l_U187, ref g_U1829 );
     /* P_STREAMREQ_VEHICLE_RECORDING_INSERT */ sub_31726( 10, ref g_U2756 );
     /* P_STREAMREQ_VEHICLE_RECORDING_INSERT */ sub_31726( 11, ref g_U2756 );
     /* P_STREAMREQ_VEHICLE_RECORDING_INSERT */ sub_31726( 8, ref g_U2756 );
     /* P_STREAMREQ_VEHICLE_RECORDING_INSERT */ sub_31726( 303, ref g_U2756 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "veh@truck", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "veh@std", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "veh@helicopter", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "DAM_DEAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "LEVEL_S_PAN_CP_05", ref g_U1975 );
     /* P_STREAMREQ_ACTION_TREE_INSERT */ sub_33880( "Vehicle/Vehicle_Car.act", ref g_U2817 );
     /* P_STREAMREQ_ACTION_TREE_INSERT */ sub_33880( "Vehicle/Vehicle_heli.act", ref g_U2817 );
    SET_PED_MODEL_LOD_DISTANCES( g_U1519, 10.00000000, 75.00000000 );
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_REQUEST_TD_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_24159(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_24232( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_24232(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_24299( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_24557( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_24299(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_24557( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_24557( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_24557( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_26088( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_24557( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_24557( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_24557(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_24618( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_24618(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_26088(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_GLOBAL_LOAD_RIFLE_ANIMS */ void sub_27073()
{
     /* WRITESCRIPTLOG */ sub_553( "CR", "P_GLOBAL_LOAD_RIFLE_ANIMS - Start", 0 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "NPC_RIFLE_CORE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "NPC_RIFLE_COVER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "NPC_RIFLE_COVER_ENTER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "NPC_RIFLE_COVER_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "NPC_RIFLE_DODGE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "NPC_RIFLE_FLAVOR", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "NPC_RIFLE_FULLBODY", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "NPC_RIFLE_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "NPC_RIFLE_SEARCH", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "NPC_RIFLE_STAIRS", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "NPC_RIFLE_REACT", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "AMED_RIFL_PRONE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "PLGE_RIFLE_CROUCH", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "PLGE_RIFLE_CORE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "PLGE_RIFLE_CORE_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "PLGE_RIFLE_HANDSIG", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "PLGE_RIFLE_ACTIONS", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "PLGE_RIFLE_KNEE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "PLGE_RIFLE_COVER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "PLGE_RIFLE_REACT", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_27179( "PLGE_RIFLE_COVER_EXIT", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_553( "CR", "P_GLOBAL_LOAD_RIFLE_ANIMS - End", 0 );
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_27179(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_27231( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_27483( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_27231(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_27483( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_27483( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_27483( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_26088( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_27483( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_27483( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_27483(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_24618( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_29698(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_29772( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_29772(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_29826( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_30087( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_29826(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_30087( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_30087( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_30087( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_26088( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_30087( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_30087( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_30087(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_24618( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_VEHICLE_RECORDING_INSERT */ void sub_31726(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_VEHICLE_RECORDING_IS_INDEX_AVAILABLE */ sub_31786( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing VEHICLE_RECORDING asset name: {} ###", 1, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ sub_32056( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_VEHICLE_RECORDING_IS_INDEX_AVAILABLE */ int sub_31786(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The VEHICLE_RECORDING is being requested: {} ###", 1, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The VEHICLE_RECORDING asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ sub_32056( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The VEHICLE_RECORDING is loading: {} ###", 1, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The VEHICLE_RECORDING asset is already loading!!!", 0 );
                 /* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ sub_32056( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_VEHICLE_RECORDING_BEEN_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The VEHICLE_RECORDING is already loaded: {} ###", 1, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The VEHICLE_RECORDING asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ sub_32056( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The VEHICLE_RECORDING is being requested: {} ###", 1, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The VEHICLE_RECORDING asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = -1;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_26088( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The VEHICLE_RECORDING is being removed: {} ###", 1, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The VEHICLE_RECORDING asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ sub_32056( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_VEHICLE_RECORDING_BEEN_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The VEHICLE_RECORDING is already loaded: {} ###", 1, 513, iParam0 );
            DISPLAYF( "The VEHICLE_RECORDING is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing VEHICLE_RECORDING: {} ###", 1, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ sub_32056( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The VEHICLE_RECORDING - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ void sub_32056(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_24618( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The VEHICLE_RECORDING asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ACTION_TREE_INSERT */ void sub_33880(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ACTION_TREE_IS_INDEX_AVAILABLE */ sub_33934( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ACTION_TREE asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ sub_34192( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ACTION_TREE_IS_INDEX_AVAILABLE */ int sub_33934(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ACTION_TREE is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ACTION_TREE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ sub_34192( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ACTION_TREE is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ACTION_TREE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ sub_34192( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_ACTION_TREE_LOADED( uParam0 ))
                {
                    DISPLAYF( "[CCB] ### The ACTION_TREE is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ACTION_TREE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ sub_34192( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ACTION_TREE is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ACTION_TREE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_26088( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ACTION_TREE is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ACTION_TREE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ sub_34192( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_ACTION_TREE_LOADED( uParam0 ))
        {
            DISPLAYF( "[CCB] ### The ACTION_TREE is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ACTION_TREE is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ACTION_TREE: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ sub_34192( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ACTION_TREE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ACTION_TREE_THREADID_SET_ID */ void sub_34192(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_24618( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ACTION_TREE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_TD_NONPERSISTENT_ASSETS */ void sub_35899()
{
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_REQUEST_TD_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_SCRIPT_STREAM_INSERT */ sub_36023( "S_PANA_SHORE_TRUCK", ref g_U2986 );
     /* P_STREAMREQ_SCRIPT_STREAM_INSERT */ sub_36023( "Mid_02B_Panama_CENTER_MG", ref g_U2986 );
     /* P_STREAMREQ_SCRIPT_STREAM_INSERT */ sub_36023( "S_PANA_HELI_ARRIVE", ref g_U2986 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_38233( -1244939386, ref g_U1878 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "PANAMA_OS_3", 0 );
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_REQUEST_TD_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_INSERT */ void sub_36023(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_IS_INDEX_AVAILABLE */ sub_36079( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing SCRIPT_STREAM asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_36343( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_INDEX_AVAILABLE */ int sub_36079(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_36343( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is already loading!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_36343( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (Result <= 2)
                {
                    if ((GET_SCRIPT_STREAM_STATE( uParam0, Result )) == 2)
                    {
                        DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                        DISPLAYF( "The SCRIPT_STREAM asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_36343( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The SCRIPT_STREAM asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                        (uParam1^)[Result]._fU32 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_26088( ref (uParam1^)[Result]._fU36 );
                        return Result;
                    }
                }
                else
                {
                    DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The SCRIPT_STREAM asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_36343( Result, uParam1, uParam2 );
                    return -1;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_36343( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (Result <= 2)
        {
            if ((GET_SCRIPT_STREAM_STATE( uParam0, iVar6 )) == 2)
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1537, uParam0 );
                DISPLAYF( "The SCRIPT_STREAM asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing SCRIPT_STREAM: {} ###", 1, 1537, uParam0 );
                StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
                (uParam1^)[iVar6]._fU32 = 3;
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_36343( iVar6, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar6;
            }
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The SCRIPT_STREAM - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ void sub_36343(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_24618( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The SCRIPT_STREAM asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_38233(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_38294( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_38544( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_38294(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_38544( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_38544( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_38544( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_38544( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_26088( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_26088( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_38544( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_38544( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_38544(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_24618( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_41188(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_41585(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_41987(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_42378(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_VEHICLE_RECORDING_IS_LOADED */ int sub_42792(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the VEHICLE_RECORDING to be requested: {} ###", 1, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the VEHICLE_RECORDING to load: {} ###", 1, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the VEHICLE_RECORDING to be removed: {} ###", 1, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ACTION_TREE_IS_LOADED */ int sub_43212(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_43590(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ int sub_43964(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_44620(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_553( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_9680( uParam0,  /* PLAYER_PED_ID */ sub_1100() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_TD_TRUCK_SPAWN */ void sub_45198()
{
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_TRUCK_SPAWN start", 0 );
    g_U3361 =  /* CREATEVEHICLE */ sub_45282( -1425703854, l_U323, l_U326, 0, 0, 0 );
    if (( /* ISVEHICLEVALID */ sub_45840( ref g_U3361, 0 )) == 1)
    {
        SET_VEHICLE_ONLY_DAMAGED_BY_PLAYER( g_U3361, 1 );
        SET_VEHICLE_ENGINE_HEALTH( g_U3361, 401.00000000 );
        SET_VEHICLE_PETROL_TANK_HEALTH( g_U3361, 30.00000000 );
        SET_PETROLTANK_BURN_RATE( g_U3361, 500.00000000 );
    }
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_TRUCK_SPAWN end", 0 );
    return;
}

/* CREATEVEHICLE */ void sub_45282(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, int iParam5, unknown uParam6, unknown uParam7)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a vehicle with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_45409( uParam0, 1 );
    }
    Result = CREATE_VEHICLE( uParam0, uParam1, uParam4, uParam6, uParam7 );
    if (iParam5 == 1)
    {
        while ((DOES_VEHICLE_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for vehicle to exist: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if (DOES_VEHICLE_EXIST( Result ))
    {
        SET_PETROLTANK_BURN_RATE( Result, 125.00000000 );
    }
    return Result;
}

/* LOADMODEL */ void sub_45409(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_11781( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* ISVEHICLEVALID */ void sub_45840(unknown uParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((DOES_VEHICLE_EXIST( (uParam0^) )) == 1)
    {
        Result = 1;
    }
    else
    {
        Result = 0;
    }
    if (Result == 1)
    {
        if ((IS_VEHICLE_DEAD( (uParam0^) )) == 1)
        {
            if (iParam1 == 1)
            {
                Result = 1;
            }
            else
            {
                Result = 0;
            }
        }
        else
        {
            Result = 1;
        }
    }
    return Result;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_46221(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_553( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_553( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_12946( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_46512( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_46989( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_46989( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47249( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_46989( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47249( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47249( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_46989( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47249( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47249( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47249( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_46989( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47249( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47249( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47249( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_47249( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_48829( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_553( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_46512(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_9961( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_553( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_553( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_46989(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_47249(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_48829(int iParam0)
{
     /* WRITE_STRING */ sub_11781( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_48917( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_48994( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_48994( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_48994( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_48994( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_48994( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_49864( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU52 );
     /* WRITE_STRING */ sub_11781( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU96 );
     /* WRITE_STRING */ sub_11781( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU100 );
     /* WRITE_STRING */ sub_11781( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU104 );
     /* WRITE_STRING */ sub_11781( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU108 );
     /* WRITE_STRING */ sub_11781( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU112 );
     /* WRITE_STRING */ sub_11781( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU116 );
     /* WRITE_STRING */ sub_11781( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU120 );
     /* WRITE_STRING */ sub_11781( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU124 );
     /* WRITE_STRING */ sub_11781( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU128 );
     /* WRITE_STRING */ sub_11781( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_49163( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_49163( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_49163( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_48917(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_48994(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_49163(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_49864(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_GLOBAL_CREATE_LOCKS */ void sub_50821(int iParam0, int iParam1)
{
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_GLOBAL_CREATE_LOCKS start", "###" );
     /* CLEANOBJECT */ sub_9101( g_U4167 );
    g_U4167 =  /* CREATEOBJECTNOOFFSET */ sub_50940( g_U1583, g_U4168, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4167 ))
    {
        FREEZE_OBJECT_POSITION( g_U4167, 1 );
        if (iParam0 == 1)
        {
            PLAY_OBJECT_ANIM( g_U4167, "P_LockGate", "pa_doors", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( g_U4167, "P_LockGate", "pa_doors", 1.00000000 );
        }
    }
     /* CLEANOBJECT */ sub_9101( g_U4171 );
    g_U4171 =  /* CREATEOBJECTNOOFFSET */ sub_50940( g_U1583, g_U4172, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U4171 )) == 1)
    {
        FREEZE_OBJECT_POSITION( g_U4171, 1 );
        if (iParam1 == 1)
        {
            PLAY_OBJECT_ANIM( g_U4171, "P_LockGate", "pa_doors", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( g_U4171, "P_LockGate", "pa_doors", 1.00000000 );
        }
    }
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_GLOBAL_CREATE_LOCKS end", "###" );
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_50940(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_45409( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_GBL_CREATE_HELIPAD_DOOR_PROPS */ void sub_51608(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_GBL_CREATE_HELIPAD_DOOR_PROPS - START", 0 );
    g_U3382 =  /* CREATEOBJECT */ sub_51734( g_U1572, g_U4200, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U3382 ))
    {
        FREEZE_OBJECT_POSITION( g_U3382, 1 );
        PLAY_OBJECT_ANIM( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.00000000, 0, 1 );
    }
    g_U4226 =  /* CREATEOBJECTNOOFFSET */ sub_50940( 1454823397, g_U4227, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4226 ))
    {
        FREEZE_OBJECT_POSITION( g_U4226, 1 );
        SET_OBJECT_VISIBLE( g_U4226, 0 );
    }
    g_U4225 =  /* CREATEOBJECTNOOFFSET */ sub_50940( 1422154951, g_U4227, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4225 ))
    {
        FREEZE_OBJECT_POSITION( g_U4225, 1 );
    }
    g_U4231 =  /* CREATEOBJECTNOOFFSET */ sub_50940( 1454823397, g_U4232, 0.00000000, 0.00000000, 180.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4231 ))
    {
        FREEZE_OBJECT_POSITION( g_U4231, 1 );
        SET_OBJECT_VISIBLE( g_U4231, 0 );
    }
    g_U4230 =  /* CREATEOBJECTNOOFFSET */ sub_50940( 1422154951, g_U4232, 0.00000000, 0.00000000, 180.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U4230 ))
    {
        FREEZE_OBJECT_POSITION( g_U4230, 1 );
    }
    if (bParam0)
    {
        SET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.00000000 );
    }
    else
    {
        SET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 1.00000000 );
    }
     /* P_CREATETRIGGERBOX */ sub_21091( ref g_U4203, "TRIGGER_HELI_PAD_DOOR_SIGHT_CHECK", 16.30000000, 3.79000000, 8.16000000, 20.75000000, 15.60000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_GBL_CREATE_HELIPAD_DOOR_PROPS - END", 0 );
    return;
}

/* CREATEOBJECT */ void sub_51734(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_45409( uParam0, 1 );
    }
    Result = CREATE_OBJECT( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_TD_TRUCK_REBELS_SPAWN */ void sub_52677()
{
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_TRUCK_REBELS_SPAWN - START", 0 );
    g_U3362 =  /* CREATEPEDINVEHICLE */ sub_52770( ref l_U348, g_U3361, -1, 0, 0 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U3362, 1 );
    WAIT( 0 );
    g_U3363 =  /* CREATEPEDINVEHICLE */ sub_52770( ref l_U361, g_U3361, -2, 0, 0 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U3363, 1 );
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_TRUCK_REBELS_SPAWN - END", 0 );
    return;
}

/* CREATEPEDINVEHICLE */ void sub_52770(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4)
{
    if ((HAS_MODEL_LOADED( iParam0->_fU16 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_45409( iParam0->_fU16, 1 );
    }
    if (((IS_VEHICLE_DEAD( uParam1 )) == 0) AND ((DOES_VEHICLE_EXIST( uParam1 )) == 1))
    {
        iParam0->_fU40 = CREATE_PED_INSIDE_VEHICLE( uParam1, iParam0->_fU24, iParam0->_fU16, uParam2, uParam4, iParam0->_fU48 );
    }
    else
    {
        SCRIPT_ASSERT( "The vehicle your trying to create a ped inside of is not valid!!!", 0 );
    }
    if (iParam3 == 1)
    {
        while ((DOES_PED_EXIST( iParam0->_fU40 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for ped created inside a vehicle to exist... ###", 0 );
            WAIT( 0 );
        }
    }
     /* SETPEDDEFAULTSTATS */ sub_53180( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_53281( iParam0->_fU40 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        iParam0->_fU44 = 1;
    }
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_53180(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_53281(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_TD_TRUCK_REBELS_SETUP */ void sub_53633()
{
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_TRUCK_REBELS_SETUP - START", 0 );
    if (( /* ISPEDVALID */ sub_53720( g_U3362, 0 )) == 1)
    {
        SET_PED_NAME_DEBUG( g_U3362, "piGBL_TOP_DECK_TRUCK_DRIVER" );
         /* F_GIVEPEDWEAPON */ sub_12172( g_U3362, -184942895, 25000, 0, 0 );
        l_U338 = GET_WEAPON_FROM_HAND( g_U3362, 0, 0 );
        SET_WEAPON_VISIBLE( l_U338, 0 );
        SET_PED_ALERTNESS( g_U3362, 3 );
        if (( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 )) == 1)
        {
            REGISTER_TARGET( g_U3362,  /* PLAYER_PED_ID */ sub_1100() );
            SET_LOCKED_TARGET( g_U3362,  /* PLAYER_PED_ID */ sub_1100() );
            SET_PED_COMBAT_RANGE( g_U3362, 1 );
            SET_PED_DIES_INSTANTLY_IN_WATER( g_U3362, 1 );
             /* P_TETHERPED */ sub_54039( ref l_U321, g_U3362, 1 );
        }
    }
    if (( /* ISPEDVALID */ sub_53720( g_U3363, 0 )) == 1)
    {
        SET_PED_NAME_DEBUG( g_U3363, "piGBL_TOP_DECK_TRUCK_PASSENGER" );
         /* F_GIVEPEDWEAPON */ sub_12172( g_U3363, 1308526797, 25000, 0, 0 );
        SET_PED_ALERTNESS( g_U3363, 3 );
        if (( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 )) == 1)
        {
            REGISTER_TARGET( g_U3363,  /* PLAYER_PED_ID */ sub_1100() );
            SET_LOCKED_TARGET( g_U3363,  /* PLAYER_PED_ID */ sub_1100() );
            SET_PED_COMBAT_RANGE( g_U3363, 1 );
            SET_PED_DIES_INSTANTLY_IN_WATER( g_U3363, 1 );
             /* P_TETHERPED */ sub_54039( ref l_U321, g_U3363, 1 );
        }
    }
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_TRUCK_REBELS_SETUP - END", 0 );
    return;
}

/* ISPEDVALID */ void sub_53720(unknown uParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((DOES_PED_EXIST( uParam0 )) == 1)
    {
        Result = 1;
    }
    else
    {
        Result = 0;
    }
    if (Result == 1)
    {
        if ((IS_PED_DEAD( uParam0 )) == 1)
        {
            if (iParam1 == 1)
            {
                Result = 1;
            }
            else
            {
                Result = 0;
            }
        }
        else
        {
            Result = 1;
        }
    }
    return Result;
}

/* P_TETHERPED */ void sub_54039(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_TD_CREATE_PLACEMENTS */ void sub_54365()
{
     /* WRITESCRIPTLOG */ sub_553( "CR", "P_CREATE_PLACEMENTS start", 0 );
    g_U3373 =  /* CREATEPLACEMENT */ sub_54482( -4072149, 19.26000000, 1.35000000, 6.15500000, 0.00000000, 0.00000000, 91.00000000, 0, 1, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U3373, ref g_U3303 );
    g_U3374 =  /* CREATEPLACEMENT */ sub_54482( -4072149, 19.05000000, 1.30000000, 6.18000000, 0.00000000, -1.60000000, -0.40000000, 0, 1, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U3374, ref g_U3303 );
     /* WRITESCRIPTLOG */ sub_553( "CR", "P_CREATE_PLACEMENTS end", 0 );
    return;
}

/* CREATEPLACEMENT */ void sub_54482(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_START_SP_CHALLENGES */ void sub_55021()
{
     /* WRITESCRIPTLOG */ sub_553( "CCB", "P_START_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_553( "CCB", "Starting the Panama_Top_Deck context...", 0 );
    START_CONTEXT( "Panama_Top_Deck" );
    return;
}

/* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ void sub_55253()
{
     /* WRITESCRIPTLOG */ sub_553( "CR", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - START", 0 );
    g_U4062 = GET_PAYNEKILLER_AMT();
     /* WRITESCRIPTLOG */ sub_553( "CR", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - END", 0 );
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_55435(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_55501( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_55501(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_8945( uParam0 );
            }
        }
    }
    return;
}

/* P_ASSIGN_BULLET_CAMS */ void sub_55684()
{
    if ( /* F_IS_PED_ARRAY_DEFEATED */ sub_55722( ref g_U3366, 0 ))
    {
        if (l_U374 == 0)
        {
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55896( ref g_U3349 )) == 1)
            {
                if (((IS_PED_DEAD( g_U3363 )) == 1) AND ((IS_PED_DEAD( g_U3362 )) == 1))
                {
                     /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_56251( ref g_U3349 );
                    l_U374 = 1;
                }
            }
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55896( ref g_U3349 )) == 0)
            {
                if (IS_PED_DEAD( g_U3363 ))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( g_U3362, 1 );
                    l_U374 = 1;
                }
                if (IS_PED_DEAD( g_U3362 ))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( g_U3363, 1 );
                    l_U374 = 1;
                }
            }
        }
    }
    if (( /* F_HAS_PED_ARRAY_SPAWNED */ sub_55761( ref g_U3366, 1 )) == 1)
    {
        if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55896( ref g_U3349 )) == 0)
        {
            if (IS_PED_DEAD( g_U3362 ))
            {
                if (IS_PED_DEAD( g_U3363 ))
                {
                     /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_56251( ref g_U3366 );
                }
            }
        }
    }
    return;
}

/* F_IS_PED_ARRAY_DEFEATED */ int sub_55722(unknown uParam0, boolean bParam1)
{
    if (( /* F_HAS_PED_ARRAY_SPAWNED */ sub_55761( uParam0, 0 )) == 1)
    {
        if (NOT bParam1)
        {
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55896( uParam0 )) == 0)
            {
                return 1;
            }
        }
        if (bParam1)
        {
            if (( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_56029( uParam0 )) == (uParam0^))
            {
                return 1;
            }
        }
    }
    return 0;
}

/* F_HAS_PED_ARRAY_SPAWNED */ void sub_55761(unknown uParam0, boolean bParam1)
{
    int I;
    int Result;

    Result = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if ((DOES_PED_EXIST( (uParam0^)[I] )) == 1)
        {
            Result = 1;
            if (NOT bParam1)
            {
                return 1;
            }
        }
        else
        {
            Result = 0;
        }
    }
    return Result;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_55896(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ void sub_56029(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            if (IS_PED_DEAD( (uParam0^)[I] ))
            {
                Result++;
            }
        }
    }
    return Result;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_56251(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55896( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_GBL_HANDLE_HELIPAD_DOOR_AUDIO */ void sub_56598()
{
    if (g_U4235 != -1)
    {
        if (NOT ( /* F_IS_OBJECT_PLAYING_ANIM */ sub_56688( g_U3382, "pa_anim", "P_PA_HelDor_Aa_H" )))
        {
             /* WRITESCRIPTLOG */ sub_553( "GA", "Stopping the Heli Door Opening Sound.", 0 );
             /* P_SAFE_STOP_SOUND */ sub_56835( g_U4235, 0 );
             /* P_SAFE_RELEASE_SOUND_ID */ sub_57018( ref g_U4235 );
        }
    }
    if (g_U4236 != -1)
    {
        if (NOT ( /* F_IS_OBJECT_PLAYING_ANIM */ sub_56688( g_U3382, "pa_anim", "P_PA_HelDor_Aa_H" )))
        {
             /* WRITESCRIPTLOG */ sub_553( "GA", "Stopping the Heli Door Closing Sound.", 0 );
             /* P_SAFE_STOP_SOUND */ sub_56835( g_U4236, 0 );
             /* P_SAFE_RELEASE_SOUND_ID */ sub_57018( ref g_U4236 );
        }
    }
    return;
}

/* F_IS_OBJECT_PLAYING_ANIM */ int sub_56688(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if ((DOES_OBJECT_EXIST( uParam0 )) == 1)
    {
        if (IS_OBJECT_PLAYING_ANIM( uParam0, uParam2, uParam1 ))
        {
            return 1;
        }
    }
    return 0;
}

/* P_SAFE_STOP_SOUND */ void sub_56835(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
         /* WRITESCRIPTLOG */ sub_553( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_553( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

/* P_SAFE_RELEASE_SOUND_ID */ void sub_57018(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
         /* WRITESCRIPTLOG */ sub_553( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_553( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

/* P_TD_HANDLE_TRIGGERING_MID_02B_PANAMA */ void sub_57358()
{
    if (NOT l_U946)
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_2690(  /* PLAYER_PED_ID */ sub_1100(), l_U1079 ))
        {
            if (NOT l_U1100)
            {
                l_U1100 = 1;
                if ((NOT (CUTSCENE_NAMED_IS_LOADING( "MID_02B_PANAMA" ))) AND (NOT (CUTSCENE_IS_LOADED( "MID_02B_PANAMA" ))))
                {
                     /* WRITESCRIPTLOG */ sub_553( "CCB", "Loading MID_02B_PANAMA cutscene...", 0 );
                    PRE_STREAM_SEAMLESS_CUTSCENE( "MID_02B_PANAMA" );
                }
            }
        }
        else if (l_U1100)
        {
            l_U1100 = 0;
            if ((CUTSCENE_NAMED_IS_LOADING( "MID_02B_PANAMA" )) || (CUTSCENE_IS_LOADED( "MID_02B_PANAMA" )))
            {
                 /* WRITESCRIPTLOG */ sub_553( "CCB", "Unloading MID_02B_PANAMA cutscene...", 0 );
                CLEAR_NAMED_CUTSCENE( "MID_02B_PANAMA" );
            }
        }
        if (( /* F_TD_IS_PIANO_POI_ACTIVE */ sub_57736()) == 1)
        {
            if ( /* F_HANDLE_POI */ sub_58135( ref l_U948 ))
            {
                l_U946 = 1;
                l_U190 = 9;
                 /* WRITESCRIPTLOG */ sub_553( "GA", "eCheckpointState = CP_TD_LOAD_MID_02B_PANAMA", 0 );
            }
        }
    }
    return;
}

/* F_TD_IS_PIANO_POI_ACTIVE */ int sub_57736()
{
    unknown uVar2;

    if (NOT l_U1110)
    {
        if ((NOT ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55896( ref g_U3366 )) != 0) AND (l_U425))) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_55896( ref g_U3349 )) == 0))
        {
            if (NOT l_U948._fU0)
            {
                 /* P_ENABLE_POI */ sub_7880( ref l_U948, 1 );
            }
        }
        else if (l_U948._fU0)
        {
             /* P_ENABLE_POI */ sub_7880( ref l_U948, 0 );
        }
        if (l_U948._fU0)
        {
            if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_57891( ref l_U775,  /* PLAYER_PED_ID */ sub_1100(), 0 ))
            {
                 /* WRITESCRIPTLOG */ sub_553( "CO", "PIANO TIMER STARTED", 0 );
                 /* CREATETIMER */ sub_1513( ref l_U806, 30000, 1, 0 );
                 /* STARTTIMER */ sub_1996( ref l_U806 );
            }
            if ( /* ISTIMERDONE */ sub_3851( ref l_U806 ))
            {
                 /* WRITESCRIPTLOG */ sub_553( "CO", "PIANO TIMER ENDED", 0 );
                 /* P_ENABLE_POI */ sub_7880( ref l_U948, 0 );
                 /* F_HANDLE_POI */ sub_58135( ref l_U948 );
                l_U1110 = 1;
                return 0;
            }
        }
        return l_U948._fU0;
    }
    else if (NOT l_U947)
    {
        if (( /* F_HANDLE_PED_ARRAY_SPAWN */ sub_59992( ref l_U545, ref l_U518, -1, 1, 1, 0, 1 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_553( "CO", "PIANO TIMER ENDED: ATTACK", 0 );
             /* F_GIVEPEDWEAPON */ sub_12172( l_U545[0], 1308526797, 25000, 0, 0 );
             /* F_GIVEPEDWEAPON */ sub_12172( l_U545[1], 1308526797, 25000, 0, 0 );
            OPEN_SEQUENCE_TASK( ref uVar2 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
            {
                TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, 29.59000000, 7.39000000, 5.27000000,  /* PLAYER_PED_ID */ sub_1100(), 0, 8.50000000, -1.00000000, -1082130432, 3 );
                TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
                TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
            }
            CLOSE_SEQUENCE_TASK( uVar2 );
            if (NOT (IS_PED_DEAD( l_U545[0] )))
            {
                TASK_PERFORM_SEQUENCE( l_U545[0], uVar2 );
            }
            CLEAR_SEQUENCE_TASK( uVar2 );
            OPEN_SEQUENCE_TASK( ref uVar2 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
            {
                TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, 29.38000000, 0.27000000, 5.26000000,  /* PLAYER_PED_ID */ sub_1100(), 0, 8.50000000, -1.00000000, -1082130432, 3 );
                TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
                TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
            }
            CLOSE_SEQUENCE_TASK( uVar2 );
            if (NOT (IS_PED_DEAD( l_U545[1] )))
            {
                TASK_PERFORM_SEQUENCE( l_U545[1], uVar2 );
            }
            CLEAR_SEQUENCE_TASK( uVar2 );
            l_U947 = 1;
        }
    }
    return 0;
}

/* F_ISPEDINTRIGGERBOXFIRSTTIME */ void sub_57891(int iParam0, unknown uParam1, unknown uParam2)
{
    if (iParam0->_fU68 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU68 =  /* F_ISPEDINTRIGGERBOX */ sub_2690( uParam1, (iParam0^) );
        if ((iParam0->_fU68) AND (uParam2))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU68;
}

/* F_HANDLE_POI */ int sub_58135(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    int iVar6;
    int iVar7;
    int iVar8;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0)
    {
        if (iParam0->_fU0 == 1)
        {
            uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_1100() )};
            iVar6 = 0;
            if (iParam0->_fU80 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_2690(  /* PLAYER_PED_ID */ sub_1100(), iParam0->_fU116 )) == 1)
                {
                    if (iParam0->_fU300 == 1)
                    {
                        if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                        {
                            iVar6 = 1;
                        }
                    }
                    else
                    {
                        iVar6 = 1;
                    }
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU84 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_PED_ON_SCREEN( iParam0->_fU316, 0 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU100, 1 )) <= iParam0->_fU112)
            {
                if (iParam0->_fU300 == 1)
                {
                    if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                    {
                        iVar6 = 1;
                    }
                }
                else
                {
                    iVar6 = 1;
                }
            };;;;
            iVar7 = 0;
            if (iParam0->_fU88 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_2690(  /* PLAYER_PED_ID */ sub_1100(), iParam0->_fU216 )) == 1)
                {
                    iVar7 = 1;
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU92 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU200, 1 )) <= iParam0->_fU212)
            {
                iVar7 = 1;
            };;;;
            if (iVar6 == 1)
            {
                if ((iParam0->_fU4 != 3) AND (iParam0->_fU52 == 1))
                {
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_8338( iParam0 );
                    }
                    iVar8 = 0;
                    if ((IS_WEAPON_PICKUP_VISIBLE() == 0) AND ((iParam0->_fU60 == 0) AND (( /* F_ISACTIONINGAVAILABLE */ sub_8434( iParam0 )) == 1)))
                    {
                        SET_ACTION_CONSUMED( 0, 1 );
                        if (( /* F_HASACTIONBEENPRESSED */ sub_59032()) == 1)
                        {
                            iVar8 = 1;
                        }
                    }
                    if (iVar8 == 1)
                    {
                        if (iParam0->_fU332 == 0)
                        {
                             /* P_ENABLE_POI */ sub_7880( iParam0, 0 );
                            iParam0->_fU64 = 1;
                        }
                        if (iParam0->_fU68 == 1)
                        {
                            iParam0->_fU72 = 0;
                        }
                        return 1;
                    }
                    else if (iParam0->_fU8 != 2)
                    {
                        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                        {
                             /* P_ENABLEPOIGLINT */ sub_7939( iParam0, 0 );
                             /* P_ENABLEPOIINTERACTIONTEXT */ sub_8158( iParam0, 1 );
                        }
                        else if (iParam0->_fU320 == 1)
                        {
                             /* P_ENABLEPOIGLINT */ sub_7939( iParam0, 1 );
                        }
                        iParam0->_fU8 = 2;
                    }
                    if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                    {
                        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0)
                        {
                            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1100(), 1 );
                            iParam0->_fU328 = 1;
                        }
                    }
                }
            }
            else if (iVar7 == 1)
            {
                if (iParam0->_fU8 != 1)
                {
                    if ((iParam0->_fU4 != 3) AND (iParam0->_fU320 == 1))
                    {
                         /* P_ENABLEPOIGLINT */ sub_7939( iParam0, 1 );
                    }
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_ENABLEPOIINTERACTIONTEXT */ sub_8158( iParam0, 0 );
                    }
                    if (iParam0->_fU96 == 1)
                    {
                        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0) AND ((((IS_PED_DEAD( iParam0->_fU316 )) == 1) || ((IS_PED_DEAD( iParam0->_fU316 )) == 0)) AND ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)))
                        {
                            TASK_LOOK_AT_PED(  /* PLAYER_PED_ID */ sub_1100(), iParam0->_fU316, -1, 0 );
                        }
                    }
                    else if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0)
                    {
                        TASK_LOOK_AT_COORD(  /* PLAYER_PED_ID */ sub_1100(), iParam0->_fU100, -1, 0 );
                    }
                    iParam0->_fU340 = 1;
                    if ((iParam0->_fU72 == 0) AND ((iParam0->_fU68 == 1) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU8 == 2))))
                    {
                        iParam0->_fU72 = 1;
                    }
                    iParam0->_fU8 = 1;
                }
                if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                {
                    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0)
                    {
                        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1100(), 1 );
                        iParam0->_fU328 = 1;
                    }
                }
            }
            else if ((iParam0->_fU4 == 1) || (iParam0->_fU4 == 3))
            {
                ;
            }
            else if (iParam0->_fU8 != 0)
            {
                if (iParam0->_fU320 == 1)
                {
                     /* P_ENABLEPOIGLINT */ sub_7939( iParam0, 0 );
                }
            }
            if (iParam0->_fU8 == 2)
            {
                if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                {
                     /* P_ENABLEPOIINTERACTIONTEXT */ sub_8158( iParam0, 0 );
                }
            }
            if (iParam0->_fU340)
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0)
                {
                    TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_1100() );
                    iParam0->_fU340 = 0;
                }
            }
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0)
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1100(), 0 );
                    iParam0->_fU328 = 0;
                }
            }
            if (iParam0->_fU332 == 1)
            {
                 /* P_ENABLEPOIINTERACTIONTEXT */ sub_8158( iParam0, 0 );
            }
            iParam0->_fU8 = 0;;;
        }
    }
    return 0;
}

/* F_HASACTIONBEENPRESSED */ int sub_59032()
{
    if ((IS_CONTROL_JUST_PRESSED( 0, 30 )) == 1)
    {
        return 1;
    }
    return 0;
}

/* F_HANDLE_PED_ARRAY_SPAWN */ int sub_59992(unknown uParam0, unknown uParam1, int iParam2, boolean bParam3, boolean bParam4, int iParam5, unknown uParam6)
{
    int iVar9;
    int iVar10;
    int Result;

    iVar9 =  /* F_GET_NUM_SPAWNED_PED_IN_ARRAY */ sub_60033( uParam0, uParam1 );
    if (iParam2 == -1)
    {
        iVar10 = (uParam0^);
    }
    else
    {
        iVar10 = iParam2;
    }
    if (iVar9 < iVar10)
    {
        if ((uParam1^)[iVar9]._fU16 == 0)
        {
            SCRIPT_ASSERT( "Invalid Ped Struct!  No Model Defined! Aborting Ped Spawn", 0 );
             /* WRITESCRIPTLOG */ sub_553( "MF", "Invalid Ped Struct!  No Model Defined! Aborting Ped Spawn", 0 );
            PRINTSTRING( "INVALID SPAWN INDEX: " );
             /* WRITE_INT */ sub_49163( iVar9 );
            return 0;
        }
        if (NOT (DOES_PED_EXIST( (uParam0^)[iVar9] )))
        {
             /* LOADMODEL */ sub_45409( (uParam1^)[iVar9]._fU16, uParam6 );
            (uParam0^)[iVar9] =  /* CREATEPED */ sub_60450( ref (uParam1^)[iVar9] );
            if (NOT bParam4)
            {
                SET_PED_VISIBLE( (uParam0^)[iVar9], bParam4 );
                 /* WRITE_STRING */ sub_11781( "SPAWNING INVISIBLE PED!!!" );
            }
            if (iParam5 == 1)
            {
                 /* P_DEACTIVATEPED */ sub_61056( (uParam0^)[iVar9] );
                 /* WRITE_STRING */ sub_11781( "Deactivating Ped..." );
            }
        }
    }
    if (bParam3)
    {
        if (iVar9 == (iVar10 - 1))
        {
             /* WRITESCRIPTLOG */ sub_553( "MF", "F_HANDLE_PED_ARRAY_SPAWN: Returning true Once.  If you see this looping, you likely have unitialized ped model data in your pedstruct array.", 0 );
            Result = 1;
        }
        return Result;
    }
    else if (iVar9 >= iVar10)
    {
        return 1;
    }
    return 0;
}

/* F_GET_NUM_SPAWNED_PED_IN_ARRAY */ void sub_60033(unknown uParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = (uParam1^);
    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (DOES_PED_EXIST( (uParam0^)[I] )))
        {
            if ((uParam1^)[I]._fU16 != 0)
            {
                if (I < Result)
                {
                    Result = I;
                }
            }
        }
    }
    return Result;
}

/* CREATEPED */ void sub_60450(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_45409( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_53180( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_53281( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* P_DEACTIVATEPED */ void sub_61056(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* P_HELICOPTER_BLADES_SPINNING */ void sub_61939()
{
    if ((NOT (IS_VEHICLE_DEAD( g_U3360 ))) AND (DOES_VEHICLE_EXIST( g_U3360 )))
    {
        if (IS_RECORDING_GOING_ON_FOR_VEHICLE( g_U3360 ))
        {
            SET_VEHICLE_ENGINE_ON( g_U3360, 1, 1 );
            SET_HELI_BLADES_FULL_SPEED( g_U3360 );
        }
    }
    return;
}

/* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ void sub_62062()
{
    if (NOT ( /* HASTIMERBEENACTIVATED */ sub_3699( ref g_U4052 )))
    {
         /* P_CREATE_AND_START_TIMER */ sub_62132( ref g_U4052, g_U4061 );
    }
    if (((g_U4052._fU16) || ( /* ISTIMERDONE */ sub_3851( ref g_U4052 ))) AND ( /* F_GBL_HAS_PLAYER_JUST_ACQUIRED_PAIN_KILLERS */ sub_62195()))
    {
         /* WRITESCRIPTLOG */ sub_553( "MF", "Playing Speech: SPAN_MXFNDS1", 0 );
         /* P_SPEECH_PLAY_MONOLOGUE */ sub_62476( ref g_U4063, ref g_U1246 );
         /* RESETTIMER */ sub_4427( ref g_U4052 );
    }
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_62132(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_1513( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_1996( uParam0 );
    return;
}

/* F_GBL_HAS_PLAYER_JUST_ACQUIRED_PAIN_KILLERS */ int sub_62195()
{
    if (GET_PAYNEKILLER_AMT() > g_U4062)
    {
         /* WRITESCRIPTLOG */ sub_553( "CR", "Player picked up Payne Killers!", 0 );
        PRINTSTRING( "HAD: " );
         /* WRITE_INT */ sub_49163( g_U4062 );
        PRINTSTRING( "NOW: " );
         /* WRITE_INT */ sub_49163( GET_PAYNEKILLER_AMT() );
        g_U4062 = GET_PAYNEKILLER_AMT();
        return 1;
    }
    g_U4062 = GET_PAYNEKILLER_AMT();
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_62476(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_62514( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_62623( 0,  /* PLAYER_PED_ID */ sub_1100(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_62623( 1,  /* PLAYER_PED_ID */ sub_1100(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_62876( uParam0, uParam1, 8, 1 );
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_62514(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_62623(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_62876(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_62921( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_62921(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_63008( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_63008(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_63060( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_63578( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_63060(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_63578(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_SET_BLOCKING_EVENTS_PED_ARRAY */ void sub_63898(unknown uParam0, unknown uParam1, boolean bParam2)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            if (bParam2)
            {
                CLEAR_PED_TASKS( (uParam0^)[I] );
            }
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( (uParam0^)[I], uParam1 );
        }
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_64043(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_2690(  /* PLAYER_PED_ID */ sub_1100(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* P_GLOBAL_MAIN_DECK_BODIES_RESTORE */ void sub_64178()
{
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_GLOBAL_MAIN_DECK_BODIES_RESTORE - START", 0 );
    if (g_U4154[0] == 1)
    {
         /* P_CREATE_DEAD_BODY */ sub_64303( g_U4148[0], 3 );
    }
    else
    {
         /* CLEANPED */ sub_8945( g_U4148[0] );
    }
    if (g_U4154[1] == 1)
    {
         /* P_CREATE_DEAD_BODY */ sub_64303( g_U4148[1], 5 );
    }
    else
    {
         /* CLEANPED */ sub_8945( g_U4148[1] );
    }
    if (g_U4154[2] == 1)
    {
         /* P_CREATE_DEAD_BODY */ sub_64303( g_U4148[2], 3 );
    }
    else
    {
         /* CLEANPED */ sub_8945( g_U4148[2] );
    }
    if (g_U4154[3] == 1)
    {
         /* P_CREATE_DEAD_BODY */ sub_64303( g_U4148[3], 5 );
    }
    else
    {
         /* CLEANPED */ sub_8945( g_U4148[3] );
    }
    if (g_U4154[4] == 1)
    {
         /* P_CREATE_DEAD_BODY */ sub_64303( g_U4148[4], 0 );
    }
    else
    {
         /* CLEANPED */ sub_8945( g_U4148[4] );
    }
     /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_65477( ref g_U4148, "MainDeck Dead Ped " );
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_GLOBAL_MAIN_DECK_BODIES_RESTORE - END", 0 );
    return;
}

/* P_CREATE_DEAD_BODY */ void sub_64303(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
         /* WRITE_STRING */ sub_11781( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_65477(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ int sub_65717(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (( /* F_IS_PED_AWARE_OF_PED */ sub_65797( ref (uParam0^)[I], uParam1, uParam2, uParam3, uParam4, uParam5, uParam6 )) == 1)
        {
            return 1;
        }
    }
    return 0;
}

/* F_IS_PED_AWARE_OF_PED */ int sub_65797(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, int iParam6)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        if ((uParam3) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 1 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_553( "MF", "ped has SEEN target ped", 0 );
            }
            return 1;
        }
        else if ((uParam4) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 8 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_553( "MF", "ped has BEEN SHOT AT by target ped", 0 );
            }
            return 1;
        }
        else if ((uParam2) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 2 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_553( "MF", "ped has HEARD target ped", 0 );
            }
            return 1;
        }
        else if ((uParam5) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 4 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_553( "MF", "ped has BEEN TOLD ABOUT target ped", 0 );
            }
            return 1;
        };;;;
    }
    return 0;
}

/* P_TD_SHORE_REBELS_START */ void sub_66495()
{
    int I;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    int J;

     /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_SHORE_REBELS_START start", 0 );
     /* P_SETUP_AI_GROUP */ sub_66584( ref l_U313, 1.00000000, 0 );
    for ( I = 0; I < g_U3349; I++ )
    {
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_66998( g_U3349[I], ref l_U313 );
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() ))) AND (NOT (IS_PED_DEAD( g_U3349[I] ))))
        {
            REGISTER_TARGET( g_U3349[I],  /* PLAYER_PED_ID */ sub_1100() );
            SET_PED_DIES_INSTANTLY_IN_WATER( g_U3349[I], 1 );
        }
    }
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() ))) AND (NOT (IS_PED_DEAD( g_U3349[0] ))))
    {
        SET_PED_AI_TEMPLATE( g_U3349[0], ref g_U1480 );
        SET_PED_COMBAT_RANGE_MIN( g_U3349[0], 5.00000000 );
        SET_PED_COMBAT_RANGE_MAX( g_U3349[0], 30.00000000 );
        SET_PED_ALERTNESS( g_U3349[0], 3 );
         /* P_TETHERPED */ sub_54039( ref l_U321, g_U3349[0], 1 );
         /* F_GIVEPEDWEAPON */ sub_12172( g_U3349[0], -184942895, 25000, 0, 0 );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 3.40000000, 19.59000000, 8.00000000,  /* PLAYER_PED_ID */ sub_1100(), 3, 1, 0.25000000, 1.50000000, 1, 0 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( g_U3349[0], uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() ))) AND (NOT (IS_PED_DEAD( g_U3349[1] ))))
    {
        SET_PED_AI_TEMPLATE( g_U3349[1], ref g_U1472 );
         /* P_TETHERPED */ sub_54039( ref l_U322, g_U3349[1], 1 );
        SET_PED_ALERTNESS( g_U3349[1], 3 );
         /* F_GIVEPEDWEAPON */ sub_12172( g_U3349[1], -184942895, 25000, 0, 0 );
        OPEN_SEQUENCE_TASK( ref uVar4 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_STAND_STILL( 0, 1000 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 31.23000000, 22.38000000, 8.00000000, 3, -1, 1048576000, 0, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 6.14000000, 20.56000000, 8.00000000,  /* PLAYER_PED_ID */ sub_1100(), 3, 1, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        if (( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 )) == 1)
        {
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
        }
        CLOSE_SEQUENCE_TASK( uVar4 );
        TASK_PERFORM_SEQUENCE( g_U3349[1], uVar4 );
        CLEAR_SEQUENCE_TASK( uVar4 );
    }
    if ( /* ISPEDVALID */ sub_53720( g_U3349[2], 0 ))
    {
         /* P_TETHERPED */ sub_54039( ref l_U322, g_U3349[2], 1 );
        SET_PED_AI_TEMPLATE( g_U3349[2], ref g_U1504 );
        SET_PED_ALERTNESS( g_U3349[2], 3 );
         /* F_GIVEPEDWEAPON */ sub_12172( g_U3349[2], 1308526797, 25000, 0, 0 );
        OPEN_SEQUENCE_TASK( ref uVar5 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 34.33475000, 20.57256000, 7.91534600, 3, -1, 1048576000, 0, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 18.07000000, 20.61000000, 8.00000000,  /* PLAYER_PED_ID */ sub_1100(), 3, 1, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        if (( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 )) == 1)
        {
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
        }
        CLOSE_SEQUENCE_TASK( uVar5 );
        TASK_PERFORM_SEQUENCE( g_U3349[2], uVar5 );
        CLEAR_SEQUENCE_TASK( uVar5 );
    }
    if ( /* ISPEDVALID */ sub_53720( g_U3349[3], 0 ))
    {
         /* P_TETHERPED */ sub_54039( ref l_U321, g_U3349[3], 1 );
        SET_PED_COMBAT_RANGE_MAX( g_U3349[3], 10.00000000 );
        SET_PED_AI_TEMPLATE( g_U3349[3], ref g_U1472 );
        SET_PED_ALERTNESS( g_U3349[3], 3 );
         /* F_GIVEPEDWEAPON */ sub_12172( g_U3349[3], 1308526797, 25000, 0, 0 );
        OPEN_SEQUENCE_TASK( ref uVar6 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_STAND_STILL( 0, 1500 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 32.37000000, 29.75000000, 8.00000000, 3, -1, 1048576000, 0, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 17.68000000, 23.63000000, 8.00000000,  /* PLAYER_PED_ID */ sub_1100(), 3, 1, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        if ( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 ))
        {
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
        }
        CLOSE_SEQUENCE_TASK( uVar6 );
        TASK_PERFORM_SEQUENCE( g_U3349[3], uVar6 );
        CLEAR_SEQUENCE_TASK( uVar6 );
    }
    if ( /* ISPEDVALID */ sub_53720( g_U3349[4], 0 ))
    {
         /* P_TETHERPED */ sub_54039( ref l_U321, g_U3349[4], 1 );
        SET_PED_AI_TEMPLATE( g_U3349[4], ref g_U1472 );
        SET_PED_ALERTNESS( g_U3349[4], 3 );
         /* F_GIVEPEDWEAPON */ sub_12172( g_U3349[4], -184942895, 25000, 0, 0 );
        OPEN_SEQUENCE_TASK( ref uVar7 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_STAND_STILL( 0, 1500 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 37.99303000, 20.87941000, 7.91452300, 3, -1, 1048576000, 0, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 10.64000000, 20.14000000, 7.91000000,  /* PLAYER_PED_ID */ sub_1100(), 3, 1, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        if ( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 ))
        {
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
        }
        CLOSE_SEQUENCE_TASK( uVar7 );
        TASK_PERFORM_SEQUENCE( g_U3349[4], uVar7 );
        CLEAR_SEQUENCE_TASK( uVar7 );
    }
    for ( J = 5; J <= 8; J++ )
    {
        if ( /* ISPEDVALID */ sub_53720( g_U3349[J], 0 ))
        {
             /* P_DEACTIVATEPED */ sub_61056( g_U3349[J] );
        }
    }
     /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_65477( ref g_U3349, "piGBL_TOP_DECK_REBELS_SHORE" );
    l_U320 = 1;
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_SHORE_REBELS_START end", 0 );
    return;
}

/* P_SETUP_AI_GROUP */ void sub_66584(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_66998(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_11781( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_66584( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_66584( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_TD_CLEANUP_SHORE_PEDS */ void sub_68998()
{
    int I;

     /* WRITESCRIPTLOG */ sub_553( "CR", "P_TD_CLEANUP_SHORE_PEDS - Start", 0 );
    for ( I = 0; I <= 8; I++ )
    {
        if (IS_PED_DEAD( g_U3349[I] ))
        {
             /* CLEANPED */ sub_8945( g_U3349[I] );
        }
    }
    if (IS_PED_DEAD( g_U3362 ))
    {
         /* CLEANPED */ sub_8945( g_U3362 );
    }
    if (IS_PED_DEAD( g_U3363 ))
    {
         /* CLEANPED */ sub_8945( g_U3363 );
    }
    REMOVE_ALL_PICKUPS_AND_PLACEMENTS_OF_TYPE( -2117698134 );
    REMOVE_ALL_PICKUPS_AND_PLACEMENTS_OF_TYPE( -46756431 );
     /* WRITESCRIPTLOG */ sub_553( "CR", "P_TD_CLEANUP_SHORE_PEDS - End", 0 );
    return;
}

/* F_HANDLE_HELI_AUDIO_BOATFLYBY */ int sub_69342(unknown uParam0)
{
    int I;

    switch (l_U1111)
    {
        case 0: break;
        case 1:
        for ( I = 0; I <= 2; I++ )
        {
            if ((GET_SCRIPT_STREAM_STATE( "ANY_STREAM", I )) == 0)
            {
                 /* WRITESCRIPTLOG */ sub_553( "CO", "F_HANDLE_HELI_AUDIO_BOATFLYBY : eRemoveHeliAudio_BOATFLYBY", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_6179( ref g_U2986[I]._fU0, ref g_U2986 );
                l_U1111 = 2;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_553( "CO", "F_HANDLE_HELI_AUDIO_BOATFLYBY : eLoadHeliAudio_BOATFLYBY", 0 );
         /* P_STREAMREQ_SCRIPT_STREAM_INSERT */ sub_36023( uParam0, ref g_U2986 );
        l_U1111 = 3;
        break;
        case 3:
        if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_5439( uParam0, ref g_U2986 ))
        {
             /* WRITESCRIPTLOG */ sub_553( "CO", "F_HANDLE_HELI_AUDIO_BOATFLYBY : eWaitHeliAudio_BOATFLYBY", 0 );
            l_U1111 = 4;
        }
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_FLYBY_HELICOPTER */ void sub_69845()
{
     /* WRITESCRIPTLOG */ sub_553( "CR", "P_SETUP_FLYBY_HELICOPTER - Start", 0 );
    g_U3360 =  /* CREATEVEHICLE */ sub_45282( g_U1534, l_U872, 0.00000000, 0, 0, 0 );
    if (DOES_VEHICLE_EXIST( g_U3360 ))
    {
        SET_VEHICLE_ENGINE_ON( g_U3360, 1, 1 );
        SET_HELI_BLADES_FULL_SPEED( g_U3360 );
        SET_VEHICLE_INTERIORLIGHT( g_U3360, 1 );
        SET_VEHICLE_LIGHTS( g_U3360, 2 );
        SET_VEHICLE_CAN_BE_DAMAGED( g_U3360, 0 );
        SET_VEHICLE_PROOFS( g_U3360, 1, 1, 1, 1, 1 );
        SET_VEHICLE_COLLISION( g_U3360, 0 );
    }
    g_U3365 =  /* CREATEPEDINVEHICLE */ sub_52770( ref l_U859, g_U3360, -1, 0, 0 );
    if (NOT (IS_PED_DEAD( g_U3365 )))
    {
        SET_PED_PROP_INDEX( g_U3365, 0, 0, 0, 255 );
        SET_PED_CAN_BE_TARGETTED( g_U3365, 0 );
        SET_PED_INVINCIBLE( g_U3365, 1 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U3365, 1 );
    }
    if (( /* ISVEHICLEVALID */ sub_45840( ref g_U3360, 0 )) == 1)
    {
         /* P_START_VEHICLE_PLAYBACK */ sub_70202( g_U3360, 303, l_U875, l_U876, 0 );
         /* WRITESCRIPTLOG */ sub_553( "CR", "Start Flyby vehicle playback", 0 );
    }
     /* WRITESCRIPTLOG */ sub_553( "CR", "P_SETUP_FLYBY_HELICOPTER - End", 0 );
    return;
}

/* P_START_VEHICLE_PLAYBACK */ void sub_70202(unknown uParam0, unknown uParam1, unknown uParam2, float fParam3, boolean bParam4)
{
    if (NOT (IS_VEHICLE_DEAD( uParam0 )))
    {
        if (IS_PLAYBACK_GOING_ON_FOR_VEHICLE( uParam0 ))
        {
            STOP_PLAYBACK_RECORDED_VEHICLE( uParam0 );
        }
    }
     /* LOADVEHICLERECORDING */ sub_70280( uParam1, 1 );
    if (NOT (IS_VEHICLE_DEAD( uParam0 )))
    {
        START_PLAYBACK_RECORDED_VEHICLE( uParam0, uParam1 );
        SET_PLAYBACK_SPEED( uParam0, uParam2 );
        if (fParam3 > 0.00000000)
        {
            SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE( uParam0, fParam3 );
        }
    }
    if (bParam4)
    {
        while ((NOT (IS_PLAYBACK_GOING_ON_FOR_VEHICLE( uParam0 ))) AND (NOT (IS_VEHICLE_DEAD( uParam0 ))))
        {
             /* WRITE_STRING */ sub_11781( "Waiting for vehicle to start playing recorded path." );
            WAIT( 0 );
        }
    }
    return;
}

/* LOADVEHICLERECORDING */ void sub_70280(unknown uParam0, int iParam1)
{
    REQUEST_VEHICLE_RECORDING( uParam0 );
    if (iParam1 == 1)
    {
        while ((HAS_VEHICLE_RECORDING_BEEN_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a recording to be loaded: Rec# {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* F_GET_NUM_ALIVE_PEDS_ON_SHORE */ void sub_70727()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 8; I++ )
    {
        if (NOT (IS_PED_DEAD( g_U3349[I] )))
        {
            Result++;
        }
    }
    if (NOT (IS_PED_DEAD( g_U3362 )))
    {
        Result++;
    }
    if (NOT (IS_PED_DEAD( g_U3363 )))
    {
        Result++;
    }
    return Result;
}

/* P_TD_SHORE_REBELS_BACKUP_START */ void sub_70904()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

     /* WRITESCRIPTLOG */ sub_553( "CR", "P_TD_SHORE_REBELS_BACKUP_START - Start", 0 );
     /* P_ACTIVATEPED */ sub_71007( g_U3349[5] );
     /* P_ACTIVATEPED */ sub_71007( g_U3349[6] );
     /* P_ACTIVATEPED */ sub_71007( g_U3349[7] );
     /* P_ACTIVATEPED */ sub_71007( g_U3349[8] );
    if ( /* ISPEDVALID */ sub_53720( g_U3349[5], 0 ))
    {
         /* P_TETHERPED */ sub_54039( ref l_U321, g_U3349[5], 1 );
        SET_PED_COMBAT_RANGE_MAX( g_U3349[5], 10.00000000 );
        SET_PED_AI_TEMPLATE( g_U3349[5], ref g_U1480 );
        SET_PED_ALERTNESS( g_U3349[5], 3 );
         /* F_GIVEPEDWEAPON */ sub_12172( g_U3349[5], 1308526797, 25000, 0, 0 );
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 6.07989100, 28.22869000, 7.91075800, 3, -1, 1048576000, 0, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 7.09671500, 20.13669000, 7.91651500,  /* PLAYER_PED_ID */ sub_1100(), 3, 1, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        if ( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 ))
        {
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
        }
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( g_U3349[5], uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
    }
    if ( /* ISPEDVALID */ sub_53720( g_U3349[6], 0 ))
    {
         /* P_TETHERPED */ sub_54039( ref l_U321, g_U3349[6], 1 );
        SET_PED_AI_TEMPLATE( g_U3349[6], ref g_U1472 );
        SET_PED_ALERTNESS( g_U3349[6], 3 );
         /* F_GIVEPEDWEAPON */ sub_12172( g_U3349[6], -184942895, 25000, 0, 0 );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 24.64692000, 29.03596000, 7.91075800, 3, -1, 1048576000, 0, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 6.48198100, 21.19320000, 7.91368100,  /* PLAYER_PED_ID */ sub_1100(), 3, 1, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        if ( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 ))
        {
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
        }
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( g_U3349[6], uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    if ( /* ISPEDVALID */ sub_53720( g_U3349[7], 0 ))
    {
         /* P_TETHERPED */ sub_54039( ref l_U321, g_U3349[7], 1 );
        SET_PED_COMBAT_RANGE_MAX( g_U3349[7], 10.00000000 );
        SET_PED_AI_TEMPLATE( g_U3349[7], ref g_U1480 );
        SET_PED_ALERTNESS( g_U3349[7], 3 );
         /* F_GIVEPEDWEAPON */ sub_12172( g_U3349[7], 1308526797, 25000, 0, 0 );
        OPEN_SEQUENCE_TASK( ref uVar4 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 15.57409000, 25.58654000, 7.91075800, 3, -1, 1048576000, 0, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 13.93385000, 19.94252000, 7.91703600,  /* PLAYER_PED_ID */ sub_1100(), 3, 1, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        if ( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 ))
        {
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
        }
        CLOSE_SEQUENCE_TASK( uVar4 );
        TASK_PERFORM_SEQUENCE( g_U3349[7], uVar4 );
        CLEAR_SEQUENCE_TASK( uVar4 );
    }
    if ( /* ISPEDVALID */ sub_53720( g_U3349[8], 0 ))
    {
         /* P_TETHERPED */ sub_54039( ref l_U321, g_U3349[8], 1 );
        SET_PED_AI_TEMPLATE( g_U3349[8], ref g_U1472 );
        SET_PED_ALERTNESS( g_U3349[8], 3 );
         /* F_GIVEPEDWEAPON */ sub_12172( g_U3349[8], -184942895, 25000, 0, 0 );
        OPEN_SEQUENCE_TASK( ref uVar5 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 26.64692000, 29.03596000, 7.91075800, 3, -1, 1048576000, 0, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 21.57370000, 20.80494000, 7.91469900,  /* PLAYER_PED_ID */ sub_1100(), 3, 1, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        if ( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 ))
        {
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
        }
        CLOSE_SEQUENCE_TASK( uVar5 );
        TASK_PERFORM_SEQUENCE( g_U3349[8], uVar5 );
        CLEAR_SEQUENCE_TASK( uVar5 );
    }
     /* WRITESCRIPTLOG */ sub_553( "CR", "P_TD_SHORE_REBELS_BACKUP_START - End", 0 );
    return;
}

/* P_ACTIVATEPED */ void sub_71007(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_TD_TRUCK_ARRIVE */ void sub_72303()
{
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_TRUCK_ARRIVE start", 0 );
    if (( /* ISVEHICLEVALID */ sub_45840( ref g_U3361, 0 )) == 1)
    {
        START_PLAYBACK_RECORDED_VEHICLE( g_U3361, 8 );
        SET_VEHICLE_ENGINE_ON( g_U3361, 1, 1 );
    }
     /* P_STREAMREQ_SCRIPT_STREAM_PLAY_FROM_PED */ sub_72444( g_U3362, "S_PANA_SHORE_TRUCK", ref g_U2986 );
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_TRUCK_ARRIVE end", 0 );
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_PLAY_FROM_PED */ void sub_72444(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_5439( uParam1, uParam2 ))
    {
        iVar5 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_5648( uParam1, uParam2 );
        if (NOT (iVar5 == -1))
        {
            if (NOT (IS_PED_DEAD( uParam0 )))
            {
                DISPLAYF( "[CCB]### Playing the SCRIPT_STREAM from ped: {} ###", 1, 1281, ref (uParam2^)[iVar5]._fU0 );
                PLAY_SCRIPT_STREAM_FROM_PED( uParam0, iVar5 );
            }
            else
            {
                DISPLAYF( "The ped is NOT valid!!!", 0 );
            }
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam1 );
            SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam1 );
        SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* P_TD_TRUCK_ATTACK */ void sub_73072()
{
    unknown uVar2;
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_TRUCK_ATTACK start", 0 );
    OPEN_SEQUENCE_TASK( ref uVar2 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
    if ( /* ISVEHICLEVALID */ sub_45840( ref g_U3361, 0 ))
    {
        TASK_LEAVE_VEHICLE_DONT_CLOSE_DOOR( 0, g_U3361 );
    }
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if ( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 ))
    {
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
    }
    CLOSE_SEQUENCE_TASK( uVar2 );
    OPEN_SEQUENCE_TASK( ref uVar3 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
    if ( /* ISVEHICLEVALID */ sub_45840( ref g_U3361, 0 ))
    {
        TASK_LEAVE_VEHICLE_DONT_CLOSE_DOOR( 0, g_U3361 );
    }
    TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 14.90908000, 22.96273000, 7.91075800,  /* PLAYER_PED_ID */ sub_1100(), 3, 1, 1056964608, 0, 1, 0 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if ( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 ))
    {
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
    }
    CLOSE_SEQUENCE_TASK( uVar3 );
    if (( /* ISPEDVALID */ sub_53720( g_U3362, 0 )) == 1)
    {
        TASK_PERFORM_SEQUENCE( g_U3362, uVar2 );
    }
    if (( /* ISPEDVALID */ sub_53720( g_U3363, 0 )) == 1)
    {
        TASK_PERFORM_SEQUENCE( g_U3363, uVar3 );
    }
    CLEAR_SEQUENCE_TASK( uVar2 );
    CLEAR_SEQUENCE_TASK( uVar3 );
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_TRUCK_ATTACK end", 0 );
    return;
}

/* P_TD_SETUP_REBEL_HELI */ void sub_73587()
{
    float fVar2;

     /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_SETUP_REBEL_HELI start", 0 );
    g_U3359 =  /* CREATEVEHICLE */ sub_45282( g_U1534, l_U388, l_U391, 0, 0, 0 );
    if (( /* ISVEHICLEVALID */ sub_45840( ref g_U3359, 0 )) == 1)
    {
        SET_VEHICLE_ENGINE_ON( g_U3359, 1, 1 );
        SET_HELI_BLADES_FULL_SPEED( g_U3359 );
        SET_VEHICLE_INTERIORLIGHT( g_U3359, 1 );
        SET_VEHICLE_LIGHTS( g_U3359, 2 );
        SET_VEHICLE_CAN_BE_DAMAGED( g_U3359, 0 );
        SET_VEHICLE_PROOFS( g_U3359, 1, 1, 1, 1, 1 );
        SET_VEHICLE_COLLISION( g_U3359, 0 );
    }
    g_U3364 =  /* CREATEPEDINVEHICLE */ sub_52770( ref l_U375, g_U3359, -1, 0, 0 );
    if (NOT (IS_PED_DEAD( g_U3364 )))
    {
        SET_PED_PROP_INDEX( g_U3364, 0, 0, 0, 255 );
        SET_PED_CAN_BE_TARGETTED( g_U3364, 0 );
        SET_PED_INVINCIBLE( g_U3364, 1 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U3364, 1 );
    }
    fVar2 = 17500.00000000;
    if (( /* ISVEHICLEVALID */ sub_45840( ref g_U3359, 0 )) == 1)
    {
         /* P_START_VEHICLE_PLAYBACK */ sub_70202( g_U3359, 10, 1.10000000, fVar2, 0 );
         /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_SETUP_REBEL_HELI Play Audio stream in ", 0 );
         /* P_STREAMREQ_SCRIPT_STREAM_PLAY_FROM_VEHICLE */ sub_74030( g_U3359, "S_PANA_HELI_ARRIVE", ref g_U2986 );
    }
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_SETUP_REBEL_HELI end", 0 );
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_PLAY_FROM_VEHICLE */ void sub_74030(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_5439( uParam1, uParam2 ))
    {
        iVar5 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_5648( uParam1, uParam2 );
        if (NOT (iVar5 == -1))
        {
            if (NOT (IS_VEHICLE_DEAD( uParam0 )))
            {
                DISPLAYF( "[CCB]### Playing the SCRIPT_STREAM from vehicle: {} ###", 1, 1281, ref (uParam2^)[iVar5]._fU0 );
                PLAY_SCRIPT_STREAM_FROM_VEHICLE( uParam0, iVar5 );
            }
            else
            {
                DISPLAYF( "The ped is NOT valid!!!", 0 );
            }
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam1 );
            SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam1 );
        SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_74720(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_2690(  /* PLAYER_PED_ID */ sub_1100(), uParam0 );
}

/* P_TD_HELI_LANDED */ void sub_74841()
{
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_HELI_LANDED start", 0 );
    if (NOT (IS_VEHICLE_DEAD( g_U3359 )))
    {
        SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE( g_U3359 );
        FREEZE_VEHICLE_POSITION( g_U3359, 1 );
        SET_VEHICLE_COORDS( g_U3359, l_U426 );
        SET_VEHICLE_HEADING( g_U3359, l_U429 );
         /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_SETUP_REBEL_HELI Play Audio stream Loop", 0 );
         /* P_STREAMREQ_SCRIPT_STREAM_PLAY_FROM_VEHICLE */ sub_74030( g_U3359, "S_PANA_HELI_LOOP", ref g_U2986 );
    }
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_HELI_LANDED end", 0 );
    return;
}

/* P_TD_HIDE_HELI_REBELS */ void sub_75430()
{
    int I;

    for ( I = 0; I < g_U3366; I++ )
    {
        if (NOT (IS_PED_DEAD( g_U3366[I] )))
        {
            if (IS_PED_VISIBLE( g_U3366[I] ))
            {
                SET_PED_VISIBLE( g_U3366[I], 0 );
            }
        }
    }
    return;
}

/* P_TD_HELI_REBELS_EXIT */ void sub_75601()
{
    int I;

     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_HELI_REBELS_EXIT start", 0 );
     /* P_SETUP_AI_GROUP */ sub_66584( ref l_U510, 1.00000000, 0 );
     /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_65477( ref g_U3366, "piGBL_TOP_DECK_HELI_REBELS_" );
    for ( I = 0; I <= 5; I++ )
    {
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_66998( g_U3366[I], ref l_U510 );
        SET_PED_AI_TEMPLATE( g_U3366[I], ref g_U1504 );
         /* P_ACTIVATEPED */ sub_71007( g_U3366[I] );
        SET_PED_PATH_VAULTING_USAGE( g_U3366[I], 1, 1, 1 );
        SET_PED_PATH_CAN_USE_CLIMBOVERS( g_U3366[I], 0 );
        SET_PED_ALERTNESS( g_U3366[I], 3 );
    }
     /* F_GIVEPEDWEAPON */ sub_12172( g_U3366[0], 1308526797, 25000, 0, 0 );
    if (NOT (IS_PED_DEAD( g_U3366[0] )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U3366[0], 1 );
        SET_PED_COMBAT_RANGE_MIN( g_U3366[0], 3.50000000 );
         /* P_TETHERPED */ sub_54039( ref l_U517, g_U3366[0], 1 );
    }
     /* F_GIVEPEDWEAPON */ sub_12172( g_U3366[2], -184942895, 25000, 0, 0 );
    if (NOT (IS_PED_DEAD( g_U3366[2] )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U3366[2], 1 );
        SET_PED_COMBAT_RANGE_MIN( g_U3366[2], 3.50000000 );
         /* P_TETHERPED */ sub_54039( ref l_U517, g_U3366[2], 1 );
    }
     /* F_GIVEPEDWEAPON */ sub_12172( g_U3366[1], 1308526797, 25000, 0, 0 );
    if (NOT (IS_PED_DEAD( g_U3366[1] )))
    {
        TASK_COMBAT_SNAP_TO_COVER_AMBUSH( g_U3366[1], "GenCover", "981380D9_B03AC849_Popover1", 3, 3, 0 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U3366[1], 1 );
         /* P_TETHERPED */ sub_54039( ref l_U516, g_U3366[1], 1 );
    }
     /* F_GIVEPEDWEAPON */ sub_12172( g_U3366[3], 1308526797, 25000, 0, 0 );
    if (NOT (IS_PED_DEAD( g_U3366[3] )))
    {
        TASK_COMBAT_SNAP_TO_COVER_AMBUSH( g_U3366[3], "GenCover", "981380D9_D18C3360_Popover1", 3, 2, 0 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U3366[3], 1 );
         /* P_TETHERPED */ sub_54039( ref l_U516, g_U3366[3], 1 );
    }
     /* F_GIVEPEDWEAPON */ sub_12172( g_U3366[4], -184942895, 25000, 0, 0 );
    if (NOT (IS_PED_DEAD( g_U3366[4] )))
    {
        TASK_COMBAT_SNAP_TO_COVER( g_U3366[4], "GenCover", "981380D9_28CF162E_Popover1", 0 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U3366[4], 1 );
        SET_PED_COMBAT_RANGE_MIN( g_U3366[4], 7.00000000 );
         /* P_TETHERPED */ sub_54039( ref l_U516, g_U3366[4], 1 );
    }
     /* F_GIVEPEDWEAPON */ sub_12172( g_U3366[5], 1308526797, 25000, 0, 0 );
    if (NOT (IS_PED_DEAD( g_U3366[5] )))
    {
        TASK_COMBAT_SNAP_TO_COVER( g_U3366[5], "GenCover", "981380D9_7539FBC9_Popover1", 0 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U3366[5], 1 );
        SET_PED_COMBAT_RANGE_MIN( g_U3366[5], 9.00000000 );
         /* P_TETHERPED */ sub_54039( ref l_U516, g_U3366[5], 1 );
    }
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_HELI_REBELS_EXIT end", 0 );
    return;
}

/* P_TD_HELICOPTER_LEAVE_SPEECH */ void sub_76817()
{
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_HELICOPTER_LEAVE_SPEECH: START", 0 );
     /* KILL_SPEECH */ sub_76912( ref g_U1246, 1 );
    if (( /* ISPEDVALID */ sub_53720( g_U3366[2], 0 )) AND ( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 )))
    {
         /* RESET_SCRIPT_SPEECH_STRUCT */ sub_62514( ref g_U1246 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_62623( 0,  /* PLAYER_PED_ID */ sub_1100(), "MAX", ref g_U1246, 2, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_62623( 1, g_U3366[2], "M11_REBL_33_Avg", ref g_U1246, 2, 0 );
    }
     /* PLAY_SINGLE_SPEECH */ sub_62876( "SPAN_VIG10A", ref g_U1246, 8, 1 );
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_HELICOPTER_LEAVE_SPEECH: END", 0 );
    return;
}

/* KILL_SPEECH */ void sub_76912(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_76940( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_76940(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* P_TD_HELICOPTER_FLY_AWAY */ void sub_77415()
{
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_HELICOPTER_FLY_AWAY: START", 0 );
    if (NOT (IS_VEHICLE_DEAD( g_U3359 )))
    {
        if (IS_PLAYBACK_GOING_ON_FOR_VEHICLE( g_U3359 ))
        {
            STOP_PLAYBACK_RECORDED_VEHICLE( g_U3359 );
        }
         /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_HELICOPTER_FLY_AWAY Play Audio stream out ", 0 );
         /* P_STREAMREQ_SCRIPT_STREAM_PLAY_FROM_VEHICLE */ sub_74030( g_U3359, "S_PANA_HELI_DEPART", ref g_U2986 );
        FREEZE_VEHICLE_POSITION( g_U3359, 0 );
        START_PLAYBACK_RECORDED_VEHICLE( g_U3359, 11 );
        SET_PLAYBACK_SPEED( g_U3359, 1.00000000 );
        SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE( g_U3359, 2500.00000000 );
        SET_VEHICLE_CAN_BE_DAMAGED( g_U3359, 0 );
    }
     /* WRITESCRIPTLOG */ sub_553( "CR", "Playing audio music one shot PANAMA_OS_6", 0 );
    AUDIO_MUSIC_PLAY_ONESHOT();
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_HELICOPTER_FLY_AWAY: END", 0 );
    return;
}

/* F_ISPLAYERINTRIGGERREGIONFIRSTTIME */ void sub_77852(int iParam0, unknown uParam1)
{
    if (iParam0->_fU548)
    {
        return 0;
    }
    else
    {
        iParam0->_fU548 =  /* F_ISPLAYERINTRIGGERREGION */ sub_77924( iParam0, uParam1 );
    }
    return iParam0->_fU548;
}

/* F_ISPLAYERINTRIGGERREGION */ void sub_77924(int iParam0, unknown uParam1)
{
    int Result;
    int I;
    int J;

    Result = 0;
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            if ( /* F_ISPLAYERINTRIGGERBOX */ sub_74720( iParam0->_fU0[I] ))
            {
                Result = 1;
            }
        }
    }
    if ((uParam1) AND (Result))
    {
        for ( J = 0; J < iParam0->_fU508; J++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[J]._fU0, 0 );
        }
    }
    iParam0->_fU548 = 1;
    return Result;
}

/* P_TD_HELI_REBELS_COMBAT_PLAYER */ void sub_78137()
{
    unknown uVar2;
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_HELI_REBELS_COMBAT_PLAYER start", 0 );
    OPEN_SEQUENCE_TASK( ref uVar2 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
    TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, 28.22722000, 2.28717900, 8.28317600,  /* PLAYER_PED_ID */ sub_1100(), 0, 8.50000000, -1.00000000, -1082130432, 3 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
    CLOSE_SEQUENCE_TASK( uVar2 );
    if (NOT (IS_PED_DEAD( g_U3366[0] )))
    {
        TASK_PERFORM_SEQUENCE( g_U3366[0], uVar2 );
    }
    OPEN_SEQUENCE_TASK( ref uVar3 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
    TASK_GO_STRAIGHT_TO_COORD( 0, 8.84000000, 4.13000000, 8.19000000, 3, 20000 );
    TASK_PAUSE( 0, 4000 );
    TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, 27.84641000, 5.45119200, 8.28698700,  /* PLAYER_PED_ID */ sub_1100(), 0, 8.50000000, -1.00000000, -1082130432, 3 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1100() );
    CLOSE_SEQUENCE_TASK( uVar3 );
    if (NOT (IS_PED_DEAD( g_U3366[2] )))
    {
        TASK_PERFORM_SEQUENCE( g_U3366[2], uVar3 );
    }
    if (NOT (IS_PED_DEAD( g_U3366[1] )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U3366[1], 0 );
    }
    if (NOT (IS_PED_DEAD( g_U3366[3] )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U3366[3], 0 );
    }
    if (NOT (IS_PED_DEAD( g_U3366[4] )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U3366[4], 0 );
    }
    if (NOT (IS_PED_DEAD( g_U3366[5] )))
    {
        TASK_COMBAT_PED( g_U3366[5],  /* PLAYER_PED_ID */ sub_1100() );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U3366[5], 0 );
    }
    CLEAR_SEQUENCE_TASK( uVar2 );
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_TD_HELI_REBELS_COMBAT_PLAYER end", 0 );
    return;
}

/* F_TD_CAN_HELI_REBEL_END_AMBUSH */ int sub_78927()
{
    int I;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
    {
        for ( I = 0; I <= 5; I++ )
        {
            if (NOT (IS_PED_DEAD( g_U3366[I] )))
            {
                if (NOT l_U797._fU20)
                {
                    if (IS_PED_SHOOTING( g_U3366[I] ))
                    {
                         /* STARTTIMER */ sub_1996( ref l_U797 );
                    }
                }
                if (IS_PED_DEAD( g_U3366[I] ))
                {
                    return 1;
                }
                else if (HAS_PED_BEEN_DAMAGED_BY_PED( g_U3366[I],  /* PLAYER_PED_ID */ sub_1100(), 0 ))
                {
                    return 1;
                }
            }
        }
    }
    if ( /* ISTIMERDONE */ sub_3851( ref l_U797 ))
    {
        return 1;
    }
    return 0;
}

/* P_TD_HELI_REBELS_END_AMBUSH */ void sub_79169()
{
    int I;

     /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_HELI_REBELS_END_AMBUSH start", 0 );
    for ( I = 0; I <= 5; I++ )
    {
        if (NOT (IS_PED_DEAD( g_U3366[I] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( g_U3366[I], 0 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U3366[I], 0 );
        }
    }
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_TD_HELI_REBELS_END_AMBUSH end", 0 );
    return;
}

/* F_GBL_HELIPAD_DOOR_IS_OPEN */ int sub_79417()
{
    if (DOES_OBJECT_EXIST( g_U3382 ))
    {
        if ((GET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim" )) == 1.00000000)
        {
            return 1;
        }
    }
    return 0;
}

/* F_GBL_HELIPAD_DOOR_IS_VISIBLE */ int sub_79543()
{
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_74720( g_U4203 ))
    {
        if (IS_SPHERE_VISIBLE( g_U4237, 0.20000000, 0 ))
        {
            return 1;
        }
    }
    return 0;
}

/* P_GBL_HELIPAD_DOOR_ANIMATE */ void sub_79658(int iParam0, int iParam1)
{
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_GBL_HELIPAD_DOOR_ANIMATE - START", 0 );
    if ((DOES_OBJECT_EXIST( g_U3382 )) == 1)
    {
         /* P_SAFE_STOP_SOUND */ sub_56835( g_U4235, 0 );
         /* P_SAFE_RELEASE_SOUND_ID */ sub_57018( ref g_U4235 );
         /* P_SAFE_STOP_SOUND */ sub_56835( g_U4236, 0 );
         /* P_SAFE_RELEASE_SOUND_ID */ sub_57018( ref g_U4236 );
        if (iParam0 == 1)
        {
             /* WRITE_STRING */ sub_11781( "OPENING DOOR..." );
            PLAY_OBJECT_ANIM( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_SPEED( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.65000000 );
            if (iParam1 == 1)
            {
                SET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 1.00000000 );
            }
            else
            {
                SET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.00000000 );
                g_U4235 = GET_SOUND_ID();
                PLAY_SOUND_FROM_OBJECT( g_U4235, "S_PANA_HELICOPTER_DOOR_OPEN", g_U3382 );
            }
        }
        else
        {
             /* WRITE_STRING */ sub_11781( "CLOSING DOOR..." );
            PLAY_OBJECT_ANIM( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.00000000, 0, 1 );
            SET_OBJECT_ANIM_SPEED( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", -0.65000000 );
            if (iParam1 == 1)
            {
                SET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 0.00000000 );
            }
            else
            {
                SET_OBJECT_ANIM_CURRENT_TIME( g_U3382, "P_PA_HelDor_Aa_H", "pa_anim", 1.00000000 );
                g_U4235 = GET_SOUND_ID();
                PLAY_SOUND_FROM_OBJECT( g_U4235, "S_PANA_HELICOPTER_DOOR_OPEN", g_U3382 );
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_553( "MF", "P_GBL_HELIPAD_DOOR_ANIMATE - END", 0 );
    return;
}

/* P_RELEASE_TD_ASSETS */ void sub_80515()
{
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_RELEASE_TEMPLATE_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_80600( ref l_U176, ref g_U1588 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_81148( ref l_U187, ref g_U1829 );
     /* P_STREAMREQ_VEHICLE_RECORDING_REMOVE */ sub_81572( 10, ref g_U2756 );
     /* P_STREAMREQ_VEHICLE_RECORDING_REMOVE */ sub_81572( 11, ref g_U2756 );
     /* P_STREAMREQ_VEHICLE_RECORDING_REMOVE */ sub_81572( 8, ref g_U2756 );
     /* P_STREAMREQ_VEHICLE_RECORDING_REMOVE */ sub_81572( 303, ref g_U2756 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_81958( "veh@truck", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_81958( "veh@std", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_81958( "veh@helicopter", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_81958( "DAM_DEAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_81958( "LEVEL_S_PAN_CP_05", ref g_U1975 );
     /* P_STREAMREQ_ACTION_TREE_REMOVE */ sub_82419( "Vehicle/Vehicle_Car.act", ref g_U2817 );
     /* P_STREAMREQ_ACTION_TREE_REMOVE */ sub_82419( "Vehicle/Vehicle_heli.act", ref g_U2817 );
    RESET_PED_MODEL_LOD_DISTANCES( g_U1519 );
     /* WRITESCRIPTLOG */ sub_553( "GA", "P_RELEASE_TEMPLATE_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_80600(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_80673( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_80673(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6325( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_81148(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_81222( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_81222(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6325( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_VEHICLE_RECORDING_REMOVE */ void sub_81572(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6325( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a VEHICLE_RECORDING asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_81958(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6325( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ACTION_TREE_REMOVE */ void sub_82419(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6325( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ACTION_TREE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_START_CHECKPOINT_THREAD */ void sub_82866(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* CUTSYS_DEFAULT_PRECUTSCENESETUP */ int sub_83354()
{
    return 1;
}

/* P_TD_MID02B_REGISTER */ void sub_83407()
{
    if (((GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1100(), 2 )) != nil) || ((GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1100(), 1, 0 )) != nil))
    {
         /* P_STREAMREQ_SCRIPT_STREAM_PLAY_FROM_PED */ sub_72444( g_U3362, "Mid_02B_Panama_CENTER_MG", ref g_U2986 );
    }
    if (( /* ISPEDVALID */ sub_53720(  /* PLAYER_PED_ID */ sub_1100(), 0 )) == 1)
    {
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_1100(), 18.49000000, 4.46000000, 5.25000000, 186.00000000 );
        ISEQ_REGISTER_ENTITY( -1244939386, "Player",  /* PLAYER_PED_ID */ sub_1100(), 0 );
        CUTSCENE_REGISTER_ISEQ( -1244939386 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE(  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_83610(), "W_PI_Glk18_Aa_H", 0 );
        if (GET_DOES_WEAPON_EXIST(  /* F_GET_TWO_HANDED_WEAPON_FROM_PLAYER */ sub_84085() ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE(  /* F_GET_TWO_HANDED_WEAPON_FROM_PLAYER */ sub_84085(), "W_AR_AK47_Aa_H", 0 );
        }
        else if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1100(), 1, 0 ) ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1100(), 1, 0 ), "W_AR_AK47_Aa_H", 0 );
        }
        else
        {
            CUTSCENE_OBJECT_OVERRIDE_VISIBILITY( "W_AR_AK47_Aa_H" );
        }
        SET_PLAYER_THREAT_REACTION(  /* PLAYER_PED_ID */ sub_1100(), 0 );
        SET_FORCED_AIM_INTENTION_DIRECTION( -0.03642400, -0.99862600, -0.03767800 );
        SET_FORCED_FORWARD_DIRECTION( 0.10452800, -0.99452200, 0.00000000 );
    }
    return;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_83610()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1100(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_83714( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1100(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1100(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1100(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_83714(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* F_GET_TWO_HANDED_WEAPON_FROM_PLAYER */ int sub_84085()
{
    unknown Result;
    unknown uVar3;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1100(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_TWO_HANDED */ sub_84186( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1100(), 2 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
    }
    return 0;
}

/* IS_WEAPON_TWO_HANDED */ int sub_84186(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == -2075384407) || ((iVar3 == 10648147) || ((iVar3 == 1224272620) || ((iVar3 == 1478009203) || ((iVar3 == 1964270085) || ((iVar3 == -110877124) || ((iVar3 == 427207702) || ((iVar3 == 319712764) || ((iVar3 == 514118749) || ((iVar3 == -184942895) || ((iVar3 == -168327769) || ((iVar3 == 434544317) || ((iVar3 == -1659006841) || ((iVar3 == 930042831) || ((iVar3 == 1001413062) || ((iVar3 == 377623895) || ((iVar3 == -1312131151) || ((iVar3 == -1787162676) || ((iVar3 == 724901397) || ((iVar3 == 57534114) || ((iVar3 == 840671040) || ((iVar3 == 1308526797) || ((iVar3 == -1074756423) || ((iVar3 == 1992962408) || (iVar3 == -1013714740)))))))))))))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* P_TD_MID02B_HANDLE */ void sub_84755()
{
    if (l_U888._fU52)
    {
         /* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ sub_84801( 1 );
    }
    return;
}

/* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ void sub_84801(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )) == 0)
    {
        iVar3 = 0;
        uVar4 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1100(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 0)
        {
            iVar3 = 1;
        }
        if ((( /* IS_WEAPON_SINGLE_HANDED */ sub_83714( uVar4 )) == 0) AND ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1))
        {
            iVar3 = 1;
        }
        if (iVar3 == 1)
        {
            uVar5 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_83610();
            if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_1100(), uVar5, 0, uParam0 );
            }
        }
    }
    return;
}

/* CUTSYS_DEFAULT_POSTCUTSCENE */ int sub_85005()
{
    return 1;
}

/* P_TD_MID02B_BLENDOUT_PREPARE */ void sub_85054()
{
     /* WRITESCRIPTLOG */ sub_553( "CO", "P_TD_MID02B_BLENDOUT_PREPARE", 0 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( -8.60000000, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( -7.03000000, 1065353216, 0 );
    return;
}

/* P_TD_MID02B_BLENDOUT_HANDLE */ int sub_85183()
{
    if ((ISEQ_QUERY_ENTITY_STATE( -1244939386, "player", 6 )) || (ISEQ_QUERY_ENTITY_STATE( -1244939386, "player", 5 )))
    {
        return 1;
    }
    return 0;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_85290(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_553( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_85514( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 85411, 85461, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_85411()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_85461()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_85514(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_HANDLECUTSCENE */ void sub_85824(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_553( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_553( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_553( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_553( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_553( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_553( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_86626( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_553( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_1737( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_1737( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_553( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_87424( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_1737( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_2307( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_2307( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* LOADSEAMLESSCUTSCENE */ void sub_86626(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_87424(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1100() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1100(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1100(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1100(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1100(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1100(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

