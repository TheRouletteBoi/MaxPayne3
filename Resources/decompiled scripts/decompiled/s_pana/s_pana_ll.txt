void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U40 = 0;
    l_U41 = 0;
    l_U42 = 1500;
    l_U52 = {0, 0, 0};
    StrCopy( ref l_U55, "DUMMY", 32 );
    l_U63 = 1;
    l_U68 = 0;
    l_U69 = 0;
    l_U70 = 0;
    l_U73 = 0;
    l_U136 = -1;
    l_U137 = {64536, 64536, 64536};
    l_U185 = 0;
    l_U187 = 0;
    l_U216 = {-43.15000000, -2.60000000, 0.28000000};
    l_U230 = -1;
    l_U783 = {-38.45000000, 0.00000000, 1.72200000};
    l_U786 = -85.00000000;
    l_U787 = 5000;
    l_U927 = {-47.40000000, 9.20000000, 1.10000000};
    l_U930 = 90.00000000;
    l_U931 = 6000;
    l_U1079 = 0;
     /* WRITESCRIPTLOG */ sub_487( "SP", "Script s_pana_LL.sc is starting up...", 0 );
     /* P_LL_POPULATE_VARIABLE_ARRAYS */ sub_605();
    l_U185 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_861();
        if (l_U187 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_10708();
        }
         /* P_LL_DEBUG_TUNING_WIDGET */ sub_76316();
        WAIT( 0 );
    }
     /* P_CLEANUP_LL */ sub_3631();
     /* P_RELEASE_LL_ASSETS */ sub_76821();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_pana_LL" );
     /* WRITESCRIPTLOG */ sub_487( "SP", "Script s_pana_LL.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_487(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_LL_POPULATE_VARIABLE_ARRAYS */ void sub_605()
{
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_LL_POPULATE_VARIABLE_ARRAYS start", 0 );
    l_U176[0] = g_U1514;
    l_U176[1] = g_U1537;
    l_U176[2] = g_U827;
    l_U176[3] = -1409914275;
    l_U181[0] = -1464892298;
    l_U181[1] = -612753081;
    l_U181[2] = -1404433099;
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_LL_POPULATE_VARIABLE_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_861()
{
    if ((g_U834 == 0) || (g_U834 == 1))
    {
        switch (l_U187)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1071()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
            {
                l_U187 = 1;
                 /* WRITESCRIPTLOG */ sub_487( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_1589())
            {
                if ((g_U835[2]._fU40 != 4) AND (g_U835[2]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_487( "GA", "Shutting down script for Visitor Center.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_1732( ref g_U835[2] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U835[2]._fU32 );
                }
                l_U187 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_1825( 0 )) == 1)
            {
                if ((g_U835[2]._fU40 != 4) AND (g_U835[2]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_487( "GA", "Shutting down script for Visitor Center.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_1732( ref g_U835[2] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U835[2]._fU32 );
                }
                l_U187 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
            {
                l_U187 = 3;
                 /* WRITESCRIPTLOG */ sub_487( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_487( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1008() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1008(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_970() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_970(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
             /* P_CLEANUP_LL */ sub_3631();
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "Deck1", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "Deck1", 0 ), GET_HASH_KEY( ref g_U3135 ) );
            l_U187 = 4;
             /* WRITESCRIPTLOG */ sub_487( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_487( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U140._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_6032( ref l_U140,  /* PLAYER_PED_ID */ sub_970() );
            }
            l_U187 = 5;
             /* WRITESCRIPTLOG */ sub_487( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_487( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U185 = 1;
            l_U187 = 0;
             /* WRITESCRIPTLOG */ sub_487( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_970()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1008() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1008()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1071()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_970(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1008(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1008(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_970() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_970(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_1589()
{
    return g_U648;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_1732(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* F_CHECK_QUIT_RETRY */ int sub_1825(int iParam0)
{
    iParam0 = 1;
    switch (l_U41)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_1907( ref l_U43 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
            {
                l_U42 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_2041( ref l_U43, l_U42, 1, 1 );
             /* STARTTIMER */ sub_2191( ref l_U43 );
        }
        if ( /* ISTIMERDONE */ sub_2324( ref l_U43 ))
        {
             /* WRITESCRIPTLOG */ sub_487( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1008() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1008(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U41 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U41 = 2;
            }
            else
            {
                l_U41 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_487( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_2825();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_487( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_2825();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_1907(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_2041(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2191(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2324(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_2825()
{
     /* WRITESCRIPTLOG */ sub_487( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_2900( ref l_U43 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1008() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1008(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U40 = 0;
    l_U40 = l_U40;
    l_U41 = 0;
    return;
}

/* RESETTIMER */ void sub_2900(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_CLEANUP_LL */ void sub_3631()
{
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_CLEANUP_LL start", 0 );
    ISEQ_TERMINATE( -929423363 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3709( -929423363, ref g_U1878 );
    ISEQ_TERMINATE( 945770955 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3709( 945770955, ref g_U1878 );
    ISEQ_TERMINATE( 995399098 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3709( 995399098, ref g_U1878 );
     /* P_SAFE_STOP_SOUND */ sub_4830( l_U230, 0 );
     /* P_SAFE_RELEASE_SOUND_ID */ sub_5013( ref l_U230 );
    if ((CUTSCENE_NAMED_IS_LOADING( "MID_00_PANAMA_SH01" )) || (CUTSCENE_IS_LOADED( "MID_00_PANAMA_SH01" )))
    {
        CLEAR_NAMED_CUTSCENE( "MID_00_PANAMA_SH01" );
    }
     /* CLEANPEDARRAY */ sub_5311( ref l_U388 );
     /* CLEANPEDARRAY */ sub_5311( ref l_U455 );
     /* CLEANPED */ sub_5361( l_U529 );
     /* CLEANPED */ sub_5361( l_U543 );
     /* CLEANPED */ sub_5361( l_U557 );
     /* CLEANOBJECT */ sub_5509( l_U215 );
     /* CLEANPLACEMENT */ sub_5568( l_U333 );
     /* CLEANPLACEMENT */ sub_5568( l_U334 );
     /* CLEANPLACEMENT */ sub_5568( g_U719._fU0 );
     /* P_STOP_SP_CHALLENGES */ sub_5650();
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_CLEANUP_LL end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_3709(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3847( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_3847(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_SAFE_STOP_SOUND */ void sub_4830(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
         /* WRITESCRIPTLOG */ sub_487( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_487( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

/* P_SAFE_RELEASE_SOUND_ID */ void sub_5013(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
         /* WRITESCRIPTLOG */ sub_487( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_487( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

/* CLEANPEDARRAY */ void sub_5311(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_5361( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_5361(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANOBJECT */ void sub_5509(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_5568(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_5650()
{
     /* WRITESCRIPTLOG */ sub_487( "CCB", "P_STOP_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_487( "CCB", "Stopping the Panama_Lower_Level context...", 0 );
    END_CONTEXT( "Panama_Lower_Level" );
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_6032(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_487( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_6251( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_7415( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7729( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8208( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7729( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8208( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7729( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8208( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8524( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8208( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8524( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8208( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_9096( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_9298( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_970(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_487( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_6251(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6313( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_6313(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_7415(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_7729(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_8133( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_8133(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_8208(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_8524(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_8133( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_9096(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_9298(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6313( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_9396( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_9396(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_10708()
{
    int iVar2;

    iVar2 = l_U185;
     /* P_HANDLE_SP_CHALLENGES */ sub_10743();
    switch (l_U185)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_487( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_11446();
         /* P_SET_STATIC_DATA */ sub_11695();
         /* P_GLOBAL_CREATE_ALL_DOORS */ sub_16226();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
         /* P_INITIALIZE_SP_CHALLENGES */ sub_20979();
         /* P_START_SP_CHALLENGES */ sub_21558();
        l_U185 = 2;
         /* WRITESCRIPTLOG */ sub_487( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_487( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_LL_PERSISTENT_ASSETS */ sub_21909();
         /* P_REQUEST_LL_NONPERSISTENT_ASSETS */ sub_31588();
        l_U185 = 3;
         /* WRITESCRIPTLOG */ sub_487( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_36630( ref g_U3026 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_36216( ref g_U1878 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_35825( ref g_U1975 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_35423( ref g_U1829 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_35026( ref g_U1588 ))))))
        {
            if (NOT l_U140._fU0)
            {
                l_U185 = 4;
                 /* WRITESCRIPTLOG */ sub_487( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U185 = 6;
                 /* WRITESCRIPTLOG */ sub_487( "SP", "eCheckpointState = CP_LL_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_487( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
        {
            FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_970(), 0 );
        }
        SET_PAYNEKILLER_AMT( 0 );
        if (( /* HAS_SAVEFILE_LOADED */ sub_37253( ref l_U140 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_8524(  /* PLAYER_PED_ID */ sub_970(), -1464892298, 200, 0, 0 );
            l_U185 = 5;
             /* WRITESCRIPTLOG */ sub_487( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U185 = 6;
             /* WRITESCRIPTLOG */ sub_487( "SP", "eCheckpointState = CP_LL_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
        {
            if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_970(), 0, 0 ) ))
            {
                l_U185 = 6;
                 /* WRITESCRIPTLOG */ sub_487( "GA", "eCheckpointState = CP_LL_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if (l_U186)
        {
             /* P_LL_RADIO_STATIC */ sub_37739();
             /* P_LL_CREATE_PLACEMENTS */ sub_37909();
        }
        if ( /* F_HANDLE_PED_ARRAY_SPAWN */ sub_39170( ref l_U388, ref l_U392, -1, 0, 1, 1, 1 ))
        {
            if ( /* F_HANDLE_PED_ARRAY_SPAWN */ sub_39170( ref l_U455, ref l_U459, -1, 0, 1, 0, 1 ))
            {
                if (g_U834 == 0)
                {
                    if (CUTSCENE_IS_LOADED( "11_01_PANAMA_CONCAT" ))
                    {
                        l_U185 = 7;
                         /* WRITESCRIPTLOG */ sub_487( "GA", "eCheckpointState = CP_HANDLE_CUTSCENES", 0 );
                    }
                    else if (CUTSCENE_NAMED_IS_LOADING( "11_01_PANAMA_CONCAT" ))
                    {
                         /* WRITESCRIPTLOG */ sub_487( "GA", "Waiting for cutscene 11_01_PANAMA_CONCAT to load.", 0 );
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_487( "GA", "Requesting cutscene 11_01_PANAMA_CONCAT to load.", 0 );
                        PRE_STREAM_SEAMLESS_CUTSCENE( "11_01_PANAMA_CONCAT" );
                    }
                }
                else
                {
                    l_U185 = 7;
                     /* WRITESCRIPTLOG */ sub_487( "GA", "eCheckpointState = CP_HANDLE_CUTSCENES", 0 );
                }
            }
        }
        break;
        case 7:
        if (l_U186)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_48662( ref l_U188, "11_01_PANAMA_CONCAT", 41491, 41544, 42149, 43116, 43153, 46099, 0, 0 );
            if (g_U834 == 0)
            {
                 /* P_LL_CREATE_ALARM_CLOCK_PRE_CUTSCENE */ sub_49196();
                 /* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ sub_49434( ref l_U188, "Deck1", ref g_U3135 );
                l_U188._fU4 = 1;
            }
            else
            {
                l_U188._fU4 = 7;
            }
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_49556( ref l_U188 ))
        {
            if (NOT l_U140._fU0)
            {
                g_U834 = 1;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_51826( ref l_U140, g_U834,  /* PLAYER_PED_ID */ sub_970(), g_U980[1], g_U1086[1], g_U1158[1], g_U1122[1], 1 );
            }
            l_U185 = 8;
             /* WRITESCRIPTLOG */ sub_487( "GA", "eCheckpointState = CP_LL_GAMEPLAY_REBELS_SEARCHING", 0 );
        }
        break;
        case 8:
        if (l_U186)
        {
             /* P_LL_KITCHEN_REBELS_SETUP */ sub_56468();
             /* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ sub_57183();
        }
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_57364( ref l_U388, 65516, 1, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_57364( ref l_U455, 65516, 1, 1 );
         /* P_LL_HANDLE_AUDIO_CHANGE_MOOD_DURING_GAMEPLAY */ sub_57578();
         /* P_HANDLE_PASSOS_BED_POI */ sub_58015();
         /* P_HANDLE_NOTE_POI */ sub_61523();
         /* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ sub_61819();
        if (( /* ISTIMERDONE */ sub_2324( ref l_U231 )) == 1)
        {
             /* P_LL_BUNK_REBEL_ROOM_SEARCH_SPEECH_1 */ sub_46462();
             /* STARTTIMER */ sub_2191( ref l_U240 );
        }
        if (( /* ISTIMERDONE */ sub_2324( ref l_U240 )) == 1)
        {
             /* P_LL_BUNK_REBEL_ROOM_SEARCH_SPEECH_2 */ sub_48236();
        }
        if (NOT l_U454)
        {
            if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_62423( l_U433 )))
            {
                l_U454 = 1;
                 /* MAL_WRITESCRIPTLOG */ sub_62529( "switching bunk rebels to AI walking" );
                 /* MAL_SETACTINT */ sub_62652( l_U388[0], 47, 1000 );
                 /* MAL_SETACTINT */ sub_62652( l_U388[1], 47, 1000 );
                if (NOT (IS_PED_DEAD( l_U388[1] )))
                {
                    SET_PED_DEFAULT_AIM_AT_PED( l_U388[1],  /* PLAYER_PED_ID */ sub_970() );
                }
                 /* MAL_GOTOCOORDVIANAVMESHACHIEVEHEADING */ sub_62815( ref l_U388[1], -46.13449000, -1.43742000, -0.64778000, 24, 0, 2, 0, 1085905306 );
                 /* MAL_GOTOCOORDVIANAVMESH */ sub_63023( ref l_U388[0], -46.93261000, -1.78720400, -0.66036900, 0, 2, 0 );
            }
        }
        if (NOT l_U432)
        {
            if (((NOT l_U454) AND ( /* MAL_ISACTINTCOMPLETED */ sub_63197( ref l_U388[1], 47, 1 ))) || ((NOT l_U454) AND ( /* MAL_ISACTINTCOMPLETED */ sub_63197( ref l_U388[0], 47, 1 ))))
            {
                 /* P_LL_BUNK_REBELS_SPOT_PLAYER */ sub_63439( 0 );
                l_U432 = 1;
            }
            if ( /* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ sub_58121( ref l_U388,  /* PLAYER_PED_ID */ sub_970(), 0, 1, 1, 1, 1 ))
            {
                 /* P_LL_BUNK_REBELS_SPOT_PLAYER */ sub_63439( 1 );
                l_U432 = 1;
            }
        }
        if (l_U432)
        {
             /* P_LL_BUNK_HALLWAY_ENTRANCE_ATTACK */ sub_64496();
             /* P_LL_BUNK_REBELS_SPOT_PLAYER_DIALOGUE */ sub_64823();
             /* STARTTIMER */ sub_2191( ref l_U499 );
            l_U185 = 9;
             /* WRITESCRIPTLOG */ sub_487( "GA", "eCheckpointState = CP_LL_GAMEPLAY_REBELS_COMBAT", 0 );
        }
        break;
        case 9:
        if (l_U186)
        {
             /* P_LL_SETUP_AGRESSIVE_GROUP_ADVANCE */ sub_65207();
             /* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ sub_57183();
        }
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_57364( ref l_U388, 65516, 1, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_57364( ref l_U455, 65516, 1, 1 );
         /* P_PED_Z_SAFETY_CHECK */ sub_57430( l_U529, 65516, 1, 1 );
         /* P_PED_Z_SAFETY_CHECK */ sub_57430( l_U543, 65516, 1, 1 );
         /* P_PED_Z_SAFETY_CHECK */ sub_57430( l_U557, 65516, 1, 1 );
         /* P_LL_HANDLE_AUDIO_CHANGE_MOOD_DURING_GAMEPLAY */ sub_57578();
         /* P_ASSIGN_BULLET_CAMS */ sub_65820();
         /* P_HANDLE_PASSOS_BED_POI */ sub_58015();
         /* P_HANDLE_NOTE_POI */ sub_61523();
         /* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ sub_61819();
        if ( /* ISTIMERDONE */ sub_2324( ref l_U499 ))
        {
             /* P_LL_KITCHEN_WAVE_ATTACK */ sub_66826();
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67347( ref l_U508, 0 ))
        {
             /* P_LL_KITCHEN_REBELS_UPDATE_TETHER */ sub_67482();
        }
        if ( /* F_LL_REBEL_REINFORCMENT_A_CAN_SPAWN */ sub_67787())
        {
             /* P_LL_REBEL_REINFORCEMENT_A_CREATE */ sub_67911();
             /* P_LL_REBEL_REINFORCEMENT_A_ATTACK */ sub_68321();
        }
        if ( /* F_LL_REBEL_REINFORCMENT_B_CAN_SPAWN */ sub_68811())
        {
             /* P_LL_REBEL_REINFORCEMENT_B_CREATE */ sub_68945();
             /* P_LL_REBEL_REINFORCEMENT_B_ATTACK */ sub_69355();
        }
        if ( /* F_LL_REBEL_REINFORCMENT_C_CAN_SPAWN */ sub_69571())
        {
             /* P_LL_REBEL_REINFORCEMENT_C_CREATE */ sub_69703();
             /* P_LL_REBEL_REINFORCEMENT_C_ATTACK */ sub_70388();
        }
        if (( /* F_LL_ARE_COMBAT_PEDS_DEAD */ sub_70604()) == 1)
        {
            if (NOT IS_BULLET_CAMERA_ACTIVE())
            {
                l_U185 = 10;
                 /* WRITESCRIPTLOG */ sub_487( "GA", "eCheckpointState = CP_LL_GAMEPLAY_SEARCH_FOR_RADIO", 0 );
            }
        }
        break;
        case 10:
        if (l_U186)
        {
             /* LOADSEAMLESSCUTSCENE */ sub_34554( "MID_00_PANAMA_SH01", 0 );
            if (NOT ( /* HASTIMERBEENACTIVATED */ sub_1907( ref l_U1027 )))
            {
                 /* STARTTIMER */ sub_2191( ref l_U1027 );
            }
             /* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ sub_57183();
            AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2", "PANAMA_FINAL_2", 0.00000000, 0, 5000, -1082130432, 0 );
             /* WRITESCRIPTLOG */ sub_487( "CR", "Playing: PANAMA_FINAL Mood: PANAMA_FINAL_2", 0 );
        }
         /* P_LL_HANDLE_WALKING_TRIGGERS */ sub_70999();
         /* P_LL_HANDLE_MAXS_DIALOGUE */ sub_71358();
         /* P_HANDLE_PASSOS_BED_POI */ sub_58015();
         /* P_HANDLE_NOTE_POI */ sub_61523();
        if ((NOT ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_71643( g_U1246 ))) AND (l_U1027._fU16))
        {
             /* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ sub_61819();
        }
        if (NOT ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_71643( g_U1246 )))
        {
            if ( /* CUTSYS_HANDLETRIGGERTYPEDOOR_NOHOLSTERING */ sub_71812( ref l_U270, ref l_U249, 0, 0 ))
            {
                l_U185 = 13;
                 /* WRITESCRIPTLOG */ sub_487( "GA", "eCheckpointState = CP_LL_LOAD_MID_00_PANAMA", 0 );
            }
        }
        break;
        case 11:
        if (l_U186)
        {
             /* NIS_PRE_SETUP */ sub_50447( 1, 0, 0, 1 );
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
            {
                 /* TELEPORTPED */ sub_45476(  /* PLAYER_PED_ID */ sub_970(), -37.75862000, -0.83430900, -0.66294900, 254.31480000 );
                 /* MAL_SETPEDVISIBLE */ sub_72171(  /* PLAYER_PED_ID */ sub_970(), 0 );
                 /* P_RESET_MAX_ACTION_TREE */ sub_72290();
                RESET_PLAYER_INPUT_GAIT( 0 );
                SET_GAMEPLAY_CAM_RELATIVE_HEADING( -3.05134600, 1065353216, 0 );
                SET_GAMEPLAY_CAM_RELATIVE_PITCH( -9.28123300, 1065353216, 0 );
                TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_970() );
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_970() );
            }
            CAMERA_PLAY_ANIMATED( "EXPL_CAM", "EXPL_CAMTLTGND_45_LFR", 1, l_U783, l_U786, 0, 0 );
            if (NOT (HAS_EXPLORATION_ITEM_BEEN_FOUND( "span_PassosBed" )))
            {
                 /* KILL_ANY_MISSION_SPEECH */ sub_72784( 0 );
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_62233( "SPAN_EXPLTTM", ref l_U789 );
                FOUND_EXPLORATION_ITEM( "span_PassosBed" );
            }
        }
        if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "EXPL_CAM", "EXPL_CAMTLTGND_45_LFR" )) - l_U787))
        {
             /* MAL_SETPEDVISIBLE */ sub_72171(  /* PLAYER_PED_ID */ sub_970(), 1 );
            CAMERA_ANIMATED_STOP( 0, 0 );
             /* NIS_POST_SETUP */ sub_51371( 1, 1 );
             /* P_ENABLE_POI */ sub_60214( ref l_U655, 1 );
            if (NOT l_U788)
            {
                l_U185 = 15;
                 /* WRITESCRIPTLOG */ sub_487( "CR", "eCheckpointState = CP_LL_GAMEPLAY_GO_TO_ENGINE_DOOR", 0 );
            }
            else
            {
                l_U185 = 10;
                 /* WRITESCRIPTLOG */ sub_487( "CR", "eCheckpointState = CP_LL_GAMEPLAY_SEARCH_FOR_RADIO", 0 );
            }
        }
        break;
        case 12:
        if (l_U186)
        {
             /* NIS_PRE_SETUP */ sub_50447( 1, 0, 0, 1 );
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
            {
                 /* TELEPORTPED */ sub_45476(  /* PLAYER_PED_ID */ sub_970(), -47.01839000, 8.82454800, -0.66294900, 94.65299000 );
                 /* MAL_SETPEDVISIBLE */ sub_72171(  /* PLAYER_PED_ID */ sub_970(), 0 );
                 /* P_RESET_MAX_ACTION_TREE */ sub_72290();
                RESET_PLAYER_INPUT_GAIT( 0 );
                SET_GAMEPLAY_CAM_RELATIVE_HEADING( -12.01267000, 1065353216, 0 );
                SET_GAMEPLAY_CAM_RELATIVE_PITCH( -10.52355000, 1065353216, 0 );
                TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_970() );
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_970() );
            }
            CAMERA_PLAY_ANIMATED( "EXPL_CAM", "EXPL_CAM_GND_25_F_CAM", 1, l_U927, l_U930, 0, 0 );
            if (NOT (HAS_EXPLORATION_ITEM_BEEN_FOUND( "span_Note" )))
            {
                 /* KILL_ANY_MISSION_SPEECH */ sub_72784( 0 );
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_62233( "SPAN_MNYAPTA", ref l_U933 );
                FOUND_EXPLORATION_ITEM( "span_Note" );
            }
        }
        if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "EXPL_CAM", "EXPL_CAM_GND_25_F_CAM" )) - l_U931))
        {
             /* MAL_SETPEDVISIBLE */ sub_72171(  /* PLAYER_PED_ID */ sub_970(), 1 );
            CAMERA_ANIMATED_STOP( 0, 0 );
             /* NIS_POST_SETUP */ sub_51371( 1, 1 );
             /* P_ENABLE_POI */ sub_60214( ref l_U799, 1 );
            if (NOT l_U932)
            {
                l_U185 = 15;
                 /* WRITESCRIPTLOG */ sub_487( "CR", "eCheckpointState = CP_LL_GAMEPLAY_GO_TO_ENGINE_DOOR", 0 );
            }
            else
            {
                l_U185 = 10;
                 /* WRITESCRIPTLOG */ sub_487( "CR", "eCheckpointState = CP_LL_GAMEPLAY_SEARCH_FOR_RADIO", 0 );
            }
        }
        break;
        case 13:
        if ( /* F_UNLOADCUTSCENEANDLOADNEWCUTSCENE */ sub_73880( "MID_01_PANAMA_concat", "MID_00_PANAMA_SH01" ))
        {
            l_U185 = 14;
             /* WRITESCRIPTLOG */ sub_487( "GA", "eCheckpointState = CP_LL_HANDLE_MID_00_PANAMA", 0 );
        }
        break;
        case 14:
        if (l_U186)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_48662( ref l_U291, "MID_00_PANAMA_SH01", 74264, 74407, 74732, 74921, 74966, 75217, 250, 0 );
            l_U291._fU4 = 2;
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_49556( ref l_U291 ))
        {
            l_U185 = 15;
             /* WRITESCRIPTLOG */ sub_487( "GA", "eCheckpointState = CP_LL_GAMEPLAY_GO_TO_ENGINE_DOOR", 0 );
        }
        break;
        case 15:
        if (l_U186)
        {
             /* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ sub_57183();
             /* P_START_CHECKPOINT_THREAD */ sub_75895( ref g_U835[2] );
            if (NOT AUDIO_IS_MUSIC_PLAYING())
            {
                AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2", "PANAMA_FINAL_2", 0, -1, -1, -1082130432, 0 );
                 /* WRITESCRIPTLOG */ sub_487( "CR", "Playing: PANAMA_FINAL Mood: PANAMA_FINAL_2", 0 );
            }
        }
         /* P_LL_HANDLE_WALKING_TRIGGERS */ sub_70999();
         /* P_LL_HANDLE_MAXS_DIALOGUE */ sub_71358();
         /* P_HANDLE_PASSOS_BED_POI */ sub_58015();
         /* P_HANDLE_NOTE_POI */ sub_61523();
         /* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ sub_61819();
        if ( /* CUTSYS_HANDLETRIGGERTYPEDOOR_NOHOLSTERING */ sub_71812( ref l_U1036, ref l_U1057, 0, 0 ))
        {
            g_U1230[2] = 1;
            l_U185 = 16;
             /* WRITESCRIPTLOG */ sub_487( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 16:
        if ((g_U834 == 2) || (NOT HAS_CUTSCENE_FINISHED()))
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U185 = 0;
             /* WRITESCRIPTLOG */ sub_487( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U185 != iVar2)
    {
        l_U186 = 1;
    }
    else
    {
        l_U186 = 0;
    }
    return;
}

/* P_HANDLE_SP_CHALLENGES */ void sub_10743()
{
    switch (l_U1078)
    {
        case 0:
         /* WRITESCRIPTLOG */ sub_487( "CCB", "eRoomService - STATE_CHALLENGE_IDLE", 0 );
        l_U1078 = 1;
        break;
        case 1:
        if (l_U185 >= 8)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
            {
                if (NOT (IS_PED_USING_MP3_COVER_TASK(  /* PLAYER_PED_ID */ sub_970() )))
                {
                    if (SCRIPT_VAR_HASH_EXISTS( -1452701025 ))
                    {
                         /* WRITESCRIPTLOG */ sub_487( "CCB", "The player left cover in the cabin entryway...", 0 );
                        SCRIPT_VAR_HASH_SET_INT( -1452701025, 1 );
                        DISPLAYF( "[CCB] ### The current RoomService value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -1452701025 ) );
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_487( "CCB", "The RoomService script variable is NOT valid!!!", 0 );
                    }
                     /* WRITESCRIPTLOG */ sub_487( "CCB", "eRoomService - STATE_CHALLENGE_COMPLETE", 0 );
                    l_U1078 = 2;
                }
            }
        }
        break;
        case 2: break;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_11446()
{
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U186 = 1;
    l_U219 = 0;
    l_U220 = 0;
     /* CREATETIMER */ sub_2041( ref l_U221, 6000, 1, 0 );
     /* CREATETIMER */ sub_2041( ref l_U231, 10300, 1, 0 );
     /* CREATETIMER */ sub_2041( ref l_U240, 1800, 1, 0 );
    l_U332 = 0;
    l_U345 = 0;
    l_U344 = 0;
    l_U432 = 0;
    l_U454 = 0;
     /* CREATETIMER */ sub_2041( ref l_U499, 2500, 1, 0 );
     /* CREATETIMER */ sub_2041( ref l_U1027, 2750, 1, 0 );
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_11695()
{
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11801( ref l_U392[0], -30.06700000, 0.70000000, -0.68000000, 355.00000000, -1104179593, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11801( ref l_U392[1], -30.50000000, 4.04000000, -0.68000000, 85.00000000, 2050619087, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11801( ref l_U392[2], -25.01575000, 10.07385000, -0.66181500, -165.09000000, -871676009, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11801( ref l_U459[0], 3.88000000, 6.26000000, -0.60000000, 84.04608000, 109161796, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11801( ref l_U459[1], -3.10000000, -0.78000000, -0.60000000, 73.60000000, -941588541, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11801( ref l_U459[2], 0.35000000, 5.48000000, -0.60000000, 113.92850000, 1598522081, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11801( ref l_U530, 0.12366500, 0.76264200, -0.66444000, 25.00000000, 270644968, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11801( ref l_U544, -0.79000000, 4.28000000, -0.66000000, 25.00000000, 1720257320, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11801( ref l_U558, -1.25000000, -0.99000000, -0.67000000, 25.00000000, -1215072851, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11801( ref l_U318, 13.35000000, 8.48000000, -0.40000000, 0, 1598522081, 26, 6, 0, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U346, "TRIGGER_LEFT_BUNK_PLAYER_WALK", -38.74000000, 8.21000000, -0.82000000, 21.56000000, 5.14000000, 2.82000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U367, "TRIGGER_RIGHT_BUNK_PLAYER_WALK", -39.32000000, -0.48000000, -0.82000000, 21.56000000, 5.14000000, 2.82000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U943, "Trigger_LowerDeck_Dialogue_Maxs", -46.00000000, -0.23000000, -1.00000000, 7.00000000, 5.00000000, 2.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U964, "Trigger_LowerDeck_Dialogue_Passos", -45.93000000, 8.13000000, -0.67000000, 5.33000000, 4.49000000, 2.84000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U985, "Trigger_LowerDeck_Dialogue_Marcelo", -38.45000000, -0.06000000, -0.67000000, 5.20000000, 4.30000000, 2.84000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U1006, "Trigger_LowerDeck_Dialogue_NearRadio", 0.00000000, 8.18800000, -0.66600000, 10.00000000, 10.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U433, "TRIGGER_MAX_HIDING", -42.11000000, 4.05000000, -0.61000000, 5.44000000, 8.14000000, 2.14000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U508, "Release_Kitchen_Tether", -18.88000000, 3.88000000, -0.94000000, 5.85000000, 16.65000000, 2.84000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U571, "KITCHEN", -10.36000000, 2.59000000, -0.94000000, 10.93000000, 11.70000000, 2.84000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U592, "SIDE_HALL", -10.50000000, 9.99000000, -0.94000000, 11.15000000, 2.34000000, 2.84000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U613, "FRIDGE", -1.65000000, -0.46000000, -0.94000000, 6.45000000, 5.95000000, 2.84000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U634, "RADIO_AREA", -1.56000000, 6.87000000, -0.94000000, 5.79000000, 8.05000000, 2.84000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U249, "Trigger_Radio_POI_Force", -0.48000000, 5.34000000, -0.94000000, 4.37000000, 3.21000000, 2.84000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U270, "Trigger_Near_Radio_POI", -1.56000000, 5.96000000, -0.94000000, 5.79000000, 5.47000000, 2.84000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U741, "Trigger_PassosBedPOI_Activate", -36.86000000, -1.90000000, -0.66000000, 2.50000000, 3.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U762, "Trigger_PassosBedPOI_Radius", -37.91000000, -1.33000000, -0.66000000, 4.50000000, 4.50000000, 5.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U885, "Trigger_NotePOI_Activate", -47.59400000, 9.26700000, -0.66300000, 2.00000000, 1.50000000, 2.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U906, "Trigger_NotePOI_Radius", -47.59400000, 9.26700000, -0.66300000, 4.00000000, 3.50000000, 2.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U1036, "tbLL_EngineRoomTrigger_ForceWalk", 9.97000000, 8.31000000, -3.85000000, 6.21000000, 6.78000000, 5.05000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12400( ref l_U1057, "tbLL_EngineRoomTrigger_Start", 11.54000000, 9.63000000, -3.85000000, 4.29000000, 4.60000000, 5.05000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14169( ref l_U342, "TetherBox_LowerLevelRebels", -10.73000000, 2.53000000, -0.70000000, 10.46000000, 11.75000000, 3.82000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14169( ref l_U343, "TetherBox_HallwayRebel", -16.53000000, 3.78000000, -0.70000000, 24.32000000, 14.41000000, 3.82000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATEPOISTRUCTTRIGGER */ sub_14359( ref l_U655, 2, 0.00000000, 0.00000000, 0.00000000, l_U741, l_U762, 1, 0 );
     /* P_SET_INTERACTIVE_TEXT */ sub_15315( ref l_U655, 30, "POI_PAN_PASSO" );
     /* P_SET_POI_FORCE_WALK */ sub_15525( ref l_U655, 0 );
     /* P_SET_POI_REUSABLE */ sub_15580( ref l_U655, 1 );
     /* P_SET_POI_AVAILABLE */ sub_15633( ref l_U655, 0 );
     /* P_CREATEPOISTRUCTTRIGGER */ sub_14359( ref l_U799, 2, 0.00000000, 0.00000000, 0.00000000, l_U885, l_U906, 1, 0 );
     /* P_SET_INTERACTIVE_TEXT */ sub_15315( ref l_U799, 30, "POI_PAN_NOTE" );
     /* P_SET_POI_FORCE_WALK */ sub_15525( ref l_U799, 0 );
     /* P_SET_POI_REUSABLE */ sub_15580( ref l_U799, 1 );
     /* P_SET_POI_AVAILABLE */ sub_15633( ref l_U799, 0 );
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_11801(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_12400(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_14169(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATEPOISTRUCTTRIGGER */ void sub_14359(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47, unknown uParam48)
{
     /* P_CREATEBLANKPOISTRUCT */ sub_14403( iParam0, uParam47 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU80 = 1;
    iParam0->_fU116 = {uParam5};
    iParam0->_fU88 = 1;
    iParam0->_fU216 = {uParam26};
    iParam0->_fU320 = uParam48;
    iParam0->_fU20 = {uParam2};
     /* P_CREATEPOIGLINT */ sub_14794( iParam0 );
    return;
}

/* P_CREATEBLANKPOISTRUCT */ void sub_14403(int iParam0, unknown uParam1)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = 0;
    iParam0->_fU8 = 0;
    iParam0->_fU12 = nil;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU52 = 1;
    iParam0->_fU56 = 1;
    iParam0->_fU60 = 0;
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = 0;
    iParam0->_fU80 = 0;
    iParam0->_fU84 = 0;
    iParam0->_fU100 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU112 = 0.00000000;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU96 = 0;
    iParam0->_fU200 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU212 = 0.00000000;
    iParam0->_fU300 = 0;
    iParam0->_fU304 = 1;
    iParam0->_fU308 = 0;
    iParam0->_fU324 = 1;
    iParam0->_fU328 = 0;
    iParam0->_fU340 = 0;
    iParam0->_fU336 = 0.20000000;
    return;
}

/* P_CREATEPOIGLINT */ void sub_14794(int iParam0)
{
    if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            REMOVE_GLINT( iParam0->_fU12 );
        }
    }
    iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
     /* P_INITPOIGLINT */ sub_14892( iParam0 );
    return;
}

/* P_INITPOIGLINT */ void sub_14892(int iParam0)
{
    if (iParam0->_fU0 == 1)
    {
        if (iParam0->_fU320 == 1)
        {
            if ((iParam0->_fU8 > 0) AND (iParam0->_fU4 == 0))
            {
                 /* P_ENABLEPOIGLINT */ sub_14968( iParam0, 1 );
            }
            else if ((iParam0->_fU8 < 2) AND (iParam0->_fU4 == 1))
            {
                 /* P_ENABLEPOIGLINT */ sub_14968( iParam0, 1 );
            }
            else if ((iParam0->_fU8 == 1) AND (iParam0->_fU4 == 2))
            {
                 /* P_ENABLEPOIGLINT */ sub_14968( iParam0, 1 );
            }
            else
            {
                 /* P_ENABLEPOIGLINT */ sub_14968( iParam0, 0 );
            };;;
        }
        else
        {
             /* P_ENABLEPOIGLINT */ sub_14968( iParam0, 0 );
        }
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_14968( iParam0, 0 );
    }
    return;
}

/* P_ENABLEPOIGLINT */ void sub_14968(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if (iParam0->_fU12 != nil)
        {
            if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
            {
                ENABLE_GLINT( iParam0->_fU12, 1 );
            }
            else
            {
                iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
            }
        }
        else
        {
            iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
        }
    }
    else if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            ENABLE_GLINT( iParam0->_fU12, 0 );
        }
    }
    return;
}

/* P_SET_INTERACTIVE_TEXT */ void sub_15315(int iParam0, unknown uParam1, unknown uParam2)
{
    StrCopy( ref iParam0->_fU32, uParam2, 16 );
    iParam0->_fU48 = uParam1;
     /* P_INITINTERACTIVETEXT */ sub_15371( iParam0 );
    return;
}

/* P_INITINTERACTIVETEXT */ void sub_15371(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND (iParam0->_fU0 == 1))
    {
        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
        {
            SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
            SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
    }
    return;
}

/* P_SET_POI_FORCE_WALK */ void sub_15525(int iParam0, unknown uParam1)
{
    iParam0->_fU324 = uParam1;
    return;
}

/* P_SET_POI_REUSABLE */ void sub_15580(int iParam0, unknown uParam1)
{
    iParam0->_fU68 = uParam1;
    return;
}

/* P_SET_POI_AVAILABLE */ void sub_15633(int iParam0, int iParam1)
{
    if (iParam1 == 0)
    {
        iParam0->_fU60 = 1;
    }
    else
    {
        iParam0->_fU60 = 0;
    }
     /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_15697( iParam0 );
    return;
}

/* P_UPDATEINTERACTIONTEXTAVAILABLE */ void sub_15697(int iParam0)
{
    if (iParam0->_fU60 == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 0 );
        iParam0->_fU56 = 0;
    }
    else if (iParam0->_fU56 == 1)
    {
        if (( /* F_ISACTIONINGAVAILABLE */ sub_15793( iParam0 )) == 0)
        {
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
    }
    else if (( /* F_ISACTIONINGAVAILABLE */ sub_15793( iParam0 )) == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 1 );
        iParam0->_fU56 = 1;
    };;;
    return;
}

/* F_ISACTIONINGAVAILABLE */ int sub_15793(int iParam0)
{
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1008() )) == 0))
    {
        if (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_970() )) == 1) || (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_970() )) == 1) || (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_970() )) == 1) || (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_970() )) == 1) || (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_970() )) == 1) || (IS_PLAYER_SHOOTDODGING() == 1))))))
        {
            return 0;
        }
        if (iParam0->_fU304 == 0)
        {
            if ((IS_MONOLOGUE_PLAYING() == 1) || ((IS_ANY_SPEECH_PLAYING(  /* PLAYER_PED_ID */ sub_970() )) == 1))
            {
                return 0;
            }
        }
        return 1;
    }
    return 0;
}

/* P_GLOBAL_CREATE_ALL_DOORS */ void sub_16226()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_GLOBAL_CREATE_ALL_DOORS - START", 0 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3713[0], g_U3689, -44.27758000, 5.32169000, 0.43664000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3713[0], 1, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_16966( ref g_U3713[0], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3713[1], g_U3690, -44.37815000, 2.33806000, 0.43171000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3713[1], 0, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_16966( ref g_U3713[1], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3713[2], g_U3687, -37.33594000, 5.32179000, 0.43720000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3713[3], g_U3688, -37.33504000, 2.33680000, 0.43720000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3713[3], 0, 1, 0.30000000 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3713[4], g_U3685, -30.53626000, 5.32230000, 0.43720000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3713[4], 1, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_16966( ref g_U3713[4], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3713[5], g_U3686, -30.53630000, 2.33804000, 0.43720000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3713[5], 0, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_16966( ref g_U3713[5], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3713[6], g_U3694, 1.90790000, -0.24320000, 0.56350000, 0.00000000, 0.00000000, 0.00000000, -0.01000000, 0.00000000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3713[6], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3713[7], g_U3695, 12.53256000, -3.39169000, 0.49154000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 0.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3713[7], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3713[8], g_U3696, 12.53157000, 10.52140000, 0.49412000, 0.00000000, 0.00000000, 0.00000000, -115.00000000, 0.00000000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3713[8], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[0], g_U3699, 24.75918000, -0.74805000, 3.24288000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 35.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3777[0], 1, 1, 0.30000000 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[1], g_U3703, -2.57487000, -0.57792000, 3.24329000, 0.00000000, 0.00000000, 0.00000000, 26.00000000, 27.00000000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3777[1], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[2], g_U3700, -2.54126000, 8.35078000, 3.25633000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3777[2], 0, 1, 0.35000000 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[3], g_U3699, -7.29046000, 1.42185000, 3.25776000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3777[3], 0, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_16966( ref g_U3777[3], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[4], g_U3698, -10.64608000, 4.89107000, 3.24594000, 0.00000000, 0.00000000, 0.00000000, -89.00000000, 130.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3777[4], 1, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_16966( ref g_U3777[4], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[5], g_U3699, -19.32917000, 0.72835000, 3.25671000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3777[5], 1, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_16966( ref g_U3777[5], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[6], g_U3700, -20.54160000, 0.65161000, 3.25298000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3777[6], 0, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_16966( ref g_U3777[6], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[7], g_U3698, -22.72606000, 4.14333000, 3.24594000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3777[7], 1, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_16966( ref g_U3777[7], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[8], g_U3700, -26.59765000, 0.63613000, 3.25294000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3777[8], 0, 1, 0.20000000 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[9], g_U3692, -33.21901000, 10.21093000, 3.24398000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 89.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3777[9], 0, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_16966( ref g_U3777[9], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[10], g_U3697, -37.06034000, -1.30501000, 3.42993000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 89.00000000, 1, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3777[10], 1, 1, 0.60000000 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[11], g_U3691, -1.85550000, -1.59770000, 3.15740000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3777[11], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[12], g_U3691, -0.65170000, 9.35870000, 3.15740000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3777[12], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[13], g_U3691, -13.57990000, -3.15070000, 3.15440000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3777[13], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[14], g_U3702, -13.57990000, 10.94360000, 3.15440000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3777[14], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3777[15], g_U3696, 25.61931000, -3.35702000, 3.45269000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3777[15], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3890[0], g_U3693, -8.45170000, 8.45730000, 6.32890000, 0.00000000, 0.00000000, 0.00000000, -110.00000000, 110.00000000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3890[0], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3890[1], g_U3704, -10.71540000, 9.35900000, 6.24680000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 80.00000000, 0, 0 );
     /* P_OPENDOOR */ sub_17149( ref g_U3890[1], 1, 1, 0.40000000 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3890[2], g_U3691, -10.71560000, -1.59800000, 6.24680000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3890[2], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3912[0], g_U3693, 12.52281000, -0.64584000, 6.27399000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3912[0], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3912[1], g_U3702, 12.26410000, 9.22190000, 6.22370000, 0.00000000, 0.00000000, 0.00000000, -100.00000000, 100.00000000, 0, 1 );
     /* P_OPENDOOR */ sub_17149( ref g_U3912[1], 0, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_16966( ref g_U3912[1], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3912[2], g_U3706, -1.53070000, -1.13090000, 9.18250000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3912[2], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3912[3], g_U3706, -1.53120000, 8.90860000, 9.18250000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 0, 1 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3912[3], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3912[4], g_U3705, -13.57924000, -1.00988000, 10.05367000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3912[4], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3912[5], g_U3705, -12.37852000, 8.77084000, 10.05367000, 0.00000000, 0.00000000, 0.00000000, -90.00000000, 90.00000000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3912[5], 1 );
     /* P_GLOBAL_SETUP_YACHT_DOOR */ sub_16367( ref g_U3955, g_U3701, -45.48747000, 29.79249000, 9.53181000, 0.00000000, 0.00000000, 0.00000000, -1028390912, 1119092736, 1, 0 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3955, 1 );
     /* P_CREATEDOORSTRUCT */ sub_16415( ref g_U3969, g_U1587, -113.63000000, -38.41000000, 23.75000000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3969, 1 );
     /* P_CREATEDOORSTRUCT */ sub_16415( ref g_U3962, g_U1587, -111.23000000, -38.41000000, 23.75000000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3962, 1 );
     /* P_CREATEDOORSTRUCT */ sub_16415( ref g_U3991[0], g_U3709, -79.78369000, -21.98512000, 9.11832000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3991[0], 1 );
     /* P_CREATEDOORSTRUCT */ sub_16415( ref g_U3991[1], g_U3710, -79.78369000, -24.27071000, 9.11714000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3991[1], 1 );
     /* P_CREATEDOORSTRUCT */ sub_16415( ref g_U3976[0], g_U3708, -94.53243000, -37.65765000, 17.14219000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3976[0], 1 );
     /* P_CREATEDOORSTRUCT */ sub_16415( ref g_U3976[1], g_U3708, -97.90794000, -37.65969000, 17.14219000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U3976[1], 1 );
     /* P_CREATEDOORSTRUCT */ sub_16415( ref g_U4006[0], g_U3711, -109.05910000, -45.77236000, 10.14501000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U4006[0], 1 );
     /* P_CREATEDOORSTRUCT */ sub_16415( ref g_U4006[1], g_U3712, -111.30410000, -45.77237000, 10.14501000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U4006[1], 1 );
     /* P_CREATEDOORSTRUCT */ sub_16415( ref g_U4006[2], g_U3711, -117.15460000, -44.32523000, 10.12627000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U4006[2], 1 );
     /* P_CREATEDOORSTRUCT */ sub_16415( ref g_U4006[3], g_U3712, -117.15460000, -42.08017000, 10.12627000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U4006[3], 1 );
     /* P_CREATEDOORSTRUCT */ sub_16415( ref g_U4006[4], g_U3711, -115.77770000, -39.97692000, 10.13279000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U4006[4], 1 );
     /* P_CREATEDOORSTRUCT */ sub_16415( ref g_U4006[5], g_U3712, -115.77770000, -37.73186000, 10.13279000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_17810( ref g_U4006[5], 1 );
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_GLOBAL_CREATE_ALL_DOORS - END", 0 );
    return;
}

/* P_GLOBAL_SETUP_YACHT_DOOR */ void sub_16367(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
     /* P_CREATEDOORSTRUCT */ sub_16415( uParam0, uParam1, uParam2, uParam5 );
     /* P_CLOSEDOOR */ sub_16482( uParam0, 1 );
     /* P_SETDOORMINMAXLIMIT */ sub_16742( uParam0, uParam8, uParam9 );
     /* P_SETDOORLATCH */ sub_16966( uParam0, uParam10 );
     /* P_SETDOORAUTOCLOSE */ sub_17047( uParam0, uParam11 );
    return;
}

/* P_CREATEDOORSTRUCT */ void sub_16415(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

/* P_CLOSEDOOR */ void sub_16482(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_16508( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16592( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_16508(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_16592(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORMINMAXLIMIT */ void sub_16742(int iParam0, float fParam1, float fParam2)
{
    if (( /* F_DOESDOOREXIST */ sub_16508( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16592( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        PRINTSTRING( "[SP]### Error: Door fMinLimit greater than fMaxLimit (default min:-81.0 max:81.0) ###" );
        PRINTNL();
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

/* P_SETDOORLATCH */ void sub_16966(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_16508( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16592( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_SETDOORAUTOCLOSE */ void sub_17047(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_16508( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16592( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_OPENDOOR */ void sub_17149(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if (( /* F_DOESDOOREXIST */ sub_16508( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16592( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

/* P_SETDOORLOCKED */ void sub_17810(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_16508( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16592( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* P_INITIALIZE_SP_CHALLENGES */ void sub_20979()
{
     /* WRITESCRIPTLOG */ sub_487( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
    l_U1078 = 0;
    if (NOT (SCRIPT_VAR_HASH_EXISTS( -1452701025 )))
    {
         /* WRITESCRIPTLOG */ sub_487( "CCB", "Creating the RoomService script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( -1452701025 );
        DISPLAYF( "[CCB] ### The current RoomService value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -1452701025 ) );
        if (SCRIPT_VAR_HASH_EXISTS( -1452701025 ))
        {
             /* WRITESCRIPTLOG */ sub_487( "CCB", "The RoomService script variable was successfully created...", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_487( "CCB", "The RoomService script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_487( "CCB", "The RoomService script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( -1452701025, 0 );
        DISPLAYF( "[CCB] ### The current RoomService value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -1452701025 ) );
    }
    return;
}

/* P_START_SP_CHALLENGES */ void sub_21558()
{
     /* WRITESCRIPTLOG */ sub_487( "CCB", "P_START_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_487( "CCB", "Starting the Panama context...", 0 );
    START_CONTEXT( "Panama" );
     /* WRITESCRIPTLOG */ sub_487( "CCB", "Starting the Panama_Lower_Level context...", 0 );
    START_CONTEXT( "Panama_Lower_Level" );
    return;
}

/* P_REQUEST_LL_PERSISTENT_ASSETS */ void sub_21909()
{
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_REQUEST_LL_PERSISTENT_ASSETS start", 0 );
     /* P_GLOBAL_LOAD_PISTOL_ANIMS */ sub_22002();
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_25453( ref l_U176, ref g_U1588 );
    if (g_U834 == 0)
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_25526( g_U1536, ref g_U1588 );
    }
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_27558( ref l_U181, ref g_U1829 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_29589( ref g_U3071, ref g_U3026 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "LEVEL_S_PAN_CP_01", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "EXPL_CAM", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_REQUEST_LL_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_GLOBAL_LOAD_PISTOL_ANIMS */ void sub_22002()
{
     /* WRITESCRIPTLOG */ sub_487( "CR", "P_GLOBAL_LOAD_PISTOL_ANIMS - Start", 0 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "NPC_PSTL_CORE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "NPC_PSTL_COVER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "NPC_PSTL_COVER_ENTER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "NPC_PSTL_COVER_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "NPC_PSTL_DODGE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "NPC_PSTL_FLAVOR", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "NPC_PSTL_FULLBODY", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "NPC_PSTL_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "NPC_PSTL_SEARCH", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "NPC_PSTL_STAIRS", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "NPC_PSTL_REACT", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "AMED_PSTL_PRONE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "PLGE_PSTL_CROUCH", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "PLGE_PSTL_CORE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "PLGE_PSTL_CORE_RELOAD", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "PLGE_PSTL_HANDSIG", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "PLGE_PSTL_ACTIONS", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "PLGE_PSTL_KNEE", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "PLGE_PSTL_COVER", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "PLGE_PSTL_REACT", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22109( "PLGE_PSTL_COVER_EXIT", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_487( "CR", "P_GLOBAL_LOAD_PISTOL_ANIMS - End", 0 );
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_22109(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_22161( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22413( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_22161(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22413( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22413( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22413( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_23984( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22413( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22413( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_22413(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_22475( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_22475(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_23984(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_25453(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_25526( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_25526(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_25593( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_25851( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_25593(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_25851( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_25851( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_25851( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_23984( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_25851( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_25851( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_25851(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_22475( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_27558(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_27632( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_27632(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_27686( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_27947( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_27686(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_27947( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_27947( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_27947( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_23984( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_27947( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_27947( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_27947(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_22475( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_29589(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_29642( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_29897( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_29642(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_29897( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_29897( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_29897( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_23984( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_29897( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_29897( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_29897(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_22475( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_LL_NONPERSISTENT_ASSETS */ void sub_31588()
{
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_REQUEST_LL_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_31696( 945770955, ref g_U1878 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_31696( -929423363, ref g_U1878 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_31696( 995399098, ref g_U1878 );
    if (g_U834 == 0)
    {
         /* LOADSEAMLESSCUTSCENE */ sub_34554( "11_01_PANAMA_CONCAT", 0 );
    }
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_REQUEST_LL_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_31696(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_31757( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_32007( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_31757(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_32007( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_32007( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_32007( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_32007( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_23984( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_23984( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_32007( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_32007( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_32007(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_22475( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_34554(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_35026(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_35423(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_35825(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_36216(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_36630(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_37253(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_487( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_6032( uParam0,  /* PLAYER_PED_ID */ sub_970() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_LL_RADIO_STATIC */ void sub_37739()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_RADIO_STATIC: START", 0 );
    ENABLE_STATIC_EMITTER( "S_PANA_RADIO_A", 1 );
    ENABLE_STATIC_EMITTER( "S_PANA_RADIO_A_TALKING", 0 );
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_RADIO_STATIC: END", 0 );
    return;
}

/* P_LL_CREATE_PLACEMENTS */ void sub_37909()
{
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_LL_CREATE_PLACEMENTS: START", 0 );
    l_U333 =  /* CREATEPLACEMENT */ sub_38025( -4072149, -47.80000000, 1.80000000, 0.27500000, 0, 0, 3.80000000, 1, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U333, ref g_U3135 );
    l_U334 =  /* CREATEPLACEMENT */ sub_38025( -4072149, -33.65000000, 5.75000000, 0.27000000, 0.00000000, 0.00000000, 0.00000000, 1, 0, 1, 90.00000000 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U334, ref g_U3167 );
     /* P_CREATE_S_PAN_GG_SS_01 */ sub_38286();
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_LL_CREATE_PLACEMENTS: END", 0 );
    return;
}

/* CREATEPLACEMENT */ void sub_38025(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_CREATE_S_PAN_GG_SS_01 */ void sub_38286()
{
     /* WRITESCRIPTLOG */ sub_487( "CO", "P_CREATE_S_PAN_GG_SS_01", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_38429( ref g_U719, g_U827, 1963610008, -243401726, -4.50000000, 1.41000000, -0.64000000, 1.50000000, 0.00000000, 1.00000000, "Room_GalleyStore" );
     /* P_CREATECOLLECTIBLE */ sub_38586( ref g_U719 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_38429(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_487( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_38586(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_487( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_38669( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_487( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_487( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_38669( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_5568( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_38025( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_487( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_487( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_38669(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* F_HANDLE_PED_ARRAY_SPAWN */ int sub_39170(unknown uParam0, unknown uParam1, int iParam2, boolean bParam3, boolean bParam4, int iParam5, unknown uParam6)
{
    int iVar9;
    int iVar10;
    int Result;

    iVar9 =  /* F_GET_NUM_SPAWNED_PED_IN_ARRAY */ sub_39211( uParam0, uParam1 );
    if (iParam2 == -1)
    {
        iVar10 = (uParam0^);
    }
    else
    {
        iVar10 = iParam2;
    }
    if (iVar9 < iVar10)
    {
        if ((uParam1^)[iVar9]._fU16 == 0)
        {
            SCRIPT_ASSERT( "Invalid Ped Struct!  No Model Defined! Aborting Ped Spawn", 0 );
             /* WRITESCRIPTLOG */ sub_487( "MF", "Invalid Ped Struct!  No Model Defined! Aborting Ped Spawn", 0 );
            PRINTSTRING( "INVALID SPAWN INDEX: " );
             /* WRITE_INT */ sub_39574( iVar9 );
            return 0;
        }
        if (NOT (DOES_PED_EXIST( (uParam0^)[iVar9] )))
        {
             /* LOADMODEL */ sub_39657( (uParam1^)[iVar9]._fU16, uParam6 );
            (uParam0^)[iVar9] =  /* CREATEPED */ sub_39909( ref (uParam1^)[iVar9] );
            if (NOT bParam4)
            {
                SET_PED_VISIBLE( (uParam0^)[iVar9], bParam4 );
                 /* WRITE_STRING */ sub_8133( "SPAWNING INVISIBLE PED!!!" );
            }
            if (iParam5 == 1)
            {
                 /* P_DEACTIVATEPED */ sub_40700( (uParam0^)[iVar9] );
                 /* WRITE_STRING */ sub_8133( "Deactivating Ped..." );
            }
        }
    }
    if (bParam3)
    {
        if (iVar9 == (iVar10 - 1))
        {
             /* WRITESCRIPTLOG */ sub_487( "MF", "F_HANDLE_PED_ARRAY_SPAWN: Returning true Once.  If you see this looping, you likely have unitialized ped model data in your pedstruct array.", 0 );
            Result = 1;
        }
        return Result;
    }
    else if (iVar9 >= iVar10)
    {
        return 1;
    }
    return 0;
}

/* F_GET_NUM_SPAWNED_PED_IN_ARRAY */ void sub_39211(unknown uParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = (uParam1^);
    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (DOES_PED_EXIST( (uParam0^)[I] )))
        {
            if ((uParam1^)[I]._fU16 != 0)
            {
                if (I < Result)
                {
                    Result = I;
                }
            }
        }
    }
    return Result;
}

/* WRITE_INT */ void sub_39574(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* LOADMODEL */ void sub_39657(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_8133( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* CREATEPED */ void sub_39909(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_39657( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_40400( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_40501( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_40400(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_40501(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_40700(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* CUTSYS_DEFAULT_PRECUTSCENESETUP */ int sub_41491()
{
    return 1;
}

/* P_LL_11_01_PANAMA_REGISTER */ void sub_41544()
{
    if ( /* ISPEDVALID */ sub_41589(  /* PLAYER_PED_ID */ sub_970(), 0 ))
    {
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_970(), 0, 0 ), "W_PI_Glk18_Aa_H", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_970(), g_U980[1], g_U1086[1] );
        CUTSCENE_REGISTER_SET_PLAYER_IN_COVER( "pana_GP_LowerLevel", "Corner Position03", 1, 1 );
        ISEQ_REGISTER_ENTITY( -929423363, "Max",  /* PLAYER_PED_ID */ sub_970(), 0 );
    }
    if ( /* ISPEDVALID */ sub_41589( l_U388[0], 0 ))
    {
        ISEQ_REGISTER_ENTITY( 945770955, "s_pan_rmsearch_gmed1", l_U388[0], 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( l_U388[0], l_U392[0]._fU0, l_U392[0]._fU12 );
    }
    if ( /* ISPEDVALID */ sub_41589( l_U388[1], 0 ))
    {
        ISEQ_REGISTER_ENTITY( 945770955, "s_pan_rmsearch_gmed2", l_U388[1], 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( l_U388[1], l_U392[1]._fU0, l_U392[1]._fU12 );
    }
    REGISTER_OBJECT_PRE_SEAMLESS_CUTSCENE( DOOR_FIND_CLOSEST( g_U3713[1]._fU0, g_U3713[1]._fU4 ), "P_DR_BedRom_Ah_H", 0 );
    CUTSCENE_REGISTER_ISEQ( -929423363 );
    CUTSCENE_REGISTER_ISEQ( 945770955 );
    CUTSCENE_ENABLE_SKIP( 0 );
    return;
}

/* ISPEDVALID */ void sub_41589(unknown uParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((DOES_PED_EXIST( uParam0 )) == 1)
    {
        Result = 1;
    }
    else
    {
        Result = 0;
    }
    if (Result == 1)
    {
        if ((IS_PED_DEAD( uParam0 )) == 1)
        {
            if (iParam1 == 1)
            {
                Result = 1;
            }
            else
            {
                Result = 0;
            }
        }
        else
        {
            Result = 1;
        }
    }
    return Result;
}

/* P_LL_11_01_PANAMA_HANDLE */ void sub_42149()
{
    if ((GET_CUTSCENE_TIME_MS() > 38000) AND (NOT l_U219))
    {
         /* WRITESCRIPTLOG */ sub_487( "SA", "Swapping alarm clock.", 0 );
        l_U219 = 1;
         /* P_LL_SWAP_ALARM_CLOCK */ sub_42252();
        if (NOT l_U344)
        {
             /* WRITESCRIPTLOG */ sub_487( "CR", "MUSIC: Playing PANAMA_FINAL Mood: PANAMA_FINAL_2", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2", "PANAMA_FINAL_2", 0.00000000, 10000, -1, -1082130432, 0 );
            l_U344 = 1;
        }
    }
    return;
}

/* P_LL_SWAP_ALARM_CLOCK */ void sub_42252()
{
     /* WRITESCRIPTLOG */ sub_487( "SA", "P_LL_SWAP_ALARM_CLOCK start", 0 );
    if (DOES_OBJECT_EXIST( l_U215 ))
    {
         /* CLEANOBJECT */ sub_5509( l_U215 );
    }
    l_U215 =  /* CREATEOBJECT */ sub_42383( g_U1537, l_U216, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U215, ref g_U3135 );
    PLAY_OBJECT_ANIM( l_U215, "p_el_digclk_sb_h", "pa_anim", 0.00000000, 1, 0 );
     /* UNLOADMODEL */ sub_42761( g_U1536 );
     /* WRITESCRIPTLOG */ sub_487( "SA", "P_LL_SWAP_ALARM_CLOCK end", 0 );
    return;
}

/* CREATEOBJECT */ void sub_42383(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_39657( uParam0, 1 );
    }
    Result = CREATE_OBJECT( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* UNLOADMODEL */ void sub_42761(unknown uParam0)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 1)
    {
        SET_MODEL_AS_NO_LONGER_NEEDED( uParam0 );
    }
    else
    {
         /* WRITE_STRING */ sub_8133( "[SP]### ERROR! (UnloadModel) Trying to unload a model that isn't in the img! ###" );
    }
    return;
}

/* F_LL_11_01_POST */ int sub_43116()
{
    return 1;
}

/* P_LL_11_01_SETUPBLENDOUT */ void sub_43153()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_11_01_SetupBlendout - START", 0 );
    if (NOT (ISEQ_QUERY_ENTITY_STATE( -929423363, "Max", 3 )))
    {
         /* WRITESCRIPTLOG */ sub_487( "MF", "Starting 11_01 Blend out for Max...", 0 );
        SNAP_PLAYER_TO_COVERPOINT(  /* PLAYER_ID */ sub_1008(), "pana_GP_LowerLevel", "Corner Position03", 1 );
        ISEQ_REGISTER_ENTITY( -929423363, "Max",  /* PLAYER_PED_ID */ sub_970(), 0 );
        ISEQ_START( -929423363 );
    }
     /* P_LL_BUNK_REBELS_SETUP */ sub_43402();
    if (NOT (ISEQ_QUERY_ENTITY_STATE( 945770955, "s_pan_rmsearch_gmed1", 3 )))
    {
         /* WRITESCRIPTLOG */ sub_487( "MF", "Starting 11_01 Blend out for Rebels...", 0 );
         /* P_LL_BUNK_REBELS_START_SEARCH_ISS */ sub_45257();
    }
    CAMERA_PLAY_ANIMATED( "LEVEL_S_PAN_CP_01", "BLEND_OUT_11_01_PANAMA_CAM", 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0, 0 );
    if ( /* ISPEDVALID */ sub_41589( l_U388[0], 0 ))
    {
         /* P_ACTIVATEPED */ sub_44962( l_U388[0] );
    }
    if ( /* ISPEDVALID */ sub_41589( l_U388[1], 0 ))
    {
         /* P_ACTIVATEPED */ sub_44962( l_U388[1] );
    }
    if ( /* ISPEDVALID */ sub_41589(  /* PLAYER_PED_ID */ sub_970(), 0 ))
    {
        SET_PED_EMOTION_STATE(  /* PLAYER_PED_ID */ sub_970(), 8 );
        SET_PED_AUTO_UPDATE_EMOTION_STATE(  /* PLAYER_PED_ID */ sub_970(), 0 );
    }
     /* STARTTIMER */ sub_2191( ref l_U221 );
     /* STARTTIMER */ sub_2191( ref l_U231 );
    if (NOT AUDIO_IS_MUSIC_PLAYING())
    {
         /* WRITESCRIPTLOG */ sub_487( "CR", "Playing: PANAMA_FINAL Mood: PANAMA_FINAL_2", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2", "PANAMA_FINAL_2", 0, -1, -1, -1082130432, 0 );
    }
    if (NOT l_U219)
    {
         /* WRITESCRIPTLOG */ sub_487( "SA", "Swapping alarm clock.", 0 );
        l_U219 = 1;
         /* P_LL_SWAP_ALARM_CLOCK */ sub_42252();
    }
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_11_01_SetupBlendout - END", 0 );
    return;
}

/* P_LL_BUNK_REBELS_SETUP */ void sub_43402()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_REBELS_SETUP - START", 0 );
     /* P_SETUP_AI_GROUP */ sub_43491( ref l_U335, 0.70000000, 0 );
     /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_43898( ref l_U388, "piLL_BunkRebels" );
    if ( /* ISPEDVALID */ sub_41589( l_U388[0], 0 ))
    {
         /* F_GIVEPEDWEAPON */ sub_8524( l_U388[0], -1404433099, 25000, 0, 0 );
        SET_PED_AI_TEMPLATE( l_U388[0], ref g_U1472 );
        SET_PED_COMBAT_RANGE_MIN( l_U388[0], 3.50000000 );
        SET_PED_COMBAT_RANGE_MAX( l_U388[0], 7 );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_44139( l_U388[0], ref l_U335 );
        SET_ROOM_FOR_PED_BY_NAME( l_U388[0], ref g_U3167 );
        SET_PED_CAN_INTERACT_WITH_DOORS( l_U388[0], 0 );
        SET_PED_COMBAT_ATTRIBUTES( l_U388[0], 1, 0 );
        SET_PED_SEEING_RANGE( l_U388[0], 60.00000000, 5 );
    }
    if ( /* ISPEDVALID */ sub_41589( l_U388[1], 0 ))
    {
         /* F_GIVEPEDWEAPON */ sub_8524( l_U388[1], -1404433099, 25000, 0, 0 );
        SET_PED_AI_TEMPLATE( l_U388[1], ref g_U1472 );
        SET_PED_COMBAT_RANGE_MIN( l_U388[1], 1 );
        SET_PED_COMBAT_RANGE_MAX( l_U388[1], 7 );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_44139( l_U388[1], ref l_U335 );
        SET_ROOM_FOR_PED_BY_NAME( l_U388[1], ref g_U3183 );
        SET_PED_CAN_INTERACT_WITH_DOORS( l_U388[1], 0 );
        SET_PED_COMBAT_ATTRIBUTES( l_U388[1], 1, 0 );
    }
    if ( /* ISPEDVALID */ sub_41589( l_U388[2], 0 ))
    {
        SET_PED_AI_TEMPLATE( l_U388[2], ref g_U1480 );
         /* F_GIVEPEDWEAPON */ sub_8524( l_U388[2], -1404433099, 25000, 0, 0 );
        SET_ROOM_FOR_PED_BY_NAME( l_U388[2], ref g_U3183 );
         /* P_TETHERPED */ sub_44852( ref l_U342, l_U388[2], 1 );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_44139( l_U388[2], ref l_U335 );
         /* P_ACTIVATEPED */ sub_44962( l_U388[2] );
        SET_PED_CAN_INTERACT_WITH_DOORS( l_U388[2], 0 );
    }
     /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_43898( ref l_U388, "BunkRebels" );
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_REBELS_SETUP - END", 0 );
    return;
}

/* P_SETUP_AI_GROUP */ void sub_43491(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_43898(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_44139(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_8133( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_43491( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_43491( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_TETHERPED */ void sub_44852(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_ACTIVATEPED */ void sub_44962(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_LL_BUNK_REBELS_START_SEARCH_ISS */ void sub_45257()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_REBELS_START_SEARCH_ISS: START", 0 );
    ISEQ_REGISTER_ENTITY( 945770955, "s_pan_rmsearch_gmed1", l_U388[0], 0 );
    ISEQ_REGISTER_ENTITY( 945770955, "s_pan_rmsearch_gmed2", l_U388[1], 0 );
     /* TELEPORTPED */ sub_45476( l_U388[0], l_U392[0]._fU0, l_U392[0]._fU12 );
     /* TELEPORTPED */ sub_45476( l_U388[1], l_U392[1]._fU0, l_U392[1]._fU12 );
    ISEQ_START( 945770955 );
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_REBELS_START_SEARCH_ISS: END", 0 );
    return;
}

/* TELEPORTPED */ void sub_45476(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* F_LL_11_01_HANDLEBLENDOUT */ int sub_46099()
{
    if (l_U188._fU52)
    {
        DO_SCREEN_FADE_IN( 100 );
    }
     /* P_LL_HANDLE_REBELS_KICK_IN_DOOR */ sub_46161();
    if (( /* ISTIMERDONE */ sub_2324( ref l_U231 )) == 1)
    {
         /* P_LL_BUNK_REBEL_ROOM_SEARCH_SPEECH_1 */ sub_46462();
         /* STARTTIMER */ sub_2191( ref l_U240 );
    }
    if (( /* ISTIMERDONE */ sub_2324( ref l_U240 )) == 1)
    {
         /* P_LL_BUNK_REBEL_ROOM_SEARCH_SPEECH_2 */ sub_48236();
    }
    if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_PAN_CP_01", "BLEND_OUT_11_01_PANAMA_CAM" )) - 1))
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( -99.00000000, 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( 0.00000000, 1065353216, 0 );
        CAMERA_FREEZE_FRAME( 1, 500, 0, 0 );
        return 1;
    }
    return 0;
}

/* P_LL_HANDLE_REBELS_KICK_IN_DOOR */ void sub_46161()
{
    if (( /* ISPEDVALID */ sub_41589( l_U388[1], 0 )) == 1)
    {
        if (( /* ISTIMERDONE */ sub_2324( ref l_U221 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_HANDLE_REBELS_KICK_IN_DOOR: Playing Door Kick FX", 0 );
            l_U230 = GET_SOUND_ID();
            PLAY_SOUND_FROM_PED( l_U230, "S_PAN_SEARCH_DOOR_KICK", l_U388[1] );
            START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Pana_DoorFrameSplinters_S", -36.15923000, 5.28439100, 0.39699400, 0.00000000, 0.00000000, 0.00000000, 1.00000000 );
        }
    }
    return;
}

/* P_LL_BUNK_REBEL_ROOM_SEARCH_SPEECH_1 */ void sub_46462()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_REBEL_ROOM_SEARCH_SPEECH_1: START", 0 );
     /* KILL_SPEECH */ sub_46573( ref g_U1246, 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_46840( ref g_U1246 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_46966( 3, l_U388[1], "M11_REBL_02_Mus", ref g_U1246, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_46966( 2, l_U388[0], "M11_REBL_01_Avg", ref g_U1246, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_47250( "SPAN_VIG01A", ref g_U1246, 8, 1 );
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_REBEL_ROOM_SEARCH_SPEECH_1: END", 0 );
    return;
}

/* KILL_SPEECH */ void sub_46573(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_46601( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_46601(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_46840(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_46966(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_47250(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_47295( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_47295(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_47382( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_47382(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_47434( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_47952( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_47434(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_47952(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_LL_BUNK_REBEL_ROOM_SEARCH_SPEECH_2 */ void sub_48236()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_REBEL_ROOM_SEARCH_SPEECH_2: START", 0 );
     /* KILL_SPEECH */ sub_46573( ref g_U1246, 1 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_46840( ref g_U1246 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_46966( 3, l_U388[0], "M11_REBL_02_Mus", ref g_U1246, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_46966( 2, l_U388[1], "M11_REBL_01_Avg", ref g_U1246, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_47250( "SPAN_VIG01B", ref g_U1246, 8, 1 );
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_REBEL_ROOM_SEARCH_SPEECH_2: END", 0 );
    return;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_48662(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_487( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_48886( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 48783, 48833, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_48783()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_48833()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_48886(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* P_LL_CREATE_ALARM_CLOCK_PRE_CUTSCENE */ void sub_49196()
{
     /* WRITESCRIPTLOG */ sub_487( "SA", "P_LL_CREATE_ALARM_CLOCK_PRE_CUTSCENE start", 0 );
    l_U215 =  /* CREATEOBJECT */ sub_42383( g_U1536, l_U216, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U215, ref g_U3135 );
     /* WRITESCRIPTLOG */ sub_487( "SA", "P_LL_CREATE_ALARM_CLOCK_PRE_CUTSCENE end", 0 );
    return;
}

/* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ void sub_49434(int iParam0, unknown uParam1, unknown uParam2)
{
    iParam0->_fU68 = 1;
    iParam0->_fU72 = 1;
    iParam0->_fU76 = uParam1;
    iParam0->_fU80 = uParam2;
    iParam0->_fU24 = 1;
    return;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_49556(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_487( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_487( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_487( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_487( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_487( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_487( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_34554( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_487( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_50447( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_50447( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_487( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_50991( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_50447( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_51371( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_51371( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* NIS_PRE_SETUP */ void sub_50447(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1008(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_970(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_970() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_970(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_50991(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_970(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_970(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_970(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_970(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_970(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_51371(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1008(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_970(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_51469();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_51469()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_970(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_970(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_970(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_970(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_51826(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_487( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_487( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_9298( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_52117( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_52594( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_52594( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_52854( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_52594( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_52854( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_52854( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_52594( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_52854( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_52854( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_52854( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_52594( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_52854( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_52854( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_52854( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_52854( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_54434( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_487( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_52117(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6313( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_487( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_487( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_52594(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_52854(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_54434(int iParam0)
{
     /* WRITE_STRING */ sub_8133( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_54522( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_54599( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_54599( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_54599( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_54599( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_54599( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_55428( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU52 );
     /* WRITE_STRING */ sub_8133( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU96 );
     /* WRITE_STRING */ sub_8133( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU100 );
     /* WRITE_STRING */ sub_8133( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU104 );
     /* WRITE_STRING */ sub_8133( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU108 );
     /* WRITE_STRING */ sub_8133( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU112 );
     /* WRITE_STRING */ sub_8133( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU116 );
     /* WRITE_STRING */ sub_8133( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU120 );
     /* WRITE_STRING */ sub_8133( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU124 );
     /* WRITE_STRING */ sub_8133( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU128 );
     /* WRITE_STRING */ sub_8133( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_39574( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_39574( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_39574( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_54522(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_54599(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_55428(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_LL_KITCHEN_REBELS_SETUP */ void sub_56468()
{
    int I;

     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_KITCHEN_REBELS_SETUP - START", 0 );
    for ( I = 0; I < l_U455; I++ )
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U455[I], 1 );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_44139( l_U455[I], ref l_U335 );
        SET_PED_ALERTNESS( l_U455[I], 3 );
        SET_PED_AI_TEMPLATE( l_U455[I], ref g_U1504 );
        SET_PED_COMBAT_RANGE_MAX( l_U455[I], 17.00000000 );
        SET_PED_COMBAT_RANGE_MIN( l_U455[I], 4.00000000 );
    }
    if (NOT (IS_PED_DEAD( l_U455[0] )))
    {
         /* F_GIVEPEDWEAPON */ sub_8524( l_U455[0], -1404433099, 25000, 0, 0 );
        SET_ROOM_FOR_PED_BY_NAME( l_U455[0], ref g_U3207 );
         /* P_TETHERPED */ sub_44852( ref l_U342, l_U455[0], 1 );
        SET_PED_SUGGESTED_COVER_POINT( l_U455[0], "GenCover", "CDE695FF_8F839446_Popover4" );
    }
    if (NOT (IS_PED_DEAD( l_U455[1] )))
    {
         /* F_GIVEPEDWEAPON */ sub_8524( l_U455[1], -612753081, 25000, 0, 0 );
        SET_ROOM_FOR_PED_BY_NAME( l_U455[1], ref g_U3199 );
         /* P_TETHERPED */ sub_44852( ref l_U342, l_U455[1], 1 );
        SET_PED_SUGGESTED_COVER_POINT( l_U455[1], "GenCover", "CDE695FF_8F839446_Popover6" );
    }
    if (NOT (IS_PED_DEAD( l_U455[2] )))
    {
         /* F_GIVEPEDWEAPON */ sub_8524( l_U455[2], -1404433099, 25000, 0, 0 );
        SET_ROOM_FOR_PED_BY_NAME( l_U455[2], ref g_U3207 );
         /* P_TETHERPED */ sub_44852( ref l_U342, l_U455[2], 1 );
        SET_PED_SUGGESTED_COVER_POINT( l_U455[2], "GenCover", "CDE695FF_8F839446_Popover2" );
    }
     /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_43898( ref l_U455, "KitchenRebels" );
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_KITCHEN_REBELS_SETUP - END", 0 );
    return;
}

/* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ void sub_57183()
{
     /* WRITESCRIPTLOG */ sub_487( "CR", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - START", 0 );
    g_U4062 = GET_PAYNEKILLER_AMT();
     /* WRITESCRIPTLOG */ sub_487( "CR", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - END", 0 );
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_57364(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_57430( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_57430(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_5361( uParam0 );
            }
        }
    }
    return;
}

/* P_LL_HANDLE_AUDIO_CHANGE_MOOD_DURING_GAMEPLAY */ void sub_57578()
{
    if ((l_U345 == 0) AND (( /* F_GET_NUM_DEAD_PEDS_IN_LL */ sub_57636()) >= 3))
    {
        AUDIO_MUSIC_FORCE_TRACK( "PANAMA_FINAL", "PANAMA_FINAL_2_4", "PANAMA_FINAL_2_4", 0.00000000, 5000, -1, -1082130432, 0 );
         /* WRITESCRIPTLOG */ sub_487( "CR", "P_LL_AUDIO_CHANGE_MOOD_DURING_GAMEPLAY: Changing to PANAMA_FINAL_2_4", 0 );
        l_U345 = 1;
    }
    return;
}

/* F_GET_NUM_DEAD_PEDS_IN_LL */ void sub_57636()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 2; I++ )
    {
        if (DOES_PED_EXIST( l_U455[I] ))
        {
            if (IS_PED_DEAD( l_U455[I] ))
            {
                Result++;
            }
        }
    }
    for ( I = 0; I <= 2; I++ )
    {
        if (DOES_PED_EXIST( l_U388[I] ))
        {
            if (IS_PED_DEAD( l_U388[I] ))
            {
                Result++;
            }
        }
    }
    return Result;
}

/* P_HANDLE_PASSOS_BED_POI */ void sub_58015()
{
    if (l_U185 == 10)
    {
        l_U788 = 1;
    }
    else
    {
        l_U788 = 0;
    }
    if ((NOT ( /* F_IS_POI_AVAILABLE */ sub_58733( ref l_U655 ))) AND ( /* F_ACTIVATE_POI */ sub_58080()))
    {
         /* P_SET_POI_AVAILABLE */ sub_15633( ref l_U655, 1 );
    }
    if (( /* F_IS_POI_AVAILABLE */ sub_58733( ref l_U655 )) AND (NOT ( /* F_ACTIVATE_POI */ sub_58080())))
    {
         /* P_SET_POI_AVAILABLE */ sub_15633( ref l_U655, 0 );
    }
    if (( /* F_POI_CAN_PLAY_UNAVALIABLE_MONO */ sub_58831( ref l_U655 )) == 1)
    {
         /* RESET_SCRIPT_SPEECH_STRUCT */ sub_46840( ref g_U1266 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_46966( 0,  /* PLAYER_PED_ID */ sub_970(), "MAX", ref g_U1266, 2, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_46966( 1,  /* PLAYER_PED_ID */ sub_970(), "MAX", ref g_U1266, 2, 0 );
         /* PLAY_SINGLE_SPEECH */ sub_47250( "EXPLORE_ITEM", ref g_U1266, 8, 1 );
    }
    if (( /* F_HANDLE_POI */ sub_59207( ref l_U655 )) == 1)
    {
        l_U185 = 11;
         /* WRITESCRIPTLOG */ sub_487( "CR", "eCheckpointState = CP_LL_POI_PASSOS_BED", 0 );
    }
    return;
}

/* F_ACTIVATE_POI */ int sub_58080()
{
    if ((NOT ( /* F_IS_PED_AWARE_OF_PED */ sub_58201( ref l_U557,  /* PLAYER_PED_ID */ sub_970(), 1, 1, 1, 0, 1 ))) AND ((NOT ( /* F_IS_PED_AWARE_OF_PED */ sub_58201( ref l_U543,  /* PLAYER_PED_ID */ sub_970(), 1, 1, 1, 0, 1 ))) AND ((NOT ( /* F_IS_PED_AWARE_OF_PED */ sub_58201( ref l_U529,  /* PLAYER_PED_ID */ sub_970(), 1, 1, 1, 0, 1 ))) AND ((NOT ( /* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ sub_58121( ref l_U455,  /* PLAYER_PED_ID */ sub_970(), 1, 1, 1, 0, 1 ))) AND (NOT ( /* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ sub_58121( ref l_U388,  /* PLAYER_PED_ID */ sub_970(), 1, 1, 1, 0, 1 )))))))
    {
        return 1;
    }
    return 0;
}

/* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ int sub_58121(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (( /* F_IS_PED_AWARE_OF_PED */ sub_58201( ref (uParam0^)[I], uParam1, uParam2, uParam3, uParam4, uParam5, uParam6 )) == 1)
        {
            return 1;
        }
    }
    return 0;
}

/* F_IS_PED_AWARE_OF_PED */ int sub_58201(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, int iParam6)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        if ((uParam3) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 1 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_487( "MF", "ped has SEEN target ped", 0 );
            }
            return 1;
        }
        else if ((uParam4) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 8 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_487( "MF", "ped has BEEN SHOT AT by target ped", 0 );
            }
            return 1;
        }
        else if ((uParam2) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 2 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_487( "MF", "ped has HEARD target ped", 0 );
            }
            return 1;
        }
        else if ((uParam5) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 4 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_487( "MF", "ped has BEEN TOLD ABOUT target ped", 0 );
            }
            return 1;
        };;;;
    }
    return 0;
}

/* F_IS_POI_AVAILABLE */ void sub_58733(int iParam0)
{
    return iParam0->_fU56;
}

/* F_POI_CAN_PLAY_UNAVALIABLE_MONO */ int sub_58831(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND ((iParam0->_fU76 == 0) AND (( /* F_IS_POI_AVAILABLE */ sub_58733( iParam0 )) == 0)))
    {
        if ((( /* F_HASACTIONBEENPRESSED */ sub_59021()) == 1) AND (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_970() )) == 0) AND (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_970() )) == 0) AND (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_970() )) == 0) AND (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_970() )) == 0) AND (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_970() )) == 0) AND ((IS_PLAYER_SHOOTDODGING() == 0) AND ((IS_MONOLOGUE_PLAYING() == 0) AND ((IS_INTERACTIONTEXT_AVAILABLE() == 0) AND (IS_INTERACTIONTEXT_ONSCREEN() == 1))))))))))
        {
            iParam0->_fU76 = 1;
            return 1;
        }
    }
    return 0;
}

/* F_HASACTIONBEENPRESSED */ int sub_59021()
{
    if ((IS_CONTROL_JUST_PRESSED( 0, 30 )) == 1)
    {
        return 1;
    }
    return 0;
}

/* F_HANDLE_POI */ int sub_59207(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    int iVar6;
    int iVar7;
    int iVar8;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )) == 0)
    {
        if (iParam0->_fU0 == 1)
        {
            uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_970() )};
            iVar6 = 0;
            if (iParam0->_fU80 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_59308(  /* PLAYER_PED_ID */ sub_970(), iParam0->_fU116 )) == 1)
                {
                    if (iParam0->_fU300 == 1)
                    {
                        if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                        {
                            iVar6 = 1;
                        }
                    }
                    else
                    {
                        iVar6 = 1;
                    }
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU84 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_PED_ON_SCREEN( iParam0->_fU316, 0 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU100, 1 )) <= iParam0->_fU112)
            {
                if (iParam0->_fU300 == 1)
                {
                    if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                    {
                        iVar6 = 1;
                    }
                }
                else
                {
                    iVar6 = 1;
                }
            };;;;
            iVar7 = 0;
            if (iParam0->_fU88 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_59308(  /* PLAYER_PED_ID */ sub_970(), iParam0->_fU216 )) == 1)
                {
                    iVar7 = 1;
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU92 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU200, 1 )) <= iParam0->_fU212)
            {
                iVar7 = 1;
            };;;;
            if (iVar6 == 1)
            {
                if ((iParam0->_fU4 != 3) AND (iParam0->_fU52 == 1))
                {
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_15697( iParam0 );
                    }
                    iVar8 = 0;
                    if ((IS_WEAPON_PICKUP_VISIBLE() == 0) AND ((iParam0->_fU60 == 0) AND (( /* F_ISACTIONINGAVAILABLE */ sub_15793( iParam0 )) == 1)))
                    {
                        SET_ACTION_CONSUMED( 0, 1 );
                        if (( /* F_HASACTIONBEENPRESSED */ sub_59021()) == 1)
                        {
                            iVar8 = 1;
                        }
                    }
                    if (iVar8 == 1)
                    {
                        if (iParam0->_fU332 == 0)
                        {
                             /* P_ENABLE_POI */ sub_60214( iParam0, 0 );
                            iParam0->_fU64 = 1;
                        }
                        if (iParam0->_fU68 == 1)
                        {
                            iParam0->_fU72 = 0;
                        }
                        return 1;
                    }
                    else if (iParam0->_fU8 != 2)
                    {
                        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                        {
                             /* P_ENABLEPOIGLINT */ sub_14968( iParam0, 0 );
                             /* P_ENABLEPOIINTERACTIONTEXT */ sub_60300( iParam0, 1 );
                        }
                        else if (iParam0->_fU320 == 1)
                        {
                             /* P_ENABLEPOIGLINT */ sub_14968( iParam0, 1 );
                        }
                        iParam0->_fU8 = 2;
                    }
                    if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                    {
                        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )) == 0)
                        {
                            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_970(), 1 );
                            iParam0->_fU328 = 1;
                        }
                    }
                }
            }
            else if (iVar7 == 1)
            {
                if (iParam0->_fU8 != 1)
                {
                    if ((iParam0->_fU4 != 3) AND (iParam0->_fU320 == 1))
                    {
                         /* P_ENABLEPOIGLINT */ sub_14968( iParam0, 1 );
                    }
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_ENABLEPOIINTERACTIONTEXT */ sub_60300( iParam0, 0 );
                    }
                    if (iParam0->_fU96 == 1)
                    {
                        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )) == 0) AND ((((IS_PED_DEAD( iParam0->_fU316 )) == 1) || ((IS_PED_DEAD( iParam0->_fU316 )) == 0)) AND ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)))
                        {
                            TASK_LOOK_AT_PED(  /* PLAYER_PED_ID */ sub_970(), iParam0->_fU316, -1, 0 );
                        }
                    }
                    else if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )) == 0)
                    {
                        TASK_LOOK_AT_COORD(  /* PLAYER_PED_ID */ sub_970(), iParam0->_fU100, -1, 0 );
                    }
                    iParam0->_fU340 = 1;
                    if ((iParam0->_fU72 == 0) AND ((iParam0->_fU68 == 1) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU8 == 2))))
                    {
                        iParam0->_fU72 = 1;
                    }
                    iParam0->_fU8 = 1;
                }
                if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                {
                    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )) == 0)
                    {
                        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_970(), 1 );
                        iParam0->_fU328 = 1;
                    }
                }
            }
            else if ((iParam0->_fU4 == 1) || (iParam0->_fU4 == 3))
            {
                ;
            }
            else if (iParam0->_fU8 != 0)
            {
                if (iParam0->_fU320 == 1)
                {
                     /* P_ENABLEPOIGLINT */ sub_14968( iParam0, 0 );
                }
            }
            if (iParam0->_fU8 == 2)
            {
                if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                {
                     /* P_ENABLEPOIINTERACTIONTEXT */ sub_60300( iParam0, 0 );
                }
            }
            if (iParam0->_fU340)
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )) == 0)
                {
                    TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_970() );
                    iParam0->_fU340 = 0;
                }
            }
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )) == 0)
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_970(), 0 );
                    iParam0->_fU328 = 0;
                }
            }
            if (iParam0->_fU332 == 1)
            {
                 /* P_ENABLEPOIINTERACTIONTEXT */ sub_60300( iParam0, 0 );
            }
            iParam0->_fU8 = 0;;;
        }
    }
    return 0;
}

/* F_ISPEDINTRIGGERBOX */ int sub_59308(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_ENABLE_POI */ void sub_60214(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if ((iParam0->_fU4 == 1) AND (iParam0->_fU320 == 1))
        {
             /* P_ENABLEPOIGLINT */ sub_14968( iParam0, 1 );
        }
        iParam0->_fU0 = 1;
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_14968( iParam0, 0 );
         /* P_ENABLEPOIINTERACTIONTEXT */ sub_60300( iParam0, 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )) == 0)
        {
            TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_970() );
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_970(), 0 );
                iParam0->_fU328 = 0;
            }
        }
        iParam0->_fU8 = 0;
        iParam0->_fU0 = 0;
    }
    return;
}

/* P_ENABLEPOIINTERACTIONTEXT */ void sub_60300(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
        SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
        if ((iParam0->_fU72 == 0) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU68 == 1)))
        {
            SET_INTERACTIONTEXT_VISIBLE( 0 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
        else
        {
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_15697( iParam0 );
        if (iParam0->_fU332 == 1)
        {
            SET_INTERACTIONTEXT_PULSE( 1 );
            SET_INTERACTIONTEXT_PULSE_PERIOD( iParam0->_fU336 );
        }
    }
    else
    {
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
    }
    return;
}

/* P_HANDLE_NOTE_POI */ void sub_61523()
{
    if (l_U185 == 10)
    {
        l_U932 = 1;
    }
    else
    {
        l_U932 = 0;
    }
    if ((NOT ( /* F_IS_POI_AVAILABLE */ sub_58733( ref l_U799 ))) AND ( /* F_ACTIVATE_POI */ sub_58080()))
    {
         /* P_SET_POI_AVAILABLE */ sub_15633( ref l_U799, 1 );
    }
    if (( /* F_IS_POI_AVAILABLE */ sub_58733( ref l_U799 )) AND (NOT ( /* F_ACTIVATE_POI */ sub_58080())))
    {
         /* P_SET_POI_AVAILABLE */ sub_15633( ref l_U799, 0 );
    }
    if (( /* F_POI_CAN_PLAY_UNAVALIABLE_MONO */ sub_58831( ref l_U799 )) == 1)
    {
         /* RESET_SCRIPT_SPEECH_STRUCT */ sub_46840( ref g_U1256 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_46966( 0,  /* PLAYER_PED_ID */ sub_970(), "MAX", ref g_U1256, 2, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_46966( 1,  /* PLAYER_PED_ID */ sub_970(), "MAX", ref g_U1256, 2, 0 );
         /* PLAY_SINGLE_SPEECH */ sub_47250( "EXPLORE_ITEM", ref g_U1256, 8, 1 );
    }
    if (( /* F_HANDLE_POI */ sub_59207( ref l_U799 )) == 1)
    {
        l_U185 = 12;
         /* WRITESCRIPTLOG */ sub_487( "CR", "eCheckpointState = CP_LL_POI_NOTE", 0 );
    }
    return;
}

/* P_HANDLE_MAXS_PAINKILLER_DIALOGUE */ void sub_61819()
{
    if (NOT ( /* HASTIMERBEENACTIVATED */ sub_1907( ref g_U4052 )))
    {
         /* P_CREATE_AND_START_TIMER */ sub_61889( ref g_U4052, g_U4061 );
    }
    if (((g_U4052._fU16) || ( /* ISTIMERDONE */ sub_2324( ref g_U4052 ))) AND ( /* F_GBL_HAS_PLAYER_JUST_ACQUIRED_PAIN_KILLERS */ sub_61952()))
    {
         /* WRITESCRIPTLOG */ sub_487( "MF", "Playing Speech: SPAN_MXFNDS1", 0 );
         /* P_SPEECH_PLAY_MONOLOGUE */ sub_62233( ref g_U4063, ref g_U1246 );
         /* RESETTIMER */ sub_2900( ref g_U4052 );
    }
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_61889(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_2041( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_2191( uParam0 );
    return;
}

/* F_GBL_HAS_PLAYER_JUST_ACQUIRED_PAIN_KILLERS */ int sub_61952()
{
    if (GET_PAYNEKILLER_AMT() > g_U4062)
    {
         /* WRITESCRIPTLOG */ sub_487( "CR", "Player picked up Payne Killers!", 0 );
        PRINTSTRING( "HAD: " );
         /* WRITE_INT */ sub_39574( g_U4062 );
        PRINTSTRING( "NOW: " );
         /* WRITE_INT */ sub_39574( GET_PAYNEKILLER_AMT() );
        g_U4062 = GET_PAYNEKILLER_AMT();
        return 1;
    }
    g_U4062 = GET_PAYNEKILLER_AMT();
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_62233(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_46840( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_46966( 0,  /* PLAYER_PED_ID */ sub_970(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_46966( 1,  /* PLAYER_PED_ID */ sub_970(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_47250( uParam0, uParam1, 8, 1 );
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_62423(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_59308(  /* PLAYER_PED_ID */ sub_970(), uParam0 );
}

/* MAL_WRITESCRIPTLOG */ void sub_62529(unknown uParam0)
{
    unknown uVar3;

    uVar3 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar3, 1537, "MSWW", 1537, uParam0, 1537, "###" );
    return;
}

/* MAL_SETACTINT */ void sub_62652(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        PED_SET_ACTION_INTENTION( uParam0, uParam1, uParam2, l_U52 );
    }
    return;
}

/* MAL_GOTOCOORDVIANAVMESHACHIEVEHEADING */ void sub_62815(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    unknown uVar11;

    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        OPEN_SEQUENCE_TASK( ref uVar11 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, uParam7 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, uParam1, uParam6, -1, 1048576000, 0, 0 );
        TASK_ACHIEVE_HEADING( 0, uParam4, 0, uParam8 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, uParam5 );
        TASK_STAND_STILL( 0, -1 );
        CLOSE_SEQUENCE_TASK( uVar11 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar11 );
        CLEAR_SEQUENCE_TASK( uVar11 );
    }
    return;
}

/* MAL_GOTOCOORDVIANAVMESH */ void sub_63023(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6)
{
    unknown uVar9;

    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        OPEN_SEQUENCE_TASK( ref uVar9 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, uParam6 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, uParam1, uParam5, -1, 1048576000, 0, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, uParam4 );
        TASK_STAND_STILL( 0, -1 );
        CLOSE_SEQUENCE_TASK( uVar9 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar9 );
        CLEAR_SEQUENCE_TASK( uVar9 );
    }
    return;
}

/* MAL_ISACTINTCOMPLETED */ int sub_63197(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (( /* MAL_GETACTINTSTATUS */ sub_63236( (uParam0^), uParam1 )) == 1)
    {
        if (bParam2)
        {
             /* MAL_FINISHACTINT */ sub_63324( uParam0, uParam1 );
        }
        return 1;
    }
    return 0;
}

/* MAL_GETACTINTSTATUS */ int sub_63236(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return PED_GET_ACTION_INTENTION_STATUS( uParam0, uParam1 );
    }
    return 0;
}

/* MAL_FINISHACTINT */ void sub_63324(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        PED_FINISH_ACTION_INTENTION( (uParam0^), uParam1 );
    }
    return;
}

/* P_LL_BUNK_REBELS_SPOT_PLAYER */ void sub_63439(unknown uParam0)
{
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_REBELS_SPOT_PLAYER: START", 0 );
     /* P_REGISTER_PED_ARRAY_TARGET */ sub_63538( ref l_U388,  /* PLAYER_PED_ID */ sub_970() );
     /* MAL_UNBLOCKANDCOMBATPLAYER */ sub_63667( ref l_U388[0], 2, 0 );
    if ( /* F_ISPEDINTRIGGERBOX */ sub_59308( l_U388[1], l_U346 ))
    {
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() ))) AND (NOT (IS_PED_DEAD( l_U388[1] ))))
        {
             /* WRITESCRIPTLOG */ sub_487( "MF", "Telling rebel to take cover from player", 0 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U388[1], 0 );
            OPEN_SEQUENCE_TASK( ref uVar3 );
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_970() );
            CLOSE_SEQUENCE_TASK( uVar3 );
            SET_PED_ALERTNESS( l_U388[1], 2 );
            REGISTER_TARGET( l_U388[1],  /* PLAYER_PED_ID */ sub_970() );
            TASK_PERFORM_SEQUENCE( l_U388[1], uVar3 );
            CLEAR_SEQUENCE_TASK( uVar3 );
        }
    }
    else
    {
         /* MAL_UNBLOCKANDCOMBATPLAYER */ sub_63667( ref l_U388[1], 2, 0 );
    }
     /* MAL_SETACTINT */ sub_62652( l_U388[0], 47, 1000 );
     /* MAL_SETACTINT */ sub_62652( l_U388[1], 47, 1000 );
    if ( /* ISPEDVALID */ sub_41589(  /* PLAYER_PED_ID */ sub_970(), 0 ))
    {
        SET_PED_AUTO_UPDATE_EMOTION_STATE(  /* PLAYER_PED_ID */ sub_970(), 1 );
    }
    ENABLE_WALLA_ZONE( "S_PANA_WZ_LOWER_DECK_GET_READY", 1 );
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_REBELS_SPOT_PLAYER: END", 0 );
    return;
}

/* P_REGISTER_PED_ARRAY_TARGET */ void sub_63538(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if ( /* ISPEDVALID */ sub_41589( (uParam0^)[I], 0 ))
        {
            if ( /* ISPEDVALID */ sub_41589( uParam1, 0 ))
            {
                REGISTER_TARGET( (uParam0^)[I], uParam1 );
            }
        }
    }
    return;
}

/* MAL_UNBLOCKANDCOMBATPLAYER */ void sub_63667(unknown uParam0, unknown uParam1, unknown uParam2)
{
     /* MAL_UNBLOCKANDCOMBATPED */ sub_63717( uParam0,  /* PLAYER_PED_ID */ sub_970(), uParam1, uParam2 );
    return;
}

/* MAL_UNBLOCKANDCOMBATPED */ void sub_63717(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

     /* MAL_WRITESCRIPTLOG */ sub_62529( "MAL_UnblockAndCombatPed" );
    OPEN_SEQUENCE_TASK( ref uVar6 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
         /* MAL_WRITESCRIPTLOG */ sub_62529( "MAL_UnblockAndCombatPed: Victim is not dead" );
        TASK_COMBAT_PED( 0, uParam1 );
    }
    CLOSE_SEQUENCE_TASK( uVar6 );
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
         /* MAL_WRITESCRIPTLOG */ sub_62529( "MAL_UnblockAndCombatPed: Ped is not dead" );
        if (bParam3)
        {
            CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        }
        else
        {
            CLEAR_PED_TASKS( (uParam0^) );
        }
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam2 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar6 );
    }
    CLEAR_SEQUENCE_TASK( uVar6 );
    return;
}

/* P_LL_BUNK_HALLWAY_ENTRANCE_ATTACK */ void sub_64496()
{
    unknown uVar2;

     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_HALLWAY_ENTRANCE_ATTACK: START", 0 );
    OPEN_SEQUENCE_TASK( ref uVar2 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
    TASK_COMBAT_MOVE_TO_COVER( 0, "pana_GP_LowerLevel", "Corner Position40",  /* PLAYER_PED_ID */ sub_970() );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_970() );
    CLOSE_SEQUENCE_TASK( uVar2 );
    if ( /* ISPEDVALID */ sub_41589( l_U388[2], 0 ))
    {
        REGISTER_TARGET( l_U388[2],  /* PLAYER_PED_ID */ sub_970() );
        TASK_PERFORM_SEQUENCE( l_U388[2], uVar2 );
    }
    CLEAR_SEQUENCE_TASK( uVar2 );
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_HALLWAY_ENTRANCE_ATTACK: END", 0 );
    return;
}

/* P_LL_BUNK_REBELS_SPOT_PLAYER_DIALOGUE */ void sub_64823()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_REBELS_SPOT_PLAYER_DIALOGUE: START", 0 );
     /* KILL_SPEECH */ sub_46573( ref g_U1246, 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_46840( ref g_U1246 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_46966( 2, l_U388[1], "M11_REBL_01_Avg", ref g_U1246, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_46966( 3, l_U388[0], "M11_REBL_02_Mus", ref g_U1246, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_47250( "SPAN_VIG01C", ref g_U1246, 8, 1 );
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_BUNK_REBELS_SPOT_PLAYER_DIALOGUE: END", 0 );
    return;
}

/* P_LL_SETUP_AGRESSIVE_GROUP_ADVANCE */ void sub_65207()
{
    int I;

     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_SETUP_AGRESSIVE_GROUP_ADVANCE - START", 0 );
    l_U341 = PEDGROUPTASK_ADVANCE_CREATE( l_U335._fU0 );
    for ( I = 0; I < l_U455; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U455[I] )))
        {
            PEDGROUPTASK_ADVANCE_ASSIGNPED( l_U335._fU0, l_U341, l_U455[I] );
            PEDGROUPTASK_ADVANCE_SETPEDCANADVANCE( l_U335._fU0, l_U341, l_U455[I], 0 );
        }
    }
    for ( I = 0; I < l_U388; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U388[I] )))
        {
            PEDGROUPTASK_ADVANCE_ASSIGNPED( l_U335._fU0, l_U341, l_U388[I] );
        }
    }
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
    {
        PEDGROUPTASK_ADVANCE_SETTARGET_PED( l_U335._fU0, l_U341,  /* PLAYER_PED_ID */ sub_970() );
    }
    PEDGROUPTASK_ADVANCE_SETTIMETOHIDE( l_U335._fU0, l_U341, 2.00000000 );
    PEDGROUPTASK_ADVANCE_SETTIMETOIDLE( l_U335._fU0, l_U341, 0.00000000 );
    PEDGROUPTASK_ADVANCE_SETTIMERANGEFORALLPEDSTOSTARTFIRING( l_U335._fU0, l_U341, 1.00000000 );
    PEDGROUPTASK_ADVANCE_SETADVANCEDISTANCE( l_U335._fU0, l_U341, 3.00000000 );
    PEDGROUPTASK_ADVANCE_SETNUMPEDSTOADVANCE( l_U335._fU0, l_U341, 2 );
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_SETUP_AGRESSIVE_GROUP_ADVANCE - END", 0 );
    return;
}

/* P_ASSIGN_BULLET_CAMS */ void sub_65820()
{
    if ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65857( ref l_U388 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65857( ref l_U455 ))) == 1)
    {
        if (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U557 )) AND (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U543 )) AND ( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U529 ))))
        {
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_66089( ref l_U455 );
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_66089( ref l_U388 );
        }
    }
    if (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U543 )) AND (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U529 )) AND (( /* F_IS_PED_ARRAY_DEFEATED */ sub_66272( ref l_U455, 0 )) AND ( /* F_IS_PED_ARRAY_DEFEATED */ sub_66272( ref l_U388, 0 )))))
    {
        SET_PED_CAN_TRIGGER_BULLET_CAM( l_U557, 1 );
    }
    if (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U557 )) AND (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U529 )) AND (( /* F_IS_PED_ARRAY_DEFEATED */ sub_66272( ref l_U455, 0 )) AND ( /* F_IS_PED_ARRAY_DEFEATED */ sub_66272( ref l_U388, 0 )))))
    {
        SET_PED_CAN_TRIGGER_BULLET_CAM( l_U543, 1 );
    }
    if (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U557 )) AND (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U543 )) AND (( /* F_IS_PED_ARRAY_DEFEATED */ sub_66272( ref l_U455, 0 )) AND ( /* F_IS_PED_ARRAY_DEFEATED */ sub_66272( ref l_U388, 0 )))))
    {
        SET_PED_CAN_TRIGGER_BULLET_CAM( l_U529, 1 );
    }
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_65857(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_IS_PED_DEFEATED */ int sub_65991(unknown uParam0)
{
    if ((IS_PED_DEAD( (uParam0^) )) AND (DOES_PED_EXIST( (uParam0^) )))
    {
        return 1;
    }
    return 0;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_66089(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65857( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* F_IS_PED_ARRAY_DEFEATED */ int sub_66272(unknown uParam0, boolean bParam1)
{
    if (( /* F_HAS_PED_ARRAY_SPAWNED */ sub_66311( uParam0, 0 )) == 1)
    {
        if (NOT bParam1)
        {
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65857( uParam0 )) == 0)
            {
                return 1;
            }
        }
        if (bParam1)
        {
            if (( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_66471( uParam0 )) == (uParam0^))
            {
                return 1;
            }
        }
    }
    return 0;
}

/* F_HAS_PED_ARRAY_SPAWNED */ void sub_66311(unknown uParam0, boolean bParam1)
{
    int I;
    int Result;

    Result = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if ((DOES_PED_EXIST( (uParam0^)[I] )) == 1)
        {
            Result = 1;
            if (NOT bParam1)
            {
                return 1;
            }
        }
        else
        {
            Result = 0;
        }
    }
    return Result;
}

/* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ void sub_66471(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            if (IS_PED_DEAD( (uParam0^)[I] ))
            {
                Result++;
            }
        }
    }
    return Result;
}

/* P_LL_KITCHEN_WAVE_ATTACK */ void sub_66826()
{
     /* MAL_WRITESCRIPTLOG */ sub_62529( "P_LL_KITCHEN_WAVE_ATTACK: START" );
     /* P_KITCHENREBELATTACKSPED */ sub_66915( ref l_U455[0],  /* PLAYER_PED_ID */ sub_970(), 0 );
     /* P_KITCHENREBELMOVETOCOVER */ sub_67085( ref l_U455[1],  /* PLAYER_PED_ID */ sub_970(), -8.84041300, 1.08304900, -0.65335700, 0 );
     /* P_KITCHENREBELMOVETOCOVER */ sub_67085( ref l_U455[2],  /* PLAYER_PED_ID */ sub_970(), -8.86820100, 4.16574800, -0.65335700, 0 );
    PEDGROUPTASK_ADVANCE_TRIGGER_MOVE( l_U335._fU0, l_U341 );
     /* MAL_WRITESCRIPTLOG */ sub_62529( "P_LL_KITCHEN_WAVE_ATTACK: END" );
    return;
}

/* P_KITCHENREBELATTACKSPED */ void sub_66915(unknown uParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;

    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar5 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, uParam2 );
        TASK_COMBAT_PED( 0, uParam1 );
        CLOSE_SEQUENCE_TASK( uVar5 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar5 );
        CLEAR_SEQUENCE_TASK( uVar5 );
    }
    return;
}

/* P_KITCHENREBELMOVETOCOVER */ void sub_67085(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    unknown uVar8;

    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar8 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, uParam5 );
        TASK_COMBAT_MOVE_TO_COVER_COORDS( 0, uParam2, uParam1 );
        TASK_COMBAT_PED( 0, uParam1 );
        CLOSE_SEQUENCE_TASK( uVar8 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar8 );
        CLEAR_SEQUENCE_TASK( uVar8 );
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_67347(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_59308(  /* PLAYER_PED_ID */ sub_970(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* P_LL_KITCHEN_REBELS_UPDATE_TETHER */ void sub_67482()
{
    int I;

     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_KITCHEN_REBELS_UPDATE_TETHER - START", 0 );
    for ( I = 0; I < l_U455; I++ )
    {
         /* P_REMOVETETHERFROMPED */ sub_67612( ref l_U342, l_U455[I] );
         /* P_TETHERPED */ sub_44852( ref l_U343, l_U455[I], 1 );
    }
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_KITCHEN_REBELS_UPDATE_TETHER - END", 0 );
    return;
}

/* P_REMOVETETHERFROMPED */ void sub_67612(int iParam0, unknown uParam1)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_REMOVE_BOX( uParam1, iParam0->_fU0 );
    }
    return;
}

/* F_LL_REBEL_REINFORCMENT_A_CAN_SPAWN */ int sub_67787()
{
    if (NOT (DOES_PED_EXIST( l_U529 )))
    {
        if (( /* F_ISPLAYERINTRIGGERBOX */ sub_62423( l_U592 )) || (( /* F_ISPLAYERINTRIGGERBOX */ sub_62423( l_U571 )) || (( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_66471( ref l_U455 )) > 0)))
        {
            return 1;
        }
    }
    return 0;
}

/* P_LL_REBEL_REINFORCEMENT_A_CREATE */ void sub_67911()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_REBEL_REINFORCEMENT_A_CREATE - START", 0 );
    l_U529 =  /* CREATEPED */ sub_39909( ref l_U530 );
    if ( /* ISPEDVALID */ sub_41589( l_U529, 0 ))
    {
         /* F_GIVEPEDWEAPON */ sub_8524( l_U529, -612753081, 25000, 0, 0 );
         /* P_TETHERPED */ sub_44852( ref l_U342, l_U529, 1 );
        SET_PED_AI_TEMPLATE( l_U529, ref g_U1504 );
        SET_ROOM_FOR_PED_BY_NAME( l_U529, ref g_U3199 );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_44139( l_U529, ref l_U335 );
        SET_PED_NAME_DEBUG( l_U529, "KitchenReinforcement_A" );
        SET_PED_ALERTNESS( l_U529, 3 );
        SET_PED_COMBAT_RANGE_MAX( l_U529, 17.00000000 );
        SET_PED_COMBAT_RANGE_MIN( l_U529, 4.00000000 );
        SET_PED_SUGGESTED_COVER_POINT( l_U529, "GenCover", "CDE695FF_8F839446_Popover6" );
    }
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_REBEL_REINFORCEMENT_A_CREATE - END", 0 );
    return;
}

/* P_LL_REBEL_REINFORCEMENT_A_ATTACK */ void sub_68321()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_REBEL_REINFORCEMENT_A_ATTACK - START", 0 );
    if (( /* ISPEDVALID */ sub_41589(  /* PLAYER_PED_ID */ sub_970(), 0 )) AND ( /* ISPEDVALID */ sub_41589( l_U529, 0 )))
    {
         /* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ sub_68454( ref l_U529 );
        TASK_COMBAT_PED( l_U529,  /* PLAYER_PED_ID */ sub_970() );
    }
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_REBEL_REINFORCEMENT_A_ATTACK - END", 0 );
    return;
}

/* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ void sub_68454(unknown uParam0)
{
     /* MAL_SETLOCKEDANDREGISTEREDONPED */ sub_68508( uParam0,  /* PLAYER_PED_ID */ sub_970() );
    return;
}

/* MAL_SETLOCKEDANDREGISTEREDONPED */ void sub_68508(unknown uParam0, unknown uParam1)
{
     /* MAL_REGISTERTARGET */ sub_68556( uParam0, uParam1 );
     /* MAL_SETLOCKEDTARGET */ sub_68638( uParam0, uParam1 );
    return;
}

/* MAL_REGISTERTARGET */ void sub_68556(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        REGISTER_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_SETLOCKEDTARGET */ void sub_68638(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        SET_LOCKED_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* F_LL_REBEL_REINFORCMENT_B_CAN_SPAWN */ int sub_68811()
{
    if (NOT (DOES_PED_EXIST( l_U543 )))
    {
        if (( /* F_ISPLAYERINTRIGGERBOX */ sub_62423( l_U592 )) || (( /* F_ISPLAYERINTRIGGERBOX */ sub_62423( l_U571 )) || (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U529 )) || (( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_66471( ref l_U455 )) > 1))))
        {
            return 1;
        }
    }
    return 0;
}

/* P_LL_REBEL_REINFORCEMENT_B_CREATE */ void sub_68945()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_REBEL_REINFORCEMENT_B_CREATE - START", 0 );
    l_U543 =  /* CREATEPED */ sub_39909( ref l_U544 );
    if ( /* ISPEDVALID */ sub_41589( l_U543, 0 ))
    {
         /* F_GIVEPEDWEAPON */ sub_8524( l_U543, -612753081, 25000, 0, 0 );
         /* P_TETHERPED */ sub_44852( ref l_U342, l_U543, 1 );
        SET_PED_AI_TEMPLATE( l_U543, ref g_U1472 );
        SET_ROOM_FOR_PED_BY_NAME( l_U543, ref g_U3207 );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_44139( l_U543, ref l_U335 );
        SET_PED_NAME_DEBUG( l_U543, "KitchenReinforcement_B" );
        SET_PED_ALERTNESS( l_U543, 3 );
        SET_PED_COMBAT_RANGE_MAX( l_U543, 17.00000000 );
        SET_PED_COMBAT_RANGE_MIN( l_U543, 4.00000000 );
        SET_PED_SUGGESTED_COVER_POINT( l_U543, "GenCover", "CDE695FF_8F839446_Popover2" );
    }
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_REBEL_REINFORCEMENT_B_CREATE - END", 0 );
    return;
}

/* P_LL_REBEL_REINFORCEMENT_B_ATTACK */ void sub_69355()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_REBEL_REINFORCEMENT_B_ATTACK - START", 0 );
    if (( /* ISPEDVALID */ sub_41589(  /* PLAYER_PED_ID */ sub_970(), 0 )) AND ( /* ISPEDVALID */ sub_41589( l_U543, 0 )))
    {
         /* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ sub_68454( ref l_U543 );
        TASK_COMBAT_PED( l_U543,  /* PLAYER_PED_ID */ sub_970() );
    }
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_REBEL_REINFORCEMENT_B_ATTACK - END", 0 );
    return;
}

/* F_LL_REBEL_REINFORCMENT_C_CAN_SPAWN */ int sub_69571()
{
    if (NOT (DOES_PED_EXIST( l_U557 )))
    {
        if (( /* F_ISPLAYERINTRIGGERBOX */ sub_62423( l_U634 )) || (( /* F_ISPLAYERINTRIGGERBOX */ sub_62423( l_U613 )) || (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U543 )) AND ( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U529 )))))
        {
            return 1;
        }
    }
    return 0;
}

/* P_LL_REBEL_REINFORCEMENT_C_CREATE */ void sub_69703()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_REBEL_REINFORCEMENT_C_CREATE - START", 0 );
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_62423( l_U613 ))
    {
         /* WRITESCRIPTLOG */ sub_487( "MF", "Spawning REINFORCEMENT_C from Radio area...", 0 );
        l_U558._fU0 = {1.06672000, 5.58656200, -0.66559300};
    }
    l_U557 =  /* CREATEPED */ sub_39909( ref l_U558 );
    if ( /* ISPEDVALID */ sub_41589( l_U557, 0 ))
    {
         /* F_GIVEPEDWEAPON */ sub_8524( l_U557, -1404433099, 25000, 0, 0 );
         /* P_TETHERPED */ sub_44852( ref l_U342, l_U557, 1 );
        SET_PED_AI_TEMPLATE( l_U557, ref g_U1504 );
        if ( /* F_ISPLAYERINTRIGGERBOX */ sub_62423( l_U613 ))
        {
             /* WRITESCRIPTLOG */ sub_487( "MF", "Setting REINFORCEMENT_C room to : sRoomName_LL_PipeRoom", 0 );
            SET_ROOM_FOR_PED_BY_NAME( l_U557, ref g_U3207 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_487( "MF", "Setting REINFORCEMENT_C room to : sRoomName_LL_GalleyStore", 0 );
            SET_ROOM_FOR_PED_BY_NAME( l_U557, ref g_U3199 );
        }
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_44139( l_U557, ref l_U335 );
        SET_PED_NAME_DEBUG( l_U557, "KitchenReinforcement_C" );
        SET_PED_ALERTNESS( l_U557, 3 );
        SET_PED_COMBAT_RANGE_MAX( l_U557, 17.00000000 );
        SET_PED_COMBAT_RANGE_MIN( l_U557, 4.00000000 );
        SET_PED_SUGGESTED_COVER_POINT( l_U557, "GenCover", "CDE695FF_8F839446_Popover4" );
    }
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_REBEL_REINFORCEMENT_C_CREATE - END", 0 );
    return;
}

/* P_LL_REBEL_REINFORCEMENT_C_ATTACK */ void sub_70388()
{
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_REBEL_REINFORCEMENT_C_ATTACK - START", 0 );
    if (( /* ISPEDVALID */ sub_41589(  /* PLAYER_PED_ID */ sub_970(), 0 )) AND ( /* ISPEDVALID */ sub_41589( l_U557, 0 )))
    {
         /* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ sub_68454( ref l_U557 );
        TASK_COMBAT_PED( l_U557,  /* PLAYER_PED_ID */ sub_970() );
    }
     /* WRITESCRIPTLOG */ sub_487( "MF", "P_LL_REBEL_REINFORCEMENT_C_ATTACK - END", 0 );
    return;
}

/* F_LL_ARE_COMBAT_PEDS_DEAD */ int sub_70604()
{
    if (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U557 )) AND (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U543 )) AND (( /* F_IS_PED_DEFEATED */ sub_65991( ref l_U529 )) AND (( /* F_IS_PED_ARRAY_DEFEATED */ sub_66272( ref l_U455, 0 )) AND ( /* F_IS_PED_ARRAY_DEFEATED */ sub_66272( ref l_U388, 0 ))))))
    {
        return 1;
    }
    return 0;
}

/* P_LL_HANDLE_WALKING_TRIGGERS */ void sub_70999()
{
    if (( /* F_LL_ARE_COMBAT_PEDS_DEAD */ sub_70604()) == 1)
    {
         /* P_HANDLE_PLAYER_FORCED_WALKING_TRIGGER */ sub_71056( ref l_U346 );
         /* P_HANDLE_PLAYER_FORCED_WALKING_TRIGGER */ sub_71056( ref l_U367 );
    }
    return;
}

/* P_HANDLE_PLAYER_FORCED_WALKING_TRIGGER */ void sub_71056(int iParam0)
{
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67347( iParam0, 0 ))
    {
        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_970(), 1 );
         /* WRITESCRIPTLOG */ sub_487( "MF", "P_HANDLE_PLAYER_FORCED_WALKING_TRIGGER: TELLING PLAYER TO WALK", 0 );
    }
    else if ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_62423( (iParam0^) ))) AND (iParam0->_fU64))
    {
        iParam0->_fU64 = 0;
        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_970(), 0 );
         /* WRITESCRIPTLOG */ sub_487( "MF", "P_HANDLE_PLAYER_FORCED_WALKING_TRIGGER: TELLING PLAYER TO RUN", 0 );
    }
    return;
}

/* P_LL_HANDLE_MAXS_DIALOGUE */ void sub_71358()
{
    if (( /* F_LL_ARE_COMBAT_PEDS_DEAD */ sub_70604()) == 1)
    {
        if (NOT IS_PLAYER_SHOOTDODGING())
        {
            if ( /* ISTIMERDONE */ sub_2324( ref l_U1027 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_62233( "SPAN_MKEVRNE", ref g_U1246 );
            }
            if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67347( ref l_U943, 0 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_62233( "SPAN_MGTHOW", ref g_U1246 );
            }
            if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67347( ref l_U964, 0 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_62233( "SPAN_MGTMRR", ref g_U1246 );
            }
            if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67347( ref l_U985, 0 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_62233( "SPAN_MGTPSR", ref g_U1246 );
            }
            if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67347( ref l_U1006, 0 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_62233( "SPAN_MSTHRAD", ref g_U1246 );
            }
        }
    }
    return;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_71643(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_46601( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* CUTSYS_HANDLETRIGGERTYPEDOOR_NOHOLSTERING */ int sub_71812(int iParam0, unknown uParam1, boolean bParam2, boolean bParam3)
{
    if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67347( iParam0, 0 )) == 1)
    {
        if (NOT bParam3)
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_970(), 1 );
        }
        if (NOT bParam2)
        {
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1008(), 0 );
        }
    }
    if ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_62423( (iParam0^) ))) AND (iParam0->_fU64))
    {
        iParam0->_fU64 = 0;
        if (NOT bParam3)
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_970(), 0 );
        }
        if (NOT bParam2)
        {
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1008(), 1 );
        }
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67347( uParam1, 0 ))
    {
        return 1;
    }
    return 0;
}

/* MAL_SETPEDVISIBLE */ void sub_72171(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_VISIBLE( uParam0, uParam1 );
    }
    else
    {
         /* MAL_WRITESCRIPTLOG */ sub_62529( "MAL_SetPedVisible DOES NOT HAVE VALID PED!" );
    }
    return;
}

/* P_RESET_MAX_ACTION_TREE */ void sub_72290()
{
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_RESET_MAX_ACTION_TREE start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() )))
    {
        if (IS_PLAYER_SHOOTDODGING())
        {
            SCRIPT_ASSERT( "Do not try to reset Max's action tree when he is shoot dodging.", 0 );
             /* WRITESCRIPTLOG */ sub_487( "GA", "You cannot reset Max's action tree during a shoot dodge.", 0 );
        }
        else
        {
            PED_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_970(), "/Global/Player" );
        }
    }
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_RESET_MAX_ACTION_TREE end", 0 );
    return;
}

/* KILL_ANY_MISSION_SPEECH */ void sub_72784(unknown uParam0)
{
    int I;

    for ( I = 0; I <= 3; I++ )
    {
        PRINTSTRING( "\n KILL_ANY_MISSION_SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( I ))
        {
            if ((g_U1[I] <= 8) AND (g_U1[I] >= 4))
            {
                STOP_SCRIPTED_CONVERSATION( I, uParam0, 0 );
            }
        }
    }
    return;
}

/* F_UNLOADCUTSCENEANDLOADNEWCUTSCENE */ int sub_73880(unknown uParam0, unknown uParam1)
{
    if (CUTSCENE_IS_LOADED( uParam1 ))
    {
        PRINTSTRING( uParam1 );
         /* WRITE_STRING */ sub_8133( " is loaded." );
        return 1;
    }
    else if ((CUTSCENE_NAMED_IS_LOADING( uParam0 )) || (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRINTSTRING( "Unloading cutscene " );
         /* WRITE_STRING */ sub_8133( uParam0 );
        CLEAR_NAMED_CUTSCENE( uParam0 );
    }
    else if (CUTSCENE_NAMED_IS_LOADING( uParam1 ))
    {
        PRINTSTRING( uParam1 );
         /* WRITE_STRING */ sub_8133( " is loading." );
    }
    else
    {
        PRINTSTRING( "Requesting cutscene " );
         /* WRITE_STRING */ sub_8133( uParam1 );
         /* LOADSEAMLESSCUTSCENE */ sub_34554( uParam1, 0 );
    };;;
    return 0;
}

/* F_LL_MID_00_SETUP */ int sub_74264()
{
    if (NOT (DOES_PED_EXIST( l_U331 )))
    {
        l_U331 =  /* CREATEPED */ sub_39909( ref l_U318 );
    }
    if (( /* ISPEDVALID */ sub_41589( l_U331, 0 )) == 1)
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U331, 1 );
         /* F_GIVEPEDWEAPON */ sub_8524( l_U331, -612753081, 25000, 0, 0 );
        SET_ROOM_FOR_PED_BY_NAME( l_U331, ref g_U3215 );
        return 1;
    }
    return 0;
}

/* P_LL_MID_00_PANAMA_REGISTER */ void sub_74407()
{
    unknown uVar2;

     /* KILL_SPEECH */ sub_46573( ref g_U1246, 0 );
    if ( /* ISPEDVALID */ sub_41589(  /* PLAYER_PED_ID */ sub_970(), 0 ))
    {
        CUTSCENE_OBJECT_OVERRIDE_VISIBILITY( "W_PI_PT92_Aa_H" );
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_970(), -1.30200000, 4.77600000, -0.67000000, 287.17520000 );
        ISEQ_REGISTER_ENTITY( 995399098, "Max",  /* PLAYER_PED_ID */ sub_970(), 0 );
        CUTSCENE_REGISTER_ISEQ( 995399098 );
    }
    if (NOT (IS_PED_DEAD( l_U331 )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U331, "M_PA_REBL_A", 1 );
        uVar2 = GET_WEAPON_FROM_HAND( l_U331, 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_608_Aa_H", 1 );
        }
    }
    REGISTER_OBJECT_PRE_SEAMLESS_CUTSCENE( DOOR_FIND_CLOSEST( g_U3713[8]._fU0, g_U3713[8]._fU4 ), "P_MI_BlkDor_ob_H", 0 );
    return;
}

/* P_LL_MID_00_PANAMA_HANDLE */ void sub_74732()
{
    unknown uVar2;

    if (l_U291._fU52)
    {
         /* P_OPENDOOR */ sub_17149( ref g_U3713[8], 0, 1, 1.00000000 );
        if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1008() ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_970() ))))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_970(), 0 );
            TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_970() );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1008(), 1 );
            uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_970(), 1, 0 );
            if (GET_DOES_WEAPON_EXIST( uVar2 ))
            {
                SET_WEAPON_VISIBLE( uVar2, 0 );
            }
        }
    }
    return;
}

/* P_LL_MID_00_PANAMA_POST */ int sub_74921()
{
    return 1;
}

/* P_LL_MID_00_PANAMA_PREPAREBLENDOUT */ void sub_74966()
{
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_LL_MID_00_PANAMA_PrepareBlendout start", 0 );
    CAMERA_PLAY_ANIMATED( "LEVEL_S_PAN_CP_01", "B_OUT_MID_00_PANAMA_FWD_CAM", 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0, 0 );
     /* CLEANPED */ sub_5361( l_U331 );
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_LL_MID_00_PANAMA_PrepareBlendout end", 0 );
    return;
}

/* F_LL_MID_00_PANAMA_HANDLEBLENDOUT */ int sub_75217()
{
    if (NOT l_U332)
    {
        if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_PAN_CP_01", "B_OUT_MID_00_PANAMA_FWD_CAM" )) - 2000))
        {
             /* WRITESCRIPTLOG */ sub_487( "GA", "Stopping animated camera B_OUT_MID_00_PANAMA_FWD_CAM in a freeze frame.", 0 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( 1.81551900, 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( -7.05260200, 1065353216, 0 );
            CAMERA_ANIMATED_STOP( 2000, 1 );
            l_U332 = 1;
        }
    }
    if ((ISEQ_QUERY_ENTITY_STATE( 995399098, "Max", 6 )) || (ISEQ_QUERY_ENTITY_STATE( 995399098, "Max", 5 )))
    {
         /* WRITESCRIPTLOG */ sub_487( "GA", "MID_00_PAN blendout complete.", 0 );
        if (NOT l_U332)
        {
             /* WRITESCRIPTLOG */ sub_487( "GA", "Animated camera did not finish before interactive sequence, freezing now.", 0 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( 9.00000000, 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( -7.00000000, 1065353216, 0 );
            CAMERA_ANIMATED_STOP( 2000, 1 );
            l_U332 = 1;
        }
        return 1;
    }
    return 0;
}

/* P_START_CHECKPOINT_THREAD */ void sub_75895(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* P_LL_DEBUG_TUNING_WIDGET */ void sub_76316()
{
    if (NOT l_U1079)
    {
        START_WIDGET_GROUP( "Lower Level Tuning" );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_76426( ref l_U783, "Passos Bed Cam Offset", 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Passos Bed Cam Rotation", ref l_U786, -1E8, 1E8, 0.10000000 );
        ADD_WIDGET_INT_SLIDER( "Passos Bed Cam Trim", ref l_U787, 0, 10000000, 100 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_76426( ref l_U927, "Note Cam Offset", 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Note Cam Rotation", ref l_U930, -1E8, 1E8, 0.10000000 );
        ADD_WIDGET_INT_SLIDER( "Note Cam Trim", ref l_U931, 0, 10000000, 100 );
        STOP_WIDGET_GROUP();
        l_U1079 = 1;
    }
    return;
}

/* P_ADD_WIDGET_VECTOR_SLIDER */ void sub_76426(int iParam0, unknown uParam1, unknown uParam2)
{
    START_WIDGET_GROUP( uParam1 );
    ADD_WIDGET_FLOAT_SLIDER( "x", iParam0 + 0, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "y", iParam0 + 4, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "z", iParam0 + 8, 60536, 5000, uParam2 );
    STOP_WIDGET_GROUP();
    return;
}

/* P_RELEASE_LL_ASSETS */ void sub_76821()
{
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_RELEASE_LL_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_76900( ref l_U176, ref g_U1588 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_76973( g_U1536, ref g_U1588 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_77462( ref l_U181, ref g_U1829 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_77889( ref g_U3071, ref g_U3026 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_78252( "LEVEL_S_PAN_CP_01", ref g_U1975 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_78252( "EXPL_CAM", ref g_U1975 );
     /* WRITESCRIPTLOG */ sub_487( "GA", "P_RELEASE_LL_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_76900(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_76973( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_76973(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3847( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_77462(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_77536( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_77536(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3847( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_77889(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3847( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_78252(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3847( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

