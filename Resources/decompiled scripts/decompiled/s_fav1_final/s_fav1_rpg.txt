void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U58 = 0;
    l_U60 = 0;
    l_U61 = 0;
    l_U62 = 1500;
    l_U108 = 0;
    l_U109 = 0;
    l_U110 = 0;
    l_U321 = 1;
    l_U322 = 1;
    l_U323 = 1;
    l_U324 = 1;
    l_U347 = 0;
    l_U527 = 0;
    l_U528 = 0;
    l_U587 = {16.10000000, 31.10000000, 26};
    l_U590 = 143.00000000;
    l_U592 = 0;
    l_U593 = 0;
    l_U594 = 0;
    l_U595 = 0;
    l_U596 = 0;
    l_U597 = "07_05_FAV1_concat";
    l_U599 = 0;
    l_U601 = 0;
    sub_493( "NS", "Script fav1_RPG.sc is starting...", "###" );
    sub_542();
    sub_2198();
    if (l_U108 == 0)
    {
        if ((sub_3184( ref l_U72 )) == 0)
        {
            if (g_U1048 == 12)
            {
                sub_5573( sub_3309(), g_U1816, 200, 0, 1 );
            }
        }
        l_U108 = 1;
    }
    while (NOT l_U591)
    {
        sub_7504();
        if (l_U110 == 0)
        {
            sub_10950();
        }
        WAIT( 0 );
    }
    sub_9646( 0 );
    sub_25448();
    if (NOT (IS_PED_DEAD( sub_3309() )))
    {
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    }
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "fav1_cs_compound" );
    sub_493( "NS", "Script fav1_RPG.sc is terminating...", "###" );
    return;
}

void sub_493(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    return;
}

void sub_542()
{
    sub_493( "SA", "P_SETUP_STATIC_DATA", "###" );
    sub_656( ref l_U111, "tbRPGDropDown", 10.70000000, 15.52000000, 21.43000000, 8.00000000, 8.00000000, 7.00000000, 0.00000000, 0.00000000, 89.86000000, 1 );
    sub_795( ref l_U279, "teRPG", 15.90000000, 34.17000000, 23.64000000, 2.74000000, 2.75000000, 7.86000000, 0.00000000, 0.00000000, 89.86000000, 1 );
    sub_795( ref l_U280, "teReplacement", 7.56000000, 32.52000000, 25.95000000, 5.87000000, 9.71000000, 7.86000000, 0.00000000, 0.00000000, 89.86000000, 1 );
    sub_795( ref l_U281, "teReplacement2", 3.37000000, 17.28000000, 23.89000000, 8.30000000, 16.34000000, 7.86000000, 0.00000000, 0.00000000, 89.86000000, 1 );
    sub_656( ref l_U132, "tbDeath", -0.40000000, 26.66000000, 18.70000000, 21.00000000, 21.00000000, 1.50000000, 0.00000000, 0.00000000, 26.00000000, 1 );
    sub_656( ref l_U153, "tbDeath2", -4.12000000, 39.81000000, 14.31000000, 20.00000000, 20.00000000, 6.00000000, 0.00000000, 0.00000000, 89.86000000, 1 );
    sub_656( ref l_U174, "tbDeath3", -14.11000000, 48.87000000, 14.31000000, 20.00000000, 20.00000000, 6.00000000, 0.00000000, 0.00000000, 89.86000000, 1 );
    sub_656( ref l_U195, "tbGatewalk", 6.76000000, 47.35000000, 26.73000000, 6.00000000, 4.00000000, 5.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_656( ref l_U216, "tbGateEnd", 6.88000000, 48.56000000, 26.73000000, 2.80000000, 1.00000000, 5.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_656( ref l_U237, "tbPreLoadCutscene", 14.32000000, 33.07000000, 21.43000000, 8.00000000, 8.00000000, 7.00000000, 0.00000000, 0.00000000, 89.86000000, 1 );
    sub_656( ref l_U258, "tbEndVO", 15.83000000, 41.12000000, 23.72000000, 8.00000000, 8.00000000, 7.00000000, 0.00000000, 0.00000000, 89.86000000, 1 );
    sub_1504( ref l_U331[0], 9.02000000, 39.12000000, 26.34000000, 232.56100000, -1114450979, 7, 3, 2, 0, 0 );
    sub_1504( ref l_U352[0], -0.59000000, 33.23000000, 26.42000000, 179.72000000, -1703186085, 7, 3, 2, 0, 0 );
    sub_1504( ref l_U352[1], 6.19000000, 31.01000000, 26.42000000, 179.72000000, 1856425051, 7, 3, 2, 0, 0 );
    sub_1504( ref l_U352[2], -11.61000000, 25.62000000, 22.46000000, -136.71000000, -6975242, 7, 3, 2, 0, 0 );
    sub_1779( ref l_U282, 596292157, 7.41664000, 29.48332000, 22.78789000, 0.00000000, 0.00000000, 0.00000000 );
    sub_1827( ref l_U282, 1 );
    sub_1779( ref l_U289, 596292157, 22.23564000, 39.65355000, 25.96429000, 0.00000000, 0.00000000, 0.00000000 );
    sub_1827( ref l_U289, 1 );
    sub_1779( ref l_U296, 596292157, 22.83441000, 41.07724000, 25.93914000, 0.00000000, 0.00000000, 0.00000000 );
    sub_1827( ref l_U296, 1 );
    sub_1779( ref l_U303, 596292157, 19.10240000, 41.91318000, 26.63193000, 0.00000000, 0.00000000, 0.00000000 );
    sub_1827( ref l_U303, 1 );
    return;
}

void sub_656(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_795(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_1504(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

void sub_1779(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

void sub_1827(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if ((sub_1839( iParam0 )) == 0)
    {
        sub_1905( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

int sub_1839(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_1905(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

void sub_2198()
{
    sub_493( "SA", "INITIALIZE_SCRIPT_DATA", "###" );
    l_U109 = 0;
    l_U591 = 0;
    l_U594 = 0;
    l_U593 = 0;
    l_U592 = 1;
    l_U595 = 0;
    l_U596 = 0;
    sub_1827( ref g_U1699, 0 );
    sub_2316( ref g_U1699, -100.00000000, 100.00000000 );
    sub_2421( ref g_U1699, 1, 1, 0.90000000 );
    sub_2573( g_U1335 );
    sub_2573( g_U1342 );
    l_U347 = 0;
    l_U525 = 0;
    l_U321 = 1;
    l_U322 = 1;
    l_U323 = 1;
    l_U324 = 1;
    sub_2756();
    return;
}

void sub_2316(int iParam0, float fParam1, float fParam2)
{
    if ((sub_1839( iParam0 )) == 0)
    {
        sub_1905( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        ;
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

void sub_2421(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if ((sub_1839( iParam0 )) == 0)
    {
        sub_1905( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

int sub_2573(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6)
{
    unknown uVar9;

    uVar9 = DOOR_FIND_CLOSEST( uParam0._fU0, uParam0._fU4 );
    if (DOES_OBJECT_EXIST( uVar9 ))
    {
        if (DOOR_GET_IS_AFFECTED_BY_BULLETS( uVar9 ))
        {
            sub_493( "NS", "Setting door to not react to bullets.", 0 );
            DOOR_SET_IS_AFFECTED_BY_BULLETS( uVar9, 0 );
            return 1;
        }
    }
    return 0;
}

void sub_2756()
{
    sub_493( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
    l_U526 = 0;
    l_U527 = 0;
    if (NOT (SCRIPT_VAR_HASH_EXISTS( 1701971384 )))
    {
        sub_493( "CCB", "Creating the OldPainless script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( 1701971384 );
        if (SCRIPT_VAR_HASH_EXISTS( 1701971384 ))
        {
            sub_493( "CCB", "The OldPainless script variable was successfully created...", 0 );
        }
        else
        {
            sub_493( "CCB", "The OldPainless script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
        sub_493( "CCB", "The OldPainless script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( 1701971384, 0 );
    }
    return;
}

int sub_3184(unknown uParam0)
{
    sub_493( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
            sub_3375( uParam0, sub_3309() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

int sub_3309()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED( sub_3331() );
    }
    return 0;
}

void sub_3331()
{
    return GET_PLAYER_ID();
}

void sub_3375(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

    sub_493( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
    sub_3559( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
        sub_4636( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 = sub_4928( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
        sub_5288( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 = sub_4928( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
        sub_5288( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 = sub_4928( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
        sub_5288( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 = sub_5573( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
        sub_5288( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 = sub_5573( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
        sub_5288( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if ((sub_6066( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
    sub_6227( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING( sub_3309(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
    sub_493( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

void sub_3559(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 = sub_3591( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

int sub_3591(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

void sub_4636(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

void sub_4928(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                }
            }
        }
    }
    else
    {
        sub_5244( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

void sub_5244(unknown uParam0)
{
    return;
}

void sub_5288(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

void sub_5573(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                }
            }
        }
    }
    else
    {
        sub_5244( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

int sub_6066(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

void sub_6227(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 = sub_3591( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
    sub_6299( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

void sub_6299(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

void sub_7504()
{
    if (g_U1049 == 12)
    {
        switch (l_U110)
        {
            case 0:
            if ((sub_7598()) || (IS_PED_DEAD( sub_3309() )))
            {
                l_U110 = 1;
                sub_493( "kja", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if (sub_8093())
            {
                l_U110 = 2;
            }
            else if ((sub_8133( 0 )) == 1)
            {
                l_U110 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD( sub_3309() )))
            {
                l_U110 = 3;
                sub_493( "kja", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
            sub_493( "kja", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((IS_PLAYER_DEAD( sub_3331() )) == 0)
            {
                SET_PLAYER_CONTROL( sub_3331(), 0, 0 );
            }
            if (IS_DEATH_PANEL_WIPE_ALLOWED() == 0)
            {
                DO_SCREEN_FADE_OUT( 0 );
            }
            g_U773 = 0;
            sub_9646( 1 );
            sub_10200();
            ISEQ_TERMINATE( -1613942561 );
            l_U110 = 4;
            sub_493( "kja", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
            sub_493( "kja", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            sub_3375( ref l_U72, sub_3309() );
            LOAD_SCENE( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( sub_3309() ) );
            l_U110 = 5;
            sub_493( "kja", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
            sub_493( "kja", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            sub_542();
            sub_2198();
            if ((IS_PLAYER_DEAD( sub_3331() )) == 0)
            {
                SET_PLAYER_CONTROL( sub_3331(), 1, 0 );
            }
            l_U109 = 0;
            g_U878 = 0;
            l_U110 = 0;
            sub_493( "kja", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    else if ((sub_8093()) || (IS_PED_DEAD( sub_3309() )))
    {
        l_U591 = 1;
        g_U763 = 0;
        sub_10896( ref g_U879[12] );
    }
    return;
}

int sub_7598()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD( sub_3309() )))
        {
            SET_PED_FORCED_TO_WALK( sub_3309(), 0 );
            SET_PLAYER_FORCED_AIM( sub_3331(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE( sub_3331(), 1 );
            if ((IS_PED_VISIBLE( sub_3309() )) == 0)
            {
                SET_PED_VISIBLE( sub_3309(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

void sub_8093()
{
    return g_U648;
}

int sub_8133(int iParam0)
{
    iParam0 = 1;
    switch (l_U61)
    {
        case 0:
        if (NOT (sub_8194( ref l_U63 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_3309() )))
            {
                l_U62 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
            sub_8304( ref l_U63, l_U62, 1, 1 );
            sub_8440( ref l_U63 );
        }
        if (sub_8560( ref l_U63 ))
        {
            sub_493( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_3309() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD( sub_3331() )))
            {
                SET_PLAYER_CONTROL( sub_3331(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U61 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U61 = 2;
            }
            else
            {
                l_U61 = 3;
            }
        }
        break;
        case 2:
        sub_493( "NS", "Player will QUIT", 0 );
        sub_9047();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
        sub_493( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        sub_9047();
        return 1;
        break;
    }
    return 0;
}

int sub_8194(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_8304(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

void sub_8440(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

int sub_8560(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

void sub_9047()
{
    sub_493( "NS", "P_PostFailRetryCleanup", 0 );
    sub_9097( ref l_U63 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD( sub_3331() )))
    {
        SET_PLAYER_CONTROL( sub_3331(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U60 = 0;
    l_U60 = l_U60;
    l_U61 = 0;
    return;
}

void sub_9097(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

void sub_9646(unknown uParam0)
{
    sub_493( "SA", "P_CLEANUP_ALL", "###" );
    sub_9097( ref l_U578 );
    REMOVE_SPATIALDATA_COVER_POINT( l_U598 );
    sub_9709();
    sub_9757( l_U392 );
    sub_9757( l_U406 );
    sub_9757( l_U420 );
    sub_9757( l_U435 );
    sub_9723( ref l_U449 );
    sub_9918( uParam0 );
    return;
}

void sub_9709()
{
    sub_9723( ref l_U345 );
    sub_9723( ref l_U348 );
    return;
}

void sub_9723(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_9757( (uParam0^)[I] );
    }
    return;
}

void sub_9757(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

void sub_9918(boolean bParam0)
{
    sub_493( "CCB", "P_STOP_SP_CHALLENGES", 0 );
    if (bParam0)
    {
        ;
    }
    else
    {
        sub_493( "CCB", "Stopping the Favela_End context...", 0 );
        END_CONTEXT( "Favela_End" );
        sub_493( "CCB", "Stopping the Favela context...", 0 );
        END_CONTEXT( "Favela" );
    }
    sub_493( "CCB", "Stopping the Favela_Compound context...", 0 );
    END_CONTEXT( "Favela_Compound" );
    return;
}

void sub_10200()
{
    sub_493( "NS", "P_UNLOAD_CUTSCENE_ASSETS()", 0 );
    CLEAR_NAMED_CUTSCENE( l_U597 );
    sub_10267( -1464892298 );
    sub_10299( 1917029888 );
    sub_10299( -389601559 );
    sub_10299( 1286278693 );
    sub_10299( 1437984777 );
    sub_10299( -693003798 );
    return;
}

void sub_10267(unknown uParam0)
{
    SET_WEAPON_AS_NO_LONGER_NEEDED( uParam0 );
    return;
}

void sub_10299(unknown uParam0)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 1)
    {
        SET_MODEL_AS_NO_LONGER_NEEDED( uParam0 );
    }
    else
    {
        sub_5244( "[SP]### ERROR! (UnloadModel) Trying to unload a model that isn't in the img! ###" );
    }
    return;
}

void sub_10896(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

void sub_10950()
{
    sub_10960();
    switch (l_U109)
    {
        case 0:
        sub_11330( "SFV1AUD" );
        if (g_U1049 < 12)
        {
            sub_11455( 0 );
            l_U109 = 2;
        }
        else
        {
            DO_SCREEN_FADE_OUT( 0 );
            sub_12077();
            l_U109 = 1;
        }
        break;
        case 1:
        if (sub_12156())
        {
            sub_12263();
            sub_13958();
            l_U528 = 1;
            l_U109 = 4;
        }
        break;
        case 2:
        if (sub_14553( ref l_U111, 0 ))
        {
            sub_11455( 1 );
            sub_12263();
            l_U528 = 1;
            l_U109 = 3;
        }
        break;
        case 3:
        l_U109 = 4;
        break;
        case 4:
        l_U109 = 5;
        break;
        case 5:
        sub_14749();
        if ((l_U72._fU0 == 0) || (g_U1049 < 11))
        {
            g_U1049 = 12;
            sub_15506( ref l_U72, g_U1049, sub_3309(), g_U1050[11], g_U1174[11], g_U1216[11], g_U1258[11], 1 );
        }
        l_U109 = 6;
        break;
        case 6:
        sub_19131();
        if (l_U321 == 1)
        {
            if (sub_2573( g_U1706 ))
            {
                l_U321 = 0;
            }
        }
        if (l_U347 == 0)
        {
            if (sub_21667( l_U111 ))
            {
                l_U347 = 1;
                g_U774 = 1;
            }
        }
        if (l_U525 == 1)
        {
            if (IS_PED_DEAD( l_U345[0] ))
            {
                l_U525 = 0;
            }
        }
        if ((sub_21667( l_U174 )) || ((sub_21667( l_U153 )) || (sub_21667( l_U132 ))))
        {
            if (NOT (IS_PED_DEAD( sub_3309() )))
            {
                SET_PED_HEALTH( sub_3309(), 0, 0 );
            }
        }
        if (l_U592 == 1)
        {
            if (sub_21667( l_U195 ))
            {
                if (NOT (IS_PED_DEAD( sub_3309() )))
                {
                    if ((GET_IS_PED_FORCED_TO_WALK( sub_3309() )) == 0)
                    {
                        SET_PED_FORCED_TO_WALK( sub_3309(), 1 );
                    }
                }
            }
            else if (NOT (IS_PED_DEAD( sub_3309() )))
            {
                if ((GET_IS_PED_FORCED_TO_WALK( sub_3309() )) == 1)
                {
                    SET_PED_FORCED_TO_WALK( sub_3309(), 0 );
                }
            }
            if (sub_14553( ref l_U216, 0 ))
            {
                sub_9709();
                sub_21978();
                l_U592 = 0;
                if (NOT (IS_PED_DEAD( sub_3309() )))
                {
                    if (IS_ARCADE_MODE_ACTIVE() == 0)
                    {
                        SET_HIGHEST_ARCADE_LEVEL_UNLOCKED( 10 );
                    }
                }
                if (IS_ARCADE_MODE_ACTIVE())
                {
                    DISPLAY_ARCADE_MODE_LEVEL_END( "s_cemet" );
                    DO_SCREEN_FADE_IN( 0 );
                }
                else
                {
                    l_U594 = 1;
                }
                l_U527 = 1;
            }
            if (l_U323 == 1)
            {
                if (sub_22399())
                {
                    sub_22517();
                    l_U323 = 0;
                }
            }
        }
        if (sub_14553( ref l_U258, 0 ))
        {
            ;
        }
        if (sub_14553( ref l_U237, 0 ))
        {
            AUDIO_MUSIC_SUSPEND( 20000 );
            sub_22752( 0 );
        }
        if (l_U594 == 1)
        {
            sub_23096();
        }
        if (l_U324 == 1)
        {
            if (sub_25098())
            {
                l_U324 = 0;
            }
        }
        break;
    }
    return;
}

void sub_10960()
{
    switch (l_U526)
    {
        case 0:
        sub_493( "CCB", "eOldPainless - STATE_CHALLENGE_IDLE", 0 );
        l_U526 = 1;
        break;
        case 1:
        if (l_U527)
        {
            if (SCRIPT_VAR_HASH_EXISTS( 1701971384 ))
            {
                SCRIPT_VAR_HASH_SET_INT( 1701971384, 1 );
            }
            else
            {
                sub_493( "CCB", "The OldPainless script variable is NOT valid!!!", 0 );
            }
            sub_493( "CCB", "eOldPainless - STATE_CHALLENGE_COMPLETE", 0 );
            l_U526 = 2;
        }
        break;
        case 2: break;
    }
    return;
}

void sub_11330(unknown uParam0)
{
    StrCopy( ref g_U157._fU0, uParam0, 16 );
    sub_11350();
    return;
}

void sub_11350()
{
    int I;

    for ( I = 0; I <= 8; I++ )
    {
        g_U157._fU16[I]._fU0 = nil;
        g_U157._fU16[I]._fU4 = 0;
        g_U157._fU92[I] = 0;
    }
    return;
}

void sub_11455(unknown uParam0)
{
    sub_493( "NS", "P_LOAD_PRE_CUTSCENE_ASSETS", "###" );
    sub_11517( -2138428787, uParam0 );
    sub_11517( 973577609, uParam0 );
    sub_11701( -1312131151, uParam0 );
    sub_11771( -1613942561, uParam0 );
    sub_11979( "EXPL_CAM", 0, 0 );
    return;
}

void sub_11517(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
        sub_5244( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_11701(unknown uParam0, boolean bParam1)
{
    REQUEST_WEAPON( uParam0 );
    if (bParam1)
    {
        while ((HAS_WEAPON_LOADED( uParam0 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_11771(unknown uParam0, int iParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;

    if ((ISEQ_DOES_EXIST( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The interactive sequence you are trying to load does not exist!!!!", 0 );
    }
    if ((ISEQ_IS_LOADED( uParam0 )) == 0)
    {
        ISEQ_REQUEST( uParam0 );
        ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
        if (iParam1 == 1)
        {
            while ((ISEQ_QUERY_STATE( uParam0, 1 )) == 1)
            {
                WAIT( 0 );
            }
        }
    }
    return;
}

void sub_11979(unknown uParam0, unknown uParam1, int iParam2)
{
    REQUEST_ANIM_DICT( uParam0, uParam1 );
    "[doubled result, dropped if not asigned]";
    if (iParam2 == 1)
    {
        while ((HAS_ANIM_DICT_LOADED( uParam0, uParam1 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_12077()
{
    sub_493( "NS", "P_REQUEST_GAMEPLAY_ASSETS", "###" );
    sub_11455( 0 );
    return;
}

int sub_12156()
{
    if ((HAS_ANIM_DICT_LOADED( "EXPL_CAM", 0 )) AND (((ISEQ_QUERY_STATE( -1613942561, 2 )) == 1) AND ((HAS_WEAPON_LOADED( -1312131151 )) AND ((HAS_MODEL_LOADED( 973577609 )) AND (HAS_MODEL_LOADED( -2138428787 ))))))
    {
        return 1;
    }
    return 0;
}

void sub_12263()
{
    int I;

    sub_493( "NS", "P_CREATE_GROUP_R", 0 );
    sub_9723( ref l_U345 );
    for ( I = 0; I < 1; I++ )
    {
        l_U345[I] = sub_12332( ref l_U331[I] );
        if (NOT (IS_PED_DEAD( l_U345[I] )))
        {
            if (NOT (IS_PED_DEAD( sub_3309() )))
            {
                REGISTER_TARGET( l_U345[I], sub_3309() );
            }
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U345[I], 1 );
            SET_PED_AI_TEMPLATE( l_U345[I], "AIT_CS_TANK_GREN" );
            SET_PED_ALERTNESS( l_U345[I], 4 );
            SET_PED_COMBAT_ATTRIBUTES( l_U345[I], 4096, 1 );
            SET_PED_COMBAT_ATTRIBUTES( l_U345[I], 1, 0 );
            sub_13173( l_U345[I], ref l_U325 );
            sub_13615( ref l_U279, l_U345[I], 1 );
            SET_PED_DROPS_WEAPONS_WHEN_DEAD( l_U345[I], 0 );
            SET_PED_PERFECT_ACCURACY_OVERRIDE( l_U345[I], 1 );
            SET_BULLET_CAM_ON_NEXT_PROJECTILE( l_U345[I], "QUICKCUT_FAILSAFE_01" );
        }
    }
    sub_13786( ref l_U345, "piGroupR " );
    if (NOT (IS_PED_DEAD( l_U345[0] )))
    {
        ISEQ_REGISTER_ENTITY( -1613942561, "rocket_enemy", l_U345[0], 0 );
        ISEQ_START( -1613942561 );
    }
    return;
}

void sub_12332(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
        sub_11517( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
    sub_12811( iParam0->_fU40 );
    sub_12891( iParam0->_fU40 );
    return iParam0->_fU40;
}

void sub_12811(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

void sub_12891(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

void sub_13173(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
        sub_5244( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
            sub_13316( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
            sub_13316( iParam1, 1056964608, 0 );
        }
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

void sub_13316(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
        }
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

void sub_13615(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

void sub_13786(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

void sub_13958()
{
    int I;

    sub_493( "NS", "P_CREATE_REPLACEMENTS()", 0 );
    sub_9723( ref l_U348 );
    l_U348[0] = sub_12332( ref l_U352[0] );
    l_U348[1] = sub_12332( ref l_U352[1] );
    l_U348[2] = sub_12332( ref l_U352[2] );
    for ( I = 0; I < 3; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U348[I] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U348[I], 1 );
            SET_PED_AI_TEMPLATE( l_U348[I], "AIT_NORMAL" );
            SET_PED_ALERTNESS( l_U348[I], 4 );
            sub_13173( l_U348[I], ref l_U325 );
            SET_PED_ACCURACY( l_U348[I], 31186664 );
        }
    }
    sub_5573( l_U348[0], g_U1819, 25000, 0, 0 );
    sub_13615( ref l_U280, l_U348[0], 1 );
    sub_5573( l_U348[1], g_U1820, 25000, 0, 0 );
    sub_13615( ref l_U280, l_U348[1], 1 );
    sub_5573( l_U348[2], g_U1820, 25000, 0, 0 );
    sub_13615( ref l_U281, l_U348[2], 1 );
    sub_13786( ref l_U348, "piReplacement" );
    sub_14376( ref l_U348 );
    return;
}

void sub_14376(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_14407( (uParam0^)[I] );
    }
    return;
}

void sub_14407(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

void sub_14553(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 = sub_14595( sub_3309(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

int sub_14595(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

void sub_14749()
{
    sub_493( "NS", "P_START_GAMEPLAY", "###" );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
    l_U598 = ADD_SPATIALDATA_COVER_POINT( "cvrBalcony1", -11.26000000, 39.75000000, 21.77000000, -1, 0, 0, 1.00000000, 0, 0 );
    sub_14863( ref g_U1692, 1 );
    sub_1827( ref g_U1692, 1 );
    sub_2316( ref g_U1699, -100.00000000, 0.00000000 );
    sub_1827( ref g_U1699, 1 );
    AUDIO_MUSIC_FORCE_TRACK( "FAVELA_ONE_SONG", "FAV_ONE_3_4_5_6", "", 0.00000000, 0, 0, -1082130432, 0 );
    if (g_U1048 == 12)
    {
        sub_15121( sub_3309(), g_U1050[12], g_U1174[12] );
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U1216[12], 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U1258[12], 1065353216, 0 );
        if (NOT (IS_PED_DEAD( sub_3309() )))
        {
            LOAD_SCENE( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( sub_3309() ) );
        }
        if (NOT (IS_PLAYER_DEAD( sub_3331() )))
        {
            SET_PLAYER_CONTROL( sub_3331(), 1, 0 );
        }
    }
    sub_15289();
    return;
}

void sub_14863(int iParam0, int iParam1)
{
    if ((sub_1839( iParam0 )) == 0)
    {
        sub_1905( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

void sub_15121(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

void sub_15289()
{
    sub_493( "CCB", "P_START_SP_CHALLENGES", 0 );
    sub_493( "CCB", "Starting the Favela_Compound context...", 0 );
    START_CONTEXT( "Favela_Compound" );
    return;
}

void sub_15506(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

    sub_493( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
        sub_493( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
        sub_6227( iParam1 );
        sub_15765( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
            sub_16216( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
            sub_16216( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_16448( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
            sub_16216( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_16448( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_16448( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
            sub_16216( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_16448( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_16448( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_16448( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
            sub_16216( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_16448( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_16448( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_16448( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if (sub_16448( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
            sub_18006( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
    sub_493( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

void sub_15765(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 = sub_3591( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
        sub_493( "TEH", "Ending context", 0 );
        sub_493( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

void sub_16216(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

void sub_16448(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

void sub_18006(int iParam0)
{
    sub_5244( "CHECKPOINT DATA" );
    sub_18045( iParam0->_fU4 );
    sub_18068( iParam0->_fU16 );
    sub_18068( iParam0->_fU20 );
    sub_18068( iParam0->_fU24 );
    sub_18111( iParam0->_fU28 );
    sub_18111( iParam0->_fU56 );
    sub_18111( iParam0->_fU60 );
    sub_18111( iParam0->_fU64 );
    sub_18111( iParam0->_fU68 );
    sub_18111( iParam0->_fU72 );
    sub_18111( iParam0->_fU76 );
    sub_18111( iParam0->_fU80 );
    sub_18111( iParam0->_fU84 );
    sub_18111( iParam0->_fU88 );
    sub_18111( iParam0->_fU92 );
    sub_18068( iParam0->_fU32 );
    sub_18111( iParam0->_fU36 );
    sub_18111( iParam0->_fU40 );
    sub_18111( iParam0->_fU44 );
    sub_18068( iParam0->_fU136 );
    sub_18316( iParam0->_fU140 );
    sub_18111( iParam0->_fU52 );
    sub_5244( "---nRightHolsterAttachmentEnabled: " );
    sub_18111( iParam0->_fU96 );
    sub_5244( "---nRightHolsterAttachmentToggled: " );
    sub_18111( iParam0->_fU100 );
    sub_5244( "---nLeftHolsterAttachmentEnabled: " );
    sub_18111( iParam0->_fU104 );
    sub_5244( "---nLeftHolsterAttachmentToggled: " );
    sub_18111( iParam0->_fU108 );
    sub_5244( "---nRifleHolsterAttachmentEnabled: " );
    sub_18111( iParam0->_fU112 );
    sub_5244( "---nRifleHolsterAttachmentToggled: " );
    sub_18111( iParam0->_fU116 );
    sub_5244( "---nRightHandAttachmentEnabled: " );
    sub_18111( iParam0->_fU120 );
    sub_5244( "---nRightHandAttachmentToggled: " );
    sub_18111( iParam0->_fU124 );
    sub_5244( "---nLeftHandAttachmentEnabled: " );
    sub_18111( iParam0->_fU128 );
    sub_5244( "---nLeftHandAttachmentToggled: " );
    sub_18111( iParam0->_fU132 );
    sub_18111( l_U1 );
    sub_18111( 144 );
    return;
}

void sub_18045(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return;
}

void sub_18068(unknown uParam0)
{
    return;
}

void sub_18111(unknown uParam0)
{
    return;
}

void sub_18316(boolean bParam0)
{
    if (bParam0)
    {
        ;
    }
    return;
}

void sub_19131()
{
    vector vVar2;

    switch (l_U528)
    {
        case 0: break;
        case 1:
        if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (NOT IS_BULLET_CAMERA_ACTIVE()))
        {
            ENABLE_LAST_MAN_STANDING( 0 );
            if (NOT (IS_PED_DEAD( sub_3309() )))
            {
                SET_PLAYER_CONTROL( sub_3331(), 0, 0 );
                sub_19268();
            }
            if (NOT (IS_PED_DEAD( l_U345[0] )))
            {
                if (GET_PED_CAN_TRIGGER_BULLET_CAM( l_U345[0] ))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( l_U345[0], 0 );
                }
                if ((GET_NUMBER_OF_FIRES_IN_RANGE( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( l_U345[0] ), 6.00000000 )) > 0)
                {
                    STOP_FIRE_IN_RANGE( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( l_U345[0] ), 6.00000000 );
                }
                if (IS_PED_ON_FIRE( l_U345[0] ))
                {
                    STOP_PED_FIRE( l_U345[0] );
                }
            }
            sub_5573( l_U345[0], -1312131151, 1, 0, 0 );
            l_U528 = 2;
        }
        break;
        case 2:
        sub_19739( l_U345[0] );
        if ((NOT (IS_PED_DEAD( l_U345[0] ))) AND (NOT (IS_PED_DEAD( sub_3309() ))))
        {
            REGISTER_TARGET( l_U345[0], sub_3309() );
            SET_LOCKED_TARGET( l_U345[0], sub_3309() );
        }
        sub_15121( l_U345[0], 17.18000000, 37.62000000, 24.94000000, 165.00000000 );
        if (NOT (IS_PED_DEAD( l_U345[0] )))
        {
            PED_SET_ACTION_INTENTION( l_U345[0], 47, 1000, 0.00000000, 0.00000000, 0.00000000 );
        }
        if (NOT (IS_PED_DEAD( l_U345[0] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U345[0], 1 );
        }
        DISPLAY_HUD( 0 );
        CAMERA_PLAY_ANIMATED( "EXPL_CAM", "EXPL_CAMPANWAL_25_FR", 1, l_U587, l_U590, 0, 0 );
        sub_8304( ref l_U578, 1500, 1, 0 );
        sub_8440( ref l_U578 );
        sub_15121( sub_3309(), 11.54000000, 17.52000000, 24.68000000, -90.00000000 );
        if (NOT (IS_PED_DEAD( sub_3309() )))
        {
            CLEAR_PED_TASKS( sub_3309() );
            PED_ACTION_TREE_PLAY_NODE( sub_3309(), "/Global/Player/PlayerLoco" );
        }
        SNAP_PLAYER_TO_COVERPOINT( sub_3331(), "GenCover", "15F1D7B8_117E8ADF_Corner2", 0 );
        SET_PLAYER_FORCED_AIM( sub_3331(), 1, 0 );
        if (NOT (IS_PED_DEAD( l_U345[0] )))
        {
            CAMERA_POINT_AT_COORD( 12.13000000, 29.71000000, 26.12000000, 0 );
        }
        sub_20337();
        DO_SCREEN_FADE_IN( 0 );
        l_U528 = 3;
        break;
        case 3:
        if (sub_8560( ref l_U578 ))
        {
            CAMERA_ANIMATED_STOP( 1000, 1 );
            SET_CROSSHAIR_PULSE();
            ENABLE_MPM( 1 );
            ENABLE_ALL_ADRENALINE( 0 );
            if (GET_ADRENALINE_AMT() < 0.10000000)
            {
                SET_ADRENALINE_AMT( 0.10000000 );
            }
            ACTIVATE_BULLET_TIME( 0, 0.26250000, 1 );
            if (NOT (IS_PED_DEAD( l_U345[0] )))
            {
                SET_PED_AIM_LOCKONABLE( l_U345[0], 0 );
                TASK_SHOOT_AT_COORD( l_U345[0], 11.95000000, 17.84000000, 26.36000000, -1, 1566631136, 0, 1 );
            }
            sub_8304( ref l_U569, 100, 1, 0 );
            sub_8440( ref l_U569 );
            l_U528 = 4;
        }
        break;
        case 4:
        if (sub_8560( ref l_U569 ))
        {
            DISPLAY_HUD( 1 );
            CAMERA_CLEAR_POINT_AT_TARGET();
            if (NOT (IS_PED_DEAD( sub_3309() )))
            {
                SET_PLAYER_CONTROL( sub_3331(), 1, 0 );
                ENABLE_LAST_MAN_STANDING( 1 );
            }
            l_U528 = 5;
        }
        break;
        case 5:
        if ((IS_EXPLOSION_IN_SPHERE( -1, 10.66000000, 14.00000000, 26.61000000, 2.00000000 )) || (IS_EXPLOSION_IN_SPHERE( -1, 11.95000000, 17.84000000, 26.36000000, 2.00000000 )))
        {
            if (NOT (IS_PED_DEAD( sub_3309() )))
            {
                SET_PED_HEALTH( sub_3309(), 0, 0 );
            }
        }
        if (l_U322 == 1)
        {
            if (IS_BULLET_CAMERA_ACTIVE())
            {
                sub_493( "NS", "Player Shot Rocket", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "FAVELA_ONE_SONG", "FAV_ONE_4", "", 0.00000000, 0, 1000, -1082130432, 0 );
                if (NOT (IS_PED_DEAD( l_U345[0] )))
                {
                    SET_PED_HEALTH( l_U345[0], 0, 0 );
                }
                l_U322 = 0;
                g_U774 = 1;
            }
        }
        if ((IS_PED_DEAD( l_U345[0] )) || (IS_EXPLOSION_IN_SPHERE( -1, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( sub_3309() ), 20.00000000 )))
        {
            if (NOT (IS_PED_DEAD( sub_3309() )))
            {
                if ((IS_PED_DEAD( l_U345[0] )) || (NOT (IS_PED_DEAD( l_U345[0] ))))
                {
                    vVar2 = {sub_21216( (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( l_U345[0] ))) - (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( sub_3309() ))) )};
                    sub_18045( vVar2 );
                    APPLY_UNIFORMLY_DISTRIBUTED_IMPULSE_TO_RAGDOLL( l_U345[0], vVar2 * 750.00000000 );
                    sub_21352( l_U345[0] );
                }
            }
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U345[0], 1 );
            TASK_DROP_WEAPON( l_U345[0], GET_WEAPON_FROM_HAND( l_U345[0], 0, 0 ) );
            TASK_DROP_WEAPON( l_U345[0], GET_WEAPON_FROM_HAND( l_U345[0], 1, 0 ) );
            REMOVE_ALL_PED_WEAPONS( l_U345[0] );
            TASK_GO_STRAIGHT_TO_COORD( l_U345[0], 7.70000000, 43.74000000, 27.26000000, 3, -1 );
            SET_PLAYER_FORCED_AIM( sub_3331(), 0, 0 );
            DEACTIVATE_BULLET_TIME( 0, 0 );
            ENABLE_MPM( 0 );
            ENABLE_ALL_ADRENALINE( 1 );
            l_U528 = 0;
            SET_PED_CONSUMING_AMMO( sub_3309(), 1 );
        }
        break;
    }
    return;
}

void sub_19268()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;

    uVar2 = GET_WEAPON_FROM_HAND( sub_3309(), 0, 0 );
    uVar3 = GET_WEAPON_FROM_HAND( sub_3309(), 1, 0 );
    uVar4 = GET_WEAPON_FROM_HOLSTER( sub_3309(), 0 );
    uVar5 = GET_WEAPON_FROM_HOLSTER( sub_3309(), 1 );
    uVar6 = GET_WEAPON_FROM_HOLSTER( sub_3309(), 2 );
    if (((GET_WEAPON_AMMO( uVar3 )) <= 0) AND ((GET_WEAPON_AMMO( uVar2 )) <= 0))
    {
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            if ((GET_WEAPON_AMMO( uVar4 )) > 0)
            {
                SELECT_WEAPON_TO_HAND( sub_3309(), uVar4, 0, 1 );
            }
        }
        else if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            if ((GET_WEAPON_AMMO( uVar5 )) > 0)
            {
                SELECT_WEAPON_TO_HAND( sub_3309(), uVar5, 0, 1 );
            }
        }
        else if ((GET_DOES_WEAPON_EXIST( uVar6 )) == 1)
        {
            if ((GET_WEAPON_AMMO( uVar6 )) > 0)
            {
                SELECT_WEAPON_TO_HAND( sub_3309(), uVar6, 0, 1 );
            }
        };;;
    }
    return;
}

void sub_19739(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

void sub_20337()
{
    int I;

    sub_493( "NS", "P_ACTION_REPLACEMENTS", 0 );
    sub_20386( ref l_U348 );
    for ( I = 0; I < 3; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U348[I] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U348[I], 0 );
            TASK_COMBAT_PED( l_U348[I], sub_3309() );
        }
    }
    return;
}

void sub_20386(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_19739( (uParam0^)[I] );
    }
    return;
}

void sub_21216(unknown uParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown Result;
    unknown uVar7;
    unknown uVar8;

    uVar5 = SQRT( ((uParam0._fU0 * uParam0._fU0) + (uParam0._fU4 * uParam0._fU4)) + (uParam0._fU8 * uParam0._fU8) );
    Result._fU0 = uParam0._fU0 / uVar5;
    Result._fU4 = uParam0._fU4 / uVar5;
    Result._fU8 = uParam0._fU8 / uVar5;
    return Result;
}

void sub_21352(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

void sub_21667(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return sub_14595( sub_3309(), uParam0 );
}

void sub_21978()
{
    sub_493( "SA", "P_UNLOAD_ASSETS", "###" );
    sub_10299( -2138428787 );
    sub_10299( 973577609 );
    sub_10267( 1545805694 );
    sub_10267( -1312131151 );
    sub_22073( "EXPL_CAM" );
    ISEQ_TERMINATE( -1613942561 );
    sub_22073( "npc_pstl_cover_grenade" );
    sub_22073( "npc_rifle_cover_grenade" );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U111._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( l_U279._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U132._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U153._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U174._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U195._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U216._fU0 );
    GAMEPLAY_HELPER_BOX_DESTROY( ref l_U237._fU0 );
    return;
}

void sub_22073(unknown uParam0)
{
    REMOVE_ANIM_DICT( uParam0, 0 );
    return;
}

int sub_22399()
{
    if ((HAS_CUTSCENE_LOADED()) AND ((HAS_WEAPON_LOADED( -1464892298 )) AND ((HAS_MODEL_LOADED( 1917029888 )) AND ((HAS_MODEL_LOADED( -693003798 )) AND ((HAS_MODEL_LOADED( 1437984777 )) AND ((HAS_MODEL_LOADED( 1286278693 )) AND (HAS_MODEL_LOADED( -389601559 ))))))))
    {
        return 1;
    }
    return 0;
}

void sub_22517()
{
    sub_493( "NS", "P_HANDLE_07_05_PEDS", 0 );
    sub_9757( l_U392 );
    sub_9757( l_U406 );
    sub_9757( l_U420 );
    sub_9757( l_U435 );
    sub_9723( ref l_U449 );
    sub_1504( ref l_U421, 20.30000000, 62.86000000, 38.37000000, 0.00000000, -1867296666, 7, 3, 2, 0, 0 );
    l_U420 = sub_12332( ref l_U421 );
    l_U434 = sub_5573( l_U420, -1464892298, 25000, 0, 1 );
    sub_14407( l_U420 );
    return;
}

void sub_22752(unknown uParam0)
{
    sub_493( "NS", "P_PRELOAD_MODEL_07_05", 0 );
    sub_22804( l_U597, uParam0 );
    sub_11701( -1464892298, uParam0 );
    sub_11517( 1437984777, uParam0 );
    return;
}

void sub_22804(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                WAIT( 0 );
            }
        }
    }
    return;
}

void sub_23096()
{
    unknown uVar2;

    switch (l_U599)
    {
        case 0:
        sub_493( "NS", "C07_05_INIT", 0 );
        g_U773 = 0;
        g_U784 = 1;
        if (NOT (IS_PED_DEAD( sub_3309() )))
        {
            if ((GET_IS_PED_FORCED_TO_WALK( sub_3309() )) == 1)
            {
                SET_PED_FORCED_TO_WALK( sub_3309(), 0 );
                SET_PLAYER_CONTROL( sub_3331(), 0, 0 );
                REMOVE_ALL_PED_WEAPONS( sub_3309() );
            }
        }
        sub_5573( sub_3309(), -1464892298, 25000, 0, 1 );
        sub_9709();
        CLEAR_AREA( 10.73972000, 26.06575000, 27.63204000, 2000.00000000, 1 );
        sub_10267( 1545805694 );
        sub_10267( -1312131151 );
        sub_10299( -2138428787 );
        sub_10267( g_U1817 );
        sub_10267( g_U1818 );
        sub_10267( g_U1820 );
        sub_10267( g_U1821 );
        sub_22752( 1 );
        if (l_U323 == 1)
        {
            sub_22517();
        }
        if (NOT (IS_PED_DEAD( l_U420 )))
        {
            REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U420, "Sero_Unif_2", 0 );
        }
        if (GET_DOES_WEAPON_EXIST( l_U434 ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( l_U434, "W_PI_GLK18_AA_H", 0 );
        }
        if (NOT (IS_PED_DEAD( l_U392 )))
        {
            REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U392, "Marc_Fav", 0 );
        }
        if (NOT (IS_PED_DEAD( l_U406 )))
        {
            REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U406, "Fabi_Fav_1", 0 );
        }
        if (NOT (IS_PED_DEAD( l_U435 )))
        {
            REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U435, "Giov_Fav", 0 );
        }
        if (NOT (IS_PED_DEAD( l_U449[0] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U449[0], 1 );
            REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U449[0], "M_F1_GCS_B", 0 );
        }
        if (NOT (IS_PED_DEAD( l_U449[1] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U449[1], 1 );
            REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U449[1], "M_F1_GCS_B^1", 0 );
        }
        if (NOT (IS_PED_DEAD( l_U449[2] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U449[2], 1 );
            REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U449[2], "M_F1_GCS_B^2", 0 );
        }
        if (NOT (IS_PED_DEAD( l_U449[3] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U449[3], 1 );
            REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U449[3], "M_F1_GCS_B^3", 0 );
        }
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "Marc_Fav", -597795599 );
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "Fabi_Fav_1", 388293314 );
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "Giov_Fav", 912230522 );
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_F1_GCS_B", -2144750793 );
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_F1_GCS_B^1", 61752952 );
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_F1_GCS_B^2", 1961140230 );
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_F1_GCS_B^3", -719189055 );
        sub_24093( l_U507, 0 );
        uVar2 = sub_24191();
        if (((GET_DOES_WEAPON_EXIST( uVar2 )) == 1) AND ((IS_PED_DEAD( sub_3309() )) == 0))
        {
            if ((GET_WEAPON_TYPE( uVar2 )) == g_U1818)
            {
                SET_WEAPON_VISIBLE( uVar2, 0 );
            }
            else
            {
                SELECT_WEAPON_TO_HAND( sub_3309(), uVar2, 0, 1 );
                REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_CLT1911_AA_H", 0 );
            }
        }
        REGISTER_HIDE_ENTITY_AT_POSITION( g_U1342._fU0, g_U1342._fU4 );
        REGISTER_HIDE_ENTITY_AT_POSITION( g_U1685._fU0, g_U1685._fU4 );
        CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        CUTSCENE_ENABLE_SKIP( 0 );
        CUTSCENE_REGISTER_SWITCH_TO_LEVEL_NAME( "s_cemet" );
        DISABLE_FADE_BETWEEN_SP_LEVELS();
        AUD_ENABLE_PRE_BINK_SHUTDOWN( 1 );
        START_SEAMLESS_CUTSCENE();
        l_U599 = 1;
        break;
        case 1:
        DISPLAY_HUD( 0 );
        if (IS_SCREEN_FADED_OUT())
        {
            DO_SCREEN_FADE_IN( 0 );
        }
        SET_OBJECT_VISIBLE( DOOR_FIND_CLOSEST( g_U1720._fU0, g_U1720._fU4 ), 0 );
        SET_OBJECT_VISIBLE( DOOR_FIND_CLOSEST( g_U1713._fU0, g_U1713._fU4 ), 0 );
        l_U599 = 2;
        break;
        case 2:
        if ((WAS_CUTSCENE_SKIPPED() == 1) || (HAS_CUTSCENE_FINISHED()))
        {
            sub_493( "NS", "C07_05_PLAYING", 0 );
            if (GET_DOES_WEAPON_EXIST( l_U600 ))
            {
                SET_WEAPON_VISIBLE( l_U600, 1 );
            }
            sub_24093( l_U507, 1 );
            l_U599 = 3;
        }
        break;
        case 3:
        sub_493( "NS", "C07_05_CLEANUP", 0 );
        l_U599 = 4;
        break;
        case 4:
        sub_493( "NS", "C07_05_FINISHED", 0 );
        l_U591 = 1;
        break;
    }
    return;
}

void sub_24093(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18)
{
    unknown uVar21;
    unknown uVar22;

    uVar21 = uParam0._fU24._fU0;
    if ((GET_DOES_WEAPON_EXIST( uVar21 )) == 1)
    {
        SET_WEAPON_VISIBLE( uVar21, uParam18 );
    }
    uVar22 = uParam0._fU60._fU0;
    if ((GET_DOES_WEAPON_EXIST( uVar22 )) == 1)
    {
        SET_WEAPON_VISIBLE( uVar22, uParam18 );
    }
    return;
}

int sub_24191()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD( sub_3309() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND( sub_3309(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if ((sub_24254( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND( sub_3309(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER( sub_3309(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER( sub_3309(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

int sub_24254(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

int sub_25098()
{
    unknown uVar2;

    uVar2 = sub_25112( ref l_U348 );
    if (NOT (IS_PED_DEAD( uVar2 )))
    {
        sub_493( "NS", "set ped to have a bullet cam", 0 );
        CLEAR_PED_TASKS( uVar2 );
        SET_PED_COMBAT_ATTRIBUTES( uVar2, 1, 0 );
        return 1;
    }
    return 0;
}

void sub_25112(unknown uParam0)
{
    int I;

    if ((sub_25124( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

void sub_25124(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

void sub_25448()
{
    sub_21978();
    sub_10200();
    return;
}

