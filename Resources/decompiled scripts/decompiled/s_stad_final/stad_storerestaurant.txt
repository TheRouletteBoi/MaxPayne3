void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U39 = -1;
    l_U40 = {64536, 64536, 64536};
    l_U62 = 0;
    l_U63 = 0;
    l_U64 = 1500;
    l_U75 = 0;
    l_U127 = 0;
    l_U129 = 1;
    l_U130 = 0;
    l_U172 = {94.00000000, -9.80000000, 9.60000000};
    l_U175 = 90.00000000;
    l_U494 = 2000;
    l_U495 = 750;
    l_U660 = -1;
    l_U670 = {90.40000000, 14.96000000, 9.62000000};
    l_U673 = 270.00000000;
    l_U724 = 12000;
    l_U725 = 15000;
    l_U1314 = {85.25000000, 25.81000000, 9.60000000};
    l_U1317 = 180.00000000;
    l_U1318 = {93.24000000, 3.54000000, 9.64000000};
    l_U1321 = 0.00000000;
    l_U1377 = {92.58926000, -9.65747400, 9.60318000};
    l_U1380 = 89.75311000;
    l_U1381 = 0;
    l_U1382 = 0;
    l_U1383 = 0;
    l_U1384 = 0;
    l_U1385 = 0;
    l_U1386 = 0;
    l_U1387 = 0;
    l_U1388 = 0;
    l_U1408 = 0;
    l_U1409 = 0;
    l_U1410 = 0;
    l_U1411 = 0;
    l_U1422 = 0;
    l_U1450 = 0;
    sub_607( "SP", "Script stad_StoreRestaurant.sc is starting up...", 0 );
    sub_656();
    sub_1230();
    l_U127 = 1;
    l_U75 = 0;
    while (NOT IS_EXITFLAG_SET())
    {
        sub_3071();
        if (l_U130 == 0)
        {
            sub_13091();
        }
        WAIT( 0 );
    }
    sub_5810( 0 );
    sub_65272();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "stad_StoreRestaurant" );
    sub_607( "SP", "Script stad_StoreRestaurant.sc is terminating...", 0 );
    return;
}

void sub_607(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    return;
}

void sub_656()
{
    sub_607( "GA", "P_STORE_POPULATE_VARIABLE_ARRAYS start", 0 );
    l_U113[0] = g_U2390;
    l_U113[1] = -1652775333;
    l_U113[2] = 1816766229;
    l_U113[3] = 1873472982;
    l_U113[4] = -1993976541;
    l_U113[5] = -2096019114;
    l_U113[6] = g_U2382;
    l_U113[7] = g_U2383;
    l_U113[8] = g_U847;
    l_U123[0] = 1194438308;
    l_U123[1] = 1478009203;
    l_U123[2] = 434544317;
    l_U496 = {93.27000000, 5.68000000, 9.70000000};
    l_U499 = 176.80000000;
    l_U500 = 500;
    l_U595[0] = {92.42000000, 4.33000000, 11.20000000};
    l_U605[0] = {-5.16000000, 0.00000000, -51.91000000};
    l_U619[0] = {3.00000000, 0.00000000, 3.00000000};
    l_U615[0] = 1500;
    l_U595[1] = {91.76572000, -7.67074900, 11.92441000};
    l_U605[1] = {-19.65665000, -0.00548800, -150.58190000};
    l_U619[1] = {5.00000000, 0.00000000, 5.00000000};
    l_U615[1] = 2000;
    l_U595[2] = {93.44251000, -11.96680000, 13.62962000};
    l_U605[2] = {-69.99995000, -0.00000100, -88.08092000};
    l_U619[2] = {3.00000000, 3.00000000, 3.00000000};
    l_U615[2] = 3000;
    sub_607( "GA", "P_STORE_POPULATE_VARIABLE_ARRAYS end", 0 );
    return;
}

void sub_1230()
{
    if (NOT l_U1450)
    {
        START_WIDGET_GROUP( "Stores/Concession tuning" );
        START_WIDGET_GROUP( "Passos death scene" );
        ADD_WIDGET_INT_SLIDER( "Passos comes out cover delay", ref l_U500, 0, 10000, 1 );
        START_WIDGET_GROUP( "Shooter Position" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U496._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U496._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U496._fU8, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Heading", ref l_U499, 65356, 180, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Cam 1" );
        START_WIDGET_GROUP( "Position" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U595[0]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U595[0]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U595[0]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Rotation" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U605[0]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U605[0]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U605[0]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Shake" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U619[0]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U619[0]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U619[0]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        ADD_WIDGET_INT_SLIDER( "Duration", ref l_U615[0], 0, 10000, 1 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Cam 2" );
        START_WIDGET_GROUP( "Position" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U595[1]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U595[1]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U595[1]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Rotation" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U605[1]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U605[1]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U605[1]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Shake" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U619[1]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U619[1]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U619[1]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        ADD_WIDGET_INT_SLIDER( "Duration", ref l_U615[1], 0, 10000, 1 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Cam 3" );
        START_WIDGET_GROUP( "Position" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U595[2]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U595[2]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U595[2]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Rotation" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U605[2]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U605[2]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U605[2]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Shake" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U619[2]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U619[2]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U619[2]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        ADD_WIDGET_INT_SLIDER( "Duration", ref l_U615[2], 0, 10000, 1 );
        STOP_WIDGET_GROUP();
        ADD_WIDGET_INT_SLIDER( "nPassosDeathCamTimer_Restaurant", ref l_U494, 0, 10000, 1 );
        ADD_WIDGET_INT_SLIDER( "nPassosDeathCamTimer_Stairs", ref l_U495, 0, 10000, 1 );
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        l_U1450 = 1;
    }
    return;
}

void sub_3071()
{
    if (g_U855 == 5)
    {
        switch (l_U130)
        {
            case 0:
            if (((IS_PED_DEAD( g_U4007 )) AND (DOES_PED_EXIST( g_U4007 ))) || ((sub_3226()) || (IS_PED_DEAD( sub_3153() ))))
            {
                if (IS_PED_DEAD( g_U4392 ))
                {
                    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
                    RESET_LAST_MAN_STANDING();
                    if (NOT (IS_PED_DEAD( sub_3153() )))
                    {
                        SET_PED_INVINCIBLE( sub_3153(), 1 );
                    }
                }
                l_U130 = 1;
                sub_607( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if (sub_3810())
            {
                l_U130 = 2;
            }
            else if ((sub_3850( 0 )) == 1)
            {
                l_U130 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD( sub_3153() )))
            {
                if ((g_U888[6]._fU40 != 4) AND (g_U888[6]._fU40 != 0))
                {
                    sub_607( "CR", "Shutting down script for MCE_CONCESSION.", 0 );
                    sub_5297( ref g_U888[6] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U888[6]._fU32 );
                    g_U3876 = 0;
                }
                l_U130 = 3;
                sub_607( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
            sub_607( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD( sub_3153() ))) AND (NOT (IS_PLAYER_DEAD( sub_3175() ))))
            {
                SET_PLAYER_CONTROL( sub_3175(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK( sub_3153() ))
                {
                    SET_PED_FORCED_TO_WALK( sub_3153(), 0 );
                }
                SET_PED_INVINCIBLE( sub_3153(), 0 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            sub_5588( "STAD_PASSOS_STORES_SCRIPTED_FAIL_FX" );
            TERMINATE_GAME_BULLET_CAMERA();
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
            sub_5810( 1 );
            sub_8096( 5 );
            l_U130 = 4;
            sub_607( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
            sub_607( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U77._fU0)
            {
                sub_8869( ref l_U77, sub_3153() );
            }
            l_U130 = 5;
            sub_607( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
            sub_607( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U127 = 1;
            l_U129 = 0;
            l_U130 = 0;
            sub_607( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

int sub_3153()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED( sub_3175() );
    }
    return 0;
}

void sub_3175()
{
    return GET_PLAYER_ID();
}

int sub_3226()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD( sub_3153() )))
        {
            SET_PED_FORCED_TO_WALK( sub_3153(), 0 );
            SET_PLAYER_FORCED_AIM( sub_3175(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE( sub_3175(), 1 );
            if ((IS_PED_VISIBLE( sub_3153() )) == 0)
            {
                SET_PED_VISIBLE( sub_3153(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

void sub_3810()
{
    return g_U648;
}

int sub_3850(int iParam0)
{
    iParam0 = 1;
    switch (l_U63)
    {
        case 0:
        if (NOT (sub_3911( ref l_U65 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_3153() )))
            {
                l_U64 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
            sub_4021( ref l_U65, l_U64, 1, 1 );
            sub_4157( ref l_U65 );
        }
        if (sub_4277( ref l_U65 ))
        {
            sub_607( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_3153() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD( sub_3175() )))
            {
                SET_PLAYER_CONTROL( sub_3175(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U63 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U63 = 2;
            }
            else
            {
                l_U63 = 3;
            }
        }
        break;
        case 2:
        sub_607( "NS", "Player will QUIT", 0 );
        sub_4764();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
        sub_607( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        sub_4764();
        return 1;
        break;
    }
    return 0;
}

int sub_3911(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_4021(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

void sub_4157(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

int sub_4277(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

void sub_4764()
{
    sub_607( "NS", "P_PostFailRetryCleanup", 0 );
    sub_4814( ref l_U65 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD( sub_3175() )))
    {
        SET_PLAYER_CONTROL( sub_3175(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U62 = 0;
    l_U62 = l_U62;
    l_U63 = 0;
    return;
}

void sub_4814(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

void sub_5297(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

void sub_5588(unknown uParam0)
{
    sub_607( "CO", "P_IMAGEFX_STOP_BULLETCAM:  Cameras Deleted", 0 );
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    sub_5671( ref l_U76 );
    l_U75 = 1;
    return;
}

void sub_5671(unknown uParam0)
{
    if ((DOES_CAM_EXIST( (uParam0^) )) == 1)
    {
        if ((IS_CAM_ACTIVE( (uParam0^) )) == 1)
        {
            SET_CAM_ACTIVE( (uParam0^), 0 );
        }
        DESTROY_CAM( (uParam0^) );
    }
    (uParam0^) = nil;
    return;
}

void sub_5810(boolean bParam0)
{
    sub_607( "GA", "P_CLEANUP_STORE start", 0 );
    sub_5861( -767085492, 0 );
    sub_6069( -767085492, ref g_U1263 );
    sub_5861( -334595829, 0 );
    sub_6069( -334595829, ref g_U1263 );
    sub_5861( 1262534908, 0 );
    sub_6069( 1262534908, ref g_U1263 );
    sub_5861( 1812693303, 0 );
    sub_6069( 1812693303, ref g_U1263 );
    sub_5861( 1154908660, 0 );
    sub_6069( 1154908660, ref g_U1263 );
    sub_5861( -1414847258, 0 );
    sub_6069( -1414847258, ref g_U1263 );
    sub_6568( l_U660, 0 );
    sub_6731( ref l_U660 );
    if ((CUTSCENE_NAMED_IS_LOADING( "03_02a_stad_concat" )) || (CUTSCENE_IS_LOADED( "03_02a_stad_concat" )))
    {
        CLEAR_NAMED_CUTSCENE( "03_02a_stad_concat" );
    }
    if ((CUTSCENE_NAMED_IS_LOADING( "03_02a_STADIUM_PT8" )) || (CUTSCENE_IS_LOADED( "03_02a_STADIUM_PT8" )))
    {
        CLEAR_NAMED_CUTSCENE( "03_02a_STADIUM_PT8" );
    }
    sub_7094( ref l_U705, 0 );
    if (NOT (IS_PED_DEAD( sub_3153() )))
    {
        SET_PED_FORCED_TO_WALK( sub_3153(), 0 );
    }
    sub_7277( ref l_U453 );
    if (bParam0)
    {
        sub_7384( g_U4007 );
        sub_7462( ref g_U4008 );
        sub_7462( ref g_U4141 );
        sub_7384( g_U4186 );
        sub_7572( ref g_U4187 );
        sub_7310( g_U4191 );
    }
    sub_7384( l_U674 );
    sub_7654( ref l_U1322 );
    sub_7829( bParam0 );
    sub_607( "GA", "P_CLEANUP_STORE end", 0 );
    return;
}

void sub_5861(unknown uParam0, int iParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;

    if ((ISEQ_DOES_EXIST( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The interactive sequence you are trying to terminate does not exist!!!!", 0 );
    }
    if ((ISEQ_IS_LOADED( uParam0 )) == 1)
    {
        ISEQ_TERMINATE( uParam0 );
    }
    ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
    if (iParam1 == 1)
    {
        while ((ISEQ_IS_LOADED( uParam0 )) == 1)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_6069(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_6181( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

int sub_6181(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else if ((uParam1^)[I] == iParam0)
        {
            (uParam1^)[I] = nil;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            Result = I;
        }
        else
        {
            (uParam1^)[I] = nil;
        };;;
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

void sub_6568(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
        sub_607( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
        sub_607( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

void sub_6731(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
        sub_607( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
        sub_607( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

void sub_7094(int iParam0, unknown uParam1)
{
    if (NOT (sub_7108( (iParam0^) )))
    {
        ;
    }
    else if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (iParam0->_fU8 == g_U6[iParam0->_fU4])
        {
            STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
        }
    }
    return;
}

boolean sub_7108(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

void sub_7277(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_7310( (uParam0^)[I] );
    }
    return;
}

void sub_7310(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

void sub_7384(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

void sub_7462(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_7494( ref (uParam0^)[I] );
    }
    return;
}

void sub_7494(int iParam0)
{
    sub_7384( iParam0->_fU0 );
    iParam0->_fU172 = 0;
    return;
}

void sub_7572(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_7384( (uParam0^)[I] );
    }
    return;
}

void sub_7654(int iParam0)
{
    iParam0->_fU164 = 0;
    I_SEQUENCE_UNREGISTER_ENTITY( "S_STAD_SNIPBEH", "stad_sniper" );
    sub_7728( "S_STAD_SNIPBEH", 0 );
    sub_7384( iParam0->_fU0 );
    return;
}

void sub_7728(unknown uParam0, int iParam1)
{
    if ((I_SEQUENCE_IS_LOADED( uParam0 )) == 1)
    {
        I_SEQUENCE_TERMINATE( uParam0 );
    }
    if (iParam1 == 1)
    {
        while ((I_SEQUENCE_IS_LOADED( uParam0 )) == 1)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_7829(boolean bParam0)
{
    sub_607( "CCB", "P_STOP_SP_CHALLENGES", 0 );
    if (bParam0)
    {
        sub_607( "CCB", "Stopping the Stadium_Stores context...", 0 );
        END_CONTEXT( "Stadium_Stores" );
    }
    else
    {
        sub_607( "CCB", "Stopping the Stadium_To_Stands context...", 0 );
        END_CONTEXT( "Stadium_To_Stands" );
    }
    return;
}

void sub_8096(unknown uParam0)
{
    vector vVar3;
    unknown uVar6;
    int iVar7;
    string sVar8;
    unknown uVar9;

    sub_8120( "P_LOAD_AREA" );
    vVar3 = {g_U2138[uParam0]};
    uVar6 = g_U2256[uParam0];
    iVar7 = -1;
    switch (uParam0)
    {
        case 2:
        case 21:
        iVar7 = GET_HASH_KEY( ref g_U2460 );
        sVar8 = "Int_Bsmt_01";
        break;
        case 3:
        case 22:
        iVar7 = GET_HASH_KEY( "Room_Hallway_01" );
        sVar8 = "Int_Bsmt_02";
        break;
        case 4:
        case 23:
        iVar7 = GET_HASH_KEY( "Room_Staircase_02" );
        sVar8 = "Int_Bsmt_03";
        break;
        case 5:
        case 24:
        iVar7 = GET_HASH_KEY( ref g_U2484 );
        sVar8 = "int_store_00";
        break;
        case 9:
        case 27:
        iVar7 = GET_HASH_KEY( ref g_U2548 );
        sVar8 = "int_Trophy_01";
        break;
        case 10:
        vVar3 = {-97.16455000, 22.49700000, 26.58807000};
        SET_PED_COORDS( sub_3153(), -2.36477500, 2.76315900, 1.17283500, 1 );
        SET_PED_HEADING( sub_3153(), uVar6 );
        LOAD_SCENE( -2.36477500, 2.76315900, 1.17283500 );
        break;
    }
    if (iVar7 == -1)
    {
        LOAD_SCENE( vVar3 );
    }
    else
    {
        uVar9 = GET_INTERIOR_FROM_NAME( sVar8, 0 );
        SET_INTERIOR_ACTIVE( uVar9, 1, 0 );
        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar9, iVar7 );
    }
    if ((IS_PED_DEAD( sub_3153() )) == 0)
    {
        SET_PED_COORDS( sub_3153(), vVar3, 1 );
        SET_PED_HEADING( sub_3153(), uVar6 );
        FREEZE_PED_POSITION( sub_3153(), 0 );
    }
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2296[uParam0], 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2296[uParam0], 1065353216, 0 );
    return;
}

void sub_8120(unknown uParam0)
{
    unknown uVar3;

    uVar3 = GET_REAL_GAME_TIMER();
    return;
}

void sub_8869(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

    sub_607( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
    sub_9053( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
        sub_10130( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 = sub_10422( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
        sub_10782( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 = sub_10422( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
        sub_10782( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 = sub_10422( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
        sub_10782( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 = sub_11067( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
        sub_10782( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 = sub_11067( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
        sub_10782( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if ((sub_11560( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
    sub_11721( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING( sub_3153(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
    sub_607( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

void sub_9053(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 = sub_9085( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

int sub_9085(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

void sub_10130(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

void sub_10422(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                }
            }
        }
    }
    else
    {
        sub_10738( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

void sub_10738(unknown uParam0)
{
    return;
}

void sub_10782(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

void sub_11067(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                }
            }
        }
    }
    else
    {
        sub_10738( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

int sub_11560(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

void sub_11721(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 = sub_9085( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
    sub_11793( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

void sub_11793(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

void sub_13091()
{
    int iVar2;

    iVar2 = l_U127;
    switch (l_U127)
    {
        case 0: break;
        case 1:
        sub_607( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
        sub_13295();
        sub_13705();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        ACTION_TREE_FORCE_UNLOAD( "NPC\AMED.act" );
        l_U127 = 2;
        sub_607( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
        sub_607( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        sub_16316();
        sub_22146();
        l_U127 = 3;
        sub_607( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if ((sub_25195( ref g_U2074 )) AND ((sub_25004( ref g_U1263 )) AND ((sub_24877( ref g_U1354 )) AND ((sub_24756( ref g_U1214 )) AND (sub_24636( ref g_U1069 ))))))
        {
            if ((NOT l_U77._fU0) AND (g_U854 == 5))
            {
                l_U127 = 4;
                sub_607( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U127 = 6;
                sub_607( "SP", "eCheckpointState = CP_STORE_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
        sub_607( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        l_U129 = 0;
        g_U3875 = 1;
        FREEZE_TIME_OF_DAY( 21, 0 );
        SET_WEATHER_TYPE_NOW_PERSIST( "SUNNY" );
        if ((sub_25583( ref l_U77 )) == 0)
        {
            sub_11067( sub_3153(), 68019059, 50, 0, 0 );
            sub_10422( sub_3153(), 1194438308, 0, 50, 0 );
            l_U127 = 5;
            sub_607( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U127 = 6;
            sub_607( "SP", "eCheckpointState = CP_STORE_PRE_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD( sub_3153() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER( sub_3153(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( sub_3153(), 0, 0 ) )))
            {
                l_U127 = 6;
                sub_607( "GA", "eCheckpointState = CP_STORE_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if (l_U128)
        {
            sub_7384( g_U4007 );
            sub_7462( ref g_U4008 );
            sub_7462( ref g_U4141 );
            sub_7384( g_U4186 );
            sub_7572( ref g_U4187 );
            sub_26150();
            l_U1312 = 1;
        }
        if (sub_26746( ref g_U4008, "RestaurantVCPF", ref l_U461, 0.00000000, 1, 0 ))
        {
            if (sub_26746( ref g_U4141, "RestaurantReinforcements", ref l_U467, 0.00000000, 1, 0 ))
            {
                if (sub_29991())
                {
                    if (sub_30867())
                    {
                        if (sub_31775())
                        {
                            if (sub_32238())
                            {
                                sub_33345();
                                sub_34714();
                                sub_34808();
                                sub_35820();
                                sub_36634();
                                l_U127 = 7;
                                sub_607( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
                            }
                        }
                    }
                }
            }
        }
        break;
        case 7:
        if (g_U3875)
        {
            l_U127 = 8;
            sub_607( "GA", "eCheckpointState = CP_HANDLE_03_02A_STAD", 0 );
        }
        break;
        case 8:
        if (l_U128)
        {
            sub_47299( ref l_U132, "03_02A_STAD_concat", 36978, 40356, 41989, 43581, 43626, 46737, 250, 0 );
            l_U132._fU100 = g_U853;
            if (l_U129)
            {
                l_U132._fU4 = 2;
            }
            else
            {
                AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_5_6", "", 0, 5000, -1, -1082130432, 0 );
                l_U132._fU4 = 7;
            }
        }
        if (sub_47793( ref l_U132 ))
        {
            if (NOT l_U77._fU0)
            {
                g_U855 = 5;
                sub_49968( ref l_U77, g_U855, sub_3153(), g_U2138[g_U855], g_U2256[g_U855], g_U2296[g_U855], g_U2336[g_U855], 1 );
            }
            l_U127 = 9;
            sub_607( "GA", "eCheckpointState = CP_RESTAURANT_FIGHT", 0 );
        }
        break;
        case 9:
        sub_53624( l_U128 );
        break;
        case 10:
        sub_58155( l_U128 );
        break;
        case 11:
        sub_61288( l_U128 );
        break;
        case 12:
        sub_62617( l_U128 );
        break;
        case 13:
        if ((g_U855 == 6) || (NOT HAS_CUTSCENE_FINISHED()))
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U127 = 0;
            sub_607( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U127 != iVar2)
    {
        l_U128 = 1;
    }
    else
    {
        l_U128 = 0;
    }
    return;
}

void sub_13295()
{
    sub_607( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U128 = 1;
    sub_13365( "SSTDAUD" );
    sub_4021( ref l_U629, 5000, 1, 0 );
    sub_4021( ref l_U638, 20000, 1, 0 );
    l_U482 = 0;
    l_U726 = 0;
    sub_4021( ref l_U661, 1000, 1, 0 );
    sub_4021( ref l_U696, 50, 1, 0 );
    l_U1312 = 0;
    l_U1313 = 0;
    sub_4021( ref l_U423, 2000, 1, 0 );
    l_U1381 = 0;
    l_U1382 = 0;
    l_U1385 = 0;
    l_U1386 = 0;
    l_U1383 = 0;
    l_U1384 = 0;
    l_U131 = 0;
    l_U1387 = 0;
    l_U1388 = 0;
    l_U1409 = 0;
    l_U1410 = 0;
    l_U1408 = 0;
    l_U1411 = 0;
    l_U1422 = 0;
    sub_607( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

void sub_13365(unknown uParam0)
{
    StrCopy( ref g_U157._fU0, uParam0, 16 );
    sub_13385();
    return;
}

void sub_13385()
{
    int I;

    for ( I = 0; I <= 8; I++ )
    {
        g_U157._fU16[I]._fU0 = nil;
        g_U157._fU16[I]._fU4 = 0;
        g_U157._fU92[I] = 0;
    }
    return;
}

void sub_13705()
{
    sub_607( "GA", "P_SET_STATIC_DATA start", 0 );
    sub_13789( ref l_U1272[0], 91.79931000, 2.07550300, 9.65311000, 0.00000000, 2069722096, 7, 3, 2, 0, 0 );
    sub_13789( ref l_U1272[1], 91.79931000, 2.07550300, 9.65311000, 0.00000000, 957054562, 26, 6, 0, 0, 0 );
    sub_13789( ref l_U1272[2], 91.79931000, 2.07550300, 9.65311000, 0.00000000, 1530933710, 26, 6, 0, 0, 0 );
    sub_13789( ref l_U647, l_U670, 0.00000000, -587133859, 26, 6, 0, 0, 0 );
    sub_14080( ref l_U675, "TRIGGER_DEAD_VCPF", 90.33000000, 17.75000000, 8.67000000, 22.00000000, 15.14000000, 4.85000000, 0.00000000, 0.00000000, 90.00000000, 1 );
    sub_14080( ref l_U359[0], "TRIGGER_IN_RESTAURANT", 89.67000000, 17.27000000, 8.67000000, 22.50000000, 21.10000000, 4.85000000, 0.00000000, 0.00000000, 90.00000000, 1 );
    sub_14080( ref l_U359[1], "TRIGGER_ENTERED_BATHROOMS", 107.39000000, -8.07000000, 9.50000000, 3.05000000, 15.97000000, 2.63000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_14080( ref l_U359[2], "TRIGGER_BY_STAIRS", 101.26000000, -22.62000000, 9.50000000, 15.23000000, 14.36000000, 2.63000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_14417( ref l_U218, ref l_U359 );
    sub_14080( ref l_U432, "TRIGGER_RESTAURANT_HARD_FAIL", 89.67000000, 21.33000000, 8.67000000, 22.50000000, 21.10000000, 4.85000000, 0.00000000, 0.00000000, 90.00000000, 1 );
    sub_14080( ref l_U868[0], "Amb Speech PETS A", 92.13000000, -21.38000000, 8.99000000, 7.32000000, 5.05000000, 4.19000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_14080( ref l_U868[1], "Amb Speech PETS B", 89.08000000, -17.41000000, 8.99000000, 1.59000000, 4.09000000, 4.19000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_14080( ref l_U868[2], "Amb Speech PETS C", 94.60000000, -14.95000000, 8.99000000, 2.24000000, 4.09000000, 4.19000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_14080( ref l_U868[3], "Amb Speech PETS D", 85.17000000, -4.20000000, 8.99000000, 4.60000000, 12.84000000, 4.19000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_14080( ref l_U868[4], "Amb Speech PETS E", 88.12000000, -0.24000000, 8.99000000, 1.40000000, 2.97000000, 4.19000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_14080( ref l_U868[5], "Amb Speech PETS G", 95.00000000, 3.68000000, 8.99000000, 1.89000000, 4.49000000, 4.19000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_14417( ref l_U727, ref l_U868 );
    sub_14080( ref l_U995, "SPEECH BAR", 94.32000000, 25.12000000, 8.67000000, 4.91000000, 5.09000000, 4.85000000, 0.00000000, 0.00000000, 90.00000000, 1 );
    sub_14080( ref l_U176, "TRIG_RESTAURANT_DIALOG_1", 90.76000000, 13.58000000, 8.90000000, 12.17000000, 14.78000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_14080( ref l_U197, "TRIG_RESTAURANT_DIALOG_2", 93.28000000, 24.26000000, 8.90000000, 7.00000000, 6.59000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_15576( ref l_U458[0], "TETHER_RESTAURANT_1", 92.29000000, 6.06000000, 8.42000000, 8.71000000, 17.61000000, 4.30000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_15576( ref l_U458[1], "TETHER_RESTAURANT_3", 86.94000000, -3.46000000, 8.42000000, 4.62000000, 18.67000000, 4.30000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_14080( ref l_U1157[0], "FoodCourt_Mono_A", 56.70000000, 73.37000000, 9.00000000, 9.04000000, 8.79000000, 3.96000000, 0.00000000, 0.00000000, -6.35000000, 1 );
    sub_14080( ref l_U1157[1], "FoodCourt_Mono_B", 64.66000000, 72.10000000, 9.00000000, 8.69000000, 7.15000000, 3.96000000, 0.00000000, 0.00000000, -19.73000000, 1 );
    sub_14080( ref l_U1157[2], "FoodCourt_Mono_C", 72.15000000, 69.26000000, 9.00000000, 8.78000000, 8.13000000, 3.96000000, 0.00000000, 0.00000000, -30.62000000, 1 );
    sub_14080( ref l_U1157[3], "FoodCourt_Mono_D", 79.20000000, 64.96000000, 9.00000000, 8.78000000, 8.13000000, 3.96000000, 0.00000000, 0.00000000, -40.28000000, 1 );
    sub_14080( ref l_U1157[4], "FoodCourt_Mono_E", 85.89000000, 59.79000000, 9.00000000, 8.78000000, 8.13000000, 3.96000000, 0.00000000, 0.00000000, -44.56000000, 1 );
    sub_14417( ref l_U1016, ref l_U1157 );
    sub_607( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

void sub_13789(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

void sub_14080(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_14417(int iParam0, unknown uParam1)
{
    int iVar4;
    int I;

    iVar4 = (uParam1^);
    if (iVar4 > 6)
    {
        sub_607( "[SA]", "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
        SCRIPT_ASSERT( "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
    }
    for ( I = 0; I < iVar4; I++ )
    {
        iParam0->_fU0[I] = {(uParam1^)[I]};
    }
    iParam0->_fU508 = iVar4;
    iParam0->_fU548 = 0;
    iParam0->_fU552 = 0;
    iParam0->_fU556 = 0;
    iParam0->_fU560 = 0;
    return;
}

void sub_15576(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_16316()
{
    sub_607( "GA", "P_REQUEST_STORE_PERSISTENT_ASSETS start", 0 );
    sub_16387( ref l_U113, ref g_U1069 );
    if ((l_U129) AND (g_U854 < 5))
    {
        sub_16422( g_U2378, ref g_U1069 );
    }
    sub_17827( ref l_U123, ref g_U1214 );
    sub_18832( "DAM_KO", ref g_U1354 );
    sub_18832( "LEVEL_S_STAD_CP_03", ref g_U1354 );
    sub_18832( "LEVEL_S_STAD_PU", ref g_U1354 );
    sub_18832( "DAM_DEAD", ref g_U1354 );
    sub_19925( "SCRIPT_MISSION\S_STAD_STORES_RADIO", ref g_U2074 );
    sub_20914( 0, 0 );
    sub_607( "GA", "P_REQUEST_STORE_PERSISTENT_ASSETS end", 0 );
    return;
}

void sub_16387(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_16422( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_16422(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 = sub_16457( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
            sub_16588( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

int sub_16457(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                sub_16588( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                sub_16588( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    sub_16588( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_17236( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                sub_16588( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_16588( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_16588(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_16608( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

int sub_16608(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            if ((uParam1^)[I] == iParam0)
            {
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
        else
        {
            (uParam1^)[I] = nil;
            Result = I;
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

void sub_17236(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

void sub_17827(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_17862( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_17862(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_17883( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
        sub_18015( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_17883(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                sub_18015( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                sub_18015( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    sub_18015( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_17236( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                sub_18015( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_18015( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_18015(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_16608( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_18832(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_18853( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
        sub_18990( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_18853(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                sub_18990( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                sub_18990( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    sub_18990( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                    sub_17236( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                sub_18990( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
            sub_18990( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_18990(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_16608( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_19925(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_19946( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
        sub_20084( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_19946(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                sub_20084( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                sub_20084( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    sub_20084( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                    sub_17236( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                sub_20084( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
            sub_20084( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_20084(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_16608( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_20914(boolean bParam0, boolean bParam1)
{
    if (NOT bParam0)
    {
        if (NOT bParam1)
        {
            sub_18832( "PLGE_RIFLE_CROUCH", ref g_U1354 );
            sub_18832( "PLGE_PSTL_CROUCH", ref g_U1354 );
            sub_18832( "PLGE_RIFLE_KNEE", ref g_U1354 );
            sub_18832( "PLGE_PSTL_KNEE", ref g_U1354 );
            sub_18832( "PLGE_PSTL_CORE", ref g_U1354 );
            sub_18832( "PLGE_PSTL_COVER", ref g_U1354 );
        }
        sub_18832( "PLGE_RIFLE_CORE", ref g_U1354 );
        sub_18832( "PLGE_RIFLE_CORE_RELOAD", ref g_U1354 );
        sub_18832( "PLGE_PSTL_CORE_RELOAD", ref g_U1354 );
        sub_18832( "PLGE_RIFLE_HANDSIG", ref g_U1354 );
        sub_18832( "PLGE_PSTL_HANDSIG", ref g_U1354 );
        sub_18832( "PLGE_RIFLE_ACTIONS", ref g_U1354 );
        sub_18832( "PLGE_PSTL_ACTIONS", ref g_U1354 );
        sub_18832( "PLGE_RIFLE_COVER", ref g_U1354 );
        sub_18832( "PLGE_RIFLE_REACT", ref g_U1354 );
        sub_18832( "PLGE_PSTL_REACT", ref g_U1354 );
        sub_18832( "PLGE_RIFLE_COVER_EXIT", ref g_U1354 );
        sub_18832( "PLGE_PSTL_COVER_EXIT", ref g_U1354 );
        sub_18832( "PLGE_PSTL_FULLBODY", ref g_U1354 );
    }
    else
    {
        sub_21520( "PLGE_RIFLE_CROUCH", 0, 1 );
        sub_21520( "PLGE_PSTL_CROUCH", 0, 1 );
        sub_21520( "PLGE_RIFLE_CORE", 0, 1 );
        sub_21520( "PLGE_PSTL_CORE", 0, 1 );
        sub_21520( "PLGE_RIFLE_CORE_RELOAD", 0, 1 );
        sub_21520( "PLGE_PSTL_CORE_RELOAD", 0, 1 );
        sub_21520( "PLGE_RIFLE_HANDSIG", 0, 1 );
        sub_21520( "PLGE_PSTL_HANDSIG", 0, 1 );
        sub_21520( "PLGE_RIFLE_ACTIONS", 0, 1 );
        sub_21520( "PLGE_PSTL_ACTIONS", 0, 1 );
        sub_21520( "PLGE_RIFLE_KNEE", 0, 1 );
        sub_21520( "PLGE_PSTL_KNEE", 0, 1 );
        sub_21520( "PLGE_RIFLE_COVER", 0, 1 );
        sub_21520( "PLGE_PSTL_COVER", 0, 1 );
        sub_21520( "PLGE_RIFLE_REACT", 0, 1 );
        sub_21520( "PLGE_PSTL_REACT", 0, 1 );
        sub_21520( "PLGE_RIFLE_COVER_EXIT", 0, 1 );
        sub_21520( "PLGE_PSTL_COVER_EXIT", 0, 1 );
        sub_21520( "PLGE_PSTL_FULLBODY", 0, 1 );
    }
    return;
}

void sub_21520(unknown uParam0, unknown uParam1, int iParam2)
{
    REQUEST_ANIM_DICT( uParam0, uParam1 );
    "[doubled result, dropped if not asigned]";
    if (iParam2 == 1)
    {
        while ((HAS_ANIM_DICT_LOADED( uParam0, uParam1 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_22146()
{
    sub_607( "GA", "P_REQUEST_STORE_NONPERSISTENT_ASSETS start", 0 );
    sub_22221( -767085492, ref g_U1263 );
    sub_22221( -334595829, ref g_U1263 );
    sub_22221( 1262534908, ref g_U1263 );
    sub_22221( 1812693303, ref g_U1263 );
    sub_22221( 1154908660, ref g_U1263 );
    sub_22221( -1414847258, ref g_U1263 );
    if ((l_U129) AND (g_U854 < 5))
    {
        sub_24253( "03_02a_stad_concat", 0 );
    }
    sub_607( "GA", "P_REQUEST_STORE_NONPERSISTENT_ASSETS end", 0 );
    return;
}

void sub_22221(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 = sub_22256( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
            sub_22408( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

int sub_22256(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                sub_22408( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                sub_22408( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        sub_22408( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                        sub_22408( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        sub_17236( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        sub_17236( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                sub_22408( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                sub_22408( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_22408(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_16608( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_24253(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                WAIT( 0 );
            }
        }
    }
    return;
}

int sub_24636(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_24756(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_24877(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_25004(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

int sub_25195(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_25583(unknown uParam0)
{
    sub_607( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
            sub_8869( uParam0, sub_3153() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

void sub_26150()
{
    sub_607( "GA", "P_RESTAURANT_VCPF_Pre start", 0 );
    sub_26261( ref g_U4008[0], 93.37000000, -2.25000000, 9.70000000, 180.00000000, g_U2484, -1328310086, g_U2383, 5, 40.00000000, 0, 68019059, 0 );
    sub_26261( ref g_U4008[1], 95.58000000, 6.60000000, 9.70000000, 160.00000000, g_U2492, 841173843, g_U2383, 7, 40.00000000, 0, 1478009203, 0 );
    sub_26261( ref g_U4008[2], 90.85000000, 6.58000000, 9.70000000, 200.00000000, g_U2492, 402676984, g_U2383, 6, 40.00000000, 0, 1478009203, 0 );
    sub_26261( ref g_U4141[0], 97.43761000, -0.24330100, 9.60270800, 90.00000000, g_U2476, -1885862289, g_U2383, 3, 6, 0, 434544317, 0 );
    sub_607( "GA", "P_RESTAURANT_VCPF_Pre end", 0 );
    return;
}

void sub_26261(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19)
{
    sub_26314( uParam0, uParam1, uParam4, uParam18, 68019059, 2, g_U3928, uParam15, uParam16, uParam14, uParam19, uParam17, uParam13, uParam5 );
    return;
}

void sub_26314(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29)
{
    iParam0->_fU56 = {uParam1};
    iParam0->_fU68 = uParam4;
    iParam0->_fU72 = uParam5;
    iParam0->_fU76 = uParam6;
    iParam0->_fU80 = uParam7;
    iParam0->_fU84 = {uParam8};
    iParam0->_fU116 = uParam16;
    iParam0->_fU120 = uParam17;
    iParam0->_fU124 = uParam18;
    iParam0->_fU128 = uParam19;
    iParam0->_fU132 = uParam20;
    iParam0->_fU136 = uParam21;
    iParam0->_fU140 = {uParam22};
    return;
}

int sub_26746(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4, boolean bParam5)
{
    int I;

    sub_10738( uParam1 );
    if (NOT bParam4)
    {
        sub_26776( uParam2, uParam3, 1 );
        for ( I = 0; I < (uParam0^); I++ )
        {
            sub_26973( ref (uParam0^)[I] );
            sub_29262( (uParam0^)[I]._fU0, uParam2 );
        }
        sub_29540( uParam0, uParam1 );
    }
    else if ((uParam0^)[0]._fU172 == 0)
    {
        sub_26776( uParam2, uParam3, 1 );
    }
    if ((uParam0^)[0]._fU172 < (uParam0^))
    {
        sub_26973( ref (uParam0^)[(uParam0^)[0]._fU172] );
        sub_29262( (uParam0^)[(uParam0^)[0]._fU172]._fU0, uParam2 );
        (uParam0^)[0]._fU172++;
    }
    else
    {
        sub_29540( uParam0, uParam1 );
        return 1;
    }
    if (bParam5)
    {
        sub_29806( uParam0, 1, 0, -1 );
    }
    return 0;
}

void sub_26776(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
        }
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

void sub_26973(int iParam0)
{
    unknown uVar3;

    sub_8120( "MAL_EnemyStructCreate starting" );
    sub_27088( iParam0 + 0, iParam0 + 4, iParam0->_fU56, iParam0->_fU68, iParam0->_fU72, iParam0->_fU80, iParam0->_fU84, iParam0->_fU116, iParam0->_fU120, iParam0->_fU124, 1 );
    if (NOT (ARE_STRINGS_EQUAL( iParam0 + 140, ref g_U652 )))
    {
        sub_10738( iParam0 + 140 );
        sub_28736( iParam0 + 0, iParam0 + 140 );
    }
    if (iParam0->_fU128)
    {
        sub_8120( "MAL_EnemyStructCreate giving ped backup weapon" );
        sub_28865( iParam0->_fU0, iParam0->_fU76, 25000, 1, 0 );
    }
    if (iParam0->_fU132)
    {
        uVar3 = GET_WEAPON_FROM_HAND( iParam0->_fU0, 0, 0 );
        sub_29062( ref uVar3, 14, 1 );
    }
    if (iParam0->_fU136 != 0)
    {
        sub_29188( iParam0 + 0, iParam0->_fU136 );
    }
    return iParam0->_fU0;
}

void sub_27088(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19)
{
    sub_27113( uParam1, uParam2, uParam5, uParam18, 7, 3, 2, 0, 0 );
    (uParam0^) = sub_27215( uParam0, uParam1, 1, 1, uParam19 );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( (uParam0^), 1 );
    }
    sub_28272( (uParam0^), uParam6, 25000, 0, 0 );
    sub_28457( uParam0, ref uParam8, uParam16, uParam17, 1 );
    sub_28634( uParam0, uParam7 );
    return (uParam0^);
}

void sub_27113(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU12 = uParam4;
    iParam0->_fU16 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU48 = uParam10;
    return;
}

void sub_27215(unknown uParam0, unknown uParam1, boolean bParam2, boolean bParam3, unknown uParam4)
{
    sub_7384( (uParam0^) );
    (uParam0^) = sub_27235( uParam1 );
    if (bParam3)
    {
        while (NOT (DOES_PED_EXIST( (uParam0^) )))
        {
            WAIT( 0 );
            sub_8120( "MAL_CreatePed waiting for ped to exist" );
        }
    }
    SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( (uParam0^), uParam4 );
    sub_28149( uParam0, 32, 0 );
    SET_PED_IGNORE_LOS_CHECKS( (uParam0^), NOT bParam2 );
    SET_PED_EMOTION_STATE( (uParam0^), 1 );
    return (uParam0^);
}

void sub_27235(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
        sub_27405( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
    sub_27874( iParam0->_fU40 );
    sub_27954( iParam0->_fU40 );
    return iParam0->_fU40;
}

void sub_27405(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
        sub_10738( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_27874(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

void sub_27954(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

void sub_28149(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_COMBAT_ATTRIBUTES( (uParam0^), uParam1, uParam2 );
    }
    return;
}

void sub_28272(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
    unknown Result;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (bParam4)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                sub_8120( "MAL_GivePedWeapon waiting for weapon to exist" );
            }
        }
        return Result;
    }
    return nil;
}

void sub_28457(unknown uParam0, unknown uParam1, float fParam2, float fParam3, boolean bParam4)
{
    sub_8120( "MAL_SetTemplateAndRanges" );
    sub_10738( uParam1 );
    sub_28508( fParam2 );
    sub_28508( fParam3 );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    if (NOT bParam4)
    {
        sub_28149( uParam0, 1, 0 );
    }
    return;
}

void sub_28508(unknown uParam0)
{
    return;
}

void sub_28634(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam1 );
    }
    return;
}

void sub_28736(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_ROOM_FOR_PED_BY_NAME( (uParam0^), uParam1 );
    }
    return;
}

void sub_28865(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
    int Result;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam2, uParam3 );
        if (bParam4)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam3 );
            while (Result == 0)
            {
                WAIT( 0 );
                Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam3 );
                sub_8120( "MAL_GivePedWeapon waiting for weapon to exist" );
            }
        }
        return Result;
    }
    return nil;
}

void sub_29062(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (GET_DOES_WEAPON_EXIST( (uParam0^) ))
    {
        if (bParam2)
        {
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
        else
        {
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
    }
    return;
}

void sub_29188(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PERSISTENT_PED_VARIATION_ENUM( (uParam0^), uParam1 );
    }
    return;
}

void sub_29262(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
        sub_10738( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
            sub_26776( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
            sub_26776( iParam1, 1056964608, 0 );
        }
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

void sub_29540(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I]._fU0 )))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I]._fU0, ref cVar5 );
        }
    }
    return;
}

void sub_29806(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
        sub_29856( ref (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_29856(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_FREEZE_PROCESSING( iParam0->_fU0, uParam1 );
    }
    return;
}

int sub_29991()
{
    char[64] cVar2;

    switch (l_U1312)
    {
        case 1:
        sub_607( "AT", "e_ST_SpawnCS = ENTITY_STATE_INIT", 0 );
        if (g_U855 < 5)
        {
            l_U1313 = 0;
        }
        else
        {
            l_U1313 = 1;
        }
        l_U1312 = 2;
        sub_607( "AT", "e_ST_SpawnCS = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating piStores_Cutscene_CS[", 64 );
        ConcatString(ref cVar2, l_U1313, 64);
        ConcatString(ref cVar2, "]", 64);
        g_U4187[l_U1313] = sub_27235( ref l_U1272[l_U1313] );
        if (NOT (IS_PED_DEAD( g_U4187[l_U1313] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4187[l_U1313], 1 );
            SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U4187[l_U1313], 1 );
            SET_PED_AIM_LOCKONABLE( g_U4187[l_U1313], 0 );
            SET_PED_CAN_BE_TARGETTED( g_U4187[l_U1313], 0 );
            SET_PED_AS_ONE_SHOT_KILL( g_U4187[l_U1313], 1 );
            STOP_PED_SPEAKING( g_U4187[l_U1313], 1 );
            SET_PED_INVINCIBLE( g_U4187[l_U1313], 1 );
            FREEZE_PED_POSITION( g_U4187[l_U1313], 1 );
            if (l_U1313 != 1)
            {
                SET_ROOM_FOR_PED_BY_NAME( g_U4187[l_U1313], ref g_U2484 );
            }
        }
        l_U1313++;
        if (l_U1313 >= g_U4187)
        {
            l_U1312 = 3;
            sub_607( "AT", "e_ST_SpawnCS = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
        sub_30605( ref g_U4187, "piStores_Cutscene_CS" );
        if (g_U855 < 5)
        {
            sub_11067( g_U4187[0], 68019059, 25000, 0, 1 );
            sub_11067( g_U4187[1], 434544317, 25000, 0, 1 );
            sub_11067( g_U4187[2], 1478009203, 25000, 0, 1 );
        }
        l_U1312 = 4;
        sub_607( "AT", "e_ST_SpawnCS = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

void sub_30605(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

int sub_30867()
{
    if (DOES_PED_EXIST( g_U4007 ))
    {
        sub_607( "GA", "Passos exists.", 0 );
        return 1;
        break;
    }
    sub_607( "GA", "Creating Passos", 0 );
    sub_27113( ref l_U159, l_U172, l_U175, g_U2376, 26, 6, 0, 0, 0 );
    g_U4007 = sub_27215( ref g_U4007, ref l_U159, 1, 0, 0 );
    sub_31031( ref g_U4007, "Pass_Stad_Hat" );
    if ((NOT (IS_PED_DEAD( g_U4007 ))) AND (DOES_PED_EXIST( g_U4007 )))
    {
        SET_PED_HEALTH( g_U4007, 400, 0 );
        SET_PED_GORE_AS_ALLY( g_U4007 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4007, 1 );
        SET_PED_CONSUMING_AMMO( g_U4007, 0 );
    }
    sub_31173( ref g_U4007 );
    sub_8120( "Giving Edison a gun" );
    sub_11067( g_U4007, 68019059, 25000, 0, 0 );
    sub_31327( ref g_U4007, 2, 3 );
    sub_31381( g_U4007, 1 );
    SET_PED_CAN_INITIATE_BULLET_CAM( g_U4007, 1 );
    SET_PED_VALIDATE_BULLET_CAM_HIT( g_U4007, 0 );
    SET_PED_ONLY_DAMAGED_BY_PLAYER( g_U4007, 1 );
    SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U4007, 1 );
    SET_AI_SHOULD_ALWAYS_MISS_PED( g_U4007, 1 );
    SET_PED_CAN_PUSH_PLAYER( g_U4007, 1 );
    SET_PED_RESIST_TO_OBJECT_COLLISION( g_U4007, 1 );
    "[doubled result, dropped if not asigned]";
    "[doubled result, dropped if not asigned]";
    SET_CAN_AI_KICK_THROUGH_CORPSES( g_U4007, 1 );
    "[doubled result, dropped if not asigned]";
    "[doubled result, dropped if not asigned]";
    SET_PED_AS_ONE_SHOT_KILL( g_U4007, 1 );
    SET_PED_NAME_DEBUG( g_U4007, "STORES_EDISON!" );
    return 0;
}

void sub_31031(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        sub_10738( uParam1 );
        SET_PERSISTENT_PED_VARIATION( (uParam0^), uParam1 );
    }
    return;
}

void sub_31173(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_STAND_STILL( 0, -1 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    return;
}

void sub_31327(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_RELATIONSHIP( (uParam0^), uParam1, uParam2 );
    }
    return;
}

int sub_31381(unknown uParam0, boolean bParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        if (bParam1)
        {
            if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( uParam0 )))
            {
                sub_8120( "MAL_SetCanTriggerBulletCam: Ped is not able to trigger BC, adding" );
                SET_PED_CAN_TRIGGER_BULLET_CAM( uParam0, bParam1 );
                return 1;
            }
        }
        else if (GET_PED_CAN_TRIGGER_BULLET_CAM( uParam0 ))
        {
            sub_8120( "MAL_SetCanTriggerBulletCam turning off BC" );
            SET_PED_CAN_TRIGGER_BULLET_CAM( uParam0, bParam1 );
            return 1;
        }
    }
    return 0;
}

int sub_31775()
{
    if (DOES_PED_EXIST( g_U4186 ))
    {
        sub_607( "GA", "Dead CP exists.", 0 );
        return 1;
        break;
    }
    sub_607( "GA", "Creating Dead CP.", 0 );
    g_U4186 = sub_27235( ref l_U647 );
    if (NOT (IS_PED_DEAD( g_U4186 )))
    {
        sub_31919( g_U4186, l_U670, l_U673 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4186, 1 );
        SET_ROOM_FOR_PED_BY_NAME( g_U4186, ref g_U2492 );
        FREEZE_PED_POSITION( g_U4186, 1 );
        SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U4186, 1 );
        SET_PED_AS_ONE_SHOT_KILL( g_U4186, 1 );
        STOP_PED_SPEAKING( g_U4186, 1 );
        SET_PED_INVINCIBLE( g_U4186, 1 );
        SET_PED_CAN_BE_TARGETTED( g_U4186, 0 );
        SET_FREEZE_PED_AIM( g_U4186, 1 );
        SET_PED_AIM_LOCKONABLE( g_U4186, 0 );
        SET_PED_NAME_DEBUG( g_U4186, "pi_DeadCPRestaurant" );
    }
    sub_32164( g_U4186, 1812693303, "DeadVCPF" );
    ISEQ_START( 1812693303 );
    return 0;
}

void sub_31919(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

void sub_32164(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        ISEQ_REGISTER_ENTITY( uParam1, uParam2, uParam0, 0 );
    }
    return;
}

int sub_32238()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;

    if (DOES_PED_EXIST( l_U674 ))
    {
        sub_607( "GA", "Dead washroom CS exists.", 0 );
        return 1;
        break;
    }
    sub_607( "GA", "Creating Dead Washroom CS", 0 );
    sub_13789( ref uVar2, 115.03250000, -3.42266600, 9.60178200, 0, -1072749639, 7, 3, 2, 0, 0 );
    l_U674 = sub_27215( ref g_U4411, ref uVar2, 1, 0, 0 );
    sub_32409( l_U674, 0 );
    return 0;
}

void sub_32409(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
        sub_10738( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

void sub_33345()
{
    sub_607( "GA", "P_RESTAURANT_VCPF_Post start", 0 );
    sub_33403( ref g_U4008, 3, 2 );
    sub_33608( ref g_U4008, 0, -1 );
    sub_33817( ref g_U4008, 2, 6 );
    sub_33929( ref g_U4008, 1 );
    sub_34057( ref g_U4008, "Flashlight_Stadium" );
    sub_34190( ref g_U4008, ref l_U458, 1 );
    sub_33403( ref g_U4141, 3, 2 );
    sub_33608( ref g_U4141, 0, -1 );
    sub_34445( ref g_U4141, 0, 0, -1 );
    sub_34057( ref g_U4141, "Flashlight_Stadium" );
    sub_34190( ref g_U4141, ref l_U458, 1 );
    sub_607( "GA", "P_RESTAURANT_VCPF_Post end", 0 );
    return;
}

void sub_33403(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_33439( ref (uParam0^)[I], uParam1, uParam2 );
    }
    return;
}

void sub_33439(int iParam0, unknown uParam1, unknown uParam2)
{
    sub_33457( iParam0 + 0, uParam1, uParam2 );
    return;
}

void sub_33457(unknown uParam0, unknown uParam1, unknown uParam2)
{
    sub_33471( uParam0, uParam1 );
    sub_33521( uParam0, uParam2 );
    return;
}

void sub_33471(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_ALERTNESS( (uParam0^), uParam1 );
    }
    return;
}

void sub_33521(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_EMOTION_STATE( (uParam0^), uParam1 );
    }
    return;
}

void sub_33608(unknown uParam0, unknown uParam1, int iParam2)
{
    int I;

    if (iParam2 == -1)
    {
        iParam2 = (uParam0^) - 1;
    }
    for ( I = uParam1; I <= iParam2; I++ )
    {
        sub_33663( ref (uParam0^)[I]._fU0, sub_3153() );
        sub_33735( ref (uParam0^)[I]._fU0, sub_3153() );
    }
    return;
}

void sub_33663(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        REGISTER_TARGET( (uParam0^), uParam1 );
    }
    return;
}

void sub_33735(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        SET_LOCKED_TARGET( (uParam0^), uParam1 );
    }
    return;
}

void sub_33817(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_33853( ref (uParam0^)[I], uParam1, uParam2 );
    }
    return;
}

void sub_33853(int iParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_RELATIONSHIP( iParam0->_fU0, uParam1, uParam2 );
    }
    return;
}

void sub_33929(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_33963( ref (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_33963(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_CAN_INITIATE_BULLET_CAM( iParam0->_fU0, uParam1 );
    }
    return;
}

void sub_34057(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_34091( ref (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_34091(int iParam0, unknown uParam1)
{
    if (iParam0->_fU132)
    {
        if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
        {
            SET_WEAPON_LIGHT_DATA_BY_NAME( GET_WEAPON_FROM_HAND( iParam0->_fU0, 0, 0 ), uParam1 );
        }
    }
    return;
}

void sub_34190(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        sub_34229( uParam0, (uParam1^)[I], uParam2, 0, -1 );
    }
    return;
}

void sub_34229(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    int I;

    if (iParam4 == -1)
    {
        iParam4 = (uParam0^) - 1;
    }
    for ( I = uParam3; I <= iParam4; I++ )
    {
        sub_34281( ref (uParam0^)[I], uParam1, uParam2 );
    }
    return;
}

void sub_34281(int iParam0, unknown uParam1, unknown uParam2)
{
    sub_34299( ref uParam1, iParam0->_fU0, uParam2 );
    return;
}

void sub_34299(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

void sub_34445(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
        sub_34495( ref (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_34495(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_VISIBLE( iParam0->_fU0, uParam1 );
    }
    else
    {
        sub_8120( "MAL_ES_SetPedVisible DOES NOT HAVE VALID PED!" );
    }
    return;
}

void sub_34714()
{
    sub_8120( "P_EDISON_SETUP_STORES" );
    if (NOT (IS_PED_DEAD( g_U4007 )))
    {
        SET_ROOM_FOR_PED_BY_NAME( g_U4007, ref g_U2484 );
        SET_PED_CAN_INITIATE_BULLET_CAM( g_U4007, 1 );
    }
    return;
}

void sub_34808()
{
    sub_607( "SP", "P_CREATE_STORE_PLACEMENTS", "###" );
    sub_7277( ref l_U453 );
    l_U453[0] = sub_34906( -4072149, 93.31000000, -3.10000000, 9.86000000, g_U649, 1, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U453[0], ref g_U2484 );
    l_U453[2] = sub_34906( -4072149, 118.14000000, -6.39000000, 10.83000000, g_U649, 1, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U453[2], "Room_Wash01" );
    sub_35098();
    return;
}

void sub_34906(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    return Result;
}

void sub_35098()
{
    sub_607( "CO", "Add_Placement_CL_S_STA_GG_M8_01", 0 );
    sub_35218( ref g_U739, g_U847, 945952788, -942653930, 88.35000000, -16.91000000, 10.65000000, 1.50000000, 0.00000000, 1.50000000, "Int_store_00" );
    sub_35347( ref g_U739 );
    return;
}

void sub_35218(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
        sub_607( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

void sub_35347(int iParam0)
{
    sub_607( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if ((sub_35408( iParam0->_fU12 )) == 1)
        {
            sub_607( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
            sub_607( "CO", "has never been collected.", 0 );
        }
        if ((sub_35408( iParam0->_fU12 )) == 0)
        {
            sub_7310( iParam0->_fU0 );
            iParam0->_fU0 = sub_34906( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                    sub_607( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
        sub_607( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

int sub_35408(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

void sub_35820()
{
    sub_35834( ref g_U3941 );
    g_U3941[0] = sub_35959( -1652775333, -4.14443000, 10.10766000, 0.14177000, 0, 0, 2.56000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[0] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[0], 1 );
    }
    g_U3941[1] = sub_35959( 1816766229, 10.25816000, 2.27307000, 0.14177000, 0, 0, 1.88000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[1] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[1], 1 );
    }
    g_U3941[2] = sub_35959( 1873472982, 13.91821000, 23.57691000, 0.14177000, 0, 0, 2.23000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[2] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[2], 1 );
    }
    g_U3941[3] = sub_35959( -1993976541, 11.90281000, 13.09956000, 0.14177000, 0, 0, 2.95000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[3] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[3], 1 );
    }
    g_U3941[4] = sub_35959( -1993976541, 10.14508000, 8.20610000, 0.14177000, 0, 0, 90.68000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[4] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[4], 1 );
    }
    g_U3941[5] = sub_35959( -2096019114, 3.94087000, 16.99167000, 0.14177000, 0, 0, -1.16000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[5] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[5], 1 );
    }
    return;
}

void sub_35834(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_35867( (uParam0^)[I] );
    }
    return;
}

void sub_35867(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

void sub_35959(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
        sub_27405( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

void sub_36634()
{
    sub_10738( "[SP]### P_CREATE_STADIUM_OBJECTS ###" );
    if (DOES_OBJECT_EXIST( g_U3704 ))
    {
        sub_35867( g_U3704 );
    }
    g_U3704 = sub_35959( g_U2390, -10.46000000, 5.99000000, 0.70000000, 0.00000000, 0.00000000, 18.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U3704 ))
    {
        FREEZE_OBJECT_POSITION( g_U3704, 1 );
    }
    return;
}

int sub_36978()
{
    sub_607( "AT", "F_0302A_PRESETUP", 0 );
    sub_37018();
    AUDIO_MUSIC_REQUEST_ONESHOT( "STADIUM_ONESHOT_7", 0 );
    return 1;
}

void sub_37018()
{
    sub_607( "GA", "P_CREATE_STORES_SNIPER start", 0 );
    sub_8120( "Creating stores sniper" );
    sub_37192( ref l_U1322, 41.08343000, 61.76176000, 11.64524000, 76.52078000, 49.85817000, 11.80000000, 76.52078000, 49.65817000, 11.60000000, 86.96375000, 22.01132000, 9.60026400, g_U2383, 40.49274000, 61.63966000, 11.64522000, 214.59710000, 4000 );
    sub_31031( ref l_U1322._fU0, "M3_CP_S1B_Avg" );
    SET_ROOM_FOR_PED_BY_NAME( l_U1322._fU0, "Room_Pressbooth" );
    l_U1322._fU164 = 0;
    l_U1322._fU204 = 1;
    l_U1322._fU216 = 1;
    SET_PED_PERFECT_ACCURACY_OVERRIDE( l_U1322._fU0, 0 );
    sub_38393( ref l_U1322 );
    sub_607( "GA", "P_CREATE_STORES_SNIPER end", 0 );
    return;
}

void sub_37192(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18)
{
    iParam0->_fU56 = {uParam1};
    iParam0->_fU72 = {uParam4};
    iParam0->_fU84 = {uParam7};
    iParam0->_fU96 = {uParam10};
    iParam0->_fU68 = uParam17;
    iParam0->_fU160 = uParam13;
    iParam0->_fU108 = {uParam14};
    iParam0->_fU164 = 0;
    iParam0->_fU168 = 0;
    iParam0->_fU172 = 0;
    iParam0->_fU176 = 0;
    iParam0->_fU180 = 0;
    iParam0->_fU184 = 0;
    iParam0->_fU192 = uParam18;
    iParam0->_fU156 = 1500;
    iParam0->_fU196 = 3;
    iParam0->_fU200 = 0;
    iParam0->_fU204 = 0;
    iParam0->_fU208 = -256437761;
    iParam0->_fU212 = 0;
    iParam0->_fU216 = 0;
    sub_27113( iParam0 + 4, iParam0->_fU56, iParam0->_fU68, iParam0->_fU160, 7, 3, 2, 0, 0 );
    iParam0->_fU0 = sub_27215( iParam0 + 0, iParam0 + 4, 1, 1, 0 );
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( iParam0->_fU0, 1 );
        SET_PED_INVINCIBLE( iParam0->_fU0, 1 );
        SET_PED_GORE( iParam0->_fU0, 0 );
        FREEZE_PED_POSITION( iParam0->_fU0, 1 );
        sub_37547( iParam0->_fU0, iParam0->_fU56, iParam0->_fU68 );
        SET_PED_ALERTNESS( iParam0->_fU0, 3 );
        SET_PED_ACCURACY( iParam0->_fU0, 31186664 );
        SET_PED_CAN_BE_TARGETTED( iParam0->_fU0, 0 );
        SET_PED_AI_TEMPLATE( iParam0->_fU0, "AIT_EXPERT" );
        SET_PED_PERFECT_ACCURACY_OVERRIDE( iParam0->_fU0, 1 );
        SET_PED_CONSUMING_AMMO( iParam0->_fU0, 0 );
    }
    iParam0->_fU188 = sub_28272( iParam0->_fU0, -2075384407, 25000, 0, 0 );
    ENABLE_WEAPON_ATTACHMENT( iParam0->_fU188, 13, 1 );
    TOGGLE_WEAPON_ATTACHMENT( iParam0->_fU188, 13, 1 );
    SET_LASER_SIGHT_ATTACHMENT( iParam0->_fU188, -12373631 );
    sub_37873( "S_STAD_SNIPBEH", "LEVEL_S_STAD_PU", "/LEVEL/S_STAD/s_stad_snipbeh.act", "/Global/SNIPER_BEHAVIOR", 1 );
    sub_21520( "LEVEL_S_STAD_PU", 0, 1 );
    I_SEQUENCE_REGISTER_ENTITY( "S_STAD_SNIPBEH", "stad_sniper", iParam0->_fU0, 0 );
    I_SEQUENCE_START( "S_STAD_SNIPBEH" );
    while (NOT (I_SEQUENCE_QUERY_ENTITY_STATE( "S_STAD_SNIPBEH", "stad_sniper", 3 )))
    {
        WAIT( 0 );
    }
    sub_37547( iParam0->_fU0, iParam0->_fU56, iParam0->_fU68 );
    PED_ACTION_TREE_PLAY_NODE( iParam0->_fU0, "/Global/SNIPER_BEHAVIOR/SNIPER3SET_SEQ/STATES/DUCK_TO_PEEK" );
    sub_38216( iParam0 + 0 );
    return;
}

void sub_37547(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

void sub_37873(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    if ((I_SEQUENCE_IS_LOADED( uParam0 )) == 0)
    {
        I_SEQUENCE_SETUP( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            while ((I_SEQUENCE_QUERY_STATE( uParam0, 1 )) == 1)
            {
                WAIT( 0 );
            }
        }
    }
    return;
}

void sub_38216(unknown uParam0)
{
    sub_38233( uParam0, sub_3153() );
    return;
}

void sub_38233(unknown uParam0, unknown uParam1)
{
    sub_33663( uParam0, uParam1 );
    sub_33735( uParam0, uParam1 );
    return;
}

void sub_38393(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        switch (iParam0->_fU164)
        {
            case 0:
            if (NOT ((sub_38491( iParam0->_fU0, 37 )) == 1))
            {
                iParam0->_fU168 = 0;
                iParam0->_fU176 = 0;
                iParam0->_fU180 = 0;
                iParam0->_fU172 = 0;
                TASK_AIM_GUN_AT_COORD( iParam0->_fU0, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU0 ), -1, 1 );
            }
            break;
            case 1:
            if ((NOT iParam0->_fU216) AND (sub_38625( iParam0 )))
            {
                sub_38736( iParam0 );
            }
            else if (NOT iParam0->_fU168)
            {
                sub_38949( iParam0 );
            }
            break;
            case 4:
            if (sub_4277( iParam0 + 120 ))
            {
                sub_607( "MSWW", "SniperBehaviour: Duck timer done", "###" );
                if (sub_38625( iParam0 ))
                {
                    sub_38736( iParam0 );
                }
                else if (iParam0->_fU212)
                {
                    sub_39315( iParam0 );
                }
                else
                {
                    sub_38949( iParam0 );
                }
            }
            break;
            case 2:
            if ((NOT iParam0->_fU216) AND (sub_38625( iParam0 )))
            {
                sub_38736( iParam0 );
            }
            else if (NOT iParam0->_fU176)
            {
                sub_39315( iParam0 );
            }
            break;
            case 3:
            if ((NOT iParam0->_fU216) AND (sub_38625( iParam0 )))
            {
                sub_38736( iParam0 );
            }
            else if (NOT iParam0->_fU180)
            {
                sub_39682( iParam0 );
            }
            else if ((sub_40060( iParam0->_fU0 )) == 3)
            {
                sub_39682( iParam0 );
            };;;
            break;
            case 5:
            if (NOT iParam0->_fU184)
            {
                PED_ACTION_TREE_PLAY_NODE( iParam0->_fU0, "/Global/SNIPER_BEHAVIOR/SNIPER3SET_SEQ/STATES/DUCK" );
                iParam0->_fU168 = 0;
                iParam0->_fU176 = 0;
                iParam0->_fU180 = 0;
                iParam0->_fU172 = 0;
                iParam0->_fU184 = 1;
            }
            break;
        }
    }
    return;
}

int sub_38491(unknown uParam0, unknown uParam1)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        return GET_SCRIPT_TASK_STATUS( uParam0, uParam1 );
    }
    return 0;
}

int sub_38625(int iParam0)
{
    if ((NOT (IS_PED_DEAD( sub_3153() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if (IS_PED_IN_CROSSHAIR_CYLINDER( iParam0->_fU0, iParam0->_fU196, 1000, iParam0->_fU200, -1082130432 ))
        {
            return 1;
        }
    }
    return 0;
}

void sub_38736(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        if ((NOT iParam0->_fU184) AND (NOT iParam0->_fU172))
        {
            sub_8120( "Sniper ducks" );
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 47, 1000, g_U649 );
        }
        iParam0->_fU168 = 0;
        iParam0->_fU176 = 0;
        iParam0->_fU180 = 0;
        iParam0->_fU172 = 1;
        iParam0->_fU184 = 0;
        sub_4021( iParam0 + 120, iParam0->_fU156, 1, 0 );
        sub_4157( iParam0 + 120 );
        iParam0->_fU164 = 4;
    }
    return;
}

void sub_38949(int iParam0)
{
    unknown uVar3;

    if ((NOT (IS_PED_DEAD( sub_3153() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if ((iParam0->_fU184) || (iParam0->_fU172))
        {
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 48, 1000, g_U649 );
        }
        sub_38216( iParam0 + 0 );
        iParam0->_fU168 = 1;
        iParam0->_fU176 = 0;
        iParam0->_fU180 = 0;
        iParam0->_fU172 = 0;
        iParam0->_fU184 = 0;
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_AIM_GUN_AT_PED( 0, sub_3153(), iParam0->_fU192, 0 );
        TASK_SHOOT_AT_PED( 0, sub_3153(), -1, iParam0->_fU208, 0, 0, iParam0->_fU204 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
        iParam0->_fU164 = 1;
    }
    return;
}

void sub_39315(int iParam0)
{
    unknown uVar3;

    if ((NOT (IS_PED_DEAD( sub_3153() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if ((iParam0->_fU184) || (iParam0->_fU172))
        {
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 48, 1000, g_U649 );
        }
        iParam0->_fU168 = 0;
        iParam0->_fU176 = 1;
        iParam0->_fU180 = 0;
        iParam0->_fU172 = 0;
        iParam0->_fU184 = 0;
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_AIM_GUN_AT_COORD( 0, iParam0->_fU72, 2000, 0 );
        TASK_AIM_GUN_AT_COORD( 0, iParam0->_fU84, 2000, 0 );
        SET_SEQUENCE_TO_REPEAT( uVar3, 1 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
        iParam0->_fU164 = 2;
    }
    return;
}

void sub_39682(int iParam0)
{
    float fVar3;
    float fVar4;
    float fVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;

    if ((NOT (IS_PED_DEAD( sub_3153() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if ((iParam0->_fU184) || (iParam0->_fU172))
        {
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 48, 1000, g_U649 );
        }
        iParam0->_fU168 = 0;
        iParam0->_fU176 = 0;
        iParam0->_fU180 = 1;
        iParam0->_fU172 = 0;
        iParam0->_fU184 = 0;
        fVar3 = (GET_RANDOM_FLOAT_IN_RANGE( -0.50000000, 0.50000000 )) + (ref iParam0->_fU96->_fU0);
        fVar4 = (GET_RANDOM_FLOAT_IN_RANGE( -0.50000000, 0.50000000 )) + (ref iParam0->_fU96->_fU4);
        fVar5 = (GET_RANDOM_FLOAT_IN_RANGE( -0.50000000, 0.50000000 )) + (ref iParam0->_fU96->_fU8);
        uVar6 = {fVar3, fVar4, ref iParam0->_fU96->_fU8};
        OPEN_SEQUENCE_TASK( ref uVar9 );
        TASK_AIM_GUN_AT_COORD( 0, uVar6, 3000, 1 );
        TASK_SHOOT_AT_COORD( 0, uVar6, 1000, 1566631136, 0, 0 );
        TASK_AIM_GUN_AT_COORD( 0, uVar6, 1000, 0 );
        TASK_AIM_GUN_AT_COORD( 0, uVar6, -1, 0 );
        CLOSE_SEQUENCE_TASK( uVar9 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar9 );
        CLEAR_SEQUENCE_TASK( uVar9 );
        iParam0->_fU164 = 3;
    }
    return;
}

int sub_40060(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        return GET_SEQUENCE_PROGRESS( uParam0 );
    }
    return -1;
}

void sub_40356()
{
    sub_607( "AT", "P_0302A_REGISTRATION", 0 );
    REGISTER_HIDE_ENTITY_AT_POSITION( g_U3171._fU0, g_U3171._fU4 );
    REGISTER_HIDE_ENTITY_AT_POSITION( g_U3164._fU0, g_U3164._fU4 );
    REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( l_U1322._fU188, "W_SR_M82_Aa_H", 0 );
    if (((IS_PED_DEAD( g_U4007 )) == 0) AND ((DOES_PED_EXIST( g_U4007 )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4007, "Pass_heli_pilo", 0 );
        if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( g_U4007, 0, 0 ) )) == 0)
        {
            sub_8120( "PASSOS GUN NOT EXIST!" );
        }
        CUTSCENE_REGISTER_ISEQ( -334595829 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4007, l_U172, l_U175 );
        ISEQ_REGISTER_ENTITY( -334595829, "MID03B_PASSOS_COVER", g_U4007, 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4007, 0, 0 ), "W_PI_PT92_Aa_H", 0 );
    }
    if (((IS_PED_DEAD( g_U4008[0]._fU0 )) == 0) AND ((DOES_PED_EXIST( g_U4008[0]._fU0 )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4008[0]._fU0, "M_Crac_Sold_SR", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4008[0]._fU0, 0, 0 ), "W_PI_PT92_Aa_H^2", 0 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U4008[0]._fU0, "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_LOCO" );
    }
    if (((IS_PED_DEAD( g_U4008[1]._fU0 )) == 0) AND ((DOES_PED_EXIST( g_U4008[1]._fU0 )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4008[1]._fU0, "M_Crac_Sold_SR^1", 0 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U4008[1]._fU0, "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_LOCO" );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4008[1]._fU0, 0, 0 ), "W_SB_MP5_Aa_H^1", 0 );
    }
    if (((IS_PED_DEAD( g_U4008[2]._fU0 )) == 0) AND ((DOES_PED_EXIST( g_U4008[2]._fU0 )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4008[2]._fU0, "M_Crac_Sold_SR^2", 0 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U4008[2]._fU0, "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_LOCO" );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4008[2]._fU0, 0, 0 ), "W_SB_MP5_Aa_H^2", 0 );
    }
    if (((IS_PED_DEAD( g_U4187[0] )) == 0) AND ((DOES_PED_EXIST( g_U4187[0] )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4187[0], "G_CS_Bag_Avg", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4187[0], 0, 0 ), "W_PI_PT92_Aa_H^1", 0 );
    }
    if (((IS_PED_DEAD( g_U4187[1] )) == 0) AND ((DOES_PED_EXIST( g_U4187[1] )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4187[1], "G_CS_K_Sold_SR", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4187[1], 0, 0 ), "W_SG_BenM3_Aa_H", 1 );
        ISEQ_REGISTER_ENTITY( 1154908660, "Sniped", g_U4187[1], 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4187[1], l_U1314, l_U1317 );
    }
    if (((IS_PED_DEAD( g_U4187[2] )) == 0) AND ((DOES_PED_EXIST( g_U4187[2] )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4187[2], "G_CS_K_Sold_SR^1", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4187[2], 0, 0 ), "W_SB_MP5_Aa_H", 1 );
        ISEQ_REGISTER_ENTITY( 1154908660, "Executed", g_U4187[2], 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4187[2], l_U1318, l_U1321 );
    }
    CUTSCENE_REGISTER_ISEQ( 1154908660 );
    if (((IS_PED_DEAD( sub_3153() )) == 0) AND ((DOES_PED_EXIST( sub_3153() )) == 1))
    {
        CUTSCENE_REGISTER_ISEQ( -767085492 );
        CUTSCENE_REGISTER_PED_TELEPORT( sub_3153(), l_U1377, l_U1380 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( sub_3153(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_IDLE" );
        ISEQ_REGISTER_ENTITY( -767085492, "Max", sub_3153(), 0 );
        CUTSCENE_REGISTER_SET_PLAYER_IN_COVER( "stores_simple", "GrabSpline12", 0, 1 );
    }
    return;
}

void sub_41989()
{
    if (l_U132._fU52)
    {
        AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1", 0, 0, -1, -1, -1082130432, 0 );
        FREEZE_TIME_OF_DAY( 21, 0 );
        SET_WEATHER_TYPE_NOW_PERSIST( "SUNNY" );
        sub_42092( ref l_U1381, ref l_U1382, 1, 0 );
    }
    if (NOT l_U1386)
    {
        if (GET_CUTSCENE_TIME() >= 28)
        {
            l_U1386 = 1;
            AUDIO_MUSIC_PLAY_ONESHOT();
        }
    }
    if (NOT l_U1383)
    {
        if (GET_CUTSCENE_TIME() > 42)
        {
            l_U1383 = 1;
            AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_6", "", 0, 6000, -1, -1082130432, 0 );
        }
    }
    if (NOT l_U1384)
    {
        if (GET_CUTSCENE_TIME() > 78)
        {
            l_U1384 = 1;
            AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_5_6", "", 0, 5000, -1, -1082130432, 0 );
        }
    }
    return;
}

void sub_42092(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

    uVar6 = GET_WEAPON_FROM_HAND( sub_3153(), 0, 0 );
    if (GET_DOES_WEAPON_EXIST( uVar6 ))
    {
        if (sub_42132())
        {
            (uParam0^) = 1;
            SELECT_WEAPON_TO_HAND( sub_3153(), 0, 0, uParam2 );
            uVar6 = GET_WEAPON_FROM_HAND( sub_3153(), 0, 0 );
            if (bParam3)
            {
                sub_607( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: Waiting for player to holster RIFLE in right hand...", "###" );
                while (GET_DOES_WEAPON_EXIST( uVar6 ))
                {
                    WAIT( 0 );
                    uVar6 = GET_WEAPON_FROM_HAND( sub_3153(), 0, 0 );
                }
            }
            sub_607( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: ...right hand RIFLE holstered!", "###" );
        }
    }
    uVar6 = GET_WEAPON_FROM_HAND( sub_3153(), 1, 0 );
    if (GET_DOES_WEAPON_EXIST( uVar6 ))
    {
        (uParam1^) = 1;
        SELECT_WEAPON_TO_HAND( sub_3153(), 0, 1, uParam2 );
        uVar6 = GET_WEAPON_FROM_HAND( sub_3153(), 1, 0 );
        if (bParam3)
        {
            sub_607( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: Waiting for player to holster gun in LEFT hand...", "###" );
            while (GET_DOES_WEAPON_EXIST( uVar6 ))
            {
                WAIT( 0 );
                uVar6 = GET_WEAPON_FROM_HAND( sub_3153(), 1, 0 );
            }
        }
        sub_607( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: ...LEFT hand gun holstered!", "###" );
    }
    uVar6 = GET_WEAPON_FROM_HAND( sub_3153(), 0, 0 );
    if (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
    {
        uVar6 = GET_WEAPON_FROM_HOLSTER( sub_3153(), 0 );
        if (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
        {
            uVar6 = GET_WEAPON_FROM_HOLSTER( sub_3153(), 1 );
        }
        SELECT_WEAPON_TO_HAND( sub_3153(), uVar6, 0, uParam2 );
        uVar6 = GET_WEAPON_FROM_HAND( sub_3153(), 0, 0 );
        if (bParam3)
        {
            sub_607( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: Waiting for player to draw gun from HOLSTER...", "###" );
            while (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
            {
                WAIT( 0 );
                uVar6 = GET_WEAPON_FROM_HAND( sub_3153(), 0, 0 );
            }
        }
        sub_607( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: ...gun drawn from HOLSTER!", "###" );
    }
    return;
}

int sub_42132()
{
    int[18] iVar2;
    unknown uVar21;
    int I;

    array(ref iVar2, 18);
    iVar2[0] = -1013714740;
    iVar2[1] = -1074756423;
    iVar2[2] = 1308526797;
    iVar2[3] = 840671040;
    iVar2[4] = 57534114;
    iVar2[5] = 724901397;
    iVar2[6] = 1992962408;
    iVar2[7] = 319712764;
    iVar2[8] = 427207702;
    iVar2[9] = -110877124;
    iVar2[10] = 1224272620;
    iVar2[11] = 10648147;
    iVar2[12] = -2075384407;
    iVar2[13] = 1478009203;
    iVar2[14] = 434544317;
    iVar2[15] = -168327769;
    iVar2[16] = -184942895;
    iVar2[17] = 514118749;
    uVar21 = GET_WEAPON_FROM_HAND( sub_3153(), 0, 0 );
    if (GET_DOES_WEAPON_EXIST( uVar21 ))
    {
        for ( I = 0; I < iVar2; I++ )
        {
            if ((GET_WEAPON_TYPE( uVar21 )) == iVar2[I])
            {
                return 1;
            }
        }
    }
    return 0;
}

int sub_43581()
{
    sub_607( "AT", "F_0302A_POST", 0 );
    return 1;
}

void sub_43626()
{
    sub_607( "AT", "P_0302A_PREPARE_BLENDOUT", 0 );
    SET_PLAYER_GLOBAL_COMBAT_TIMER_STATE( 1 );
    CAMERA_PLAY_ANIMATED( "LEVEL_S_STAD_CP_03", "B_OUT_MID_03B_STADIUM_CAM", 1, 92.70000000, -16.75100000, 11.12000000, 180.00000000, 0, 0 );
    sub_43762();
    sub_7384( g_U4187[0] );
    sub_44756( g_U2378, ref g_U1069 );
    sub_44977( ref g_U3164, 1 );
    sub_44977( ref g_U3171, 1 );
    if (NOT (ISEQ_QUERY_STATE( -767085492, 3 )))
    {
        sub_31919( sub_3153(), l_U1377, l_U1380 );
        ISEQ_REGISTER_ENTITY( -767085492, "Max", sub_3153(), 0 );
        ISEQ_START( -767085492 );
        SNAP_PLAYER_TO_COVERLINE( sub_3175(), "stores_simple", "GrabSpline12", 1, 92.59013000, -9.58677800, 9.60321800 );
    }
    if (NOT (ISEQ_QUERY_STATE( -334595829, 3 )))
    {
        sub_31919( g_U4007, l_U172, l_U175 );
        ISEQ_REGISTER_ENTITY( -334595829, "MID03B_PASSOS_COVER", g_U4007, 0 );
        ISEQ_START( -334595829 );
    }
    sub_45426( ref g_U4187[1] );
    sub_45426( ref g_U4187[2] );
    if (NOT (ISEQ_QUERY_STATE( 1154908660, 3 )))
    {
        sub_31919( g_U4187[1], l_U1314, l_U1317 );
        sub_31919( g_U4187[2], l_U1318, l_U1321 );
        sub_32164( g_U4187[1], 1154908660, "Sniped" );
        sub_32164( g_U4187[2], 1154908660, "Executed" );
        ISEQ_START( 1154908660 );
    }
    SET_PLAYER_CAN_USE_SHOOTDODGE( sub_3175(), 1 );
    sub_7654( ref l_U1322 );
    sub_6069( -1414847258, ref g_U1263 );
    sub_46363();
    sub_7310( g_U4191 );
    g_U4191 = sub_34906( 280965399, 94.19000000, 1.86000000, 9.68000000, -1.57100000, 0, -1.57100000, 1, 0, 0, 1119092736 );
    return;
}

void sub_43762()
{
    sub_607( "MF", "P_STORES_COMBAT_SETUP - START", 0 );
    sub_43815();
    sub_44128();
    sub_4157( ref l_U629 );
    sub_4157( ref l_U638 );
    sub_607( "MF", "P_STORES_COMBAT_SETUP - END", 0 );
    return;
}

void sub_43815()
{
    sub_8120( "P_START_STORES_CP" );
    PED_RESET_IK( g_U4008[0]._fU0 );
    sub_43918( ref g_U4008[0], "GenCover", "83253945_4285F2ED_Popover1" );
    sub_43918( ref g_U4008[1], "GenCover", "83253945_7E669829_Corner2" );
    sub_43918( ref g_U4008[2], "stores_simple", "storesCorner12" );
    return;
}

void sub_43918(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;

    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        OPEN_SEQUENCE_TASK( ref uVar5 );
        TASK_COMBAT_SNAP_TO_COVER( 0, uParam1, uParam2, 0 );
        CLOSE_SEQUENCE_TASK( uVar5 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar5 );
        CLEAR_SEQUENCE_TASK( uVar5 );
        SET_PED_FLAG_LOCK_TO_COVER( iParam0->_fU0, 1 );
    }
    return;
}

void sub_44128()
{
    int I;

    sub_607( "GA", "P_STORES_CP_ENGAGE_FROM_COVER start", 0 );
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( l_U461._fU0, 1.00000000 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( l_U461._fU0, 1.00000000 );
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( l_U467._fU0, 1.00000000 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( l_U467._fU0, 1.00000000 );
    if ((NOT (IS_PED_DEAD( sub_3153() ))) AND (NOT (IS_PED_DEAD( g_U4008[0]._fU0 ))))
    {
        SET_PED_COVER_TARGET_PED( g_U4008[0]._fU0, sub_3153() );
        SET_PED_FORCE_START_FIRING_FROM_COVER( g_U4008[0]._fU0 );
    }
    if ((NOT (IS_PED_DEAD( sub_3153() ))) AND (NOT (IS_PED_DEAD( g_U4008[1]._fU0 ))))
    {
        SET_PED_COVER_TARGET_PED( g_U4008[1]._fU0, sub_3153() );
    }
    if ((NOT (IS_PED_DEAD( sub_3153() ))) AND (NOT (IS_PED_DEAD( g_U4008[2]._fU0 ))))
    {
        SET_PED_COVER_TARGET_PED( g_U4008[2]._fU0, sub_3153() );
    }
    for ( I = 0; I < g_U4008; I++ )
    {
        SET_PED_COMBAT_ATTRIBUTES( g_U4008[I]._fU0, 1, 1 );
    }
    if (NOT (IS_PED_DEAD( g_U4008[1]._fU0 )))
    {
        SET_PED_FLAG_BLOCK_WOUNDED_MOVEMENT( g_U4008[1]._fU0, 1 );
    }
    if (NOT (IS_PED_DEAD( g_U4008[2]._fU0 )))
    {
        SET_PED_FLAG_BLOCK_WOUNDED_MOVEMENT( g_U4008[2]._fU0, 1 );
    }
    sub_607( "GA", "P_STORES_CP_ENGAGE_FROM_COVER start", 0 );
    return;
}

void sub_44756(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_6181( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

void sub_44977(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if ((sub_44989( iParam0 )) == 0)
    {
        sub_45055( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

int sub_44989(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_45055(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

void sub_45426(unknown uParam0)
{
    sub_8120( "MAL_RemoveAllGunsFromPed started" );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        sub_8120( "MAL_RemoveAllGunsFromPed WEAPONHAND_LEFT" );
        sub_45552( GET_WEAPON_FROM_HAND( (uParam0^), 1, 0 ) );
        if ((GET_WEAPON_FROM_HAND( (uParam0^), 1, 0 )) != 0)
        {
            REMOVE_PED_WEAPON( (uParam0^), GET_WEAPON_FROM_HAND( (uParam0^), 1, 0 ) );
        }
        sub_45552( GET_WEAPON_FROM_HAND( (uParam0^), 1, 0 ) );
        sub_8120( "MAL_RemoveAllGunsFromPed WEAPONHAND_RIGHT" );
        sub_45552( GET_WEAPON_FROM_HAND( (uParam0^), 0, 0 ) );
        if ((GET_WEAPON_FROM_HAND( (uParam0^), 0, 0 )) != 0)
        {
            REMOVE_PED_WEAPON( (uParam0^), GET_WEAPON_FROM_HAND( (uParam0^), 0, 0 ) );
        }
        sub_45552( GET_WEAPON_FROM_HAND( (uParam0^), 0, 0 ) );
        sub_8120( "MAL_RemoveAllGunsFromPed WEAPONHOLSTER_PISTOL_LEFT" );
        sub_45552( GET_WEAPON_FROM_HOLSTER( (uParam0^), 1 ) );
        if ((GET_WEAPON_FROM_HOLSTER( (uParam0^), 1 )) != 0)
        {
            REMOVE_PED_WEAPON( (uParam0^), GET_WEAPON_FROM_HOLSTER( (uParam0^), 1 ) );
        }
        sub_45552( GET_WEAPON_FROM_HOLSTER( (uParam0^), 1 ) );
        sub_8120( "MAL_RemoveAllGunsFromPed WEAPONHOLSTER_PISTOL_RIGHT" );
        sub_45552( GET_WEAPON_FROM_HOLSTER( (uParam0^), 0 ) );
        if ((GET_WEAPON_FROM_HOLSTER( (uParam0^), 0 )) != 0)
        {
            REMOVE_PED_WEAPON( (uParam0^), GET_WEAPON_FROM_HOLSTER( (uParam0^), 0 ) );
        }
        sub_45552( GET_WEAPON_FROM_HOLSTER( (uParam0^), 0 ) );
        sub_8120( "MAL_RemoveAllGunsFromPed WEAPONHOLSTER_RIFLE" );
        sub_45552( GET_WEAPON_FROM_HOLSTER( (uParam0^), 2 ) );
        if ((GET_WEAPON_FROM_HOLSTER( (uParam0^), 2 )) != 0)
        {
            REMOVE_PED_WEAPON( (uParam0^), GET_WEAPON_FROM_HOLSTER( (uParam0^), 2 ) );
        }
        sub_45552( GET_WEAPON_FROM_HOLSTER( (uParam0^), 2 ) );
    }
    sub_8120( "MAL_RemoveAllGunsFromPed ended" );
    return;
}

void sub_45552(unknown uParam0)
{
    return;
}

void sub_46363()
{
    unknown uVar2;

    sub_34445( ref g_U4141, 1, 0, -1 );
    if (NOT (IS_PED_DEAD( g_U4141[0]._fU0 )))
    {
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 89.26026000, 4.33582700, 9.60269500, sub_3153(), 3, 0, 1056964608, 0, 1, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 86.75937000, 3.69999900, 8.66029500, sub_3153(), 3, 0, 1056964608, 0, 1, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 87.37415000, -8.04071500, 8.66029500, sub_3153(), 3, 0, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_MOVE_TO_COVER( 0, "GenCover", "83253945_5583FFD2_Popover1", 0 );
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( g_U4141[0]._fU0, uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U4141[0]._fU0, 1 );
    }
    return;
}

int sub_46737()
{
    if (l_U132._fU52)
    {
        if (NOT (IS_PED_DEAD( g_U4187[1] )))
        {
            SET_PED_INVINCIBLE( g_U4187[1], 0 );
            SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U4187[1], 0 );
            FREEZE_PED_POSITION( g_U4187[1], 0 );
            SET_PED_CORPSE( g_U4187[1], 0 );
        }
        if (NOT (IS_PED_DEAD( g_U4187[2] )))
        {
            SET_PED_INVINCIBLE( g_U4187[2], 0 );
            SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U4187[2], 0 );
            FREEZE_PED_POSITION( g_U4187[2], 0 );
            SET_PED_CORPSE( g_U4187[2], 0 );
        }
        if (NOT sub_46931())
        {
            DO_SCREEN_FADE_IN( 0 );
        }
    }
    if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_STAD_CP_03", "B_OUT_MID_03B_STADIUM_CAM" )) - 100))
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( 65446, 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( -7.01622200, 1065353216, 0 );
        CAMERA_FREEZE_FRAME( 1, 500, 0, 0 );
        return 1;
    }
    return 0;
}

int sub_46931()
{
    if (l_U75)
    {
        sub_607( "CO", "F_IMAGEFX_FADE_IN: IMAGEFX START", 0 );
        START_PANEL_WIPE( 0, 6 );
        PLAY_IMAGEFX( "BULLETCAM_IMPACT", 3, 1 );
        PLAY_IMAGEFX( "BLACK_FADE_UP_FAST_01", 3, 1 );
        DO_SCREEN_FADE_IN( 0 );
        l_U75 = 0;
        return 1;
        break;
    }
    sub_607( "CO", "F_IMAGEFX_FADE_IN: NORMAL START", 0 );
    return 0;
}

void sub_47299(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    sub_607( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return sub_47424( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 47384, 47402, uParam8 );
}

void sub_47384()
{
    return;
}

int sub_47402()
{
    return 1;
}

void sub_47424(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

void sub_47793(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
            sub_607( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
            sub_607( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                sub_607( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
            sub_607( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
            sub_607( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
            sub_607( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
            sub_24253( iParam0->_fU0, 0 );
            sub_607( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
            sub_48660( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
        sub_48660( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
        sub_607( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                sub_49188( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
        sub_48660( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
            sub_49537( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
        sub_49537( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

void sub_48660(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD( sub_3153() )))
        {
            SET_PLAYER_CONTROL( sub_3175(), 0, uParam2 );
            SET_PED_DUCKING( sub_3153(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY( sub_3153() );
            }
            SET_PED_INVINCIBLE( sub_3153(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

void sub_49188(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD( sub_3153() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND( sub_3153(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND( sub_3153(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_3153(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_3153(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_3153(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

void sub_49537(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD( sub_3153() )))
    {
        SET_PLAYER_CONTROL( sub_3175(), 1, 0 );
        SET_PED_INVINCIBLE( sub_3153(), 0 );
        if (bParam0)
        {
            sub_49618();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

void sub_49618()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD( sub_3153() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND( sub_3153(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND( sub_3153(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_3153(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_3153(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

void sub_49968(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

    sub_607( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
        sub_607( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
        sub_11721( iParam1 );
        sub_50227( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
            sub_50678( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
            sub_50678( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_50910( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
            sub_50678( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_50910( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_50910( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
            sub_50678( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_50910( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_50910( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_50910( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
            sub_50678( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_50910( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_50910( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_50910( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if (sub_50910( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
            sub_52468( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
    sub_607( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

void sub_50227(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 = sub_9085( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
        sub_607( "TEH", "Ending context", 0 );
        sub_607( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

void sub_50678(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

void sub_50910(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

void sub_52468(int iParam0)
{
    sub_10738( "CHECKPOINT DATA" );
    sub_52507( iParam0->_fU4 );
    sub_28508( iParam0->_fU16 );
    sub_28508( iParam0->_fU20 );
    sub_28508( iParam0->_fU24 );
    sub_45552( iParam0->_fU28 );
    sub_45552( iParam0->_fU56 );
    sub_45552( iParam0->_fU60 );
    sub_45552( iParam0->_fU64 );
    sub_45552( iParam0->_fU68 );
    sub_45552( iParam0->_fU72 );
    sub_45552( iParam0->_fU76 );
    sub_45552( iParam0->_fU80 );
    sub_45552( iParam0->_fU84 );
    sub_45552( iParam0->_fU88 );
    sub_45552( iParam0->_fU92 );
    sub_28508( iParam0->_fU32 );
    sub_45552( iParam0->_fU36 );
    sub_45552( iParam0->_fU40 );
    sub_45552( iParam0->_fU44 );
    sub_28508( iParam0->_fU136 );
    sub_52752( iParam0->_fU140 );
    sub_45552( iParam0->_fU52 );
    sub_10738( "---nRightHolsterAttachmentEnabled: " );
    sub_45552( iParam0->_fU96 );
    sub_10738( "---nRightHolsterAttachmentToggled: " );
    sub_45552( iParam0->_fU100 );
    sub_10738( "---nLeftHolsterAttachmentEnabled: " );
    sub_45552( iParam0->_fU104 );
    sub_10738( "---nLeftHolsterAttachmentToggled: " );
    sub_45552( iParam0->_fU108 );
    sub_10738( "---nRifleHolsterAttachmentEnabled: " );
    sub_45552( iParam0->_fU112 );
    sub_10738( "---nRifleHolsterAttachmentToggled: " );
    sub_45552( iParam0->_fU116 );
    sub_10738( "---nRightHandAttachmentEnabled: " );
    sub_45552( iParam0->_fU120 );
    sub_10738( "---nRightHandAttachmentToggled: " );
    sub_45552( iParam0->_fU124 );
    sub_10738( "---nLeftHandAttachmentEnabled: " );
    sub_45552( iParam0->_fU128 );
    sub_10738( "---nLeftHandAttachmentToggled: " );
    sub_45552( iParam0->_fU132 );
    sub_45552( l_U1 );
    sub_45552( 144 );
    return;
}

void sub_52507(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return;
}

void sub_52752(boolean bParam0)
{
    if (bParam0)
    {
        ;
    }
    return;
}

void sub_53624(boolean bParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;
    unknown uVar45;
    unknown uVar46;
    unknown uVar47;
    unknown uVar48;
    unknown uVar49;
    unknown uVar50;
    unknown uVar51;
    unknown uVar52;
    unknown uVar53;
    unknown uVar54;
    unknown uVar55;
    unknown uVar56;

    if (bParam0)
    {
        sub_607( "[SA]", "Entering progression state STATE_RESTAURANT_FIGHT.", "[STATE]" );
        sub_53716();
        sub_53854( ref l_U473, 500 );
        sub_24253( "03_02a_STADIUM_PT8", 0 );
        sub_53854( ref l_U1399, 10000 );
    }
    if (sub_3911( ref l_U1399 ))
    {
        if (sub_53944( 1 ))
        {
            sub_8120( "ResetTimer(tMaxHasNotFired)" );
            sub_4814( ref l_U1399 );
            sub_4157( ref l_U1399 );
        }
        else if (NOT (IS_ANY_SPEECH_PLAYING( g_U4007 )))
        {
            if ((l_U1408 < 3) AND (sub_4277( ref l_U1399 )))
            {
                sub_8120( "IsTimerDone(tMaxHasNotFired)" );
                sub_54244( ref l_U1389 );
                sub_54329( 1, g_U4007, "PASSOS", ref l_U1389, 2, 0 );
                sub_54545( "SSTD_NSIS", ref l_U1389, 7, 1 );
                sub_4814( ref l_U1399 );
                sub_53854( ref l_U1399, 12000 );
                l_U1408++;
            }
        }
    }
    if (NOT (sub_55364( l_U1412 )))
    {
        if ((IS_LAST_MAN_STANDING_ACTIVE()) AND (NOT l_U1411))
        {
            l_U1411 = 1;
        }
        else if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (l_U1411))
        {
            l_U1411 = 0;
            sub_8120( "Chance to react to LMS here" );
            if ((sub_55562( 0, 3 )) == 0)
            {
                sub_54244( ref l_U1412 );
                sub_54329( 1, g_U4007, "PASSOS", ref l_U1412, 2, 0 );
                sub_54545( "SSTD_PMPL", ref l_U1412, 7, 1 );
            }
        }
        else if (sub_55690( ref g_U4007, 54, 1 ))
        {
            sub_8120( "Chance to speak while shooting" );
            if ((sub_55562( 0, l_U1422 )) > 3)
            {
                sub_54244( ref l_U1412 );
                sub_54329( 1, g_U4007, "PASSOS", ref l_U1412, 2, 0 );
                sub_54545( "SSTD_PSAE", ref l_U1412, 7, 1 );
                l_U1422 = 0;
            }
            else
            {
                l_U1422++;
            }
        };;;
    }
    sub_55984( ref g_U4008, 7.00000000, 1, 0 );
    sub_55984( ref g_U4141, 7.00000000, 1, 0 );
    if ((NOT (IS_ANY_SPEECH_PLAYING( g_U4007 ))) AND ((NOT l_U218._fU556) AND (sub_56162( ref l_U218, 0 ))))
    {
        sub_54329( 1, g_U4007, "PASSOS", ref uVar3, 2, 0 );
        sub_54545( "SSTD_LCIS", ref uVar3, 7, 1 );
    }
    if (NOT l_U1388)
    {
        if (NOT (IS_PED_IN_COVER( sub_3153() )))
        {
            l_U1388 = 1;
            sub_56506( ref g_U4141, 0, -1 );
            sub_56506( ref g_U4008, 0, -1 );
            sub_56640( ref g_U4141, 0, 0, -1 );
            sub_56640( ref g_U4008, 0, 0, -1 );
        }
    }
    if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND (((sub_57076( ref g_U4008 )) + (sub_57076( ref g_U4141 ))) > 0)))
    {
        if ((sub_56221( l_U432 )) || (sub_57198( ref l_U218, 5000, 0 )))
        {
            l_U127 = 10;
            sub_607( "GA", "eCheckpointState = CP_NIS_PASSOS_GETS_SHOT", 0 );
        }
    }
    if (((sub_57076( ref g_U4141 )) + (sub_57076( ref g_U4008 ))) == 1)
    {
        uVar13 = {sub_57584( ref g_U4008, 0, 0, 0 )};
        if (NOT (uVar13._fU0 == g_U671._fU0))
        {
            sub_607( "GA", "Assigned bullet camera to Stores CP.", 0 );
            FORCE_CUSTOM_WIPE_BULLET_CAMERA( 1 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
            BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
        }
        else
        {
            uVar13 = {sub_57584( ref g_U4141, 0, 0, 0 )};
            if (NOT (uVar13._fU0 == g_U671._fU0))
            {
                sub_607( "GA", "Assigned bullet camera to Stores CP.", 0 );
                FORCE_CUSTOM_WIPE_BULLET_CAMERA( 1 );
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
                BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
            }
        }
    }
    if (((sub_57076( ref g_U4008 )) + (sub_57076( ref g_U4141 ))) < 1)
    {
        if (NOT l_U1385)
        {
            l_U1385 = 1;
            AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_6", "", 0, 10000, -1, -1082130432, 0 );
        }
    }
    if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND (((sub_57076( ref g_U4008 )) + (sub_57076( ref g_U4141 ))) < 1))
    {
        sub_7094( ref l_U1412, 0 );
        l_U127 = 11;
        sub_607( "GA", "eCheckpointState = CP_HANDLE_NIS_PASSOS_WALKING", 0 );
    }
    return;
}

void sub_53716()
{
    sub_607( "CCB", "P_START_SP_CHALLENGES", 0 );
    sub_607( "CCB", "Starting the Stadium_Stores context...", 0 );
    START_CONTEXT( "Stadium_Stores" );
    return;
}

void sub_53854(unknown uParam0, unknown uParam1)
{
    sub_4021( uParam0, uParam1, 1, 0 );
    sub_4157( uParam0 );
    return;
}

int sub_53944(unknown uParam0)
{
    int iVar3;

    iVar3 = nil;
    if (HAS_SHOT_BEEN_FIRED_IN_AREA( sub_53963( sub_3153() ), 2.00000000, uParam0, ref iVar3 ))
    {
        if (iVar3 == sub_3153())
        {
            sub_8120( "MAL_HasPlayerFired RETURNING TRUE" );
            return 1;
        }
    }
    return 0;
}

vector sub_53963(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return "[dynamic result, ret vals = 3]";
        break;
        GET_PED_COORDS( uParam0 );
        "[doubled result, dropped if not asigned]";
        "[doubled result, dropped if not asigned]";
        break;
    }
    return vector( 0, 0, 0);
}

void sub_54244(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

void sub_54329(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

void sub_54545(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return sub_54569( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

void sub_54569(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return sub_54624( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

int sub_54624(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT (sub_54659( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
    sub_55153( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

int sub_54659(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

void sub_55153(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

int sub_55364(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT (sub_7108( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

void sub_55562(unknown uParam0, int iParam1)
{
    int Result;

    Result = GET_RANDOM_INT_IN_RANGE( uParam0, iParam1 + 1 );
    if (Result > iParam1)
    {
        Result = iParam1;
    }
    return Result;
}

int sub_55690(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if ((sub_55705( (uParam0^), uParam1 )) == 1)
    {
        if (bParam2)
        {
            sub_55771( uParam0, uParam1 );
        }
        return 1;
    }
    return 0;
}

int sub_55705(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return PED_GET_ACTION_INTENTION_STATUS( uParam0, uParam1 );
    }
    return 0;
}

void sub_55771(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        PED_FINISH_ACTION_INTENTION( (uParam0^), uParam1 );
    }
    return;
}

void sub_55984(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_56022( ref (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

void sub_56022(int iParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( iParam0->_fU0, 0, 0 );
            }
            if (bParam3)
            {
                sub_7494( iParam0 );
            }
        }
    }
    return;
}

void sub_56162(int iParam0, unknown uParam1)
{
    int Result;
    int I;
    int J;

    Result = 0;
    if (NOT (IS_PED_DEAD( sub_3153() )))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            if (sub_56221( iParam0->_fU0[I] ))
            {
                Result = 1;
            }
        }
    }
    if ((uParam1) AND (Result))
    {
        for ( J = 0; J < iParam0->_fU508; J++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[J]._fU0, 0 );
        }
    }
    iParam0->_fU548 = 1;
    return Result;
}

void sub_56221(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return sub_56239( sub_3153(), uParam0 );
}

int sub_56239(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

void sub_56506(unknown uParam0, unknown uParam1, int iParam2)
{
    int I;

    if (iParam2 == -1)
    {
        iParam2 = (uParam0^) - 1;
    }
    for ( I = uParam1; I <= iParam2; I++ )
    {
        sub_56554( ref (uParam0^)[I] );
    }
    return;
}

void sub_56554(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_FLAG_LOCK_TO_COVER( iParam0->_fU0, 0 );
    }
    return;
}

void sub_56640(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
        sub_56690( ref (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_56690(int iParam0, unknown uParam1)
{
    sub_56713( iParam0 + 0, iParam0->_fU80, uParam1 );
    return;
}

void sub_56713(unknown uParam0, unknown uParam1, unknown uParam2)
{
    sub_56734( uParam0, sub_3153(), uParam1, uParam2 );
    return;
}

void sub_56734(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

    sub_8120( "MAL_UnblockAndCombatPed" );
    OPEN_SEQUENCE_TASK( ref uVar6 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        sub_8120( "MAL_UnblockAndCombatPed: Victim is not dead" );
        TASK_COMBAT_PED( 0, uParam1 );
    }
    CLOSE_SEQUENCE_TASK( uVar6 );
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        sub_8120( "MAL_UnblockAndCombatPed: Ped is not dead" );
        if (bParam3)
        {
            CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        }
        else
        {
            CLEAR_PED_TASKS( (uParam0^) );
        }
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam2 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar6 );
    }
    CLEAR_SEQUENCE_TASK( uVar6 );
    return;
}

void sub_57076(unknown uParam0)
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I]._fU0 )))
        {
            Result++;
        }
    }
    return Result;
}

void sub_57198(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int I;

    Result = 0;
    if (sub_56162( iParam0, 0 ))
    {
        if (iParam0->_fU560)
        {
            Result = 1;
        }
        else if (iParam0->_fU556)
        {
            if (sub_4277( iParam0 + 512 ))
            {
                sub_4814( iParam0 + 512 );
                iParam0->_fU556 = 0;
                iParam0->_fU560 = 1;
                Result = 1;
            }
        }
        else
        {
            sub_4021( iParam0 + 512, uParam1, 1, 0 );
            sub_4157( iParam0 + 512 );
            iParam0->_fU556 = 1;
            iParam0->_fU560 = 0;
        }
    }
    else if (iParam0->_fU556)
    {
        iParam0->_fU556 = 0;
        sub_4814( iParam0 + 512 );
    }
    if (iParam0->_fU560)
    {
        iParam0->_fU560 = 0;
    }
    if ((uParam2) AND (Result))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[I]._fU0, 0 );
        }
    }
    return Result;
}

void sub_57584(unknown uParam0, boolean bParam1, unknown uParam2, unknown uParam3)
{
    int I;

    if ((sub_57076( uParam0 )) == 1)
    {
        for ( I = 0; I < (uParam0^); I++ )
        {
            if (sub_31381( (uParam0^)[I]._fU0, 1 ))
            {
                if (bParam1)
                {
                    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, uParam2 );
                }
                BULLET_CAMERA_TRACK_UNTIL_GROUNDED( uParam3 );
                return (uParam0^)[I];
            }
        }
    }
    return g_U671;
}

void sub_58155(boolean bParam0)
{
    if (bParam0)
    {
        sub_607( "[SA]", "Entering progression state STATE_PASSOS_GETS_SHOT_NIS.", "[STATE]" );
        SET_FADE_MUTE_OVERRIDE( 1 );
        DO_SCREEN_FADE_OUT( 0 );
        sub_48660( 1, 0, 0, 0 );
        sub_58280( ref g_U4141 );
        sub_58280( ref g_U4008 );
        if (sub_56221( l_U359[0] ))
        {
            sub_58419( ref l_U501[0], 89.57000000, -13.01000000, 11.06000000, -13.55000000, 1.22000000, -73.45000000, 59.10000000, l_U615[0] );
            sub_58419( ref l_U501[1], 89.57000000, -13.01000000, 11.06000000, -13.55000000, 1.22000000, -73.45000000, 45, l_U615[1] );
            sub_58419( ref l_U501[2], 93.12427000, -12.01371000, 10.77984000, -17.28911000, -0.00003200, -36.70882000, 45, l_U615[2] );
            sub_37547( g_U4007, 93.66046000, -10.09645000, 9.60321800, 147.07860000 );
            l_U493 = l_U494;
        }
        else
        {
            sub_58419( ref l_U501[0], l_U595[0], l_U605[0], 45, l_U615[0] );
            sub_58419( ref l_U501[1], l_U595[1], l_U605[1], 45, l_U615[1] );
            sub_58419( ref l_U501[2], l_U595[2], l_U605[2], 45, l_U615[2] );
            sub_37547( g_U4007, 93.66046000, -10.09645000, 9.60321800, 0.00000000 );
            l_U493 = l_U495;
        }
        sub_58954();
        sub_53854( ref l_U484, 1000 );
        l_U482 = 1;
    }
    switch (l_U482)
    {
        case 0: break;
        case 1:
        if (sub_4277( ref l_U484 ))
        {
            sub_59901( ref l_U501[0] );
            sub_59985();
            sub_53854( ref l_U484, l_U493 );
            DO_SCREEN_FADE_IN( 250 );
            SET_FADE_MUTE_OVERRIDE( 0 );
            l_U482 = 2;
        }
        break;
        case 2:
        sub_60352( sub_60314(), 0.25000000 );
        l_U482 = 3;
        break;
        case 3:
        if (sub_4277( ref l_U484 ))
        {
            if (NOT (sub_56221( l_U359[0] )))
            {
                sub_59901( ref l_U501[1] );
            }
            if (NOT l_U1387)
            {
                sub_60495( "STAD_PASSOS_STORES_SCRIPTED_FAIL_FX", 1 );
                l_U1387 = 1;
            }
        }
        if ((sub_55705( g_U4007, 46 )) == 1)
        {
            TASK_SHOOT_AT_PED( l_U483, g_U4007, -1, -256437761, 1, 0, 0 );
            SET_PED_SHOOTS_AT_COORD( l_U483, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_BONE_COORDS( g_U4007, 65488, g_U649 ) );
            sub_60777();
            sub_60352( sub_60992(), 1.00000000 );
            l_U482 = 4;
        }
        break;
        case 4:
        sub_53854( ref l_U484, 750 );
        l_U482 = 5;
        break;
        case 5:
        if (sub_4277( ref l_U484 ))
        {
            l_U482 = 6;
        }
        break;
        case 6:
        CLEAR_PED_TASKS_IMMEDIATELY( l_U483 );
        SET_PED_INVINCIBLE( l_U483, 0 );
        FREEZE_PED_POSITION( l_U483, 0 );
        sub_49537( 1, 1 );
        if (NOT (IS_PED_DEAD( g_U4007 )))
        {
            SCRIPT_ASSERT( "P_HANDLE_STATE_PASSOS_GETS_SHOT_NIS() - Passos should be dead, but he's not!", 0 );
        }
        l_U482 = 7;
        break;
        case 7: break;
    }
    return;
}

void sub_58280(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_31173( ref (uParam0^)[I]._fU0 );
    }
    return;
}

void sub_58419(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
    sub_4021( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U723, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

void sub_58954()
{
    int iVar2;
    int I;
    int J;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;

    sub_58971( ref g_U4141, 1, 0, -1 );
    sub_58971( ref g_U4008, 1, 0, -1 );
    iVar2 = -1;
    for ( I = 0; I < g_U4008; I++ )
    {
        if ((iVar2 < 0) AND (NOT (IS_PED_DEAD( g_U4008[I]._fU0 ))))
        {
            iVar2 = I;
        }
    }
    if (iVar2 > -1)
    {
        l_U483 = g_U4008[iVar2]._fU0;
    }
    else
    {
        for ( J = 0; J < g_U4141; J++ )
        {
            if ((iVar2 < 0) AND (NOT (IS_PED_DEAD( g_U4141[J]._fU0 ))))
            {
                iVar2 = J;
            }
        }
        if (NOT (IS_PED_DEAD( g_U4141[iVar2]._fU0 )))
        {
            sub_45552( iVar2 );
            l_U483 = g_U4141[iVar2]._fU0;
        }
        else
        {
            SCRIPT_ASSERT( "P_PASSOS_DEATH_SETUP_SHOOTER COULD NOT FIND LIVING SHOOTER OMFG", 0 );
        }
    }
    SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U483, 1 );
    uVar5 = GET_WEAPON_FROM_HAND( l_U483, 0, 0 );
    uVar6 = GET_WEAPON_TYPE( uVar5 );
    SET_AMMO_IN_CLIP( l_U483, uVar6, GET_MAX_AMMO_IN_CLIP( l_U483, uVar6 ) );
    CLEAR_PED_TASKS_IMMEDIATELY( l_U483 );
    if (sub_56221( l_U359[0] ))
    {
        sub_31919( l_U483, 90.86912000, -13.19800000, 9.60321800, 322.89000000 );
    }
    else
    {
        sub_31919( l_U483, l_U496, l_U499 );
    }
    CLEAR_PED_TASKS_IMMEDIATELY( l_U483 );
    PED_ACTION_TREE_PLAY_NODE( l_U483, "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_IDLE" );
    FREEZE_PED_POSITION( l_U483, 1 );
    SET_PED_INVINCIBLE( l_U483, 1 );
    sub_33663( ref l_U483, g_U4007 );
    OPEN_SEQUENCE_TASK( ref uVar7 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
    if (sub_56221( l_U359[0] ))
    {
        TASK_AIM_GUN_AT_PED( 0, g_U4007, -1, 1 );
    }
    else
    {
        TASK_AIM_GUN_AT_COORD( 0, 94.20000000, -14.05000000, 11.44000000, -1, 1 );
    }
    CLOSE_SEQUENCE_TASK( uVar7 );
    TASK_PERFORM_SEQUENCE( l_U483, uVar7 );
    CLEAR_SEQUENCE_TASK( uVar7 );
    return;
}

void sub_58971(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
        sub_59021( ref (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_59021(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( iParam0->_fU0, uParam1 );
    }
    return;
}

void sub_59901(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
    sub_4157( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

void sub_59985()
{
    if (NOT (IS_PED_DEAD( g_U4007 )))
    {
        SET_PED_CAN_INITIATE_BULLET_CAM( g_U4007, 0 );
        SET_PED_AS_ONE_SHOT_KILL( g_U4007, 1 );
        CLEAR_PED_TASKS_IMMEDIATELY( g_U4007 );
        if (sub_56221( l_U359[0] ))
        {
            sub_60137( g_U4007, "/Global/S_STAD_M3B_PAS/SEQ_START/HORRIBLE_DEATH/FROM_BEHIND" );
        }
        else
        {
            sub_60137( g_U4007, "/Global/S_STAD_M3B_PAS/SEQ_START/HORRIBLE_DEATH/FROM_RESTAURANT" );
        }
    }
    return;
}

void sub_60137(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        PED_ACTION_TREE_PLAY_NODE( uParam0, uParam1 );
    }
    return;
}

string sub_60314()
{
    return "WOBBLY_SHAKE";
}

void sub_60352(unknown uParam0, unknown uParam1)
{
    SHAKE_CAM( GET_RENDERING_CAM(), uParam0, uParam1 );
    return;
}

void sub_60495(unknown uParam0, boolean bParam1)
{
    sub_5671( ref l_U76 );
    l_U76 = CREATE_CAM( "DEFAULT_BULLET_CAMERA", 1 );
    SETUP_BULLET_CAMERA_SCENE( l_U76, uParam0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, "", "" );
    if (bParam1)
    {
        RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
    }
    return;
}

void sub_60777()
{
    if (NOT (IS_PED_DEAD( g_U4007 )))
    {
        START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE( "blood_headshot", g_U4007, 0, 0, 0, 0, 0, 0, 65488, 2.00000000 );
        START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE( "blood_headshot_exit", g_U4007, 0, 0, 0, 0, 0, 0, 65488, 2.00000000 );
        sub_60919( g_U4007 );
    }
    return;
}

void sub_60919(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

string sub_60992()
{
    return "MEDIUM_EXPLOSION_SHAKE";
}

void sub_61288(boolean bParam0)
{
    if (bParam0)
    {
        sub_607( "[SA]", "Entering progression state STATE_PASSOS_WALKING_NIS.", "[STATE]" );
        sub_47299( ref l_U1423, "03_02a_STADIUM_PT8", 61407, 61676, 61967, 61985, 62037, 62263, 250, 0 );
        l_U1423._fU4 = 2;
    }
    if ((l_U1423._fU52) AND (l_U1423._fU4 == 6))
    {
        if ((IS_BULLET_CAMERA_TO_GAMEPLAY_ALLOWED() == 0) AND (IS_BULLET_CAMERA_ACTIVE() == 1))
        {
            START_PANEL_WIPE( 300, 6 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
        }
    }
    if (sub_47793( ref l_U1423 ))
    {
        RESET_FORCED_AIM_INTENTION_DIRECTION();
        l_U127 = 12;
        sub_607( "GA", "eCheckpointState = CP_JOIN_PASSOS_IN_RESTAURANT", 0 );
    }
    return;
}

int sub_61407()
{
    SET_PED_CAN_INITIATE_BULLET_CAM( g_U4007, 0 );
    sub_61435( g_U4007 );
    return 1;
}

void sub_61435(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0 )))
    {
        if (iParam0 == sub_3153())
        {
            sub_607( "[AT]", "Clearing headtracking on Max.", 0 );
        }
        else
        {
            sub_607( "[AT]", "Clearing headtracking on non-player ped.", 0 );
        }
        TASK_CLEAR_LOOK_AT( iParam0 );
    }
    else
    {
        SCRIPT_ASSERT( "Passed invalid or dead ped to P_CLEAR_PED_HEADTRACKING!", 0 );
    }
    return;
}

void sub_61676()
{
    CUTSCENE_REGISTER_ISEQ( 1262534908 );
    if (NOT (IS_PED_DEAD( g_U4007 )))
    {
        ISEQ_REGISTER_ENTITY( 1262534908, "Passos", g_U4007, 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4007, 94.80002000, -3.28871200, 9.60303300, 0.00000000 );
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4007, "Pass_heli_Pilo", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4007, 0, 0 ), "W_PI_PT92_Aa_H", 0 );
    }
    if (NOT (IS_PED_DEAD( sub_3153() )))
    {
        CUTSCENE_REGISTER_PED_TELEPORT( sub_3153(), 90.67464000, 0.11329500, 9.60321800, 336.94400000 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( sub_3153(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_IDLE" );
    }
    return;
}

void sub_61967()
{
    return;
}

int sub_61985()
{
    sub_62002( ref g_U888[6] );
    return 1;
}

void sub_62002(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

void sub_62037()
{
    CAMERA_PLAY_ANIMATED( "LEVEL_S_STAD_CP_03", "VIG_29_STAD_PAS_WALK_CAM", 0, 92.02000000, 1.19000000, 11.24000000, 180, 0, 0 );
    SET_FORCED_AIM_INTENTION_DIRECTION( 0.38618700, 0.92125200, 0.04642300 );
    sub_62146();
    return;
}

void sub_62146()
{
    sub_607( "GA", "Starting Radio Chatter.", 0 );
    l_U660 = GET_SOUND_ID();
    PLAY_SOUND_FROM_COORD( l_U660, "S_STAD_STORES_RADIO", l_U647._fU0 );
    return;
}

int sub_62263()
{
    if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_STAD_CP_03", "VIG_29_STAD_PAS_WALK_CAM" )) - 1))
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0, 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( 0, 1065353216, 0 );
        CAMERA_FREEZE_FRAME( 1, 2000, 0, 0 );
        return 1;
    }
    return 0;
}

void sub_62617(boolean bParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;

    if (bParam0)
    {
        sub_607( "[SA]", "Entering progression state STATE_PASSOS_FINDS_BODY_NIS.", "[STATE]" );
        sub_62714();
    }
    if (NOT sub_62850())
    {
        sub_62916();
    }
    sub_63825();
    if (sub_55690( ref g_U4007, 52, 1 ))
    {
        l_U1410 = 1;
    }
    if ((NOT (IS_ANY_SPEECH_PLAYING( g_U4007 ))) AND (l_U1410))
    {
        if ((IS_PLAYER_SHOOTDODGING()) AND (NOT l_U1409))
        {
            l_U1409 = 1;
        }
        else if ((NOT IS_PLAYER_SHOOTDODGING()) AND (l_U1409))
        {
            l_U1409 = 0;
            if ((sub_55562( 0, 2 )) == 0)
            {
                sub_54329( 1, g_U4007, "PASSOS", ref uVar3, 2, 0 );
                sub_54545( "SSTD_SDNC", ref uVar3, 7, 1 );
                sub_8120( "PLAYING SSTD_SDNC" );
            }
        }
        else if ((NOT (IS_PED_IN_CROSSHAIR_CYLINDER( g_U4007, 3, 10000, 0, -1082130432 ))) AND ((NOT (IS_BULLET_TIME_ACTIVE( 1 ))) AND (((sub_55562( 0, 2 )) == 0) AND (sub_53944( 1 )))))
        {
            sub_54329( 1, g_U4007, "PASSOS", ref uVar13, 2, 0 );
            sub_54545( "SSTD_PSOC", ref uVar13, 7, 1 );
            sub_8120( "PLAYING SSTD_PSOC" );
        };;;
    }
    if (sub_64870( ref l_U675, 0 ))
    {
        sub_607( "GA", "Kicking off starting MID 04B", 0 );
        sub_4157( ref l_U696 );
    }
    if ((NOT (IS_PED_DEAD( g_U4007 ))) AND ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND (sub_4277( ref l_U696 ))))
    {
        g_U3876 = 1;
        l_U127 = 13;
        sub_607( "GA", "eCheckpointState = CP_FINISHED", 0 );
    }
    return;
}

void sub_62714()
{
    sub_607( "MF", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - START", 0 );
    g_U4002 = GET_PAYNEKILLER_AMT();
    sub_607( "MF", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - END", 0 );
    return;
}

void sub_62850()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

void sub_62916()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;

    if (sub_62931( ref l_U727, 0 ))
    {
        return;
    }
    if (NOT (sub_3911( ref g_U3992 )))
    {
        sub_53854( ref g_U3992, g_U4001 );
    }
    if ((TIME_SINCE_LAST_MONOLOGUE() > 5000) AND (sub_63030()))
    {
        sub_607( "MF", "Playing Speech: SSTD_MFSP", 0 );
        sub_63223( ref g_U4003, ref uVar2 );
        sub_4814( ref g_U3992 );
        return;
    }
    if (sub_56162( ref l_U1016, 0 ))
    {
        if (sub_63339( ref l_U1263, 10000, 20000 ))
        {
            sub_607( "MF", "Playing Speech: SSTD_PECH", 0 );
            sub_63223( "SSTD_PECH", ref uVar2 );
            return;
        }
    }
    else if ((NOT l_U1263._fU16) AND (sub_3911( ref l_U1263 )))
    {
        sub_607( "MF", "Disabling ambient dialogue timer: tmr_FoodCourt_Amb_Mono", 0 );
        sub_63787( ref l_U1263 );
    }
    return;
}

void sub_62931(int iParam0, unknown uParam1)
{
    if (iParam0->_fU548)
    {
        return 0;
    }
    else
    {
        iParam0->_fU548 = sub_56162( iParam0, uParam1 );
    }
    return iParam0->_fU548;
}

int sub_63030()
{
    if (GET_PAYNEKILLER_AMT() > g_U4002)
    {
        sub_607( "MF", "Player picked up Payne Killers!", 0 );
        sub_45552( g_U4002 );
        sub_45552( GET_PAYNEKILLER_AMT() );
        g_U4002 = GET_PAYNEKILLER_AMT();
        return 1;
    }
    g_U4002 = GET_PAYNEKILLER_AMT();
    return 0;
}

void sub_63223(unknown uParam0, unknown uParam1)
{
    sub_54244( uParam1 );
    sub_54329( 0, sub_3153(), "MAX", uParam1, 2, 0 );
    sub_54329( 1, sub_3153(), "MAX", uParam1, 2, 0 );
    sub_54545( uParam0, uParam1, 8, 1 );
    return;
}

int sub_63339(int iParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (sub_3911( iParam0 )))
    {
        sub_607( "MF", "F_GBL_IS_PLAYER_READY_TO_SAY_EXPLORE_SPEECH_MONOLOGUE - Starting Timer", 0 );
        sub_4021( iParam0, 5000, 1, 0 );
        sub_4157( iParam0 );
    }
    if ((GET_PED_SPEED( sub_3153() )) < 0.10000000)
    {
        iParam0->_fU12 = uParam1;
    }
    else
    {
        iParam0->_fU12 = uParam2;
    }
    if (sub_4277( iParam0 ))
    {
        sub_607( "MF", "F_GBL_IS_PLAYER_READY_TO_SAY_EXPLORE_SPEECH_MONOLOGUE - Timer is complete!", 0 );
        return 1;
    }
    return 0;
}

void sub_63787(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

void sub_63825()
{
    switch (l_U726)
    {
        case 0:
        if ((NOT (sub_56221( l_U197 ))) AND (NOT (sub_56221( l_U176 ))))
        {
            sub_607( "SBA", "First time Passos calls to Max", "***" );
            sub_63951();
            l_U726 = 2;
        }
        break;
        case 1:
        if ((NOT (sub_56221( l_U197 ))) AND (NOT (sub_56221( l_U176 ))))
        {
            if (sub_4277( ref l_U715 ))
            {
                sub_607( "SBA", "Random timer is up", "***" );
                sub_63951();
                l_U726 = 2;
            }
        }
        else
        {
            sub_607( "SBA", "Max in Restaurant, waiting to restart random timer", "***" );
            l_U726 = 2;
        }
        break;
        case 2:
        if ((NOT (sub_56221( l_U197 ))) AND (NOT (sub_56221( l_U176 ))))
        {
            sub_607( "SBA", "Restarting random timer", "***" );
            sub_4021( ref l_U715, GET_RANDOM_INT_IN_RANGE( l_U724, l_U725 ), 1, 0 );
            sub_4157( ref l_U715 );
            l_U726 = 1;
        }
        break;
    }
    return;
}

void sub_63951()
{
    sub_607( "GA", "P_PASSOS_CALL_MAX_DEAD_BODY start", 0 );
    if ((NOT (IS_PED_DEAD( sub_3153() ))) AND ((I_SEQUENCE_QUERY_ENTITY_STATE( ref g_U2764, "Passos", 3 )) AND (NOT (IS_PED_DEAD( g_U4007 )))))
    {
        PED_SET_ACTION_INTENTION( g_U4007, 37, 1000, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( sub_3153() ) );
        sub_54244( ref l_U705 );
        sub_54329( 1, g_U4007, "PASSOS", ref l_U705, 2, 0 );
        sub_54329( 0, sub_3153(), "MAX", ref l_U705, 2, 0 );
        sub_54545( "SSTD_STPD", ref l_U705, 7, 1 );
    }
    sub_607( "GA", "P_PASSOS_CALL_MAX_DEAD_BODY end", 0 );
    return;
}

void sub_64870(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 = sub_56239( sub_3153(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

void sub_65272()
{
    sub_607( "GA", "P_RELEASE_STORE_ASSETS start", 0 );
    sub_65332( ref l_U113, ref g_U1069 );
    sub_44756( g_U2378, ref g_U1069 );
    sub_65413( ref l_U123, ref g_U1214 );
    sub_65634( "DAM_KO", ref g_U1354 );
    sub_65634( "LEVEL_S_STAD_CP_03", ref g_U1354 );
    sub_65634( "LEVEL_S_STAD_PU", ref g_U1354 );
    sub_65634( "DAM_DEAD", ref g_U1354 );
    sub_65921( "SCRIPT_MISSION\S_STAD_STORES_RADIO", ref g_U2074 );
    sub_66091( 0 );
    sub_607( "GA", "P_RELEASE_STORE_ASSETS end", 0 );
    return;
}

void sub_65332(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_44756( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_65413(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_65448( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_65448(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 = sub_6181( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_65634(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_6181( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_65921(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_6181( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_66091(boolean bParam0)
{
    if (NOT bParam0)
    {
        sub_65634( "PLGE_RIFLE_CROUCH", ref g_U1354 );
        sub_65634( "PLGE_PSTL_CROUCH", ref g_U1354 );
        sub_65634( "PLGE_RIFLE_CORE", ref g_U1354 );
        sub_65634( "PLGE_PSTL_CORE", ref g_U1354 );
        sub_65634( "PLGE_RIFLE_CORE_RELOAD", ref g_U1354 );
        sub_65634( "PLGE_PSTL_CORE_RELOAD", ref g_U1354 );
        sub_65634( "PLGE_RIFLE_HANDSIG", ref g_U1354 );
        sub_65634( "PLGE_PSTL_HANDSIG", ref g_U1354 );
        sub_65634( "PLGE_RIFLE_ACTIONS", ref g_U1354 );
        sub_65634( "PLGE_PSTL_ACTIONS", ref g_U1354 );
        sub_65634( "PLGE_RIFLE_KNEE", ref g_U1354 );
        sub_65634( "PLGE_PSTL_KNEE", ref g_U1354 );
        sub_65634( "PLGE_RIFLE_COVER", ref g_U1354 );
        sub_65634( "PLGE_PSTL_COVER", ref g_U1354 );
        sub_65634( "PLGE_RIFLE_REACT", ref g_U1354 );
        sub_65634( "PLGE_PSTL_REACT", ref g_U1354 );
        sub_65634( "PLGE_RIFLE_COVER_EXIT", ref g_U1354 );
        sub_65634( "PLGE_PSTL_COVER_EXIT", ref g_U1354 );
        sub_65634( "PLGE_PSTL_FULLBODY", ref g_U1354 );
    }
    else
    {
        sub_66687( "PLGE_RIFLE_CROUCH" );
        sub_66687( "PLGE_PSTL_CROUCH" );
        sub_66687( "PLGE_RIFLE_CORE" );
        sub_66687( "PLGE_PSTL_CORE" );
        sub_66687( "PLGE_RIFLE_CORE_RELOAD" );
        sub_66687( "PLGE_PSTL_CORE_RELOAD" );
        sub_66687( "PLGE_RIFLE_HANDSIG" );
        sub_66687( "PLGE_PSTL_HANDSIG" );
        sub_66687( "PLGE_RIFLE_ACTIONS" );
        sub_66687( "PLGE_PSTL_ACTIONS" );
        sub_66687( "PLGE_RIFLE_KNEE" );
        sub_66687( "PLGE_PSTL_KNEE" );
        sub_66687( "PLGE_RIFLE_COVER" );
        sub_66687( "PLGE_PSTL_COVER" );
        sub_66687( "PLGE_RIFLE_REACT" );
        sub_66687( "PLGE_PSTL_REACT" );
        sub_66687( "PLGE_RIFLE_COVER_EXIT" );
        sub_66687( "PLGE_PSTL_COVER_EXIT" );
        sub_66687( "PLGE_PSTL_FULLBODY" );
    }
    return;
}

void sub_66687(unknown uParam0)
{
    REMOVE_ANIM_DICT( uParam0, 0 );
    return;
}

