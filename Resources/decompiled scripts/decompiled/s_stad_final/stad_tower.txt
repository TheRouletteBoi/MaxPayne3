void main()
{
    unknown uVar2;
    unknown uVar3;

    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U39 = -1;
    l_U40 = {64536, 64536, 64536};
    l_U44 = 0;
    l_U45 = 0;
    l_U46 = 1500;
    l_U75 = 0;
    l_U77 = 0;
    l_U78 = 1;
    l_U135 = {-3.85518100, -56.97401000, 19.78350000};
    l_U138 = {0.45883200, -73.73255000, 39.35437000};
    l_U141 = {0, 0, 0};
    l_U144 = {-3.14928600, -65.65906000, 31.31002000};
    l_U147 = 1;
    l_U340 = 0;
    l_U996 = 0;
    l_U1158 = 0;
    l_U1159 = 0;
    l_U1160 = 0;
    l_U1161 = 0;
    l_U1176 = {-0.21019800, -73.53435000, 37.77819000};
    l_U1187 = 0;
    l_U1258 = 0;
    l_U1259 = 0;
    l_U1260 = {0.00000000, -83.09000000, 47.25000000};
    l_U1263 = 0.00000000;
    l_U1264 = {-0.17900000, -83.04000000, 47.25000000};
    l_U1267 = {-0.25000000, -74.00000000, 37.77800000};
    l_U1270 = {-0.25000000, -74.00000000, 37.77800000};
    l_U1273 = {-0.25000000, -74.00000000, 37.77800000};
    l_U1276 = 0;
    l_U1277 = -6.17736000;
    l_U1278 = -0.11618700;
    l_U1279 = 7000;
    l_U1280 = 5500;
    l_U1281 = {-0.25000000, -74.00000000, 37.77800000};
    l_U1285 = {0.00000000, -73.00000000, 39.00000000};
    l_U1335 = {0.00000000, -73.00000000, 41.00000000};
    l_U1369 = {8.00055000, -67.98177000, 35.81498000};
    l_U1372 = {23.48188000, -0.04339600, 137.49510000};
    l_U1375 = 2000;
    l_U1407 = {-0.34000000, -77.96000000, 38.53000000};
    l_U1410 = {-6.35000000, 0.22000000, -154.64000000};
    l_U1413 = 1950;
    l_U1423 = 1750;
    l_U1433 = 1500;
    l_U1443 = 100;
    l_U1444 = 0;
    l_U1445 = {0.10774300, -78.67973000, 39.61697000};
    l_U1448 = 0;
    l_U1449 = 0;
    l_U1451 = {-3.00000000, -73.00000000, 40.00000000};
    l_U1455 = {5.00000000, -75.00000000, 40.00000000};
    l_U1459 = {5.00000000, -75.00000000, 39.00000000};
    l_U1463 = {3.00000000, -73.00000000, 40.00000000};
    l_U1467 = {-3.00000000, -73.00000000, 40.00000000};
    l_U1471 = {5.00000000, -75.00000000, 40.00000000};
    l_U1475 = {3.00000000, -73.00000000, 40.00000000};
    l_U1479 = {5.50000000, -75.00000000, 41.50000000};
    l_U1484 = {3.00000000, -73.50000000, 39.00000000};
    l_U1489 = {-2.84123500, -73.44806000, 39.00000000};
    l_U1492 = {0, 0, 40};
    l_U1496 = {0.00000000, -73.00000000, 39.00000000};
    l_U1582 = 1;
    l_U1601 = 50;
    l_U1602 = 0.70000000;
    l_U1612 = -1;
    l_U1613 = -1;
    l_U1656 = {0.63900000, 0, 0};
    l_U1659 = {0, -72.73500000, 42.28600000};
    l_U1662 = {-2, -72.73500000, 42.28600000};
    l_U1665 = {-1.50000000, -72.52900000, 41.20000000};
    l_U1668 = {1.50000000, -72.52900000, 41.20000000};
    l_U1671 = {0.60000000, -71.50000000, 40.85000000};
    l_U1674 = {-0.60000000, -71.50000000, 40.85000000};
    l_U1677 = {0.63900000, 65464, 40.73600000};
    l_U1680 = 1;
    l_U1681 = 0;
    l_U1691 = 2000;
    l_U1701 = 150;
    l_U1711 = 390;
    l_U1721 = 950;
    l_U1731 = 850;
    l_U1741 = 1050;
    l_U1742 = 1;
    l_U1743 = 0;
    l_U1937 = 0;
    l_U1938 = 0;
    l_U1939 = 0;
    l_U1940 = 0;
    l_U1941 = 1;
    l_U1942 = 0;
    l_U1943 = 0;
    l_U1944 = 0;
    l_U1945 = 0;
    sub_1467( "SP", "Script stad_tower.sc is starting...", "###" );
    l_U75 = 0;
    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        FREEZE_PED_POSITION( sub_1522(), 1 );
    }
    sub_1614();
    sub_5277();
    sub_6932();
    sub_9191();
    sub_9948();
    sub_10554();
    sub_11441();
    sub_12730();
    if ((g_U854 == 14) || (g_U854 == 13))
    {
        if (NOT (sub_12792( ref l_U148 )))
        {
            uVar2 = sub_17002( sub_1522(), 68019059, 100, 0, 0 );
            uVar3 = sub_17192( sub_1522(), 1194438308, 100, 0, 0 );
        }
        sub_17359();
        sub_17527();
        FREEZE_TIME_OF_DAY( 21, 0 );
        SET_WEATHER_TYPE_NOW_PERSIST( "SUNNY_WINDY" );
        g_U3872 = 1;
        l_U147 = 0;
    }
    if (g_U854 != 14)
    {
        sub_18148();
        sub_22726();
        l_U77 = 1;
    }
    else
    {
        sub_26213();
        l_U77 = 7;
    }
    SET_TRAFFIC_SYSTEM( 1 );
    while (NOT g_U3872)
    {
        WAIT( 0 );
    }
    while (l_U1187 == 0)
    {
        sub_26364();
        sub_30287();
        sub_30552();
        sub_34255();
        sub_35892();
        sub_66793();
        WAIT( 0 );
    }
    sub_28766( 1 );
    sub_67104();
    sub_61459();
    SET_SILHOUETTE_ACTIVE( 0 );
    SET_TRAFFIC_SYSTEM( 0 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    SET_HIGHEST_ARCADE_LEVEL_UNLOCKED( 3 );
    SWITCH_TO_LEVEL_NAME( "s_nyc" );
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "stad_tower" );
    CLEAR_HELP();
    sub_1467( "SP", "Script stad_tower.sc is terminating...", "###" );
    return;
}

void sub_1467(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    return;
}

int sub_1522()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED( sub_1544() );
    }
    return 0;
}

void sub_1544()
{
    return GET_PLAYER_ID();
}

void sub_1614()
{
    sub_1467( "SP", "P_LOAD_TOWER_ASSETS", "###" );
    sub_1668( g_U2389, 1 );
    sub_1869( "LEVEL_S_STAD_CP_09", 0, 1 );
    sub_1942( 1, 0 );
    sub_1668( g_U2420, 1 );
    sub_1668( g_U2421, 1 );
    sub_1668( g_U2422, 1 );
    sub_1668( g_U2423, 1 );
    sub_1668( g_U2424, 1 );
    sub_1668( g_U2425, 1 );
    sub_1668( g_U2426, 1 );
    sub_1668( g_U2427, 1 );
    sub_1668( g_U2428, 1 );
    sub_1668( g_U2429, 1 );
    sub_1668( g_U2430, 1 );
    sub_1668( g_U2431, 1 );
    sub_1668( g_U2432, 1 );
    sub_1668( g_U2433, 1 );
    sub_1668( g_U2419, 1 );
    sub_1668( g_U2435, 1 );
    sub_1668( g_U2434, 1 );
    sub_1668( -714224954, 1 );
    sub_1668( 1456031900, 1 );
    sub_1668( 1549519688, 1 );
    sub_1668( 2106998919, 1 );
    sub_1668( -522142102, 1 );
    sub_1668( 433266513, 1 );
    sub_1668( -463194506, 1 );
    sub_1668( -115644820, 1 );
    sub_1668( -441856368, 1 );
    sub_1668( 550198901, 1 );
    sub_1668( 946282352, 1 );
    sub_1668( 568669855, 1 );
    sub_1668( -1941765637, 1 );
    sub_1668( g_U2400, 1 );
    sub_1668( g_U2401, 1 );
    sub_1668( g_U2402, 1 );
    sub_1668( g_U2403, 1 );
    sub_1668( 1148368229, 1 );
    sub_1869( "veh@car_gensedan", 0, 1 );
    sub_4719( "VEHICLE/vehicle_car", 1 );
    sub_4869( ref g_U2636, "LEVEL_S_STAD_PU", "/LEVEL/S_STAD/s_stad_snipbeh.act", "/Global/SNIPER_BEHAVIOR", 1 );
    sub_4869( ref g_U2580, "LEVEL_S_STAD_MPM", "/LEVEL/S_STAD/s_stad_mpm.act", "/Global/S_STAD_MPM/MPM_Root", 1 );
    sub_4869( "S_STAD_HOPOFFLAD", "LEVEL_S_STAD_CP_09", "/LEVEL/S_STAD/s_stad_HopOffLad.act", "/Global/HOP_OFF_LADDER", 1 );
    STOP_SCRIPT_STREAM( 0 );
    sub_5183( "S_STAD_MAXCOVER", 0, 0 );
    sub_1668( g_U849, 1 );
    return;
}

void sub_1668(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
        sub_1773( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_1773(unknown uParam0)
{
    return;
}

void sub_1869(unknown uParam0, unknown uParam1, int iParam2)
{
    REQUEST_ANIM_DICT( uParam0, uParam1 );
    "[doubled result, dropped if not asigned]";
    if (iParam2 == 1)
    {
        while ((HAS_ANIM_DICT_LOADED( uParam0, uParam1 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_1942(boolean bParam0, boolean bParam1)
{
    if (NOT bParam0)
    {
        if (NOT bParam1)
        {
            sub_1992( "PLGE_RIFLE_CROUCH", ref g_U1354 );
            sub_1992( "PLGE_PSTL_CROUCH", ref g_U1354 );
            sub_1992( "PLGE_RIFLE_KNEE", ref g_U1354 );
            sub_1992( "PLGE_PSTL_KNEE", ref g_U1354 );
            sub_1992( "PLGE_PSTL_CORE", ref g_U1354 );
            sub_1992( "PLGE_PSTL_COVER", ref g_U1354 );
        }
        sub_1992( "PLGE_RIFLE_CORE", ref g_U1354 );
        sub_1992( "PLGE_RIFLE_CORE_RELOAD", ref g_U1354 );
        sub_1992( "PLGE_PSTL_CORE_RELOAD", ref g_U1354 );
        sub_1992( "PLGE_RIFLE_HANDSIG", ref g_U1354 );
        sub_1992( "PLGE_PSTL_HANDSIG", ref g_U1354 );
        sub_1992( "PLGE_RIFLE_ACTIONS", ref g_U1354 );
        sub_1992( "PLGE_PSTL_ACTIONS", ref g_U1354 );
        sub_1992( "PLGE_RIFLE_COVER", ref g_U1354 );
        sub_1992( "PLGE_RIFLE_REACT", ref g_U1354 );
        sub_1992( "PLGE_PSTL_REACT", ref g_U1354 );
        sub_1992( "PLGE_RIFLE_COVER_EXIT", ref g_U1354 );
        sub_1992( "PLGE_PSTL_COVER_EXIT", ref g_U1354 );
        sub_1992( "PLGE_PSTL_FULLBODY", ref g_U1354 );
    }
    else
    {
        sub_1869( "PLGE_RIFLE_CROUCH", 0, 1 );
        sub_1869( "PLGE_PSTL_CROUCH", 0, 1 );
        sub_1869( "PLGE_RIFLE_CORE", 0, 1 );
        sub_1869( "PLGE_PSTL_CORE", 0, 1 );
        sub_1869( "PLGE_RIFLE_CORE_RELOAD", 0, 1 );
        sub_1869( "PLGE_PSTL_CORE_RELOAD", 0, 1 );
        sub_1869( "PLGE_RIFLE_HANDSIG", 0, 1 );
        sub_1869( "PLGE_PSTL_HANDSIG", 0, 1 );
        sub_1869( "PLGE_RIFLE_ACTIONS", 0, 1 );
        sub_1869( "PLGE_PSTL_ACTIONS", 0, 1 );
        sub_1869( "PLGE_RIFLE_KNEE", 0, 1 );
        sub_1869( "PLGE_PSTL_KNEE", 0, 1 );
        sub_1869( "PLGE_RIFLE_COVER", 0, 1 );
        sub_1869( "PLGE_PSTL_COVER", 0, 1 );
        sub_1869( "PLGE_RIFLE_REACT", 0, 1 );
        sub_1869( "PLGE_PSTL_REACT", 0, 1 );
        sub_1869( "PLGE_RIFLE_COVER_EXIT", 0, 1 );
        sub_1869( "PLGE_PSTL_COVER_EXIT", 0, 1 );
        sub_1869( "PLGE_PSTL_FULLBODY", 0, 1 );
    }
    return;
}

void sub_1992(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_2013( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
        sub_2150( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_2013(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                sub_2150( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                sub_2150( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    sub_2150( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                    sub_2821( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                sub_2150( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
            sub_2150( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_2150(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_2172( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

int sub_2172(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            if ((uParam1^)[I] == iParam0)
            {
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
        else
        {
            (uParam1^)[I] = nil;
            Result = I;
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

void sub_2821(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

void sub_4719(unknown uParam0, int iParam1)
{
    ACTION_TREE_LOAD( uParam0 );
    if (iParam1 == 1)
    {
        while ((IS_ACTION_TREE_LOADED( uParam0 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_4869(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    if ((I_SEQUENCE_IS_LOADED( uParam0 )) == 0)
    {
        I_SEQUENCE_SETUP( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            while ((I_SEQUENCE_QUERY_STATE( uParam0, 1 )) == 1)
            {
                WAIT( 0 );
            }
        }
    }
    return;
}

void sub_5183(unknown uParam0, unknown uParam1, int iParam2)
{
    if (iParam2 == 0)
    {
        REQUEST_SCRIPT_STREAM( uParam0, uParam1 );
    }
    else
    {
        while ((LOAD_SCRIPT_STREAM( uParam0, uParam1 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_5277()
{
    sub_1773( "[MSWW]### stad_tower P_SET_SCRIPT_DATA" );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
    l_U78 = 1;
    l_U1187 = 0;
    l_U1303[0] = g_U2420;
    l_U1303[1] = g_U2421;
    l_U1303[2] = g_U2422;
    l_U1303[3] = g_U2423;
    l_U1303[4] = g_U2424;
    l_U1303[5] = g_U2425;
    l_U1303[6] = g_U2426;
    l_U1303[7] = g_U2427;
    l_U1303[8] = g_U2428;
    l_U1303[9] = g_U2429;
    l_U1303[10] = g_U2430;
    l_U1303[11] = g_U2431;
    l_U1303[12] = g_U2432;
    l_U1303[13] = g_U2433;
    l_U1318[0] = "p_st_twtgls_aa";
    l_U1318[1] = "p_st_twtgls_ab";
    l_U1318[2] = "p_st_twtgls_ac";
    l_U1318[3] = "p_st_twtgls_ad";
    l_U1318[4] = "p_st_twtgls_ae";
    l_U1318[5] = "p_st_twtgls_af";
    l_U1318[6] = "p_st_twtgls_ag";
    l_U1318[7] = "p_st_twtgls_ah";
    l_U1318[8] = "p_st_twtgls_ai";
    l_U1318[9] = "p_st_twtgls_aj";
    l_U1318[10] = "p_st_twtgls_ak";
    l_U1318[11] = "p_st_twtgls_al";
    l_U1318[12] = "p_st_twtgls_am";
    l_U1318[13] = "p_st_twtgls_an";
    l_U1258 = 0;
    l_U1582 = 1;
    sub_5908( "SSTDAUD" );
    sub_6024( ref l_U1204 );
    sub_6024( ref l_U1213 );
    sub_6024( ref l_U1414 );
    sub_6024( ref l_U1424 );
    sub_6024( ref l_U1434 );
    sub_6024( ref l_U1499 );
    sub_6024( ref l_U1583 );
    sub_6024( ref l_U1592 );
    sub_6024( ref l_U1603 );
    sub_6216( ref l_U195, 1500, 1, 0 );
    sub_6216( ref l_U233, 500, 1, 0 );
    sub_6216( ref l_U439, 0, 1, 0 );
    l_U1743 = 0;
    l_U1259 = 0;
    l_U184 = 0;
    l_U1160 = 0;
    l_U997 = 0;
    l_U1161 = 0;
    l_U1444 = 0;
    l_U1158 = 0;
    l_U1159 = 0;
    l_U996 = 0;
    l_U340 = 0;
    sub_6216( ref l_U1573, 2000, 1, 0 );
    sub_6216( ref l_U1927, 7500, 1, 0 );
    sub_6468();
    sub_1773( "[MSWW]### stad_tower P_SET_SCRIPT_DATA ended" );
    return;
}

void sub_5908(unknown uParam0)
{
    StrCopy( ref g_U157._fU0, uParam0, 16 );
    sub_5928();
    return;
}

void sub_5928()
{
    int I;

    for ( I = 0; I <= 8; I++ )
    {
        g_U157._fU16[I]._fU0 = nil;
        g_U157._fU16[I]._fU4 = 0;
        g_U157._fU92[I] = 0;
    }
    return;
}

void sub_6024(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

void sub_6216(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

void sub_6468()
{
    sub_1467( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
    l_U1936 = 0;
    l_U1937 = 0;
    if (NOT (SCRIPT_VAR_HASH_EXISTS( 1701971384 )))
    {
        sub_1467( "CCB", "Creating the OldPainless script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( 1701971384 );
        if (SCRIPT_VAR_HASH_EXISTS( 1701971384 ))
        {
            sub_1467( "CCB", "The OldPainless script variable was successfully created...", 0 );
        }
        else
        {
            sub_1467( "CCB", "The OldPainless script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
        sub_1467( "CCB", "The OldPainless script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( 1701971384, 0 );
    }
    return;
}

void sub_6932()
{
    unknown[4] uVar2;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;
    unknown uVar45;
    unknown uVar46;
    unknown uVar47;
    unknown uVar48;
    unknown uVar49;
    unknown uVar50;
    unknown uVar51;
    unknown uVar52;
    unknown uVar53;
    unknown uVar54;
    unknown uVar55;
    unknown uVar56;
    unknown uVar57;
    unknown uVar58;
    unknown uVar59;
    unknown uVar60;
    unknown uVar61;
    unknown uVar62;
    unknown uVar63;
    unknown uVar64;
    unknown uVar65;
    unknown uVar66;
    unknown uVar67;
    unknown uVar68;
    unknown uVar69;
    unknown uVar70;
    unknown uVar71;
    unknown uVar72;
    unknown uVar73;
    unknown uVar74;
    unknown uVar75;
    unknown uVar76;
    unknown uVar77;
    unknown uVar78;
    unknown uVar79;
    unknown uVar80;
    unknown uVar81;
    unknown uVar82;
    unknown uVar83;
    unknown uVar84;
    unknown uVar85;
    unknown uVar86;

    sub_1773( "[MSWW]### stad_tower P_SET_STATIC_DATA" );
    sub_7013( ref l_U1163, l_U1176, 43.72908000, g_U2389, 7, 3, 2, 0, 0 );
    sub_7013( ref l_U1614, -6.51517100, -72.80335000, 27.70544000, 0.00000000, 1844299595, 7, 3, 2, 0, 0 );
    sub_7013( ref l_U1628, -8.29938400, -72.80450000, 27.70544000, 0.00000000, -1415227013, 7, 3, 2, 0, 0 );
    sub_7013( ref l_U1642, -18.81369000, -72.76975000, 27.70544000, 0.00000000, g_U2376, 7, 3, 2, 0, 0 );
    sub_7310( ref l_U490, "TRIGGER_PLAYER_AT_ENTRANCE", -0.47000000, -67.94000000, 17.55000000, 4.99000000, 24.54000000, 3.49000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_7310( ref l_U511, "TRIGGER_START_LADDER_GUARDS", -2.47000000, -77.71000000, 27.15000000, 3.49000000, 2.14000000, 3.98000000, 0.00000000, 0.00000000, -47.51000000, 1 );
    sub_7310( ref l_U532, "TRIGGER_CHECK_VISIBILITY", -1.78000000, -76.39000000, 27.15000000, 2.03000000, 2.79900000, 3.98000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_7310( ref l_U553, "TRIGGER_START_CATWALK_GUARD", 17.01349000, -86.35711000, 46.83000000, 3, 3, 4.15000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_7310( ref l_U998, "tb_LL_PlayerCloseToFirstCatwalkCoverEnemy", 12.98000000, -86.22000000, 34.89000000, 3.00000000, 3.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_7310( ref l_U574, "TRIGGER_PLAYER_FALL_HACK", -1.37000000, -90.31000000, 41.24000000, 102.01000000, 81.72000000, 2.92000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_7310( ref l_U595, "TRIGGER_PLAYER_FALL_HACK01", -1.37000000, -86.51000000, 30.70000000, 52.01000000, 23.68000000, 2.92000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_7310( ref l_U616, "TRIGGER_EDISON_TELLS_MAX_TO_JUMP_DOWN", 0.07190000, -84.11352000, 47.00000000, 7, 7, 4.15000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_7310( ref l_U448, "TriggerMPM_Start", 0.02000000, -82.32000000, 47.06000000, 1.93000000, 0.63000000, 2.32000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_7310( ref l_U469, "TRIGGER_MPM_OUTER", 0.03000000, -83.70000000, 47.00000000, 2.41000000, 4.15000000, 4.15000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_7310( ref l_U319, "TRIGGER_LAD1", -17.02000000, -83.28000000, 27.50000000, 1.16000000, 1.05000000, 2.70000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_7310( ref l_U418, "TRIGGER_LAD2", 17.09000000, -87.33000000, 34.76000000, 1.16000000, 1.05000000, 2.70000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    array(ref uVar2, 4);
    sub_7310( ref uVar2[0], "tb_SniperIsGonnaGetYa[0]", -11.20000000, -60.26000000, 17.49000000, 10.88000000, 14.12000000, 12.85000000, 0.00000000, 0.00000000, 90.00000000, 1 );
    sub_7310( ref uVar2[1], "tb_SniperIsGonnaGetYa[1]", -3.26000000, -64.48000000, 17.49000000, 2.70000000, 6.96000000, 12.85000000, 0.00000000, 0.00000000, 90.00000000, 1 );
    sub_7310( ref uVar2[2], "tb_SniperIsGonnaGetYa[2]", -11.88000000, -66.13000000, 17.49000000, 13.79000000, 4.86000000, 12.85000000, 0.00000000, 0.00000000, 44.45000000, 1 );
    sub_7310( ref uVar2[3], "tb_SniperIsGonnaGetYa[3]", -30.29000000, -63.83000000, 17.49000000, 31.01000000, 16.84000000, 12.85000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_8642( ref l_U1745, ref uVar2 );
    sub_8963( ref l_U1188, 75043213, -3.01300600, -64.76068000, 17.81461000, 0.00000000, 0.00000000, 0.00000000 );
    sub_8963( ref l_U1195, 614946076, -50.14970000, -65.35905000, 18.21490000, 0.00000000, 0.00000000, 0.00000000 );
    sub_7310( ref l_U1896, "TRIGGER_LADDER_DIAG", -16.50000000, -80.37000000, 27.44000000, 6.26000000, 9.11000000, 3.07000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_1773( "[MSWW]### stad_tower P_SET_STATIC_DATA ended" );
    return;
}

void sub_7013(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU12 = uParam4;
    iParam0->_fU16 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU48 = uParam10;
    return;
}

void sub_7310(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_8642(int iParam0, unknown uParam1)
{
    int iVar4;
    int I;

    iVar4 = (uParam1^);
    if (iVar4 > 6)
    {
        sub_1467( "[SA]", "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
        SCRIPT_ASSERT( "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
    }
    for ( I = 0; I < iVar4; I++ )
    {
        iParam0->_fU0[I] = {(uParam1^)[I]};
    }
    iParam0->_fU508 = iVar4;
    iParam0->_fU548 = 0;
    iParam0->_fU552 = 0;
    iParam0->_fU556 = 0;
    iParam0->_fU560 = 0;
    return;
}

void sub_8963(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

void sub_9191()
{
    l_U242._fU0 = 0;
    l_U242._fU4 = {g_U2612};
    l_U242._fU228 = "stad_ladder_max";
    StrCopy( ref l_U242._fU36, "LEVEL_S_STAD_LDR", 64 );
    StrCopy( ref l_U242._fU100, "/LEVEL/S_STAD/s_stad_ladder.act", 64 );
    StrCopy( ref l_U242._fU164, "/Global/S_STAD_LADDER/S_STAD_LADDER01_SEQ", 64 );
    l_U242._fU232 = {-16.96858000, -83.00137000, 27.70544000};
    l_U242._fU244 = 180;
    l_U242._fU248 = -10.79827000;
    l_U242._fU252 = -3.69535400;
    l_U242._fU256 = 7350;
    l_U242._fU260 = "STAD_MPED_LADDERCLIMB_01_CAM1";
    l_U242._fU264 = 6752;
    l_U242._fU268 = 0;
    l_U242._fU276 = {-17.00000000, -84.00000000, 34.80900000};
    l_U242._fU288 = {0.00000000, 0.00000000, 0.00000000};
    l_U341._fU0 = 0;
    l_U341._fU4 = {g_U2620};
    l_U341._fU228 = "stad_ladder2_max";
    StrCopy( ref l_U341._fU36, "LEVEL_S_STAD_LDR", 64 );
    StrCopy( ref l_U341._fU100, "/LEVEL/S_STAD/s_stad_ladder.act", 64 );
    StrCopy( ref l_U341._fU164, "/Global/S_STAD_LADDER/S_STAD_LADDER02_SEQ", 64 );
    l_U341._fU232 = {16.99716000, -87.46063000, 34.88919000};
    l_U341._fU244 = 0;
    l_U341._fU248 = 0;
    l_U341._fU252 = -4.55142100;
    l_U341._fU256 = 12700;
    l_U341._fU260 = "STAD_MPED_LADDERCLIMB_02_CAM2";
    l_U341._fU264 = 11755;
    l_U341._fU268 = 0;
    l_U341._fU276 = {17.01700000, -86.63800000, 47.16200000};
    l_U341._fU288 = {0.00000000, 0.00000000, 180.00000000};
    return;
}

void sub_9948()
{
    sub_9982( "P_TECH_LIGHTS_ON_HLOD" );
    sub_10014( g_U3948 );
    sub_10014( g_U3949 );
    sub_10014( g_U3950 );
    sub_10014( g_U3951 );
    sub_10014( g_U3952 );
    g_U3948 = sub_10114( g_U2400, g_U3953, 0, 0, 0, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3948 ))
    {
        FREEZE_OBJECT_POSITION( g_U3948, 1 );
    }
    g_U3949 = sub_10114( g_U2401, g_U3956, 0, 0, 0, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3949 ))
    {
        FREEZE_OBJECT_POSITION( g_U3949, 1 );
    }
    g_U3950 = sub_10114( g_U2402, g_U3959, 0, 0, 0, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3950 ))
    {
        FREEZE_OBJECT_POSITION( g_U3950, 1 );
    }
    g_U3951 = sub_10114( g_U2403, g_U3962, 0, 0, 0, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3951 ))
    {
        FREEZE_OBJECT_POSITION( g_U3951, 1 );
    }
    return;
}

void sub_9982(unknown uParam0)
{
    unknown uVar3;

    uVar3 = GET_REAL_GAME_TIMER();
    return;
}

void sub_10014(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

void sub_10114(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
        sub_1668( uParam0, 1 );
    }
    Result = CREATE_OBJECT( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

void sub_10554()
{
    sub_1467( "SP", "P_CREATE_TOWER_PLACEMENTS", "###" );
    sub_10608();
    return;
}

void sub_10608()
{
    sub_1467( "CO", "Add_Placement_CL_S_STA_GG_M8_03", 0 );
    sub_10718( ref g_U775, g_U849, -1910029411, -1544096136, -44.52000000, -73.59000000, 27.76000000, 0.00000000, 0.00000000, -0.75000000, "" );
    sub_10847( ref g_U775 );
    return;
}

void sub_10718(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
        sub_1467( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

void sub_10847(int iParam0)
{
    sub_1467( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if ((sub_10908( iParam0->_fU12 )) == 1)
        {
            sub_1467( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
            sub_1467( "CO", "has never been collected.", 0 );
        }
        if ((sub_10908( iParam0->_fU12 )) == 0)
        {
            sub_11113( iParam0->_fU0 );
            iParam0->_fU0 = sub_11181( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                    sub_1467( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
        sub_1467( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

int sub_10908(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

void sub_11113(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

void sub_11181(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    return Result;
}

void sub_11441()
{
    sub_11461( ref l_U1188, 65446, 0 );
    sub_11633( ref l_U1188, 1 );
    sub_11633( ref l_U1195, 1 );
    sub_11773( ref l_U1195, 1 );
    sub_11901();
    return;
}

void sub_11461(int iParam0, float fParam1, float fParam2)
{
    if ((sub_11473( iParam0 )) == 0)
    {
        sub_11539( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        ;
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

int sub_11473(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_11539(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

void sub_11633(int iParam0, int iParam1)
{
    if ((sub_11473( iParam0 )) == 0)
    {
        sub_11539( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

void sub_11773(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if ((sub_11473( iParam0 )) == 0)
    {
        sub_11539( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

void sub_11901()
{
    int I;

    I_SEQUENCE_UNREGISTER_ENTITY( ref g_U2580, "stad_mpm_light" );
    for ( I = 0; I <= (l_U1288 - 1); I++ )
    {
        sub_10014( l_U1288[I] );
    }
    sub_10014( l_U1284 );
    sub_10014( l_U1454 );
    sub_10014( l_U1458 );
    sub_10014( l_U1462 );
    sub_10014( l_U1466 );
    sub_10014( l_U1450 );
    sub_10014( l_U1470 );
    sub_10014( l_U1474 );
    sub_10014( l_U1482 );
    sub_10014( l_U1487 );
    sub_10014( l_U1483 );
    sub_10014( l_U1488 );
    sub_10014( l_U1478 );
    sub_10014( l_U1334 );
    sub_10014( l_U1333 );
    l_U1284 = sub_12161( g_U2419, l_U1285, 0.00000000, 0.00000000, 0.00000000, 0, 1, 0 );
    l_U1333 = sub_12161( g_U2434, l_U1335, 0.00000000, 0.00000000, 0.00000000, 0, 1, 0 );
    l_U1450 = sub_12161( -714224954, l_U1451, g_U649, 0, 0, 0 );
    l_U1470 = sub_12161( 433266513, l_U1471, g_U649, 0, 0, 0 );
    l_U1474 = sub_12161( -463194506, l_U1475, g_U649, 0, 0, 0 );
    l_U1478 = sub_12161( -441856368, l_U1479, g_U649, 0, 0, 0 );
    l_U1482 = sub_12161( 550198901, l_U1484, g_U649, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( l_U1482, 1 );
    l_U1483 = sub_12161( 946282352, l_U1484, g_U649, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( l_U1483, 1 );
    l_U1487 = sub_12161( 550198901, l_U1489, l_U1492, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( l_U1487, 1 );
    l_U1488 = sub_12161( 946282352, l_U1489, l_U1492, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( l_U1488, 1 );
    return;
}

void sub_12161(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
        sub_1668( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

void sub_12730()
{
    sub_11773( ref g_U3493, 1 );
    sub_11773( ref g_U3500, 1 );
    return;
}

int sub_12792(unknown uParam0)
{
    sub_1467( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
            sub_12922( uParam0, sub_1522() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

void sub_12922(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

    sub_1467( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
    sub_13106( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
        sub_14183( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 = sub_14475( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
        sub_14822( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 = sub_14475( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
        sub_14822( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 = sub_14475( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
        sub_14822( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 = sub_15107( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
        sub_14822( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 = sub_15107( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
        sub_14822( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if ((sub_15600( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
    sub_15761( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING( sub_1522(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
    sub_1467( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

void sub_13106(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 = sub_13138( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

int sub_13138(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

void sub_14183(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

void sub_14475(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                }
            }
        }
    }
    else
    {
        sub_1773( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

void sub_14822(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

void sub_15107(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                }
            }
        }
    }
    else
    {
        sub_1773( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

int sub_15600(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

void sub_15761(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 = sub_13138( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
    sub_15833( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

void sub_15833(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

void sub_17002(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
    unknown Result;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (bParam4)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                sub_9982( "MAL_GivePedWeapon waiting for weapon to exist" );
            }
        }
        return Result;
    }
    return nil;
}

void sub_17192(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
    int Result;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam2, uParam3 );
        if (bParam4)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam3 );
            while (Result == 0)
            {
                WAIT( 0 );
                Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam3 );
                sub_9982( "MAL_GivePedWeapon waiting for weapon to exist" );
            }
        }
        return Result;
    }
    return nil;
}

void sub_17359()
{
    sub_1773( "[SP]### P_CREATE_STADIUM_OBJECTS ###" );
    if (DOES_OBJECT_EXIST( g_U3704 ))
    {
        sub_10014( g_U3704 );
    }
    g_U3704 = sub_12161( g_U2390, -10.46000000, 5.99000000, 0.70000000, 0.00000000, 0.00000000, 18.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U3704 ))
    {
        FREEZE_OBJECT_POSITION( g_U3704, 1 );
    }
    return;
}

void sub_17527()
{
    sub_17541( ref g_U3941 );
    g_U3941[0] = sub_12161( -1652775333, -4.14443000, 10.10766000, 0.14177000, 0, 0, 2.56000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[0] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[0], 1 );
    }
    g_U3941[1] = sub_12161( 1816766229, 10.25816000, 2.27307000, 0.14177000, 0, 0, 1.88000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[1] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[1], 1 );
    }
    g_U3941[2] = sub_12161( 1873472982, 13.91821000, 23.57691000, 0.14177000, 0, 0, 2.23000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[2] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[2], 1 );
    }
    g_U3941[3] = sub_12161( -1993976541, 11.90281000, 13.09956000, 0.14177000, 0, 0, 2.95000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[3] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[3], 1 );
    }
    g_U3941[4] = sub_12161( -1993976541, 10.14508000, 8.20610000, 0.14177000, 0, 0, 90.68000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[4] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[4], 1 );
    }
    g_U3941[5] = sub_12161( -2096019114, 3.94087000, 16.99167000, 0.14177000, 0, 0, -1.16000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[5] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[5], 1 );
    }
    return;
}

void sub_17541(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_10014( (uParam0^)[I] );
    }
    return;
}

void sub_18148()
{
    sub_1467( "SP", "P_CREATE_TOWER_SNIPER", "###" );
    sub_18299( ref l_U1518, l_U1176 + (vector( 0, -0.56000000, 0.25000000)), -2.59961700, -57.14729000, 18.27229000, -7.77885300, -56.74737000, 18.27672000, -5.49575900, -57.78821000, 18.27672000, g_U2389, 0.44024800, -75.98826000, 37.77830000, 0, 3500 );
    SET_PED_NAME_DEBUG( l_U1518._fU0, "piTheSniper" );
    sub_20384( ref l_U1518._fU0, "M3_CP_S3B_Avg" );
    l_U1518._fU196 = 1.50000000;
    sub_20461( l_U1518._fU56 );
    sub_20461( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( l_U1518._fU0 ) );
    l_U1518._fU164 = 3;
    l_U1518._fU208 = -256437761;
    sub_20526( ref l_U1518 );
    SET_PED_PERFECT_ACCURACY_OVERRIDE( l_U1518._fU0, 1 );
    TASK_AIM_GUN_AT_COORD( l_U1518._fU0, -5.49575900, -57.78821000, 18.27672000, -1, 1 );
    return;
}

void sub_18299(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18)
{
    iParam0->_fU56 = {uParam1};
    iParam0->_fU72 = {uParam4};
    iParam0->_fU84 = {uParam7};
    iParam0->_fU96 = {uParam10};
    iParam0->_fU68 = uParam17;
    iParam0->_fU160 = uParam13;
    iParam0->_fU108 = {uParam14};
    iParam0->_fU164 = 0;
    iParam0->_fU168 = 0;
    iParam0->_fU172 = 0;
    iParam0->_fU176 = 0;
    iParam0->_fU180 = 0;
    iParam0->_fU184 = 0;
    iParam0->_fU192 = uParam18;
    iParam0->_fU156 = 1500;
    iParam0->_fU196 = 3;
    iParam0->_fU200 = 0;
    iParam0->_fU204 = 0;
    iParam0->_fU208 = -256437761;
    iParam0->_fU212 = 0;
    iParam0->_fU216 = 0;
    sub_7013( iParam0 + 4, iParam0->_fU56, iParam0->_fU68, iParam0->_fU160, 7, 3, 2, 0, 0 );
    iParam0->_fU0 = sub_18554( iParam0 + 0, iParam0 + 4, 1, 1, 0 );
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( iParam0->_fU0, 1 );
        SET_PED_INVINCIBLE( iParam0->_fU0, 1 );
        SET_PED_GORE( iParam0->_fU0, 0 );
        FREEZE_PED_POSITION( iParam0->_fU0, 1 );
        sub_19575( iParam0->_fU0, iParam0->_fU56, iParam0->_fU68 );
        SET_PED_ALERTNESS( iParam0->_fU0, 3 );
        SET_PED_ACCURACY( iParam0->_fU0, 31186664 );
        SET_PED_CAN_BE_TARGETTED( iParam0->_fU0, 0 );
        SET_PED_AI_TEMPLATE( iParam0->_fU0, "AIT_EXPERT" );
        SET_PED_PERFECT_ACCURACY_OVERRIDE( iParam0->_fU0, 1 );
        SET_PED_CONSUMING_AMMO( iParam0->_fU0, 0 );
    }
    iParam0->_fU188 = sub_17002( iParam0->_fU0, -2075384407, 25000, 0, 0 );
    ENABLE_WEAPON_ATTACHMENT( iParam0->_fU188, 13, 1 );
    TOGGLE_WEAPON_ATTACHMENT( iParam0->_fU188, 13, 1 );
    SET_LASER_SIGHT_ATTACHMENT( iParam0->_fU188, -12373631 );
    sub_4869( "S_STAD_SNIPBEH", "LEVEL_S_STAD_PU", "/LEVEL/S_STAD/s_stad_snipbeh.act", "/Global/SNIPER_BEHAVIOR", 1 );
    sub_1869( "LEVEL_S_STAD_PU", 0, 1 );
    I_SEQUENCE_REGISTER_ENTITY( "S_STAD_SNIPBEH", "stad_sniper", iParam0->_fU0, 0 );
    I_SEQUENCE_START( "S_STAD_SNIPBEH" );
    while (NOT (I_SEQUENCE_QUERY_ENTITY_STATE( "S_STAD_SNIPBEH", "stad_sniper", 3 )))
    {
        WAIT( 0 );
    }
    sub_19575( iParam0->_fU0, iParam0->_fU56, iParam0->_fU68 );
    PED_ACTION_TREE_PLAY_NODE( iParam0->_fU0, "/Global/SNIPER_BEHAVIOR/SNIPER3SET_SEQ/STATES/DUCK_TO_PEEK" );
    sub_20161( iParam0 + 0 );
    return;
}

void sub_18554(unknown uParam0, unknown uParam1, boolean bParam2, boolean bParam3, unknown uParam4)
{
    sub_18567( (uParam0^) );
    (uParam0^) = sub_18643( uParam1 );
    if (bParam3)
    {
        while (NOT (DOES_PED_EXIST( (uParam0^) )))
        {
            WAIT( 0 );
            sub_9982( "MAL_CreatePed waiting for ped to exist" );
        }
    }
    SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( (uParam0^), uParam4 );
    sub_19397( uParam0, 32, 0 );
    SET_PED_IGNORE_LOS_CHECKS( (uParam0^), NOT bParam2 );
    SET_PED_EMOTION_STATE( (uParam0^), 1 );
    return (uParam0^);
}

void sub_18567(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

void sub_18643(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
        sub_1668( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
    sub_19122( iParam0->_fU40 );
    sub_19202( iParam0->_fU40 );
    return iParam0->_fU40;
}

void sub_19122(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

void sub_19202(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

void sub_19397(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_COMBAT_ATTRIBUTES( (uParam0^), uParam1, uParam2 );
    }
    return;
}

void sub_19575(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

void sub_20161(unknown uParam0)
{
    sub_20178( uParam0, sub_1522() );
    return;
}

void sub_20178(unknown uParam0, unknown uParam1)
{
    sub_20192( uParam0, uParam1 );
    sub_20253( uParam0, uParam1 );
    return;
}

void sub_20192(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        REGISTER_TARGET( (uParam0^), uParam1 );
    }
    return;
}

void sub_20253(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        SET_LOCKED_TARGET( (uParam0^), uParam1 );
    }
    return;
}

void sub_20384(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        sub_1773( uParam1 );
        SET_PERSISTENT_PED_VARIATION( (uParam0^), uParam1 );
    }
    return;
}

void sub_20461(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return;
}

void sub_20526(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        switch (iParam0->_fU164)
        {
            case 0:
            if (NOT ((sub_20624( iParam0->_fU0, 37 )) == 1))
            {
                iParam0->_fU168 = 0;
                iParam0->_fU176 = 0;
                iParam0->_fU180 = 0;
                iParam0->_fU172 = 0;
                TASK_AIM_GUN_AT_COORD( iParam0->_fU0, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU0 ), -1, 1 );
            }
            break;
            case 1:
            if ((NOT iParam0->_fU216) AND (sub_20758( iParam0 )))
            {
                sub_20869( iParam0 );
            }
            else if (NOT iParam0->_fU168)
            {
                sub_21193( iParam0 );
            }
            break;
            case 4:
            if (sub_21458( iParam0 + 120 ))
            {
                sub_1467( "MSWW", "SniperBehaviour: Duck timer done", "###" );
                if (sub_20758( iParam0 ))
                {
                    sub_20869( iParam0 );
                }
                else if (iParam0->_fU212)
                {
                    sub_21715( iParam0 );
                }
                else
                {
                    sub_21193( iParam0 );
                }
            }
            break;
            case 2:
            if ((NOT iParam0->_fU216) AND (sub_20758( iParam0 )))
            {
                sub_20869( iParam0 );
            }
            else if (NOT iParam0->_fU176)
            {
                sub_21715( iParam0 );
            }
            break;
            case 3:
            if ((NOT iParam0->_fU216) AND (sub_20758( iParam0 )))
            {
                sub_20869( iParam0 );
            }
            else if (NOT iParam0->_fU180)
            {
                sub_22082( iParam0 );
            }
            else if ((sub_22460( iParam0->_fU0 )) == 3)
            {
                sub_22082( iParam0 );
            };;;
            break;
            case 5:
            if (NOT iParam0->_fU184)
            {
                PED_ACTION_TREE_PLAY_NODE( iParam0->_fU0, "/Global/SNIPER_BEHAVIOR/SNIPER3SET_SEQ/STATES/DUCK" );
                iParam0->_fU168 = 0;
                iParam0->_fU176 = 0;
                iParam0->_fU180 = 0;
                iParam0->_fU172 = 0;
                iParam0->_fU184 = 1;
            }
            break;
        }
    }
    return;
}

int sub_20624(unknown uParam0, unknown uParam1)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        return GET_SCRIPT_TASK_STATUS( uParam0, uParam1 );
    }
    return 0;
}

int sub_20758(int iParam0)
{
    if ((NOT (IS_PED_DEAD( sub_1522() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if (IS_PED_IN_CROSSHAIR_CYLINDER( iParam0->_fU0, iParam0->_fU196, 1000, iParam0->_fU200, -1082130432 ))
        {
            return 1;
        }
    }
    return 0;
}

void sub_20869(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        if ((NOT iParam0->_fU184) AND (NOT iParam0->_fU172))
        {
            sub_9982( "Sniper ducks" );
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 47, 1000, g_U649 );
        }
        iParam0->_fU168 = 0;
        iParam0->_fU176 = 0;
        iParam0->_fU180 = 0;
        iParam0->_fU172 = 1;
        iParam0->_fU184 = 0;
        sub_6216( iParam0 + 120, iParam0->_fU156, 1, 0 );
        sub_21041( iParam0 + 120 );
        iParam0->_fU164 = 4;
    }
    return;
}

void sub_21041(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

void sub_21193(int iParam0)
{
    unknown uVar3;

    if ((NOT (IS_PED_DEAD( sub_1522() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if ((iParam0->_fU184) || (iParam0->_fU172))
        {
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 48, 1000, g_U649 );
        }
        sub_20161( iParam0 + 0 );
        iParam0->_fU168 = 1;
        iParam0->_fU176 = 0;
        iParam0->_fU180 = 0;
        iParam0->_fU172 = 0;
        iParam0->_fU184 = 0;
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_AIM_GUN_AT_PED( 0, sub_1522(), iParam0->_fU192, 0 );
        TASK_SHOOT_AT_PED( 0, sub_1522(), -1, iParam0->_fU208, 0, 0, iParam0->_fU204 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
        iParam0->_fU164 = 1;
    }
    return;
}

int sub_21458(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

void sub_21715(int iParam0)
{
    unknown uVar3;

    if ((NOT (IS_PED_DEAD( sub_1522() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if ((iParam0->_fU184) || (iParam0->_fU172))
        {
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 48, 1000, g_U649 );
        }
        iParam0->_fU168 = 0;
        iParam0->_fU176 = 1;
        iParam0->_fU180 = 0;
        iParam0->_fU172 = 0;
        iParam0->_fU184 = 0;
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_AIM_GUN_AT_COORD( 0, iParam0->_fU72, 2000, 0 );
        TASK_AIM_GUN_AT_COORD( 0, iParam0->_fU84, 2000, 0 );
        SET_SEQUENCE_TO_REPEAT( uVar3, 1 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
        iParam0->_fU164 = 2;
    }
    return;
}

void sub_22082(int iParam0)
{
    float fVar3;
    float fVar4;
    float fVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;

    if ((NOT (IS_PED_DEAD( sub_1522() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if ((iParam0->_fU184) || (iParam0->_fU172))
        {
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 48, 1000, g_U649 );
        }
        iParam0->_fU168 = 0;
        iParam0->_fU176 = 0;
        iParam0->_fU180 = 1;
        iParam0->_fU172 = 0;
        iParam0->_fU184 = 0;
        fVar3 = (GET_RANDOM_FLOAT_IN_RANGE( -0.50000000, 0.50000000 )) + (ref iParam0->_fU96->_fU0);
        fVar4 = (GET_RANDOM_FLOAT_IN_RANGE( -0.50000000, 0.50000000 )) + (ref iParam0->_fU96->_fU4);
        fVar5 = (GET_RANDOM_FLOAT_IN_RANGE( -0.50000000, 0.50000000 )) + (ref iParam0->_fU96->_fU8);
        uVar6 = {fVar3, fVar4, ref iParam0->_fU96->_fU8};
        OPEN_SEQUENCE_TASK( ref uVar9 );
        TASK_AIM_GUN_AT_COORD( 0, uVar6, 3000, 1 );
        TASK_SHOOT_AT_COORD( 0, uVar6, 1000, 1566631136, 0, 0 );
        TASK_AIM_GUN_AT_COORD( 0, uVar6, 1000, 0 );
        TASK_AIM_GUN_AT_COORD( 0, uVar6, -1, 0 );
        CLOSE_SEQUENCE_TASK( uVar9 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar9 );
        CLEAR_SEQUENCE_TASK( uVar9 );
        iParam0->_fU164 = 3;
    }
    return;
}

int sub_22460(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        return GET_SEQUENCE_PROGRESS( uParam0 );
    }
    return -1;
}

void sub_22726()
{
    sub_1773( "[MSWW]### stad_tower P_SETUP_LOWER_LEVEL_ENEMIES" );
    SET_PED_MODEL_LOD_DISTANCES( g_U2389, 10, 80 );
    sub_22868( ref l_U637[0], -1.28017500, -72.97365000, 27.70536000, 90.00000000, g_U652, 1933708663, g_U2389, 3, 6, 0, 1194438308, 0 );
    l_U637[0]._fU80 = 0;
    sub_22868( ref l_U637[1], -16.98500000, -83.07000000, 27.71000000, 180.00000000, g_U652, 1718727135, g_U2389, 5, 12, 0, 68019059, 0 );
    sub_22868( ref l_U637[2], -17.15854000, -77.30354000, 27.70536000, 270.00000000, g_U652, -143128658, g_U2389, 3, 6, 0, 1194438308, 0 );
    sub_22868( ref l_U637[3], 19.38796000, -87.88268000, 34.88918000, 242.40000000, g_U652, -907091952, g_U2389, 5, 12, 0, 1194438308, 0 );
    sub_22868( ref l_U637[4], -0.62164100, -72.96597000, 27.70536000, 90.00000000, g_U652, 2032132202, g_U2389, 3, 12, 0, 68019059, 0 );
    l_U637[4]._fU80 = 0;
    sub_22868( ref l_U637[5], -14.50889000, -79.74542000, 27.70536000, 270.00000000, g_U652, 1471929279, g_U2389, 3, 20, 0, 1194438308, 0 );
    sub_22868( ref l_U637[6], 16.90000000, -87.44300000, 34.89400000, 0.00000000, g_U652, -502633814, g_U2389, 3, 15, 0, 68019059, 0 );
    sub_22868( ref l_U637[7], 16.84000000, -85.83000000, 34.88919000, 0.00000000, g_U652, 1123264353, g_U2389, 3, 50, 0, 68019059, 0 );
    sub_23577( ref l_U637, "LOWER_LEVEL", ref l_U990, 1.00000000, 0, 0 );
    sub_25344( ref l_U637, 2, 1 );
    SET_PED_USES_DYING_ANIM( l_U637[3]._fU0, 0 );
    sub_25684( l_U637[1], "Ped", "S_STAD_HOPOFFLAD", "LEVEL_S_STAD_CP_09", "/LEVEL/S_STAD/s_stad_HopOffLad.act", "/Global/HOP_OFF_LADDER" );
    sub_25884( l_U637[1] );
    sub_26037( ref l_U637[5], "GenCover", "E01B1858_1CCC4AF3_Corner1" );
    return;
}

void sub_22868(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19)
{
    sub_22921( uParam0, uParam1, uParam4, uParam18, 68019059, 2, g_U3928, uParam15, uParam16, uParam14, uParam19, uParam17, uParam13, uParam5 );
    return;
}

void sub_22921(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29)
{
    iParam0->_fU56 = {uParam1};
    iParam0->_fU68 = uParam4;
    iParam0->_fU72 = uParam5;
    iParam0->_fU76 = uParam6;
    iParam0->_fU80 = uParam7;
    iParam0->_fU84 = {uParam8};
    iParam0->_fU116 = uParam16;
    iParam0->_fU120 = uParam17;
    iParam0->_fU124 = uParam18;
    iParam0->_fU128 = uParam19;
    iParam0->_fU132 = uParam20;
    iParam0->_fU136 = uParam21;
    iParam0->_fU140 = {uParam22};
    return;
}

int sub_23577(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4, boolean bParam5)
{
    int I;

    sub_1773( uParam1 );
    if (NOT bParam4)
    {
        sub_23607( uParam2, uParam3, 1 );
        for ( I = 0; I < (uParam0^); I++ )
        {
            sub_23804( ref (uParam0^)[I] );
            sub_24665( (uParam0^)[I]._fU0, uParam2 );
        }
        sub_24943( uParam0, uParam1 );
    }
    else if ((uParam0^)[0]._fU172 == 0)
    {
        sub_23607( uParam2, uParam3, 1 );
    }
    if ((uParam0^)[0]._fU172 < (uParam0^))
    {
        sub_23804( ref (uParam0^)[(uParam0^)[0]._fU172] );
        sub_24665( (uParam0^)[(uParam0^)[0]._fU172]._fU0, uParam2 );
        (uParam0^)[0]._fU172++;
    }
    else
    {
        sub_24943( uParam0, uParam1 );
        return 1;
    }
    if (bParam5)
    {
        sub_25209( uParam0, 1, 0, -1 );
    }
    return 0;
}

void sub_23607(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
        }
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

void sub_23804(int iParam0)
{
    unknown uVar3;

    sub_9982( "MAL_EnemyStructCreate starting" );
    sub_23919( iParam0 + 0, iParam0 + 4, iParam0->_fU56, iParam0->_fU68, iParam0->_fU72, iParam0->_fU80, iParam0->_fU84, iParam0->_fU116, iParam0->_fU120, iParam0->_fU124, 1 );
    if (NOT (ARE_STRINGS_EQUAL( iParam0 + 140, ref g_U652 )))
    {
        sub_1773( iParam0 + 140 );
        sub_24299( iParam0 + 0, iParam0 + 140 );
    }
    if (iParam0->_fU128)
    {
        sub_9982( "MAL_EnemyStructCreate giving ped backup weapon" );
        sub_17192( iParam0->_fU0, iParam0->_fU76, 25000, 1, 0 );
    }
    if (iParam0->_fU132)
    {
        uVar3 = GET_WEAPON_FROM_HAND( iParam0->_fU0, 0, 0 );
        sub_24465( ref uVar3, 14, 1 );
    }
    if (iParam0->_fU136 != 0)
    {
        sub_24591( iParam0 + 0, iParam0->_fU136 );
    }
    return iParam0->_fU0;
}

void sub_23919(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19)
{
    sub_7013( uParam1, uParam2, uParam5, uParam18, 7, 3, 2, 0, 0 );
    (uParam0^) = sub_18554( uParam0, uParam1, 1, 1, uParam19 );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( (uParam0^), 1 );
    }
    sub_17002( (uParam0^), uParam6, 25000, 0, 0 );
    sub_24020( uParam0, ref uParam8, uParam16, uParam17, 1 );
    sub_24197( uParam0, uParam7 );
    return (uParam0^);
}

void sub_24020(unknown uParam0, unknown uParam1, float fParam2, float fParam3, boolean bParam4)
{
    sub_9982( "MAL_SetTemplateAndRanges" );
    sub_1773( uParam1 );
    sub_24071( fParam2 );
    sub_24071( fParam3 );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    if (NOT bParam4)
    {
        sub_19397( uParam0, 1, 0 );
    }
    return;
}

void sub_24071(unknown uParam0)
{
    return;
}

void sub_24197(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam1 );
    }
    return;
}

void sub_24299(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_ROOM_FOR_PED_BY_NAME( (uParam0^), uParam1 );
    }
    return;
}

void sub_24465(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (GET_DOES_WEAPON_EXIST( (uParam0^) ))
    {
        if (bParam2)
        {
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
        else
        {
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
    }
    return;
}

void sub_24591(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PERSISTENT_PED_VARIATION_ENUM( (uParam0^), uParam1 );
    }
    return;
}

void sub_24665(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
        sub_1773( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
            sub_23607( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
            sub_23607( iParam1, 1056964608, 0 );
        }
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

void sub_24943(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I]._fU0 )))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I]._fU0, ref cVar5 );
        }
    }
    return;
}

void sub_25209(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
        sub_25259( ref (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_25259(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_FREEZE_PROCESSING( iParam0->_fU0, uParam1 );
    }
    return;
}

void sub_25344(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_25380( ref (uParam0^)[I], uParam1, uParam2 );
    }
    return;
}

void sub_25380(int iParam0, unknown uParam1, unknown uParam2)
{
    sub_25398( iParam0 + 0, uParam1, uParam2 );
    return;
}

void sub_25398(unknown uParam0, unknown uParam1, unknown uParam2)
{
    sub_25412( uParam0, uParam1 );
    sub_25462( uParam0, uParam2 );
    return;
}

void sub_25412(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_ALERTNESS( (uParam0^), uParam1 );
    }
    return;
}

void sub_25462(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_EMOTION_STATE( (uParam0^), uParam1 );
    }
    return;
}

void sub_25684(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47, unknown uParam48)
{
    sub_9982( "MAL_SetupRegisterAndStartISequence" );
    sub_4869( uParam45, uParam46, uParam47, uParam48, 1 );
    sub_25777( uParam45, uParam44, uParam0 );
    I_SEQUENCE_START( uParam45 );
    return;
}

void sub_25777(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45)
{
    sub_25795( uParam0, uParam1, uParam2._fU0 );
    return;
}

void sub_25795(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( uParam2 )))
    {
        I_SEQUENCE_REGISTER_ENTITY( uParam0, uParam1, uParam2, 0 );
    }
    return;
}

void sub_25884(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43)
{
    sub_25912( uParam0, uParam0._fU56, uParam0._fU68 );
    return;
}

void sub_25912(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47)
{
    if (NOT (IS_PED_DEAD( uParam0._fU0 )))
    {
        SET_PED_COORDS( uParam0._fU0, uParam44, 1 );
        SET_PED_HEADING( uParam0._fU0, uParam47 );
    }
    return;
}

void sub_26037(int iParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        sub_26071( iParam0, uParam1, uParam2 );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( iParam0->_fU0, 1 );
    }
    return;
}

void sub_26071(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;

    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        OPEN_SEQUENCE_TASK( ref uVar5 );
        TASK_COMBAT_SNAP_TO_COVER( 0, uParam1, uParam2, 0 );
        CLOSE_SEQUENCE_TASK( uVar5 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar5 );
        CLEAR_SEQUENCE_TASK( uVar5 );
        SET_PED_FLAG_LOCK_TO_COVER( iParam0->_fU0, 1 );
    }
    return;
}

void sub_26213()
{
    STOP_SCRIPT_STREAM( 1 );
    sub_5183( "S_STAD_MPM", 1, 1 );
    STOP_SCRIPT_STREAM( 0 );
    sub_5183( "S_STAD_MPM_FAIL", 0, 1 );
    sub_1668( 776495389, 1 );
    sub_1668( 1049690760, 1 );
    return;
}

void sub_26364()
{
    if (g_U855 == 13)
    {
        if ((sub_26400()) || ((IS_PED_DEAD( sub_1522() )) == 1))
        {
            sub_1467( "SP", "Mission Failed: Max has died.", "###" );
            AUDIO_MUSIC_SUSPEND( 4000 );
            if (((IS_PED_DEAD( l_U1518._fU0 )) == 0) || ((IS_PED_DEAD( l_U1518._fU0 )) == 1))
            {
                if (HAS_PED_BEEN_DAMAGED_BY_PED( sub_1522(), l_U1518._fU0, 0 ))
                {
                    ;
                }
                else if ((NOT l_U574._fU64) AND (NOT l_U595._fU64))
                {
                    ;
                }
            }
            if (sub_26985())
            {
                ;
            }
            else
            {
                while ((sub_27019( 0 )) == 0)
                {
                    WAIT( 0 );
                }
                while ((IS_PED_DEAD( sub_1522() )) == 1)
                {
                    sub_9982( "TOWER: WAITING FOR PLAYER TO RESURRECT" );
                    WAIT( 0 );
                }
            }
            sub_9982( "Tower Checkpoint: Disabling Player Control" );
            if ((IS_PLAYER_DEAD( sub_1544() )) == 0)
            {
                SET_PLAYER_CONTROL( sub_1544(), 0, 0 );
            }
            if (NOT (IS_PED_DEAD( sub_1522() )))
            {
                CLEAR_PED_TASKS_IMMEDIATELY( sub_1522() );
                SET_PED_COLLISION( sub_1522(), 1 );
                sub_28059();
            }
            DO_SCREEN_FADE_OUT( 0 );
            sub_28406( "STAD_MPM_SCRIPTED_FAIL_FX" );
            sub_28581();
            sub_9982( "Tower Checkpoint: Cleaning the tower" );
            sub_28766( 1 );
            sub_9982( "Tower Checkpoint: Displaying Fail Screen" );
            sub_9982( "Tower Checkpoint: Resetting script data" );
            sub_5277();
            sub_9982( "Tower Checkpoint: Resetting script data" );
            sub_6932();
            STOP_SCRIPT_STREAM( 0 );
            sub_5183( "S_STAD_MAXCOVER", 0, 1 );
            sub_9982( "Tower Checkpoint: Restoring checkpoint data" );
            sub_12922( ref l_U148, sub_1522() );
            sub_9982( "Tower Checkpoint: Setting up tower guards" );
            sub_22726();
            sub_9982( "Tower Checkpoint: Creating placements" );
            sub_10554();
            sub_9982( "Tower Checkpoint: Handling doors and windows" );
            sub_11441();
            if ((IS_PED_DEAD( sub_1522() )) == 0)
            {
                ENABLE_PED_JUMPING( sub_1522(), 1 );
            }
            sub_18148();
            sub_9982( "Tower Checkpoint: starting the intro NIS" );
            l_U147 = 0;
            l_U77 = 1;
        }
    }
    return;
}

int sub_26400()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD( sub_1522() )))
        {
            SET_PED_FORCED_TO_WALK( sub_1522(), 0 );
            SET_PLAYER_FORCED_AIM( sub_1544(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE( sub_1544(), 1 );
            if ((IS_PED_VISIBLE( sub_1522() )) == 0)
            {
                SET_PED_VISIBLE( sub_1522(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

void sub_26985()
{
    return g_U648;
}

int sub_27019(int iParam0)
{
    iParam0 = 1;
    switch (l_U45)
    {
        case 0:
        if (NOT (sub_27080( ref l_U47 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_1522() )))
            {
                l_U46 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
            sub_6216( ref l_U47, l_U46, 1, 1 );
            sub_21041( ref l_U47 );
        }
        if (sub_21458( ref l_U47 ))
        {
            sub_1467( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_1522() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD( sub_1544() )))
            {
                SET_PLAYER_CONTROL( sub_1544(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U45 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U45 = 2;
            }
            else
            {
                l_U45 = 3;
            }
        }
        break;
        case 2:
        sub_1467( "NS", "Player will QUIT", 0 );
        sub_27539();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
        sub_1467( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        sub_27539();
        return 1;
        break;
    }
    return 0;
}

int sub_27080(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_27539()
{
    sub_1467( "NS", "P_PostFailRetryCleanup", 0 );
    sub_6024( ref l_U47 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD( sub_1544() )))
    {
        SET_PLAYER_CONTROL( sub_1544(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U44 = 0;
    l_U44 = l_U44;
    l_U45 = 0;
    return;
}

void sub_28059()
{
    sub_1467( "GA", "P_RESET_MAX_ACTION_TREE start", 0 );
    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        if (IS_PLAYER_SHOOTDODGING())
        {
            SCRIPT_ASSERT( "Do not try to reset Max's action tree when he is shoot dodging.", 0 );
            sub_1467( "GA", "You cannot reset Max's action tree during a shoot dodge.", 0 );
        }
        else
        {
            PED_ACTION_TREE_PLAY_NODE( sub_1522(), "/Global/Player" );
        }
    }
    sub_1467( "GA", "P_RESET_MAX_ACTION_TREE end", 0 );
    return;
}

void sub_28406(unknown uParam0)
{
    sub_1467( "CO", "P_IMAGEFX_STOP_BULLETCAM:  Cameras Deleted", 0 );
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    sub_28489( ref l_U76 );
    l_U75 = 1;
    return;
}

void sub_28489(unknown uParam0)
{
    if ((DOES_CAM_EXIST( (uParam0^) )) == 1)
    {
        if ((IS_CAM_ACTIVE( (uParam0^) )) == 1)
        {
            SET_CAM_ACTIVE( (uParam0^), 0 );
        }
        DESTROY_CAM( (uParam0^) );
    }
    (uParam0^) = nil;
    return;
}

void sub_28581()
{
    sub_1467( "SP", "P_SETUP_PLAYER_RELATIONSHIPS", "###" );
    if ((IS_PED_DEAD( sub_1522() )) == 0)
    {
        SET_PED_RELATIONSHIP( sub_1522(), 0, 1 );
        SET_PED_RELATIONSHIP( sub_1522(), 0, 2 );
        SET_PED_RELATIONSHIP( sub_1522(), 0, 6 );
        SET_PED_RELATIONSHIP( sub_1522(), 0, 7 );
    }
    return;
}

void sub_28766(boolean bParam0)
{
    sub_1773( "[MSWW]### stad_tower P_CLEANUP_TOWER" );
    STOP_SCRIPT_STREAM( 0 );
    STOP_SCRIPT_STREAM( 1 );
    ENABLE_WALLA_ZONE( "S_STAD_WZ_LIGHT_RIG", 0 );
    sub_28871( ref g_U2580, 1 );
    I_SEQUENCE_UNREGISTER_ENTITY( ref g_U2612, "stad_ladder_max" );
    sub_28871( ref g_U2612, 0 );
    I_SEQUENCE_UNREGISTER_ENTITY( ref g_U2620, "stad_ladder2_max" );
    sub_28871( ref g_U2620, 0 );
    sub_29035( ref l_U637 );
    sub_29035( ref l_U1019 );
    sub_10014( l_U1284 );
    sub_17541( ref l_U1288 );
    if (bParam0)
    {
        sub_18567( l_U1162 );
        sub_18567( l_U1627 );
        sub_18567( l_U1641 );
        sub_18567( l_U1655 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    }
    I_SEQUENCE_UNREGISTER_ENTITY( ref g_U2580, "stad_mpm_light" );
    sub_10014( l_U1334 );
    sub_10014( l_U1333 );
    sub_29258( ref l_U1518 );
    if (DOES_PICKUP_EXIST( l_U1186 ))
    {
        REMOVE_PICKUP( l_U1186 );
    }
    sub_10014( l_U1450 );
    sub_10014( l_U1454 );
    sub_10014( l_U1458 );
    sub_10014( l_U1462 );
    sub_10014( l_U1466 );
    sub_10014( l_U1470 );
    sub_10014( l_U1474 );
    sub_10014( l_U1478 );
    sub_10014( l_U1482 );
    sub_10014( l_U1487 );
    sub_10014( l_U1483 );
    sub_10014( l_U1488 );
    sub_10014( l_U1495 );
    sub_10014( l_U242._fU272 );
    sub_10014( l_U341._fU272 );
    RESET_PED_MODEL_LOD_DISTANCES( g_U2389 );
    sub_10014( l_U1886 );
    sub_29583( "veh@car_gensedan" );
    sub_29633( "VEHICLE/vehicle_car" );
    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        SET_PLAYER_CAN_USE_SHOOTDODGE( sub_1544(), 1 );
    }
    BULLET_CAMERA_PRELOAD_TEXT_BINK( "S_STAD_MPM", 0 );
    sub_1773( "[MSWW]### stad_tower P_CLEANUP_TOWER ended" );
    return;
}

void sub_28871(unknown uParam0, int iParam1)
{
    if ((I_SEQUENCE_IS_LOADED( uParam0 )) == 1)
    {
        I_SEQUENCE_TERMINATE( uParam0 );
    }
    if (iParam1 == 1)
    {
        while ((I_SEQUENCE_IS_LOADED( uParam0 )) == 1)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_29035(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_29067( ref (uParam0^)[I] );
    }
    return;
}

void sub_29067(int iParam0)
{
    sub_18567( iParam0->_fU0 );
    iParam0->_fU172 = 0;
    return;
}

void sub_29258(int iParam0)
{
    iParam0->_fU164 = 0;
    I_SEQUENCE_UNREGISTER_ENTITY( "S_STAD_SNIPBEH", "stad_sniper" );
    sub_28871( "S_STAD_SNIPBEH", 0 );
    sub_18567( iParam0->_fU0 );
    return;
}

void sub_29583(unknown uParam0)
{
    REMOVE_ANIM_DICT( uParam0, 0 );
    return;
}

void sub_29633(unknown uParam0)
{
    ACTION_TREE_UNLOAD( uParam0 );
    return;
}

void sub_30287()
{
    sub_30313( ref l_U637[3], 32.87899000, 1, 0 );
    sub_30313( ref l_U637[6], 32.87899000, 1, 0 );
    sub_30313( ref l_U637[7], 32.87899000, 1, 0 );
    sub_30466( ref l_U637, 16.00000000, 1, 0 );
    sub_30466( ref l_U1019, 45.18893000, 0, 1 );
    return;
}

void sub_30313(int iParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( iParam0->_fU0, 0, 0 );
            }
            if (bParam3)
            {
                sub_29067( iParam0 );
            }
        }
    }
    return;
}

void sub_30466(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_30313( ref (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

void sub_30552()
{
    if (l_U1941 == 1)
    {
        START_WIDGET_GROUP( "MPM Widget" );
        START_WIDGET_GROUP( "Window Test" );
        ADD_WIDGET_BOOL( "Reset Window", ref l_U1942 );
        ADD_WIDGET_BOOL( "Break window", ref l_U1943 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Post MPM Gameplay Cam" );
        ADD_WIDGET_INT_SLIDER( "Return to Gameplay Interpolation Duration", ref l_U1276, 0, 999999, 100 );
        ADD_WIDGET_FLOAT_SLIDER( "Relative Heading", ref l_U1277, 65356, 180, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Relative Pitch", ref l_U1278, 65356, 180, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Timers" );
        ADD_WIDGET_INT_SLIDER( "nMPMWindowSmash", ref l_U1279, 0, 15000, 1 );
        ADD_WIDGET_INT_SLIDER( "nMPMLightRigBreak", ref l_U1280, 0, 15000, 1 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Sniper pos" );
        ADD_WIDGET_FLOAT_SLIDER( "vSniperPosForMPM.x", ref l_U1281._fU0, 60536, 5000, 1 );
        ADD_WIDGET_FLOAT_SLIDER( "vSniperPosForMPM.y", ref l_U1281._fU4, 60536, 5000, 1 );
        ADD_WIDGET_FLOAT_SLIDER( "vSniperPosForMPM.z", ref l_U1281._fU8, 60536, 5000, 1 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Light Rig" );
        ADD_WIDGET_FLOAT_SLIDER( "vLightRig.x", ref l_U1335._fU0, 60536, 5000, 1 );
        ADD_WIDGET_FLOAT_SLIDER( "vLightRig.y", ref l_U1335._fU4, 60536, 5000, 1 );
        ADD_WIDGET_FLOAT_SLIDER( "vLightRig.z", ref l_U1335._fU8, 60536, 5000, 1 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Player Pos" );
        ADD_WIDGET_FLOAT_SLIDER( "vSniper03MPMPlayerPos.x", ref l_U1260._fU0, 60536, 5000, 1 );
        ADD_WIDGET_FLOAT_SLIDER( "vSniper03MPMPlayerPos.y", ref l_U1260._fU4, 60536, 5000, 1 );
        ADD_WIDGET_FLOAT_SLIDER( "vSniper03MPMPlayerPos.z", ref l_U1260._fU8, 60536, 5000, 1 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Grenade Throw/Fail" );
        sub_31516( "vMPM_GrenadePullPos", ref l_U1407, -971227136, 1176256512, 1065353216 );
        sub_31516( "vMPM_GrenadePullRot", ref l_U1410, -971227136, 1176256512, 1065353216 );
        ADD_WIDGET_INT_SLIDER( "nMPM_GrenadePull", ref l_U1413, 0, 10000, 250 );
        sub_31516( "vMPM_FailPos", ref l_U1369, -971227136, 1176256512, 1065353216 );
        sub_31516( "vMPM_FailRot", ref l_U1372, -971227136, 1176256512, 1065353216 );
        ADD_WIDGET_INT_SLIDER( "nMPM_Fail", ref l_U1375, 0, 30000, 250 );
        ADD_WIDGET_INT_SLIDER( "nFailMPM", ref l_U1423, 0, 30000, 250 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "EXPLOSIONS!  HELLS YEAH!" );
        sub_31516( "vMPM_Explosion01Pos", ref l_U1445, -971227136, 1176256512, 1065353216 );
        ADD_WIDGET_BOOL( "bDebug_DoExplosions", ref l_U1448 );
        ADD_WIDGET_BOOL( "bDebug_DoGlass", ref l_U1449 );
        ADD_WIDGET_BOOL( "bCreateGrenadePreStuff", ref l_U1944 );
        ADD_WIDGET_BOOL( "bCreateGrenadePostStuff", ref l_U1945 );
        ADD_WIDGET_INT_SLIDER( "nExplosionDelay", ref l_U1443, 0, 10000, 250 );
        ADD_WIDGET_INT_SLIDER( "nWhiteFlash", ref l_U1601, 0, 10000, 250 );
        ADD_WIDGET_INT_SLIDER( "nFailExplosionOver", ref l_U1433, 0, 10000, 250 );
        ADD_WIDGET_FLOAT_SLIDER( "nExplosionShakeScalar", ref l_U1602, 0, 5000, 0.10000000 );
        STOP_WIDGET_GROUP();
        ADD_WIDGET_STRING( "Play the MPM" );
        STOP_WIDGET_GROUP();
        l_U1941 = 0;
    }
    if (l_U1944)
    {
        l_U1944 = 0;
        sub_10014( l_U1454 );
        sub_10014( l_U1458 );
        sub_10014( l_U1462 );
        sub_10014( l_U1466 );
        sub_10014( l_U1450 );
        sub_10014( l_U1470 );
        sub_10014( l_U1474 );
        l_U1450 = sub_12161( -714224954, l_U1451, g_U649, 0, 0, 0 );
        l_U1470 = sub_12161( 433266513, l_U1471, g_U649, 0, 0, 0 );
        l_U1474 = sub_12161( -463194506, l_U1475, g_U649, 0, 0, 0 );
    }
    if (l_U1945)
    {
        l_U1945 = 0;
        sub_10014( l_U1454 );
        sub_10014( l_U1458 );
        sub_10014( l_U1462 );
        sub_10014( l_U1466 );
        sub_10014( l_U1450 );
        sub_10014( l_U1470 );
        sub_10014( l_U1474 );
        l_U1454 = sub_12161( 1456031900, l_U1455, g_U649, 0, 0, 0 );
        l_U1458 = sub_12161( 1549519688, l_U1459, g_U649, 0, 0, 0 );
        l_U1462 = sub_12161( 2106998919, l_U1463, g_U649, 0, 0, 0 );
        l_U1466 = sub_12161( -522142102, l_U1467, g_U649, 0, 0, 0 );
    }
    if (l_U1449)
    {
        l_U1449 = 0;
        PLAY_OBJECT_ANIM( l_U1454, "P_ST_GRNEXP_EA_H", "st_anim", 0.00000000, 0, 1 );
        PLAY_OBJECT_ANIM( l_U1458, "P_ST_GRNEXP_EB_H", "st_anim", 0.00000000, 0, 1 );
        PLAY_OBJECT_ANIM( l_U1462, "P_ST_GRNEXP_EC_H", "st_anim", 0.00000000, 0, 1 );
        PLAY_OBJECT_ANIM( l_U1466, "P_ST_GRNEXP_EF_H", "st_anim", 0.00000000, 0, 1 );
    }
    if (l_U1448)
    {
        sub_32889();
        l_U1448 = 0;
    }
    if (l_U1942)
    {
        l_U1942 = 0;
        sub_10014( l_U1284 );
        l_U1284 = sub_12161( g_U2419, l_U1285, 0.00000000, 0.00000000, 0.00000000, 0, 1, 0 );
    }
    if (l_U1943)
    {
        l_U1943 = 0;
        sub_33830();
    }
    return;
}

void sub_31516(unknown uParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[32] cVar7;
    char[32] cVar15;
    char[32] cVar23;

    StrCopy( ref cVar7, uParam0, 32 );
    ConcatString(ref cVar7, ".x", 32);
    StrCopy( ref cVar15, uParam0, 32 );
    ConcatString(ref cVar15, ".y", 32);
    StrCopy( ref cVar23, uParam0, 32 );
    ConcatString(ref cVar23, ".z", 32);
    ADD_WIDGET_FLOAT_SLIDER( ref cVar7, iParam1 + 0, uParam2, uParam3, uParam4 );
    ADD_WIDGET_FLOAT_SLIDER( ref cVar15, iParam1 + 4, uParam2, uParam3, uParam4 );
    ADD_WIDGET_FLOAT_SLIDER( ref cVar23, iParam1 + 8, uParam2, uParam3, uParam4 );
    return;
}

void sub_32889()
{
    sub_1467( "", "P_DO_MPM_EXPLOSIONS", "###" );
    sub_10014( l_U1454 );
    sub_10014( l_U1458 );
    sub_10014( l_U1462 );
    sub_10014( l_U1466 );
    sub_10014( l_U1450 );
    sub_10014( l_U1470 );
    sub_10014( l_U1474 );
    sub_10014( l_U1483 );
    sub_10014( l_U1488 );
    l_U1454 = sub_12161( 1456031900, l_U1455, g_U649, 0, 0, 0 );
    l_U1458 = sub_12161( 1549519688, l_U1459, g_U649, 0, 0, 0 );
    l_U1462 = sub_12161( 2106998919, l_U1463, g_U649, 0, 0, 0 );
    l_U1466 = sub_12161( -522142102, l_U1467, g_U649, 0, 0, 0 );
    l_U1612 = START_PARTICLE_FX_LOOPED_AT_COORD( "Stad_MPM_Explosion_S", l_U1445, g_U649, 1.00000000 );
    l_U1613 = START_PARTICLE_FX_LOOPED_AT_COORD( "Stad_MPM_AC_Units_S", l_U1445, g_U649, 1.00000000 );
    START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_Debris_S", l_U1445, g_U649, 1.00000000 );
    START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_Glass_Shatters_S", l_U1445, g_U649, 1.00000000 );
    START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_SmokingDebris_S", l_U1445, g_U649, 1.00000000 );
    PLAY_OBJECT_ANIM( l_U1454, "P_ST_GRNEXP_EA_H", "st_anim", 0.00000000, 0, 1 );
    PLAY_OBJECT_ANIM( l_U1458, "P_ST_GRNEXP_EB_H", "st_anim", 0.00000000, 0, 1 );
    PLAY_OBJECT_ANIM( l_U1462, "P_ST_GRNEXP_EC_H", "st_anim", 0.00000000, 0, 1 );
    PLAY_OBJECT_ANIM( l_U1466, "P_ST_GRNEXP_EF_H", "st_anim", 0.00000000, 0, 1 );
    PLAY_OBJECT_ANIM( l_U1334, "P_ST_RIGBAR_DA_H", "st_anim", 0.00000000, 0, 1 );
    PLAY_OBJECT_ANIM( l_U1478, "P_ST_RIGBAR_DB_H", "st_anim", 0.00000000, 0, 1 );
    SHAKE_CAM( l_U1338._fU0, "SMALL_EXPLOSION_SHAKE", l_U1602 );
    return;
}

void sub_33830()
{
    int I;

    sub_10014( l_U1284 );
    for ( I = 0; I <= (l_U1288 - 1); I++ )
    {
        sub_10014( l_U1288[I] );
    }
    for ( I = 0; I <= (l_U1288 - 1); I++ )
    {
        l_U1288[I] = sub_12161( l_U1303[I], 0.01000000, -72.92000000, 38.67000000, 0, 0, 0, 0, 0, 0 );
        FREEZE_OBJECT_POSITION( l_U1288[I], 1 );
        PLAY_OBJECT_ANIM( l_U1288[I], l_U1318[I], "st_anim", 0.00000000, 0, 1 );
    }
    sub_10014( l_U1495 );
    l_U1495 = sub_12161( 568669855, l_U1496, g_U649, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( l_U1495, 1 );
    PLAY_OBJECT_ANIM( l_U1495, "P_ST_TWTFRM_AA", "st_anim", 0.00000000, 0, 1 );
    START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Frag_Floresent_Bulb", 0.53000000, -73.09000000, 39.55000000, 0, 0, 0, 2 );
    START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Frag_Floresent_Bulb", -0.63000000, -73.09000000, 39.55000000, 0, 0, 0, 2 );
    return;
}

void sub_34255()
{
    if (l_U1680 == 1)
    {
        START_WIDGET_GROUP( "Test Light Rig FX" );
        ADD_WIDGET_STRING( "PLAY EFFECTS" );
        ADD_WIDGET_BOOL( "bPlayLightRigFX", ref l_U1681 );
        ADD_WIDGET_STRING( "FX Scale" );
        ADD_WIDGET_FLOAT_SLIDER( "nFXScale", ref l_U1742, -100000, 100000, 1 );
        ADD_WIDGET_STRING( "FRAME 103 FX" );
        ADD_WIDGET_INT_SLIDER( "Start Timer Length", ref l_U1691, -100000, 100000, 10 );
        ADD_WIDGET_FLOAT_SLIDER( "X Pos:", ref l_U1656._fU0, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y Pos:", ref l_U1656._fU4, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z Pos:", ref l_U1656._fU8, 60536, 5000, 0.10000000 );
        ADD_WIDGET_STRING( "FRAME 106 FX" );
        ADD_WIDGET_INT_SLIDER( "Start Timer Length", ref l_U1701, -100000, 100000, 10 );
        ADD_WIDGET_FLOAT_SLIDER( "106a X Pos:", ref l_U1659._fU0, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "106a Y Pos:", ref l_U1659._fU4, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "106a Z Pos:", ref l_U1659._fU8, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "106b X Pos:", ref l_U1662._fU0, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "106b Y Pos:", ref l_U1662._fU4, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "106b Z Pos:", ref l_U1662._fU8, 60536, 5000, 0.10000000 );
        ADD_WIDGET_STRING( "FRAME 117 FX" );
        ADD_WIDGET_INT_SLIDER( "Start Timer Length", ref l_U1711, -100000, 100000, 10 );
        ADD_WIDGET_FLOAT_SLIDER( "117a X Pos:", ref l_U1665._fU0, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "117a Y Pos:", ref l_U1665._fU4, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "117a Z Pos:", ref l_U1665._fU8, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "117b X Pos:", ref l_U1668._fU0, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "117b Y Pos:", ref l_U1668._fU4, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "117b Z Pos:", ref l_U1668._fU8, 60536, 5000, 0.10000000 );
        ADD_WIDGET_STRING( "FRAME 129 FX" );
        ADD_WIDGET_INT_SLIDER( "Start Timer Length", ref l_U1721, -100000, 100000, 10 );
        ADD_WIDGET_FLOAT_SLIDER( "X Pos:", ref l_U1671._fU0, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y Pos:", ref l_U1671._fU4, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z Pos:", ref l_U1671._fU8, 60536, 5000, 0.10000000 );
        ADD_WIDGET_STRING( "FRAME 137 FX" );
        ADD_WIDGET_INT_SLIDER( "Start Timer Length", ref l_U1731, -100000, 100000, 10 );
        ADD_WIDGET_FLOAT_SLIDER( "X Pos:", ref l_U1674._fU0, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y Pos:", ref l_U1674._fU4, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z Pos:", ref l_U1674._fU8, 60536, 5000, 0.10000000 );
        ADD_WIDGET_STRING( "FRAME 205 FX" );
        ADD_WIDGET_INT_SLIDER( "Start Timer Length", ref l_U1741, -100000, 100000, 10 );
        ADD_WIDGET_FLOAT_SLIDER( "X Pos:", ref l_U1677._fU0, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y Pos:", ref l_U1677._fU4, 60536, 5000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z Pos:", ref l_U1677._fU8, 60536, 5000, 0.10000000 );
        STOP_WIDGET_GROUP();
        l_U1680 = 0;
    }
    if (l_U1681)
    {
        l_U1681 = 0;
        sub_35778( ref l_U1682, l_U1691 );
        sub_35778( ref l_U1692, l_U1701 );
        sub_35778( ref l_U1702, l_U1711 );
        sub_35778( ref l_U1712, l_U1721 );
        sub_35778( ref l_U1722, l_U1731 );
        sub_35778( ref l_U1732, l_U1741 );
    }
    return;
}

void sub_35778(unknown uParam0, unknown uParam1)
{
    sub_6216( uParam0, uParam1, 1, 0 );
    sub_21041( uParam0 );
    return;
}

void sub_35892()
{
    int iVar2;

    iVar2 = l_U77;
    switch (l_U77)
    {
        case 0:
        sub_1467( "[SA]", "Script state hasn't been set!", "[STATE]" );
        SCRIPT_ASSERT( "Script state hasn't been set!", 0 );
        break;
        case 1:
        if (l_U78)
        {
            sub_1467( "[STATE]", "Entering progression state STATE_INTRO_NIS.", 0 );
            if (l_U147)
            {
                l_U106 = 3;
            }
            else
            {
                sub_36205( 1, 0, 0, 1 );
                sub_36390( -2.60100000, -57.30559000, 18.27624000, 0, 4.98144100, -15 );
                FREEZE_PED_POSITION( sub_1522(), 0 );
                SNAP_PLAYER_TO_COVERPOINT( sub_1544(), "GenCover", "E01B1858_D7f90107_Corner2", 0 );
                WAIT( 2 );
                CAMERA_PLAY_ANIMATED( "LEVEL_S_STAD_CP_09", "B_OUT_03_04_STAD_CAM", 0, g_U649, 0, 0, 0 );
                while (NOT IS_ANIMATED_CAMERA_PLAYING())
                {
                    sub_9982( "WAITING FOR ANIM CAM TO START" );
                    WAIT( 0 );
                }
                DO_SCREEN_FADE_IN( 0 );
                l_U106 = 3;
                break;
            }
        }
        sub_36677();
        if (l_U106 == 6)
        {
            sub_39011();
            sub_11461( ref l_U1188, 65446, 0 );
            sub_11633( ref l_U1188, 1 );
            l_U77 = 2;
        }
        break;
        case 2:
        sub_42719( l_U78 );
        break;
        case 3:
        if (l_U78)
        {
            sub_1467( "[STATE]", "Entering progression state STATE_LADDER_CLIMB_NIS_1.", 0 );
            l_U242._fU0 = 1;
            sub_47986( ref l_U637[3]._fU0, 11.92993000, -86.29153000, 34.88919000, sub_1522(), 3, 0, 1 );
            sub_26037( ref l_U637[7], "GenCover", "E01B1858_6AA9829C_Corner2" );
            sub_10014( l_U1886 );
            sub_48223( ref l_U637, 100, 0, -1 );
            sub_25684( l_U637[6], "Ped", "S_STAD_HOPOFFLAD", "LEVEL_S_STAD_CP_09", "/LEVEL/S_STAD/s_stad_HopOffLad.act", "/Global/HOP_OFF_LADDER" );
            sub_25884( l_U637[6] );
            sub_35778( ref l_U214, 1000 );
        }
        sub_48529( ref l_U242 );
        if (sub_21458( ref l_U214 ))
        {
            sub_37215( ref l_U204 );
            sub_37297( 1, sub_1522(), "MAX", ref l_U204, 2, 0 );
            sub_37297( 2, sub_1522(), "PASSOS", ref l_U204, 2, 0 );
            sub_46920( "SSTD_PC1L", ref l_U204, 8, 1 );
        }
        if (DOES_PED_EXIST( l_U1518._fU0 ))
        {
            if (CAMERA_ANIMATED_CURRENT_TIME() >= 6070)
            {
                sub_29258( ref l_U1518 );
                sub_45854( ref l_U637[3], 0 );
            }
        }
        if (NOT l_U340)
        {
            if (CAMERA_ANIMATED_CURRENT_TIME() >= 7200)
            {
                sub_45765( ref l_U637[6], 47, 1000 );
                l_U340 = 1;
            }
        }
        if (l_U242._fU0 == 4)
        {
            l_U77 = 4;
            if (NOT (IS_PED_DEAD( l_U637[3]._fU0 )))
            {
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U637[3]._fU0, 0 );
                SET_PED_COMBAT_ATTRIBUTES( l_U637[3]._fU0, 8192, 1 );
            }
            sub_45854( ref l_U637[3], 0 );
            if (NOT (IS_PED_DEAD( l_U637[6]._fU0 )))
            {
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U637[6]._fU0, 0 );
                SET_PED_COMBAT_ATTRIBUTES( l_U637[6]._fU0, 8192, 1 );
            }
            if (NOT (IS_PED_DEAD( l_U637[7]._fU0 )))
            {
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U637[7]._fU0, 0 );
                sub_50541( ref l_U637[7] );
            }
        }
        break;
        case 4:
        if (l_U78)
        {
            sub_1467( "[STATE]", "Entering progression state STATE_FIRST_CATWALK.", 0 );
            sub_35778( ref l_U1887, 1500 );
            sub_4869( ref g_U2620, "LEVEL_S_STAD_LDR", "/LEVEL/S_STAD/s_stad_ladder.act", "/Global/S_STAD_LADDER/S_STAD_LADDER02_SEQ", 0 );
        }
        if (sub_21458( ref l_U1887 ))
        {
            sub_48223( ref l_U637, 0, 0, -1 );
        }
        if (sub_45478( ref l_U595, 0 ))
        {
            SET_PED_HEALTH( sub_1522(), 0, 0 );
        }
        if ((NOT (IS_PED_DEAD( l_U637[7]._fU0 ))) AND (NOT l_U997))
        {
            if (sub_50877())
            {
                sub_1467( "GA", "Setting first catwalk enemy in cover not locked to cover.", 0 );
                SET_PED_FLAG_LOCK_TO_COVER( l_U637[7]._fU0, 0 );
                l_U997 = 1;
            }
        }
        if ((sub_51070( ref l_U637 )) < 1)
        {
            if (sub_44651( l_U418 ))
            {
                l_U77 = 5;
            }
        }
        break;
        case 5:
        if (l_U78)
        {
            sub_1467( "[STATE]", "Entering progression state STATE_LADDER_CLIMB_NIS_2.", 0 );
            sub_21041( ref l_U233 );
            STOP_SCRIPT_STREAM( 1 );
            sub_51280();
            l_U341._fU0 = 1;
        }
        sub_48529( ref l_U341 );
        if (sub_21458( ref l_U233 ))
        {
            sub_46855( "SSTD_2LBC", ref l_U223 );
        }
        if (l_U341._fU0 == 4)
        {
            l_U77 = 6;
        }
        break;
        case 6:
        sub_51853( l_U78 );
        sub_53647( "S_STAD_MPM", 1, ref l_U1259 );
        break;
        case 7:
        if (l_U78)
        {
            sub_1467( "[STATE]", "Entering progression state STATE_MAX_PAYNE_MOMENT.", 0 );
            if ((NOT l_U148._fU0) || (g_U855 != 14))
            {
                g_U855 = 14;
                sub_39082( ref l_U148, g_U855, sub_1522(), g_U2138[14], g_U2256[14], 0.00000000, 0.00000000, 1 );
            }
            sub_53950( ref l_U1917, 1 );
            SET_SILHOUETTE_ACTIVE( 0 );
            ENABLE_MPM( 1 );
            ENABLE_ALL_ADRENALINE( 0 );
            l_U1202 = 1;
        }
        if (sub_26400())
        {
            sub_54138();
            return;
        }
        else
        {
            sub_54298();
        }
        if (l_U1202 == 4)
        {
            l_U77 = 8;
        }
        break;
        case 8:
        if (sub_26400())
        {
            sub_54138();
            return;
        }
        else
        {
            sub_58419( l_U78 );
        }
        break;
        case 9:
        if (sub_26400())
        {
            sub_54138();
            return;
        }
        else
        {
            sub_59157( l_U78 );
        }
        break;
        case 10:
        if (sub_26400())
        {
            sub_28766( 1 );
            if ((IS_PED_DEAD( sub_1522() )) == 0)
            {
                PED_ACTION_TREE_PLAY_NODE( sub_1522(), "Global/Player/PlayerRoot/PLAYER_INITIALIZE_LOCO" );
            }
            sub_26213();
            l_U1202 = 1;
            l_U77 = 7;
        }
        else
        {
            sub_61005( l_U78 );
        }
        break;
    }
    if (l_U77 != iVar2)
    {
        l_U78 = 1;
    }
    else
    {
        l_U78 = 0;
    }
    return;
}

void sub_36205(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD( sub_1522() )))
        {
            SET_PLAYER_CONTROL( sub_1544(), 0, uParam2 );
            SET_PED_DUCKING( sub_1522(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY( sub_1522() );
            }
            SET_PED_INVINCIBLE( sub_1522(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

void sub_36390(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    unknown uVar8;

    uVar8 = sub_1522();
    sub_19575( uVar8, uParam0, uParam3 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam4, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( uParam5, 1065353216, 0 );
    return;
}

void sub_36677()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;

    switch (l_U106)
    {
        case 0: break;
        case 1:
        if (NOT (IS_PED_DEAD( sub_1522() )))
        {
            HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE( sub_1522(), 0 );
        }
        sub_36205( 1, 0, 0, 1 );
        sub_36852( l_U1162, "/Global/SNIPER_BEHAVIOR/SNIPER3SET_SEQ/POSE_FOR_CUTS" );
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( 91.29777000, 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( -3.46036300, 1065353216, 0 );
        l_U107 = CREATE_CAM( "DEFAULT_BULLET_CAMERA", 1 );
        SETUP_BULLET_CAMERA_SCENE( l_U107, "03_04_STAD", l_U135, l_U138, l_U141, 0.00000000, 0.00000000, 0.00000000, l_U144, 0.00000000, 0.00000000, 0.00000000, "", "" );
        SET_BULLET_CAMERA_VICTIM( l_U107, l_U1518._fU0 );
        RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
        sub_37090( 0 );
        PLAY_SCRIPT_STREAM_FRONTEND( 0 );
        sub_35778( ref l_U108, 10 );
        l_U106 = 2;
        break;
        case 2:
        if (sub_21458( ref l_U108 ))
        {
            sub_37215( ref l_U1508 );
            sub_37297( 0, sub_1522(), "MAX", ref l_U1508, 2, 0 );
            sub_37297( 1, sub_1522(), "MAX", ref l_U1508, 2, 0 );
            CAMERA_POINT_AT_COORD( -4.90721800, -80.13225000, 33.43287000, 0 );
        }
        if (NOT (IS_BULLET_CAMERA_SCENE_ACTIVE( l_U107 )))
        {
            sub_37603( ref uVar2, -4.64585300, -56.09681000, 19.92072000, 40.69086000, 0.00001500, -170.53650000, 1110704128, 1000 );
            sub_37811( ref uVar2 );
            SNAP_PLAYER_TO_COVERPOINT( sub_1544(), "GenCover", "E01B1858_D7f90107_Corner2", 0 );
            sub_37959( sub_1522(), 47, 1000 );
            sub_1467( "[SA]", "INTRO_NIS_STATE_POINT_AT_SNIPER", 0 );
            l_U106 = 3;
            sub_36852( l_U1162, "/Global/SNIPER_BEHAVIOR/SNIPER3SET_SEQ/STATES/PEEK" );
        }
        break;
        case 3:
        sub_38155( "Anim cam time", CAMERA_ANIMATED_CURRENT_TIME() );
        if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_STAD_CP_09", "B_OUT_03_04_STAD_CAM" )) - 1))
        {
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( 90.00000000, 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( 33.93151000, 1065353216, 0 );
            CAMERA_FREEZE_FRAME( 1, 500, 0, 0 );
            sub_35778( ref l_U117, 0 );
            sub_38325( ref l_U1886, 1148368229, 0.02000000, -73.00000000, 38.90000000, 1, 1 );
            SET_OBJECT_COLLISION( l_U1886, 0 );
            g_U3886 = 1;
            if (g_U855 == 13)
            {
                AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_5_6", "", 0, 1000, -1, -1082130432, 0 );
            }
            sub_1467( "[SA]", "INTRO_NIS_STATE_WAIT_FOR_BLENDOUT", 0 );
            l_U106 = 4;
        }
        break;
        case 4:
        if (sub_21458( ref l_U117 ))
        {
            sub_38581( 1, 1 );
            SET_PED_PERFECT_ACCURACY_OVERRIDE( l_U1518._fU0, 0 );
            sub_38871( ref l_U1518._fU0, -1467320974 );
            l_U1518._fU164 = 2;
            sub_20526( ref l_U1518 );
            sub_1467( "[SA]", "INTRO_NIS_STATE_CLEANUP", 0 );
            l_U106 = 6;
        }
        break;
        case 6: break;
    }
    return;
}

void sub_36852(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        PED_ACTION_TREE_PLAY_NODE( uParam0, uParam1 );
    }
    return;
}

void sub_37090(unknown uParam0)
{
    if ((IS_SCREEN_FADING_IN() == 0) AND (IS_SCREEN_FADED_IN() == 0))
    {
        DO_SCREEN_FADE_IN( uParam0 );
        while (IS_SCREEN_FADED_IN() == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_37215(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

void sub_37297(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

void sub_37603(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
    sub_6216( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U723, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

void sub_37811(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
    sub_21041( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

void sub_37959(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        PED_SET_ACTION_INTENTION( uParam0, uParam1, uParam2, g_U649 );
    }
    return;
}

void sub_38155(unknown uParam0, unknown uParam1)
{
    return;
}

void sub_38325(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6)
{
    sub_38352( uParam0, uParam1, uParam2, g_U649, uParam5, uParam6 );
    return;
}

void sub_38352(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    sub_10014( (uParam0^) );
    (uParam0^) = sub_12161( uParam1, uParam2, uParam5, 0, uParam9, 0 );
    FREEZE_OBJECT_POSITION( (uParam0^), uParam8 );
    return;
}

void sub_38581(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        SET_PLAYER_CONTROL( sub_1544(), 1, 0 );
        SET_PED_INVINCIBLE( sub_1522(), 0 );
        if (bParam0)
        {
            sub_38662();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

void sub_38662()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD( sub_1522() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND( sub_1522(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND( sub_1522(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_1522(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_1522(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

void sub_38871(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_ACCURACY( (uParam0^), uParam1 );
    }
    return;
}

void sub_39011()
{
    if (NOT l_U148._fU0)
    {
        g_U855 = 13;
        sub_39082( ref l_U148, g_U855, sub_1522(), g_U2138[13], g_U2256[13], 0.00000000, 0.00000000, 1 );
    }
    return;
}

void sub_39082(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

    sub_1467( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
        sub_1467( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
        sub_15761( iParam1 );
        sub_39341( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
            sub_39792( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
            sub_39792( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_40024( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
            sub_39792( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_40024( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_40024( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
            sub_39792( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_40024( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_40024( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_40024( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
            sub_39792( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_40024( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_40024( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_40024( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if (sub_40024( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
            sub_41582( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
    sub_1467( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

void sub_39341(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 = sub_13138( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
        sub_1467( "TEH", "Ending context", 0 );
        sub_1467( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

void sub_39792(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

void sub_40024(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

void sub_41582(int iParam0)
{
    sub_1773( "CHECKPOINT DATA" );
    sub_20461( iParam0->_fU4 );
    sub_24071( iParam0->_fU16 );
    sub_24071( iParam0->_fU20 );
    sub_24071( iParam0->_fU24 );
    sub_41661( iParam0->_fU28 );
    sub_41661( iParam0->_fU56 );
    sub_41661( iParam0->_fU60 );
    sub_41661( iParam0->_fU64 );
    sub_41661( iParam0->_fU68 );
    sub_41661( iParam0->_fU72 );
    sub_41661( iParam0->_fU76 );
    sub_41661( iParam0->_fU80 );
    sub_41661( iParam0->_fU84 );
    sub_41661( iParam0->_fU88 );
    sub_41661( iParam0->_fU92 );
    sub_24071( iParam0->_fU32 );
    sub_41661( iParam0->_fU36 );
    sub_41661( iParam0->_fU40 );
    sub_41661( iParam0->_fU44 );
    sub_24071( iParam0->_fU136 );
    sub_41866( iParam0->_fU140 );
    sub_41661( iParam0->_fU52 );
    sub_1773( "---nRightHolsterAttachmentEnabled: " );
    sub_41661( iParam0->_fU96 );
    sub_1773( "---nRightHolsterAttachmentToggled: " );
    sub_41661( iParam0->_fU100 );
    sub_1773( "---nLeftHolsterAttachmentEnabled: " );
    sub_41661( iParam0->_fU104 );
    sub_1773( "---nLeftHolsterAttachmentToggled: " );
    sub_41661( iParam0->_fU108 );
    sub_1773( "---nRifleHolsterAttachmentEnabled: " );
    sub_41661( iParam0->_fU112 );
    sub_1773( "---nRifleHolsterAttachmentToggled: " );
    sub_41661( iParam0->_fU116 );
    sub_1773( "---nRightHandAttachmentEnabled: " );
    sub_41661( iParam0->_fU120 );
    sub_1773( "---nRightHandAttachmentToggled: " );
    sub_41661( iParam0->_fU124 );
    sub_1773( "---nLeftHandAttachmentEnabled: " );
    sub_41661( iParam0->_fU128 );
    sub_1773( "---nLeftHandAttachmentToggled: " );
    sub_41661( iParam0->_fU132 );
    sub_41661( l_U1 );
    sub_41661( 144 );
    return;
}

void sub_41661(unknown uParam0)
{
    return;
}

void sub_41866(boolean bParam0)
{
    if (bParam0)
    {
        ;
    }
    return;
}

void sub_42719(boolean bParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;

    if (bParam0)
    {
        sub_1467( "[STATE]", "Entering progression state STATE_SNIPER_RUN.", 0 );
        sub_25259( ref l_U637[3], 1 );
        sub_25259( ref l_U637[6], 1 );
        sub_25259( ref l_U637[7], 1 );
        sub_42854( ref l_U637[3], 0 );
        sub_42854( ref l_U637[6], 0 );
        sub_42854( ref l_U637[7], 0 );
        l_U1518._fU164 = 2;
        sub_20526( ref l_U1518 );
        if (NOT (IS_PED_DEAD( l_U637[0]._fU0 )))
        {
            OPEN_SEQUENCE_TASK( ref uVar3 );
            TASK_SEARCH_FOR_PED_AT_COVER_POINT( 0, "st_std04_simple", "techCorner09", 1 );
            TASK_SEARCH_FOR_PED_AT_COVER_POINT( 0, "st_std04_simple", "techCorner10", 1 );
            TASK_SEARCH_FOR_PED_AT_COVER_POINT( 0, "st_std04_simple", "techCorner11", 1 );
            TASK_STAND_STILL( 0, -1 );
            CLOSE_SEQUENCE_TASK( uVar3 );
            TASK_PERFORM_SEQUENCE( l_U637[0]._fU0, uVar3 );
            CLEAR_SEQUENCE_TASK( uVar3 );
            if (NOT (IS_PED_DEAD( l_U637[4]._fU0 )))
            {
                CLEAR_PED_TASKS( l_U637[4]._fU0 );
                OPEN_SEQUENCE_TASK( ref uVar4 );
                TASK_STAND_STILL( 0, 2000 );
                TASK_SEARCH_FOR_PED_AT_COVER_POINT( 0, "st_std04_simple", "techCorner08", 1 );
                TASK_SEARCH_FOR_PED_AT_COVER_POINT( 0, "st_std04_simple", "techCorner09", 1 );
                TASK_SEARCH_FOR_PED_AT_COVER_POINT( 0, "st_std04_simple", "techCorner10", 1 );
                TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD( 0, -38.83408000, -72.57018000, 27.70521000, -44.29901000, -72.57018000, 29.31060000, 2, 0, 1056964608, 0, 1, 0 );
                TASK_STAND_STILL( 0, -1 );
                CLOSE_SEQUENCE_TASK( uVar4 );
                TASK_PERFORM_SEQUENCE( l_U637[4]._fU0, uVar4 );
                CLEAR_SEQUENCE_TASK( uVar4 );
            }
        }
        AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_2_5_6", "", 0, 8000, -1, -1082130432, 0 );
    }
    if (NOT l_U996)
    {
        if ((sub_43598( 1 )) || ((IS_BUTTON_PRESSED( 0, 5 )) || (NOT (IS_PED_IN_COVER( sub_1522() )))))
        {
            sub_43767( ref l_U637, 0, -1 );
            sub_43899( ref l_U637[0], -4.60919100, -72.58286000, 27.70536000, 5, 1101004800 );
            sub_43899( ref l_U637[4], -0.60919100, -72.58286000, 27.70536000, 5, 1101004800 );
            l_U996 = 1;
        }
        else if ((sub_44097( l_U637[0]._fU0 )) > 2)
        {
            if (NOT (IS_PED_DEAD( l_U637[4]._fU0 )))
            {
                CLEAR_PED_TASKS( l_U637[4]._fU0 );
                OPEN_SEQUENCE_TASK( ref uVar5 );
                TASK_TURN_PED_TO_FACE_COORD( 0, -0.97712900, -72.57018000, 28.70536000, 0, 1085905306 );
                TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD( 0, -3.97712900, -72.57018000, 27.70536000, -0.97712900, -72.57018000, 28.70536000, 2, 0, 1056964608, 0, 1, 0 );
                TASK_STAND_STILL( 0, -1 );
                CLOSE_SEQUENCE_TASK( uVar5 );
                TASK_PERFORM_SEQUENCE( l_U637[4]._fU0, uVar5 );
                CLEAR_SEQUENCE_TASK( uVar5 );
                if (NOT (IS_PED_DEAD( l_U637[0]._fU0 )))
                {
                    OPEN_SEQUENCE_TASK( ref uVar6 );
                    TASK_TURN_PED_TO_FACE_COORD( 0, -0.97712900, -72.57018000, 28.70536000, 0, 1085905306 );
                    TASK_PAUSE( 0, 2000 );
                    TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD( 0, -7.97712900, -72.57018000, 27.70536000, -0.97712900, -72.57018000, 28.70536000, 2, 0, 1056964608, 0, 1, 0 );
                    TASK_STAND_STILL( 0, -1 );
                    CLOSE_SEQUENCE_TASK( uVar6 );
                    TASK_PERFORM_SEQUENCE( l_U637[0]._fU0, uVar6 );
                    CLEAR_SEQUENCE_TASK( uVar6 );
                }
            }
        }
    }
    if (sub_21458( ref l_U1573 ))
    {
        sub_38871( ref l_U1518._fU0, 31186664 );
        SET_PED_PERFECT_ACCURACY_OVERRIDE( l_U1518._fU0, 1 );
    }
    if (l_U1518._fU164 != 0)
    {
        if (l_U1518._fU164 == 2)
        {
            if (sub_44592( ref l_U1745, 0 ))
            {
                l_U1518._fU164 = 1;
                if (l_U1573._fU16)
                {
                    sub_38871( ref l_U1518._fU0, 31186664 );
                    SET_PED_PERFECT_ACCURACY_OVERRIDE( l_U1518._fU0, 1 );
                }
                else if (NOT l_U1573._fU20)
                {
                    sub_35778( ref l_U1573, 1000 );
                }
                sub_21193( ref l_U1518 );
            }
        }
        else if (l_U1518._fU164 == 1)
        {
            if ((NOT (IS_PED_DEAD( l_U1518._fU0 ))) AND (NOT (sub_44592( ref l_U1745, 0 ))))
            {
                l_U1518._fU164 = 2;
                TASK_AIM_GUN_AT_PED( l_U1518._fU0, sub_1522(), -1, 0 );
            }
        }
        sub_20161( ref l_U1518._fU0 );
        if ((NOT (sub_44592( ref l_U1745, 0 ))) AND (sub_45032( "Z", "Greater", 25.00000000 )))
        {
            l_U1518._fU164 = 0;
            sub_24465( ref l_U1518._fU188, 13, 0 );
            sub_45277( ref l_U1518._fU0 );
        }
    }
    else if (sub_44592( ref l_U1745, 0 ))
    {
        l_U1518._fU164 = 1;
        sub_21193( ref l_U1518 );
        sub_38871( ref l_U1518._fU0, 31186664 );
        SET_PED_PERFECT_ACCURACY_OVERRIDE( l_U1518._fU0, 1 );
        sub_24465( ref l_U1518._fU188, 13, 1 );
    }
    if (NOT l_U1160)
    {
        if (((sub_45585()) AND (sub_44651( l_U532 ))) || (sub_45478( ref l_U511, 0 )))
        {
            l_U1160 = 1;
            sub_45740();
        }
    }
    if (NOT l_U184)
    {
        if (((sub_46502( ref l_U637, 0, 1 )) + (sub_46502( ref l_U637, 4, 1 ))) == 0)
        {
            sub_1467( "GA", "Starting audio zones of enemies up in the light rig", 0 );
            ENABLE_WALLA_ZONE( "S_STAD_WZ_LIGHT_RIG", 1 );
            l_U184 = 1;
        }
    }
    if (((sub_46502( ref l_U637, 0, 3 )) + (sub_46502( ref l_U637, 4, 2 ))) < 1)
    {
        if ((NOT l_U195._fU16) AND (NOT l_U195._fU20))
        {
            sub_21041( ref l_U195 );
        }
        if (IS_SPHERE_VISIBLE( -17.28211000, -88.86464000, 29.46612000, 1, 0 ))
        {
            if ((l_U195._fU16) || (sub_21458( ref l_U195 )))
            {
                if (sub_45478( ref l_U1896, 0 ))
                {
                    sub_46855( "SSTD_TOSD", ref l_U185 );
                }
            }
        }
        if (sub_45478( ref l_U319, 0 ))
        {
            sub_25259( ref l_U637[3], 0 );
            sub_25259( ref l_U637[6], 0 );
            sub_25259( ref l_U637[7], 0 );
            sub_42854( ref l_U637[3], 1 );
            sub_42854( ref l_U637[6], 1 );
            sub_42854( ref l_U637[7], 1 );
            ENABLE_WALLA_ZONE( "S_STAD_WZ_LIGHT_RIG", 0 );
            l_U77 = 3;
        }
    }
    return;
}

void sub_42854(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_VISIBLE( iParam0->_fU0, uParam1 );
    }
    else
    {
        sub_9982( "MAL_ES_SetPedVisible DOES NOT HAVE VALID PED!" );
    }
    return;
}

int sub_43598(unknown uParam0)
{
    int iVar3;

    iVar3 = nil;
    if (HAS_SHOT_BEEN_FIRED_IN_AREA( sub_43617( sub_1522() ), 2.00000000, uParam0, ref iVar3 ))
    {
        if (iVar3 == sub_1522())
        {
            sub_9982( "MAL_HasPlayerFired RETURNING TRUE" );
            return 1;
        }
    }
    return 0;
}

vector sub_43617(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return "[dynamic result, ret vals = 3]";
        break;
        GET_PED_COORDS( uParam0 );
        "[doubled result, dropped if not asigned]";
        "[doubled result, dropped if not asigned]";
        break;
    }
    return vector( 0, 0, 0);
}

void sub_43767(unknown uParam0, unknown uParam1, int iParam2)
{
    int I;

    if (iParam2 == -1)
    {
        iParam2 = (uParam0^) - 1;
    }
    for ( I = uParam1; I <= iParam2; I++ )
    {
        sub_20192( ref (uParam0^)[I]._fU0, sub_1522() );
        sub_20253( ref (uParam0^)[I]._fU0, sub_1522() );
    }
    return;
}

void sub_43899(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    unknown uVar8;

    if ((NOT (IS_PED_DEAD( sub_1522() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        OPEN_SEQUENCE_TASK( ref uVar8 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_ATTACK_MOVE( 0, uParam1, uParam4, uParam5, -1082130432, 3 );
        TASK_COMBAT_PED( 0, sub_1522() );
        CLOSE_SEQUENCE_TASK( uVar8 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar8 );
        CLEAR_SEQUENCE_TASK( uVar8 );
    }
    return;
}

int sub_44097(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return GET_SEQUENCE_PROGRESS( uParam0 );
    }
    return 666;
}

void sub_44592(int iParam0, unknown uParam1)
{
    int Result;
    int I;
    int J;

    Result = 0;
    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            if (sub_44651( iParam0->_fU0[I] ))
            {
                Result = 1;
            }
        }
    }
    if ((uParam1) AND (Result))
    {
        for ( J = 0; J < iParam0->_fU508; J++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[J]._fU0, 0 );
        }
    }
    iParam0->_fU548 = 1;
    return Result;
}

void sub_44651(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return sub_44669( sub_1522(), uParam0 );
}

int sub_44669(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

int sub_45032(unknown uParam0, unknown uParam1, float fParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    float fVar8;

    uVar5 = {sub_43617( sub_1522() )};
    if (ARE_STRINGS_EQUAL( uParam0, "X" ))
    {
        fVar8 = uVar5._fU0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "Y" ))
    {
        fVar8 = uVar5._fU4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "Z" ))
    {
        fVar8 = uVar5._fU8;
    };;;
    if (ARE_STRINGS_EQUAL( uParam1, "Greater" ))
    {
        if (fVar8 > fParam2)
        {
            return 1;
        }
    }
    else if (ARE_STRINGS_EQUAL( uParam1, "Less" ))
    {
        if (fVar8 < fParam2)
        {
            return 1;
        }
    }
    return 0;
}

void sub_45277(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_STAND_STILL( 0, -1 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    return;
}

void sub_45478(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 = sub_44669( sub_1522(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

int sub_45585()
{
    if (IS_SPHERE_VISIBLE( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( l_U637[1]._fU0 ), 0.10000000, 0 ))
    {
        return 1;
    }
    if (IS_SPHERE_VISIBLE( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( l_U637[2]._fU0 ), 0.10000000, 0 ))
    {
        return 1;
    }
    if (IS_SPHERE_VISIBLE( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( l_U637[5]._fU0 ), 0.10000000, 0 ))
    {
        return 1;
    }
    return 0;
}

void sub_45740()
{
    sub_45765( ref l_U637[1], 47, 1000 );
    sub_45804( ref l_U637, 0, 1, 2 );
    sub_46233( ref l_U637[5] );
    sub_46343( ref l_U637[5], 0 );
    sub_46403( ref l_U637[0], 2 );
    sub_46403( ref l_U637[4], 2 );
    return;
}

void sub_45765(int iParam0, unknown uParam1, unknown uParam2)
{
    sub_37959( iParam0->_fU0, uParam1, uParam2 );
    return;
}

void sub_45804(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
        sub_45854( ref (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_45854(int iParam0, unknown uParam1)
{
    sub_45877( iParam0 + 0, iParam0->_fU80, uParam1 );
    return;
}

void sub_45877(unknown uParam0, unknown uParam1, unknown uParam2)
{
    sub_45898( uParam0, sub_1522(), uParam1, uParam2 );
    return;
}

void sub_45898(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

    sub_9982( "MAL_UnblockAndCombatPed" );
    OPEN_SEQUENCE_TASK( ref uVar6 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        sub_9982( "MAL_UnblockAndCombatPed: Victim is not dead" );
        TASK_COMBAT_PED( 0, uParam1 );
    }
    CLOSE_SEQUENCE_TASK( uVar6 );
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        sub_9982( "MAL_UnblockAndCombatPed: Ped is not dead" );
        if (bParam3)
        {
            CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        }
        else
        {
            CLEAR_PED_TASKS( (uParam0^) );
        }
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam2 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar6 );
    }
    CLEAR_SEQUENCE_TASK( uVar6 );
    return;
}

void sub_46233(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        sub_46263( iParam0 );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( iParam0->_fU0, 0 );
    }
    return;
}

void sub_46263(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_FLAG_LOCK_TO_COVER( iParam0->_fU0, 0 );
    }
    return;
}

void sub_46343(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( iParam0->_fU0, uParam1 );
    }
    return;
}

void sub_46403(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        iParam0->_fU80 = uParam1;
        SET_PED_COMBAT_MOVEMENT( iParam0->_fU0, uParam1 );
    }
    return;
}

void sub_46502(unknown uParam0, int iParam1, int iParam2)
{
    int Result;
    int I;

    Result = 0;
    I = iParam1;
    for ( I = iParam1; I <= ((iParam1 - 1) + iParam2); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I]._fU0 )))
        {
            Result++;
        }
    }
    return Result;
}

void sub_46855(unknown uParam0, unknown uParam1)
{
    sub_37215( uParam1 );
    sub_37297( 0, sub_1522(), "MAX", uParam1, 2, 0 );
    sub_37297( 1, sub_1522(), "MAX", uParam1, 2, 0 );
    sub_46920( uParam0, uParam1, 8, 1 );
    return;
}

void sub_46920(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return sub_46944( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

void sub_46944(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return sub_46999( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

int sub_46999(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT (sub_47034( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
    sub_47528( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

int sub_47034(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

void sub_47528(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

void sub_47986(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    unknown uVar10;

    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar10 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        if (NOT (IS_PED_DEAD( uParam4 )))
        {
            TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, uParam1, uParam4, uParam5, uParam6, 0.50000000, 0.10000000, 1, 0 );
        }
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, uParam7 );
        TASK_AIM_GUN_AT_PED( 0, uParam4, 9999999, 0 );
        CLOSE_SEQUENCE_TASK( uVar10 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar10 );
        CLEAR_SEQUENCE_TASK( uVar10 );
    }
    return;
}

void sub_48223(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
        sub_48273( ref (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_48273(int iParam0, unknown uParam1)
{
    unknown uVar4;

    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        uVar4 = GET_WEAPON_FROM_HAND( iParam0->_fU0, 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar4 ))
        {
            SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar4, uParam1 );
        }
    }
    return;
}

void sub_48529(int iParam0)
{
    switch (iParam0->_fU0)
    {
        case 0: break;
        case 1:
        sub_36205( 1, 0, 0, 1 );
        sub_48619( iParam0 + 304, iParam0 + 300, 1, 1 );
        sub_28871( iParam0 + 4, 1 );
        sub_4869( iParam0 + 4, iParam0 + 36, iParam0 + 100, iParam0 + 164, 1 );
        if (NOT (IS_PED_DEAD( sub_1522() )))
        {
            CLEAR_PED_TASKS_IMMEDIATELY( sub_1522() );
            sub_49099( sub_1522(), iParam0->_fU232, iParam0->_fU244 );
            I_SEQUENCE_REGISTER_ENTITY( iParam0 + 4, iParam0->_fU228, sub_1522(), 0 );
            SET_PED_COORDS( sub_1522(), iParam0->_fU232, 1 );
            SET_PED_HEADING( sub_1522(), iParam0->_fU244 );
            SET_PED_COLLISION( sub_1522(), 0 );
        }
        I_SEQUENCE_START( iParam0 + 4 );
        CAMERA_PLAY_ANIMATED( "LEVEL_S_STAD_LDR", iParam0->_fU260, 0, g_U649, 0.00000000, 0, 0 );
        iParam0->_fU0 = 2;
        break;
        case 2:
        if (CAMERA_ANIMATED_CURRENT_TIME() >= iParam0->_fU264)
        {
            SET_PED_COLLISION( sub_1522(), 1 );
            iParam0->_fU268 = 1;
            sub_49360( iParam0->_fU304, iParam0->_fU300, 1, 0 );
        }
        if ((I_SEQUENCE_QUERY_ENTITY_STATE( iParam0 + 4, iParam0->_fU228, 6 )) || ((I_SEQUENCE_QUERY_ENTITY_STATE( iParam0 + 4, iParam0->_fU228, 5 )) || (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_STAD_LDR", iParam0->_fU260 )) - 1))))
        {
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU248, 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU252, 1065353216, 0 );
            CAMERA_FREEZE_FRAME( 1, 500, 0, 0 );
            sub_21041( ref l_U439 );
            iParam0->_fU0 = 3;
        }
        break;
        case 3:
        if (sub_21458( ref l_U439 ))
        {
            sub_10014( iParam0->_fU272 );
            iParam0->_fU272 = sub_12161( -1941765637, iParam0->_fU276, iParam0->_fU288, 0, 0, 0 );
            if (DOES_OBJECT_EXIST( iParam0->_fU272 ))
            {
                FREEZE_OBJECT_POSITION( iParam0->_fU272, 1 );
            }
            sub_38581( 1, 1 );
            sub_28871( iParam0 + 4, 1 );
            iParam0->_fU0 = 4;
        }
        break;
        case 4: break;
    }
    return;
}

void sub_48619(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;

    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        (uParam0^) = GET_WEAPON_FROM_HAND( sub_1522(), 0, 0 );
        (uParam1^) = GET_WEAPON_FROM_HAND( sub_1522(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( (uParam0^) ))
        {
            SELECT_WEAPON_TO_HAND( sub_1522(), 0, 0, uParam2 );
        }
        if (GET_DOES_WEAPON_EXIST( (uParam1^) ))
        {
            SELECT_WEAPON_TO_HAND( sub_1522(), 0, 1, uParam2 );
        }
        if (bParam3)
        {
            uVar6 = GET_WEAPON_FROM_HAND( sub_1522(), 0, 0 );
            uVar7 = GET_WEAPON_FROM_HAND( sub_1522(), 1, 0 );
            while (GET_DOES_WEAPON_EXIST( uVar6 ))
            {
                if ((IS_PED_DEAD( sub_1522() )) == 0)
                {
                    uVar6 = GET_WEAPON_FROM_HAND( sub_1522(), 0, 0 );
                    sub_1773( "Waiting for right weapon to be holstered." );
                }
                WAIT( 0 );
            }
            while (GET_DOES_WEAPON_EXIST( uVar7 ))
            {
                if ((IS_PED_DEAD( sub_1522() )) == 0)
                {
                    uVar7 = GET_WEAPON_FROM_HAND( sub_1522(), 1, 0 );
                    sub_1773( "Waiting for left weapon to be holstered." );
                }
                WAIT( 0 );
            }
        }
    }
    return;
}

void sub_49099(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

void sub_49360(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;

    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        if (GET_DOES_WEAPON_EXIST( uParam0 ))
        {
            SELECT_WEAPON_TO_HAND( sub_1522(), uParam0, 0, uParam2 );
        }
        if (((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER( sub_1522(), 2 ) )) == 0) AND (GET_DOES_WEAPON_EXIST( uParam1 )))
        {
            SELECT_WEAPON_TO_HAND( sub_1522(), uParam1, 1, uParam2 );
        }
        if (bParam3)
        {
            if (GET_DOES_WEAPON_EXIST( uParam0 ))
            {
                uVar6 = GET_WEAPON_FROM_HAND( sub_1522(), 0, 0 );
                while (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
                {
                    if ((IS_PED_DEAD( sub_1522() )) == 0)
                    {
                        uVar6 = GET_WEAPON_FROM_HAND( sub_1522(), 0, 0 );
                        sub_1773( "Waiting for right hand weapon to be un-holstered." );
                    }
                    WAIT( 0 );
                }
            }
            if (((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER( sub_1522(), 2 ) )) == 0) AND (GET_DOES_WEAPON_EXIST( uParam1 )))
            {
                uVar7 = GET_WEAPON_FROM_HAND( sub_1522(), 1, 0 );
                while (NOT (GET_DOES_WEAPON_EXIST( uVar7 )))
                {
                    if ((IS_PED_DEAD( sub_1522() )) == 0)
                    {
                        uVar7 = GET_WEAPON_FROM_HAND( sub_1522(), 1, 0 );
                        sub_1773( "Waiting for left hand weapon to be un-holstered." );
                    }
                    WAIT( 0 );
                }
            }
        }
    }
    return;
}

void sub_50541(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( iParam0->_fU0, 0 );
    }
    return;
}

int sub_50877()
{
    if (sub_44651( l_U998 ))
    {
        return 1;
    }
    if ((IS_PED_DEAD( l_U637[6]._fU0 )) AND (IS_PED_DEAD( l_U637[3]._fU0 )))
    {
        return 1;
    }
    return 0;
}

void sub_51070(unknown uParam0)
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I]._fU0 )))
        {
            Result++;
        }
    }
    return Result;
}

void sub_51280()
{
    sub_1773( "[MSWW]### stad_tower P_SETUP_UPPER_LEVEL_ENEMIES" );
    sub_22868( ref l_U1019[0], -10.00622000, -86.13246000, 47.21787000, 270, g_U652, -1995587292, g_U2389, 5, 10, 0, 1194438308, 0 );
    sub_22868( ref l_U1019[1], 0.59906100, -83.65701000, 47.24979000, 270, g_U652, 122952939, g_U2389, 5, 20, 0, 1194438308, 0 );
    sub_22868( ref l_U1019[2], 0.47706000, -84.82043000, 47.24979000, 270, g_U652, 1525213267, g_U2389, 5, 20, 0, 1194438308, 0 );
    sub_23577( ref l_U1019, "UPPER_LEVEL", ref l_U1152, 1.00000000, 0, 0 );
    sub_43767( ref l_U1019, 0, -1 );
    SET_PED_USES_DYING_ANIM( l_U1019[0]._fU0, 0 );
    SET_PED_USES_DYING_ANIM( l_U1019[1]._fU0, 0 );
    SET_PED_USES_DYING_ANIM( l_U1019[2]._fU0, 0 );
    SET_PED_ALLOWED_TO_KNEEL_AND_FIRE( l_U1019[1]._fU0, 0 );
    sub_26037( ref l_U1019[1], "GenCover", "E01B1858_A5510DA3_Corner2" );
    sub_26037( ref l_U1019[2], "GenCover", "E01B1858_A5510DA3_Popover3" );
    return;
}

void sub_51853(boolean bParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;

    if (bParam0)
    {
        sub_1467( "[STATE]", "Entering progression state STATE_LADDER_CLIMB_NIS_2.", 0 );
        BULLET_CAMERA_PRELOAD_TEXT_BINK( "S_STAD_MPM", 1 );
    }
    sub_51969( ref l_U1019, 0, 0, 0 );
    if (sub_45478( ref l_U553, 0 ))
    {
        sub_52378();
    }
    if (NOT l_U1158)
    {
        if (((sub_51070( ref l_U1019 )) < 2) || (sub_45032( "X", "Less", 9.00000000 )))
        {
            sub_46263( ref l_U1019[1] );
            sub_50541( ref l_U1019[2] );
            sub_46343( ref l_U1019[2], 1 );
            l_U1158 = 1;
        }
    }
    if (NOT l_U1159)
    {
        if (sub_45032( "X", "Less", 4.00000000 ))
        {
            sub_46263( ref l_U1019[2] );
            l_U1159 = 1;
        }
    }
    if (sub_45478( ref l_U574, 0 ))
    {
        sub_9982( "TT 2ndCW Fall: PLAYER HAS HIT tbPlayerFallHack" );
        SET_PED_HEALTH( sub_1522(), 0, 0 );
        sub_9982( "TT 2ndCW Fall: KILL DONE" );
    }
    if (sub_44651( l_U616 ))
    {
        sub_52839( 0 );
    }
    else
    {
        sub_52839( 1 );
    }
    if (NOT l_U1161)
    {
        if ((sub_51070( ref l_U1019 )) < 1)
        {
            l_U1161 = 1;
            AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_2", "", 0, 7000, -1, -1082130432, 0 );
        }
    }
    if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND ((sub_51070( ref l_U1019 )) < 1)))
    {
        if (sub_53143( ref l_U469, ref l_U448, 1, 0 ))
        {
            sub_9982( "PLAYER IS IN MPM START TRIGGER" );
            PLAY_IMAGEFX( "GAMMA_SATURATION_COLOR_ZOOM_1", 4, 1 );
            sub_35778( ref l_U126, 150 );
        }
        if (sub_21458( ref l_U126 ))
        {
            l_U77 = 7;
        }
        if (sub_45478( ref l_U616, 0 ))
        {
            sub_37215( ref l_U1917 );
            sub_37297( 1, sub_1522(), "MAX", ref l_U1917, 2, 0 );
            sub_37297( 2, sub_1522(), "PASSOS", ref l_U1917, 2, 0 );
            sub_46920( "SSTD_ACTL", ref l_U1917, 8, 1 );
            sub_35778( ref l_U1927, 12500 );
        }
        if (sub_44651( l_U616 ))
        {
            if (sub_21458( ref l_U1927 ))
            {
                sub_37297( 1, sub_1522(), "PASSOS", ref uVar3, 2, 0 );
                sub_46920( "SSTD_JTFR", ref uVar3, 8, 1 );
                sub_35778( ref l_U1927, 7500 );
            }
        }
    }
    return;
}

void sub_51969(unknown uParam0, boolean bParam1, unknown uParam2, unknown uParam3)
{
    int I;

    if ((sub_51070( uParam0 )) == 1)
    {
        for ( I = 0; I < (uParam0^); I++ )
        {
            if (sub_52019( (uParam0^)[I]._fU0, 1 ))
            {
                if (bParam1)
                {
                    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, uParam2 );
                }
                BULLET_CAMERA_TRACK_UNTIL_GROUNDED( uParam3 );
                return (uParam0^)[I];
            }
        }
    }
    return g_U671;
}

int sub_52019(unknown uParam0, boolean bParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        if (bParam1)
        {
            if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( uParam0 )))
            {
                sub_9982( "MAL_SetCanTriggerBulletCam: Ped is not able to trigger BC, adding" );
                SET_PED_CAN_TRIGGER_BULLET_CAM( uParam0, bParam1 );
                return 1;
            }
        }
        else if (GET_PED_CAN_TRIGGER_BULLET_CAM( uParam0 ))
        {
            sub_9982( "MAL_SetCanTriggerBulletCam turning off BC" );
            SET_PED_CAN_TRIGGER_BULLET_CAM( uParam0, bParam1 );
            return 1;
        }
    }
    return 0;
}

void sub_52378()
{
    sub_1773( "[MSWW]### stad_tower P_UPPER_LEVEL_FIGHT started" );
    sub_43899( ref l_U1019[0], 2.79474900, -86.19303000, 47.21787000, 1092616192, 1101004800 );
    sub_46343( ref l_U1019[1], 0 );
    sub_50541( ref l_U1019[1] );
    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        ENABLE_PED_JUMPING( sub_1522(), 0 );
    }
    return;
}

void sub_52839(boolean bParam0)
{
    if ((l_U1582) AND (NOT bParam0))
    {
        sub_1773( "[MSWW]### Disabling Shootdodge" );
        l_U1582 = 0;
        SET_PLAYER_CAN_USE_SHOOTDODGE( sub_1544(), 0 );
    }
    else if ((NOT l_U1582) AND (bParam0))
    {
        sub_1773( "[MSWW]### Enabling Shootdodge" );
        l_U1582 = 1;
        SET_PLAYER_CAN_USE_SHOOTDODGE( sub_1544(), 1 );
    }
    return;
}

int sub_53143(int iParam0, unknown uParam1, boolean bParam2, boolean bParam3)
{
    if ((sub_45478( iParam0, 0 )) == 1)
    {
        if (NOT bParam3)
        {
            SET_PED_FORCED_TO_WALK( sub_1522(), 1 );
        }
        if (NOT bParam2)
        {
            SET_PLAYER_CAN_USE_SHOOTDODGE( sub_1544(), 0 );
        }
    }
    if ((NOT (sub_44651( (iParam0^) ))) AND (iParam0->_fU64))
    {
        iParam0->_fU64 = 0;
        if (NOT bParam3)
        {
            SET_PED_FORCED_TO_WALK( sub_1522(), 0 );
        }
        if (NOT bParam2)
        {
            SET_PLAYER_CAN_USE_SHOOTDODGE( sub_1544(), 1 );
        }
    }
    if (sub_45478( uParam1, 0 ))
    {
        return 1;
    }
    return 0;
}

void sub_53647(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (uParam2^))
    {
        sub_9982( "MAL_LoadScriptStreamAsync" );
        sub_1773( uParam0 );
        (uParam2^) = LOAD_SCRIPT_STREAM( uParam0, uParam1 );
        if ((uParam2^))
        {
            sub_9982( "MAL_LoadScriptStreamAsync DONE LOADING!" );
        }
    }
    return (uParam2^);
}

void sub_53950(int iParam0, unknown uParam1)
{
    if (NOT (sub_53964( (iParam0^) )))
    {
        ;
    }
    else if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (iParam0->_fU8 == g_U6[iParam0->_fU4])
        {
            STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
        }
    }
    return;
}

boolean sub_53964(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

void sub_54138()
{
    I_SEQUENCE_UNREGISTER_ENTITY( ref g_U2580, "stad_mpm_player" );
    sub_28766( 1 );
    if ((IS_PED_DEAD( sub_1522() )) == 0)
    {
        PED_ACTION_TREE_PLAY_NODE( sub_1522(), "Global/Player/PlayerRoot/PLAYER_INITIALIZE_LOCO" );
    }
    sub_26213();
    l_U1202 = 1;
    l_U77 = 7;
    return;
}

void sub_54298()
{
    switch (l_U1202)
    {
        case 0: break;
        case 1:
        sub_1467( "SP", "Tower MPM has started...", "###" );
        sub_36205( 1, 0, 0, 0 );
        l_U1258 = 0;
        sub_54425( 1, 1 );
        sub_54553();
        sub_55540();
        sub_49099( l_U1162, l_U1281, 0 );
        FREEZE_PED_POSITION( sub_1522(), 0 );
        sub_55742();
        STOP_SCRIPT_STREAM( 0 );
        PLAY_SCRIPT_STREAM_FRONTEND( 1 );
        DISPLAY_HUD( 0 );
        ENABLE_CROSSHAIR( 0 );
        sub_56000();
        WAIT( 0 );
        sub_49099( sub_1522(), l_U1260, l_U1263 );
        CAMERA_PLAY_ANIMATED( "LEVEL_S_STAD_MPM", "LSTAD_MPM_PSTL_MPED_CAM", 0, g_U649, 0, 0, 0 );
        FREEZE_TIME_OF_DAY( 0, 0 );
        SET_WEATHER_TYPE_NOW_PERSIST( "SUNNY_WINDY" );
        CLEAR_TIMECYCLE_MODIFIER();
        SET_TIMECYCLE_MODIFIER( "BULLET_TIME_STAD_DARK" );
        l_U1202 = 2;
        sub_9982( "MOVING TO MPM_STATE_WAIT_FOR_BULLET_CAM" );
        break;
        case 2:
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            sub_9982( "STAD MPM: BULLET SCENE ACTIVE!" );
            sub_35778( ref l_U1213, l_U1280 );
            sub_35778( ref l_U1204, l_U1279 );
            sub_35778( ref l_U1222, 5030 );
            sub_35778( ref l_U1231, 6755 );
            sub_35778( ref l_U1240, 7543 );
            sub_35778( ref l_U1249, 8287 );
            SET_CAMERA_OVERRIDE( "S_STAD_PRONE_AIM_CAMERA", "", 0, 1, 1 );
            WAIT( 0 );
            SET_CAM_SIDE_LEFT( 1 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( l_U1277, 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( l_U1278, 1065353216, 0 );
            if (NOT sub_56535())
            {
                DO_SCREEN_FADE_IN( 0 );
            }
            AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_2", "", 0, 7000, -1, -1082130432, 0 );
            l_U1202 = 3;
        }
        break;
        case 3:
        if (sub_21458( ref l_U1222 ))
        {
            if (GET_ADRENALINE_AMT() < 0.10000000)
            {
                SET_ADRENALINE_AMT( 0.10000000 );
            }
            ACTIVATE_BULLET_TIME( 0, 1065353216, 1 );
        }
        if (sub_21458( ref l_U1231 ))
        {
            DEACTIVATE_BULLET_TIME( 1, 0 );
        }
        if (sub_21458( ref l_U1240 ))
        {
            if (GET_ADRENALINE_AMT() < 0.10000000)
            {
                SET_ADRENALINE_AMT( 0.10000000 );
            }
            ACTIVATE_BULLET_TIME( 0, 1065353216, 1 );
        }
        if (sub_21458( ref l_U1249 ))
        {
            DEACTIVATE_BULLET_TIME( 1, 0 );
        }
        if ((sub_56996()) AND (l_U1258 == 0))
        {
            sub_1467( "SP", "Holstering Weapon", "###" );
            sub_54425( 0, 0 );
            l_U1258 = 1;
        }
        if ((sub_21458( ref l_U1213 )) == 1)
        {
            sub_35778( ref l_U1682, l_U1691 );
            sub_35778( ref l_U1692, l_U1701 );
            sub_35778( ref l_U1702, l_U1711 );
            sub_35778( ref l_U1712, l_U1721 );
            sub_35778( ref l_U1722, l_U1731 );
            sub_35778( ref l_U1732, l_U1741 );
        }
        if ((sub_21458( ref l_U1682 )) == 1)
        {
            START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_LightFx_01_S", l_U1656, 0, 0, 0, l_U1742 );
        }
        if ((sub_21458( ref l_U1692 )) == 1)
        {
            START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_LightFx_02_S", l_U1659, 0, 0, 0, l_U1742 );
            START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_LightFx_01_S", l_U1662, 0, 0, 0, l_U1742 );
        }
        if ((sub_21458( ref l_U1702 )) == 1)
        {
            START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_LightFx_03_S", l_U1665, 0, 0, 0, l_U1742 );
            START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_LightFx_04_S", l_U1665, 0, 0, 0, l_U1742 );
            START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_LightFx_03_S", l_U1668, 0, 0, 0, l_U1742 );
            START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_LightFx_04_S", l_U1668, 0, 0, 0, l_U1742 );
        }
        if ((sub_21458( ref l_U1712 )) == 1)
        {
            START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_LightFx_01_S", l_U1671, 0, 0, 0, l_U1742 );
        }
        if ((sub_21458( ref l_U1722 )) == 1)
        {
            START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_LightFx_01_S", l_U1674, 0, 0, 0, l_U1742 );
        }
        if ((sub_21458( ref l_U1732 )) == 1)
        {
            START_PARTICLE_FX_NON_LOOPED_AT_COORD( "Stad_MPM_LightFx_05_S", l_U1677, 0, 0, 0, l_U1742 );
        }
        if ((sub_21458( ref l_U1204 )) == 1)
        {
            sub_57820( ref l_U1186 );
            sub_33830();
        }
        if ((GET_BULLET_CAMERA_MARKER( l_U1203 )) == 19)
        {
            if (DOES_PICKUP_EXIST( l_U1186 ))
            {
                REMOVE_PICKUP( l_U1186 );
            }
            REMOVE_ALL_PICKUPS_AND_PLACEMENTS_OF_TYPE( GET_PICKUP_TYPE_FROM_WEAPON_TYPE( -2075384407 ) );
        }
        if (sub_58010())
        {
            sub_1467( "SP", "Drawing Weapon", "###" );
            sub_58111();
            SET_CAM_SIDE_LEFT( 1 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( l_U1277, 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( l_U1278, 1065353216, 0 );
            CAMERA_ANIMATED_STOP( 1, 1 );
            l_U1202 = 4;
        }
        sub_53647( "S_STAD_MPM_FAIL", 0, ref l_U1743 );
        break;
        case 4: break;
    }
    return;
}

void sub_54425(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;

    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        PED_FINISH_ACTION_INTENTION( sub_1522(), 47 );
        uVar4 = GET_WEAPON_FROM_HAND( sub_1522(), uParam0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            uVar5 = GET_WEAPON_TYPE( uVar4 );
            REMOVE_PED_WEAPON( sub_1522(), uVar4 );
            sub_14475( sub_1522(), uVar5, uParam1, 25000, 0 );
        }
    }
    return;
}

void sub_54553()
{
    sub_1773( "[MSWW]### stad_tower P_START_MPM_SNIPER started" );
    sub_54618();
    if ((NOT (IS_PED_DEAD( sub_1522() ))) AND (NOT (IS_PED_DEAD( l_U1162 ))))
    {
        CLEAR_PED_TASKS( l_U1162 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U1162, 1 );
    }
    sub_1773( "[MSWW]### stad_tower P_START_MPM_SNIPER ended" );
    return;
}

void sub_54618()
{
    sub_1773( "[MSWW]### stad_tower P_SETUP_MPM_SNIPER" );
    sub_23607( ref l_U1179, 1.00000000, 0 );
    l_U1162 = sub_18554( ref l_U1162, ref l_U1163, 1, 1, 0 );
    l_U1185 = sub_17002( l_U1162, -2075384407, 25000, 0, 0 );
    if (NOT (IS_PED_DEAD( l_U1162 )))
    {
        SET_PED_PROP_INDEX( l_U1162, 0, 1, 0, 255 );
        SET_PED_COMBAT_MOVEMENT( l_U1162, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U1162, 1 );
        TASK_STAND_STILL( l_U1162, 9999999 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U1162, 1 );
        ENABLE_WEAPON_ATTACHMENT( l_U1185, 13, 1 );
        TOGGLE_WEAPON_ATTACHMENT( l_U1185, 13, 1 );
        SET_PED_COMPONENT_VARIATION( l_U1162, 0, 2, 0, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U1162, 1 );
        STOP_PED_SPEAKING( l_U1162, 1 );
        SET_PED_AS_ONE_SHOT_KILL( l_U1162, 1 );
        sub_54942( l_U1162, "PIST_CUSTOM_01_STAD_MPM" );
        sub_52019( l_U1162, 1 );
        SET_BULLET_CAM_PREF( l_U1162, "PIST_CUSTOM_01_STAD_MPM", "PIST_CUSTOM_01_STAD_MPM", "PIST_CUSTOM_01_STAD_MPM", 0, 1, 0, 0, 0, 0, 0, 0, 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
        SET_PED_NAME_DEBUG( l_U1162, "piTowerSniper_0" );
        SET_PED_VALIDATE_BULLET_CAM_HIT( l_U1162, 0 );
    }
    sub_20384( ref l_U1162, "M3_CP_S3B_Avg" );
    sub_1773( "[MSWW]### stad_tower P_SETUP_MPM_SNIPER ended" );
    return;
}

void sub_54942(unknown Result, unknown uParam1)
{
    if (sub_52019( Result, 1 ))
    {
        sub_9982( "MAL_SetCanTriggerBulletCamWithSpecificCam has added bullet cam, moving on" );
        sub_1773( uParam1 );
        if (NOT (IS_PED_DEAD( Result )))
        {
            sub_9982( "MAL_SetCanTriggerBulletCamWithSpecificCam setting BC pref" );
            SET_BULLET_CAM_PREF( Result, uParam1, uParam1, uParam1, 0, 1, 0, 0, 0, 0, 0, 0, 0 );
            return Result;
        }
    }
    return nil;
}

void sub_55540()
{
    I_SEQUENCE_UNREGISTER_ENTITY( ref g_U2580, "stad_mpm_light" );
    sub_10014( l_U1334 );
    l_U1334 = sub_12161( g_U2435, l_U1335, 0, 0, 0, 0, 1, 0 );
    while (NOT (DOES_OBJECT_EXIST( l_U1334 )))
    {
        WAIT( 0 );
        sub_9982( "WAITING FOR THE GODSDAMNED LIGHT RIG" );
    }
    sub_10014( l_U1333 );
    return;
}

void sub_55742()
{
    sub_4869( ref g_U2580, "LEVEL_S_STAD_MPM", "/LEVEL/S_STAD/s_stad_mpm.act", "/Global/S_STAD_MPM/MPM_Root", 1 );
    I_SEQUENCE_REGISTER_ENTITY( ref g_U2580, "stad_mpm_player", sub_1522(), 0 );
    I_SEQUENCE_REGISTER_ENTITY( ref g_U2580, "stad_mpm_sniper", l_U1162, 0 );
    I_SEQUENCE_REGISTER_ENTITY( ref g_U2580, "stad_mpm_light", l_U1334, 1 );
    I_SEQUENCE_START( ref g_U2580 );
    return;
}

void sub_56000()
{
    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        SET_PED_COLLISION( sub_1522(), 0 );
        SET_PED_INVINCIBLE( sub_1522(), 1 );
        SET_PED_PROOFS( sub_1522(), 1, 1, 1, 1, 1 );
        SET_PED_CONSUMING_AMMO( sub_1522(), 0 );
        SET_PLAYER_CAN_CANCEL_SHOOTDODGE( 0 );
    }
    return;
}

int sub_56535()
{
    if (l_U75)
    {
        sub_1467( "CO", "F_IMAGEFX_FADE_IN: IMAGEFX START", 0 );
        START_PANEL_WIPE( 0, 6 );
        PLAY_IMAGEFX( "BULLETCAM_IMPACT", 3, 1 );
        PLAY_IMAGEFX( "BLACK_FADE_UP_FAST_01", 3, 1 );
        DO_SCREEN_FADE_IN( 0 );
        l_U75 = 0;
        return 1;
        break;
    }
    sub_1467( "CO", "F_IMAGEFX_FADE_IN: NORMAL START", 0 );
    return 0;
}

int sub_56996()
{
    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        if ((PED_GET_ACTION_INTENTION_STATUS( sub_1522(), 47 )) == 3)
        {
            return 1;
        }
    }
    return 0;
}

void sub_57820(unknown uParam0)
{
    unknown uVar3;

    if ((NOT (IS_PED_DEAD( l_U1162 ))) AND (DOES_PED_EXIST( l_U1162 )))
    {
        uVar3 = GET_WEAPON_FROM_HAND( l_U1162, 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            TOGGLE_WEAPON_ATTACHMENT( uVar3, 13, 0 );
            ENABLE_WEAPON_ATTACHMENT( uVar3, 13, 0 );
            (uParam0^) = SET_PED_DROPS_WEAPON( l_U1162, uVar3 );
        }
    }
    return;
}

int sub_58010()
{
    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        if ((PED_GET_ACTION_INTENTION_STATUS( sub_1522(), 48 )) == 3)
        {
            return 1;
        }
    }
    return 0;
}

void sub_58111()
{
    unknown uVar2;
    unknown uVar3;

    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        PED_FINISH_ACTION_INTENTION( sub_1522(), 48 );
        uVar2 = GET_WEAPON_FROM_HOLSTER( sub_1522(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar3 = GET_WEAPON_TYPE( uVar2 );
            REMOVE_PED_WEAPON( sub_1522(), uVar2 );
            sub_15107( sub_1522(), uVar3, 25000, 0, 0 );
        }
        else
        {
            sub_15107( sub_1522(), 68019059, 25000, 0, 0 );
        }
    }
    return;
}

void sub_58419(boolean bParam0)
{
    if (bParam0)
    {
        sub_1467( "[STATE]", "Entering progression state STATE_SHOOT_SNIPER.", 0 );
        REMOVE_ALL_PICKUPS_AND_PLACEMENTS_OF_TYPE( 465100219 );
        sub_58513();
        DISPLAY_HUD( 1 );
        ENABLE_CROSSHAIR( 1 );
        PULSE_CROSSHAIR( 1 );
        SET_CROSSHAIR_PULSE();
        if (GET_ADRENALINE_AMT() < 0.10000000)
        {
            SET_ADRENALINE_AMT( 0.10000000 );
        }
        ACTIVATE_BULLET_TIME( 0, 1065353216, 1 );
        sub_35778( ref l_U1414, l_U1423 );
        sub_58775( 1 );
    }
    if (IS_ANIMATED_CAMERA_PLAYING())
    {
        sub_9982( "IS_ANIMATED_CAMERA_PLAYING" );
    }
    if (IS_BULLET_CAMERA_ACTIVE() == 1)
    {
        l_U77 = 10;
    }
    else
    {
        sub_53647( "S_STAD_MPM_FAIL", 0, ref l_U1743 );
    }
    if ((sub_21458( ref l_U1414 )) == 1)
    {
        DEACTIVATE_BULLET_TIME( 1, 0 );
        l_U77 = 9;
    }
    return;
}

void sub_58513()
{
    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        SET_PED_COLLISION( sub_1522(), 1 );
        SET_CAMERA_OVERRIDE( "S_STAD_PRONE_AIM_CAMERA", "", 0, 1, 1 );
        SET_PLAYER_FORCED_AIM( sub_1544(), 1, 0 );
        PLAYER_SET_AIM_MODE( 1 );
        SET_PLAYER_CONTROL( sub_1544(), 0, 0 );
        REENABLE_PLAYER_INPUT( 4 );
        REENABLE_PLAYER_INPUT( 29 );
        REENABLE_PLAYER_INPUT( 14 );
        REENABLE_PLAYER_INPUT( 15 );
        REENABLE_PLAYER_INPUT( 16 );
        REENABLE_PLAYER_INPUT( 17 );
    }
    return;
}

void sub_58775(boolean bParam0)
{
    sub_9982( "P_TECH_LIGHTS_ON_LLOD" );
    sub_10014( g_U3948 );
    sub_10014( g_U3949 );
    sub_10014( g_U3950 );
    sub_10014( g_U3951 );
    sub_10014( g_U3952 );
    if (bParam0)
    {
        g_U3952 = sub_12161( g_U2408, 0.00100000, 77.00000000, 42.50000000, 0, 0, 180, 0, 0, 1 );
    }
    else
    {
        g_U3952 = sub_12161( g_U2408, g_U3965, 0, 0, 0, 0, 0, 1 );
    }
    if (DOES_OBJECT_EXIST( g_U3952 ))
    {
        FREEZE_OBJECT_POSITION( g_U3952, 1 );
    }
    return;
}

void sub_59157(boolean bParam0)
{
    if (bParam0)
    {
        sub_36205( 1, 0, 0, 0 );
        DISPLAY_HUD( 0 );
        ENABLE_CROSSHAIR( 0 );
        sub_59199();
        sub_37603( ref l_U1376, l_U1407, l_U1410, 45, l_U1413 );
        sub_37811( ref l_U1376 );
        sub_59467( sub_59431(), 1.00000000 );
        PLAY_SCRIPT_STREAM_FRONTEND( 0 );
    }
    if ((sub_21458( ref l_U1376._fU48 )) == 1)
    {
        I_SEQUENCE_UNREGISTER_ENTITY( ref g_U2580, "stad_mpm_player" );
        I_SEQUENCE_UNREGISTER_ENTITY( ref g_U2580, "stad_mpm_light" );
        sub_10014( l_U1334 );
        l_U1334 = sub_12161( -115644820, l_U1335, g_U649, 0, 0, 0 );
        FREEZE_OBJECT_POSITION( l_U1334, 1 );
        sub_37603( ref l_U1338, l_U1369, l_U1372, 45, l_U1375 );
        sub_37811( ref l_U1338 );
        sub_59709( "STAD_MPM_SCRIPTED_FAIL_FX", 0 );
        if ((IS_PED_DEAD( sub_1522() )) == 0)
        {
            CLEAR_PED_TASKS_IMMEDIATELY( sub_1522() );
            PED_ACTION_TREE_PLAY_NODE( sub_1522(), "/Global/Player/PlayerLoco" );
        }
        sub_35778( ref l_U1434, l_U1443 );
    }
    if ((sub_21458( ref l_U1434 )) == 1)
    {
        sub_35778( ref l_U1424, l_U1433 );
        sub_35778( ref l_U1592, l_U1601 );
        sub_32889();
    }
    if (((sub_21458( ref l_U1592 )) == 0) AND (l_U1592._fU20 == 1))
    {
        DRAW_RECT( 0.50000000, 0.50000000, 1, 1, 255, 255, 255, 255 );
    }
    if ((sub_21458( ref l_U1424 )) == 1)
    {
        l_U1444 = 1;
    }
    if (l_U1444 == 1)
    {
        if ((sub_27019( 0 )) == 1)
        {
            sub_60145();
            sub_28406( "STAD_MPM_SCRIPTED_FAIL_FX" );
            l_U77 = 7;
            l_U1444 = 0;
            sub_60754( 0, 0, 0, -859915232, -859915232, 0 );
            ENABLE_MPM( 0 );
            ENABLE_ALL_ADRENALINE( 1 );
        }
    }
    return;
}

void sub_59199()
{
    if ((NOT (IS_PED_DEAD( l_U1162 ))) AND ((DOES_PED_EXIST( l_U1162 )) == 1))
    {
        FREEZE_PED_POSITION( l_U1162, 1 );
        SET_PED_CAN_TRIGGER_BULLET_CAM( l_U1162, 0 );
        SET_PED_INVINCIBLE( l_U1162, 1 );
        SET_PED_PROOFS( l_U1162, 1, 1, 1, 1, 1 );
        sub_17002( l_U1162, -378310276, 25000, 0, 0 );
        PED_ACTION_TREE_PLAY_NODE( l_U1162, "/Global/S_STAD_MPM/MPM_Root/SNIPER/SNIPER_GRENADE" );
    }
    return;
}

string sub_59431()
{
    return "HAND_SHAKE";
}

void sub_59467(unknown uParam0, unknown uParam1)
{
    SHAKE_CAM( GET_RENDERING_CAM(), uParam0, uParam1 );
    return;
}

void sub_59709(unknown uParam0, boolean bParam1)
{
    sub_28489( ref l_U76 );
    l_U76 = CREATE_CAM( "DEFAULT_BULLET_CAMERA", 1 );
    SETUP_BULLET_CAMERA_SCENE( l_U76, uParam0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, "", "" );
    if (bParam1)
    {
        RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
    }
    return;
}

void sub_60145()
{
    unknown uVar2;
    unknown uVar3;

    sub_60156( 0 );
    l_U1743 = 0;
    I_SEQUENCE_UNREGISTER_ENTITY( ref g_U2580, "stad_mpm_player" );
    I_SEQUENCE_UNREGISTER_ENTITY( ref g_U2580, "stad_mpm_sniper" );
    I_SEQUENCE_UNREGISTER_ENTITY( ref g_U2580, "stad_mpm_light" );
    sub_28871( ref g_U2580, 1 );
    sub_10014( l_U1454 );
    sub_10014( l_U1458 );
    sub_10014( l_U1462 );
    sub_10014( l_U1466 );
    sub_10014( l_U1450 );
    sub_10014( l_U1470 );
    sub_10014( l_U1474 );
    sub_10014( l_U1483 );
    sub_10014( l_U1488 );
    if ((IS_PED_DEAD( sub_1522() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND( sub_1522(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar3 = GET_WEAPON_TYPE( uVar2 );
            REMOVE_ALL_PED_WEAPONS( sub_1522() );
            sub_15107( sub_1522(), uVar3, 25000, 0, 0 );
        }
        else
        {
            REMOVE_ALL_PED_WEAPONS( sub_1522() );
            sub_15107( sub_1522(), 68019059, 25000, 0, 0 );
        }
    }
    sub_11901();
    STOP_SCRIPT_STREAM( 1 );
    sub_5183( "S_STAD_MPM", 1, 1 );
    if ((DOES_PICKUP_EXIST( l_U1186 )) == 1)
    {
        REMOVE_PICKUP( l_U1186 );
    }
    REMOVE_ALL_PICKUPS_AND_PLACEMENTS_OF_TYPE( GET_PICKUP_TYPE_FROM_WEAPON_TYPE( -2075384407 ) );
    if (l_U1612 != -1)
    {
        REMOVE_PARTICLE_FX( l_U1612 );
    }
    if (l_U1613 != -1)
    {
        REMOVE_PARTICLE_FX( l_U1613 );
    }
    return;
}

void sub_60156(unknown uParam0)
{
    if ((IS_SCREEN_FADING_OUT() == 0) AND (IS_SCREEN_FADED_OUT() == 0))
    {
        DO_SCREEN_FADE_OUT( uParam0 );
        while (IS_SCREEN_FADED_OUT() == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_60754(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, float fParam4, unknown uParam5)
{
    SET_CAM_SIDE_LEFT( uParam2 );
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam3, 1065353216, 0 );
    }
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( fParam4, 1065353216, 0 );
    }
    RENDER_SCRIPT_CAMS( 0, uParam1, uParam0, uParam5 );
    return;
}

void sub_61005(boolean bParam0)
{
    if (bParam0)
    {
        sub_61043( "03_05_stad_concat", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_2", "", 0, 3000, -1, -1082130432, 0 );
    }
    if (((IS_BULLET_CAMERA_RUNNING( 0 )) == 0) AND (((IS_PED_DEAD( l_U1162 )) == 1) AND ((DOES_PED_EXIST( l_U1162 )) == 1)))
    {
        if (IS_ARCADE_MODE_ACTIVE())
        {
            DISPLAY_ARCADE_MODE_LEVEL_END( "s_nyc" );
            while (true)
            {
                WAIT( 0 );
            }
        }
        else
        {
            ENABLE_MPM( 0 );
            ENABLE_ALL_ADRENALINE( 1 );
            sub_28766( 0 );
            sub_61459();
            sub_63451();
            l_U1187 = 1;
        }
    }
    return;
}

void sub_61043(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                WAIT( 0 );
            }
        }
    }
    return;
}

void sub_61459()
{
    sub_1773( "[MSWW]### stad_tower P_UNLOAD_TOWER_ASSETS" );
    sub_61524( g_U2389 );
    sub_61524( g_U2420 );
    sub_61524( g_U2421 );
    sub_61524( g_U2422 );
    sub_61524( g_U2423 );
    sub_61524( g_U2424 );
    sub_61524( g_U2425 );
    sub_61524( g_U2426 );
    sub_61524( g_U2427 );
    sub_61524( g_U2428 );
    sub_61524( g_U2429 );
    sub_61524( g_U2430 );
    sub_61524( g_U2431 );
    sub_61524( g_U2432 );
    sub_61524( g_U2433 );
    sub_61524( g_U2419 );
    sub_61524( g_U2418 );
    sub_61524( g_U2435 );
    sub_61524( g_U2434 );
    sub_61524( -714224954 );
    sub_61524( 1456031900 );
    sub_61524( 1549519688 );
    sub_61524( 2106998919 );
    sub_61524( -522142102 );
    sub_61524( 433266513 );
    sub_61524( -463194506 );
    sub_61524( -115644820 );
    sub_61524( -441856368 );
    sub_61524( 550198901 );
    sub_61524( 946282352 );
    sub_61524( 568669855 );
    sub_61524( -1941765637 );
    sub_61524( 1148368229 );
    sub_61524( g_U849 );
    sub_29583( "LEVEL_S_STAD_CP_09" );
    sub_62017( 1 );
    sub_1773( "[MSWW]### stad_tower P_UNLOAD_TOWER_ASSETS ended" );
    return;
}

void sub_61524(unknown uParam0)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 1)
    {
        SET_MODEL_AS_NO_LONGER_NEEDED( uParam0 );
    }
    else
    {
        sub_1773( "[SP]### ERROR! (UnloadModel) Trying to unload a model that isn't in the img! ###" );
    }
    return;
}

void sub_62017(boolean bParam0)
{
    if (NOT bParam0)
    {
        sub_62059( "PLGE_RIFLE_CROUCH", ref g_U1354 );
        sub_62059( "PLGE_PSTL_CROUCH", ref g_U1354 );
        sub_62059( "PLGE_RIFLE_CORE", ref g_U1354 );
        sub_62059( "PLGE_PSTL_CORE", ref g_U1354 );
        sub_62059( "PLGE_RIFLE_CORE_RELOAD", ref g_U1354 );
        sub_62059( "PLGE_PSTL_CORE_RELOAD", ref g_U1354 );
        sub_62059( "PLGE_RIFLE_HANDSIG", ref g_U1354 );
        sub_62059( "PLGE_PSTL_HANDSIG", ref g_U1354 );
        sub_62059( "PLGE_RIFLE_ACTIONS", ref g_U1354 );
        sub_62059( "PLGE_PSTL_ACTIONS", ref g_U1354 );
        sub_62059( "PLGE_RIFLE_KNEE", ref g_U1354 );
        sub_62059( "PLGE_PSTL_KNEE", ref g_U1354 );
        sub_62059( "PLGE_RIFLE_COVER", ref g_U1354 );
        sub_62059( "PLGE_PSTL_COVER", ref g_U1354 );
        sub_62059( "PLGE_RIFLE_REACT", ref g_U1354 );
        sub_62059( "PLGE_PSTL_REACT", ref g_U1354 );
        sub_62059( "PLGE_RIFLE_COVER_EXIT", ref g_U1354 );
        sub_62059( "PLGE_PSTL_COVER_EXIT", ref g_U1354 );
        sub_62059( "PLGE_PSTL_FULLBODY", ref g_U1354 );
    }
    else
    {
        sub_29583( "PLGE_RIFLE_CROUCH" );
        sub_29583( "PLGE_PSTL_CROUCH" );
        sub_29583( "PLGE_RIFLE_CORE" );
        sub_29583( "PLGE_PSTL_CORE" );
        sub_29583( "PLGE_RIFLE_CORE_RELOAD" );
        sub_29583( "PLGE_PSTL_CORE_RELOAD" );
        sub_29583( "PLGE_RIFLE_HANDSIG" );
        sub_29583( "PLGE_PSTL_HANDSIG" );
        sub_29583( "PLGE_RIFLE_ACTIONS" );
        sub_29583( "PLGE_PSTL_ACTIONS" );
        sub_29583( "PLGE_RIFLE_KNEE" );
        sub_29583( "PLGE_PSTL_KNEE" );
        sub_29583( "PLGE_RIFLE_COVER" );
        sub_29583( "PLGE_PSTL_COVER" );
        sub_29583( "PLGE_RIFLE_REACT" );
        sub_29583( "PLGE_PSTL_REACT" );
        sub_29583( "PLGE_RIFLE_COVER_EXIT" );
        sub_29583( "PLGE_PSTL_COVER_EXIT" );
        sub_29583( "PLGE_PSTL_FULLBODY" );
    }
    return;
}

void sub_62059(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_62170( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

int sub_62170(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else if ((uParam1^)[I] == iParam0)
        {
            (uParam1^)[I] = nil;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            Result = I;
        }
        else
        {
            (uParam1^)[I] = nil;
        };;;
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

void sub_63451()
{
    l_U1937 = 1;
    sub_64564( ref l_U79, "03_05_stad_concat", 63491, 63978, 64173, 64454, 250, 0 );
    l_U79._fU4 = 2;
    l_U79._fU60 = 0;
    l_U79._fU100 = g_U853;
    DISABLE_FADE_BETWEEN_SP_LEVELS();
    while (NOT (sub_65027( ref l_U79 )))
    {
        WAIT( 0 );
    }
    DISPLAY_HUD( 0 );
    return;
}

int sub_63491()
{
    l_U1655 = sub_18643( ref l_U1642 );
    if (((IS_PED_DEAD( l_U1655 )) == 0) AND ((DOES_PED_EXIST( l_U1655 )) == 1))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U1655, 1 );
        SET_PERSISTENT_PED_VARIATION( l_U1655, "Pass_Stad_Hat" );
    }
    sub_10014( g_U3704 );
    g_U3705 = sub_63629( 1049690760, -10.46000000, 5.99000000, 0.70000000, 18.00000000, 1, 0, 0 );
    FREEZE_TIME_OF_DAY( 21, 0 );
    sub_38325( ref l_U1744, 776495389, -10.46000000, 5.99000000, 0.70000000, 1, 1 );
    if (NOT (IS_VEHICLE_DEAD( g_U3705 )))
    {
        ATTACH_OBJECT_TO_VEHICLE( l_U1744, g_U3705, 0, g_U649, g_U649 );
    }
    FREEZE_TIME_OF_DAY( 21, 0 );
    SET_WEATHER_TYPE_NOW_PERSIST( "EXTRASUNNY" );
    return 1;
}

void sub_63629(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, int iParam5, unknown uParam6, unknown uParam7)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a vehicle with MUST BE PRELOADED!!!!", 0 );
        sub_1668( uParam0, 1 );
    }
    Result = CREATE_VEHICLE( uParam0, uParam1, uParam4, uParam6, uParam7 );
    if (iParam5 == 1)
    {
        while ((DOES_VEHICLE_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    if (DOES_VEHICLE_EXIST( Result ))
    {
        SET_PETROLTANK_BURN_RATE( Result, 125.00000000 );
    }
    return Result;
}

void sub_63978()
{
    AUD_ENABLE_PRE_BINK_SHUTDOWN( 1 );
    REGISTER_HIDE_ENTITY_AT_POSITION( -677555848, -1.37601000, 44.95269000, -2.00513000 );
    REGISTER_HIDE_ENTITY_AT_POSITION( 214803252, 1.38002000, 44.95055000, -2.00107000 );
    CLEAR_PED_PROP( sub_1522(), 0 );
    REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( sub_1522(), 0, 0 ), "W_PI_Clt1911_Aa_H", 0 );
    REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U1655, "Pass_heli_pilo", 0 );
    REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE( g_U3705, "heli_luxury", 0 );
    return;
}

void sub_64173()
{
    if (l_U79._fU52)
    {
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
        sub_18567( l_U1162 );
        CLEAR_TIMECYCLE_MODIFIER();
        FREEZE_TIME_OF_DAY( 21, 0 );
        SET_WEATHER_TYPE_NOW_PERSIST( "EXTRASUNNY" );
    }
    if (NOT l_U1940)
    {
        if (GET_CUTSCENE_TIME_MS() > 38693)
        {
            l_U1940 = 1;
            CLEAR_PED_PROP( sub_1522(), 3 );
        }
    }
    if (NOT l_U1938)
    {
        if (GET_CUTSCENE_TIME_MS() > 46400)
        {
            AUDIO_MUSIC_SUSPEND( 5000 );
            l_U1938 = 1;
        }
    }
    if (NOT l_U1939)
    {
        if (GET_CUTSCENE_TIME_MS() > 34535)
        {
            SKIP_ROTOR_SHADOW( 1 );
            l_U1939 = 1;
        }
    }
    if ((NOT (IS_VEHICLE_DEAD( g_U3705 ))) AND (GET_CUTSCENE_TIME_MS() > 40318))
    {
        SET_VEHICLE_ENGINE_ON( g_U3705, 1, 1 );
        SET_HELI_BLADES_FULL_SPEED( g_U3705 );
    }
    return;
}

int sub_64454()
{
    SKIP_ROTOR_SHADOW( 0 );
    sub_18567( l_U1655 );
    sub_64487( g_U3705 );
    sub_10014( l_U1744 );
    return 1;
}

void sub_64487(unknown uParam0)
{
    if (IS_VEHICLE_DEAD( uParam0 ))
    {
        ;
    }
    if (DOES_VEHICLE_EXIST( uParam0 ))
    {
        DELETE_VEHICLE( ref uParam0 );
    }
    return;
}

void sub_64564(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    sub_1467( "MSWW", "CutSys_CreateStandaloneCutscene", "###" );
    return sub_64718( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam7, 0, 64641, 64659, 0, 64679, 64697, uParam6 );
}

void sub_64641()
{
    return;
}

int sub_64659()
{
    return 1;
}

void sub_64679()
{
    return;
}

int sub_64697()
{
    return 1;
}

void sub_64718(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

void sub_65027(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
            sub_1467( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
            sub_1467( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                sub_1467( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
            sub_1467( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
            sub_1467( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
            sub_1467( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
            sub_61043( iParam0->_fU0, 0 );
            sub_1467( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
            sub_36205( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
        sub_36205( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
        sub_1467( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                sub_66268( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
        sub_36205( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
            sub_38581( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
        sub_38581( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

void sub_66268(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD( sub_1522() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND( sub_1522(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND( sub_1522(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_1522(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_1522(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_1522(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

void sub_66793()
{
    switch (l_U1936)
    {
        case 0:
        sub_1467( "CCB", "eOldPainless - STATE_CHALLENGE_IDLE", 0 );
        l_U1936 = 1;
        break;
        case 1:
        if (l_U1937)
        {
            if (SCRIPT_VAR_HASH_EXISTS( 1701971384 ))
            {
                SCRIPT_VAR_HASH_SET_INT( 1701971384, 1 );
            }
            else
            {
                sub_1467( "CCB", "The OldPainless script variable is NOT valid!!!", 0 );
            }
            sub_1467( "CCB", "eOldPainless - STATE_CHALLENGE_COMPLETE", 0 );
            l_U1936 = 2;
        }
        break;
        case 2: break;
    }
    return;
}

void sub_67104()
{
    sub_1467( "CCB", "P_STOP_SP_CHALLENGES", 0 );
    sub_1467( "CCB", "Stopping the Stadium context...", 0 );
    END_CONTEXT( "Stadium" );
    return;
}

