void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U58 = 0;
    l_U59 = 0;
    l_U60 = 1500;
    l_U70 = -1;
    l_U71 = {64536, 64536, 64536};
    l_U119 = 0;
    l_U121 = 1;
    l_U122 = 0;
    l_U123 = 0;
    l_U415 = 250;
    l_U420 = {7.45000000, 47.03000000, -60.00000000};
    l_U423 = 3500;
    l_U1028 = {-7.51400000, 17.85200000, -61.17137000};
    l_U1031 = {0.00000000, 0.00000000, 180.00000000};
    l_U1043 = 500;
    l_U1065 = -1;
    l_U1066 = -1;
    sub_429( "SP", "Script s_fashion_MainLobby.sc is starting up...", 0 );
    sub_478();
    l_U119 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
        sub_702();
        sub_9778();
        if (l_U123 == 0)
        {
            sub_9963();
        }
        WAIT( 0 );
    }
    sub_3216( 0 );
    sub_57892();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_fashion_MainLobby" );
    sub_429( "SP", "Script s_fashion_MainLobby.sc is terminating...", 0 );
    return;
}

void sub_429(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    return;
}

void sub_478()
{
    sub_429( "GA", "P_ML_POPULATE_VARIABLE_ARRAYS start", 0 );
    l_U110[0] = g_U720;
    l_U110[1] = -1098942219;
    l_U110[2] = -1585064135;
    l_U110[3] = -1182267595;
    l_U115[0] = 68019059;
    l_U115[1] = 724901397;
    l_U115[2] = -168327769;
    sub_429( "GA", "P_ML_POPULATE_VARIABLE_ARRAYS end", 0 );
    return;
}

void sub_702()
{
    if (g_U723 == 3)
    {
        switch (l_U123)
        {
            case 0:
            if ((l_U122) || ((sub_857()) || (IS_PED_DEAD( sub_784() ))))
            {
                sub_1296();
                SET_GAME_PAUSED( 0 );
                STOP_IMAGEFX( g_U1697, 0 );
                l_U123 = 1;
                sub_429( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if (sub_1428())
            {
                l_U123 = 2;
            }
            else if ((sub_1468( 0 )) == 1)
            {
                l_U123 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD( sub_784() )))
            {
                SET_CAM_VIEW_MODE( 0 );
                if ((g_U724[4]._fU40 != 4) AND (g_U724[4]._fU40 != 0))
                {
                    sub_429( "GA", "Shutting down script for Parking Level 2 checkpoint.", 0 );
                    sub_2935( ref g_U724[4] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U724[4]._fU32 );
                    g_U1264[4] = 0;
                }
                l_U123 = 3;
                sub_429( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
            sub_429( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD( sub_784() ))) AND (NOT (IS_PLAYER_DEAD( sub_806() ))))
            {
                SET_PLAYER_CONTROL( sub_806(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK( sub_784() ))
                {
                    SET_PED_FORCED_TO_WALK( sub_784(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            CAMERA_CLEAR_POINT_AT_TARGET();
            sub_3216( 1 );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( ref g_U1627, 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( ref g_U1627, 0 ), GET_HASH_KEY( ref g_U1571 ) );
            l_U123 = 4;
            sub_429( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
            sub_429( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U74._fU0)
            {
                sub_5562( ref l_U74, sub_784() );
            }
            l_U123 = 5;
            sub_429( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
            sub_429( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U119 = 1;
            l_U122 = 0;
            l_U121 = 0;
            l_U123 = 0;
            sub_429( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

int sub_784()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED( sub_806() );
    }
    return 0;
}

void sub_806()
{
    return GET_PLAYER_ID();
}

int sub_857()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD( sub_784() )))
        {
            SET_PED_FORCED_TO_WALK( sub_784(), 0 );
            SET_PLAYER_FORCED_AIM( sub_806(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE( sub_806(), 1 );
            if ((IS_PED_VISIBLE( sub_784() )) == 0)
            {
                SET_PED_VISIBLE( sub_784(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

void sub_1296()
{
    UI_SET( 15, 2, 1537, "animMainText", 257, 1 );
    return;
}

void sub_1428()
{
    return g_U648;
}

int sub_1468(int iParam0)
{
    iParam0 = 1;
    switch (l_U59)
    {
        case 0:
        if (NOT (sub_1529( ref l_U61 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_784() )))
            {
                l_U60 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
            sub_1639( ref l_U61, l_U60, 1, 1 );
            sub_1775( ref l_U61 );
        }
        if (sub_1895( ref l_U61 ))
        {
            sub_429( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_784() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD( sub_806() )))
            {
                SET_PLAYER_CONTROL( sub_806(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U59 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U59 = 2;
            }
            else
            {
                l_U59 = 3;
            }
        }
        break;
        case 2:
        sub_429( "NS", "Player will QUIT", 0 );
        sub_2382();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
        sub_429( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        sub_2382();
        return 1;
        break;
    }
    return 0;
}

int sub_1529(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_1639(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

void sub_1775(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

int sub_1895(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

void sub_2382()
{
    sub_429( "NS", "P_PostFailRetryCleanup", 0 );
    sub_2432( ref l_U61 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD( sub_806() )))
    {
        SET_PLAYER_CONTROL( sub_806(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U58 = 0;
    l_U58 = l_U58;
    l_U59 = 0;
    return;
}

void sub_2432(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

void sub_2935(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

void sub_3216(boolean bParam0)
{
    sub_429( "GA", "P_CLEANUP_ML start", 0 );
    if (NOT (IS_PLAYER_DEAD( sub_806() )))
    {
        SET_PLAYER_CAN_USE_SHOOTDODGE( sub_806(), 1 );
    }
    if (NOT (IS_PED_DEAD( sub_784() )))
    {
        SET_CAN_ROLL_DODGE( sub_784(), 1 );
    }
    ISEQ_TERMINATE( 36524849 );
    sub_3341( 36524849, ref g_U967 );
    ISEQ_TERMINATE( 1241506505 );
    sub_3341( 1241506505, ref g_U967 );
    ISEQ_TERMINATE( 1565133149 );
    sub_3341( 1565133149, ref g_U967 );
    ISEQ_TERMINATE( 931347920 );
    sub_3341( 931347920, ref g_U967 );
    ISEQ_TERMINATE( -2065237615 );
    sub_3341( -2065237615, ref g_U967 );
    sub_3843( "S_FASHION_CONCIERGE_VIG", ref g_U1168 );
    sub_4042( "S_FASHION_CONCIERGE_VIG", ref g_U1168 );
    sub_4353( l_U1065, 0 );
    sub_4516( ref l_U1065 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_LOBBY", 0 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_PARKING_GARAGE_STAIRS", 0 );
    if ((CUTSCENE_NAMED_IS_LOADING( "01_02_RP_concat" )) || (CUTSCENE_IS_LOADED( "01_02_RP_concat" )))
    {
        CLEAR_NAMED_CUTSCENE( "01_02_RP_concat" );
    }
    if ((CUTSCENE_NAMED_IS_LOADING( "MID_07_RP_conat" )) || (CUTSCENE_IS_LOADED( "MID_07_RP_concat" )))
    {
        CLEAR_NAMED_CUTSCENE( "MID_07_RP_concat" );
    }
    if (bParam0)
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
    UI_SET( 25, 2, 1537, "SPSlotLoader", 1537, "" );
    if (NOT (IS_PED_DEAD( sub_784() )))
    {
        SET_PED_NUM_CHARGERS_OVERRIDE( sub_784(), -1 );
    }
    sub_5015( ref l_U993 );
    sub_5015( ref l_U567 );
    sub_5049( l_U652 );
    sub_5015( ref l_U821 );
    sub_5015( ref l_U764 );
    sub_5184( l_U1027 );
    sub_5184( l_U705 );
    sub_5184( l_U706 );
    sub_5251( g_U683._fU0 );
    sub_5296( bParam0 );
    sub_429( "GA", "P_CLEANUP_ML end", 0 );
    return;
}

void sub_3341(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_3453( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

int sub_3453(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else if ((uParam1^)[I] == iParam0)
        {
            (uParam1^)[I] = nil;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            Result = I;
        }
        else
        {
            (uParam1^)[I] = nil;
        };;;
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

void sub_3843(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_3453( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_4042(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if (sub_4059( uParam0, uParam1 ))
    {
        iVar4 = sub_4158( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            STOP_SCRIPT_STREAM( iVar4 );
        }
        else
        {
            SCRIPT_ASSERT( "Attempting to stop a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    return;
}

int sub_4059(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                return 1;
            }
        }
    }
    return 0;
}

int sub_4158(unknown uParam0, unknown uParam1)
{
    int Result;

    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
        {
            return Result;
        }
    }
    return -1;
}

void sub_4353(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
        sub_429( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
        sub_429( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

void sub_4516(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
        sub_429( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
        sub_429( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

void sub_5015(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_5049( (uParam0^)[I] );
    }
    return;
}

void sub_5049(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

void sub_5184(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

void sub_5251(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

void sub_5296(unknown uParam0)
{
    sub_429( "CCB", "P_STOP_SP_CHALLENGES", 0 );
    return;
}

void sub_5562(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

    sub_429( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
    sub_5746( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
        sub_6823( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 = sub_7115( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
        sub_7475( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 = sub_7115( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
        sub_7475( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 = sub_7115( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
        sub_7475( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 = sub_7760( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
        sub_7475( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 = sub_7760( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
        sub_7475( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if ((sub_8253( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
    sub_8414( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING( sub_784(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
    sub_429( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

void sub_5746(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 = sub_5778( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

int sub_5778(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

void sub_6823(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

void sub_7115(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                }
            }
        }
    }
    else
    {
        sub_7431( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

void sub_7431(unknown uParam0)
{
    return;
}

void sub_7475(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

void sub_7760(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                }
            }
        }
    }
    else
    {
        sub_7431( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

int sub_8253(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

void sub_8414(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 = sub_5778( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
    sub_8486( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

void sub_8486(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

void sub_9778()
{
    if (DOES_OBJECT_EXIST( l_U1027 ))
    {
        if (l_U1066 != -1)
        {
            if (NOT (IS_OBJECT_PLAYING_ANIM( l_U1027, "P_RP_ElvAnm_Aa_H", "fs_objmodels" )))
            {
                sub_429( "SA", "Stopping elevator opening/closing sound.", 0 );
                sub_4353( l_U1066, 0 );
                sub_4516( ref l_U1066 );
            }
        }
    }
    return;
}

void sub_9963()
{
    int iVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;

    iVar2 = l_U119;
    sub_9992( ref l_U567, -70.00000000, 0, 1 );
    if (g_U723 == 3)
    {
        sub_10151();
    }
    switch (l_U119)
    {
        case 0: break;
        case 1:
        sub_429( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
        sub_10537();
        sub_10949();
        sub_14769();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        if (g_U722 == 3)
        {
            SET_CAM_VIEW_MODE( 0 );
        }
        l_U119 = 2;
        sub_429( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
        sub_429( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        sub_14984();
        sub_19655();
        l_U119 = 3;
        sub_429( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if ((sub_23797( ref g_U1168 )) AND ((sub_23606( ref g_U967 )) AND ((sub_23479( ref g_U1028 )) AND ((sub_23358( ref g_U918 )) AND (sub_23238( ref g_U821 ))))))
        {
            if ((NOT l_U74._fU0) AND (g_U722 == 3))
            {
                l_U119 = 4;
                sub_429( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U119 = 6;
                sub_429( "SP", "eCheckpointState = CP_ML_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
        sub_429( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U1264[3] = 1;
        l_U121 = 0;
        if (NOT (IS_PED_DEAD( sub_784() )))
        {
            FREEZE_PED_POSITION( sub_784(), 0 );
        }
        if ((sub_24192( ref l_U74 )) == 0)
        {
            sub_7760( sub_784(), 68019059, 200, 0, 0 );
            l_U119 = 5;
            sub_429( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U119 = 6;
            sub_429( "SP", "eCheckpointState = CP_ML_PRE_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD( sub_784() )))
        {
            if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( sub_784(), 0, 0 ) ))
            {
                l_U119 = 6;
                sub_429( "GA", "eCheckpointState = CP_ML_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if (l_U120)
        {
            ;
        }
        sub_24664();
        sub_25453();
        sub_25942();
        l_U119 = 7;
        sub_429( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        break;
        case 7:
        if (g_U1264[3])
        {
            if (l_U121)
            {
                if (CUTSCENE_IS_LOADED( "01_02_RP_concat" ))
                {
                    l_U119 = 8;
                    sub_429( "GA", "eCheckpointState = CP_HANDLE_01_02_RP", 0 );
                }
                else if (CUTSCENE_NAMED_IS_LOADING( "01_02_RP_concat" ))
                {
                    sub_429( "GA", "Waiting for cutscene 01_02_RP_concat to load.", 0 );
                }
                else
                {
                    sub_429( "GA", "Requesting cutscene 01_02_RP_concat to load.", 0 );
                    PRE_STREAM_SEAMLESS_CUTSCENE( "01_02_RP_concat" );
                }
            }
            else
            {
                l_U119 = 8;
                sub_429( "GA", "eCheckpointState = CP_HANDLE_01_02_RP", 0 );
            }
        }
        break;
        case 8:
        if (l_U120)
        {
            sub_34739( ref l_U937, "01_02_RP_concat", 26675, 28097, 28727, 30792, 30809, 31625, 250, 0 );
            if (l_U121)
            {
                l_U937._fU4 = 2;
            }
            else
            {
                l_U937._fU4 = 7;
            }
            sub_35165( ref l_U1034 );
        }
        if ((l_U937._fU52) AND (l_U937._fU4 == 8))
        {
            sub_35228( ref l_U1034, l_U1043 );
        }
        if (sub_1895( ref l_U1034 ))
        {
            sub_35278();
        }
        if (sub_35389( ref l_U937 ))
        {
            if (NOT l_U74._fU0)
            {
                g_U723 = 3;
                sub_37548( ref l_U74, g_U723, sub_784(), g_U1333[3], g_U1450[3], g_U1486[3], g_U1522[3], 1 );
            }
            RESET_FORCED_AIM_INTENTION_DIRECTION();
            RESET_FORCED_FORWARD_DIRECTION();
            sub_41176();
            sub_41230();
            sub_41314();
            l_U119 = 9;
            sub_429( "GA", "eCheckpointState = CP_ML_GAMEPLAY_LEAVE_ELEVATOR", 0 );
        }
        break;
        case 9:
        if (l_U120)
        {
            l_U748 = 1;
        }
        if (sub_41672())
        {
            sub_42169();
        }
        sub_42614();
        sub_42935();
        if ((sub_43094()) || (NOT (sub_42644( l_U124 ))))
        {
            sub_43166();
            ENABLE_WALLA_ZONE( "S_FASHION_WZ_LOBBY", 1 );
            l_U119 = 10;
        }
        break;
        case 10:
        if (l_U120)
        {
            sub_429( "SA", "eCheckpointState = CP_ML_GAMEPLAY_PRE_TUTORIAL", 0 );
            AUDIO_MUSIC_REQUEST_ONESHOT( "ROOFTOP_ONESHOT_06", 0 );
            if ((NOT (IS_PED_DEAD( sub_784() ))) AND (NOT (IS_PED_DEAD( l_U567[0] ))))
            {
                sub_429( "GA", "Snapping VIG_03C_RP GMED to cover.", 0 );
                TASK_COMBAT_SNAP_TO_COVER( l_U567[0], "GenCover", "5A8CB6B1_F237907E_Popover1", sub_784() );
                PED_FINISH_ACTION_INTENTION( l_U567[0], 47 );
                SET_PED_VISIBLE( l_U567[0], 1 );
                SET_PED_VISIBLE_DURING_SEQUENCE( l_U567[0], 1 );
            }
            sub_1775( ref l_U580 );
            sub_43791( 0 );
        }
        sub_42614();
        sub_42935();
        if (sub_1895( ref l_U580 ))
        {
            sub_44717( "SRTP_MSFBC", ref l_U589 );
        }
        if (sub_42764( ref l_U1044, 0 ))
        {
            sub_45837();
        }
        if (NOT (IS_PLAYER_DEAD( sub_806() )))
        {
            if (l_U163._fU548)
            {
                if (NOT (sub_46145( ref l_U163, 0 )))
                {
                    SET_PLAYER_CAN_USE_SHOOTDODGE( sub_806(), 0 );
                    l_U163._fU548 = 0;
                }
            }
            else if (sub_46342( ref l_U163, 0 ))
            {
                SET_PLAYER_CAN_USE_SHOOTDODGE( sub_806(), 1 );
            }
        }
        if (sub_42644( l_U304 ))
        {
            sub_429( "SA", "eCheckpointState = CP_ML_GAMEPLAY_MOVE_TO_COVER_COLUMN", 0 );
            l_U119 = 11;
        }
        if (sub_42644( l_U325 ))
        {
            sub_429( "SA", "eCheckpointState = CP_ML_GAMEPLAY_MOVE_TO_COVER_DESK", 0 );
            l_U119 = 12;
        }
        break;
        case 11:
        if (l_U120)
        {
            SET_PLAYER_SHOOTDODGE_GET_UP_STATE( 3 );
            OPEN_SEQUENCE_TASK( ref uVar3 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
            TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 8.74565000, 26.39696000, -60.19984000, 3, 20000, 0.10000000, 1, 0.00000000 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
            CLOSE_SEQUENCE_TASK( uVar3 );
            if (NOT (IS_PLAYER_DEAD( sub_806() )))
            {
                SET_PED_CAN_SLOW_DOWN_WHEN_TURNING( sub_784(), 0 );
                SET_CAN_ROLL_DODGE( sub_784(), 0 );
            }
            TASK_PERFORM_SEQUENCE( sub_784(), uVar3 );
            sub_36256( 1, 0, 0, 1 );
            sub_46764();
            CAMERA_POINT_AT_COORD( 7.47000000, 41.59000000, -59.45000000, 1000 );
            sub_43791( 1 );
        }
        if ((NOT (IS_PED_DEAD( sub_784() ))) AND (NOT (IS_PED_DEAD( l_U567[1] ))))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U567[1], 47 )) == 3)
            {
                sub_429( "GA", "Snapping VIG_03D_RP GMED to cover.", 0 );
                TASK_COMBAT_SNAP_TO_COVER( l_U567[1], "GenCover", "5A8CB6B1_1049AFAA_Corner2", sub_784() );
                PED_FINISH_ACTION_INTENTION( l_U567[1], 47 );
            }
        }
        if (sub_42644( l_U346 ))
        {
            sub_47492( "SCRIPT_MISSION\ELEVATOR", ref g_U1221 );
            l_U119 = 13;
        }
        break;
        case 12:
        if (l_U120)
        {
            SET_PLAYER_SHOOTDODGE_GET_UP_STATE( 3 );
            OPEN_SEQUENCE_TASK( ref uVar4 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
            TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 4.46364600, 28.39245000, -60.19984000, 3, 20000, 0.10000000, 1, 0.00000000 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
            CLOSE_SEQUENCE_TASK( uVar4 );
            if (NOT (IS_PLAYER_DEAD( sub_806() )))
            {
                SET_PED_CAN_SLOW_DOWN_WHEN_TURNING( sub_784(), 0 );
                SET_CAN_ROLL_DODGE( sub_784(), 0 );
            }
            TASK_PERFORM_SEQUENCE( sub_784(), uVar4 );
            sub_36256( 1, 0, 0, 1 );
            sub_46764();
            CAMERA_POINT_AT_COORD( 7.47000000, 41.59000000, -59.45000000, 1000 );
            sub_43791( 1 );
        }
        if ((NOT (IS_PED_DEAD( sub_784() ))) AND (NOT (IS_PED_DEAD( l_U567[1] ))))
        {
            if ((PED_GET_ACTION_INTENTION_STATUS( l_U567[1], 47 )) == 3)
            {
                sub_429( "GA", "Snapping VIG_03D_RP GMED to cover.", 0 );
                TASK_COMBAT_SNAP_TO_COVER( l_U567[1], "GenCover", "5A8CB6B1_1049AFAA_Corner2", sub_784() );
                PED_FINISH_ACTION_INTENTION( l_U567[1], 47 );
            }
        }
        if (sub_42644( l_U367 ))
        {
            sub_47492( "SCRIPT_MISSION\ELEVATOR", ref g_U1221 );
            l_U119 = 13;
        }
        break;
        case 13:
        if (l_U120)
        {
            sub_429( "SA", "eCheckpointState = CP_ML_GAMEPLAY_TAKE_COVER_TUTORIAL", 0 );
            if (NOT (IS_PED_DEAD( sub_784() )))
            {
                CLEAR_PED_TASKS( sub_784() );
                SET_PLAYER_SHOOTDODGE_GET_UP_STATE( 0 );
                SET_PLAYER_CONTROL( sub_806(), 1, 0 );
                SET_PED_CONSUMING_AMMO( sub_784(), 0 );
                uVar5 = GET_WEAPON_TYPE( GET_WEAPON_FROM_HAND( sub_784(), 0, 0 ) );
                if ((GET_AMMO_IN_PED_WEAPON( sub_784(), uVar5 )) <= 0)
                {
                    SET_PED_AMMO( sub_784(), uVar5, GET_MAX_AMMO_IN_CLIP( sub_784(), uVar5 ) );
                }
            }
            if (NOT (IS_PED_DEAD( l_U567[0] )))
            {
                l_U419 = 1;
            }
            SET_GAME_PAUSED( 1 );
            DISABLE_RESTART_CHECKPOINT( 1 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
            sub_35228( ref l_U397, 0 );
            l_U416 = 0;
            l_U418 = 0;
        }
        sub_42935();
        if (sub_1895( ref l_U397 ))
        {
            sub_48440( "TUT_COVER_ENTER", 1 );
            l_U416 = 1;
        }
        if (l_U416)
        {
            if (IS_CONTROL_JUST_PRESSED( 0, 27 ))
            {
                sub_429( "SA", "Sending player to cover.", 0 );
                SET_GAME_PAUSED( 0 );
                if (NOT (IS_PLAYER_DEAD( sub_806() )))
                {
                    SET_PLAYER_CONTROL( sub_806(), 0, 0 );
                    SET_PLAYER_LOCKED_IN_COVER( sub_806(), 1 );
                    SET_PED_CAN_SLOW_DOWN_WHEN_TURNING( sub_784(), 1 );
                    if (sub_42644( l_U367 ))
                    {
                        PLAYER_USE_COVERPOINT( sub_806(), "GenCover", "5A8CB6B1_A050FBF6_Popover1", 0 );
                    }
                    else
                    {
                        PLAYER_USE_COVERPOINT( sub_806(), "GenCover", "5A8CB6B1_CC4AAE4_Corner1", 1 );
                    }
                }
            }
        }
        if (IS_PED_IN_COVER( sub_784() ))
        {
            sub_429( "SA", "tmr_ML_WaitForCover is done", 0 );
            sub_37133( 1, 1 );
            CAMERA_CLEAR_POINT_AT_TARGET();
            DISABLE_RESTART_CHECKPOINT( 0 );
            l_U119 = 15;
        }
        break;
        case 14:
        if (l_U120)
        {
            sub_429( "SA", "eCheckpointState = CP_ML_GAMEPLAY_AIM_FROM_COVER_TUTORIAL", 0 );
            sub_35165( ref l_U397 );
            sub_35228( ref l_U406, l_U415 );
            sub_35228( ref l_U388, 1000 );
        }
        if (sub_1895( ref l_U388 ))
        {
            sub_49040();
        }
        if (sub_1895( ref l_U406 ))
        {
            sub_1296();
            sub_35228( ref l_U397, l_U415 );
        }
        if (sub_49490())
        {
            l_U119 = 16;
        }
        else if (IS_CONTROL_PRESSED( 0, 6 ))
        {
            l_U119 = 15;
        }
        else if (sub_1895( ref l_U397 ))
        {
            sub_48440( "TUT_COVER_AIM", 0 );
        };;;
        break;
        case 15:
        if (l_U120)
        {
            sub_429( "SA", "eCheckpointState = CP_ML_GAMEPLAY_SHOOT_FROM_COVER_TUTORIAL", 0 );
            sub_35165( ref l_U397 );
            sub_35228( ref l_U406, l_U415 );
        }
        if (sub_1895( ref l_U406 ))
        {
            sub_1296();
            sub_35228( ref l_U397, l_U415 );
        }
        if (IS_CONTROL_JUST_PRESSED( 0, 4 ))
        {
            l_U418 = 1;
        }
        if (sub_49490())
        {
            l_U119 = 16;
        }
        else if (NOT (IS_CONTROL_PRESSED( 0, 6 )))
        {
            l_U119 = 14;
        }
        else if (sub_1895( ref l_U397 ))
        {
            if (IS_USING_CONTROLLER())
            {
                if (IS_IN_SOUTHPAW_MODE())
                {
                    sub_48440( "TUT_COVER_SHOOT_SP", 0 );
                }
                else
                {
                    sub_48440( "TUT_COVER_SHOOT", 0 );
                }
            }
            else
            {
                sub_48440( "TUT_COVER_SHOOT_PC", 0 );
            }
        };;;
        break;
        case 16:
        if (l_U120)
        {
            sub_429( "SA", "eCheckpointState = CP_ML_GAMEPLAY_LEAVE_COVER_TUTORIAL", 0 );
            sub_50247();
            sub_50585();
            sub_35165( ref l_U397 );
            sub_35228( ref l_U406, l_U415 );
            if (NOT (IS_PED_DEAD( sub_784() )))
            {
                SET_PLAYER_LOCKED_IN_COVER( sub_806(), 0 );
                SET_PED_CONSUMING_AMMO( sub_784(), 1 );
                SET_CAN_ROLL_DODGE( sub_784(), 1 );
            }
            if (NOT (IS_PLAYER_DEAD( sub_806() )))
            {
                SET_PLAYER_CAN_USE_SHOOTDODGE( sub_806(), 1 );
            }
            l_U417 = 0;
            AUDIO_MUSIC_REQUEST_ONESHOT( "ROOFTOP_ONESHOT_06", 0 );
        }
        if (NOT l_U707)
        {
            if ((DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( l_U433._fU0, l_U433._fU4 ) )) AND (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( l_U440._fU0, l_U440._fU4 ) )))
            {
                sub_429( "GA", "Hiding the art crash doors.", 0 );
                SET_OBJECT_VISIBLE( DOOR_FIND_CLOSEST( l_U440._fU0, l_U440._fU4 ), 0 );
                SET_OBJECT_COLLISION( DOOR_FIND_CLOSEST( l_U440._fU0, l_U440._fU4 ), 0 );
                SET_OBJECT_VISIBLE( DOOR_FIND_CLOSEST( l_U433._fU0, l_U433._fU4 ), 0 );
                SET_OBJECT_COLLISION( DOOR_FIND_CLOSEST( l_U433._fU0, l_U433._fU4 ), 0 );
                l_U707 = 1;
            }
        }
        if (NOT l_U417)
        {
            if (NOT (IS_PED_IN_COVER( sub_784() )))
            {
                sub_35228( ref l_U406, l_U415 );
                l_U417 = 1;
            }
        }
        if (sub_1895( ref l_U406 ))
        {
            sub_1296();
            if (NOT l_U417)
            {
                sub_35228( ref l_U397, l_U415 );
            }
            else if (sub_42644( l_U367 ))
            {
                sub_429( "GA", "Display vaulting tutorial.", 0 );
                sub_48440( "TUT_VAULT_PC", 0 );
                sub_1775( ref l_U424 );
            }
            else
            {
                SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
            }
        }
        if (sub_1895( ref l_U424 ))
        {
            sub_1296();
            SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
        }
        if (sub_1895( ref l_U397 ))
        {
            sub_48440( "TUT_COVER_EXIT", 0 );
        }
        if ((l_U406._fU16) AND (l_U417))
        {
            sub_51559();
        }
        if (NOT l_U511)
        {
            if ((sub_52306( ref l_U567 )) >= 2)
            {
                sub_429( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_1_2_3 mood. Fade in 6 sec", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_1_2_3", "", 0.00000000, 6000, 5000, -1082130432, 0 );
                l_U511 = 1;
            }
        }
        if ((l_U406._fU16) AND (l_U417))
        {
            if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ((sub_52606( ref l_U567 )) == 0)))
            {
                sub_52719( ref g_U724[4] );
                l_U119 = 19;
                sub_429( "GA", "eCheckpointState = CP_ML_GAMEPLAY_WAIT_FOR_DOOR_CRASH_TRIGGER", 0 );
            }
        }
        break;
        case 19:
        if (l_U120)
        {
            sub_1775( ref l_U620 );
            sub_1775( ref l_U708 );
        }
        sub_51559();
        if (sub_1895( ref l_U424 ))
        {
            sub_1296();
            SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
        }
        if (NOT (sub_42644( l_U653 )))
        {
            if (sub_1895( ref l_U620 ))
            {
                sub_44717( "SRTP_MHTHA", ref l_U629 );
            }
        }
        if ((l_U708._fU16) || (sub_1895( ref l_U708 )))
        {
            if (sub_42764( ref l_U653, 0 ))
            {
                l_U119 = 20;
                sub_429( "GA", "eCheckpointState = CP_ML_NIS_DOOR_CRASH_INTRO", 0 );
            }
        }
        break;
        case 20:
        if (l_U120)
        {
            sub_1296();
            sub_36256( 1, 0, 0, 1 );
            CAMERA_PLAY_ANIMATED( "LEVEL_S_ROOFTOP_CP_04", "VIG_03E_RP_CAM", 0, 0, 0, 0, 0.00000000, 0, 0 );
            if (NOT (IS_PED_DEAD( sub_784() )))
            {
                CLEAR_PED_TASKS_IMMEDIATELY( sub_784() );
                RESET_PLAYER_INPUT_GAIT( 0 );
                sub_53175();
            }
            sub_31181( sub_784(), 3.61000000, 46.08000000, -61.19000000, 86.63000000 );
            if (NOT (IS_PLAYER_DEAD( sub_806() )))
            {
                SET_PLAYER_FORCED_AIM( sub_806(), 1, 0 );
            }
            DISABLE_RESTART_CHECKPOINT( 1 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
            sub_53565();
            sub_53719();
            if ((NOT (IS_PED_DEAD( sub_784() ))) AND (NOT (IS_PED_DEAD( l_U652 ))))
            {
                TASK_AIM_GUN_AT_PED( sub_784(), l_U652, 3000, 0 );
            }
            sub_429( "GA", "Playing audio music one shot ROOFTOP_ONESHOT_07", 0 );
            AUDIO_MUSIC_PLAY_ONESHOT();
            PLAY_IMAGEFX( "DISTORT_INTERLACE_DOUBLE_01", 4, 0 );
        }
        if (NOT (IS_PED_DEAD( l_U652 )))
        {
            CAMERA_SNAP_POINT_AT_COORD( (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( l_U652 ))) + (vector( 0.00000000, -0.10000000, 0.20000000)) );
        }
        if (NOT IS_ANIMATED_CAMERA_PLAYING())
        {
            if (NOT (IS_PED_DEAD( l_U652 )))
            {
                CAMERA_SNAP_POINT_AT_COORD( (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( l_U652 ))) + (vector( 0.00000000, -0.10000000, 0.20000000)) );
            }
            sub_37133( 1, 1 );
            if (NOT (IS_PED_DEAD( sub_784() )))
            {
                SET_PLAYER_CONTROL( sub_806(), 0, 0 );
                REENABLE_PLAYER_INPUT( 4 );
                SET_PED_CONSUMING_AMMO( sub_784(), 0 );
                uVar6 = GET_WEAPON_FROM_HAND( sub_784(), 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar6 )) == 1)
                {
                    if ((GET_WEAPON_AMMO_IN_CLIP( uVar6 )) == 0)
                    {
                        SET_WEAPON_AMMO_IN_CLIP( uVar6, GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_784(), 0 ) );
                    }
                }
            }
            SET_GAME_PAUSED( 1 );
            sub_48440( "TUT_BC_START", 1 );
            l_U717 = 1;
            l_U119 = 21;
            sub_429( "GA", "eCheckpointState = CP_ML_TUT_BULLETCAM_WAIT_FOR_SHOOT", 0 );
        }
        break;
        case 21:
        if (l_U717)
        {
            if (IS_CONTROL_JUST_PRESSED( 2, 4 ))
            {
                SET_GAME_PAUSED( 0 );
                if (NOT (IS_PED_DEAD( sub_784() )))
                {
                    SET_PED_FORCE_FIRE( sub_784() );
                    CLEAR_PED_TASKS( sub_784() );
                }
                CAMERA_CLEAR_POINT_AT_TARGET();
                sub_1296();
                sub_1775( ref l_U739 );
                l_U717 = 0;
            }
        }
        if (IS_BULLET_CAMERA_RUNNING( 0 ))
        {
            if (NOT (IS_PLAYER_DEAD( sub_806() )))
            {
                SET_PLAYER_FORCED_AIM( sub_806(), 0, 0 );
                SET_PLAYER_CONTROL( sub_806(), 1, 0 );
            }
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            ALLOW_BULLET_CAMERA_TUTORIAL_MSG( 1 );
            l_U119 = 22;
            sub_429( "GA", "eCheckpointState = CP_ML_TUT_BULLETCAM", 0 );
            break;
        }
        if (IS_PED_DEAD( l_U652 ))
        {
            if (NOT (IS_PLAYER_DEAD( sub_806() )))
            {
                SET_PLAYER_FORCED_AIM( sub_806(), 0, 0 );
                SET_PLAYER_CONTROL( sub_806(), 1, 0 );
            }
            DISABLE_RESTART_CHECKPOINT( 0 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
            ALLOW_BULLET_CAMERA_TUTORIAL_MSG( 0 );
            SET_GAME_PAUSED( 0 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
            SET_PED_CONSUMING_AMMO( sub_784(), 1 );
            l_U119 = 23;
            sub_429( "GA", "eCheckpointState = CP_ML_GAMEPLAY_GO_TO_PARKING_GARAGE", 0 );
        }
        break;
        case 22:
        if (l_U120)
        {
            sub_1775( ref l_U718 );
        }
        if (sub_1895( ref l_U718 ))
        {
            sub_429( "GA", "Starting slow down tutorial.", 0 );
            sub_48440( "TUT_BC_SLOW", 1 );
            SET_GAME_PAUSED( 1 );
            l_U727 = 1;
        }
        if (l_U727)
        {
            if (IS_CONTROL_JUST_PRESSED( 2, 97 ))
            {
                SET_GAME_PAUSED( 0 );
                sub_1296();
                sub_1775( ref l_U739 );
                l_U727 = 0;
            }
        }
        if (NOT l_U728)
        {
            if (IS_PED_DEAD( l_U652 ))
            {
                sub_429( "GA", "Start Keep Shooting delay.", 0 );
                sub_1775( ref l_U730 );
                l_U728 = 1;
            }
        }
        if (sub_1895( ref l_U730 ))
        {
            sub_429( "GA", "Start Keep Shooting tutorial.", 0 );
            sub_48440( "TUT_BC_SHOOT", 1 );
            SET_GAME_PAUSED( 1 );
            l_U729 = 1;
        }
        if (l_U729)
        {
            if (IS_CONTROL_JUST_PRESSED( 2, 4 ))
            {
                SET_GAME_PAUSED( 0 );
                if (NOT (IS_PED_DEAD( sub_784() )))
                {
                    SET_PED_FORCE_FIRE( sub_784() );
                }
                l_U729 = 0;
                sub_1296();
                sub_1775( ref l_U739 );
            }
        }
        if ((NOT l_U729) AND (NOT l_U727))
        {
            if (sub_1895( ref l_U739 ))
            {
                sub_429( "GA", "Clearing any existing tutorial text.", 0 );
                sub_1296();
            }
        }
        if (NOT (IS_BULLET_CAMERA_RUNNING( 0 )))
        {
            sub_1296();
            sub_1775( ref l_U739 );
            SET_GAME_PAUSED( 0 );
            DISABLE_RESTART_CHECKPOINT( 0 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
            ALLOW_BULLET_CAMERA_TUTORIAL_MSG( 0 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
            SET_PED_CONSUMING_AMMO( sub_784(), 1 );
            l_U119 = 23;
            sub_429( "GA", "eCheckpointState = CP_ML_GAMEPLAY_GO_TO_PARKING_GARAGE", 0 );
        }
        break;
        case 23:
        sub_51559();
        if (sub_1895( ref l_U739 ))
        {
            sub_1296();
        }
        if (sub_56158( ref l_U684, sub_784(), 0 ))
        {
            PLAY_IMAGEFX( "DOUBLE_FLASH_FAST", 4, 0 );
        }
        if (NOT l_U826)
        {
            if (IS_PED_DEAD( l_U652 ))
            {
                sub_429( "GA", "Starting fail countdown.", 0 );
                sub_1775( ref l_U868 );
                ENABLE_WALLA_ZONE( "S_FASHION_WZ_PARKING_GARAGE_STAIRS", 1 );
                sub_429( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_1 mood. Fade in 7 seconds, out 5 sec", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_1", "", 0.00000000, 7000, 5000, -1082130432, 0 );
                l_U826 = 1;
            }
        }
        if (TIME_SINCE_LAST_MONOLOGUE() > 2000)
        {
            if (sub_42764( ref l_U837, 0 ))
            {
                sub_44717( "SRTP_MSDCS", ref l_U827 );
            }
        }
        if (sub_1895( ref l_U868 ))
        {
            sub_44717( "SRTP_TRNTS", ref l_U858 );
            sub_1775( ref l_U877 );
        }
        if (sub_42764( ref l_U907, 0 ))
        {
            sub_56700( 0 );
            sub_1775( ref l_U928 );
            if ((NOT (IS_PLAYER_DEAD( sub_806() ))) AND (NOT (IS_PED_DEAD( sub_784() ))))
            {
                SET_PED_FORCED_TO_WALK( sub_784(), 1 );
                SET_PLAYER_CAN_USE_SHOOTDODGE( sub_806(), 0 );
            }
        }
        if (sub_1895( ref l_U928 ))
        {
            sub_52199();
            g_U1264[4] = 1;
            l_U119 = 26;
            sub_429( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 24:
        if (l_U120)
        {
            sub_1296();
        }
        if (sub_57249( "MID_08_RP_concat", "MID_07_RP_concat" ))
        {
            l_U119 = 25;
            sub_429( "GA", "eCheckpointState = CP_HANDLE_MID_07_RP", 0 );
        }
        break;
        case 25:
        if (l_U120)
        {
            sub_34739( ref l_U1000, "MID_07_RP_concat", 57510, 57529, 57547, 30792, 57637, 57663, 0, 1 );
            l_U1000._fU4 = 2;
        }
        if (sub_35389( ref l_U1000 ))
        {
            l_U122 = 1;
        }
        break;
        case 26:
        if ((NOT HAS_CUTSCENE_FINISHED()) || (g_U723 == 4))
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U119 = 0;
            sub_429( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U119 != iVar2)
    {
        l_U120 = 1;
    }
    else
    {
        l_U120 = 0;
    }
    return;
}

void sub_9992(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_10029( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

void sub_10029(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                sub_5049( uParam0 );
            }
        }
    }
    return;
}

void sub_10151()
{
    sub_10161();
    return;
}

void sub_10161()
{
    switch (g_U1646)
    {
        case 0:
        g_U1646 = 1;
        break;
        case 1:
        if (IS_HUD_PREFERENCE_SWITCHED_ON())
        {
            g_U1646 = 2;
        }
        break;
        case 2: break;
    }
    return;
}

void sub_10537()
{
    sub_429( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U120 = 1;
    sub_1639( ref l_U580, 1500, 1, 0 );
    l_U511 = 0;
    l_U512 = 0;
    l_U513 = 0;
    sub_1639( ref l_U620, 1500, 1, 0 );
    sub_1639( ref l_U145, 500, 1, 0 );
    sub_1639( ref l_U154, 500, 1, 0 );
    l_U419 = 0;
    l_U707 = 0;
    sub_1639( ref l_U708, 1500, 1, 0 );
    sub_1639( ref l_U718, 400, 1, 1 );
    sub_1639( ref l_U730, 200, 1, 1 );
    sub_1639( ref l_U739, 500, 1, 1 );
    l_U717 = 0;
    l_U727 = 0;
    l_U728 = 0;
    l_U729 = 0;
    l_U766 = 0;
    l_U767 = 0;
    l_U416 = 0;
    l_U417 = 0;
    l_U418 = 0;
    l_U419 = 0;
    sub_1639( ref l_U424, l_U423, 1, 1 );
    l_U826 = 0;
    sub_1639( ref l_U868, 30000, 1, 0 );
    sub_1639( ref l_U877, 30000, 1, 0 );
    l_U964 = 0;
    l_U965 = 0;
    l_U996 = 0;
    l_U997 = 0;
    l_U998 = 0;
    l_U999 = 0;
    sub_1639( ref l_U928, 750, 1, 0 );
    sub_429( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

void sub_10949()
{
    unknown[2] uVar2;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;

    sub_429( "GA", "P_SET_STATIC_DATA start", 0 );
    sub_11037( ref l_U966[0], -5.96000000, -34.32000000, -15.32278000, -188.40000000, 553092933, 26, 0, 0, 0, 0 );
    sub_11037( ref l_U966[1], -8.37000000, -35.23000000, -15.32278000, -170.00000000, 1704169279, 26, 0, 0, 0, 0 );
    sub_11037( ref l_U514[0], 6.73800000, 27.85900000, -61.19900000, 90.00000000, -586225623, 7, 3, 2, 0, 0 );
    sub_11037( ref l_U514[1], 1.27000000, 47.22000000, -61.19000000, -90.00000000, -1931740375, 7, 3, 2, 0, 0 );
    sub_11037( ref l_U514[2], -2.11000000, 48.60000000, -61.19000000, -135.00000000, -2079123822, 7, 3, 2, 0, 0 );
    sub_11037( ref l_U514[3], -2.67000000, 48.41000000, -61.42000000, -90.00000000, -253329729, 7, 3, 2, 0, 0 );
    sub_11037( ref l_U639, -13.74000000, 48.19000000, -61.60600000, -90.00000000, 800337267, 7, 3, 2, 0, 0 );
    sub_11037( ref l_U768[0], 4.04000000, 28.53000000, -61.00000000, 242.00000000, -1506353897, 26, 0, 0, 0, 0 );
    sub_11037( ref l_U768[1], 1.94000000, 19.36000000, -61.00000000, 225.00000000, 466304203, 26, 0, 0, 0, 0 );
    sub_11037( ref l_U768[2], 12.15000000, 23.14000000, -61.00000000, 173.00000000, 1003175781, 26, 0, 0, 0, 0 );
    sub_11037( ref l_U768[3], -6.63000000, 49.60000000, -61.40000000, 202.00000000, 2119641415, 26, 0, 0, 0, 0 );
    sub_11037( ref l_U750[0], 2.15400000, 26.31900000, -61.16800000, 135.00000000, 181206332, 26, 0, 0, 0, 0 );
    sub_11702( ref l_U124, "tb_ML_StartingElevator", -7.53000000, 15.93000000, -61.18000000, 3.60000000, 4.13000000, 2.90000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    array(ref uVar2, 2);
    sub_11702( ref uVar2[0], "tb_ML_CanShootdodge[0]", -7.42000000, 21.25000000, -62.00000000, 6.16000000, 15.00000000, 9.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11702( ref uVar2[1], "tb_ML_CanShootdodge[1]", 5.48000000, 13.95000000, -62.00000000, 20.00000000, 15.00000000, 9.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11955( ref l_U163, ref uVar2 );
    l_U163._fU548 = 1;
    sub_11702( ref l_U599, "tb_ML_MidWayUpColumns", 8.11000000, 34.68000000, -61.19000000, 9.96000000, 3.09000000, 5.79000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11702( ref l_U653, "tb_ML_NearDoorsToHallway", -4.31000000, 48.01000000, -61.61000000, 13.21000000, 12.45000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11702( ref l_U886, "tb_ML_DoorToParkingOuter", -37.53000000, 60.01000000, -65.06000000, 10.00000000, 12.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11702( ref l_U907, "tb_ML_DoorToParkingInner", -37.50000000, 58.65000000, -64.99000000, 10.00000000, 6.07000000, 2.74000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11702( ref l_U1044, "tb_ML_CloseElevator", -0.80000000, 22.50000000, -62.00000000, 2.59000000, 8.78000000, 9.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11702( ref l_U304, "tb_ML_StartTutorial_Column", 10.27000000, 25.77000000, -61.19000000, 10.00000000, 3.00000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11702( ref l_U325, "tb_ML_StartTutorial_Desk", 4.27000000, 28.10000000, -61.19000000, 4.00000000, 3.00000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11702( ref l_U346, "tb_ML_ReturnPlayerControl_Column", 9.37000000, 26.84000000, -61.19000000, 2.50000000, 2.00000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11702( ref l_U367, "tb_ML_ReturnPlayerControl_Desk", 4.17000000, 29.02000000, -61.19000000, 2.50000000, 2.00000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11702( ref l_U837, "tb_ML_Play_SRTP_MSDCS", -31.23000000, 49.16000000, -65.00000000, 15.66000000, 9.18000000, 4.91000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_13155( ref l_U572, "teth_ML_Tutorial", 8.18000000, 44.90000000, -62.19000000, 10.13000000, 12.00000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_13155( ref l_U573, "teth_ML_EasyKill", 7.27000000, 43.15000000, -62.19000000, 1.78000000, 2.26000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11702( ref l_U684, "tbImageFX_Lobby", -16.65260000, 49.06670000, -65.56740000, 10.00000000, 11.00000000, 10.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_13400( ref l_U433, -1532993036, -8.89485000, 49.20000000, -60.49547000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13458( ref l_U433, -100.00000000, 100.00000000 );
    sub_13630( ref l_U433, 1 );
    sub_13760( ref l_U433, 1 );
    sub_13400( ref l_U440, -1532993036, -8.89485000, 46.80000000, -60.49547000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13630( ref l_U440, 1 );
    sub_13760( ref l_U440, 1 );
    sub_13458( ref l_U440, -100.00000000, 100.00000000 );
    sub_13400( ref l_U447[0], 996251004, 5.38204000, 14.68244000, -60.10560000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13760( ref l_U447[0], 1 );
    sub_13400( ref l_U447[1], 996251004, 7.77515000, 14.67672000, -60.09560000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13760( ref l_U447[1], 1 );
    sub_13400( ref l_U447[2], 996251004, -5.00889000, 42.01286000, -60.49706000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13760( ref l_U447[2], 1 );
    sub_13400( ref l_U447[3], -1040114507, -13.87658000, 53.79118000, -60.49547000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13760( ref l_U447[3], 1 );
    sub_13400( ref l_U447[4], -1040114507, -16.27658000, 53.79118000, -60.49547000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13760( ref l_U447[4], 1 );
    sub_13400( ref l_U447[5], 996251004, -3.78351000, 53.86155000, -60.49706000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13760( ref l_U447[5], 1 );
    sub_13400( ref l_U447[6], 732538119, -11.83936000, 44.00432000, -60.49547000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13760( ref l_U447[6], 1 );
    sub_13400( ref l_U447[7], 732538119, -16.06521000, 44.00432000, -60.49547000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13760( ref l_U447[7], 1 );
    sub_13400( ref l_U504, -1040114507, -23.23475000, 49.20000000, -62.09954000, 0, 0, 0 );
    sub_14516( ref l_U504, 0, 1, 1065353216 );
    sub_14667( ref l_U504, 1 );
    sub_429( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

void sub_11037(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

void sub_11702(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_11955(int iParam0, unknown uParam1)
{
    int iVar4;
    int I;

    iVar4 = (uParam1^);
    if (iVar4 > 6)
    {
        sub_429( "[SA]", "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
        SCRIPT_ASSERT( "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
    }
    for ( I = 0; I < iVar4; I++ )
    {
        iParam0->_fU0[I] = {(uParam1^)[I]};
    }
    iParam0->_fU508 = iVar4;
    iParam0->_fU548 = 0;
    iParam0->_fU552 = 0;
    iParam0->_fU556 = 0;
    iParam0->_fU560 = 0;
    return;
}

void sub_13155(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_13400(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

void sub_13458(int iParam0, float fParam1, float fParam2)
{
    if ((sub_13470( iParam0 )) == 0)
    {
        sub_13536( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        ;
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

int sub_13470(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_13536(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

void sub_13630(int iParam0, int iParam1)
{
    if ((sub_13470( iParam0 )) == 0)
    {
        sub_13536( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

void sub_13760(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if ((sub_13470( iParam0 )) == 0)
    {
        sub_13536( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

void sub_14516(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if ((sub_13470( iParam0 )) == 0)
    {
        sub_13536( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

void sub_14667(int iParam0, unknown uParam1)
{
    if ((sub_13470( iParam0 )) == 0)
    {
        sub_13536( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

void sub_14769()
{
    sub_429( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
    return;
}

void sub_14984()
{
    sub_429( "GA", "P_REQUEST_ML_PERSISTENT_ASSETS start", 0 );
    sub_15052( ref l_U110, ref g_U821 );
    sub_16460( ref l_U115, ref g_U918 );
    sub_17480( "LEVEL_S_ROOFTOP_CP_04", ref g_U1028 );
    sub_17480( "DAM_DEAD", ref g_U1028 );
    sub_18505( "SCRIPT_MISSION\ELEVATOR", ref g_U1221 );
    sub_18505( "SCRIPT_MISSION\S_FASHION_LOBBY", ref g_U1221 );
    if ((l_U121) AND (g_U722 != 3))
    {
        sub_15087( 591762127, ref g_U821 );
    }
    else
    {
        sub_15087( 897560185, ref g_U821 );
        sub_15087( -649839305, ref g_U821 );
    }
    sub_429( "GA", "P_REQUEST_ML_PERSISTENT_ASSETS end", 0 );
    return;
}

void sub_15052(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_15087( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_15087(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 = sub_15122( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
            sub_15253( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

int sub_15122(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                sub_15253( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                sub_15253( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    sub_15253( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_15901( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                sub_15253( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_15253( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_15253(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15273( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

int sub_15273(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            if ((uParam1^)[I] == iParam0)
            {
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
        else
        {
            (uParam1^)[I] = nil;
            Result = I;
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

void sub_15901(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

void sub_16460(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_16495( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_16495(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_16516( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
        sub_16648( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_16516(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                sub_16648( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                sub_16648( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    sub_16648( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_15901( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                sub_16648( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_16648( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_16648(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15273( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_17480(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_17501( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
        sub_17638( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_17501(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                sub_17638( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                sub_17638( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    sub_17638( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                    sub_15901( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                sub_17638( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
            sub_17638( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_17638(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15273( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_18505(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_18526( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
        sub_18664( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_18526(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                sub_18664( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                sub_18664( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    sub_18664( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                    sub_15901( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                sub_18664( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
            sub_18664( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_18664(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15273( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_19655()
{
    sub_429( "GA", "P_REQUEST_ML_NONPERSISTENT_ASSETS start", 0 );
    sub_19727( 36524849, ref g_U967 );
    sub_19727( 1241506505, ref g_U967 );
    sub_19727( 1565133149, ref g_U967 );
    sub_19727( 931347920, ref g_U967 );
    sub_19727( -2065237615, ref g_U967 );
    sub_21735( "S_FASHION_CONCIERGE_VIG", ref g_U1168 );
    if ((l_U121) AND (g_U722 != 3))
    {
        sub_22825( "01_02_RP_concat", 0 );
    }
    AUDIO_MUSIC_REQUEST_ONESHOT( "ROOFTOP_ONESHOT_LOBBY", 0 );
    sub_429( "GA", "P_REQUEST_ML_NONPERSISTENT_ASSETS end", 0 );
    return;
}

void sub_19727(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 = sub_19762( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
            sub_19914( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

int sub_19762(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                sub_19914( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                sub_19914( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        sub_19914( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                        sub_19914( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        sub_15901( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        sub_15901( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                sub_19914( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                sub_19914( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_19914(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15273( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_21735(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_21756( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
        sub_21897( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_21756(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being requested!!!", 0 );
                sub_21897( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is already loading!!!", 0 );
                sub_21897( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (Result <= 2)
                {
                    if ((GET_SCRIPT_STREAM_STATE( uParam0, Result )) == 2)
                    {
                        sub_21897( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else
                    {
                        SCRIPT_ASSERT( "The SCRIPT_STREAM asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                        (uParam1^)[Result]._fU32 = 0;
                        sub_15901( ref (uParam1^)[Result]._fU36 );
                        return Result;
                    }
                }
                else
                {
                    sub_21897( Result, uParam1, uParam2 );
                    return -1;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being removed!!!", 0 );
                sub_21897( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (Result <= 2)
        {
            if ((GET_SCRIPT_STREAM_STATE( uParam0, iVar6 )) == 2)
            {
                StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
                (uParam1^)[iVar6]._fU32 = 3;
                sub_21897( iVar6, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar6;
            }
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The SCRIPT_STREAM - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_21897(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15273( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The SCRIPT_STREAM asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_22825(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                WAIT( 0 );
            }
        }
    }
    return;
}

int sub_23238(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_23358(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_23479(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_23606(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

int sub_23797(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_24192(unknown uParam0)
{
    sub_429( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
            sub_5562( uParam0, sub_784() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

void sub_24664()
{
    sub_429( "CO", "P_CREATE_S_FAS_GG_PT_02", 0 );
    sub_24776( ref g_U683, g_U720, 308103643, -416780591, 12.03000000, 17.96000000, -61.18000000, 1.50000000, 1.50000000, 2.50000000, "int_faslobby" );
    sub_24905( ref g_U683 );
    return;
}

void sub_24776(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
        sub_429( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

void sub_24905(int iParam0)
{
    sub_429( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if ((sub_24966( iParam0->_fU12 )) == 1)
        {
            sub_429( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
            sub_429( "CO", "has never been collected.", 0 );
        }
        if ((sub_24966( iParam0->_fU12 )) == 0)
        {
            sub_5251( iParam0->_fU0 );
            iParam0->_fU0 = sub_25201( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                    sub_429( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
        sub_429( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

int sub_24966(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

void sub_25201(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    return Result;
}

void sub_25453()
{
    sub_429( "SA", "P_ML_CREATE_ELEVATOR_DOORS", 0 );
    l_U1027 = sub_25523( -1098942219, l_U1028, l_U1031, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( l_U1027, 1 );
    ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U1027, ref g_U1571 );
    return;
}

void sub_25523(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
        sub_25633( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

void sub_25633(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
        sub_7431( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_25942()
{
    sub_429( "GA", "P_ML_CREATE_CRASH_DOORS start", 0 );
    l_U705 = sub_25523( -1585064135, -8.68900000, 46.80000000, -60.49500000, 0, 0, 0, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U705 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U705, ref g_U1571 );
        FREEZE_OBJECT_POSITION( l_U705, 1 );
    }
    l_U706 = sub_25523( -1182267595, -8.68900000, 49.20000000, -60.49500000, 0, 0, 0, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U706 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U706, ref g_U1571 );
        FREEZE_OBJECT_POSITION( l_U706, 1 );
    }
    sub_429( "GA", "P_ML_CREATE_CRASH_DOORS end", 0 );
    return;
}

int sub_26675()
{
    if (l_U937._fU52)
    {
        l_U964 = 1;
    }
    if (sub_26705())
    {
        return 1;
        break;
    }
    return 0;
}

int sub_26705()
{
    switch (l_U964)
    {
        case 1:
        sub_429( "GA", "e_ML_0102_PedSpawnState = ENTITY_STATE_INIT", 0 );
        l_U965 = 0;
        sub_429( "GA", "e_ML_0102_PedSpawnState = ENTITY_STATE_CREATING", 0 );
        l_U964 = 2;
        break;
        case 2:
        l_U993[l_U965] = sub_26897( ref l_U966[l_U965] );
        if (l_U965 == 0)
        {
            sub_7760( l_U993[l_U965], 68019059, 25000, 0, 0 );
        }
        if (NOT (IS_PED_DEAD( l_U993[l_U965] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U993[l_U965], 1 );
        }
        sub_27657( l_U993[l_U965] );
        l_U965++;
        if (l_U965 >= 2)
        {
            sub_429( "GA", "e_ML_0102_PedSpawnState = ENTITY_STATE_POST_CREATE_SETUP", 0 );
            l_U964 = 3;
        }
        break;
        case 3:
        sub_27880( ref l_U993, "pi_ML_0102_Ped" );
        sub_429( "GA", "e_ML_0102_PedSpawnState = ENTITY_STATE_COMPLETE", 0 );
        l_U964 = 4;
        break;
    }
    if (l_U964 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

void sub_26897(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
        sub_25633( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
    sub_27376( iParam0->_fU40 );
    sub_27456( iParam0->_fU40 );
    return iParam0->_fU40;
}

void sub_27376(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

void sub_27456(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

void sub_27657(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

void sub_27880(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

void sub_28097()
{
    sub_429( "GA", "P_ML_0102RP_CutsceneRegistration start", 0 );
    if (NOT (IS_PED_DEAD( sub_784() )))
    {
        sub_429( "CCB", "Registering the Player ped.", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( sub_784(), g_U1333[3], g_U1450[3] );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( sub_784(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_IDLE" );
        if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( sub_784(), 0, 0 ) ))
        {
            sub_429( "CCB", "Registering the player ped's weapon.", 0 );
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( sub_784(), 0, 0 ), "W_PI_PT92_Aa_H", 0 );
        }
        else
        {
            sub_429( "CCB", "The player ped's weapon is NOT valid!!!", 0 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U993[0] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U993[0], "P_RT_SecG_M", 1 );
        if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( l_U993[0], 0, 0 ) ))
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( l_U993[0], 0, 0 ), "W_PI_PT92_Aa_H^1", 0 );
        }
    }
    if (NOT (IS_PED_DEAD( l_U993[1] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U993[1], "P_RT_SecG_M^1", 1 );
    }
    CUTSCENE_ENABLE_SKIP( 0 );
    sub_429( "GA", "P_ML_0102RP_CutsceneRegistration end", 0 );
    return;
}

void sub_28727()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    if (l_U937._fU52)
    {
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
        sub_28764( ref l_U993 );
        if (NOT (IS_PED_DEAD( sub_784() )))
        {
            APPLY_PLAYER_PRELOAD_VARIATION( sub_784(), 0 );
            SET_PED_SWEAT( sub_784(), 1.00000000, 0.00000000 );
            RESET_PED_GORE( sub_784() );
            SET_PED_PTFX_SPLASH_OUT_SPECIAL_EFFECT( 1 );
        }
        sub_28987( ref uVar2, 1, 1 );
        SET_CAM_VIEW_MODE( 0 );
        SET_FORCED_AIM_INTENTION_DIRECTION( 0.02719300, 0.99629000, -0.00154100 );
        SET_FORCED_FORWARD_DIRECTION( 0.00000000, 1.00000000, 0.00000000 );
    }
    if (NOT l_U996)
    {
        if (GET_CUTSCENE_TIME_MS() >= 31411)
        {
            l_U996 = 1;
            FREEZE_TIME_OF_DAY( 18, 0 );
        }
    }
    if (NOT l_U997)
    {
        if (GET_CUTSCENE_TIME_MS() >= 21780)
        {
            sub_429( "GA", "Suspending music ROOFTOP_SONG_03 ROOFTOP_SONG_03_1 over 12 seconds.", 0 );
            AUDIO_MUSIC_SUSPEND( 12000 );
            l_U997 = 1;
        }
    }
    if (NOT l_U998)
    {
        if (GET_CUTSCENE_TIME_MS() >= 28692)
        {
            sub_15087( 897560185, ref g_U821 );
            sub_15087( -649839305, ref g_U821 );
            sub_429( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_2 mood. Fade in 5 sec", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_2", "", 0.00000000, 5000, -1, -1082130432, 0 );
            l_U998 = 1;
        }
    }
    if ((NOT l_U999) AND (l_U998))
    {
        if (sub_23238( ref g_U821 ))
        {
            if (GET_CUTSCENE_TIME_MS() >= 37000)
            {
                sub_429( "GA", "Making 01_02_RP skippable.", 0 );
                CUTSCENE_ENABLE_SKIP( 1 );
                l_U999 = 1;
            }
        }
    }
    return;
}

void sub_28764(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_28795( (uParam0^)[I] );
    }
    return;
}

void sub_28795(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

void sub_28987(int iParam0, int iParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;

    sub_28999( iParam0 );
    if ((IS_PED_DEAD( sub_784() )) == 0)
    {
        uVar5 = GET_WEAPON_FROM_HAND( sub_784(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            if ((sub_29178( uVar5 )) == 1)
            {
                ref iParam0->_fU0->_fU0 = uVar5;
                ref iParam0->_fU0->_fU4 = GET_WEAPON_TYPE( uVar5 );
            }
            else if ((sub_29406( uVar5 )) == 1)
            {
                ref iParam0->_fU24->_fU0 = uVar5;
                ref iParam0->_fU24->_fU4 = GET_WEAPON_TYPE( uVar5 );
            }
        }
        uVar6 = GET_WEAPON_FROM_HAND( sub_784(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar6 )) == 1)
        {
            ref iParam0->_fU12->_fU0 = uVar6;
            ref iParam0->_fU12->_fU4 = GET_WEAPON_TYPE( uVar6 );
        }
        uVar7 = GET_WEAPON_FROM_HOLSTER( sub_784(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
        {
            ref iParam0->_fU36->_fU0 = uVar7;
            ref iParam0->_fU36->_fU4 = GET_WEAPON_TYPE( uVar7 );
        }
        uVar8 = GET_WEAPON_FROM_HOLSTER( sub_784(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar8 )) == 1)
        {
            ref iParam0->_fU48->_fU0 = uVar8;
            ref iParam0->_fU48->_fU4 = GET_WEAPON_TYPE( uVar8 );
        }
        uVar9 = GET_WEAPON_FROM_HOLSTER( sub_784(), 2 );
        if ((GET_DOES_WEAPON_EXIST( uVar9 )) == 1)
        {
            ref iParam0->_fU60->_fU0 = uVar9;
            ref iParam0->_fU60->_fU4 = GET_WEAPON_TYPE( uVar9 );
        }
    }
    if (iParam1 == 0)
    {
        if ((IS_PED_DEAD( sub_784() )) == 0)
        {
            uVar10 = GET_WEAPON_FROM_HAND( sub_784(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar10 )) == 1)
            {
                SELECT_WEAPON_TO_HAND( sub_784(), 0, 0, uParam2 );
            }
            uVar11 = GET_WEAPON_FROM_HAND( sub_784(), 1, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar11 )) == 1)
            {
                SELECT_WEAPON_TO_HAND( sub_784(), 0, 1, uParam2 );
            }
        }
    }
    else if (iParam1 == 1)
    {
        if ((IS_PED_DEAD( sub_784() )) == 0)
        {
            uVar12 = GET_WEAPON_FROM_HAND( sub_784(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar12 )) == 1)
            {
                if ((sub_29406( uVar12 )) == 1)
                {
                    SELECT_WEAPON_TO_HAND( sub_784(), 0, 0, uParam2 );
                }
            }
            uVar13 = GET_WEAPON_FROM_HAND( sub_784(), 1, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar13 )) == 1)
            {
                SELECT_WEAPON_TO_HAND( sub_784(), 0, 1, uParam2 );
            }
        }
    }
    return;
}

void sub_28999(int iParam0)
{
    ref iParam0->_fU0->_fU0 = 0;
    ref iParam0->_fU0->_fU4 = 0;
    ref iParam0->_fU12->_fU0 = 0;
    ref iParam0->_fU12->_fU4 = 0;
    ref iParam0->_fU24->_fU0 = 0;
    ref iParam0->_fU24->_fU4 = 0;
    ref iParam0->_fU36->_fU0 = 0;
    ref iParam0->_fU36->_fU4 = 0;
    ref iParam0->_fU48->_fU0 = 0;
    ref iParam0->_fU48->_fU4 = 0;
    ref iParam0->_fU60->_fU0 = 0;
    ref iParam0->_fU60->_fU4 = 0;
    return;
}

int sub_29178(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

int sub_29406(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == -2075384407) || ((iVar3 == 10648147) || ((iVar3 == 1224272620) || ((iVar3 == 1478009203) || ((iVar3 == 1964270085) || ((iVar3 == -110877124) || ((iVar3 == 427207702) || ((iVar3 == 319712764) || ((iVar3 == 514118749) || ((iVar3 == -184942895) || ((iVar3 == -168327769) || ((iVar3 == 434544317) || ((iVar3 == -1659006841) || ((iVar3 == 930042831) || ((iVar3 == 1001413062) || ((iVar3 == 377623895) || ((iVar3 == -1312131151) || ((iVar3 == -1787162676) || ((iVar3 == 724901397) || ((iVar3 == 57534114) || ((iVar3 == 840671040) || ((iVar3 == 1308526797) || ((iVar3 == -1074756423) || ((iVar3 == 1992962408) || (iVar3 == -1013714740)))))))))))))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

int sub_30792()
{
    return 1;
}

void sub_30809()
{
    sub_429( "GA", "P_ML_0102RP_PrepareBlendout start", 0 );
    FREEZE_TIME_OF_DAY( 18, 0 );
    SET_PED_PTFX_SPLASH_OUT_SPECIAL_EFFECT( 0 );
    sub_5015( ref l_U993 );
    sub_30901( 591762127, ref g_U821 );
    SET_PED_NUM_CHARGERS_OVERRIDE( sub_784(), 0 );
    SET_CAM_VIEW_MODE( 0 );
    l_U124._fU64 = 1;
    if (NOT l_U121)
    {
        sub_31181( sub_784(), g_U1333[3], g_U1450[3] );
    }
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U1486[3], 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U1522[3], 1065353216, 0 );
    CAMERA_PLAY_ANIMATED( "LEVEL_S_ROOFTOP_CP_04", "B_OUT_01_02_RP_CAM", 0, 0, 0, 0, 0, 0, 0 );
    SET_FORCED_AIM_INTENTION_DIRECTION( 0.02719300, 0.99629000, -0.00154100 );
    SET_FORCED_FORWARD_DIRECTION( 0.00000000, 1.00000000, 0.00000000 );
    sub_429( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_2_3 mood. Fade in 8 sec, out 5 sec", 0 );
    AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_2_3", "", 0.00000000, 8000, 5000, -1082130432, 0 );
    l_U766 = 1;
    l_U512 = 1;
    sub_429( "GA", "P_ML_0102RP_PrepareBlendout end", 0 );
    return;
}

void sub_30901(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_3453( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

void sub_31181(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

int sub_31625()
{
    if (l_U937._fU52)
    {
        DO_SCREEN_FADE_IN( 0 );
        sub_1296();
    }
    if (sub_31662())
    {
        if (sub_33016())
        {
            if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_ROOFTOP_CP_04", "B_OUT_01_02_RP_CAM" )) - 1))
            {
                SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U1486[3], 1065353216, 0 );
                SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U1522[3], 1065353216, 0 );
                CAMERA_FREEZE_FRAME( 1, 1000, 0, 0 );
                sub_429( "GA", "Playing audio music one shot ROOFTOP_ONESHOT_LOBBY", 0 );
                AUDIO_MUSIC_PLAY_ONESHOT();
                return 1;
            }
        }
    }
    return 0;
}

int sub_31662()
{
    int[4] iVar2;

    array(ref iVar2, 4);
    iVar2[0] = 7;
    iVar2[1] = 3;
    iVar2[2] = 4;
    iVar2[3] = 0;
    switch (l_U766)
    {
        case 1:
        sub_429( "GA", "e_ML_DeadBody_SpawnState = ENTITY_STATE_INIT", 0 );
        l_U767 = 0;
        sub_429( "GA", "e_ML_DeadBody_SpawnState = ENTITY_STATE_CREATING", 0 );
        l_U766 = 2;
        break;
        case 2:
        l_U821[l_U767] = sub_26897( ref l_U768[l_U767] );
        if (NOT (IS_PED_DEAD( l_U821[l_U767] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U821[l_U767], ref g_U1571 );
            sub_31962( l_U821[l_U767], iVar2[l_U767] );
        }
        l_U767++;
        if (l_U767 >= 4)
        {
            sub_429( "GA", "e_ML_DeadBody_SpawnState = ENTITY_STATE_COMPLETE", 0 );
            l_U766 = 4;
        }
        break;
    }
    if (l_U766 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

void sub_31962(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
        sub_7431( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

int sub_33016()
{
    unknown uVar2;

    switch (l_U512)
    {
        case 1:
        sub_429( "GA", "e_ML_LobbyEnemySpawnState = ENTITY_STATE_INIT", 0 );
        sub_33131( ref l_U574, 1056964608, 0 );
        l_U513 = 0;
        sub_429( "GA", "e_ML_LobbyEnemySpawnState = ENTITY_STATE_CREATING", 0 );
        l_U512 = 2;
        break;
        case 2:
        l_U567[l_U513] = sub_26897( ref l_U514[l_U513] );
        sub_33427( l_U567[l_U513], ref l_U574 );
        if (NOT (IS_PED_DEAD( l_U567[l_U513] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U567[l_U513], ref g_U1571 );
            SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U567[l_U513], 0 );
            SET_PED_PATH_CAN_DROP_FROM_HEIGHT( l_U567[l_U513], 0 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U567[l_U513], 1 );
        }
        sub_27657( l_U567[l_U513] );
        l_U513++;
        if (l_U513 >= 4)
        {
            sub_429( "GA", "e_ML_LobbyEnemySpawnState = ENTITY_STATE_POST_CREATE_SETUP", 0 );
            l_U512 = 3;
        }
        break;
        case 3:
        sub_27880( ref l_U567, "pi_ML_Lobby_Enemy" );
        if (NOT (IS_PED_DEAD( l_U567[0] )))
        {
            sub_33994( ref l_U567[0], "AIT_NOVICE", 3, 25 );
            uVar2 = sub_7760( l_U567[0], 68019059, 25000, 0, 0 );
            SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 25 );
        }
        if (NOT (IS_PED_DEAD( l_U567[1] )))
        {
            sub_33994( ref l_U567[1], "AIT_NOVICE", 3, 20 );
            uVar2 = sub_7760( l_U567[1], 68019059, 25000, 0, 0 );
            SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 25 );
            SET_PED_ALERTNESS( l_U567[1], 3 );
        }
        if (NOT (IS_PED_DEAD( l_U567[2] )))
        {
            sub_33994( ref l_U567[2], "AIT_NOVICE", 3, 20 );
            uVar2 = sub_7760( l_U567[2], 68019059, 25000, 0, 0 );
            SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 25 );
            SET_PED_ALERTNESS( l_U567[2], 3 );
        }
        if (NOT (IS_PED_DEAD( l_U567[3] )))
        {
            sub_33994( ref l_U567[3], "AIT_NOVICE", 3, 25 );
            uVar2 = sub_7760( l_U567[3], -168327769, 25000, 0, 0 );
            SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 25 );
            SET_PED_ALERTNESS( l_U567[3], 3 );
        }
        sub_429( "GA", "e_ML_LobbyEnemySpawnState = ENTITY_STATE_COMPLETE", 0 );
        l_U512 = 4;
        break;
    }
    if (l_U512 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

void sub_33131(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
        }
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

void sub_33427(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
        sub_7431( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
            sub_33131( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
            sub_33131( iParam1, 1056964608, 0 );
        }
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

void sub_33994(unknown uParam0, unknown uParam1, float fParam2, float fParam3)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    return;
}

void sub_34739(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    sub_429( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return sub_34864( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 34824, 34842, uParam8 );
}

void sub_34824()
{
    return;
}

int sub_34842()
{
    return 1;
}

void sub_34864(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

void sub_35165(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

void sub_35228(unknown uParam0, unknown uParam1)
{
    sub_1639( uParam0, uParam1, 1, 0 );
    sub_1775( uParam0 );
    return;
}

void sub_35278()
{
    sub_429( "SA", "P_ML_PLAY_ELEVATOR_BELL", 0 );
    l_U1065 = GET_SOUND_ID();
    PLAY_SOUND_FROM_OBJECT( l_U1065, "PUBLIC_ELEVATOR_BELL", l_U1027 );
    return;
}

void sub_35389(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
            sub_429( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
            sub_429( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                sub_429( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
            sub_429( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
            sub_429( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
            sub_429( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
            sub_22825( iParam0->_fU0, 0 );
            sub_429( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
            sub_36256( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
        sub_36256( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
        sub_429( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                sub_36784( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
        sub_36256( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
            sub_37133( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
        sub_37133( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

void sub_36256(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD( sub_784() )))
        {
            SET_PLAYER_CONTROL( sub_806(), 0, uParam2 );
            SET_PED_DUCKING( sub_784(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY( sub_784() );
            }
            SET_PED_INVINCIBLE( sub_784(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

void sub_36784(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD( sub_784() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND( sub_784(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND( sub_784(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_784(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_784(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_784(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

void sub_37133(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD( sub_784() )))
    {
        SET_PLAYER_CONTROL( sub_806(), 1, 0 );
        SET_PED_INVINCIBLE( sub_784(), 0 );
        if (bParam0)
        {
            sub_37214();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

void sub_37214()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD( sub_784() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND( sub_784(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND( sub_784(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_784(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_784(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

void sub_37548(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

    sub_429( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
        sub_429( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
        sub_8414( iParam1 );
        sub_37807( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
            sub_38258( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
            sub_38258( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_38490( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
            sub_38258( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_38490( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_38490( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
            sub_38258( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_38490( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_38490( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_38490( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
            sub_38258( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_38490( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_38490( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_38490( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if (sub_38490( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
            sub_40048( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
    sub_429( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

void sub_37807(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 = sub_5778( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
        sub_429( "TEH", "Ending context", 0 );
        sub_429( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

void sub_38258(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

void sub_38490(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

void sub_40048(int iParam0)
{
    sub_7431( "CHECKPOINT DATA" );
    sub_40087( iParam0->_fU4 );
    sub_40110( iParam0->_fU16 );
    sub_40110( iParam0->_fU20 );
    sub_40110( iParam0->_fU24 );
    sub_40153( iParam0->_fU28 );
    sub_40153( iParam0->_fU56 );
    sub_40153( iParam0->_fU60 );
    sub_40153( iParam0->_fU64 );
    sub_40153( iParam0->_fU68 );
    sub_40153( iParam0->_fU72 );
    sub_40153( iParam0->_fU76 );
    sub_40153( iParam0->_fU80 );
    sub_40153( iParam0->_fU84 );
    sub_40153( iParam0->_fU88 );
    sub_40153( iParam0->_fU92 );
    sub_40110( iParam0->_fU32 );
    sub_40153( iParam0->_fU36 );
    sub_40153( iParam0->_fU40 );
    sub_40153( iParam0->_fU44 );
    sub_40110( iParam0->_fU136 );
    sub_40358( iParam0->_fU140 );
    sub_40153( iParam0->_fU52 );
    sub_7431( "---nRightHolsterAttachmentEnabled: " );
    sub_40153( iParam0->_fU96 );
    sub_7431( "---nRightHolsterAttachmentToggled: " );
    sub_40153( iParam0->_fU100 );
    sub_7431( "---nLeftHolsterAttachmentEnabled: " );
    sub_40153( iParam0->_fU104 );
    sub_7431( "---nLeftHolsterAttachmentToggled: " );
    sub_40153( iParam0->_fU108 );
    sub_7431( "---nRifleHolsterAttachmentEnabled: " );
    sub_40153( iParam0->_fU112 );
    sub_7431( "---nRifleHolsterAttachmentToggled: " );
    sub_40153( iParam0->_fU116 );
    sub_7431( "---nRightHandAttachmentEnabled: " );
    sub_40153( iParam0->_fU120 );
    sub_7431( "---nRightHandAttachmentToggled: " );
    sub_40153( iParam0->_fU124 );
    sub_7431( "---nLeftHandAttachmentEnabled: " );
    sub_40153( iParam0->_fU128 );
    sub_7431( "---nLeftHandAttachmentToggled: " );
    sub_40153( iParam0->_fU132 );
    sub_40153( l_U1 );
    sub_40153( 144 );
    return;
}

void sub_40087(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return;
}

void sub_40110(unknown uParam0)
{
    return;
}

void sub_40153(unknown uParam0)
{
    return;
}

void sub_40358(boolean bParam0)
{
    if (bParam0)
    {
        ;
    }
    return;
}

void sub_41176()
{
    sub_429( "CCB", "P_START_SP_CHALLENGES", 0 );
    return;
}

void sub_41230()
{
    sub_429( "SA", "P_ML_RELEASE_ELEVATOR_BELL_SOUND", 0 );
    sub_4353( l_U1065, 0 );
    sub_4516( ref l_U1065 );
    return;
}

void sub_41314()
{
    sub_429( "SA", "P_ML_OPEN_ELEVATOR_DOORS", 0 );
    PLAY_OBJECT_ANIM( l_U1027, "P_RP_ElvAnm_Aa_H", "fs_objmodels", 1000.00000000, 0, 1 );
    SET_OBJECT_ANIM_CURRENT_TIME( l_U1027, "P_RP_ElvAnm_Aa_H", "fs_objmodels", 0.00000000 );
    SET_OBJECT_ANIM_SPEED( l_U1027, "P_RP_ElvAnm_Aa_H", "fs_objmodels", 1.00000000 );
    l_U1066 = GET_SOUND_ID();
    PLAY_SOUND_FROM_OBJECT( l_U1066, "PUBLIC_ELEVATOR_DOOR_OPEN", l_U1027 );
    return;
}

int sub_41672()
{
    switch (l_U748)
    {
        case 1:
        sub_429( "MF", "e_ML_Concierge_SpawnState = ENTITY_STATE_INIT", 0 );
        l_U749 = 0;
        sub_429( "MF", "e_ML_Concierge_SpawnState = ENTITY_STATE_CREATING", 0 );
        l_U748 = 2;
        break;
        case 2:
        l_U764[l_U749] = sub_26897( ref l_U750[l_U749] );
        if (NOT (IS_PED_DEAD( l_U764[l_U749] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U764[l_U749], ref g_U1571 );
            SET_PED_AS_ONE_SHOT_KILL( l_U764[l_U749], 1 );
            SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( l_U764[l_U749], 1 );
            if ((IS_GERMAN_VERSION() == 1) || (IS_JAPANESE_GAME() == 1))
            {
                SET_PED_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP( l_U764[l_U749], 0, 0 );
                SET_PED_GORE_FROM_PLAYER( l_U764[l_U749], 0 );
            }
        }
        l_U749++;
        if (l_U749 >= 1)
        {
            sub_429( "MF", "e_ML_Concierge_SpawnState = ENTITY_STATE_COMPLETE", 0 );
            l_U748 = 4;
        }
        break;
    }
    if (l_U748 == 4)
    {
        l_U748 = 0;
        return 1;
        break;
    }
    return 0;
}

void sub_42169()
{
    sub_429( "MF", "P_ML_START_VIG_03B - START", 0 );
    if (NOT (IS_PED_DEAD( l_U764[0] )))
    {
        ISEQ_REGISTER_ENTITY( 36524849, "ML_CIV", l_U764[0], 0 );
        ISEQ_START( 36524849 );
        sub_42321( l_U764[0], "S_FASHION_CONCIERGE_VIG", ref g_U1168 );
    }
    sub_429( "MF", "P_ML_START_VIG_03B - END", 0 );
    return;
}

void sub_42321(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = -1;
    if (sub_4059( uParam1, uParam2 ))
    {
        iVar5 = sub_4158( uParam1, uParam2 );
        if (NOT (iVar5 == -1))
        {
            if (NOT (IS_PED_DEAD( uParam0 )))
            {
                PLAY_SCRIPT_STREAM_FROM_PED( uParam0, iVar5 );
            }
        }
        else
        {
            SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

void sub_42614()
{
    if (l_U124._fU64)
    {
        if (NOT (sub_42644( l_U124 )))
        {
            sub_2432( ref l_U145 );
            sub_1775( ref l_U154 );
            l_U124._fU64 = 0;
        }
    }
    else if (sub_42764( ref l_U124, 0 ))
    {
        sub_2432( ref l_U154 );
        sub_1775( ref l_U145 );
    }
    if (sub_1895( ref l_U154 ))
    {
        SET_CAM_VIEW_MODE( 1 );
    }
    if (sub_1895( ref l_U145 ))
    {
        SET_CAM_VIEW_MODE( 0 );
    }
    return;
}

void sub_42644(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return sub_42662( sub_784(), uParam0 );
}

int sub_42662(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

void sub_42764(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 = sub_42662( sub_784(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

void sub_42935()
{
    if (NOT (IS_PED_DEAD( l_U764[0] )))
    {
        if ((ISEQ_QUERY_ENTITY_STATE( 36524849, "ML_CIV", 6 )) || (ISEQ_QUERY_ENTITY_STATE( 36524849, "ML_CIV", 5 )))
        {
            SET_PED_CORPSE_FROM_ANIM( l_U764[0], "LEVEL_S_ROOFTOP_CP_04", "VIG_03B_RP", 1.00000000, 0 );
        }
    }
    return;
}

int sub_43094()
{
    if (NOT (IS_PED_DEAD( l_U567[0] )))
    {
        if (NOT (IS_PED_ON_SCREEN( l_U567[0], 1 )))
        {
            return 0;
        }
    }
    return 1;
}

void sub_43166()
{
    sub_429( "GA", "P_ML_ELEVATOR_ENEMY_RUN_OFF start", 0 );
    sub_28795( l_U567[0] );
    if (NOT (IS_PED_DEAD( l_U567[0] )))
    {
        SET_PED_FLAG_LOCK_TO_COVER( l_U567[0], 1 );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U567[0], 1 );
        SET_BLOCKING_OF_PED_TARGETTING( l_U567[0], 1 );
        SET_PED_AS_ONE_SHOT_KILL( l_U567[0], 1 );
        ISEQ_REGISTER_ENTITY( 1241506505, "GMED1", l_U567[0], 0 );
        ISEQ_START( 1241506505 );
        SET_PED_VISIBLE( l_U567[0], 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( l_U567[0], 0 );
    }
    sub_429( "GA", "P_ML_ELEVATOR_ENEMY_RUN_OFF end", 0 );
    return;
}

void sub_43791(unknown uParam0)
{
    sub_429( "GA", "P_ML_SET_DESK_SPATIALDATA_ENABLED start", 0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-13", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-12", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-11", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-10", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-9", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-8", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-7", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-6", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-5", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-4", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-3", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-23", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline28-08", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-22", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-21", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-20", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-19", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-18", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-17", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-16", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-15", uParam0 );
    ENABLE_NORMAL_LINE( "lobby", "GrabSpline29-14", uParam0 );
    sub_429( "GA", "P_ML_SET_DESK_SPATIALDATA_ENABLED end", 0 );
    return;
}

void sub_44717(unknown uParam0, unknown uParam1)
{
    sub_44729( uParam1 );
    sub_44809( 0, sub_784(), "MAX", uParam1, 2, 0 );
    sub_44809( 1, sub_784(), "MAX", uParam1, 2, 0 );
    sub_45034( uParam0, uParam1, 8, 1 );
    return;
}

void sub_44729(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

void sub_44809(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

void sub_45034(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return sub_45058( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

void sub_45058(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return sub_45113( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

int sub_45113(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT (sub_45148( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
    sub_45642( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

int sub_45148(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

void sub_45642(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

void sub_45837()
{
    sub_429( "SA", "P_ML_CLOSE_ELEVATOR_DOORS", 0 );
    PLAY_OBJECT_ANIM( l_U1027, "P_RP_ElvAnm_Aa_H", "fs_objmodels", 1000.00000000, 0, 1 );
    SET_OBJECT_ANIM_CURRENT_TIME( l_U1027, "P_RP_ElvAnm_Aa_H", "fs_objmodels", 1.00000000 );
    SET_OBJECT_ANIM_SPEED( l_U1027, "P_RP_ElvAnm_Aa_H", "fs_objmodels", -1.00000000 );
    l_U1066 = GET_SOUND_ID();
    PLAY_SOUND_FROM_OBJECT( l_U1066, "PUBLIC_ELEVATOR_DOOR_OPEN", l_U1027 );
    return;
}

void sub_46145(int iParam0, unknown uParam1)
{
    int Result;
    int I;
    int J;

    Result = 0;
    if (NOT (IS_PED_DEAD( sub_784() )))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            if (sub_42644( iParam0->_fU0[I] ))
            {
                Result = 1;
            }
        }
    }
    if ((uParam1) AND (Result))
    {
        for ( J = 0; J < iParam0->_fU508; J++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[J]._fU0, 0 );
        }
    }
    iParam0->_fU548 = 1;
    return Result;
}

void sub_46342(int iParam0, unknown uParam1)
{
    if (iParam0->_fU548)
    {
        return 0;
    }
    else
    {
        iParam0->_fU548 = sub_46145( iParam0, uParam1 );
    }
    return iParam0->_fU548;
}

void sub_46764()
{
    sub_429( "GA", "P_ML_START_LOBBY_ENEMIES_WAVE_B start", 0 );
    if (NOT (IS_PED_DEAD( sub_784() )))
    {
        sub_28795( l_U567[1] );
        sub_46869( ref l_U572, l_U567[1], 1 );
        if (NOT (IS_PED_DEAD( l_U567[1] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( l_U567[1], 1 );
            SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U567[1], 1 );
            SET_BLOCKING_OF_PED_TARGETTING( l_U567[1], 1 );
            ISEQ_REGISTER_ENTITY( 1565133149, "GMED", l_U567[1], 0 );
        }
        sub_28795( l_U567[2] );
        if (NOT (IS_PED_DEAD( l_U567[2] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( l_U567[2], 1 );
            REGISTER_TARGET( l_U567[2], sub_784() );
            TASK_AIM_GUN_AT_PED( l_U567[2], sub_784(), -1, 0 );
            ISEQ_REGISTER_ENTITY( 1565133149, "GMED1", l_U567[2], 0 );
        }
        ISEQ_START( 1565133149 );
    }
    sub_429( "GA", "P_ML_START_LOBBY_ENEMIES_WAVE_B end", 0 );
    return;
}

void sub_46869(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

void sub_47492(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_3453( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_48440(unknown uParam0, boolean bParam1)
{
    UI_SET( 25, 2, 1537, "SPSlotLoader", 1537, uParam0 );
    if (bParam1)
    {
        STOP_IMAGEFX( g_U1697, 0 );
        g_U1697 = PLAY_IMAGEFX( "INTERLACE_DESATURATED_PANEL_02", 3, 0 );
    }
    return;
}

void sub_49040()
{
    sub_429( "SA", "P_ML_UNBLOCK_EASY_KILL start", 0 );
    if ((NOT (IS_PED_DEAD( sub_784() ))) AND (NOT (IS_PED_DEAD( l_U567[0] ))))
    {
        SET_BLOCKING_OF_PED_TARGETTING( l_U567[0], 0 );
        REGISTER_TARGET( l_U567[0], sub_784() );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U567[0], 0 );
        SET_PED_AS_ONE_SHOT_KILL( l_U567[0], 0 );
    }
    if ((NOT (IS_PED_DEAD( sub_784() ))) AND (NOT (IS_PED_DEAD( l_U567[1] ))))
    {
        sub_46869( ref l_U573, l_U567[1], 1 );
        SET_BLOCKING_OF_PED_TARGETTING( l_U567[1], 0 );
        REGISTER_TARGET( l_U567[1], sub_784() );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U567[1], 0 );
    }
    if ((NOT (IS_PED_DEAD( sub_784() ))) AND (NOT (IS_PED_DEAD( l_U567[2] ))))
    {
        sub_46869( ref l_U573, l_U567[2], 1 );
        SET_BLOCKING_OF_PED_TARGETTING( l_U567[2], 0 );
        REGISTER_TARGET( l_U567[2], sub_784() );
        TASK_COMBAT_PED( l_U567[2], sub_784() );
    }
    sub_429( "SA", "P_ML_UNBLOCK_EASY_KILL end", 0 );
    return;
}

int sub_49490()
{
    if (l_U419)
    {
        if (IS_PED_DEAD( l_U567[0] ))
        {
            return 1;
        }
        else if (NOT (IS_PED_DEAD( sub_784() )))
        {
            if (HAS_PED_BEEN_DAMAGED_BY_PED( l_U567[0], sub_784(), 0 ))
            {
                return 1;
            }
        }
    }
    if (IS_PED_DEAD( l_U567[1] ))
    {
        return 1;
    }
    else if (NOT (IS_PED_DEAD( sub_784() )))
    {
        if (HAS_PED_BEEN_DAMAGED_BY_PED( l_U567[1], sub_784(), 0 ))
        {
            return 1;
        }
    }
    if (IS_PED_DEAD( l_U567[2] ))
    {
        return 1;
    }
    else if (NOT (IS_PED_DEAD( sub_784() )))
    {
        if (HAS_PED_BEEN_DAMAGED_BY_PED( l_U567[2], sub_784(), 0 ))
        {
            return 1;
        }
    }
    return 0;
}

void sub_50247()
{
    int I;

    sub_429( "GA", "P_ML_RELEASE_LOBBY_ENEMIES_WAVE_B start", 0 );
    for ( I = 0; I < l_U567; I++ )
    {
        if ((NOT (IS_PED_DEAD( sub_784() ))) AND (NOT (IS_PED_DEAD( l_U567[I] ))))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U567[I], 0 );
            SET_PED_FLAG_LOCK_TO_COVER( l_U567[I], 0 );
            SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U567[I], 0 );
            SET_BLOCKING_OF_PED_TARGETTING( l_U567[I], 0 );
            REGISTER_TARGET( l_U567[I], sub_784() );
        }
        sub_50460( l_U567[I] );
    }
    sub_429( "GA", "P_ML_RELEASE_LOBBY_ENEMIES_WAVE_B end", 0 );
    return;
}

void sub_50460(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        RESET_PED_TETHERING( uParam0 );
    }
    return;
}

void sub_50585()
{
    unknown uVar2;

    sub_429( "GA", "P_ML_START_LOBBY_ENEMY_WAVE_C start", 0 );
    sub_28795( l_U567[3] );
    if ((NOT (IS_PED_DEAD( sub_784() ))) AND (NOT (IS_PED_DEAD( l_U567[3] ))))
    {
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 4.23467900, 44.58582000, -61.19992000, 3, 20000, 1048576000, 0, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0, sub_784() );
        CLOSE_SEQUENCE_TASK( uVar2 );
        CLEAR_PED_TASKS( l_U567[3] );
        REGISTER_TARGET( l_U567[3], sub_784() );
        TASK_PERFORM_SEQUENCE( l_U567[3], uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
    }
    sub_429( "GA", "P_ML_START_LOBBY_ENEMY_WAVE_C end", 0 );
    return;
}

void sub_51559()
{
    if ((NOT (IS_PLAYER_DEAD( sub_806() ))) AND ((NOT (IS_PED_DEAD( sub_784() ))) AND ((NOT g_U1699) AND (sub_51569()))))
    {
        if (NOT g_U1698)
        {
            if ((GET_PAYNEKILLER_AMT() > 0) AND ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND (IS_PLAYER_CONTROL_ON( sub_806() )))))
            {
                if (sub_51716() < 0.40000000)
                {
                    sub_48440( "TUT_PAINKILLER", 1 );
                    SET_GAME_PAUSED( 1 );
                    DISABLE_RESTART_CHECKPOINT( 1 );
                    SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
                    sub_1639( ref g_U1700, 500, 1, 1 );
                    sub_1775( ref g_U1700 );
                    g_U1698 = 1;
                }
            }
        }
        else if ((g_U1700._fU16) || (sub_1895( ref g_U1700 )))
        {
            if (IS_CONTROL_PRESSED( 2, 19 ))
            {
                sub_429( "GA", "Player completed painkiller tutorial.", 0 );
                sub_1296();
                STOP_IMAGEFX( g_U1697, 0 );
                SET_GAME_PAUSED( 0 );
                DISABLE_RESTART_CHECKPOINT( 0 );
                SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
                SET_PLAYER_FORCE_PAIN_KILLER( 1 );
                g_U1698 = 0;
                g_U1699 = 1;
            }
        }
        if ((IS_LAST_MAN_STANDING_ACTIVE()) || (IS_BULLET_CAMERA_ACTIVE()))
        {
            sub_429( "GA", "Prematurely ending painkiller tutorial.", 0 );
            sub_1296();
            SET_GAME_PAUSED( 0 );
            DISABLE_RESTART_CHECKPOINT( 0 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
            SET_PLAYER_FORCE_PAIN_KILLER( 0 );
            g_U1698 = 0;
        }
    }
    if ((IS_PED_DEAD( sub_784() )) AND (g_U1698))
    {
        sub_52199();
    }
    return;
}

int sub_51569()
{
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (IS_TUTORIAL_COMPLETE())
    {
        return 0;
    }
    return 1;
}

float sub_51716()
{
    unknown uVar2;
    unknown uVar3;
    float Result;

    if (NOT (IS_PED_DEAD( sub_784() )))
    {
        uVar2 = TO_FLOAT( (GET_PED_MAX_HEALTH( sub_784() )) - 100 );
        uVar3 = TO_FLOAT( (GET_PED_HEALTH( sub_784() )) - 100 );
        Result = uVar3 / uVar2;
        return Result;
    }
    return 0.00000000;
}

void sub_52199()
{
    if (g_U1698)
    {
        sub_1296();
        STOP_IMAGEFX( g_U1697, 0 );
        SET_GAME_PAUSED( 0 );
        DISABLE_RESTART_CHECKPOINT( 0 );
        SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
        SET_PLAYER_FORCE_PAIN_KILLER( 0 );
        g_U1698 = 0;
    }
    return;
}

void sub_52306(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            if (IS_PED_DEAD( (uParam0^)[I] ))
            {
                Result++;
            }
        }
    }
    return Result;
}

void sub_52606(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

void sub_52719(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

void sub_53175()
{
    sub_429( "GA", "P_RESET_MAX_ACTION_TREE start", 0 );
    if (NOT (IS_PED_DEAD( sub_784() )))
    {
        if (IS_PLAYER_SHOOTDODGING())
        {
            SCRIPT_ASSERT( "Do not try to reset Max's action tree when he is shoot dodging.", 0 );
            sub_429( "GA", "You cannot reset Max's action tree during a shoot dodge.", 0 );
        }
        else
        {
            PED_ACTION_TREE_PLAY_NODE( sub_784(), "/Global/Player" );
        }
    }
    sub_429( "GA", "P_RESET_MAX_ACTION_TREE end", 0 );
    return;
}

void sub_53565()
{
    sub_429( "GA", "P_ML_OPEN_HALLWAY_DOORS start", 0 );
    sub_14516( ref l_U433, 1, 0, 1065353216 );
    sub_14667( ref l_U433, 1 );
    sub_14516( ref l_U440, 0, 0, 1065353216 );
    sub_14667( ref l_U440, 1 );
    sub_429( "GA", "P_ML_OPEN_HALLWAY_DOORS end", 0 );
    return;
}

void sub_53719()
{
    unknown uVar2;

    sub_429( "GA", "P_ML_START_DOOR_CRASH_ENEMY start", 0 );
    l_U652 = sub_26897( ref l_U639 );
    uVar2 = sub_7760( l_U652, 724901397, 25000, 0, 0 );
    SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 25 );
    sub_33994( ref l_U652, "AIT_NOVICE", 2, 6 );
    if ((NOT (IS_PED_DEAD( sub_784() ))) AND (NOT (IS_PED_DEAD( l_U652 ))))
    {
        SET_ROOM_FOR_PED_BY_NAME( l_U652, ref g_U1579 );
        SET_PED_ALERTNESS( l_U652, 3 );
        SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U652, 0 );
        SET_PED_PATH_CAN_DROP_FROM_HEIGHT( l_U652, 0 );
        SET_PED_CAN_TRIGGER_BULLET_CAM( l_U652, 1 );
        SET_BULLET_CAM_PREF( l_U652, "ROOF_TUTORIAL_CUSTOM_03", "ALL_01_FAR_FAILSAFE", "ALL_01_FAR_FAILSAFE", "", 0, 0, 0, 0, 0, 0, 0, 0 );
        ALLOW_BULLET_CAMERA_SLOWDOWN( 1 );
        SET_PED_VALIDATE_BULLET_CAM_HIT( l_U652, 1 );
        SET_PED_AS_ONE_SHOT_KILL( l_U652, 1 );
        ISEQ_REGISTER_ENTITY( 931347920, "GMED", l_U652, 0 );
        ISEQ_REGISTER_ENTITY( 931347920, "DOOR_L", l_U705, 1 );
        ISEQ_START( 931347920 );
        ISEQ_REGISTER_ENTITY( -2065237615, "DOOR_R", l_U706, 1 );
        ISEQ_START( -2065237615 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U652, 1 );
        REGISTER_TARGET( l_U652, sub_784() );
        TASK_AIM_GUN_AT_PED( l_U652, sub_784(), -1, 0 );
        PLAY_PED_AMBIENT_SPEECH( l_U652, "SWEAR_ANGRY", 0, 0, 0, 0, 30000 );
    }
    sub_44729( ref l_U674 );
    if (NOT (IS_PED_DEAD( sub_784() )))
    {
        sub_44809( 0, sub_784(), "MAX", ref l_U674, 2, 0 );
    }
    if (NOT (IS_PED_DEAD( l_U652 )))
    {
        sub_44809( 1, l_U652, "M1_CS_18_AVG", ref l_U674, 2, 0 );
    }
    sub_45034( "SRTP_VIG04A", ref l_U674, 7, 1 );
    PLAY_SOUND_FROM_COORD( -1, "S_FASHION_LOBBY_DOOR_KICK", -7.57000000, 47.97000000, -60.32000000 );
    sub_429( "GA", "P_ML_START_DOOR_CRASH_ENEMY end", 0 );
    return;
}

void sub_56158(int iParam0, unknown uParam1, unknown uParam2)
{
    if (iParam0->_fU68 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU68 = sub_42662( uParam1, (iParam0^) );
        if ((iParam0->_fU68) AND (uParam2))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU68;
}

void sub_56700(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD( sub_784() )) == 0)
    {
        iVar3 = 0;
        uVar4 = GET_WEAPON_FROM_HAND( sub_784(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 0)
        {
            iVar3 = 1;
        }
        if (((sub_29178( uVar4 )) == 0) AND ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1))
        {
            iVar3 = 1;
        }
        if (iVar3 == 1)
        {
            uVar5 = sub_56805();
            if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
            {
                SELECT_WEAPON_TO_HAND( sub_784(), uVar5, 0, uParam0 );
            }
        }
    }
    return;
}

int sub_56805()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD( sub_784() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND( sub_784(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if ((sub_29178( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND( sub_784(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER( sub_784(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER( sub_784(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

int sub_57249(unknown uParam0, unknown uParam1)
{
    if (CUTSCENE_IS_LOADED( uParam1 ))
    {
        sub_7431( " is loaded." );
        return 1;
    }
    else if ((CUTSCENE_NAMED_IS_LOADING( uParam0 )) || (CUTSCENE_IS_LOADED( uParam0 )))
    {
        sub_7431( uParam0 );
        CLEAR_NAMED_CUTSCENE( uParam0 );
    }
    else if (CUTSCENE_NAMED_IS_LOADING( uParam1 ))
    {
        sub_7431( " is loading." );
    }
    else
    {
        sub_7431( uParam1 );
        sub_22825( uParam1, 0 );
    };;;
    return 0;
}

int sub_57510()
{
    return 1;
}

void sub_57529()
{
    return;
}

void sub_57547()
{
    if (l_U1000._fU52)
    {
        AUDIO_MUSIC_SUSPEND( 5000 );
        ENABLE_WALLA_ZONE( "S_FASHION_WZ_PARKING_GARAGE_STAIRS", 0 );
    }
    return;
}

void sub_57637()
{
    DO_SCREEN_FADE_OUT( 0 );
    return;
}

int sub_57663()
{
    return 1;
}

void sub_57892()
{
    sub_429( "GA", "P_RELEASE_ML_ASSETS start", 0 );
    sub_57949( ref l_U110, ref g_U821 );
    sub_30901( 591762127, ref g_U821 );
    sub_30901( -649839305, ref g_U821 );
    sub_30901( 897560185, ref g_U821 );
    sub_58058( ref l_U115, ref g_U918 );
    sub_47492( "SCRIPT_MISSION\ELEVATOR", ref g_U1221 );
    sub_47492( "SCRIPT_MISSION\S_FASHION_LOBBY", ref g_U1221 );
    sub_58371( "LEVEL_S_ROOFTOP_CP_04", ref g_U1028 );
    sub_58371( "DAM_DEAD", ref g_U1028 );
    sub_429( "GA", "P_RELEASE_ML_ASSETS end", 0 );
    return;
}

void sub_57949(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_30901( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_58058(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_58093( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_58093(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 = sub_3453( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_58371(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_3453( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

