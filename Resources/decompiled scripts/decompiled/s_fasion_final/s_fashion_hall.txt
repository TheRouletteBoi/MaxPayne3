void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U58 = 0;
    l_U59 = 0;
    l_U60 = 1500;
    l_U116 = 0;
    l_U118 = 0;
    l_U239 = 2000;
    l_U249 = 2500;
    l_U259 = 600;
    l_U292 = 200;
    l_U302 = 250;
    l_U312 = 500;
    l_U322 = 500;
    l_U332 = 1750;
    l_U580 = {-6.99000000, -1.16000000, -6.71000000};
    l_U583 = {-7.57100000, -1.39900000, -7.53000000};
    l_U586 = -30.66700000;
    l_U609 = 10000;
    l_U642 = {2.41000000, -15.77000000, -7.34000000};
    sub_440( "SP", "Script s_fashion_hall.sc is starting up...", 0 );
    sub_489();
    l_U116 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
        sub_726();
        if (l_U118 == 0)
        {
            sub_11180();
        }
        WAIT( 0 );
    }
    sub_3723( 0 );
    sub_53189();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_fashion_hall" );
    sub_440( "SP", "Script s_fashion_hall.sc is terminating...", 0 );
    return;
}

void sub_440(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    return;
}

void sub_489()
{
    sub_440( "GA", "P_HW_POPULATE_VARIABLE_ARRAYS start", 0 );
    l_U106[0] = 248373526;
    l_U106[1] = -1239591483;
    l_U106[2] = g_U719;
    l_U106[3] = -1409914275;
    l_U106[4] = 990918269;
    l_U106[5] = 1459973966;
    l_U106[6] = -274880563;
    l_U114[0] = 68019059;
    sub_440( "GA", "P_HW_POPULATE_VARIABLE_ARRAYS end", 0 );
    return;
}

void sub_726()
{
    if ((g_U723 == 0) || (g_U723 == 1))
    {
        switch (l_U118)
        {
            case 0:
            if ((sub_889()) || (IS_PED_DEAD( sub_816() )))
            {
                SET_GAME_PAUSED( 0 );
                sub_1330();
                STOP_IMAGEFX( g_U1697, 0 );
                UI_SET( 25, 2, 1537, "SPSlotLoader", 1537, "" );
                l_U118 = 1;
                sub_440( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if (sub_1488())
            {
                if (NOT (IS_PED_DEAD( sub_816() )))
                {
                    CLEAR_PED_TASKS_IMMEDIATELY( sub_816() );
                    RESET_PLAYER_INPUT_GAIT( 0 );
                    sub_1554();
                }
                l_U118 = 2;
                sub_440( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER_RESPAWN", 0 );
            }
            else if ((sub_1935( 0 )) == 1)
            {
                l_U118 = 2;
                sub_440( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER_RESPAWN", 0 );
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD( sub_816() )))
            {
                if ((g_U724[2]._fU40 != 4) AND (g_U724[2]._fU40 != 0))
                {
                    sub_440( "GA", "Shutting down script for mpm checkpoint.", 0 );
                    sub_3440( ref g_U724[2] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U724[2]._fU32 );
                    g_U1264[2] = 0;
                }
                l_U118 = 3;
                sub_440( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
            sub_440( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD( sub_816() ))) AND (NOT (IS_PLAYER_DEAD( sub_838() ))))
            {
                SET_PLAYER_CONTROL( sub_838(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK( sub_816() ))
                {
                    SET_PED_FORCED_TO_WALK( sub_816(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
            sub_3723( 1 );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "milo_rtp_str_01", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "milo_rtp_str_01", 0 ), GET_HASH_KEY( "RTP_strs_Rm01" ) );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "MILO_RTP_cnd_A", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "MILO_RTP_cnd_A", 0 ), GET_HASH_KEY( "MloRoom01" ) );
            l_U118 = 4;
            sub_440( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
            sub_440( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U70._fU0)
            {
                sub_6964( ref l_U70, sub_816() );
            }
            l_U118 = 5;
            sub_440( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
            sub_440( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U116 = 1;
            l_U118 = 0;
            sub_440( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

int sub_816()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED( sub_838() );
    }
    return 0;
}

void sub_838()
{
    return GET_PLAYER_ID();
}

int sub_889()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD( sub_816() )))
        {
            SET_PED_FORCED_TO_WALK( sub_816(), 0 );
            SET_PLAYER_FORCED_AIM( sub_838(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE( sub_838(), 1 );
            if ((IS_PED_VISIBLE( sub_816() )) == 0)
            {
                SET_PED_VISIBLE( sub_816(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

void sub_1330()
{
    UI_SET( 15, 2, 1537, "animMainText", 257, 1 );
    return;
}

void sub_1488()
{
    return g_U648;
}

void sub_1554()
{
    sub_440( "GA", "P_RESET_MAX_ACTION_TREE start", 0 );
    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        if (IS_PLAYER_SHOOTDODGING())
        {
            SCRIPT_ASSERT( "Do not try to reset Max's action tree when he is shoot dodging.", 0 );
            sub_440( "GA", "You cannot reset Max's action tree during a shoot dodge.", 0 );
        }
        else
        {
            PED_ACTION_TREE_PLAY_NODE( sub_816(), "/Global/Player" );
        }
    }
    sub_440( "GA", "P_RESET_MAX_ACTION_TREE end", 0 );
    return;
}

int sub_1935(int iParam0)
{
    iParam0 = 1;
    switch (l_U59)
    {
        case 0:
        if (NOT (sub_1996( ref l_U61 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_816() )))
            {
                l_U60 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
            sub_2106( ref l_U61, l_U60, 1, 1 );
            sub_2242( ref l_U61 );
        }
        if (sub_2362( ref l_U61 ))
        {
            sub_440( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_816() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD( sub_838() )))
            {
                SET_PLAYER_CONTROL( sub_838(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U59 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U59 = 2;
            }
            else
            {
                l_U59 = 3;
            }
        }
        break;
        case 2:
        sub_440( "NS", "Player will QUIT", 0 );
        sub_2849();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
        sub_440( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        sub_2849();
        return 1;
        break;
    }
    return 0;
}

int sub_1996(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_2106(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

void sub_2242(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

int sub_2362(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

void sub_2849()
{
    sub_440( "NS", "P_PostFailRetryCleanup", 0 );
    sub_2899( ref l_U61 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD( sub_838() )))
    {
        SET_PLAYER_CONTROL( sub_838(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U58 = 0;
    l_U58 = l_U58;
    l_U59 = 0;
    return;
}

void sub_2899(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

void sub_3440(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

void sub_3723(boolean bParam0)
{
    sub_440( "GA", "P_CLEANUP_HW start", 0 );
    ISEQ_TERMINATE( -903619740 );
    sub_3786( -903619740, ref g_U967 );
    ISEQ_TERMINATE( -407521813 );
    sub_3786( -407521813, ref g_U967 );
    ISEQ_TERMINATE( -1712187272 );
    sub_3786( -1712187272, ref g_U967 );
    ISEQ_TERMINATE( -770391621 );
    sub_3786( -770391621, ref g_U967 );
    ISEQ_TERMINATE( 127872207 );
    sub_3786( 127872207, ref g_U967 );
    ISEQ_TERMINATE( -58648941 );
    sub_3786( -58648941, ref g_U967 );
    sub_4307( "ROOFTOP_PIANO_01", ref g_U1168 );
    sub_4635( "ROOFTOP_PIANO_01", ref g_U1168 );
    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        SET_PLAYER_FORCED_AIM( sub_838(), 0, 0 );
    }
    SET_CAM_VIEW_MODE( 1 );
    CAMERA_ENABLE_FIRST_TIME_AIM_LOCK( 1 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_CONDO_WOMAN_SCREAM", 0 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_CONDO_MAN_SWEAR", 0 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_CONDO_GUNSHOTS", 0 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_FABIANNA_HOSTAGE_CS", 0 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_FABIANNA_HOSTAGE_SECURITY", 0 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_FABIANNA_HOSTAGE_FABIANNA", 0 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_FABIANNA_INITIAL_SCREAM", 0 );
    if (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "ROOFTOP_ONESHOT_START" ))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
    if (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "ROOFTOP_ONESHOT_BADDIES" ))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
    sub_5252( ref l_U494, 0 );
    sub_5252( ref l_U645, 0 );
    if (NOT bParam0)
    {
        UI_SET( 25, 2, 1537, "SPSlotLoader", 1537, "" );
    }
    sub_6189( l_U235 );
    sub_6267( ref l_U427 );
    sub_6189( l_U493 );
    sub_6340( l_U236 );
    sub_6340( l_U237 );
    sub_6340( l_U641 );
    sub_6407( g_U665._fU0 );
    sub_6407( l_U212 );
    sub_6462( bParam0 );
    sub_440( "GA", "P_CLEANUP_HW end", 0 );
    return;
}

void sub_3786(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_3898( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

int sub_3898(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else if ((uParam1^)[I] == iParam0)
        {
            (uParam1^)[I] = nil;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            Result = I;
        }
        else
        {
            (uParam1^)[I] = nil;
        };;;
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

void sub_4307(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if (sub_4324( uParam0, uParam1 ))
    {
        iVar4 = sub_4423( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            STOP_SCRIPT_STREAM( iVar4 );
        }
        else
        {
            SCRIPT_ASSERT( "Attempting to stop a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    return;
}

int sub_4324(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                return 1;
            }
        }
    }
    return 0;
}

int sub_4423(unknown uParam0, unknown uParam1)
{
    int Result;

    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
        {
            return Result;
        }
    }
    return -1;
}

void sub_4635(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_3898( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_5252(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if ((iParam0->_fU4 == 1) AND (iParam0->_fU320 == 1))
        {
            sub_5296( iParam0, 1 );
        }
        iParam0->_fU0 = 1;
    }
    else
    {
        sub_5296( iParam0, 0 );
        sub_5496( iParam0, 0 );
        if ((IS_PED_DEAD( sub_816() )) == 0)
        {
            TASK_CLEAR_LOOK_AT( sub_816() );
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                SET_PED_FORCED_TO_WALK( sub_816(), 0 );
                iParam0->_fU328 = 0;
            }
        }
        iParam0->_fU8 = 0;
        iParam0->_fU0 = 0;
    }
    return;
}

void sub_5296(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if (iParam0->_fU12 != nil)
        {
            if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
            {
                ENABLE_GLINT( iParam0->_fU12, 1 );
            }
            else
            {
                iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
            }
        }
        else
        {
            iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
        }
    }
    else if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            ENABLE_GLINT( iParam0->_fU12, 0 );
        }
    }
    return;
}

void sub_5496(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
        SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
        if ((iParam0->_fU72 == 0) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU68 == 1)))
        {
            SET_INTERACTIONTEXT_VISIBLE( 0 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
        else
        {
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
        sub_5647( iParam0 );
        if (iParam0->_fU332 == 1)
        {
            SET_INTERACTIONTEXT_PULSE( 1 );
            SET_INTERACTIONTEXT_PULSE_PERIOD( iParam0->_fU336 );
        }
    }
    else
    {
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
    }
    return;
}

void sub_5647(int iParam0)
{
    if (iParam0->_fU60 == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 0 );
        iParam0->_fU56 = 0;
    }
    else if (iParam0->_fU56 == 1)
    {
        if ((sub_5708( iParam0 )) == 0)
        {
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
    }
    else if ((sub_5708( iParam0 )) == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 1 );
        iParam0->_fU56 = 1;
    };;;
    return;
}

int sub_5708(int iParam0)
{
    if (((IS_PED_DEAD( sub_816() )) == 0) AND ((IS_PLAYER_DEAD( sub_838() )) == 0))
    {
        if (((IS_PED_RELOADING( sub_816() )) == 1) || (((IS_PED_GETTING_UP( sub_816() )) == 1) || (((IS_PED_PICKING_UP_PICKUP( sub_816() )) == 1) || (((IS_PED_IN_COVER( sub_816() )) == 1) || (((IS_PED_DUCKING( sub_816() )) == 1) || (IS_PLAYER_SHOOTDODGING() == 1))))))
        {
            return 0;
        }
        if (iParam0->_fU304 == 0)
        {
            if ((IS_MONOLOGUE_PLAYING() == 1) || ((IS_ANY_SPEECH_PLAYING( sub_816() )) == 1))
            {
                return 0;
            }
        }
        return 1;
    }
    return 0;
}

void sub_6189(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

void sub_6267(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_6189( (uParam0^)[I] );
    }
    return;
}

void sub_6340(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

void sub_6407(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

void sub_6462(unknown uParam0)
{
    sub_440( "CCB", "P_STOP_SP_CHALLENGES", 0 );
    sub_440( "CCB", "Stopping the Rooftop_Party_Penthouse_Hallways context.", 0 );
    END_CONTEXT( "Rooftop_Party_Penthouse_Hallways" );
    return;
}

void sub_6964(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

    sub_440( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
    sub_7148( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
        sub_8225( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 = sub_8517( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
        sub_8877( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 = sub_8517( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
        sub_8877( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 = sub_8517( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
        sub_8877( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 = sub_9162( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
        sub_8877( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 = sub_9162( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
        sub_8877( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if ((sub_9655( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
    sub_9816( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING( sub_816(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
    sub_440( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

void sub_7148(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 = sub_7180( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

int sub_7180(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

void sub_8225(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

void sub_8517(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                }
            }
        }
    }
    else
    {
        sub_8833( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

void sub_8833(unknown uParam0)
{
    return;
}

void sub_8877(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

void sub_9162(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                }
            }
        }
    }
    else
    {
        sub_8833( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

int sub_9655(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

void sub_9816(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 = sub_7180( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
    sub_9888( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

void sub_9888(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

void sub_11180()
{
    int iVar2;
    unknown uVar3;
    int iVar4;
    unknown uVar5;
    int iVar6;

    iVar2 = l_U116;
    sub_11197();
    sub_11320( ref l_U427, -9.50000000, 0, 1 );
    switch (l_U116)
    {
        case 0: break;
        case 1:
        sub_440( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
        sub_11686();
        sub_12204();
        sub_12222();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        if (g_U723 == 0)
        {
            if (NOT (IS_PED_DEAD( sub_816() )))
            {
                FREEZE_PED_POSITION( sub_816(), 1 );
                sub_15236( sub_816(), g_U1333[0], g_U1450[0] );
            }
        }
        l_U116 = 2;
        sub_440( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
        sub_440( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        sub_15420();
        sub_19991();
        l_U116 = 3;
        sub_440( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if ((sub_24261( ref g_U1221 )) AND ((sub_24134( ref g_U1168 )) AND ((sub_23943( ref g_U967 )) AND ((sub_23816( ref g_U1028 )) AND ((sub_23695( ref g_U918 )) AND (sub_23575( ref g_U821 )))))))
        {
            if (NOT l_U70._fU0)
            {
                l_U116 = 4;
                sub_440( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U116 = 6;
                sub_440( "SP", "eCheckpointState = CP_HW_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
        sub_440( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        if ((sub_24602( ref l_U70 )) == 0)
        {
            sub_9162( sub_816(), 68019059, 200, 0, 0 );
            l_U116 = 5;
            sub_440( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U116 = 6;
            sub_440( "SP", "eCheckpointState = CP_HW_PRE_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD( sub_816() )))
        {
            if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( sub_816(), 0, 0 ) ))
            {
                l_U116 = 6;
                sub_440( "GA", "eCheckpointState = CP_HW_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if (sub_25064())
        {
            if (g_U723 == 0)
            {
                if (CUTSCENE_IS_LOADED( "01_01_RP_concat" ))
                {
                    l_U116 = 7;
                    sub_440( "GA", "eCheckpointState = CP_HW_HANDLE_11_01_RP", 0 );
                }
                else if (CUTSCENE_NAMED_IS_LOADING( "01_01_RP_concat" ))
                {
                    sub_440( "GA", "Waiting for cutscene 11_01_PANAMA_CONCAT to load.", 0 );
                }
                else
                {
                    sub_440( "GA", "Requesting cutscene 11_01_PANAMA_CONCAT to load.", 0 );
                    PRE_STREAM_SEAMLESS_CUTSCENE( "01_01_RP_concat" );
                }
            }
            else
            {
                l_U116 = 7;
                sub_440( "GA", "eCheckpointState = CP_HW_HANDLE_11_01_RP", 0 );
            }
        }
        break;
        case 7:
        if (l_U117)
        {
            sub_34085( ref l_U119, "01_01_RP_concat", 26727, 26744, 27447, 27952, 27969, 29262, 250, 0 );
            if (g_U723 == 0)
            {
                l_U119._fU4 = 1;
            }
            else
            {
                l_U119._fU4 = 7;
            }
        }
        if (sub_34513( ref l_U119 ))
        {
            sub_35380( 1, 0, 0, 1 );
            if (NOT l_U70._fU0)
            {
                g_U723 = 1;
                sub_36448( ref l_U70, g_U723, sub_816(), g_U1333[1], g_U1450[1], g_U1486[1], g_U1522[1], 1 );
            }
            sub_40062();
            sub_41037();
            sub_41231();
            SET_PAYNEKILLER_AMT( 0 );
            l_U116 = 8;
            sub_440( "GA", "eCheckpointState = CP_HW_TUTORIAL_BULLET_TIME", 0 );
        }
        break;
        case 8:
        if (l_U117)
        {
            sub_41580( "TUT_BULLET_TIME", 1 );
            CAMERA_ENABLE_FIRST_TIME_AIM_LOCK( 0 );
        }
        if (IS_CONTROL_JUST_PRESSED( 2, 29 ))
        {
            sub_1330();
            SET_GAME_PAUSED( 0 );
            DISABLE_RESTART_CHECKPOINT( 0 );
            ACTIVATE_BULLET_TIME( 0, 1065353216, 1 );
            CAMERA_FREEZE_FRAME( 0, l_U259, 0, 0 );
            CAMERA_ANIMATED_STOP( l_U259, 1 );
            if (NOT (IS_PED_DEAD( l_U235 )))
            {
                PLAY_PED_AMBIENT_SPEECH( l_U235, "SWEAR_STARTLED", 1, 0, 0, 0, 30000 );
            }
            l_U116 = 9;
            sub_440( "GA", "eCheckpointState = CP_HW_WAIT_PLAYER_IN_POSITION_FOR_AIM", 0 );
        }
        break;
        case 9:
        if (l_U117)
        {
            if (NOT (IS_PED_DEAD( sub_816() )))
            {
                ENABLE_PLAYERHEALTH( 1 );
                SET_PLAYER_CONTROL( sub_838(), 0, 256 );
            }
            sub_2242( ref l_U260 );
        }
        if (sub_2362( ref l_U260 ))
        {
            l_U116 = 10;
            sub_440( "GA", "eCheckpointState = CP_HW_TUTORIAL_AIM_SHOOT", 0 );
        }
        break;
        case 10:
        if (l_U117)
        {
            if (IS_USING_CONTROLLER())
            {
                if (IS_IN_SOUTHPAW_MODE())
                {
                    sub_41580( "TUT_AIM_SP", 0 );
                }
                else
                {
                    sub_41580( "TUT_AIM", 0 );
                }
            }
            else
            {
                sub_41580( "TUT_AIM_PC", 0 );
            }
            sub_42159();
        }
        sub_11357( l_U235, -9.00000000, 0, 1 );
        if (NOT l_U290)
        {
            if (sub_42400())
            {
                sub_42510();
                l_U290 = 1;
            }
        }
        if (NOT l_U287)
        {
            if (sub_42676())
            {
                if (NOT (IS_PED_DEAD( sub_816() )))
                {
                    CLEAR_PED_DEFAULT_AIM( sub_816() );
                }
                CAMERA_CLEAR_POINT_AT_TARGET();
                l_U287 = 1;
            }
        }
        if (NOT l_U289)
        {
            if ((IS_PED_DEAD( l_U235 )) || (IS_CAMERA_AIMING_AT_ENEMY()))
            {
                CAMERA_CLEAR_POINT_AT_TARGET();
                if (NOT (IS_PED_DEAD( sub_816() )))
                {
                    CLEAR_PED_DEFAULT_AIM( sub_816() );
                }
                sub_1330();
                l_U289 = 1;
                l_U116 = 11;
                sub_440( "GA", "eCheckpointState = CP_HW_TUTORIAL_SHOOT", 0 );
            }
        }
        break;
        case 11:
        if (l_U117)
        {
            sub_2242( ref l_U278 );
        }
        if (sub_2362( ref l_U278 ))
        {
            sub_41580( "TUT_SHOOT", 0 );
        }
        if (l_U278._fU16)
        {
            ;
        }
        if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (IS_PED_DEAD( l_U235 ))))
        {
            sub_1330();
            sub_35380( 1, 0, 0, 1 );
            if (NOT (IS_PED_DEAD( sub_816() )))
            {
                CLEAR_PED_TASKS( sub_816() );
            }
            SET_PAYNEKILLER_AMT( 4 );
            ISEQ_TERMINATE( -1370784360 );
            sub_3786( -1370784360, ref g_U967 );
            CAMERA_ENABLE_FIRST_TIME_AIM_LOCK( 1 );
            l_U116 = 12;
            sub_440( "GA", "eCheckpointState = CP_HW_MOVE_INTO_SD_TUTORIAL", 0 );
        }
        break;
        case 12:
        if (l_U117)
        {
            sub_2242( ref l_U293 );
            sub_2242( ref l_U303 );
            sub_2242( ref l_U323 );
        }
        if (sub_2362( ref l_U293 ))
        {
            sub_43391();
        }
        if (sub_2362( ref l_U303 ))
        {
            sub_440( "GA", "Starting player gait.", 0 );
            if ((NOT (IS_PED_DEAD( sub_816() ))) AND (NOT (IS_PLAYER_DEAD( sub_838() ))))
            {
                SIMULATE_PLAYER_INPUT_GAIT( sub_838(), 3, l_U312 + 1000, 0 );
            }
            sub_32196( "SRTP_MSDTR", ref l_U362 );
            sub_2242( ref l_U313 );
        }
        if (sub_2362( ref l_U323 ))
        {
            sub_43719();
        }
        if (sub_2362( ref l_U313 ))
        {
            l_U116 = 13;
            sub_440( "GA", "eCheckpointState = CP_HW_SHOOTDODGE_TUTORIAL", 0 );
        }
        break;
        case 13:
        if (l_U117)
        {
            sub_36024( 1, 1 );
            SET_GAME_PAUSED( 1 );
            DISABLE_RESTART_CHECKPOINT( 1 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
            if (NOT IS_USING_CONTROLLER())
            {
                sub_41580( "TUT_SHOOTDODGE_PC", 1 );
            }
            else
            {
                sub_41580( "TUT_SHOOTDODGE", 1 );
            }
        }
        GET_POSITION_OF_ANALOGUE_STICKS( 0, ref uVar3, ref iVar4, ref uVar5, ref iVar6 );
        if (IS_CONTROL_JUST_PRESSED( 2, 2 ))
        {
            if (((iVar6 < 65461) AND (IS_IN_SOUTHPAW_MODE())) || ((iVar4 < 65461) AND ((NOT IS_USING_CONTROLLER()) || (NOT IS_IN_SOUTHPAW_MODE()))))
            {
                SET_GAME_PAUSED( 0 );
                DISABLE_RESTART_CHECKPOINT( 0 );
                SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
                START_PLAYER_SHOOTDODGE( 0.00000000, 1.00000000, 0.00000000, 1, 0, 0, 0 );
                l_U116 = 14;
                sub_440( "GA", "eCheckpointState = CP_HW_SHOOTDODGE_GAMEPLAY", 0 );
            }
        }
        break;
        case 14:
        if (l_U117)
        {
            SET_PLAYER_CAN_CANCEL_SHOOTDODGE( 0 );
            sub_1330();
            sub_2242( ref l_U333 );
            sub_2242( ref l_U342 );
        }
        if (NOT l_U352)
        {
            if ((IS_PED_DEAD( l_U427[1] )) || (IS_PED_DEAD( l_U427[0] )))
            {
                if (NOT l_U353._fU20)
                {
                    sub_2242( ref l_U353 );
                }
                if (sub_2362( ref l_U353 ))
                {
                    if ((IS_USING_CONTROLLER()) AND (CAMERA_SETTINGS_IS_HARD_LOCK_ENABLED()))
                    {
                        sub_440( "GA", "Start lock on tutorial.", 0 );
                        SET_GAME_PAUSED( 1 );
                        DISABLE_RESTART_CHECKPOINT( 1 );
                        SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
                        sub_41580( "TUT_LOCKON", 1 );
                        sub_44683( ref l_U333, 1 );
                        l_U351 = 1;
                    }
                    l_U352 = 1;
                }
            }
        }
        sub_44933();
        if (sub_2362( ref l_U342 ))
        {
            if (NOT l_U351)
            {
                sub_440( "GA", "Safety clear shootdodge tutorial message.", 0 );
                sub_1330();
            }
        }
        if (NOT l_U439)
        {
            if (sub_45164())
            {
                sub_45371();
                l_U439 = 1;
            }
        }
        if (sub_2362( ref l_U333 ))
        {
            if (NOT l_U351)
            {
                sub_1330();
            }
            SET_PLAYER_CAN_CANCEL_SHOOTDODGE( 1 );
            sub_45915( ref g_U724[2] );
            sub_440( "CCB", "Starting ROOFTOP_SONG_03 music track with ROOFTOP_SONG_03_2_3 mood fade in 7 seconds, out 5 seconds.", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_2_3", "ROOFTOP_SONG_03_2_3", 0, 7000, 5000, -1082130432, 0 );
            l_U116 = 15;
            sub_440( "GA", "eCheckpointState = CP_HW_PENTHOUSE_GAMEPLAY", 0 );
        }
        break;
        case 15:
        if (l_U117)
        {
            sub_45459( ref l_U438, l_U427[0], 1 );
            sub_45459( ref l_U438, l_U427[1], 1 );
            if (NOT (IS_PED_DEAD( l_U427[0] )))
            {
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U427[0], 0 );
            }
            if (NOT (IS_PED_DEAD( l_U427[1] )))
            {
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U427[1], 0 );
            }
            AUDIO_MUSIC_REQUEST_ONESHOT( "ROOFTOP_ONESHOT_BADDIES", 0 );
        }
        sub_46362();
        sub_47094();
        if (NOT l_U352)
        {
            if (NOT IS_CAMERA_AIMING_AT_ENEMY())
            {
                if ((IS_USING_CONTROLLER()) AND (CAMERA_SETTINGS_IS_HARD_LOCK_ENABLED()))
                {
                    sub_440( "GA", "Start lock on tutorial.", 0 );
                    SET_GAME_PAUSED( 1 );
                    DISABLE_RESTART_CHECKPOINT( 1 );
                    SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
                    sub_41580( "TUT_LOCKON", 1 );
                    l_U351 = 1;
                }
                l_U352 = 1;
            }
        }
        sub_44933();
        if (NOT l_U439)
        {
            if (sub_45164())
            {
                sub_45371();
                l_U439 = 1;
            }
        }
        if ((NOT l_U471._fU20) AND ((NOT (IS_BULLET_TIME_ACTIVE( 1 ))) AND ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND ((sub_50453( ref l_U427 )) == 0)))))
        {
            sub_2242( ref l_U471 );
        }
        if (sub_2362( ref l_U471 ))
        {
            l_U116 = 16;
            sub_440( "GA", "eCheckpointState = CP_HW_WAIT_FOR_PLAYER_TO_LEAVE_PENTHOUSE", 0 );
        }
        if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (NOT IS_BULLET_CAMERA_ACTIVE()))
        {
            if (sub_50706( ref l_U861, 0 ))
            {
                sub_2242( ref l_U882 );
                ENABLE_STATIC_EMITTER( "S_FASHION_SE_PATIO_GUNSHOTS", 1 );
            }
            if (sub_2362( ref l_U882 ))
            {
                sub_47002();
                g_U1264[2] = 1;
                l_U116 = 17;
                sub_440( "GA", "eCheckpointState = CP_FINISHED", 0 );
            }
        }
        break;
        case 16:
        if (l_U117)
        {
            sub_5252( ref l_U494, 1 );
            sub_15032( ref l_U645, 1 );
            ENABLE_WALLA_ZONE( "S_FASHION_WZ_FABIANNA_HOSTAGE_CS", 1 );
            ENABLE_WALLA_ZONE( "S_FASHION_WZ_FABIANNA_HOSTAGE_SECURITY", 1 );
            ENABLE_STATIC_EMITTER( "S_FASHION_SE_FABIANNA_INITIAL_SCREAM", 1 );
            sub_2242( ref l_U213 );
            sub_2242( ref l_U793 );
            sub_2242( ref l_U833 );
            if (DOES_PLACEMENT_EXIST( l_U212 ))
            {
                if (NOT (HAS_PLACEMENT_BEEN_COLLECTED( l_U212 )))
                {
                    sub_440( "GA", "Player hasn't picked up painkiller yet.", 0 );
                    l_U629 = 1;
                }
            }
        }
        sub_46362();
        sub_47094();
        if ((TIME_SINCE_LAST_MONOLOGUE() > 2000) AND ((NOT l_U882._fU20) AND ((l_U587 == 4) || (l_U587 == 0))))
        {
            if (sub_2362( ref l_U793 ))
            {
                sub_32196( "SRTP_MHFAB", ref l_U783 );
            }
            if (NOT l_U833._fU16)
            {
                if (sub_45272( l_U812 ))
                {
                    if (IS_SPHERE_VISIBLE( -9.91000000, -25.52000000, -6.54000000, 0.50000000, 0 ))
                    {
                        if (sub_2362( ref l_U833 ))
                        {
                            sub_32196( "SRTP_MLADRA", ref l_U802 );
                            sub_2242( ref l_U852 );
                        }
                    }
                }
            }
            if (sub_2362( ref l_U852 ))
            {
                sub_32196( "SRTP_MLADRB", ref l_U842 );
            }
        }
        if ((l_U793._fU16) AND ((NOT l_U630) AND (l_U629)))
        {
            if ((HAS_PLACEMENT_BEEN_COLLECTED( l_U212 )) || (NOT (DOES_PLACEMENT_EXIST( l_U212 ))))
            {
                sub_440( "GA", "Player collected painkiller.", 0 );
                if ((NOT l_U882._fU20) AND (TIME_SINCE_LAST_MONOLOGUE() > 2000))
                {
                    sub_32196( "SRTP_PFPLS", ref l_U631 );
                }
                l_U630 = 1;
            }
        }
        if (sub_2362( ref l_U213 ))
        {
            ENABLE_WALLA_ZONE( "S_FASHION_WZ_FABIANNA_HOSTAGE_FABIANNA", 1 );
            sub_440( "GA", "Playing audio music one shot ROOFTOP_ONESHOT_BADDIES", 0 );
            AUDIO_MUSIC_PLAY_ONESHOT();
        }
        if (sub_47402( ref l_U494 ))
        {
            sub_51763();
            sub_47002();
        }
        sub_51929();
        if (sub_50706( ref l_U861, 0 ))
        {
            sub_2242( ref l_U882 );
            ENABLE_STATIC_EMITTER( "S_FASHION_SE_PATIO_GUNSHOTS", 1 );
        }
        if (sub_2362( ref l_U882 ))
        {
            sub_47002();
            g_U1264[2] = 1;
            l_U116 = 17;
            sub_440( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 17:
        if ((NOT HAS_CUTSCENE_FINISHED()) || (g_U723 == 2))
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U116 = 0;
            sub_440( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U116 != iVar2)
    {
        l_U117 = 1;
    }
    else
    {
        l_U117 = 0;
    }
    return;
}

void sub_11197()
{
    sub_11207();
    return;
}

void sub_11207()
{
    switch (g_U1646)
    {
        case 0:
        g_U1646 = 1;
        break;
        case 1:
        if (IS_HUD_PREFERENCE_SWITCHED_ON())
        {
            g_U1646 = 2;
        }
        break;
        case 2: break;
    }
    return;
}

void sub_11320(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_11357( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

void sub_11357(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                sub_6189( uParam0 );
            }
        }
    }
    return;
}

void sub_11686()
{
    sub_440( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U117 = 1;
    l_U146 = 0;
    sub_2106( ref l_U147, 6000, 1, 0 );
    l_U156 = 0;
    sub_2106( ref l_U167, 7000, 1, 0 );
    sub_2106( ref l_U213, 5000, 1, 0 );
    l_U762 = 0;
    sub_2106( ref l_U240, l_U239, 1, 0 );
    sub_2106( ref l_U250, l_U249, 1, 0 );
    sub_2106( ref l_U260, l_U259, 1, 1 );
    sub_2106( ref l_U269, 200, 1, 0 );
    sub_2106( ref l_U278, 300, 1, 0 );
    l_U287 = 0;
    l_U288 = 0;
    l_U289 = 0;
    l_U291 = 0;
    l_U290 = 0;
    sub_2106( ref l_U293, l_U292, 1, 0 );
    sub_2106( ref l_U303, l_U302, 1, 0 );
    sub_2106( ref l_U313, l_U312, 1, 0 );
    sub_2106( ref l_U323, l_U322, 1, 0 );
    sub_2106( ref l_U333, l_U332, 1, 0 );
    sub_2106( ref l_U342, 500, 1, 0 );
    l_U352 = 0;
    l_U351 = 0;
    sub_2106( ref l_U353, 1000, 1, 1 );
    l_U238 = 0;
    l_U372 = 0;
    l_U373 = 0;
    l_U439 = 0;
    sub_2106( ref l_U471, 1500, 1, 0 );
    sub_2106( ref l_U610, l_U609, 1, 0 );
    l_U629 = 0;
    l_U630 = 0;
    sub_2106( ref l_U793, 2500, 1, 0 );
    sub_2106( ref l_U833, 15000, 1, 0 );
    sub_2106( ref l_U852, 20000, 1, 0 );
    sub_2106( ref l_U882, 1500, 1, 0 );
    sub_440( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

void sub_12204()
{
    return;
}

void sub_12222()
{
    sub_440( "GA", "P_SET_STATIC_DATA start", 0 );
    sub_12305( ref l_U222, -3.29200000, 0.28700000, -7.53500000, 0.00000000, 1001355263, 7, 3, 2, 0, 0 );
    sub_12305( ref l_U480, -1.69000000, -12.01000000, -7.60000000, 90.00000000, 562303148, 26, 0, 0, 0, 0 );
    sub_12305( ref l_U374[0], -4.23300000, 1.01000000, -7.50000000, 0.00000000, -1597532580, 7, 3, 2, 0, 0 );
    sub_12305( ref l_U374[1], -2.69200000, 0.80500000, -7.50000000, 0.00000000, 416827258, 7, 3, 2, 0, 0 );
    sub_12305( ref l_U374[2], -3.50000000, -14.00000000, -7.85800000, 0.00000000, -459010786, 7, 3, 2, 0, 0 );
    sub_12305( ref l_U374[3], -4.11000000, -12.70000000, -7.88000000, -90.00000000, 2146075424, 7, 3, 2, 0, 0 );
    sub_12702( ref l_U861, "tb_HW_OnPatio", -13.01000000, -27.18000000, -7.55000000, 18.20000000, 8.50000000, 3.52000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_12702( ref l_U440, "tb_HW_EnteredPenthouse", -3.16000000, 0.60000000, -7.54000000, 3.00000000, 3.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_12702( ref l_U588, "TRIGGER_PENTHOUSE_PIANO", -7.61000000, -1.89000000, -7.54000000, 2.50000000, 2.50000000, 2.00000000, 0.00000000, 0.00000000, -34.50000000, 1 );
    sub_12702( ref l_U812, "tb_PH_CanSeePatio", -8.06000000, -14.53000000, -7.55000000, 18.35000000, 15.91000000, 3.52000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_13101( ref l_U438, "teth_HW_Penthouse", -1.08000000, -9.17000000, -7.54000000, 32.38000000, 23.13000000, 7.85000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_13196( ref l_U183, -539283630, -1.65400000, 2.29392000, -5.83426000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13196( ref l_U176, -539283630, -4.71233000, 2.28294000, -5.83426000, 0.00000000, 0.00000000, -3.14000000 );
    sub_13297( ref l_U183, 1, 1, 1.00000000 );
    sub_13521( ref l_U183, 1 );
    sub_13297( ref l_U176, 0, 1, 1.00000000 );
    sub_13521( ref l_U176, 1 );
    sub_13196( ref l_U190[0], -1168087975, 13.28570000, 5.34042000, -6.39805000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13662( ref l_U190[0], 0 );
    sub_13196( ref l_U190[1], -539283630, -12.12246000, 8.44516000, -5.83424000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13662( ref l_U190[1], 1 );
    sub_13196( ref l_U190[2], -539283630, -15.18079000, 8.43417000, -5.83424000, 0.00000000, 0.00000000, 0.00000000 );
    sub_13662( ref l_U190[2], 1 );
    ENABLE_GRAVITY_WELL( "penthouse", "GW_SDG_TUT_START", 0, 0, 0, 0 );
    sub_13986( ref l_U494, 2, l_U580, l_U588, l_U580, 3.00000000, 0, 0 );
    sub_14659( ref l_U494, 30, "POI_RP_PIANO" );
    sub_14820( ref l_U494, 0 );
    l_U587 = 0;
    sub_14888( ref l_U645, 2, l_U642, l_U642, l_U642, 1.50000000, 3.00000000, 1, 0 );
    sub_14659( ref l_U645, 30, "POI_MAGAZINE" );
    sub_14820( ref l_U645, 0 );
    sub_15032( ref l_U645, 0 );
    sub_15092( ref l_U645, 1 );
    sub_440( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

void sub_12305(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

void sub_12702(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_13101(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_13196(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

void sub_13297(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if ((sub_13309( iParam0 )) == 0)
    {
        sub_13375( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

int sub_13309(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_13375(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

void sub_13521(int iParam0, unknown uParam1)
{
    if ((sub_13309( iParam0 )) == 0)
    {
        sub_13375( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

void sub_13662(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if ((sub_13309( iParam0 )) == 0)
    {
        sub_13375( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

void sub_13986(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31)
{
    sub_14001( iParam0, uParam30 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU80 = 1;
    iParam0->_fU116 = {uParam5};
    iParam0->_fU200 = {uParam26};
    iParam0->_fU212 = uParam29;
    iParam0->_fU320 = uParam31;
    iParam0->_fU20 = {uParam2};
    sub_14367( iParam0 );
    return;
}

void sub_14001(int iParam0, unknown uParam1)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = 0;
    iParam0->_fU8 = 0;
    iParam0->_fU12 = nil;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU52 = 1;
    iParam0->_fU56 = 1;
    iParam0->_fU60 = 0;
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = 0;
    iParam0->_fU80 = 0;
    iParam0->_fU84 = 0;
    iParam0->_fU100 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU112 = 0.00000000;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU96 = 0;
    iParam0->_fU200 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU212 = 0.00000000;
    iParam0->_fU300 = 0;
    iParam0->_fU304 = 1;
    iParam0->_fU308 = 0;
    iParam0->_fU324 = 1;
    iParam0->_fU328 = 0;
    iParam0->_fU340 = 0;
    iParam0->_fU336 = 0.20000000;
    return;
}

void sub_14367(int iParam0)
{
    if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            REMOVE_GLINT( iParam0->_fU12 );
        }
    }
    iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
    sub_14446( iParam0 );
    return;
}

void sub_14446(int iParam0)
{
    if (iParam0->_fU0 == 1)
    {
        if (iParam0->_fU320 == 1)
        {
            if ((iParam0->_fU8 > 0) AND (iParam0->_fU4 == 0))
            {
                sub_5296( iParam0, 1 );
            }
            else if ((iParam0->_fU8 < 2) AND (iParam0->_fU4 == 1))
            {
                sub_5296( iParam0, 1 );
            }
            else if ((iParam0->_fU8 == 1) AND (iParam0->_fU4 == 2))
            {
                sub_5296( iParam0, 1 );
            }
            else
            {
                sub_5296( iParam0, 0 );
            };;;
        }
        else
        {
            sub_5296( iParam0, 0 );
        }
    }
    else
    {
        sub_5296( iParam0, 0 );
    }
    return;
}

void sub_14659(int iParam0, unknown uParam1, unknown uParam2)
{
    StrCopy( ref iParam0->_fU32, uParam2, 16 );
    iParam0->_fU48 = uParam1;
    sub_14690( iParam0 );
    return;
}

void sub_14690(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND (iParam0->_fU0 == 1))
    {
        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
        {
            SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
            SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
    }
    return;
}

void sub_14820(int iParam0, unknown uParam1)
{
    iParam0->_fU324 = uParam1;
    return;
}

void sub_14888(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14)
{
    sub_14001( iParam0, uParam13 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU100 = {uParam5};
    iParam0->_fU112 = uParam11;
    iParam0->_fU200 = {uParam8};
    iParam0->_fU212 = uParam12;
    iParam0->_fU320 = uParam14;
    iParam0->_fU20 = {uParam2};
    sub_14367( iParam0 );
    return;
}

void sub_15032(int iParam0, int iParam1)
{
    if (iParam1 == 0)
    {
        iParam0->_fU60 = 1;
    }
    else
    {
        iParam0->_fU60 = 0;
    }
    sub_5647( iParam0 );
    return;
}

void sub_15092(int iParam0, unknown uParam1)
{
    iParam0->_fU68 = uParam1;
    return;
}

void sub_15236(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

void sub_15420()
{
    sub_440( "GA", "P_REQUEST_HW_PERSISTENT_ASSETS start", 0 );
    sub_15488( ref l_U106, ref g_U821 );
    sub_16896( ref l_U114, ref g_U918 );
    sub_17916( "LEVEL_S_ROOFTOP_CP_01", ref g_U1028 );
    sub_17916( "DAM_DEAD", ref g_U1028 );
    sub_18948( "SCRIPT_MISSION\S_FASHION_LOBBY", ref g_U1221 );
    sub_440( "GA", "P_REQUEST_HW_PERSISTENT_ASSETS end", 0 );
    return;
}

void sub_15488(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_15523( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_15523(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 = sub_15558( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
            sub_15689( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

int sub_15558(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                sub_15689( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                sub_15689( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    sub_15689( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_16337( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                sub_15689( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_15689( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_15689(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15709( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

int sub_15709(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            if ((uParam1^)[I] == iParam0)
            {
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
        else
        {
            (uParam1^)[I] = nil;
            Result = I;
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

void sub_16337(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

void sub_16896(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_16931( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_16931(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_16952( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
        sub_17084( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_16952(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                sub_17084( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                sub_17084( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    sub_17084( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_16337( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                sub_17084( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_17084( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_17084(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15709( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_17916(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_17937( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
        sub_18074( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_17937(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                sub_18074( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                sub_18074( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    sub_18074( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                    sub_16337( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                sub_18074( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
            sub_18074( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_18074(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15709( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_18948(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_18969( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
        sub_19107( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_18969(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                sub_19107( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                sub_19107( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    sub_19107( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                    sub_16337( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                sub_19107( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
            sub_19107( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_19107(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15709( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_19991()
{
    sub_440( "GA", "P_REQUEST_HW_NONPERSISTENT_ASSETS start", 0 );
    sub_20063( -903619740, ref g_U967 );
    sub_20063( -407521813, ref g_U967 );
    sub_20063( -1712187272, ref g_U967 );
    sub_20063( -770391621, ref g_U967 );
    sub_20063( 127872207, ref g_U967 );
    sub_20063( -58648941, ref g_U967 );
    sub_22078( "ROOFTOP_PIANO_01", ref g_U1168 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "ROOFTOP_ONESHOT_START", 0 );
    if (g_U723 == 0)
    {
        sub_23195( "01_01_RP_concat", 0 );
    }
    sub_440( "GA", "P_REQUEST_HW_NONPERSISTENT_ASSETS end", 0 );
    return;
}

void sub_20063(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 = sub_20098( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
            sub_20250( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

int sub_20098(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                sub_20250( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                sub_20250( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        sub_20250( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                        sub_20250( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        sub_16337( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        sub_16337( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                sub_20250( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                sub_20250( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_20250(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15709( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_22078(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_22099( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
        sub_22240( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_22099(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being requested!!!", 0 );
                sub_22240( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is already loading!!!", 0 );
                sub_22240( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (Result <= 2)
                {
                    if ((GET_SCRIPT_STREAM_STATE( uParam0, Result )) == 2)
                    {
                        sub_22240( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else
                    {
                        SCRIPT_ASSERT( "The SCRIPT_STREAM asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                        (uParam1^)[Result]._fU32 = 0;
                        sub_16337( ref (uParam1^)[Result]._fU36 );
                        return Result;
                    }
                }
                else
                {
                    sub_22240( Result, uParam1, uParam2 );
                    return -1;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being removed!!!", 0 );
                sub_22240( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (Result <= 2)
        {
            if ((GET_SCRIPT_STREAM_STATE( uParam0, iVar6 )) == 2)
            {
                StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
                (uParam1^)[iVar6]._fU32 = 3;
                sub_22240( iVar6, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar6;
            }
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The SCRIPT_STREAM - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_22240(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15709( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The SCRIPT_STREAM asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_23195(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                WAIT( 0 );
            }
        }
    }
    return;
}

int sub_23575(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_23695(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_23816(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_23943(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

int sub_24134(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_24261(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_24602(unknown uParam0)
{
    sub_440( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
            sub_6964( uParam0, sub_816() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

int sub_25064()
{
    unknown uVar2;

    if (NOT (DOES_PED_EXIST( l_U235 )))
    {
        l_U235 = sub_25096( ref l_U222 );
        uVar2 = sub_9162( l_U235, 68019059, 25000, 0, 0 );
        SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 50 );
        sub_25973( ref l_U235, "AIT_NOVICE", -1082130432, -1082130432 );
        sub_26068( l_U235 );
        if (NOT (IS_PED_DEAD( l_U235 )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U235, ref g_U1563 );
            SET_PED_AS_ONE_SHOT_KILL( l_U235, 1 );
            SET_PED_COMBAT_MOVEMENT( l_U235, 0 );
            SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U235, 0 );
            SET_PED_PATH_CAN_DROP_FROM_HEIGHT( l_U235, 0 );
            SET_PED_FLAG_BLOCK_WOUNDED_MOVEMENT( l_U235, 1 );
            SET_PED_USES_DYING_ANIM( l_U235, 0 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U235, 1 );
            SET_PED_NAME_DEBUG( l_U235, "pi_HW_V1_Enemy" );
        }
    }
    return 1;
}

void sub_25096(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
        sub_25266( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
    sub_25735( iParam0->_fU40 );
    sub_25815( iParam0->_fU40 );
    return iParam0->_fU40;
}

void sub_25266(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
        sub_8833( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_25735(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

void sub_25815(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

void sub_25973(unknown uParam0, unknown uParam1, float fParam2, float fParam3)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    return;
}

void sub_26068(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

int sub_26727()
{
    return 1;
}

void sub_26744()
{
    sub_440( "GA", "P_HW_0101RP_CutsceneRegistration start", 0 );
    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        sub_440( "CCB", "Registering the Player ped.", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( sub_816(), g_U1333[1], g_U1450[1] );
        ISEQ_REGISTER_ENTITY( -903619740, "player", sub_816(), 0 );
        CUTSCENE_REGISTER_ISEQ( -903619740 );
    }
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "P_RT_SecG_M", -933116240 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_F^120", 2003364081 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_F^121", -511418981 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_F^122", 1500701004 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_F^123", 1926509844 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_F^124", -1878920547 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_F^126", 1565471227 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_M", 424656717 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_M^120", -1717828661 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_M^121", 1899281545 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_M^122", 99794434 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_M^123", -1638730858 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "C_RT_Party_M^124", 1646697317 );
    REGISTER_HIDE_ENTITY_AT_POSITION( 1006726227, 11.84674000, 11.18991000, 9.10791000 );
    REGISTER_HIDE_ENTITY_AT_POSITION( 1006726227, 11.84674000, 8.78723000, 9.10791000 );
    CUTSCENE_ENABLE_SKIP( 0 );
    sub_440( "GA", "P_HW_0101RP_CutsceneRegistration end", 0 );
    return;
}

void sub_27447()
{
    if (l_U119._fU52)
    {
        sub_27472( 0 );
        if (NOT (IS_PED_DEAD( sub_816() )))
        {
            FREEZE_PED_POSITION( sub_816(), 0 );
        }
        SET_CAM_VIEW_MODE( 0 );
    }
    if (NOT l_U146)
    {
        if (GET_CUTSCENE_TIME_MS() > 4853)
        {
            sub_440( "GA", "Starting music track ROOFTOP_SONG_03 at mood ROOFTOP_SONG_03_2 fade in 6, fade out 5.", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_2", "", 0.00000000, 6000, 5000, -1082130432, 0 );
            l_U146 = 1;
        }
    }
    return;
}

void sub_27472(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND( sub_816(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND( sub_816(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_816(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_816(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER( sub_816(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

int sub_27952()
{
    return 1;
}

void sub_27969()
{
    sub_440( "GA", "P_HW_0101RP_PrepareBlendout start", 0 );
    if ((NOT (ISEQ_QUERY_STATE( -903619740, 3 ))) AND (NOT (IS_PED_DEAD( sub_816() ))))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( sub_816() );
        RESET_PLAYER_INPUT_GAIT( 0 );
        sub_1554();
        sub_15236( sub_816(), g_U1333[1], g_U1450[1] );
        ISEQ_REGISTER_ENTITY( -903619740, "player", sub_816(), 0 );
        ISEQ_START( -903619740 );
    }
    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        SET_PLAYER_FORCED_AIM( sub_838(), 1, 0 );
        SET_PED_DEFAULT_AIM_AT_COORD( sub_816(), -3.64000000, 4.00000000, -5.65000000 );
        SET_ADRENALINE_AMT( 0.75000000 );
    }
    sub_440( "GA", "Enabling woman screaming and sounds from penthouse.", 0 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_CONDO_WOMAN_SCREAM", 1 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_CONDO_MAN_SWEAR", 1 );
    ENABLE_STATIC_EMITTER( "S_FASHION_SE_CONDO_GUNSHOTS", 1 );
    ENABLE_WALLA_ZONE( "S_FASHION_WZ_CONDO_YELLING", 1 );
    if (NOT AUDIO_IS_MUSIC_PLAYING())
    {
        sub_440( "GA", "Starting music track ROOFTOP_SONG_03 at mood ROOFTOP_SONG_03_2 fade in 6, fade out 5.", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_2", "", 0.00000000, 6000, 5000, -1082130432, 0 );
    }
    CAMERA_PLAY_ANIMATED( "LEVEL_S_ROOFTOP_CP_01", "B_OUT_MID_01_RP_MAX_CAM", 0, 0, 0, 0, 0.00000000, 0, 0 );
    sub_28693();
    sub_2242( ref l_U147 );
    sub_2242( ref l_U167 );
    sub_440( "GA", "P_HW_0101RP_PrepareBlendout end", 0 );
    return;
}

void sub_28693()
{
    sub_440( "GA", "P_HW_CREATE_PH_DOORS start", 0 );
    l_U236 = sub_28783( 990918269, -1.66100000, 2.33300000, -5.80900000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U236 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U236, ref g_U1563 );
        FREEZE_OBJECT_POSITION( l_U236, 1 );
    }
    l_U237 = sub_28783( 1459973966, -4.71900000, 2.32200000, -5.80900000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U237 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U237, ref g_U1563 );
        FREEZE_OBJECT_POSITION( l_U237, 1 );
    }
    sub_440( "GA", "P_HW_CREATE_PH_DOORS end", 0 );
    return;
}

void sub_28783(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
        sub_25266( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

int sub_29262()
{
    unknown uVar2;
    unknown uVar3;

    if (l_U119._fU52)
    {
        DO_SCREEN_FADE_IN( 0 );
        sub_29294();
        l_U372 = 1;
    }
    sub_30374();
    if (NOT l_U238)
    {
        uVar2 = DOOR_FIND_CLOSEST( l_U183._fU0, l_U183._fU4 );
        uVar3 = DOOR_FIND_CLOSEST( l_U176._fU0, l_U176._fU4 );
        if ((DOES_OBJECT_EXIST( uVar3 )) AND (DOES_OBJECT_EXIST( uVar2 )))
        {
            sub_440( "GA", "Hiding penthouse doors.", 0 );
            SET_OBJECT_VISIBLE( uVar2, 0 );
            SET_OBJECT_COLLISION( uVar2, 0 );
            SET_OBJECT_VISIBLE( uVar3, 0 );
            SET_OBJECT_COLLISION( uVar3, 0 );
            l_U238 = 1;
        }
    }
    if (sub_2362( ref l_U147 ))
    {
        if (NOT (IS_PED_DEAD( l_U235 )))
        {
            REGISTER_TARGET( l_U235, sub_816() );
            SET_LOCKED_TARGET( l_U235, sub_816() );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U235, 0 );
            sub_31885( l_U235 );
            sub_15236( l_U235, l_U222._fU0, l_U222._fU12 );
            ISEQ_REGISTER_ENTITY( -407521813, "PED", l_U235, 0 );
            ISEQ_REGISTER_ENTITY( -407521813, "DOOR_R", l_U236, 1 );
            ISEQ_START( -407521813 );
            ISEQ_REGISTER_ENTITY( -1712187272, "DOOR_L", l_U237, 1 );
            ISEQ_START( -1712187272 );
        }
        PLAY_SOUND_FROM_COORD( -1, "S_FASHION_LOBBY_DOOR_KICK", -3.20000000, 2.32000000, -6.63000000 );
    }
    if (sub_2362( ref l_U167 ))
    {
        sub_32196( "SRTP_BLTTA", ref l_U157 );
    }
    if (NOT l_U156)
    {
        if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_ROOFTOP_CP_01", "B_OUT_MID_01_RP_MAX_CAM" )) - 1))
        {
            CAMERA_SNAP_POINT_AT_COORD( -3.64000000, 4.00000000, -5.65000000 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U1486[1], 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U1522[1], 1065353216, 0 );
            CAMERA_FREEZE_FRAME( 1, 500, 0, 0 );
            l_U156 = 1;
        }
    }
    if ((ISEQ_QUERY_ENTITY_STATE( -903619740, "player", 5 )) || (ISEQ_QUERY_ENTITY_STATE( -903619740, "player", 6 )))
    {
        if (NOT l_U156)
        {
            CAMERA_SNAP_POINT_AT_COORD( -3.64000000, 4.00000000, -5.65000000 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U1486[1], 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U1522[1], 1065353216, 0 );
            CAMERA_FREEZE_FRAME( 1, 500, 0, 0 );
            l_U156 = 1;
        }
        SET_GAME_PAUSED( 1 );
        DISABLE_RESTART_CHECKPOINT( 1 );
        sub_440( "GA", "Disabling control config settings.", 0 );
        SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
        sub_33695( ref l_U190[0], 1 );
        sub_13662( ref l_U190[0], 1 );
        sub_440( "GA", "Starting music track ROOFTOP_SONG_03 at mood ROOFTOP_SONG_03_2 fade in 1, fade out 5.", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "ROOFTOP_SONG_03", "ROOFTOP_SONG_03_2_3", "", 0.00000000, 1000, 5000, -1082130432, 0 );
        sub_440( "GA", "Playing audio music one shot ROOFTOP_ONESHOT_START", 0 );
        AUDIO_MUSIC_PLAY_ONESHOT();
        return 1;
    }
    return 0;
}

void sub_29294()
{
    sub_440( "GA", "P_HW_CREATE_PH_VICTIM start", 0 );
    l_U493 = sub_25096( ref l_U480 );
    if (NOT (IS_PED_DEAD( l_U493 )))
    {
        SET_ROOM_FOR_PED_BY_NAME( l_U493, ref g_U1563 );
        sub_29399( l_U493, 11 );
    }
    sub_440( "GA", "P_HW_CREATE_PH_VICTIM end", 0 );
    return;
}

void sub_29399(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
        sub_8833( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

int sub_30374()
{
    unknown uVar2;

    switch (l_U372)
    {
        case 1:
        sub_440( "GA", "e_HW_PenthouseEnemySpawnState = ENTITY_STATE_INIT", 0 );
        sub_30493( ref l_U432, 1056964608, 0 );
        l_U373 = 0;
        sub_440( "GA", "e_HW_PenthouseEnemySpawnState = ENTITY_STATE_CREATING", 0 );
        l_U372 = 2;
        break;
        case 2:
        l_U427[l_U373] = sub_25096( ref l_U374[l_U373] );
        sub_30793( l_U427[l_U373], ref l_U432 );
        sub_25973( ref l_U427[l_U373], "AIT_NOVICE", 3, 25 );
        uVar2 = sub_9162( l_U427[l_U373], 68019059, 25000, 0, 0 );
        SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar2, 50 );
        if (NOT (IS_PED_DEAD( l_U427[l_U373] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U427[l_U373], ref g_U1563 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U427[l_U373], 1 );
            SET_PED_ALERTNESS( l_U427[l_U373], 3 );
            SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U427[l_U373], 0 );
            SET_PED_PATH_CAN_DROP_FROM_HEIGHT( l_U427[l_U373], 0 );
            SET_PED_COMBAT_ATTRIBUTES( l_U427[l_U373], 1, 0 );
        }
        sub_26068( l_U427[l_U373] );
        l_U373++;
        if (l_U373 >= 4)
        {
            sub_440( "GA", "e_HW_PenthouseEnemySpawnState = ENTITY_STATE_POST_CREATE_SETUP", 0 );
            l_U372 = 3;
        }
        break;
        case 3:
        sub_31432( ref l_U427, "pi_HW_PenthouseEnemy" );
        sub_440( "GA", "e_HW_PenthouseEnemySpawnState = ENTITY_STATE_COMPLETE", 0 );
        l_U372 = 4;
        break;
    }
    if (l_U372 == 4)
    {
        return 1;
        break;
    }
    return 0;
}

void sub_30493(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
        }
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

void sub_30793(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
        sub_8833( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
            sub_30493( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
            sub_30493( iParam1, 1056964608, 0 );
        }
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

void sub_31432(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

void sub_31885(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

void sub_32196(unknown uParam0, unknown uParam1)
{
    sub_32208( uParam1 );
    sub_32288( 0, sub_816(), "MAX", uParam1, 2, 0 );
    sub_32288( 1, sub_816(), "MAX", uParam1, 2, 0 );
    sub_32513( uParam0, uParam1, 8, 1 );
    return;
}

void sub_32208(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

void sub_32288(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

void sub_32513(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return sub_32537( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

void sub_32537(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return sub_32592( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

int sub_32592(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT (sub_32627( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
    sub_33121( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

int sub_32627(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

void sub_33121(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

void sub_33695(int iParam0, int iParam1)
{
    if ((sub_13309( iParam0 )) == 0)
    {
        sub_13375( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

void sub_34085(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    sub_440( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return sub_34210( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 34170, 34188, uParam8 );
}

void sub_34170()
{
    return;
}

int sub_34188()
{
    return 1;
}

void sub_34210(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

void sub_34513(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
            sub_440( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
            sub_440( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                sub_440( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
            sub_440( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
            sub_440( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
            sub_440( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
            sub_23195( iParam0->_fU0, 0 );
            sub_440( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
            sub_35380( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
        sub_35380( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
        sub_440( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                sub_27472( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
        sub_35380( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
            sub_36024( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
        sub_36024( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

void sub_35380(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD( sub_816() )))
        {
            SET_PLAYER_CONTROL( sub_838(), 0, uParam2 );
            SET_PED_DUCKING( sub_816(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY( sub_816() );
            }
            SET_PED_INVINCIBLE( sub_816(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

void sub_36024(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        SET_PLAYER_CONTROL( sub_838(), 1, 0 );
        SET_PED_INVINCIBLE( sub_816(), 0 );
        if (bParam0)
        {
            sub_36105();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

void sub_36105()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD( sub_816() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND( sub_816(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND( sub_816(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_816(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_816(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

void sub_36448(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

    sub_440( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
        sub_440( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
        sub_9816( iParam1 );
        sub_36707( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
            sub_37158( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
            sub_37158( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_37390( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
            sub_37158( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_37390( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_37390( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
            sub_37158( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_37390( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_37390( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_37390( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
            sub_37158( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_37390( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_37390( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_37390( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if (sub_37390( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
            sub_38948( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
    sub_440( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

void sub_36707(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 = sub_7180( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
        sub_440( "TEH", "Ending context", 0 );
        sub_440( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

void sub_37158(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

void sub_37390(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

void sub_38948(int iParam0)
{
    sub_8833( "CHECKPOINT DATA" );
    sub_38987( iParam0->_fU4 );
    sub_39010( iParam0->_fU16 );
    sub_39010( iParam0->_fU20 );
    sub_39010( iParam0->_fU24 );
    sub_39053( iParam0->_fU28 );
    sub_39053( iParam0->_fU56 );
    sub_39053( iParam0->_fU60 );
    sub_39053( iParam0->_fU64 );
    sub_39053( iParam0->_fU68 );
    sub_39053( iParam0->_fU72 );
    sub_39053( iParam0->_fU76 );
    sub_39053( iParam0->_fU80 );
    sub_39053( iParam0->_fU84 );
    sub_39053( iParam0->_fU88 );
    sub_39053( iParam0->_fU92 );
    sub_39010( iParam0->_fU32 );
    sub_39053( iParam0->_fU36 );
    sub_39053( iParam0->_fU40 );
    sub_39053( iParam0->_fU44 );
    sub_39010( iParam0->_fU136 );
    sub_39258( iParam0->_fU140 );
    sub_39053( iParam0->_fU52 );
    sub_8833( "---nRightHolsterAttachmentEnabled: " );
    sub_39053( iParam0->_fU96 );
    sub_8833( "---nRightHolsterAttachmentToggled: " );
    sub_39053( iParam0->_fU100 );
    sub_8833( "---nLeftHolsterAttachmentEnabled: " );
    sub_39053( iParam0->_fU104 );
    sub_8833( "---nLeftHolsterAttachmentToggled: " );
    sub_39053( iParam0->_fU108 );
    sub_8833( "---nRifleHolsterAttachmentEnabled: " );
    sub_39053( iParam0->_fU112 );
    sub_8833( "---nRifleHolsterAttachmentToggled: " );
    sub_39053( iParam0->_fU116 );
    sub_8833( "---nRightHandAttachmentEnabled: " );
    sub_39053( iParam0->_fU120 );
    sub_8833( "---nRightHandAttachmentToggled: " );
    sub_39053( iParam0->_fU124 );
    sub_8833( "---nLeftHandAttachmentEnabled: " );
    sub_39053( iParam0->_fU128 );
    sub_8833( "---nLeftHandAttachmentToggled: " );
    sub_39053( iParam0->_fU132 );
    sub_39053( l_U1 );
    sub_39053( 144 );
    return;
}

void sub_38987(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return;
}

void sub_39010(unknown uParam0)
{
    return;
}

void sub_39053(unknown uParam0)
{
    return;
}

void sub_39258(boolean bParam0)
{
    if (bParam0)
    {
        ;
    }
    return;
}

void sub_40062()
{
    sub_440( "GA", "P_HW_CREATE_PLACEMENTS start", 0 );
    sub_40114();
    l_U212 = sub_40649( -4072149, 1.43000000, -14.91000000, -7.36000000, 0.00000000, 0.00000000, 0.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U212 ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U212, ref g_U1563 );
    }
    sub_440( "GA", "P_HW_CREATE_PLACEMENTS end", 0 );
    return;
}

void sub_40114()
{
    sub_440( "CO", "P_CREATE_S_FAS_GG_PT_01", 0 );
    sub_40224( ref g_U665, g_U719, -2005387757, -906480527, -14.51000000, 2.99000000, -7.52000000, 1.50000000, 0.00000000, 1.00000000, "MLORoom01" );
    sub_40353( ref g_U665 );
    return;
}

void sub_40224(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
        sub_440( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

void sub_40353(int iParam0)
{
    sub_440( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if ((sub_40414( iParam0->_fU12 )) == 1)
        {
            sub_440( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
            sub_440( "CO", "has never been collected.", 0 );
        }
        if ((sub_40414( iParam0->_fU12 )) == 0)
        {
            sub_6407( iParam0->_fU0 );
            iParam0->_fU0 = sub_40649( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                    sub_440( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
        sub_440( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

int sub_40414(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

void sub_40649(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    return Result;
}

void sub_41037()
{
    sub_440( "GA", "P_PH_CREATE_CELEBRITY_MAGAZINE start", 0 );
    l_U641 = sub_28783( -274880563, l_U642, 0, 0, 65456, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U641 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U641, ref g_U1563 );
        FREEZE_OBJECT_POSITION( l_U641, 1 );
    }
    sub_440( "GA", "P_PH_CREATE_CELEBRITY_MAGAZINE end", 0 );
    return;
}

void sub_41231()
{
    sub_440( "CCB", "P_START_SP_CHALLENGES", 0 );
    sub_440( "CCB", "Starting the Rooftop_Party_Penthouse_Hallways context...", 0 );
    START_CONTEXT( "Rooftop_Party_Penthouse_Hallways" );
    sub_440( "CCB", "Starting the Rooftop_Party context...", 0 );
    START_CONTEXT( "Rooftop_Party" );
    return;
}

void sub_41580(unknown uParam0, boolean bParam1)
{
    UI_SET( 25, 2, 1537, "SPSlotLoader", 1537, uParam0 );
    if (bParam1)
    {
        STOP_IMAGEFX( g_U1697, 0 );
        g_U1697 = PLAY_IMAGEFX( "INTERLACE_DESATURATED_PANEL_02", 3, 0 );
    }
    return;
}

void sub_42159()
{
    sub_440( "CCB", "P_START_ROOFTOP_HALLWAYS_TUTORIAL_MPM", 0 );
    SET_CAM_VIEW_MODE( 0 );
    DISPLAY_HUD( 0 );
    ENABLE_PLAYERHEALTH( 1 );
    ENABLE_CROSSHAIR( 1 );
    SET_CROSSHAIR_PULSE();
    ENABLE_MPM( 1 );
    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        SET_PED_CONSUMING_AMMO( sub_816(), 0 );
    }
    SET_PLAYER_CONTROL( sub_838(), 0, 256 );
    REENABLE_PLAYER_INPUT( 14 );
    REENABLE_PLAYER_INPUT( 15 );
    REENABLE_PLAYER_INPUT( 16 );
    REENABLE_PLAYER_INPUT( 17 );
    REENABLE_PLAYER_INPUT( 4 );
    REENABLE_PLAYER_INPUT( 6 );
    return;
}

int sub_42400()
{
    if (IS_PED_DEAD( l_U235 ))
    {
        return 1;
    }
    else if (IS_PED_SHOOTING( l_U235 ))
    {
        return 1;
    }
    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        if (IS_PED_SHOOTING( sub_816() ))
        {
            return 1;
        }
    }
    return 0;
}

void sub_42510()
{
    sub_440( "GA", "P_HW_ENEMY_START_FIGHT start", 0 );
    if (NOT (IS_PED_DEAD( l_U235 )))
    {
        PED_SET_ACTION_INTENTION( l_U235, 47, -1, 0.00000000, 0.00000000, 0.00000000 );
    }
    sub_440( "GA", "P_HW_ENEMY_START_FIGHT end", 0 );
    return;
}

int sub_42676()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        GET_POSITION_OF_ANALOGUE_STICKS( 0, ref uVar2, ref uVar3, ref uVar4, ref uVar5 );
        if ((IS_USING_CONTROLLER()) AND (IS_IN_SOUTHPAW_MODE()))
        {
            if ((((ABSI( uVar4 )) > 1) || (((ABSI( uVar5 )) > 1) AND (NOT IS_USING_CONTROLLER()))) || (((ABSI( uVar2 )) > 35) || ((ABSI( uVar3 )) > 35)))
            {
                return 1;
            }
        }
        else if ((((ABSI( uVar4 )) > 1) || (((ABSI( uVar5 )) > 1) AND (NOT IS_USING_CONTROLLER()))) || (((ABSI( uVar4 )) > 35) || ((ABSI( uVar5 )) > 35)))
        {
            return 1;
        }
    }
    return 0;
}

void sub_43391()
{
    sub_440( "CCB", "P_STOP_ROOFTOP_HALLWAYS_TUTORIAL_MPM", 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    SET_CAM_VIEW_MODE( 1 );
    SET_CAMERA_OVERRIDE( "", "", 0, 1, 1 );
    DISPLAY_HUD( 0 );
    ENABLE_PLAYERHEALTH( 0 );
    ENABLE_CROSSHAIR( 0 );
    ENABLE_MPM( 0 );
    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        SET_PED_CONSUMING_AMMO( sub_816(), 1 );
        SET_PLAYER_FORCED_AIM( sub_838(), 0, 0 );
    }
    return;
}

void sub_43719()
{
    sub_31885( l_U427[0] );
    sub_31885( l_U427[1] );
    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        if (NOT (IS_PED_DEAD( l_U427[0] )))
        {
            ISEQ_REGISTER_ENTITY( -58648941, "gmed", l_U427[0], 0 );
            REGISTER_TARGET( l_U427[0], sub_816() );
            TASK_AIM_GUN_AT_PED( l_U427[0], sub_816(), -1, 0 );
            SET_PED_FLAG_BLOCK_WOUNDED_MOVEMENT( l_U427[0], 1 );
            SET_PED_USES_DYING_ANIM( l_U427[0], 0 );
            SET_PED_AS_ONE_SHOT_KILL( l_U427[0], 1 );
        }
        if (NOT (IS_PED_DEAD( l_U427[1] )))
        {
            ISEQ_REGISTER_ENTITY( -58648941, "gmed1", l_U427[1], 0 );
            REGISTER_TARGET( l_U427[1], sub_816() );
            TASK_AIM_GUN_AT_PED( l_U427[1], sub_816(), -1, 0 );
            SET_PED_FLAG_BLOCK_WOUNDED_MOVEMENT( l_U427[1], 1 );
            SET_PED_USES_DYING_ANIM( l_U427[1], 0 );
            SET_PED_AS_ONE_SHOT_KILL( l_U427[1], 1 );
        }
    }
    ISEQ_START( -58648941 );
    return;
}

void sub_44683(int iParam0, int iParam1)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if (iParam1 == 1)
    {
        iParam0->_fU8 = iParam0->_fU4 - iParam0->_fU0;
        sub_2899( iParam0 );
    }
    else if (iParam0->_fU8 > 0)
    {
        sub_2242( iParam0 );
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA() - iParam0->_fU8;
        }
        else
        {
            iParam0->_fU0 = TIMERB() - iParam0->_fU8;
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM() - iParam0->_fU8;
        }
        iParam0->_fU4 = iParam0->_fU0;
        iParam0->_fU8 = 0;
    }
    return;
}

void sub_44933()
{
    if (l_U351)
    {
        if (IS_CONTROL_JUST_PRESSED( 2, 6 ))
        {
            sub_440( "GA", "End lock on tutorial.", 0 );
            SET_GAME_PAUSED( 0 );
            DISABLE_RESTART_CHECKPOINT( 0 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
            sub_1330();
            if (NOT l_U333._fU16)
            {
                sub_44683( ref l_U333, 0 );
            }
            l_U351 = 0;
        }
    }
    return;
}

int sub_45164()
{
    if (NOT (IS_PED_DEAD( l_U427[2] )))
    {
        if (IS_PED_ON_SCREEN( l_U427[2], 1 ))
        {
            return 1;
        }
    }
    if (NOT (IS_PED_DEAD( l_U427[3] )))
    {
        if (IS_PED_ON_SCREEN( l_U427[3], 1 ))
        {
            return 1;
        }
    }
    if (sub_45272( l_U440 ))
    {
        return 1;
    }
    return 0;
}

void sub_45272(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return sub_45290( sub_816(), uParam0 );
}

int sub_45290(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

void sub_45371()
{
    sub_440( "GA", "P_HW_START_VIG_01_B start", 0 );
    sub_31885( l_U427[2] );
    sub_31885( l_U427[3] );
    sub_45459( ref l_U438, l_U427[2], 1 );
    sub_45459( ref l_U438, l_U427[3], 1 );
    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        if (NOT (IS_PED_DEAD( l_U427[2] )))
        {
            ISEQ_REGISTER_ENTITY( -770391621, "gmed1", l_U427[2], 0 );
            sub_15236( l_U427[2], l_U374[2]._fU0, l_U374[2]._fU12 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U427[2], 0 );
            REGISTER_TARGET( l_U427[2], sub_816() );
        }
        if (NOT (IS_PED_DEAD( l_U427[3] )))
        {
            ISEQ_REGISTER_ENTITY( -770391621, "gmed", l_U427[3], 0 );
            sub_15236( l_U427[3], l_U374[3]._fU0, l_U374[3]._fU12 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U427[3], 0 );
            REGISTER_TARGET( l_U427[3], sub_816() );
        }
        ISEQ_START( -770391621 );
    }
    sub_440( "GA", "P_HW_START_VIG_01_B end", 0 );
    return;
}

void sub_45459(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

void sub_45915(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

void sub_46362()
{
    if ((NOT (IS_PLAYER_DEAD( sub_838() ))) AND ((NOT (IS_PED_DEAD( sub_816() ))) AND ((NOT g_U1699) AND (sub_46372()))))
    {
        if (NOT g_U1698)
        {
            if ((GET_PAYNEKILLER_AMT() > 0) AND ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_BULLET_CAMERA_ACTIVE()) AND (IS_PLAYER_CONTROL_ON( sub_838() )))))
            {
                if (sub_46519() < 0.40000000)
                {
                    sub_41580( "TUT_PAINKILLER", 1 );
                    SET_GAME_PAUSED( 1 );
                    DISABLE_RESTART_CHECKPOINT( 1 );
                    SET_CONTROL_CONFIG_OPTION_DISABLED( 1 );
                    sub_2106( ref g_U1700, 500, 1, 1 );
                    sub_2242( ref g_U1700 );
                    g_U1698 = 1;
                }
            }
        }
        else if ((g_U1700._fU16) || (sub_2362( ref g_U1700 )))
        {
            if (IS_CONTROL_PRESSED( 2, 19 ))
            {
                sub_440( "GA", "Player completed painkiller tutorial.", 0 );
                sub_1330();
                STOP_IMAGEFX( g_U1697, 0 );
                SET_GAME_PAUSED( 0 );
                DISABLE_RESTART_CHECKPOINT( 0 );
                SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
                SET_PLAYER_FORCE_PAIN_KILLER( 1 );
                g_U1698 = 0;
                g_U1699 = 1;
            }
        }
        if ((IS_LAST_MAN_STANDING_ACTIVE()) || (IS_BULLET_CAMERA_ACTIVE()))
        {
            sub_440( "GA", "Prematurely ending painkiller tutorial.", 0 );
            sub_1330();
            SET_GAME_PAUSED( 0 );
            DISABLE_RESTART_CHECKPOINT( 0 );
            SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
            SET_PLAYER_FORCE_PAIN_KILLER( 0 );
            g_U1698 = 0;
        }
    }
    if ((IS_PED_DEAD( sub_816() )) AND (g_U1698))
    {
        sub_47002();
    }
    return;
}

int sub_46372()
{
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (IS_TUTORIAL_COMPLETE())
    {
        return 0;
    }
    return 1;
}

float sub_46519()
{
    unknown uVar2;
    unknown uVar3;
    float Result;

    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        uVar2 = TO_FLOAT( (GET_PED_MAX_HEALTH( sub_816() )) - 100 );
        uVar3 = TO_FLOAT( (GET_PED_HEALTH( sub_816() )) - 100 );
        Result = uVar3 / uVar2;
        return Result;
    }
    return 0.00000000;
}

void sub_47002()
{
    if (g_U1698)
    {
        sub_1330();
        STOP_IMAGEFX( g_U1697, 0 );
        SET_GAME_PAUSED( 0 );
        DISABLE_RESTART_CHECKPOINT( 0 );
        SET_CONTROL_CONFIG_OPTION_DISABLED( 0 );
        SET_PLAYER_FORCE_PAIN_KILLER( 0 );
        g_U1698 = 0;
    }
    return;
}

void sub_47094()
{
    if (NOT (sub_47108( ref l_U645 )))
    {
        if ((sub_47143( ref l_U645 )) == 1)
        {
            sub_32196( "EXPLORE_ITEM", ref l_U773 );
        }
    }
    if (sub_47402( ref l_U645 ))
    {
        sub_440( "GA", "Starting Celebrity Magazine Log investigation.", 0 );
        sub_35380( 1, 0, 0, 1 );
        sub_49254( ref l_U731, 3.04000000, -15.75000000, -6.69000000, -46.36000000, 0.00000000, 98.18000000, 32.19000000, 3000 );
        sub_49465( ref l_U731 );
        SHAKE_CAM( l_U731._fU0, "HAND_SHAKE", 1.50000000 );
        if (NOT (IS_PED_DEAD( sub_816() )))
        {
            CLEAR_PED_TASKS_IMMEDIATELY( sub_816() );
            RESET_PLAYER_INPUT_GAIT( 0 );
            sub_1554();
            SET_PED_VISIBLE( sub_816(), 0 );
        }
        sub_15236( sub_816(), 3.51000000, -15.70000000, -7.83000000, 87.00000000 );
        if (NOT (HAS_EXPLORATION_ITEM_BEEN_FOUND( "sfas_CelebMag" )))
        {
            sub_49699( 0 );
            sub_32196( "SRTP_FBMAG", ref l_U763 );
            FOUND_EXPLORATION_ITEM( "sfas_CelebMag" );
        }
        SET_FORCED_AIM_INTENTION_DIRECTION( -0.83799300, -0.54546900, -0.01518200 );
        SET_FORCED_FORWARD_DIRECTION( -0.99863000, 0.05233600, 0.00000000 );
        l_U762 = 1;
    }
    if (l_U762)
    {
        if (sub_49905( ref l_U731, 1 ))
        {
            sub_440( "GA", "Ending prisoner log exploration item.", 0 );
            sub_50109( 0, 0, 0, 35.37000000, -5.18000000, 0 );
            if (NOT (IS_PED_DEAD( sub_816() )))
            {
                SET_PED_VISIBLE( sub_816(), 1 );
            }
            sub_36024( 1, 1 );
            RESET_FORCED_AIM_INTENTION_DIRECTION();
            RESET_FORCED_FORWARD_DIRECTION();
            sub_5252( ref l_U645, 1 );
        }
    }
    return;
}

void sub_47108(int iParam0)
{
    return iParam0->_fU56;
}

int sub_47143(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND ((iParam0->_fU76 == 0) AND ((sub_47108( iParam0 )) == 0)))
    {
        if ((sub_47299() == 1) AND (((IS_PED_RELOADING( sub_816() )) == 0) AND (((IS_PED_GETTING_UP( sub_816() )) == 0) AND (((IS_PED_PICKING_UP_PICKUP( sub_816() )) == 0) AND (((IS_PED_IN_COVER( sub_816() )) == 0) AND (((IS_PED_DUCKING( sub_816() )) == 0) AND ((IS_PLAYER_SHOOTDODGING() == 0) AND ((IS_MONOLOGUE_PLAYING() == 0) AND ((IS_INTERACTIONTEXT_AVAILABLE() == 0) AND (IS_INTERACTIONTEXT_ONSCREEN() == 1))))))))))
        {
            iParam0->_fU76 = 1;
            return 1;
        }
    }
    return 0;
}

int sub_47299()
{
    if ((IS_CONTROL_JUST_PRESSED( 0, 30 )) == 1)
    {
        return 1;
    }
    return 0;
}

int sub_47402(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    int iVar6;
    int iVar7;
    int iVar8;

    if ((IS_PED_DEAD( sub_816() )) == 0)
    {
        if (iParam0->_fU0 == 1)
        {
            uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( sub_816() )};
            iVar6 = 0;
            if (iParam0->_fU80 == 1)
            {
                if ((sub_45290( sub_816(), iParam0->_fU116 )) == 1)
                {
                    if (iParam0->_fU300 == 1)
                    {
                        if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                        {
                            iVar6 = 1;
                        }
                    }
                    else
                    {
                        iVar6 = 1;
                    }
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU84 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_PED_ON_SCREEN( iParam0->_fU316, 0 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU100, 1 )) <= iParam0->_fU112)
            {
                if (iParam0->_fU300 == 1)
                {
                    if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                    {
                        iVar6 = 1;
                    }
                }
                else
                {
                    iVar6 = 1;
                }
            };;;;
            iVar7 = 0;
            if (iParam0->_fU88 == 1)
            {
                if ((sub_45290( sub_816(), iParam0->_fU216 )) == 1)
                {
                    iVar7 = 1;
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU92 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU200, 1 )) <= iParam0->_fU212)
            {
                iVar7 = 1;
            };;;;
            if (iVar6 == 1)
            {
                if ((iParam0->_fU4 != 3) AND (iParam0->_fU52 == 1))
                {
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                        sub_5647( iParam0 );
                    }
                    iVar8 = 0;
                    if ((IS_WEAPON_PICKUP_VISIBLE() == 0) AND ((iParam0->_fU60 == 0) AND ((sub_5708( iParam0 )) == 1)))
                    {
                        SET_ACTION_CONSUMED( 0, 1 );
                        if (sub_47299() == 1)
                        {
                            iVar8 = 1;
                        }
                    }
                    if (iVar8 == 1)
                    {
                        if (iParam0->_fU332 == 0)
                        {
                            sub_5252( iParam0, 0 );
                            iParam0->_fU64 = 1;
                        }
                        if (iParam0->_fU68 == 1)
                        {
                            iParam0->_fU72 = 0;
                        }
                        return 1;
                    }
                    else if (iParam0->_fU8 != 2)
                    {
                        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                        {
                            sub_5296( iParam0, 0 );
                            sub_5496( iParam0, 1 );
                        }
                        else if (iParam0->_fU320 == 1)
                        {
                            sub_5296( iParam0, 1 );
                        }
                        iParam0->_fU8 = 2;
                    }
                    if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                    {
                        if ((IS_PED_DEAD( sub_816() )) == 0)
                        {
                            SET_PED_FORCED_TO_WALK( sub_816(), 1 );
                            iParam0->_fU328 = 1;
                        }
                    }
                }
            }
            else if (iVar7 == 1)
            {
                if (iParam0->_fU8 != 1)
                {
                    if ((iParam0->_fU4 != 3) AND (iParam0->_fU320 == 1))
                    {
                        sub_5296( iParam0, 1 );
                    }
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                        sub_5496( iParam0, 0 );
                    }
                    if (iParam0->_fU96 == 1)
                    {
                        if (((IS_PED_DEAD( sub_816() )) == 0) AND ((((IS_PED_DEAD( iParam0->_fU316 )) == 1) || ((IS_PED_DEAD( iParam0->_fU316 )) == 0)) AND ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)))
                        {
                            TASK_LOOK_AT_PED( sub_816(), iParam0->_fU316, -1, 0 );
                        }
                    }
                    else if ((IS_PED_DEAD( sub_816() )) == 0)
                    {
                        TASK_LOOK_AT_COORD( sub_816(), iParam0->_fU100, -1, 0 );
                    }
                    iParam0->_fU340 = 1;
                    if ((iParam0->_fU72 == 0) AND ((iParam0->_fU68 == 1) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU8 == 2))))
                    {
                        iParam0->_fU72 = 1;
                    }
                    iParam0->_fU8 = 1;
                }
                if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                {
                    if ((IS_PED_DEAD( sub_816() )) == 0)
                    {
                        SET_PED_FORCED_TO_WALK( sub_816(), 1 );
                        iParam0->_fU328 = 1;
                    }
                }
            }
            else if ((iParam0->_fU4 == 1) || (iParam0->_fU4 == 3))
            {
                ;
            }
            else if (iParam0->_fU8 != 0)
            {
                if (iParam0->_fU320 == 1)
                {
                    sub_5296( iParam0, 0 );
                }
            }
            if (iParam0->_fU8 == 2)
            {
                if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                {
                    sub_5496( iParam0, 0 );
                }
            }
            if (iParam0->_fU340)
            {
                if ((IS_PED_DEAD( sub_816() )) == 0)
                {
                    TASK_CLEAR_LOOK_AT( sub_816() );
                    iParam0->_fU340 = 0;
                }
            }
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                if ((IS_PED_DEAD( sub_816() )) == 0)
                {
                    SET_PED_FORCED_TO_WALK( sub_816(), 0 );
                    iParam0->_fU328 = 0;
                }
            }
            if (iParam0->_fU332 == 1)
            {
                sub_5496( iParam0, 0 );
            }
            iParam0->_fU8 = 0;;;
        }
    }
    return 0;
}

void sub_49254(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
    sub_2106( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U649, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

void sub_49465(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
    sub_2242( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

void sub_49699(unknown uParam0)
{
    int I;

    for ( I = 0; I <= 3; I++ )
    {
        if (IS_SCRIPTED_CONVERSATION_ONGOING( I ))
        {
            if ((g_U1[I] <= 8) AND (g_U1[I] >= 4))
            {
                STOP_SCRIPTED_CONVERSATION( I, uParam0, 0 );
            }
        }
    }
    return;
}

int sub_49905(int iParam0, boolean bParam1)
{
    if (bParam1 == 1)
    {
        if (NOT iParam0->_fU44)
        {
            if ((ref iParam0->_fU48->_fU16) || (sub_2362( iParam0 + 48 )))
            {
                iParam0->_fU44 = 1;
                iParam0->_fU36 = 1;
                return 1;
            }
        }
    }
    if (NOT bParam1)
    {
        if ((ref iParam0->_fU48->_fU16) || (sub_2362( iParam0 + 48 )))
        {
            iParam0->_fU36 = 1;
            return 1;
        }
    }
    return 0;
}

void sub_50109(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, float fParam4, unknown uParam5)
{
    SET_CAM_SIDE_LEFT( uParam2 );
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam3, 1065353216, 0 );
    }
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( fParam4, 1065353216, 0 );
    }
    RENDER_SCRIPT_CAMS( 0, uParam1, uParam0, uParam5 );
    return;
}

void sub_50453(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

void sub_50706(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 = sub_45290( sub_816(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

void sub_51763()
{
    sub_440( "SA", "P_PH_START_PIANOS_NIS start.", 0 );
    if (NOT (IS_PED_DEAD( sub_816() )))
    {
        ISEQ_REGISTER_ENTITY( 127872207, "Max", sub_816(), 0 );
        ISEQ_START( 127872207 );
    }
    l_U587 = 1;
    sub_440( "SA", "P_PH_START_PIANOS_NIS end.", 0 );
    return;
}

void sub_51929()
{
    switch (l_U587)
    {
        case 0: break;
        case 1:
        sub_35380( 1, 1, 0, 1 );
        if (NOT (IS_PED_DEAD( sub_816() )))
        {
            CLEAR_PED_TASKS_IMMEDIATELY( sub_816() );
            RESET_PLAYER_INPUT_GAIT( 0 );
            sub_1554();
        }
        sub_15236( sub_816(), l_U583, l_U586 );
        if (NOT (IS_PED_DEAD( sub_816() )))
        {
            if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( sub_816(), 1, 0 ) ))
            {
                SET_WEAPON_VISIBLE( GET_WEAPON_FROM_HAND( sub_816(), 1, 0 ), 0 );
            }
        }
        CAMERA_PLAY_ANIMATED( "LEVEL_S_ROOFTOP_CP_01", "VIG_01C_RP_MAX_PIANO_RIGHT_CAM", 0, 0, 0, 0, 0, 0, 0 );
        sub_52233( "ROOFTOP_PIANO_01", ref g_U1168 );
        sub_2242( ref l_U610 );
        SET_FORCED_AIM_INTENTION_DIRECTION( 0.12762200, -0.99040000, -0.05309900 );
        l_U587 = 2;
        break;
        case 2:
        if (sub_2362( ref l_U610 ))
        {
            sub_32196( "SRTP_MPPNA", ref l_U619 );
        }
        if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_ROOFTOP_CP_01", "VIG_01C_RP_MAX_PIANO_RIGHT_CAM" )) - 1))
        {
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( 8.27000000, 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( -11.73000000, 1065353216, 0 );
            CAMERA_FREEZE_FRAME( 1, 0, 0, 0 );
            if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( sub_816(), 1, 0 ) ))
            {
                SET_WEAPON_VISIBLE( GET_WEAPON_FROM_HAND( sub_816(), 1, 0 ), 1 );
            }
            SIMULATE_PLAYER_INPUT_GAIT( sub_838(), 2, 3000, 0 );
            l_U587 = 3;
            AUDIO_MUSIC_ADJUST_VOLUME( 0.00000000 );
        }
        else
        {
            AUDIO_MUSIC_ADJUST_VOLUME( -24.00000000 );
        }
        break;
        case 3:
        if ((ISEQ_QUERY_ENTITY_STATE( 127872207, "Max", 6 )) || (ISEQ_QUERY_ENTITY_STATE( 127872207, "Max", 5 )))
        {
            CAMERA_FREEZE_FRAME( 0, 0, 0, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( 8.27000000, 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( -11.73000000, 1065353216, 0 );
            sub_36024( 1, 1 );
            RESET_FORCED_AIM_INTENTION_DIRECTION();
            l_U587 = 4;
        }
        break;
        case 4: break;
    }
    return;
}

void sub_52233(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if (sub_4324( uParam0, uParam1 ))
    {
        iVar4 = sub_4423( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            PLAY_SCRIPT_STREAM_FRONTEND( iVar4 );
        }
        else
        {
            SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

void sub_53189()
{
    sub_440( "GA", "P_RELEASE_HW_ASSETS start", 0 );
    sub_53246( ref l_U106, ref g_U821 );
    sub_53524( ref l_U114, ref g_U918 );
    sub_53760( "LEVEL_S_ROOFTOP_CP_01", ref g_U1028 );
    sub_53760( "DAM_DEAD", ref g_U1028 );
    sub_53986( "SCRIPT_MISSION\S_FASHION_LOBBY", ref g_U1221 );
    sub_440( "GA", "P_RELEASE_HW_ASSETS end", 0 );
    return;
}

void sub_53246(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_53281( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_53281(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_3898( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

void sub_53524(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_53559( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_53559(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 = sub_3898( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_53760(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_3898( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_53986(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_3898( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

