void main()
{
    g_U0 = 2;
    g_U1 = 5;
    g_U2 = 10;
    g_U3 = 10;
    g_U4 = 3;
    g_U5 = 10000;
    g_U6 = 10000;
    g_U7 = 50;
    g_U8 = 70;
    g_U9 = 100;
    g_U10 = 200;
    g_U11 = 250;
    g_U12 = 300;
    g_U13 = 3;
    g_U14 = 5;
    g_U15 = 10;
    g_U16 = 15;
    g_U17 = 20;
    g_U18 = 25;
    g_U19 = 50;
    g_U20 = 100;
    g_U21 = 150;
    g_U22 = 200;
    g_U23 = 5;
    g_U24 = 20.00000000;
    g_U25 = 10;
    g_U26 = 1500;
    g_U27 = 10;
    g_U28 = 5;
    g_U29 = 10;
    g_U30 = 20;
    g_U31 = 10;
    g_U32 = 10;
    g_U33 = 20;
    g_U34 = 25;
    g_U35 = 10;
    g_U36 = 20;
    g_U37 = 5000;
    g_U38 = 20;
    g_U39 = 10;
    g_U40 = 10;
    g_U41 = 20;
    g_U42 = 30;
    g_U43 = 20;
    g_U44 = 25;
    g_U45 = 10;
    g_U46 = 10;
    g_U47 = 20;
    g_U48 = 10;
    g_U49 = 15;
    g_U50 = 15;
    g_U51 = 10;
    g_U52 = 5;
    g_U53 = 10;
    g_U54 = 5;
    g_U55 = 30;
    g_U56 = 20;
    g_U57 = 10;
    g_U58 = 5;
    g_U59 = 0.33334000;
    g_U60 = 1.00000000;
    g_U61 = 0.11111000;
    g_U62 = 0.20000000;
    g_U63 = 0.10000000;
    g_U2519 = 0;
    g_U2520 = -1;
    g_U2544 = -1;
    g_U4530 = 0;
    g_U4534 = 0;
    StrCopy( ref g_U4552, " ", 64 );
    g_U4568 = 0;
    g_U5134 = 0;
    g_U5156 = -1;
    g_U5327 = 1;
    g_U5332 = 10;
    g_U5333 = 20;
    g_U5334 = 30;
    g_U5335 = 10;
    g_U5336 = 10;
    g_U5337 = 10;
    g_U5338 = 10;
    g_U5339 = 10;
    g_U5340 = 20;
    g_U5341 = 10;
    g_U5342 = 30;
    g_U5343 = 10;
    g_U5344 = 10;
    g_U5345 = 20;
    g_U5346 = 10;
    g_U5347 = 20;
    g_U5348 = 10;
    g_U5349 = 5;
    g_U5350 = 20;
    g_U5351 = 50;
    g_U5352 = 10;
    g_U5353 = 20;
    g_U5354 = 10;
    g_U5355 = 5;
    g_U5356 = 20;
    g_U5357 = 20;
    g_U5358 = 50;
    g_U5359 = 100;
    g_U5360 = 125;
    g_U5361 = 15;
    g_U5362 = 30;
    g_U5363 = 50;
    g_U5364 = 100;
    g_U5365 = 100;
    g_U5366 = 10;
    g_U5367 = 20;
    g_U5368 = 20;
    g_U5369 = 20;
    g_U5370 = 5;
    g_U5371 = 25;
    g_U5372 = 20;
    g_U5373 = 20;
    g_U5374 = 10;
    g_U5375 = 20;
    g_U5376 = 20;
    g_U5377 = 20;
    g_U5378 = 10;
    g_U5379 = 10;
    g_U5380 = 20;
    g_U5381 = 75;
    g_U5382 = 75;
    g_U5383 = 200;
    g_U5384 = 200;
    g_U5385 = 20;
    g_U5386 = 10;
    g_U5387 = 10;
    g_U5388 = 200;
    g_U5389 = 25;
    g_U5390 = 25;
    g_U5391 = 75;
    g_U5392 = 150;
    g_U5393 = 0.20000000;
    g_U5394 = 0.20000000;
    g_U5395 = 0.10000000;
    g_U5396 = 0.10000000;
    g_U5397 = 0.10000000;
    g_U5398 = 0.10000000;
    g_U5399 = 0.10000000;
    g_U5400 = GET_STREAM_PED_PACK_ID( -1126833125 );
    g_U5401 = -1;
    g_U5402 = g_U2544;
    g_U5503 = 0;
    g_U5696 = -1;
    g_U5699 = 0;
    g_U5815 = 300;
    g_U5816 = 250;
    g_U5817 = 200;
    g_U5818 = 175;
    g_U5819 = 150;
    g_U5820 = 100;
    g_U5821 = 80;
    g_U5822 = 70;
    g_U5823 = 60;
    g_U5824 = 50;
    g_U5825 = 60;
    g_U5826 = 45;
    g_U5827 = 30;
    g_U5828 = 20;
    g_U5829 = 10;
    g_U5830 = 250;
    g_U5898 = 1;
    g_U6081 = -10;
    g_U6082 = -10;
    g_U6083 = -10;
    g_U6084 = -10;
    g_U6087 = 0;
    g_U6391 = 1;
    CREATE_PLAYER_WITH_AVATAR( NETWORK_GET_AVATAR_SELECTED_DEATHMATCH_SLOT_HASH(), 0, 0, 65486, 1 );
    DISPLAYF( "Calling lev_startup script.", 0 );
     /* CALL_SCRIPT */ sub_1218( "lev_startup", 1536 );
    DISPLAYF( "Script completed.", 0 );
    SET_CAM_VIEW_MODE( 1 );
     /* VS_SP_MAIN */ sub_1363();
    return;
}

/* CALL_SCRIPT */ void sub_1218(unknown uParam0, unknown uParam1)
{
    unknown uVar4;

    REQUEST_SCRIPT( uParam0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_SCRIPT_LOADED( uParam0 )))
    {
        SEV_YIELD();
    }
    uVar4 = START_NEW_SCRIPT( uParam0, uParam1 );
    while (IS_THREAD_ACTIVE( uVar4 ))
    {
        SEV_YIELD();
    }
    return;
}

/* VS_SP_MAIN */ void sub_1363()
{
    int iVar2;
    boolean bVar3;
    boolean bVar4;
    boolean bVar5;

    SET_DEBUG_ACTIVE( 0 );
    iVar2 = GET_CHECKPOINT_SELECTED();
    bVar3 = iVar2 == 0;
    bVar4 = iVar2 == 3;
    bVar5 = iVar2 == 4;
     /* VS_SP_PLAYERSETUP */ sub_1442( g_U6098, bVar3, bVar4, GET_HASH_KEY( ref g_U6101 ) );
    if (bVar4)
    {
        DISPLAYF( "No scripts checkpoint.", 0 );
    }
    else if (bVar3)
    {
        DISPLAYF( "Disabling ped intelligence - player control will be disabled too", 0 );
        SET_ENABLE_PED_PROCESS_INTELLIGENCE( 1 );
    }
    else if (bVar5)
    {
        DISPLAYF( "Random Ped Test checkpoint.", 0 );
         /* VS_SP_KICKOFFRANDOMSTREAMPEDTEST */ sub_3062();
    }
    else
    {
        SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE( 1 );
        DISPLAYF( "Loading script for dev menu RAG widgets", 0 );
        REQUEST_SCRIPT( "payne_versus_devmenuwidgets" );
        "[doubled result, dropped if not asigned]";
        while (NOT (HAS_SCRIPT_LOADED( "payne_versus_devmenuwidgets" )))
        {
            WAIT( 1 );
        }
        START_NEW_SCRIPT_TYPED( "payne_versus_devmenuwidgets", 8192, 0 );
    };;;
    return;
}

/* VS_SP_PLAYERSETUP */ void sub_1442(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5)
{
    DISPLAYF( "vs_sp_PlayerSetup() load models? ", 1, 257, bParam3 );
    LOAD_SCENE( uParam0 );
    GIVE_WEAPON_TO_PED_HAND(  /* PLAYER_PED_ID */ sub_1531(), -1074756423, 250000, 0 );
    GIVE_WEAPON_TO_PED_HOLSTER(  /* PLAYER_PED_ID */ sub_1531(), 406496141, 250000, 0 );
     /* VS_SP_PLAYERTELEPORT */ sub_1640( uParam0, 0.00000000, uParam5, 0 );
    DO_SCREEN_FADE_IN( 0 );
    if (NOT bParam4)
    {
        FORCE_WEAPON_LOAD();
        DISPLAYF( "Called FORCE_WEAPON_LOAD", 0 );
    }
    if (bParam3)
    {
         /* VS_SP_LOADTESTMODELS */ sub_1997( uParam0 );
    }
    return;
}

/* PLAYER_PED_ID */ void sub_1531()
{
    return GET_PLAYER_PED( INT_TO_PLAYERINDEX( GET_PLAYER_ID() ) );
}

/* VS_SP_PLAYERTELEPORT */ void sub_1640(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4, boolean bParam5)
{
    unknown uVar8;

    DISPLAYF( "Teleporting player to pos/heading:", 2, 1027, uParam0, 769, uParam3 );
    REQUEST_COLLISION_AT_COORD( uParam0 );
    LOAD_SCENE( uParam0 );
    if (iParam4 != 0)
    {
        LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_AT_COORDS( uParam0 ), iParam4 );
    }
    uVar8 =  /* VS_SP_GETPLAYERPED */ sub_1777();
    if (NOT (IS_PED_DEAD( uVar8 )))
    {
        if (bParam5)
        {
            SET_PED_COORDS_NO_OFFSET( uVar8, uParam0 );
        }
        else
        {
            SET_PED_COORDS( uVar8, uParam0, 1 );
        }
        SET_PED_HEADING( uVar8, uParam3 );
        if (iParam4 != 0)
        {
            SET_ROOM_FOR_PED_BY_KEY( uVar8, iParam4 );
        }
    }
    return;
}

/* VS_SP_GETPLAYERPED */ void sub_1777()
{
    return GET_PLAYER_PED( GET_PLAYER_ID() );
}

/* VS_SP_LOADTESTMODELS */ void sub_1997(unknown uParam0, unknown uParam1, unknown uParam2)
{
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( 1274458747, "mp_cs_201", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( 1274458747, "mp_cs_202", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( 1274458747, "mp_cs_203", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( 1274458747, "mp_cs_204", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( 1274458747, "mp_cs_205", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( 1274458747, "mp_cs_206", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( 1274458747, "mp_cs_207", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( 1274458747, "mp_cs_208", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( -1238607547, "mp_ufe_01", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( -1238607547, "mp_ufe_02", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( 174663350, "mp_ufe_03", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( 174663350, "mp_ufe_04", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( -1238607547, "mp_ufe_05", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( -1238607547, "mp_ufe_06", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_2055( -1238607547, "mp_ufe_07", uParam0, 0, 1, 0, 0 );
    DISPLAYF( "Done loading models", 0 );
    return;
}

/* VS_SP_PED_CREATEATPOSHEADING */ void sub_2055(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, boolean bParam6, boolean bParam7, boolean bParam8)
{
    unknown Result;

    DISPLAYF( "vs_sp_Ped_CreateAtPosHeading()", 0 );
    if (bParam6)
    {
        DISPLAYF( "Loading model {}", 1, 513, uParam0 );
        REQUEST_MODEL( uParam0 );
        "[doubled result, dropped if not asigned]";
        while (NOT (HAS_MODEL_LOADED( uParam0 )))
        {
            WAIT( 0 );
        }
        DISPLAYF( "Done loading model {}", 1, 513, uParam0 );
    }
    Result = CREATE_PED( 26, uParam0, uParam2, uParam5, 1, 0 );
    SET_PED_HEADING( Result, uParam5 );
    DISPLAYF( "Created ped with model {} and scene ped {}.", 2, 513, uParam0, 1537, uParam1 );
    if (bParam7)
    {
        ;
    }
    if (bParam8)
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( Result, 1 );
        FREEZE_PED_POSITION( Result, 1 );
    }
    return Result;
}

/* VS_SP_KICKOFFRANDOMSTREAMPEDTEST */ void sub_3062()
{
    int[15] iVar2;
    int[14] iVar18;

    array(ref iVar2, 15);
    array(ref iVar18, 14);
    iVar18[0] = -193028838;
    iVar18[1] = 1157878433;
    iVar18[2] = 147144082;
    iVar18[3] = -628443318;
    iVar18[4] = 786970899;
    iVar18[5] = 1887961707;
    iVar18[6] = -496155350;
    iVar18[7] = 534634923;
    iVar18[8] = -1750088116;
    iVar18[9] = 1026452798;
    iVar18[10] = -2030956875;
    iVar18[11] = 204318279;
    iVar18[12] = -1789417893;
    iVar18[13] = 1951695172;
    iVar2[0] = 297;
    iVar2[1] = 247;
    iVar2[2] = 187;
    iVar2[3] = 147;
    iVar2[4] = 168;
    iVar2[5] = 336;
    iVar2[6] = 352;
    iVar2[7] = 25;
    iVar2[8] = 118;
    iVar2[9] = 96;
    iVar2[10] = 67;
    iVar2[11] = 57;
    iVar2[12] = 27;
    iVar2[13] = 78;
    iVar2[14] = 261;
     /* SEV_MP_TELEPORTPLAYERTOSPAWNPOINT */ sub_3726( 0,  /* SEV_MP_GETSPAWNPOINTNODE */ sub_3388( 0 ), 1, 0, 0, 0 );
     /* VS_SP_DEBUG_CREATEANDLOADPEDSFROMARRAYS */ sub_12938( ref iVar18, ref iVar2 );
    return;
}

/* SEV_MP_GETSPAWNPOINTNODE */ void sub_3388(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_3429( 0, uParam0, 0 );
}

/* SEV_MP_GETLEVELDATANODE */ void sub_3429(unknown uParam0, unknown uParam1, unknown uParam2)
{
    unknown Result;

    Result = NETWORK_LEVEL_DATA_RUN_STORED_QUERY_NODE( g_U2544, uParam0, uParam1, uParam2 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataNode() Query #{} with params {} and {} returned node ", 6, 513, uParam0, 513, uParam1, 513, uParam2, 1793, Result, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( Result ), 1281, ref g_U3173 );
    return Result;
}

/* SEV_MP_GETLEVELDATANAMEBYNODE */ string sub_3598(unknown uParam0)
{
    if (NOT (NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 64, ref g_U3173, ":name", uParam0 )))
    {
        StrCopy( ref g_U3173, "", 64 );
    }
    return "";
}

/* SEV_MP_TELEPORTPLAYERTOSPAWNPOINT */ void sub_3726(unknown uParam0, unknown uParam1, int iParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    if ( /* SEV_MP_ISPLAYERACTIVE */ sub_3774( uParam0 ))
    {
         /* __SEV_MP_BEFORETELEPORTPLAYER */ sub_3836( uParam0 );
         /* __SEV_MP_TELEPORTPLAYERTOSPAWNPOINT */ sub_5530( uParam0, uParam1, 0, 1, uParam3, uParam4, 1, uParam5 );
        if ((NOT g_U116._fU0) AND (uParam5))
        {
            iParam2 = 0;
        }
         /* __SEV_MP_AFTERTELEPORTPLAYER */ sub_12285( uParam0, iParam2 );
    }
    return;
}

/* SEV_MP_ISPLAYERACTIVE */ void sub_3774(unknown uParam0)
{
    return g_U126[uParam0]._fU0;
}

/* __SEV_MP_BEFORETELEPORTPLAYER */ void sub_3836(unknown uParam0)
{
     /* SEV_MP_FADEOUTPLAYER */ sub_3884( uParam0, 100, 0 );
     /* SEV_WAIT */ sub_4364( 100 );
     /* SEV_MP_PLAYERSETINERT */ sub_4439( uParam0, 1, 1 );
    return;
}

/* SEV_MP_FADEOUTPLAYER */ void sub_3884(unknown uParam0, unknown uParam1, unknown uParam2)
{
    DISPLAYF( "sev_mp_FadeOutPlayer() for player {} ({}) over {} ms", 3, 513, uParam0, 1281, ref g_U126[uParam0]._fU76, 513, uParam1 );
    SEV_ISOLATE();
    if ( /* SEV_MP_ISTHISMYPLAYER */ sub_4016( uParam0 ))
    {
         /* SEV_MP_FADEOUT */ sub_4116( uParam1, uParam2 );
    }
    SEV_ISOLATE_OFF();
    return;
}

/* SEV_MP_ISTHISMYPLAYER */ boolean sub_4016(int iParam0)
{
    return iParam0 == ( /* SEV_MP_GETMYPLAYER */ sub_4052());
}

/* SEV_MP_GETMYPLAYER */ void sub_4052()
{
    return SEV_GET_MY_PLAYER();
}

/* SEV_MP_FADEOUT */ void sub_4116(unknown uParam0, unknown uParam1)
{
    DISPLAYF( "sev_mp_FadeOut() attempting to fade out over {} ms", 1, 513, uParam0 );
    SEV_ISOLATE();
    if ((uParam1) || (NOT g_U3155))
    {
        DISPLAYF( "sev_mp_FadeOut() performing fade", 0 );
        MANOGAMETESTER_DISABLE();
        DISPLAYF( "[MANOGAMETESTER] disabled", 0 );
        g_U6086 = 0;
        DO_SCREEN_FADE_OUT( uParam0 );
    }
    SEV_ISOLATE_OFF();
    return;
}

/* SEV_WAIT */ void sub_4364(unknown uParam0)
{
    if (IS_THIS_THREAD_ISOLATED())
    {
        WAIT( uParam0 );
    }
    else
    {
        SEV_WAIT_FOR( SEV_ON_TIMER( uParam0 ) );
    }
    return;
}

/* SEV_MP_PLAYERSETINERT */ void sub_4439(unknown uParam0, unknown uParam1, boolean bParam2)
{
    DISPLAYF( "sev_mp_PlayerSetInert() {} ({}) to {} where joining is {}", 4, 513, uParam0, 1281, ref g_U126[uParam0]._fU76, 257, uParam1, 257,  /* SEV_MP_ISPLAYERJOINING */ sub_4566( uParam0 ) );
    if (( /* SEV_MP_ISPLAYERJOINING */ sub_4566( uParam0 )) || (uParam1))
    {
         /* SEV_MP_PLAYERSETHIDDEN */ sub_4688( uParam0, 1, 1 );
         /* SEV_MP_PLAYERSETCONTROL */ sub_5092( uParam0, 0 );
         /* SEV_MP_PLAYERSETINVINCIBLE */ sub_5295( uParam0, 1 );
    }
    else if (bParam2)
    {
         /* SEV_MP_PLAYERSETCONTROL */ sub_5092( uParam0, 1 );
    }
     /* SEV_MP_PLAYERSETHIDDEN */ sub_4688( uParam0, 0, bParam2 );
     /* SEV_MP_PLAYERSETINVINCIBLE */ sub_5295( uParam0, 0 );;
    return;
}

/* SEV_MP_ISPLAYERJOINING */ boolean sub_4566(unknown uParam0)
{
    return (g_U126[uParam0]._fU32 == 3) || ((g_U126[uParam0]._fU32 == 2) || (g_U126[uParam0]._fU32 == 1));
}

/* SEV_MP_PLAYERSETHIDDEN */ void sub_4688(unknown uParam0, boolean bParam1, boolean bParam2)
{
    DISPLAYF( "sev_mp_PlayerSetHidden() {} to {}", 2, 513, uParam0, 257, bParam1 );
    if (bParam1)
    {
        SET_PED_VISIBLE( g_U126[uParam0]._fU72, 0 );
         /* SEV_MP_PLAYERSETPOSFROZEN */ sub_4810( uParam0, 1 );
        SET_PED_COLLISION( g_U126[uParam0]._fU72, 0 );
    }
    else
    {
        SET_PED_COLLISION( g_U126[uParam0]._fU72, 1 );
        if (bParam2)
        {
             /* SEV_MP_PLAYERSETPOSFROZEN */ sub_4810( uParam0, 0 );
        }
        SET_PED_VISIBLE( g_U126[uParam0]._fU72, 1 );
    }
    SET_PED_CAN_BE_TARGETTED( g_U126[uParam0]._fU72, NOT bParam1 );
    g_U126[uParam0]._fU16 = bParam1;
    return;
}

/* SEV_MP_PLAYERSETPOSFROZEN */ void sub_4810(unknown uParam0, unknown uParam1)
{
    DISPLAYF( "sev_mp_PlayerSetPosFrozen() {} to {}", 2, 513, uParam0, 257, uParam1 );
    FREEZE_PED_POSITION( g_U126[uParam0]._fU72, uParam1 );
    g_U126[uParam0]._fU24 = uParam1;
    return;
}

/* SEV_MP_PLAYERSETCONTROL */ void sub_5092(unknown uParam0, unknown uParam1)
{
    DISPLAYF( "sev_mp_PlayerSetControl() {} to {}", 2, 513, uParam0, 257, uParam1 );
    SET_PLAYER_CONTROL_FOR_NETWORK(  /* SEV_MP_GETLOCALPLAYERINDEX */ sub_5185( uParam0 ), uParam1, 1 );
    g_U126[uParam0]._fU28 = uParam1;
    return;
}

/* SEV_MP_GETLOCALPLAYERINDEX */ void sub_5185(unknown uParam0)
{
    unknown Result;

    SEV_ISOLATE();
    Result = SEV_PLAYER_SLOT_TO_INDEX( uParam0 );
    SEV_ISOLATE_OFF();
    return Result;
}

/* SEV_MP_PLAYERSETINVINCIBLE */ void sub_5295(unknown uParam0, unknown uParam1)
{
    DISPLAYF( "sev_mp_PlayerSetInvincible() {} to {}", 2, 513, uParam0, 257, uParam1 );
    SET_PLAYER_INVINCIBLE(  /* SEV_MP_GETLOCALPLAYERINDEX */ sub_5185( uParam0 ), uParam1 );
    SET_PED_PROOFS( g_U126[uParam0]._fU72, uParam1, uParam1, uParam1, uParam1, uParam1 );
    g_U126[uParam0]._fU20 = uParam1;
    return;
}

/* __SEV_MP_TELEPORTPLAYERTOSPAWNPOINT */ void sub_5530(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
     /* __SEV_MP_TELEPORTPLAYERTOSPAWNPOINT_HEADINGOVERRIDE */ sub_5594( uParam0, uParam1, uParam2, uParam5, uParam4, uParam3, uParam6, uParam7 );
    return;
}

/* __SEV_MP_TELEPORTPLAYERTOSPAWNPOINT_HEADINGOVERRIDE */ void sub_5594(unknown uParam0, int iParam1, boolean bParam2, unknown uParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;

    DISPLAYF( "__sev_mp_TeleportPlayerToSpawnPoint() Player {} ({}) to SP {}{}", 4, 513, uParam0, 1281, ref g_U126[uParam0]._fU76, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( iParam1 ), 1281, ref g_U3173 );
    if ((iParam1 == g_U2544) || (iParam1 == nil))
    {
        SCRIPT_ASSERT( "__sev_mp_TeleportPlayerToSpawnPoint() Invalid spawn point node {} requested", 1, 1793, iParam1 );
        return;
    }
    uVar10 = { /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_5886( iParam1 )};
    SEV_ISOLATE();
    if (bParam4)
    {
        uVar13 = uParam3;
    }
    else if (bParam2)
    {
        uVar13 =  /* SEV_MP_GETSPAWNPOINTGROUPHEADINGBYNODE */ sub_6080( iParam1, 1 );
    }
    else
    {
        uVar14 = { /* MP_SPAWN_GETHEADINGOPTIONS */ sub_6487( uParam0 )};
         /* SEV_MP_SPAWN_DOESSPAWNPOINTFITHEADINGOPTIONS */ sub_6559( iParam1, uVar14, ref uVar13, 20.00000000 );
    }
    SEV_ISOLATE_OFF();
     /* __SEV_MP_TELEPORTPLAYERTOPOSITION */ sub_8571( uParam0, uVar10, uVar13,  /* SEV_MP_GETLEVELDATAROOMKEYBYNODE */ sub_8412( iParam1 ), uParam5, uParam6, uParam7 );
    return;
}

/* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ void sub_5886(unknown uParam0)
{
    unknown Result;
    unknown uVar4;
    unknown uVar5;

    NETWORK_LEVEL_DATA_GET_VECTOR_FROM_NODE( ref Result, ":pos", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataPositionByNode()", 3, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( uParam0 ), 1281, ref g_U3173, 1027, Result );
    return Result;
}

/* SEV_MP_GETSPAWNPOINTGROUPHEADINGBYNODE */ void sub_6080(unknown uParam0, boolean bParam1)
{
    float Result;
    unknown uVar5;

    Result =  /* SEV_MP_GETLEVELDATAHEADINGBYNODE */ sub_6133( uParam0 );
    if (bParam1)
    {
        NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( ref uVar5, ":groupHeading", uParam0 );
        Result += uVar5;
    }
    DISPLAYF( "[LEVELDATA] sev_mp_GetSpawnPointGroupHeadingByNode() {}{} with heading {} (groupHeading {} added)", 4, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( uParam0 ), 1281, ref g_U3173, 769, Result, 769, uVar5 );
    return Result;
}

/* SEV_MP_GETLEVELDATAHEADINGBYNODE */ void sub_6133(unknown uParam0)
{
    unknown Result;

    NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( ref Result, ":heading", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataHeadingByNode()", 3, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( uParam0 ), 1281, ref g_U3173, 769, Result );
    return Result;
}

/* MP_SPAWN_GETHEADINGOPTIONS */ string sub_6487(unknown uParam0)
{
    return "[dynamic result, ret vals = 11]";
    break;
    g_U2496;
    uParam0;
    break;
}

/* SEV_MP_SPAWN_DOESSPAWNPOINTFITHEADINGOPTIONS */ void sub_6559(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown Result;
    float fVar24;
    float fVar25;
    unknown uVar26;
    boolean bVar27;
    int I;

    if (uParam1._fU0 <= 0)
    {
        (uParam12^) =  /* SEV_MP_GETLEVELDATAHEADINGBYNODE */ sub_6133( uParam0 );
        DISPLAYF( "[SpawnDebug] == Checking spawn {}{} heading, TRUE because there are no heading options!", 2, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( uParam0 ), 1281, ref g_U3173 );
        return 1;
    }
     /* SEV_MP_GETSPAWNPOINTBYNODE */ sub_6761( uParam0, ref uVar16 );
    if (uParam1._fU0 == 1)
    {
        Result = GET_BEST_HEADING_IF_POSSIBLE( uVar16._fU0, uParam1._fU4[0], uVar16._fU12, uVar16._fU16, uParam13, uParam12 );
        DISPLAYF( "[SpawnDebug] == Checking spawn {}{} with pos {}, heading {} with +- {} arc (+{}). {} toward pos {} with heading {}", 9, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( uParam0 ), 1281, ref g_U3173, 1027, uVar16._fU0, 769, uVar16._fU12, 769, uVar16._fU16, 769, uParam13, 257, Result, 1027, uParam1._fU4[0], 769, (uParam12^) );
        return Result;
    }
    else
    {
        (uParam12^) = uVar16._fU12;
    }
    if (uParam1._fU0 > 3)
    {
        SCRIPT_ASSERT( "Too many spawn heading options returned by game mode", 0 );
        uParam1._fU0 = 3;
    }
    for ( I = 0; I < uParam1._fU0; I++ )
    {
        if (NOT bVar27)
        {
            if (GET_BEST_HEADING_IF_POSSIBLE( uVar16._fU0, uParam1._fU4[I], uVar16._fU12, uVar16._fU16, uParam13, ref uVar26 ))
            {
                fVar24 = VDIST2( uVar16._fU0, uParam1._fU4[I] );
                (uParam12^) = uVar26;
                bVar27 = true;
                DISPLAYF( "[SpawnDebug] == Checking spawn {}{} with pos {}, heading {} +- {} arc (+{}). TRUE toward pos {} with heading {}", 8, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( uParam0 ), 1281, ref g_U3173, 1027, uVar16._fU0, 769, uVar16._fU12, 769, uVar16._fU16, 769, uParam13, 1027, uParam1._fU4[I], 769, (uParam12^) );
            }
            else
            {
                DISPLAYF( "[SpawnDebug] == Checking spawn {}{} with pos {}, heading {} +- {} arc (+{}). FALSE toward pos {} with heading {}", 8, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( uParam0 ), 1281, ref g_U3173, 1027, uVar16._fU0, 769, uVar16._fU12, 769, uVar16._fU16, 769, uParam13, 1027, uParam1._fU4[I], 769, uVar26 );
            }
        }
        else
        {
            fVar25 = VDIST2( uVar16._fU0, uParam1._fU4[I] );
            if (fVar25 < fVar24)
            {
                if (GET_BEST_HEADING_IF_POSSIBLE( uVar16._fU0, uParam1._fU4[I], uVar16._fU12, uVar16._fU16, uParam13, ref uVar26 ))
                {
                    fVar24 = fVar25;
                    (uParam12^) = uVar26;
                    bVar27 = true;
                    DISPLAYF( "[SpawnDebug] == Checking spawn {}{} with pos {}, heading {} +- {} arc (+{}). TRUE toward pos {} with heading {}", 8, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( uParam0 ), 1281, ref g_U3173, 1027, uVar16._fU0, 769, uVar16._fU12, 769, uVar16._fU16, 769, uParam13, 1027, uParam1._fU4[I], 769, (uParam12^) );
                }
                else
                {
                    DISPLAYF( "[SpawnDebug] == Checking spawn {}{} with pos {}, heading {} +- {} arc (+{}). FALSE toward pos {} with heading {}", 8, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( uParam0 ), 1281, ref g_U3173, 1027, uVar16._fU0, 769, uVar16._fU12, 769, uVar16._fU16, 769, uParam13, 1027, uParam1._fU4[I], 769, uVar26 );
                }
            }
        }
    }
    return bVar27;
}

/* SEV_MP_GETSPAWNPOINTBYNODE */ void sub_6761(unknown uParam0, int iParam1)
{
    NETWORK_LEVEL_DATA_GET_VECTOR_FROM_NODE( iParam1 + 0, ":pos", uParam0 );
    NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( iParam1 + 12, ":heading", uParam0 );
    NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( iParam1 + 16, ":headingArc", uParam0 );
    NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( iParam1 + 20, ":groupHeading", uParam0 );
    NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( iParam1 + 24, ":milo", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetSpawnPointByNode()", 7, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( uParam0 ), 1281, ref g_U3173, 1027, iParam1->_fU0, 769, iParam1->_fU12, 769, iParam1->_fU16, 769, iParam1->_fU20, 513, iParam1->_fU24 );
    return;
}

/* SEV_MP_GETLEVELDATAROOMKEYBYNODE */ void sub_8412(unknown uParam0)
{
    unknown Result;

    NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( ref Result, ":milo", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataRoomKeyByNode()", 3, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_3598( uParam0 ), 1281, ref g_U3173, 513, Result );
    return Result;
}

/* __SEV_MP_TELEPORTPLAYERTOPOSITION */ void sub_8571(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, int iParam5, boolean bParam6, boolean bParam7, unknown uParam8)
{
     /* SEV_MP_SETPLAYERTOCURRENTSPAWNWAVE */ sub_8619( uParam0 );
    DISPLAYF( "__sev_mp_TeleportPlayerToPosition() Player {} ({}) to position {}, heading {}, in room {}", 5, 513, uParam0, 1281, ref g_U126[uParam0]._fU76, 1027, uParam1, 769, uParam4, 513, iParam5 );
    if (IS_PED_DEAD( g_U126[uParam0]._fU72 ))
    {
        DISPLAYF( "__sev_mp_TeleportPlayerToPosition() ERROR: Player {} is dead!", 1, 513, uParam0 );
        SCRIPT_ASSERT( "__sev_mp_TeleportPlayerToPosition() ERROR: Player {} is dead!", 1, 513, uParam0 );
    }
    if (bParam6)
    {
         /* SEV_MP_SETPLAYERSTREAMINGPOINT */ sub_9035( uParam0, uParam1, uParam4, iParam5 );
         /* SEV_MP_BLOCKUNTILSTREAMINGHASFINISHED */ sub_9600( uParam0, 0, 0, -1, uParam8 );
    }
    CLEAR_PED_TASKS_IMMEDIATELY( g_U126[uParam0]._fU72 );
    SET_PED_COORDS( g_U126[uParam0]._fU72, uParam1, 0 );
    SET_PED_HEADING( g_U126[uParam0]._fU72, uParam4 );
    if (bParam7)
    {
         /* SEV_MP_RESETPLAYERSTREAMINGPOINT */ sub_11933( uParam0 );
    }
    SEV_ISOLATE();
    if ( /* SEV_MP_ISTHISMYPLAYER */ sub_4016( uParam0 ))
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0, 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( 0, 1065353216, 0 );
        STREAM_HELPERS_INIT();
    }
    SEV_ISOLATE_OFF();
    if (iParam5 != 0)
    {
        SET_ROOM_FOR_PED_BY_KEY( g_U126[uParam0]._fU72, iParam5 );
    }
    else
    {
        CLEAR_ROOM_FOR_PED( g_U126[uParam0]._fU72 );
    }
    return;
}

/* SEV_MP_SETPLAYERTOCURRENTSPAWNWAVE */ void sub_8619(unknown uParam0)
{
    if ( /* SEV_MP_ISPLAYERACTIVE */ sub_3774( uParam0 ))
    {
        g_U3125[uParam0] = g_U3124;
    }
    return;
}

/* SEV_MP_SETPLAYERSTREAMINGPOINT */ void sub_9035(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    SEV_ISOLATE();
    if ( /* SEV_MP_ISTHISMYPLAYER */ sub_4016( uParam0 ))
    {
         /* SEV_MP_SETSTREAMINGPOINT */ sub_9105( uParam1, uParam4, uParam5, 0 );
    }
    SEV_ISOLATE_OFF();
    return;
}

/* SEV_MP_SETSTREAMINGPOINT */ void sub_9105(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4, boolean bParam5)
{
    DISPLAYF( "[Streaming] sev_mp_SetStreamingPoint() for local player to {} with heading {} and roomKey {} where cutsceneMode is {}", 4, 1027, uParam0, 769, uParam3, 513, iParam4, 257, bParam5 );
     /* SEV_MP_ENABLESTREAMING */ sub_9292( 1 );
    if (bParam5)
    {
        uParam0._fU8 -= 1.00000000;
        SET_STREAMING_POINT_OF_INTEREST( uParam0, uParam3, 0 );
    }
    else
    {
        SET_STREAMING_POINT_OF_INTEREST( uParam0, uParam3, 1 );
    }
    if (iParam4 != 0)
    {
        DISPLAYF( "[Streaming] sev_mp_SetStreamingPoint() for local player is requesting collision for room {}", 1, 513, iParam4 );
        REQUEST_ROOM_MINIMAL_COLLISION_MESH_BY_KEY( iParam4 );
    }
    return;
}

/* SEV_MP_ENABLESTREAMING */ void sub_9292(unknown uParam0)
{
    DISPLAYF( "[Streaming] EnableStreaming - {}", 1, 257, uParam0 );
    SET_STREAMING( uParam0 );
    return;
}

/* SEV_MP_BLOCKUNTILSTREAMINGHASFINISHED */ void sub_9600(int iParam0, boolean bParam1, boolean bParam2, int iParam3, unknown uParam4)
{
    int iVar7;
    int Result;
    int iVar9;
    int iVar10;
    int iVar11;
    int iVar12;
    boolean bVar13;

    DISPLAYF( "[Streaming] sev_mp_BlockUntilStreamingHasFinished() started for player {} (Load scene = {}) manoTesterThreshold {}", 3, 513, iParam0, 257, bParam1, 513, iParam3 );
    iVar7 = GET_NETWORK_TIMER();
    SEV_ISOLATE();
    iVar9 =  /* SEV_MP_GETMYPLAYER */ sub_4052();
    if ( /* SEV_MP_ISPLAYERINDEXVALID */ sub_9819( iVar9, 1, 0 ))
    {
        if ((( /* SEV_MP_ISPLAYERACTIVEANDNOTWAITINGTOJOIN */ sub_10363( iVar9 )) AND (iParam0 == -1)) || (iParam0 == iVar9))
        {
            Result = GET_NETWORK_TIMER();
             /* SEV_MP_ENABLESTREAMING */ sub_9292( 1 );
            if (bParam1)
            {
                while (((GET_NETWORK_TIMER() - Result) < 10000) AND (NOT ( /* SEV_MP_ISLOADSCENEFINISHED */ sub_10493())))
                {
                    SEV_YIELD();
                }
            }
            if (bParam2)
            {
                while (((GET_NETWORK_TIMER() - Result) < 10000) AND (IS_LOCAL_PLAYER_STILL_SCANNING_WORLD()))
                {
                    SEV_YIELD();
                }
            }
            bVar13 = (GET_NETWORK_TIMER() - Result) >= 10000;
            while ((NOT bVar13) AND ((iVar12 < 15) || ( /* SEV_MP_HASSTREAMREQUESTS */ sub_10704())))
            {
                iVar11 = GET_NETWORK_TIMER() - Result;
                bVar13 = iVar11 >= 10000;
                iVar10++;
                if ((iParam3 > 0) AND (iVar11 >= iParam3))
                {
                    DISPLAYF( "[Streaming] Detected threshold exceeded, performing manotester dump", 0 );
                    MANOGAMETESTER_DUMP_NOW();
                    iParam3 = -1;
                }
                if (NOT bVar13)
                {
                     /* SEV_MP_ENABLESTREAMING */ sub_9292( 1 );
                    if (NOT ( /* SEV_MP_HASSTREAMREQUESTS */ sub_10704()))
                    {
                        iVar12++;
                    }
                    if ((iVar10 mod 30) == 0)
                    {
                        iVar9 =  /* SEV_MP_GETMYPLAYER */ sub_4052();
                        if (iVar9 == -1)
                        {
                            bVar13 = true;
                        }
                        else if (iParam0 == -1)
                        {
                            bVar13 = NOT ( /* SEV_MP_ISPLAYERACTIVEANDNOTWAITINGTOJOIN */ sub_10363( iVar9 ));
                        }
                        else
                        {
                            bVar13 = iParam0 != iVar9;
                        }
                    }
                    if ((NOT g_U116._fU0) AND (uParam4))
                    {
                        bVar13 = true;
                    }
                    DISPLAYF( "Loop #{} ({}) - Reqs = {}, Priority {}, Time Elapsed {}, Stable Frames {}", 6, 513, iVar10, 257,  /* SEV_MP_HASSTREAMREQUESTS */ sub_10704(), 513, GET_STABLE_NUM_OF_STREAMING_REQUESTS(), 513, GET_STABLE_NUM_OF_PRIORITY_REQUESTS(), 513, GET_NETWORK_TIMER() - Result, 513, iVar12 );
                    SEV_YIELD();
                }
            }
            Result = GET_NETWORK_TIMER() - Result;
            if (Result >= 10000)
            {
                DISPLAYF( "[Streaming] Timed out after {}ms over {} iterations where streaming is {}", 3, 513, Result, 513, iVar10, 257, (iParam0 == -1) || (SEV_GET_MY_PLAYER() == iParam0) );
            }
            else if (bVar13)
            {
                DISPLAYF( "[Streaming] Local player changed after {}ms over {} iterations where streaming is {}", 3, 513, Result, 513, iVar10, 257, (iParam0 == -1) || (SEV_GET_MY_PLAYER() == iParam0) );
            }
            else
            {
                DISPLAYF( "[Streaming] Finished locally in {}ms over {} iterations where streaming is {}", 3, 513, Result, 513, iVar10, 257, (iParam0 == -1) || (SEV_GET_MY_PLAYER() == iParam0) );
            }
        }
    }
    SEV_ISOLATE_OFF();
    if (NOT IS_THIS_THREAD_ISOLATED())
    {
        DISPLAYF( "[Streaming] About to sync - iPlayer {}, loadScene {}", 2, 513, iParam0, 257, bParam1 );
         /* SEV_SYNC_POINT */ sub_11699();
        DISPLAYF( "[Streaming] After waiting for sync, streaming took {}ms", 1, 513, GET_NETWORK_TIMER() - iVar7 );
    }
    return Result;
}

/* SEV_MP_ISPLAYERINDEXVALID */ int sub_9819(int iParam0, boolean bParam1, boolean bParam2)
{
    if (iParam0 < 0)
    {
        if (bParam1)
        {
            DISPLAYF( "sev_mp_IsPlayerIndexValid - ERROR: iPlayer points outside the mp_Players array! index: {}", 1, 513, iParam0 );
        }
        if (bParam2)
        {
            SCRIPT_ASSERT( "sev_mp_IsPlayerIndexValid - ERROR: iPlayer points outside the mp_Players array! index: {}", 1, 513, iParam0 );
        }
        return 0;
    }
    else if (iParam0 >= 16)
    {
        if (bParam1)
        {
            DISPLAYF( "sev_mp_IsPlayerIndexValid - ERROR: iPlayer points outside the mp_Players array! index: {}", 1, 513, iParam0 );
        }
        if (bParam2)
        {
            SCRIPT_ASSERT( "sev_mp_IsPlayerIndexValid - ERROR: iPlayer points outside the mp_Players array! index: {}", 1, 513, iParam0 );
        }
        return 0;
    }
    return 1;
}

/* SEV_MP_ISPLAYERACTIVEANDNOTWAITINGTOJOIN */ int sub_10363(unknown uParam0)
{
    if (g_U126[uParam0]._fU0)
    {
        return g_U126[uParam0]._fU32 == 0;
    }
    return 0;
}

/* SEV_MP_ISLOADSCENEFINISHED */ void sub_10493()
{
    SEV_ISOLATED_ONLY();
    DISPLAYF( "[Streaming] sev_mp_IsLoadSceneComplete()", 0 );
    return NETWORK_UPDATE_LOAD_SCENE();
}

/* SEV_MP_HASSTREAMREQUESTS */ boolean sub_10704()
{
    SEV_ISOLATED_ONLY();
    return (GET_STABLE_NUM_OF_STREAMING_REQUESTS() > 0) || (GET_STABLE_NUM_OF_PRIORITY_REQUESTS() > 0);
}

/* SEV_SYNC_POINT */ void sub_11699()
{
    unknown uVar2;

    uVar2 = SEV_CONSTRUCT_EVENT();
    SEV_INDUCE_GATHER_EVENT( uVar2 );
    SEV_WAIT_FOR( uVar2 );
    return;
}

/* SEV_MP_RESETPLAYERSTREAMINGPOINT */ void sub_11933(unknown uParam0)
{
    SEV_ISOLATE();
    if ( /* SEV_MP_ISTHISMYPLAYER */ sub_4016( uParam0 ))
    {
         /* SEV_MP_RESETSTREAMINGPOINT */ sub_11997();
    }
    SEV_ISOLATE_OFF();
    return;
}

/* SEV_MP_RESETSTREAMINGPOINT */ void sub_11997()
{
    SEV_ISOLATED_ONLY();
    DISPLAYF( "[Streaming] Reset streaming point", 0 );
    RESET_STREAMING_POINT_OF_INTEREST();
    return;
}

/* __SEV_MP_AFTERTELEPORTPLAYER */ void sub_12285(unknown uParam0, unknown uParam1)
{
     /* SEV_MP_PLAYERSETINERT */ sub_4439( uParam0, 0, uParam1 );
     /* SEV_MP_FADEINPLAYER */ sub_12343( uParam0, 100, 0, 0 );
    return;
}

/* SEV_MP_FADEINPLAYER */ void sub_12343(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    DISPLAYF( "sev_mp_FadeInPlayer() for player {} ({}) over {} ms", 3, 513, uParam0, 1281, ref g_U126[uParam0]._fU76, 513, uParam1 );
    SEV_ISOLATE();
    if ( /* SEV_MP_ISTHISMYPLAYER */ sub_4016( uParam0 ))
    {
         /* SEV_MP_FADEIN */ sub_12489( uParam1, uParam2, uParam3 );
    }
    SEV_ISOLATE_OFF();
    return;
}

/* SEV_MP_FADEIN */ void sub_12489(unknown uParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;

    DISPLAYF( "sev_mp_FadeIn() attempting to fade in over {} ms", 1, 513, uParam0 );
    SEV_ISOLATE();
    uVar5 =  /* SEV_MP_GETMYPLAYER */ sub_4052();
    if ( /* SEV_MP_ISPLAYERINDEXVALID */ sub_9819( uVar5, 1, 0 ))
    {
        if ( /* SEV_MP_ISPLAYERACTIVEANDNOTJOINING */ sub_12609( uVar5 ))
        {
            if ((uParam2) || (NOT ( /* SEV_MP_ISPLAYERWAITINGTOJOIN */ sub_12701( uVar5 ))))
            {
                if ((uParam1) || (NOT g_U3155))
                {
                    DISPLAYF( "sev_mp_FadeIn() performing fade", 0 );
                    DO_SCREEN_FADE_IN( uParam0 );
                    MANOGAMETESTER_ENABLE();
                    DISPLAYF( "[MANOGAMETESTER] enabled", 0 );
                    g_U6086 = 1;
                }
            }
        }
    }
    SEV_ISOLATE_OFF();
    return;
}

/* SEV_MP_ISPLAYERACTIVEANDNOTJOINING */ int sub_12609(unknown uParam0)
{
    if (g_U126[uParam0]._fU0)
    {
        return NOT ( /* SEV_MP_ISPLAYERJOINING */ sub_4566( uParam0 ));
    }
    return 0;
}

/* SEV_MP_ISPLAYERWAITINGTOJOIN */ boolean sub_12701(unknown uParam0)
{
    return g_U126[uParam0]._fU32 != 0;
}

/* VS_SP_DEBUG_CREATEANDLOADPEDSFROMARRAYS */ void sub_12938(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    DISPLAYF( "_sev_mp_Debug_CreateAndLoadPedsFromStuff() - Creating Peds", 0 );
    I = 0;
    iVar5 = 0;
    for ( I = 0; I < (uParam1^); I++ )
    {
         /* VS_SP_PED_CREATESPAWNPED_ATINDEX */ sub_13093( (uParam0^)[iVar5], (uParam1^)[I] );
        DISPLAYF( "_sev_mp_Debug_CreateAndLoadPedsFromStuff() - Creating Ped: Model {} at {}", 2, 513, (uParam0^)[iVar5], 1027,  /* SEV_MP_GETSPAWNPOINTPOSITION */ sub_13357( (uParam1^)[I] ) );
        iVar5++;
        if (iVar5 >= (uParam0^))
        {
            iVar5 = 0;
        }
    }
    DISPLAYF( "_sev_mp_Debug_CreateAndLoadPedsFromStuff() - Ped Created Done", 0 );
    return;
}

/* VS_SP_PED_CREATESPAWNPED_ATINDEX */ void sub_13093(unknown uParam0, unknown uParam1)
{
    unknown Result;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    uVar5 =  /* SEV_MP_GETSPAWNPOINTNODE */ sub_3388( uParam1 );
    uVar6 = { /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_5886( uVar5 )};
    DISPLAYF( "[AG]:Spawning Model{} At Pos Index {} Coords:{}", 3, 513, uParam0, 513, uParam1, 1027, uVar6 );
    Result = CREATE_PED( 2, uParam0, uVar6, 0, 1, 0 );
    return Result;
}

/* SEV_MP_GETSPAWNPOINTPOSITION */ void sub_13357(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_5886(  /* SEV_MP_GETSPAWNPOINTNODE */ sub_3388( uParam0 ) );
}

