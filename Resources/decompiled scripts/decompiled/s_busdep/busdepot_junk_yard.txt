void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U40 = 0;
    l_U41 = 0;
    l_U42 = 1500;
    StrCopy( ref l_U52, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U60, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U68 = 0;
    l_U69 = 0;
    l_U70 = 0;
    l_U71 = 0;
    l_U72 = 0;
    l_U109 = 0;
    l_U339 = {-5.36000000, -46.53000000, 1.79800000};
    l_U342 = 0.00000000;
    l_U343 = 8750;
    l_U344 = -51.80159000;
    l_U345 = -12.45863000;
    l_U346 = 0;
    l_U356 = 1250;
    l_U357 = 0;
    l_U358 = 0;
    l_U359 = 1;
    l_U360 = 0;
    l_U397 = 0;
    l_U398 = 0;
    l_U399 = 0;
     /* WRITESCRIPTLOG */ sub_505( "SP", "Script busdepot_junk_yard.sc is starting up...", 0 );
    l_U68 = 1;
    while (IS_EXITFLAG_SET() == 0)
    {
         /* P_HANDLE_FAILURE */ sub_643();
        if (l_U69 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_10707();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_ALL */ sub_4080();
     /* P_UNLOAD_ASSETS */ sub_54804();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "busdepot_junk_yard" );
     /* WRITESCRIPTLOG */ sub_505( "SP", "Script busdepot_junk_yard.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_505(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_643()
{
    if (g_U764 == 1)
    {
        switch (l_U69)
        {
            case 0:
            if ( /* RESTARTING_CHECKPOINT */ sub_752())
            {
                l_U69 = 4;
            }
            if (((IS_PED_DEAD( g_U2595 )) == 1) AND ((DOES_PED_EXIST( g_U2595 )) == 1))
            {
                 /* WRITESCRIPTLOG */ sub_505( "SP", "Mission Failed: Giovanna died.", 0 );
                l_U72 = 1;
                l_U69 = 1;
                 /* WRITESCRIPTLOG */ sub_505( "SP", "eFailState = FAIL_HANDLE_DEATH_CAM_BUS", 0 );
            }
            if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 1)
            {
                l_U69 = 2;
                 /* WRITESCRIPTLOG */ sub_505( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if (( /* F_HANDLE_DEATH_CAM_GIO_BUS */ sub_1525()) == 1)
            {
                l_U69 = 2;
                 /* WRITESCRIPTLOG */ sub_505( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 2:
            if (( /* F_CHECK_QUIT_RETRY */ sub_2232( NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) )) == 1)
            {
                l_U69 = 3;
                 /* WRITESCRIPTLOG */ sub_505( "SP", "eFailState = FAIL_WAITING_FOR_RESPAWN", 0 );
            }
            break;
            case 3:
            if ((IS_BULLET_CAMERA_ACTIVE() == 0) AND (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND (IS_LAST_MAN_STANDING_ACTIVE() == 0)))
            {
                l_U69 = 4;
                 /* WRITESCRIPTLOG */ sub_505( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_505( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
             /* NIS_PRE_SETUP */ sub_1665( 1, 0, 0, 1 );
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1086() )) == 0))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1086(), 0, 0 );
                PED_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_1048(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_IDLE" );
                RESET_PED_GORE(  /* PLAYER_PED_ID */ sub_1048() );
                if ((GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1048() )) == 1)
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1048(), 0 );
                }
            }
             /* P_CLEANUP_ALL */ sub_4080();
             /* CLEANPED */ sub_5578( g_U2595 );
             /* CLEANPEDARRAY */ sub_5667( ref g_U2596 );
            l_U69 = 5;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_505( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U73._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_5865( ref l_U73,  /* PLAYER_PED_ID */ sub_1048() );
            }
             /* P_SETUP_PLAYER_RELATIONSHIPS */ sub_10357();
            l_U69 = 6;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 6:
             /* WRITESCRIPTLOG */ sub_505( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U68 = 1;
            l_U69 = 0;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* RESTARTING_CHECKPOINT */ int sub_752()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1048(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1086(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1086(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1048() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1048(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* PLAYER_PED_ID */ int sub_1048()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1086() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1086()
{
    return GET_PLAYER_ID();
}

/* F_HANDLE_DEATH_CAM_GIO_BUS */ int sub_1525()
{
    switch (l_U72)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eDeathCamBusState = DEATHCAM_SETUP", 0 );
         /* NIS_PRE_SETUP */ sub_1665( 1, 0, 0, 1 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
        BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
        l_U72 = 2;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eDeathCamBusState = DEATHCAM_WAITING_FOR_BULLETCAM", 0 );
        case 2:
        if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
        {
            DO_SCREEN_FADE_OUT( 0 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
            BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 0 );
            l_U72 = 3;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eDeathCamBusState = DEATHCAM_FINISHED", 0 );
        }
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eDeathCamBusState = DEATHCAM_FINISHED", 0 );
        l_U72 = 0;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eDeathCamBusState = DEATHCAM_IDLE", 0 );
        return 1;
        break;
    }
    return 0;
}

/* NIS_PRE_SETUP */ void sub_1665(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1086(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1048(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1048() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1048(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* F_CHECK_QUIT_RETRY */ int sub_2232(int iParam0)
{
    iParam0 = 1;
    switch (l_U41)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_2314( ref l_U43 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )))
            {
                l_U42 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_2448( ref l_U43, l_U42, 1, 1 );
             /* STARTTIMER */ sub_2598( ref l_U43 );
        }
        if ( /* ISTIMERDONE */ sub_2731( ref l_U43 ))
        {
             /* WRITESCRIPTLOG */ sub_505( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1086() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1086(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U41 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U41 = 2;
            }
            else
            {
                l_U41 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_505( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_3232();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_505( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_3232();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_2314(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_2448(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2598(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2731(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_3232()
{
     /* WRITESCRIPTLOG */ sub_505( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_3307( ref l_U43 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1086() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1086(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U40 = 0;
    l_U40 = l_U40;
    l_U41 = 0;
    return;
}

/* RESETTIMER */ void sub_3307(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_CLEANUP_ALL */ void sub_4080()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_CLEANUP_ALL", 0 );
    REMOVE_ALL_PICKUPS_AND_PLACEMENTS_OF_TYPE( 1216559076 );
    ISEQ_UNREGISTER_ENTITY( 1331635988, "player" );
    ISEQ_TERMINATE( 1331635988 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4187( 1331635988, ref g_U1272 );
    ISEQ_UNREGISTER_ENTITY( 752713886, "enemy0" );
    ISEQ_UNREGISTER_ENTITY( 752713886, "enemy1" );
    ISEQ_UNREGISTER_ENTITY( 752713886, "enemy2" );
    ISEQ_UNREGISTER_ENTITY( 752713886, "enemy3" );
    ISEQ_TERMINATE( 752713886 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4187( 752713886, ref g_U1272 );
    ISEQ_UNREGISTER_ENTITY( -905563172, "gio" );
    ISEQ_TERMINATE( -905563172 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4187( -905563172, ref g_U1272 );
     /* P_STOP_SP_CHALLENGES */ sub_5404();
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_4187(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4325( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_4325(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_STOP_SP_CHALLENGES */ void sub_5404()
{
     /* WRITESCRIPTLOG */ sub_505( "CCB", "P_STOP_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_505( "CCB", "Stopping the Bus_Depot_Junkyard context...", 0 );
    END_CONTEXT( "Bus_Depot_Junkyard" );
    return;
}

/* CLEANPED */ void sub_5578(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANPEDARRAY */ void sub_5667(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_5578( (uParam0^)[I] );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_5865(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_505( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_6084( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_7248( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7562( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8041( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7562( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8041( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7562( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8041( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8357( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8041( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8357( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8041( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_8929( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_9131( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1048(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_505( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_6084(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6146( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_6146(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_7248(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_7562(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_7966( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_7966(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_8041(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_8357(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_7966( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_8929(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_9131(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6146( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_9229( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_9229(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_SETUP_PLAYER_RELATIONSHIPS */ void sub_10357()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_SETUP_PLAYER_RELATIONSHIPS", 0 );
    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0)
    {
        SET_PED_RELATIONSHIP(  /* PLAYER_PED_ID */ sub_1048(), 0, 1 );
        SET_PED_RELATIONSHIP(  /* PLAYER_PED_ID */ sub_1048(), 0, 2 );
        SET_PED_RELATIONSHIP(  /* PLAYER_PED_ID */ sub_1048(), 0, 6 );
        SET_PED_RELATIONSHIP(  /* PLAYER_PED_ID */ sub_1048(), 0, 7 );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_10707()
{
    int I;
    unknown uVar3;
    unknown uVar4;

    switch (l_U68)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_10938();
         /* P_INITIALIZE_GAMEPLAY_STRUCTS */ sub_11314();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U68 = 2;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_13004( -1204387800, ref g_U910 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_13004( g_U2100, ref g_U910 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_13004( g_U2127, ref g_U910 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_13004( g_U758, ref g_U910 );
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_15877( g_U2854, ref g_U1211 );
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_15877( g_U2856, ref g_U1211 );
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_15877( g_U2855, ref g_U1211 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_17843( ref g_U1952, ref g_U1369 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_17843( ref g_U1904, ref g_U1369 );
         /* P_STREAMREQ_ISEQ_INSERT */ sub_19740( 1331635988, ref g_U1272 );
         /* P_STREAMREQ_ISEQ_INSERT */ sub_19740( 752713886, ref g_U1272 );
         /* P_STREAMREQ_ISEQ_INSERT */ sub_19740( -905563172, ref g_U1272 );
         /* P_STREAMREQ_SCRIPT_STREAM_INSERT */ sub_22594( "LBUS01_VCPF_JUNKYARD_LDR", ref g_U1704 );
        l_U68 = 3;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if ( /* F_STREAMREQ_ALL_ASSETS_LOADED */ sub_24830( ref g_U910, ref g_U1211, ref g_U1272, ref g_U1369, ref g_U1474, ref g_U1535, ref g_U1704, ref g_U1757 ))
        {
            l_U68 = 4;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_CREATE_OBJECTS", 0 );
            break;
        }
        return;
        case 4:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_CREATE_OBJECTS", 0 );
         /* P_GLOBAL_CREATE_JUNKYARD_FENCE */ sub_28183();
         /* P_CREATE_S_BUS_GG_FN_02 */ sub_28965();
        l_U68 = 5;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_CREATE_GIOVANNA", 0 );
        case 5:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_CREATE_GIOVANNA", 0 );
         /* P_SETUP_GIOVANNA */ sub_30099();
        l_U68 = 6;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_CREATE_SEARCH_ENEMIES", 0 );
        break;
        case 6:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_CREATE_SEARCH_ENEMIES", 0 );
         /* P_SETUP_SEARCH_ENEMIES */ sub_31451();
        l_U68 = 7;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_SETUP_START_POINT", 0 );
        break;
        case 7:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_WAIT_FOR_PLAYER_WEAPON", 0 );
        if ((l_U109 == 0) AND ((g_U763 == 1) || (g_U763 == 0)))
        {
            l_U109 = 1;
            if (( /* HAS_SAVEFILE_LOADED */ sub_33407( ref l_U73 )) == 0)
            {
                 /* F_GIVEPEDWEAPON */ sub_8357(  /* PLAYER_PED_ID */ sub_1048(), g_U2854, 200, 0, 0 );
                l_U68 = 8;
                 /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_WAIT_FOR_PLAYER_WEAPON", 0 );
            }
            else
            {
                l_U68 = 9;
                 /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_SETUP_SCENE", 0 );
            }
        }
        else
        {
            l_U68 = 9;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_SETUP_SCENE", 0 );
        }
        break;
        case 8:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_WAIT_FOR_PLAYER_WEAPON", 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0)
        {
            uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1048(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
            {
                l_U68 = 9;
                 /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_SETUP_SCENE", 0 );
            }
        }
        break;
        case 9:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_SETUP_SCENE", 0 );
        if (g_U764 == 0)
        {
            l_U70 = 1;
            l_U68 = 11;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_HANDLE_OPENING_CUTSCENE", 0 );
        }
        else
        {
            l_U71 = 1;
            l_U68 = 12;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_HANDLE_OPENING_BLENDOUT", 0 );
        }
        break;
        case 11:
        if (( /* F_HANDLE_OPENING_CUTSCENE */ sub_34195()) == 1)
        {
            l_U71 = 1;
            l_U68 = 12;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_HANDLE_OPENING_BLENDOUT", 0 );
            break;
        }
        return;
        case 12:
        if (( /* F_HANDLE_OPENING_BLENDOUT */ sub_36624()) == 1)
        {
            l_U68 = 10;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_START_GAMEPLAY", 0 );
            break;
        }
        return;
        case 10:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_START_GAMEPLAY", 0 );
         /* NIS_POST_SETUP */ sub_45599( 1, 1 );
        SET_DISABLE_FADE( 0 );
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1086(), 1, 0 );
        for ( I = 0; I < g_U2596; I++ )
        {
            if (((IS_PED_DEAD( g_U2596[I] )) == 0) AND ((DOES_PED_EXIST( g_U2596[I] )) == 1))
            {
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2596[I], 0 );
                SET_BLOCKING_OF_PED_TARGETTING( g_U2596[I], 0 );
                if (I == 0)
                {
                    SET_PED_HEARING_RANGE( g_U2596[I], 60.00000000 );
                    SET_PED_SEEING_RANGE( g_U2596[I], 60.00000000, 75 );
                    SET_PED_SUGGESTED_COVER_POINT( g_U2596[I], "GenCover", "71C76B7F_AC45236E_Corner1" );
                }
                else if (I == 1)
                {
                    SET_PED_HEARING_RANGE( g_U2596[I], 60.00000000 );
                    SET_PED_SEEING_RANGE( g_U2596[I], 0.00000000, 75 );
                    SET_PED_SUGGESTED_COVER_POINT( g_U2596[I], "GenCover", "71C76B7F_FDFB46D9_Popover1" );
                }
                else if (I == 2)
                {
                    SET_PED_HEARING_RANGE( g_U2596[I], 60.00000000 );
                    SET_PED_SEEING_RANGE( g_U2596[I], 60.00000000, 75 );
                    SET_PED_SUGGESTED_COVER_POINT( g_U2596[I], "GenCover", "71C76B7F_C2E1D0A7_Corner1" );
                }
                else if (I == 3)
                {
                    SET_PED_HEARING_RANGE( g_U2596[I], 60.00000000 );
                    SET_PED_SEEING_RANGE( g_U2596[I], 6.00000000, 75 );
                    SET_PED_SUGGESTED_COVER_POINT( g_U2596[I], "GenCover", "71C76B7F_D36411A3_Popover1" );
                };;;;
            }
        }
         /* P_START_SP_CHALLENGES */ sub_46481();
        SET_ADRENALINE_AMT( 0.00000000 );
         /* CREATETIMER */ sub_2448( ref l_U388, 12000, 1, 0 );
         /* STARTTIMER */ sub_2598( ref l_U388 );
        l_U68 = 13;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_HANDLE_FIGHT_01", 0 );
        break;
        case 13:
         /* P_HANDLE_GIO_HIDING_IN_BUS */ sub_46808();
        if (l_U358 == 0)
        {
            if (l_U359 == 1)
            {
                if ((( /* F_ISPLAYERINTRIGGERBOX */ sub_49358( l_U152 )) == 1) || (( /* F_ISPLAYERINTRIGGERBOX */ sub_49358( l_U131 )) == 1))
                {
                    if (((IS_PED_DEAD( g_U2596[1] )) == 0) AND ((DOES_PED_EXIST( g_U2596[1] )) == 1))
                    {
                        SET_PED_SEEING_RANGE( g_U2596[1], 60.00000000, 75 );
                    }
                    l_U359 = 0;
                }
            }
            else if (l_U359 == 0)
            {
                if (( /* F_ISPLAYERINTRIGGERBOX */ sub_49358( l_U173 )) == 1)
                {
                    if (((IS_PED_DEAD( g_U2596[1] )) == 0) AND ((DOES_PED_EXIST( g_U2596[1] )) == 1))
                    {
                        SET_PED_SEEING_RANGE( g_U2596[1], 0.00000000, 75 );
                    }
                    l_U359 = 1;
                }
            }
        }
        if (( /* ISTIMERDONE */ sub_2731( ref l_U388 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_505( "SP", "Search Enemy 3 Vision Un-Hacked.", 0 );
            if (((IS_PED_DEAD( g_U2596[3] )) == 0) AND ((DOES_PED_EXIST( g_U2596[3] )) == 1))
            {
                SET_PED_SEEING_RANGE( g_U2596[3], 60.00000000, 75 );
            }
        }
        if (l_U358 == 0)
        {
            if ((( /* F_ISPLAYERINTRIGGERBOX */ sub_49358( l_U131 )) == 1) AND (( /* F_ISPEDINTRIGGERBOX */ sub_48912( g_U2596[1], l_U194 )) == 1))
            {
                for ( I = 0; I < g_U2596; I++ )
                {
                    if (((IS_PED_DEAD( g_U2596[I] )) == 0) AND (((DOES_PED_EXIST( g_U2596[I] )) == 1) AND ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0)))
                    {
                        if (I == 1)
                        {
                            SET_PED_SEEING_RANGE( g_U2596[1], 60.00000000, 75 );
                        }
                        if (I == 3)
                        {
                            SET_PED_SEEING_RANGE( g_U2596[1], 60.00000000, 75 );
                        }
                        SET_PED_ALERTNESS( g_U2596[I], 4 );
                        REGISTER_TARGET( g_U2596[I],  /* PLAYER_PED_ID */ sub_1048() );
                    }
                }
            }
        }
        if (l_U358 == 0)
        {
            if (( /* F_CAN_SEARCH_ENEMIES_SEE_MAX */ sub_49983()) == 1)
            {
                if (l_U397 == 1)
                {
                    for ( I = 0; I < g_U2596; I++ )
                    {
                        if (((IS_PED_DEAD( g_U2596[I] )) == 0) AND ((DOES_PED_EXIST( g_U2596[I] )) == 1))
                        {
                            SET_PED_ALERTNESS( g_U2596[I], 4 );
                            REGISTER_TARGET( g_U2596[I],  /* PLAYER_PED_ID */ sub_1048() );
                        }
                    }
                }
                for ( I = 0; I < g_U2596; I++ )
                {
                    if (((IS_PED_DEAD( g_U2596[I] )) == 0) AND ((DOES_PED_EXIST( g_U2596[I] )) == 1))
                    {
                        SET_PED_HEARING_RANGE( g_U2596[I], 60.00000000 );
                        SET_PED_SEEING_RANGE( g_U2596[I], 60.00000000, 75 );
                    }
                }
                 /* P_START_ENEMIES_BEHIND_BUS */ sub_50987();
                 /* P_START_SEARCH_ENEMIES_AGGRESSIVE_ADVANCE */ sub_51459();
                if (l_U379._fU16 == 0)
                {
                     /* P_DIAL_ENEMIES_FOUND_MAX */ sub_51888();
                     /* DISABLETIMER */ sub_52135( ref l_U379 );
                }
                 /* P_START_CHECKPOINT_THREAD */ sub_52187( ref g_U765[2] );
                 /* P_STREAMREQ_SCRIPT_STREAM_STOP */ sub_52272( "LBUS01_VCPF_JUNKYARD_LDR", ref g_U1704 );
                 /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_52768( "LBUS01_VCPF_JUNKYARD_LDR", ref g_U1704 );
                 /* DISABLETIMER */ sub_52135( ref l_U370 );
                AUDIO_MUSIC_FORCE_TRACK( "BUSDEPOT_ACTION_SONG_03", "BUSDEPOT_03_1_4", "", 0.00000000, 2000, 6000, -1082130432, 0 );
                l_U358 = 1;
            }
        }
        if (( /* ISTIMERDONE */ sub_2731( ref l_U379 )) == 1)
        {
             /* P_DIAL_ENEMIES_FOUND_MAX */ sub_51888();
        }
        if (l_U357 == 0)
        {
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_53236( ref g_U2596 )) == 1)
            {
                 /* P_SEEK_OUT_PLAYER */ sub_53356();
                l_U357 = 1;
            }
        }
        if (l_U360 == 0)
        {
            uVar4 =  /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_53634( ref g_U2596 );
            if (((IS_PED_DEAD( uVar4 )) == 0) AND ((DOES_PED_EXIST( uVar4 )) == 1))
            {
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
                BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
                l_U360 = 1;
            }
        }
        if (l_U399 == 0)
        {
            if (((IS_BULLET_CAMERA_RUNNING( 0 )) == 1) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_53236( ref g_U2596 )) == 0))
            {
                 /* CREATETIMER */ sub_2448( ref l_U400, 250, 1, 0 );
                 /* STARTTIMER */ sub_2598( ref l_U400 );
                l_U399 = 1;
            }
        }
        if (( /* ISTIMERDONE */ sub_2731( ref l_U400 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_505( "SA", "Making Giovanna scream for bulletcam", 0 );
             /* P_DIAL_GIOVANNA_RANDOM_SCREAM_BUS */ sub_47263();
        }
        if (IS_ROBO_TESTING() == 1)
        {
            if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_54012( ref l_U215, 0 ))
            {
                 /* P_KILL_PEDS_IN_ARRAY */ sub_54151( ref g_U2596 );
                 /* WRITESCRIPTLOG */ sub_505( "MRB", "RoboTester has killed your Search Peds", 0 );
            }
        }
        if (l_U398 == 0)
        {
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_53236( ref g_U2596 )) == 0)
            {
                AUDIO_MUSIC_FORCE_TRACK( "BUSDEPOT_ACTION_SONG_03", "BUSDEPOT_03_5", "", 0.00000000, 3000, -1, -1082130432, 0 );
                AUDIO_MUSIC_REQUEST_ONESHOT( "BUSDEPOT_ONESHOT_08", 0 );
                l_U398 = 1;
            }
        }
        if ((IS_LAST_MAN_STANDING_ACTIVE() == 0) AND (((IS_BULLET_CAMERA_RUNNING( 0 )) == 0) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_53236( ref g_U2596 )) == 0)))
        {
            g_U2864 = 1;
            l_U398 = 1;
            l_U68 = 14;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_WAITING_TO_SHUTDOWN", 0 );
        }
        break;
        case 14:
        if (g_U764 > 1)
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U68 = 15;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 15:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_FINISHED", 0 );
        l_U68 = 0;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eCheckpointState = CP_IDLE", 0 );
        break;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_10938()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U410 = 2.00000000;
    l_U411 = 5.00000000;
    l_U412 = 1.00000000;
    l_U413 = 5.00000000;
    l_U414 = 1;
    l_U346 = 0;
    l_U398 = 0;
    l_U357 = 0;
    l_U358 = 0;
    l_U359 = 1;
    l_U360 = 0;
    l_U397 = 0;
    l_U399 = 0;
     /* RESETTIMER */ sub_3307( ref l_U347 );
     /* RESETTIMER */ sub_3307( ref l_U400 );
     /* RESETTIMER */ sub_3307( ref l_U379 );
     /* RESETTIMER */ sub_3307( ref l_U433 );
     /* RESETTIMER */ sub_3307( ref l_U442 );
     /* RESETTIMER */ sub_3307( ref l_U388 );
     /* RESETTIMER */ sub_3307( ref l_U361 );
     /* RESETTIMER */ sub_3307( ref l_U370 );
     /* RESETTIMER */ sub_3307( ref l_U400 );
     /* RESETTIMER */ sub_3307( ref l_U415 );
     /* RESETTIMER */ sub_3307( ref l_U424 );
    l_U70 = 0;
    l_U71 = 0;
     /* P_INITIALIZE_SP_CHALLENGES */ sub_11218();
    return;
}

/* P_INITIALIZE_SP_CHALLENGES */ void sub_11218()
{
     /* WRITESCRIPTLOG */ sub_505( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
    return;
}

/* P_INITIALIZE_GAMEPLAY_STRUCTS */ void sub_11314()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_INITIALIZE_GAMEPLAY_STRUCTS", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11435( ref l_U240, -6.10607400, -43.83956000, 1.12122900, 102.41900000, -1257669444, 26, 6, 0, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11435( ref l_U259[0], -18.72000000, -58.00000000, 0.00000000, 360.00000000, -978012987, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11435( ref l_U259[1], -21.00000000, -61.00000000, 0.01000000, 90.00000000, -1969485524, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11435( ref l_U259[2], -18.80000000, -59.50000000, 0.15000000, 360.00000000, 12028279, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11435( ref l_U259[3], -20.50000000, -61.30000000, 0.01000000, 220.00000000, 2096140228, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11435( ref l_U259[4], -30.69000000, -62.41000000, 0.08000000, -90.00000000, -193330513, 7, 3, 2, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_11435( ref l_U259[5], -33.52000000, -63.36000000, 0.02000000, -90.00000000, 1086664886, 7, 3, 2, 0, 1 );
     /* P_CREATETRIGGERBOX */ sub_11916( ref l_U110, "TRIG_INSIDE_JUNKYARD_BUS", -5.21000000, -48.34000000, -0.23000000, 4.00000000, 14.74000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11916( ref l_U131, "TRIG_PLAYER_MOVED_01", -5.68000000, -51.28000000, -0.29000000, 4.00000000, 5.00000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11916( ref l_U152, "TRIG_PLAYER_MOVED_02", -5.68000000, -46.42000000, -0.29000000, 4.00000000, 1.50000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11916( ref l_U173, "TRIG_PLAYER_IN_SAFE_COVER", -5.68000000, -47.98000000, -0.29000000, 4.00000000, 1.61000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11916( ref l_U194, "TRIG_SEARCH_ENEMY_1_FOUND_MAX", -8.69000000, -50.35000000, -0.29000000, 2.00000000, 3.00000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11916( ref l_U215, "TRIGGER_KILL_ALL_JY_PEDS", -23.97000000, -41.81000000, -0.08000000, 8.60000000, 2.27000000, 2.97000000, 0.00000000, 0.00000000, -76.32000000, 1 );
     /* P_CREATETETHERBOX */ sub_12522( ref l_U236, "TETH_ENEMY_COMBAT_AREA_1", -18.89000000, -48.42000000, -0.23000000, 22.37000000, 16.19000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12522( ref l_U237, "TETH_ENEMY_COMBAT_AREA_2", -13.56000000, -60.52000000, -0.23000000, 18.67000000, 9.13000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12522( ref l_U238, "TETH_ENEMY_COMBAT_AREA_3", -33.13000000, -52.81000000, -0.23000000, 6.50000000, 9.19000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12522( ref l_U239, "TETH_ENEMY_COMBAT_AREA_4", -29.33000000, -62.08000000, -0.23000000, 13.13000000, 6.00000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_11435(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_11916(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_12522(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_13004(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_13071( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_13329( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_13071(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_13329( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_13329( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_13329( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_14860( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_13329( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_13329( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_13329(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_13390( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_13390(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_14860(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_15877(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_15931( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_16192( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_15931(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_16192( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_16192( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_16192( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_14860( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_16192( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_16192( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_16192(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_13390( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_17843(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_17895( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18147( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_17895(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18147( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18147( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18147( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_14860( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18147( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18147( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_18147(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_13390( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_19740(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_19801( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_20051( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_19801(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_20051( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_20051( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_20051( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_20051( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_14860( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_14860( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_20051( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_20051( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_20051(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_13390( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_INSERT */ void sub_22594(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_IS_INDEX_AVAILABLE */ sub_22650( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing SCRIPT_STREAM asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_22914( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_INDEX_AVAILABLE */ int sub_22650(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_22914( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is already loading!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_22914( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (Result <= 2)
                {
                    if ((GET_SCRIPT_STREAM_STATE( uParam0, Result )) == 2)
                    {
                        DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                        DISPLAYF( "The SCRIPT_STREAM asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_22914( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The SCRIPT_STREAM asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                        (uParam1^)[Result]._fU32 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_14860( ref (uParam1^)[Result]._fU36 );
                        return Result;
                    }
                }
                else
                {
                    DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The SCRIPT_STREAM asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_22914( Result, uParam1, uParam2 );
                    return -1;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_22914( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (Result <= 2)
        {
            if ((GET_SCRIPT_STREAM_STATE( uParam0, iVar6 )) == 2)
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1537, uParam0 );
                DISPLAYF( "The SCRIPT_STREAM asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing SCRIPT_STREAM: {} ###", 1, 1537, uParam0 );
                StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
                (uParam1^)[iVar6]._fU32 = 3;
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_22914( iVar6, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar6;
            }
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The SCRIPT_STREAM - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ void sub_22914(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_13390( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The SCRIPT_STREAM asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_ALL_ASSETS_LOADED */ int sub_24830(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    if ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_24874( uParam0 ))
    {
        if ( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_25274( uParam1 ))
        {
            if ( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_25678( uParam2 ))
            {
                if ( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_26094( uParam3 ))
                {
                    if ( /* F_STREAMREQ_VEHICLE_RECORDING_IS_LOADED */ sub_26487( uParam4 ))
                    {
                        if ( /* F_STREAMREQ_ACTION_TREE_IS_LOADED */ sub_26909( uParam5 ))
                        {
                            if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ sub_27289( uParam6 ))
                            {
                                if ( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_27677( uParam7 ))
                                {
                                    return 1;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return 0;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_24874(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_25274(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_25678(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_26094(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_VEHICLE_RECORDING_IS_LOADED */ int sub_26487(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the VEHICLE_RECORDING to be requested: {} ###", 1, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the VEHICLE_RECORDING to load: {} ###", 1, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the VEHICLE_RECORDING to be removed: {} ###", 1, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ACTION_TREE_IS_LOADED */ int sub_26909(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ int sub_27289(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_27677(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* P_GLOBAL_CREATE_JUNKYARD_FENCE */ void sub_28183()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_GLOBAL_CREATE_JUNKYARD_FENCE", 0 );
     /* CLEANOBJECT */ sub_28275( g_U2603 );
    g_U2603 =  /* CREATEOBJECTNOOFFSET */ sub_28369( g_U2127, -36.65540000, -63.29410000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U2603 )) == 1)
    {
        FREEZE_OBJECT_POSITION( g_U2603, 1 );
    }
    return;
}

/* CLEANOBJECT */ void sub_28275(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_28369(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_28502( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* LOADMODEL */ void sub_28502(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_7966( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_CREATE_S_BUS_GG_FN_02 */ void sub_28965()
{
     /* WRITESCRIPTLOG */ sub_505( "CO", "P_CREATE_S_BUS_GG_FN_02", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_29092( ref g_U667, g_U758, -1380233402, 1978811807, -22.53000000, -45.38000000, 0.51000000, 1.50000000, 0.00000000, 5.00000000, "" );
     /* P_CREATECOLLECTIBLE */ sub_29249( ref g_U667 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_29092(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_505( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_29249(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_505( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_29332( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_505( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_505( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_29332( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_29572( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_29657( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_505( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_505( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_29332(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* CLEANPLACEMENT */ void sub_29572(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* CREATEPLACEMENT */ void sub_29657(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_SETUP_GIOVANNA */ void sub_30099()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_SETUP_GIOVANNA", 0 );
     /* CLEANPED */ sub_5578( g_U2595 );
    g_U2595 =  /* CREATEPED */ sub_30172( ref l_U240 );
     /* P_SETUP_GIO_ATTRIBUTES */ sub_30885();
    return;
}

/* CREATEPED */ void sub_30172(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_28502( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_30663( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_30764( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_30663(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_30764(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_SETUP_GIO_ATTRIBUTES */ void sub_30885()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_SETUP_GIO_ATTRIBUTES", 0 );
    if (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1))
    {
        SET_PED_NAME_DEBUG( g_U2595, "piGiovanna" );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2595, 1 );
        SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( g_U2595, 0 );
        SET_PED_ONLY_DAMAGED_BY_PLAYER( g_U2595, 1 );
        SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U2595, 1 );
        SET_PED_CAN_PUSH_PLAYER( g_U2595, 1 );
        SET_PED_GORE_FROM_PLAYER( g_U2595, 1 );
        SET_PED_GORE_FROM_NPC( g_U2595, 0 );
        SET_PED_CAN_BE_TARGETTED( g_U2595, 0 );
        SET_PED_AS_ONE_SHOT_KILL( g_U2595, 1 );
        SET_PED_CAN_TRIGGER_BULLET_CAM( g_U2595, 1 );
        SET_BULLET_CAM_PREF( g_U2595, "QUICKCUT_FAILSAFE_01", "QUICKCUT_FAILSAFE_01", "QUICKCUT_FAILSAFE_01", "QUICKCUT_FAILSAFE_01", 1, 0, 0, 0, 0, 0, 0, 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0)
        {
            SET_PED_PRIMARY_LOOKAT( g_U2595,  /* PLAYER_PED_ID */ sub_1048() );
            SET_PED_DEFAULT_AIM_AT_PED( g_U2595,  /* PLAYER_PED_ID */ sub_1048() );
        }
    }
    return;
}

/* P_SETUP_SEARCH_ENEMIES */ void sub_31451()
{
    int I;

     /* WRITESCRIPTLOG */ sub_505( "SP", "P_SETUP_SEARCH_ENEMIES", 0 );
     /* P_SETUP_AI_GROUP */ sub_31532( ref l_U253, 1056964608, 0 );
    for ( I = 0; I < g_U2596; I++ )
    {
         /* CLEANPED */ sub_5578( g_U2596[I] );
        g_U2596[I] =  /* CREATEPED */ sub_30172( ref l_U259[I] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_31982( g_U2596[I], ref l_U253 );
         /* P_TETHERPED */ sub_32377( ref l_U236, g_U2596[I], 1 );
         /* P_TETHERPED */ sub_32377( ref l_U237, g_U2596[I], 1 );
         /* P_TETHERPED */ sub_32377( ref l_U238, g_U2596[I], 1 );
         /* P_TETHERPED */ sub_32377( ref l_U239, g_U2596[I], 1 );
        if (((IS_PED_DEAD( g_U2596[I] )) == 0) AND ((DOES_PED_EXIST( g_U2596[I] )) == 1))
        {
            CLEAR_PED_TASKS( g_U2596[I] );
            SET_PED_ALERTNESS( g_U2596[I], 2 );
            SET_PED_AI_TEMPLATE( g_U2596[I], ref g_U2088 );
            SET_PED_ACCURACY( g_U2596[I], -1467320974 );
            SET_PED_PATH_CAN_DROP_FROM_HEIGHT( g_U2596[I], 0 );
            SET_PED_PATH_CAN_USE_CLIMBOVERS( g_U2596[I], 0 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2596[I], 1 );
            SET_BLOCKING_OF_PED_TARGETTING( g_U2596[I], 1 );
            SET_PED_HEARING_RANGE( g_U2596[I], 0.00000000 );
            SET_PED_SEEING_RANGE( g_U2596[I], 0.00000000, 75 );
            if ((I == 5) || (I == 4))
            {
                SET_PED_VISIBLE( g_U2596[I], 0 );
                TASK_STAND_STILL( g_U2596[I], -1 );
            }
            if (I == 0)
            {
                 /* F_GIVEPEDWEAPON */ sub_8357( g_U2596[I], g_U2855, 25000, 0, 0 );
            }
            else if (I == 1)
            {
                 /* F_GIVEPEDWEAPON */ sub_8357( g_U2596[I], g_U2856, 25000, 0, 0 );
            }
            else if (I == 2)
            {
                 /* F_GIVEPEDWEAPON */ sub_8357( g_U2596[I], g_U2856, 25000, 0, 0 );
                 /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7562( g_U2596[I], g_U2854, 0, 25000, 0 );
            }
            else if (I == 3)
            {
                 /* F_GIVEPEDWEAPON */ sub_8357( g_U2596[I], g_U2856, 25000, 0, 0 );
            }
            else if (I == 4)
            {
                 /* F_GIVEPEDWEAPON */ sub_8357( g_U2596[I], g_U2856, 25000, 0, 0 );
                 /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7562( g_U2596[I], g_U2854, 0, 25000, 0 );
            }
            else if (I == 5)
            {
                 /* F_GIVEPEDWEAPON */ sub_8357( g_U2596[I], g_U2855, 25000, 0, 0 );
            };;;;;;
        }
    }
     /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_33109( ref g_U2596, "piSearchEnemies_" );
    return;
}

/* P_SETUP_AI_GROUP */ void sub_31532(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_31982(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_7966( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_31532( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_31532( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_TETHERPED */ void sub_32377(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_33109(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* HAS_SAVEFILE_LOADED */ int sub_33407(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_505( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_5865( uParam0,  /* PLAYER_PED_ID */ sub_1048() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* F_HANDLE_OPENING_CUTSCENE */ int sub_34195()
{
    int I;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;

    switch (l_U70)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eOpeningCutsceneState = CUTSCENE_REQUEST_ASSETS", 0 );
        if (((CUTSCENE_NAMED_IS_LOADING( "10_01_bus_concat" )) == 0) AND ((CUTSCENE_IS_LOADED( "10_01_bus_concat" )) == 0))
        {
            PRE_STREAM_SEAMLESS_CUTSCENE( "10_01_bus_concat" );
        }
        l_U70 = 2;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eOpeningCutsceneState = CUTSCENE_LOAD_ASSETS", 0 );
        case 2:
        if ((CUTSCENE_IS_LOADED( "10_01_bus_concat" )) == 1)
        {
            l_U70 = 3;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eOpeningCutsceneState = CUTSCENE_SETUP", 0 );
            break;
        }
        return 0;
        case 3:
        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1086() )) == 0))
        {
            CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_1048(), -6.60979500, -47.73442000, 0.80184600, 179.58550000 );
            CUTSCENE_REGISTER_SET_PLAYER_IN_COVER( "GenCover", "71C76B7F_6E1DA9D8_Popover1", 1, 1 );
            CUTSCENE_SET_COVER_CAMERA_DIRECTION( l_U344, l_U345 );
            uVar6 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_34753();
            if ((GET_DOES_WEAPON_EXIST( uVar6 )) == 1)
            {
                REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar6, "W_PI_PT92_Aa_H", 0 );
            }
        }
        if (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1))
        {
            CUTSCENE_REGISTER_PED_TELEPORT( g_U2595, l_U240._fU0, l_U240._fU12 );
            REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2595, "GIOV_BUS", 0 );
        }
        for ( I = 0; I < g_U2596; I++ )
        {
            if (((IS_PED_DEAD( g_U2596[I] )) == 0) AND ((DOES_PED_EXIST( g_U2596[I] )) == 1))
            {
                CUTSCENE_REGISTER_PED_TELEPORT( g_U2596[I], l_U259[I]._fU0, l_U259[I]._fU12 );
                if (I == 0)
                {
                    REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2596[I], "M_Crac_Sold_JY^3", 0 );
                    REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U2596[I], 0, 0 ), "W_SB_Uzi_Aa_H", 0 );
                }
                else if (I == 1)
                {
                    REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2596[I], "M_Crac_Sold_JY^1", 0 );
                    REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U2596[I], 0, 0 ), "W_SG_BenM3_Aa_H^3", 0 );
                }
                else if (I == 2)
                {
                    REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2596[I], "M_Crac_Sold_JY", 0 );
                    REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U2596[I], 0, 0 ), "W_SG_BenM3_Aa_H^2", 0 );
                }
                else if (I == 3)
                {
                    REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2596[I], "M_Crac_Sold_JY^2", 0 );
                    REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U2596[I], 0, 0 ), "W_SG_BenM3_Aa_H", 0 );
                };;;;
            }
        }
        ISEQ_REGISTER_ENTITY( 1331635988, "player",  /* PLAYER_PED_ID */ sub_1048(), 0 );
        CUTSCENE_REGISTER_ISEQ( 1331635988 );
        ISEQ_REGISTER_ENTITY( 752713886, "enemy0", g_U2596[0], 0 );
        ISEQ_REGISTER_ENTITY( 752713886, "enemy1", g_U2596[1], 0 );
        ISEQ_REGISTER_ENTITY( 752713886, "enemy2", g_U2596[2], 0 );
        ISEQ_REGISTER_ENTITY( 752713886, "enemy3", g_U2596[3], 0 );
        CUTSCENE_REGISTER_ISEQ( 752713886 );
        CUTSCENE_SET_WAIT_FOR_MOVIE( 7 );
        l_U70 = 4;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eOpeningCutsceneState = CUTSCENE_SET_MOVIE_SKIPPABLE", 0 );
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eOpeningCutsceneState = CUTSCENE_SET_MOVIE_SKIPPABLE", 0 );
        SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
        l_U70 = 5;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eOpeningCutsceneState = CUTSCENE_WAIT_FOR_MOVIE", 0 );
        break;
        case 5:
        if ((CUTSCENE_IS_WAITING_FOR_MOVIE() == 0) || (IS_TRANSITION_MOVIE_PLAYING() == 0))
        {
            START_SEAMLESS_CUTSCENE();
            DO_SCREEN_FADE_IN( 0 );
            l_U70 = 7;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eOpeningCutsceneState = CUTSCENE_PLAYING", 0 );
        }
        break;
        case 7:
        if (HAS_CUTSCENE_FINISHED() == 1)
        {
            l_U70 = 0;
             /* WRITESCRIPTLOG */ sub_505( "SP", "eOpeningCutsceneState = CUTSCENE_IDLE", 0 );
            return 1;
        }
        else
        {
            uVar3 = GET_CUTSCENE_SECTION_PLAYING();
            uVar4 = GET_CUTSCENE_TIME();
            uVar5 = GET_CUTSCENE_TIME_MS();
            PRINTSTRING( "[SP] SECTION: " );
            PRINTINT( uVar3 );
            PRINTSTRING( " Time: " );
            PRINTINT( uVar4 );
            PRINTSTRING( " Time MS: " );
            PRINTINT( uVar5 );
            PRINTNL();
        }
        break;
    }
    return 0;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_34753()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1048(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_34857( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1048(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1048(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1048(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_34857(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* F_HANDLE_OPENING_BLENDOUT */ int sub_36624()
{
    int I;

    switch (l_U71)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eOpeningBlendoutState = BLENDOUT_SETUP", 0 );
         /* NIS_PRE_SETUP */ sub_1665( 1, 0, 0, 0 );
        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1086() )) == 0))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1086(), 0, 0 );
            SET_ADRENALINE_AMT( 0.00000000 );
        }
        for ( I = 0; I < g_U2596; I++ )
        {
            if (((IS_PED_DEAD( g_U2596[I] )) == 0) AND ((DOES_PED_EXIST( g_U2596[I] )) == 1))
            {
                CLEAR_PED_TASKS( g_U2596[I] );
            }
        }
        if ((ISEQ_QUERY_STATE( 1331635988, 3 )) == 0)
        {
            if ((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_1048() )) == 0)
            {
                 /* WRITESCRIPTLOG */ sub_505( "SP", "Blendout is snapping player to cover here...", 0 );
                SNAP_PLAYER_TO_COVERPOINT(  /* PLAYER_ID */ sub_1086(), "GenCover", "71C76B7F_6E1DA9D8_Popover1", 1 );
            }
            ISEQ_REGISTER_ENTITY( 1331635988, "player",  /* PLAYER_PED_ID */ sub_1048(), 0 );
            ISEQ_START( 1331635988 );
        }
        if ((ISEQ_QUERY_STATE( 752713886, 3 )) == 0)
        {
             /* TELEPORTPED */ sub_37157( g_U2596[0], l_U259[0]._fU0, l_U259[0]._fU12 );
             /* TELEPORTPED */ sub_37157( g_U2596[1], l_U259[1]._fU0, l_U259[1]._fU12 );
             /* TELEPORTPED */ sub_37157( g_U2596[2], l_U259[2]._fU0, l_U259[2]._fU12 );
             /* TELEPORTPED */ sub_37157( g_U2596[3], l_U259[3]._fU0, l_U259[3]._fU12 );
            ISEQ_REGISTER_ENTITY( 752713886, "enemy0", g_U2596[0], 0 );
            ISEQ_REGISTER_ENTITY( 752713886, "enemy1", g_U2596[1], 0 );
            ISEQ_REGISTER_ENTITY( 752713886, "enemy2", g_U2596[2], 0 );
            ISEQ_REGISTER_ENTITY( 752713886, "enemy3", g_U2596[3], 0 );
            ISEQ_START( 752713886 );
        }
        if ((ISEQ_QUERY_STATE( -905563172, 3 )) == 0)
        {
             /* TELEPORTPED */ sub_37157( g_U2595, l_U240._fU0, l_U240._fU12 );
            ISEQ_REGISTER_ENTITY( -905563172, "gio", g_U2595, 0 );
            ISEQ_START( -905563172 );
        }
        CAMERA_PLAY_ANIMATED( "LEVEL_S_BUS_CP_01", "B_OUT_10_01_BUS_CAM", 0, l_U339, l_U342, 0, 0 );
        if (g_U764 == 0)
        {
             /* RESET_SCRIPT_SPEECH_STRUCT */ sub_37627( ref l_U491 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 0,  /* PLAYER_PED_ID */ sub_1048(), "MAX", ref l_U491, 2, 0 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 1,  /* PLAYER_PED_ID */ sub_1048(), "MAX", ref l_U491, 2, 0 );
             /* PLAY_SINGLE_SPEECH */ sub_38005( "SBUS_JYMG", ref l_U491, 7, 1 );
        }
        l_U71 = 2;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eOpeningBlendoutState = BLENDOUT_FIRST_FRAME", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_505( "SP", "eOpeningBlendoutState = BLENDOUT_FIRST_FRAME", 0 );
        if ((l_U73._fU0 == 0) || (g_U764 < 1))
        {
            g_U764 = 1;
             /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_39106( ref l_U73, g_U764,  /* PLAYER_PED_ID */ sub_1048(), g_U2339[1], g_U2466[1], g_U2509[1], g_U2552[1], 0 );
        }
        for ( I = 0; I < g_U2596; I++ )
        {
            if (((IS_PED_DEAD( g_U2596[I] )) == 0) AND ((DOES_PED_EXIST( g_U2596[I] )) == 1))
            {
                SET_PED_VISIBLE( g_U2596[I], 1 );
            }
        }
         /* P_STREAMREQ_SCRIPT_STREAM_PLAY_FRONTEND */ sub_43821( "LBUS01_VCPF_JUNKYARD_LDR", ref g_U1704 );
        AUDIO_MUSIC_FORCE_TRACK( "BUSDEPOT_ACTION_SONG_03", "BUSDEPOT_03_1", "", 0.00000000, 10000, 5000, -1082130432, 0 );
        DO_SCREEN_FADE_IN( 0 );
         /* CREATETIMER */ sub_2448( ref l_U415, 100, 1, 0 );
         /* STARTTIMER */ sub_2598( ref l_U415 );
         /* CREATETIMER */ sub_2448( ref l_U424, 3000, 1, 0 );
         /* STARTTIMER */ sub_2598( ref l_U424 );
         /* CREATETIMER */ sub_2448( ref l_U370, 8000, 1, 0 );
         /* STARTTIMER */ sub_2598( ref l_U370 );
         /* CREATETIMER */ sub_2448( ref l_U361, 4000, 1, 0 );
         /* STARTTIMER */ sub_2598( ref l_U361 );
         /* CREATETIMER */ sub_2448( ref l_U433, 55000, 1, 0 );
         /* STARTTIMER */ sub_2598( ref l_U433 );
         /* CREATETIMER */ sub_2448( ref l_U379, 53000, 1, 0 );
         /* STARTTIMER */ sub_2598( ref l_U379 );
        PLAY_IMAGEFX( "GRADE_GAMMA_BOOST_01", 4, 1 );
        l_U71 = 3;
         /* WRITESCRIPTLOG */ sub_505( "SP", "eOpeningBlendoutState = BLENDOUT_PLAYING", 0 );
        break;
        case 3:
        if (( /* ISTIMERDONE */ sub_2731( ref l_U415 )) == 1)
        {
            DO_SCREEN_FADE_IN( 0 );
        }
        if ( /* ISTIMERDONE */ sub_2731( ref l_U424 ))
        {
            PLAY_IMAGEFX( "FLICKER_VIBRATE_INTERLACE_M", 4, 0 );
            PLAY_IMAGEFX( "FLICKER_VIBRATE_INTERLACE_M", 4, 0 );
        }
        if (( /* ISTIMERDONE */ sub_2731( ref l_U361 )) == 1)
        {
             /* RESET_SCRIPT_SPEECH_STRUCT */ sub_37627( ref l_U521 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 0,  /* PLAYER_PED_ID */ sub_1048(), "MAX", ref l_U521, 2, 0 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 1, g_U2595, "GIOVANNA", ref l_U521, 2, 0 );
             /* PLAY_SINGLE_SPEECH */ sub_38005( "SBUS_WHSPA", ref l_U521, 7, 1 );
        }
        if (( /* ISTIMERDONE */ sub_2731( ref l_U370 )) == 1)
        {
             /* RESET_SCRIPT_SPEECH_STRUCT */ sub_37627( ref l_U481 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 0,  /* PLAYER_PED_ID */ sub_1048(), "MAX", ref l_U481, 2, 0 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 2, g_U2596[0], "M10_CP_01_Avg", ref l_U481, 2, 0 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 3, g_U2596[1], "M10_CP_02_Mus", ref l_U481, 2, 0 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 4, g_U2596[3], "M10_CP_04_Mus", ref l_U481, 2, 0 );
             /* PLAY_SINGLE_SPEECH */ sub_38005( "SBUS_JYCB", ref l_U481, 7, 1 );
        }
        if (l_U346 == 0)
        {
            if (IS_ANIMATED_CAMERA_PLAYING() == 1)
            {
                if (CAMERA_ANIMATED_CURRENT_TIME() >= l_U343)
                {
                    SET_CAM_VIEW_MODE( 1 );
                    SET_GAMEPLAY_CAM_RELATIVE_HEADING( l_U344, 1065353216, 0 );
                    SET_GAMEPLAY_CAM_RELATIVE_PITCH( l_U345, 1065353216, 0 );
                    CAMERA_ANIMATED_STOP( l_U356, 1 );
                     /* CREATETIMER */ sub_2448( ref l_U347, l_U356, 1, 0 );
                     /* STARTTIMER */ sub_2598( ref l_U347 );
                    l_U346 = 1;
                }
            }
        }
        if (( /* ISTIMERDONE */ sub_2731( ref l_U347 )) == 1)
        {
            return 1;
        }
        break;
    }
    return 0;
}

/* TELEPORTPED */ void sub_37157(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_37627(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_37738(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_38005(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_38050( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_38050(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_38137( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_38137(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_38189( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_38707( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_38189(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_38707(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_39106(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_505( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_505( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_9131( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_39397( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_39874( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_39874( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_40134( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_39874( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_40134( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_40134( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_39874( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_40134( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_40134( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_40134( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_39874( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_40134( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_40134( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_40134( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_40134( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_41714( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_505( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_39397(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6146( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_505( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_505( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_39874(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_40134(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_41714(int iParam0)
{
     /* WRITE_STRING */ sub_7966( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_41802( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_41879( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_41879( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_41879( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_41879( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_41879( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_42749( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU52 );
     /* WRITE_STRING */ sub_7966( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU96 );
     /* WRITE_STRING */ sub_7966( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU100 );
     /* WRITE_STRING */ sub_7966( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU104 );
     /* WRITE_STRING */ sub_7966( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU108 );
     /* WRITE_STRING */ sub_7966( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU112 );
     /* WRITE_STRING */ sub_7966( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU116 );
     /* WRITE_STRING */ sub_7966( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU120 );
     /* WRITE_STRING */ sub_7966( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU124 );
     /* WRITE_STRING */ sub_7966( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU128 );
     /* WRITE_STRING */ sub_7966( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_42048( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_42048( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_42048( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_41802(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_41879(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_42048(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_42749(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_PLAY_FRONTEND */ void sub_43821(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_43880( uParam0, uParam1 ))
    {
        iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_44089( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            DISPLAYF( "[CCB]### Playing the SCRIPT_STREAM: {} ###", 1, 1281, ref (uParam1^)[iVar4]._fU0 );
            PLAY_SCRIPT_STREAM_FRONTEND( iVar4 );
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam0 );
            SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam0 );
        SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ int sub_43880(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB]### The SCRIPT_STREAM is loaded: {} ###", 1, 1281, ref (uParam1^)[I]._fU0 );
                return 1;
            }
        }
    }
    return 0;
}

/* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ int sub_44089(unknown uParam0, unknown uParam1)
{
    int Result;

    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
        {
            return Result;
        }
    }
    return -1;
}

/* NIS_POST_SETUP */ void sub_45599(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1086(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1048(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_45697();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_45697()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1048(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1048(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1048(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1048(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_START_SP_CHALLENGES */ void sub_46481()
{
     /* WRITESCRIPTLOG */ sub_505( "CCB", "P_START_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_505( "CCB", "Starting the Bus_Depot context...", 0 );
    START_CONTEXT( "Bus_Depot" );
     /* WRITESCRIPTLOG */ sub_505( "CCB", "Starting the Bus_Depot_Junkyard context...", 0 );
    START_CONTEXT( "Bus_Depot_Junkyard" );
    return;
}

/* P_HANDLE_GIO_HIDING_IN_BUS */ void sub_46808()
{
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1)))
    {
        if (( /* F_HAS_ENEMY_FIRED_NEAR_GIO */ sub_46896()) == 1)
        {
             /* P_MAKE_GIOVANNA_SCREAM_BUS */ sub_47040();
        }
        if (( /* F_IS_MAX_SHOOTING_AT_GIO */ sub_47524()) == 1)
        {
            PED_SET_ACTION_INTENTION( g_U2595, 49, 500, 0.00000000, 0.00000000, 0.00000000 );
             /* P_DIAL_MAX_SHOOT_AT_GIO */ sub_47718();
        }
        if (((IS_PLAYER_PED_FREE_AIMING_AT_PED(  /* PLAYER_PED_ID */ sub_1048(), g_U2595 )) == 1) AND ((IS_PLAYER_GUN_RAISED(  /* PLAYER_ID */ sub_1086() )) == 1))
        {
            PED_SET_ACTION_INTENTION( g_U2595, 50, 500, 0.00000000, 0.00000000, 0.00000000 );
             /* P_DIAL_MAX_AIM_AT_GIO */ sub_48253();
        }
        if (l_U358 == 1)
        {
            if (( /* HASTIMERBEENACTIVATED */ sub_2314( ref l_U442 )) == 0)
            {
                 /* CREATETIMER */ sub_2448( ref l_U442, 1000, 1, 0 );
                 /* STARTTIMER */ sub_2598( ref l_U442 );
            }
            if ((l_U442._fU16 == 1) || (( /* ISTIMERDONE */ sub_2731( ref l_U442 )) == 1))
            {
                if (((IS_ANY_SPEECH_PLAYING( g_U2595 )) == 0) AND (( /* F_IS_ENEMY_CLOSE_TO_GIO */ sub_48574()) == 1))
                {
                    PED_SET_ACTION_INTENTION( g_U2595, 48, 500, 0.00000000, 0.00000000, 0.00000000 );
                     /* P_DIAL_ENEMIES_CLOSE_TO_GIO */ sub_49071();
                     /* CREATETIMER */ sub_2448( ref l_U442, 6000, 1, 0 );
                     /* STARTTIMER */ sub_2598( ref l_U442 );
                }
            }
        }
    }
    return;
}

/* F_HAS_ENEMY_FIRED_NEAR_GIO */ int sub_46896()
{
    if (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1))
    {
        if ((HAS_BULLET_IMPACTED_IN_AREA( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( g_U2595 ), 6.00000000, ref l_U338 )) == 1)
        {
            if (l_U338 != ( /* PLAYER_PED_ID */ sub_1048()))
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_MAKE_GIOVANNA_SCREAM_BUS */ void sub_47040()
{
    int iVar2;

     /* WRITESCRIPTLOG */ sub_505( "SP", "P_MAKE_GIOVANNA_SCREAM_BUS", 0 );
    if (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1))
    {
        if ((IS_ANY_SPEECH_PLAYING( g_U2595 )) == 0)
        {
            iVar2 = GET_RANDOM_INT_IN_RANGE( 0, 2 );
            if (iVar2 == 0)
            {
                PED_SET_ACTION_INTENTION( g_U2595, 49, 1000, 0.00000000, 0.00000000, 0.00000000 );
            }
            else
            {
                PED_SET_ACTION_INTENTION( g_U2595, 47, 1000, 0.00000000, 0.00000000, 0.00000000 );
            }
             /* P_DIAL_GIOVANNA_RANDOM_SCREAM_BUS */ sub_47263();
        }
    }
    return;
}

/* P_DIAL_GIOVANNA_RANDOM_SCREAM_BUS */ void sub_47263()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_DIAL_GIOVANNA_RANDOM_SCREAM_BUS", 0 );
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1)))
    {
        if ((IS_ANY_SPEECH_PLAYING( g_U2595 )) == 0)
        {
             /* RESET_SCRIPT_SPEECH_STRUCT */ sub_37627( ref l_U451 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 0,  /* PLAYER_PED_ID */ sub_1048(), "MAX", ref l_U451, 2, 0 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 1, g_U2595, "GIOVANNA", ref l_U451, 2, 0 );
             /* PLAY_SINGLE_SPEECH */ sub_38005( "SBUS_JYGF", ref l_U451, 7, 1 );
        }
    }
    return;
}

/* F_IS_MAX_SHOOTING_AT_GIO */ int sub_47524()
{
    if (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1))
    {
        if ((HAS_BULLET_IMPACTED_IN_AREA( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( g_U2595 ), 2.00000000, ref l_U338 )) == 1)
        {
            if (l_U338 == ( /* PLAYER_PED_ID */ sub_1048()))
            {
                if ((IS_ANY_SPEECH_PLAYING( g_U2595 )) == 0)
                {
                    return 1;
                }
            }
        }
    }
    return 0;
}

/* P_DIAL_MAX_SHOOT_AT_GIO */ void sub_47718()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_DIAL_MAX_SHOOT_AT_GIO", 0 );
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1)))
    {
        if ((( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_47846( l_U501 )) == 0) AND (( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_47846( l_U531 )) == 0))
        {
             /* RESET_SCRIPT_SPEECH_STRUCT */ sub_37627( ref l_U501 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 0,  /* PLAYER_PED_ID */ sub_1048(), "MAX", ref l_U501, 2, 0 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 1, g_U2595, "GIOVANNA", ref l_U501, 2, 0 );
             /* PLAY_SINGLE_SPEECH */ sub_38005( "SBUS_VIG01PT2", ref l_U501, 7, 1 );
        }
    }
    return;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_47846(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_47889( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_47889(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* P_DIAL_MAX_AIM_AT_GIO */ void sub_48253()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_DIAL_MAX_AIM_AT_GIO", 0 );
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1)))
    {
        if ((( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_47846( l_U501 )) == 0) AND (( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_47846( l_U531 )) == 0))
        {
             /* RESET_SCRIPT_SPEECH_STRUCT */ sub_37627( ref l_U531 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 0,  /* PLAYER_PED_ID */ sub_1048(), "MAX", ref l_U531, 2, 0 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 1, g_U2595, "GIOVANNA", ref l_U531, 2, 0 );
             /* PLAY_SINGLE_SPEECH */ sub_38005( "SBUS_GVPATH", ref l_U531, 8, 1 );
        }
    }
    return;
}

/* F_IS_ENEMY_CLOSE_TO_GIO */ int sub_48574()
{
    int I;

    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1)))
    {
        for ( I = 0; I < g_U2596; I++ )
        {
            if (((IS_PED_DEAD( g_U2596[I] )) == 0) AND ((DOES_PED_EXIST( g_U2596[I] )) == 1))
            {
                if ((( /* F_ISPEDINTRIGGERBOX */ sub_48912( g_U2596[I], l_U110 )) == 1) || (( /* GET_DISTANCE_BETWEEN_PEDS */ sub_48732( g_U2595, g_U2596[I], 0 )) < 7.50000000))
                {
                    return 1;
                }
            }
        }
    }
    return 0;
}

/* GET_DISTANCE_BETWEEN_PEDS */ void sub_48732(unknown uParam0, unknown uParam1, boolean bParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar5 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        uVar8 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    }
    if (bParam2)
    {
        return VDIST( uVar5, uVar8 );
        break;
    }
    return VDIST( uVar5._fU0, uVar5._fU4, 0, uVar8._fU0, uVar8._fU4, 0 );
}

/* F_ISPEDINTRIGGERBOX */ int sub_48912(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_DIAL_ENEMIES_CLOSE_TO_GIO */ void sub_49071()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_DIAL_ENEMIES_CLOSE_TO_GIO", 0 );
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1)))
    {
         /* RESET_SCRIPT_SPEECH_STRUCT */ sub_37627( ref l_U511 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 0,  /* PLAYER_PED_ID */ sub_1048(), "MAX", ref l_U511, 2, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 1, g_U2595, "GIOVANNA", ref l_U511, 2, 0 );
         /* PLAY_SINGLE_SPEECH */ sub_38005( "SBUS_VIG01PT3", ref l_U511, 7, 1 );
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_49358(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_48912(  /* PLAYER_PED_ID */ sub_1048(), uParam0 );
}

/* F_CAN_SEARCH_ENEMIES_SEE_MAX */ int sub_49983()
{
    unknown uVar2;

    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1086() )) == 0))
    {
        uVar2 =  /* PLAYER_PED_ID */ sub_1048();
        if (( /* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ sub_50076( ref g_U2596, uVar2, 1, 1, 1, 1, 1 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_505( "SP", "Max has been spotted using regular AI.", 0 );
            return 1;
        }
        if (( /* ISTIMERDONE */ sub_2731( ref l_U433 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_505( "SP", "Max has been spotted due to search sequence finishing.", 0 );
            l_U397 = 1;
            return 1;
        }
    }
    return 0;
}

/* F_ARE_PEDS_IN_ARRAY_AWARE_OF_PED */ int sub_50076(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (( /* F_IS_PED_AWARE_OF_PED */ sub_50156( ref (uParam0^)[I], uParam1, uParam2, uParam3, uParam4, uParam5, uParam6 )) == 1)
        {
            return 1;
        }
    }
    return 0;
}

/* F_IS_PED_AWARE_OF_PED */ int sub_50156(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, int iParam6)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        if ((uParam3) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 1 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_505( "MF", "ped has SEEN target ped", 0 );
            }
            return 1;
        }
        else if ((uParam4) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 8 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_505( "MF", "ped has BEEN SHOT AT by target ped", 0 );
            }
            return 1;
        }
        else if ((uParam2) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 2 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_505( "MF", "ped has HEARD target ped", 0 );
            }
            return 1;
        }
        else if ((uParam5) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 4 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_505( "MF", "ped has BEEN TOLD ABOUT target ped", 0 );
            }
            return 1;
        };;;;
    }
    return 0;
}

/* P_START_ENEMIES_BEHIND_BUS */ void sub_50987()
{
    unknown uVar2;
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_505( "SP", "P_START_ENEMIES_BEHIND_BUS", 0 );
    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0)
    {
        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND (((IS_PED_DEAD( g_U2596[4] )) == 0) AND ((DOES_PED_EXIST( g_U2596[4] )) == 1)))
        {
            REGISTER_TARGET( g_U2596[4],  /* PLAYER_PED_ID */ sub_1048() );
            OPEN_SEQUENCE_TASK( ref uVar2 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
            TASK_FOLLOW_NAV_MESH_TO_COORD( 0, -18.08000000, -55.76000000, 0.06000000, 3, -1, 1.00000000, 0, 0 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1048() );
            CLOSE_SEQUENCE_TASK( uVar2 );
            TASK_PERFORM_SEQUENCE( g_U2596[4], uVar2 );
            CLEAR_SEQUENCE_TASK( uVar2 );
        }
        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND (((IS_PED_DEAD( g_U2596[5] )) == 0) AND ((DOES_PED_EXIST( g_U2596[5] )) == 1)))
        {
            REGISTER_TARGET( g_U2596[5],  /* PLAYER_PED_ID */ sub_1048() );
            OPEN_SEQUENCE_TASK( ref uVar3 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
            TASK_FOLLOW_NAV_MESH_TO_COORD( 0, -17.71000000, -55.84000000, 0.07000000, 3, -1, 1.00000000, 0, 0 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
            TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1048() );
            CLOSE_SEQUENCE_TASK( uVar3 );
            TASK_PERFORM_SEQUENCE( g_U2596[5], uVar3 );
            CLEAR_SEQUENCE_TASK( uVar3 );
        }
    }
    return;
}

/* P_START_SEARCH_ENEMIES_AGGRESSIVE_ADVANCE */ void sub_51459()
{
    int I;

     /* WRITESCRIPTLOG */ sub_505( "SP", "P_START_SEARCH_ENEMIES_AGGRESSIVE_ADVANCE", 0 );
    l_U409 = PEDGROUPTASK_ADVANCE_CREATE( l_U253._fU0 );
    for ( I = 0; I < g_U2596; I++ )
    {
        if (((IS_PED_DEAD( g_U2596[I] )) == 0) AND ((DOES_PED_EXIST( g_U2596[I] )) == 1))
        {
            PEDGROUPTASK_ADVANCE_ASSIGNPED( l_U253._fU0, l_U409, g_U2596[I] );
        }
    }
    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0)
    {
        PEDGROUPTASK_ADVANCE_SETTARGET_PED( l_U253._fU0, l_U409,  /* PLAYER_PED_ID */ sub_1048() );
    }
    PEDGROUPTASK_ADVANCE_SETTIMETOHIDE( l_U253._fU0, l_U409, l_U410 );
    PEDGROUPTASK_ADVANCE_SETTIMETOIDLE( l_U253._fU0, l_U409, l_U411 );
    PEDGROUPTASK_ADVANCE_SETTIMERANGEFORALLPEDSTOSTARTFIRING( l_U253._fU0, l_U409, l_U412 );
    PEDGROUPTASK_ADVANCE_SETADVANCEDISTANCE( l_U253._fU0, l_U409, l_U413 );
    PEDGROUPTASK_ADVANCE_SETNUMPEDSTOADVANCE( l_U253._fU0, l_U409, l_U414 );
    PEDGROUPTASK_ADVANCE_TRIGGER_MOVE( l_U253._fU0, l_U409 );
    return;
}

/* P_DIAL_ENEMIES_FOUND_MAX */ void sub_51888()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_DIAL_ENEMIES_FOUND_MAX", 0 );
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1048() )) == 0) AND (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1)))
    {
        if ((IS_ANY_SPEECH_PLAYING( g_U2595 )) == 0)
        {
             /* RESET_SCRIPT_SPEECH_STRUCT */ sub_37627( ref l_U471 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 3, g_U2596[2], "M10_CP_03_Avg", ref l_U471, 2, 0 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_37738( 2,  /* PLAYER_PED_ID */ sub_1048(), "MAX", ref l_U471, 2, 0 );
             /* PLAY_SINGLE_SPEECH */ sub_38005( "SBUS_JYCC", ref l_U471, 7, 1 );
        }
    }
    return;
}

/* DISABLETIMER */ void sub_52135(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* P_START_CHECKPOINT_THREAD */ void sub_52187(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_STOP */ void sub_52272(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_43880( uParam0, uParam1 ))
    {
        iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_44089( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            DISPLAYF( "[CCB]### Stopping the SCRIPT_STREAM: {} ###", 1, 1281, ref (uParam1^)[iVar4]._fU0 );
            STOP_SCRIPT_STREAM( iVar4 );
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam0 );
            SCRIPT_ASSERT( "Attempting to stop a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam0 );
        DISPLAYF( "Attempting to stop a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ void sub_52768(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4325( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a SCRIPT_STREAM asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_53236(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* P_SEEK_OUT_PLAYER */ void sub_53356()
{
    int I;

     /* WRITESCRIPTLOG */ sub_505( "SP", "P_SEEK_OUT_PLAYER", 0 );
    for ( I = 0; I < g_U2596; I++ )
    {
        if (((IS_PED_DEAD( g_U2596[I] )) == 0) AND ((DOES_PED_EXIST( g_U2596[I] )) == 1))
        {
            SET_PED_EMOTION_STATE( g_U2596[I], 1 );
            SET_PED_COMBAT_MOVEMENT( g_U2596[I], 2 );
            SET_PED_COMBAT_RANGE_MIN( g_U2596[I], 5.00000000 );
            SET_PED_COMBAT_RANGE_MAX( g_U2596[I], 10.00000000 );
            REGISTER_TARGET( g_U2596[I],  /* PLAYER_PED_ID */ sub_1048() );
            TASK_COMBAT_PED( g_U2596[I],  /* PLAYER_PED_ID */ sub_1048() );
        }
    }
    return;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_53634(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_53236( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_54012(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_48912(  /* PLAYER_PED_ID */ sub_1048(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* P_KILL_PEDS_IN_ARRAY */ void sub_54151(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_KILL_PED */ sub_54205( (uParam0^)[I] );
    }
    return;
}

/* P_KILL_PED */ void sub_54205(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* P_UNLOAD_ASSETS */ void sub_54804()
{
     /* WRITESCRIPTLOG */ sub_505( "SP", "P_UNLOAD_SCRIPT_ASSETS", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_54877( g_U758, ref g_U910 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_55333( ref g_U1952, ref g_U1369 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_55333( ref g_U1904, ref g_U1369 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4187( 1331635988, ref g_U1272 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4187( 752713886, ref g_U1272 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_4187( -905563172, ref g_U1272 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_54877(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4325( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_55333(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4325( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

