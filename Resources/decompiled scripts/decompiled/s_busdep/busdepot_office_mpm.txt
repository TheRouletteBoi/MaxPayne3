void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U40 = 0;
    l_U41 = 0;
    l_U42 = 1500;
    StrCopy( ref l_U52, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U60, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U68 = 0;
    l_U69 = 0;
    l_U70 = 0;
    l_U71 = 0;
    l_U73 = 0;
    l_U110 = 0;
    l_U219 = 0;
    l_U220 = 0;
    l_U285 = 4100;
    l_U388 = 0;
    l_U389 = 0;
    l_U390 = {-36.47900000, 78.27500000, 0.20000000};
    l_U393 = 180.00000000;
    l_U403 = 2650;
    l_U404 = {-35.42800000, 75.93300000, 1.64800000};
    l_U407 = 180.00000000;
    l_U408 = 0;
    l_U409 = 1650;
    l_U410 = 1000;
    l_U420 = -95.00000000;
    l_U421 = -1.09100000;
    l_U422 = 1000;
    l_U423 = {-39.83800000, 83.30100000, 0.20000000};
    l_U426 = 45.00000000;
    l_U427 = {-39.61500000, 84.51500000, 0.20000000};
    l_U430 = 180.00000000;
     /* WRITESCRIPTLOG */ sub_607( "SP", "Script busdepot_office_mpm.sc is starting up...", 0 );
    l_U68 = 1;
    while (IS_EXITFLAG_SET() == 0)
    {
         /* P_HANDLE_FAILURE */ sub_745();
        if (l_U69 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_15013();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_ALL */ sub_8903();
     /* P_UNLOAD_ASSETS */ sub_44590();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "busdepot_office_mpm" );
     /* WRITESCRIPTLOG */ sub_607( "SP", "Script busdepot_office_mpm.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_607(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_745()
{
    switch (l_U69)
    {
        case 0:
        if (g_U764 == 9)
        {
            if ( /* RESTARTING_CHECKPOINT */ sub_862())
            {
                l_U69 = 5;
            }
            if ((((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0) || ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 1)) AND (((IS_PED_DEAD( g_U2595 )) == 1) AND ((DOES_PED_EXIST( g_U2595 )) == 1)))
            {
                 /* WRITESCRIPTLOG */ sub_607( "SP", "Mission Failed: Giovanna died.", 0 );
                g_U2872 = 1;
                if ((HAS_PED_BEEN_DAMAGED_BY_PED( g_U2595,  /* PLAYER_PED_ID */ sub_1158(), 0 )) == 1)
                {
                    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
                    BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
                    l_U73 = 1;
                    l_U69 = 1;
                     /* WRITESCRIPTLOG */ sub_607( "SP", "eFailState = FAIL_HANDLE_GIO_DEATH_CAM", 0 );
                }
            }
            if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 1)
            {
                l_U69 = 3;
                 /* WRITESCRIPTLOG */ sub_607( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
        }
        else if ((( /* IS_RESTART_ACTIVE */ sub_1765()) == 1) || ((g_U2628 == 1) || ((((IS_PED_DEAD( g_U2595 )) == 1) AND ((DOES_PED_EXIST( g_U2595 )) == 1)) || ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 1))))
        {
            if (((CUTSCENE_NAMED_IS_LOADING( "mid_10e_bus_concat" )) == 1) || ((CUTSCENE_IS_LOADED( "mid_10e_bus_concat" )) == 1))
            {
                CLEAR_NAMED_CUTSCENE( "mid_10e_bus_concat" );
            }
             /* P_RESET_CHECKPOINT_THREAD */ sub_1917( ref g_U765[9] );
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        }
        break;
        case 1:
        if (( /* F_HANDLE_GIO_DEATH_CAM */ sub_1998()) == 1)
        {
            l_U69 = 3;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
        }
        break;
        case 2:
        if (( /* F_HANDLE_GIO_DEATH_NIS */ sub_3157()) == 1)
        {
            l_U69 = 4;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eFailState = FAIL_WAITING_FOR_RESPAWN", 0 );
        }
        break;
        case 3:
        if (( /* F_CHECK_QUIT_RETRY */ sub_7264( 0 )) == 1)
        {
            l_U69 = 4;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eFailState = FAIL_WAITING_FOR_RESPAWN", 0 );
        }
        break;
        case 4:
        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0) AND (IS_LAST_MAN_STANDING_ACTIVE() == 0))
        {
            l_U69 = 5;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
        }
        break;
        case 5:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1196() )) == 0))
        {
            FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1158(), 0 );
            SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1158(), 1 );
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1196(), 0, 0 );
            if ((GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1158() )) == 1)
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1158(), 0 );
            }
            PED_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_1158(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_IDLE" );
        }
        DO_SCREEN_FADE_OUT( 0 );
        AUDIO_MUSIC_SUSPEND( 500 );
         /* P_CLEANUP_ALL */ sub_8903();
         /* CLEANPED */ sub_3390( g_U2595 );
        l_U69 = 6;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
        break;
        case 6:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
        if (l_U74._fU0)
        {
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_10582( ref l_U74,  /* PLAYER_PED_ID */ sub_1158() );
        }
         /* P_SETUP_PLAYER_RELATIONSHIPS */ sub_14635();
        l_U69 = 7;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
        break;
        case 7:
        if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
        {
             /* WRITESCRIPTLOG */ sub_607( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U68 = 1;
            l_U69 = 0;
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_607( "CCB", "Waiting for stream requests...", 0 );
        }
        break;
    }
    return;
}

/* RESTARTING_CHECKPOINT */ int sub_862()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1158(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1196(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1196(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1158() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1158(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* PLAYER_PED_ID */ int sub_1158()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1196() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1196()
{
    return GET_PLAYER_ID();
}

/* IS_RESTART_ACTIVE */ void sub_1765()
{
    return g_U648;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_1917(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* F_HANDLE_GIO_DEATH_CAM */ int sub_1998()
{
    switch (l_U73)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eGioDeathCamState = DEATHCAM_SETUP", 0 );
         /* NIS_PRE_SETUP */ sub_2134( 1, 0, 0, 1 );
        g_U2872 = 1;
         /* CREATETIMER */ sub_2324( ref l_U267, 2250, 1, 0 );
         /* STARTTIMER */ sub_2474( ref l_U267 );
        l_U73 = 2;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eGioDeathCamState = DEATHCAM_WAITING_FOR_BULLETCAM", 0 );
        case 2:
        if (((l_U267._fU16 == 1) || (( /* ISTIMERDONE */ sub_2687( ref l_U267 )) == 1)) AND ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0))
        {
            DO_SCREEN_FADE_OUT( 0 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
            BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 0 );
            l_U73 = 3;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eGioDeathCamState = DEATHCAM_FINISHED", 0 );
        }
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eGioDeathCamState = DEATHCAM_FINISHED", 0 );
        l_U73 = 0;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eGioDeathCamState = DEATHCAM_IDLE", 0 );
        return 1;
        break;
    }
    return 0;
}

/* NIS_PRE_SETUP */ void sub_2134(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1196(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1158(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1158() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1158(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* CREATETIMER */ void sub_2324(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2474(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2687(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* F_HANDLE_GIO_DEATH_NIS */ int sub_3157()
{
    vector vVar2;
    float fVar5;
    vector vVar6;
    float fVar9;
    vector vVar10;
    float fVar13;

    vVar2 = {-39.83800000, 83.30100000, 0.20000000};
    fVar5 = 0.00000000;
    vVar6 = {-39.61500000, 84.51500000, 0.20000000};
    fVar9 = 180.00000000;
    vVar10 = {-40.67800000, 81.21500000, 0.86600000};
    fVar13 = 0.00000000;
    switch (l_U71)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eGioDeathMPMNISState = NIS_START", 0 );
         /* NIS_PRE_SETUP */ sub_2134( 1, 0, 0, 1 );
        ENABLE_CROSSHAIR( 0 );
         /* CLEANPED */ sub_3390( l_U234 );
        l_U234 =  /* CREATEPED */ sub_3479( ref l_U221 );
        if (((IS_PED_DEAD( l_U234 )) == 0) AND ((DOES_PED_EXIST( l_U234 )) == 1))
        {
            SET_PED_NAME_DEBUG( l_U234, "piGiovanna" );
            SET_ROOM_FOR_PED_BY_NAME( l_U234, ref g_U1848 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U234, 1 );
            SET_PED_VISIBLE( l_U234, 0 );
            SET_PED_COLLISION( l_U234, 0 );
            SET_PED_INVINCIBLE( l_U234, 1 );
            SET_PED_PROOFS( l_U234, 1, 1, 1, 1, 1 );
            SET_PED_CAN_RAGDOLL( l_U234, 0 );
        }
         /* CLEANPED */ sub_3390( l_U248 );
        l_U248 =  /* CREATEPED */ sub_3479( ref l_U235 );
        if (((IS_PED_DEAD( l_U248 )) == 0) AND ((DOES_PED_EXIST( l_U248 )) == 1))
        {
            SET_PED_NAME_DEBUG( l_U248, "piMid10cFailEnemy" );
            SET_ROOM_FOR_PED_BY_NAME( l_U248, ref g_U1848 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U248, 1 );
            SET_PED_VISIBLE( l_U248, 0 );
            SET_PED_COLLISION( l_U248, 0 );
            SET_PED_INVINCIBLE( l_U248, 1 );
            SET_PED_PROOFS( l_U248, 1, 1, 1, 1, 1 );
            SET_PED_CAN_RAGDOLL( l_U248, 0 );
             /* F_GIVEPEDWEAPON */ sub_4836( l_U248, g_U2855, 25000, 0, 0 );
        }
         /* TELEPORTPED */ sub_5247( l_U234, vVar2, fVar5 );
         /* TELEPORTPED */ sub_5247( l_U248, vVar6, fVar9 );
        ISEQ_REGISTER_ENTITY( 1106596692, "gio", l_U234, 0 );
        ISEQ_REGISTER_ENTITY( 1106596692, "enemy", l_U248, 0 );
        ISEQ_START( 1106596692 );
        l_U71 = 2;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eGioDeathMPMNISState = NIS_LOADING", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eGioDeathMPMNISState = NIS_FIRST_FRAME", 0 );
         /* CLEANPED */ sub_3390( g_U2595 );
         /* CLEANPED */ sub_3390( l_U218 );
        CAMERA_PLAY_ANIMATED( "LEVEL_S_BUS_CP_05", "MID_10C_BUS_CAM", 1, vVar10, fVar13, 0, 0 );
        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0) AND ((DOES_PED_EXIST(  /* PLAYER_PED_ID */ sub_1158() )) == 1))
        {
             /* TELEPORTPED */ sub_5247(  /* PLAYER_PED_ID */ sub_1158(), -40.93153000, 77.92513000, 0.20012300, 0.00000000 );
            SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1158(), 0 );
        }
        if (((IS_PED_DEAD( l_U234 )) == 0) AND ((DOES_PED_EXIST( l_U234 )) == 1))
        {
            SET_PED_COLLISION( l_U234, 1 );
            SET_PED_VISIBLE( l_U234, 1 );
        }
        if (((IS_PED_DEAD( l_U248 )) == 0) AND ((DOES_PED_EXIST( l_U248 )) == 1))
        {
            SET_PED_COLLISION( l_U248, 1 );
            SET_PED_VISIBLE( l_U248, 1 );
        }
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        DO_SCREEN_FADE_IN( 0 );
         /* CREATETIMER */ sub_2324( ref l_U249, 0, 1, 0 );
         /* STARTTIMER */ sub_2474( ref l_U249 );
         /* CREATETIMER */ sub_2324( ref l_U258, 4500, 1, 0 );
         /* STARTTIMER */ sub_2474( ref l_U258 );
        l_U71 = 3;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eGioDeathMPMNISState = NIS_PLAYING", 0 );
        break;
        case 3:
        if (( /* ISTIMERDONE */ sub_2687( ref l_U249 )) == 1)
        {
             /* RESET_SCRIPT_SPEECH_STRUCT */ sub_5931( ref l_U377 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_6047( 1, l_U234, "GIOVANNA", ref l_U377, 2, 0 );
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_6047( 2, l_U248, "M10_CP_60_AVG", ref l_U377, 2, 0 );
             /* PLAY_SINGLE_SPEECH */ sub_6329( "SBUS_MID10CBUS", ref l_U377, 7, 1 );
        }
        if ((IS_ANIMATED_CAMERA_PLAYING() == 0) || ((l_U258._fU16 == 1) || (( /* ISTIMERDONE */ sub_2687( ref l_U258 )) == 1)))
        {
            if (( /* F_CHECK_QUIT_RETRY */ sub_7264( 0 )) == 1)
            {
                 /* CLEANPED */ sub_3390( l_U234 );
                 /* CLEANPED */ sub_3390( l_U248 );
                if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0) AND ((DOES_PED_EXIST(  /* PLAYER_PED_ID */ sub_1158() )) == 1))
                {
                    SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1158(), 1 );
                }
                AUDIO_MUSIC_SUSPEND( 500 );
                if (IS_ANIMATED_CAMERA_PLAYING() == 1)
                {
                    CAMERA_ANIMATED_STOP( 0, 0 );
                }
                l_U71 = 0;
                 /* WRITESCRIPTLOG */ sub_607( "SP", "eGioDeathMPMNISState = NIS_IDLE", 0 );
                return 1;
            }
        }
        break;
    }
    return 0;
}

/* CLEANPED */ void sub_3390(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CREATEPED */ void sub_3479(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_3661( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_4254( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_4355( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_3661(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_3778( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* WRITE_STRING */ void sub_3778(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_4254(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_4355(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_4836(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_3778( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* TELEPORTPED */ void sub_5247(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_5931(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_6047(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_6329(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_6374( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_6374(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_6461( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_6461(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_6513( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_7031( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_6513(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_7031(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* F_CHECK_QUIT_RETRY */ int sub_7264(int iParam0)
{
    iParam0 = 1;
    switch (l_U41)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_7346( ref l_U43 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )))
            {
                l_U42 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_2324( ref l_U43, l_U42, 1, 1 );
             /* STARTTIMER */ sub_2474( ref l_U43 );
        }
        if ( /* ISTIMERDONE */ sub_2687( ref l_U43 ))
        {
             /* WRITESCRIPTLOG */ sub_607( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1196() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1196(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U41 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U41 = 2;
            }
            else
            {
                l_U41 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_607( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_7829();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_607( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_7829();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_7346(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_7829()
{
     /* WRITESCRIPTLOG */ sub_607( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_7904( ref l_U43 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1196() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1196(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U40 = 0;
    l_U40 = l_U40;
    l_U41 = 0;
    return;
}

/* RESETTIMER */ void sub_7904(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_CLEANUP_ALL */ void sub_8903()
{
     /* WRITESCRIPTLOG */ sub_607( "SP", "P_CLEANUP_ALL", 0 );
    ISEQ_UNREGISTER_ENTITY( -1476959292, "gio" );
    ISEQ_UNREGISTER_ENTITY( -1476959292, "enemy" );
    ISEQ_TERMINATE( -1476959292 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_9015( -1476959292, ref g_U1272 );
    ISEQ_UNREGISTER_ENTITY( 689789076, "player" );
    ISEQ_TERMINATE( 689789076 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_9015( 689789076, ref g_U1272 );
    ISEQ_UNREGISTER_ENTITY( 1106596692, "gio" );
    ISEQ_UNREGISTER_ENTITY( 1106596692, "enemy" );
    ISEQ_TERMINATE( 1106596692 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_9015( 1106596692, ref g_U1272 );
     /* CLEANPED */ sub_3390( l_U218 );
     /* CLEANPED */ sub_3390( l_U234 );
     /* CLEANPED */ sub_3390( l_U248 );
     /* CLEANOBJECT */ sub_10224( g_U2852 );
     /* CLEANOBJECT */ sub_10224( g_U2853 );
    SET_KILL_EFFECT_NAME( "kill_flash" );
     /* P_STOP_SP_CHALLENGES */ sub_10308();
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_9015(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_9153( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_9153(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* CLEANOBJECT */ void sub_10224(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_10308()
{
     /* WRITESCRIPTLOG */ sub_607( "CCB", "P_STOP_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_607( "CCB", "Stopping the Bus_Depot_Offices context...", 0 );
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_10582(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_607( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_10801( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_11965( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_12279( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12714( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_12279( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12714( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_12279( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12714( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_4836( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12714( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_4836( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12714( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_13207( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_13409( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1158(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_607( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_10801(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_10863( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_10863(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_11965(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_12279(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_3778( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_12714(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_13207(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_13409(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_10863( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_13507( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_13507(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_SETUP_PLAYER_RELATIONSHIPS */ void sub_14635()
{
     /* WRITESCRIPTLOG */ sub_607( "SP", "P_SETUP_PLAYER_RELATIONSHIPS", 0 );
    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0)
    {
        SET_PED_RELATIONSHIP(  /* PLAYER_PED_ID */ sub_1158(), 0, 1 );
        SET_PED_RELATIONSHIP(  /* PLAYER_PED_ID */ sub_1158(), 0, 2 );
        SET_PED_RELATIONSHIP(  /* PLAYER_PED_ID */ sub_1158(), 0, 6 );
        SET_PED_RELATIONSHIP(  /* PLAYER_PED_ID */ sub_1158(), 0, 7 );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_15013()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    vector vVar6;
    float fVar9;
    unknown uVar10;

    vVar6 = {-44.70000000, 72.45000000, 0.20000000};
    fVar9 = 180.00000000;
    switch (l_U68)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_INIT_SCRIPT_DATA", 0 );
         /* P_INIT_GAMEPLAY_STRUCTS */ sub_15233();
         /* P_INIT_SCRIPT_VARIABLES */ sub_16517();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U68 = 2;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        if (g_U764 < 9)
        {
            if (((CUTSCENE_NAMED_IS_LOADING( "mid_10e_bus_concat" )) == 0) AND ((CUTSCENE_IS_LOADED( "mid_10e_bus_concat" )) == 0))
            {
                PRE_STREAM_SEAMLESS_CUTSCENE( "mid_10e_bus_concat" );
            }
        }
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_16964( -1204387800, ref g_U910 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_16964( g_U2104, ref g_U910 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_16964( g_U2129, ref g_U910 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_16964( g_U2130, ref g_U910 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_16964( g_U2132, ref g_U910 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_16964( g_U2133, ref g_U910 );
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19865( g_U2854, ref g_U1211 );
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19865( g_U2856, ref g_U1211 );
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19865( g_U2855, ref g_U1211 );
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_19865( g_U2857, ref g_U1211 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_21845( ref g_U1928, ref g_U1369 );
         /* P_STREAMREQ_ISEQ_INSERT */ sub_23729( -1476959292, ref g_U1272 );
         /* P_STREAMREQ_ISEQ_INSERT */ sub_23729( 689789076, ref g_U1272 );
         /* P_STREAMREQ_ISEQ_INSERT */ sub_23729( 1106596692, ref g_U1272 );
        l_U68 = 3;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if ( /* F_STREAMREQ_ALL_ASSETS_LOADED */ sub_26653( ref g_U910, ref g_U1211, ref g_U1272, ref g_U1369, ref g_U1474, ref g_U1535, ref g_U1704, ref g_U1757 ))
        {
            l_U68 = 4;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_CREATE_OBJECTS", 0 );
            break;
        }
        return;
        case 4:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_CREATE_OBJECTS", 0 );
         /* P_SETUP_SEC_GATE_BUTTON */ sub_30007( 0 );
        l_U68 = 5;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_HANDLE_CREATE_PEDS", 0 );
        break;
        case 5:
         /* P_SETUP_GIOVANNA */ sub_30744();
         /* P_CREATE_MPM_ENEMY */ sub_31568();
        l_U68 = 6;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_SETUP_START_POINT", 0 );
        break;
        case 6:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_SETUP_START_POINT", 0 );
        if (g_U764 < 9)
        {
            l_U70 = 1;
            l_U68 = 8;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_HANDLE_MID_10E_CUTSCENE", 0 );
        }
        else if ((l_U110 == 0) AND (g_U763 == 9))
        {
            l_U110 = 1;
            REMOVE_ALL_PED_WEAPONS(  /* PLAYER_PED_ID */ sub_1158() );
            if (( /* HAS_SAVEFILE_LOADED */ sub_32042( ref l_U74 )) == 0)
            {
                 /* F_GIVEPEDWEAPON */ sub_4836(  /* PLAYER_PED_ID */ sub_1158(), g_U2855, 200, 0, 0 );
            }
            l_U68 = 7;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U72 = 1;
            l_U68 = 9;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_HANDLE_MID_10E_BLENDOUT", 0 );
        }
        break;
        case 7:
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0)
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1158(), 0, 0 ) )) == 1)
            {
                l_U72 = 1;
                l_U68 = 9;
                 /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_HANDLE_MID_10E_BLENDOUT", 0 );
            }
        }
        break;
        case 8:
        if (( /* F_HANDLE_MID_10E_CUTSCENE */ sub_32536()) == 1)
        {
            l_U72 = 1;
            l_U68 = 9;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_HANDLE_MID_10E_BLENDOUT", 0 );
            break;
        }
        return;
        case 9:
        if (( /* F_HANDLE_MID_10E_BLENDOUT */ sub_34918()) == 1)
        {
            if (((IS_PED_DEAD( l_U218 )) == 0) AND ((DOES_PED_EXIST( l_U218 )) == 1))
            {
                SET_PED_CAN_TRIGGER_BULLET_CAM( l_U218, 1 );
                SET_BULLET_CAM_PREF( l_U218, "PIST_02_CUSTOM_BUS_GIOV", "PIST_02_CUSTOM_BUS_GIOV", "PIST_02_CUSTOM_BUS_GIOV", 0, 1, 0, 0, 0, 0, 0, 0, 0 );
                SET_PED_VALIDATE_BULLET_CAM_HIT( l_U218, 0 );
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
                BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
            }
            if (IS_ROBO_TESTING() == 1)
            {
                 /* P_KILL_PED */ sub_42169( l_U218 );
            }
            l_U68 = 10;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_HANDLE_OFFICE_MPM", 0 );
        }
        else
        {
            return;
        }
        break;
        case 10:
        if ((((IS_PED_DEAD( l_U218 )) == 1) AND ((DOES_PED_EXIST( l_U218 )) == 1)) || (((IS_BULLET_CAMERA_RUNNING( 0 )) == 1) AND (((IS_PED_DEAD( l_U218 )) == 0) AND ((DOES_PED_EXIST( l_U218 )) == 1))))
        {
             /* RESETTIMER */ sub_7904( ref l_U276 );
        }
        if (((IS_BULLET_CAMERA_RUNNING( 0 )) == 0) AND ((IS_BULLET_CAMERA_ACTIVE() == 0) AND (((IS_PED_DEAD( l_U218 )) == 0) AND (((DOES_PED_EXIST( g_U2595 )) == 1) AND (((IS_PED_DEAD( g_U2595 )) == 0) AND (((DOES_PED_EXIST( l_U218 )) == 1) AND (( /* ISTIMERDONE */ sub_2687( ref l_U276 )) == 1)))))))
        {
            DEACTIVATE_BULLET_TIME( 0, 0 );
            DEACTIVATE_BULLET_TIME( 1, 0 );
            DEACTIVATE_BULLET_TIME( 0, 1 );
            DEACTIVATE_BULLET_TIME( 1, 1 );
            ENABLE_MPM( 0 );
            ENABLE_ALL_ADRENALINE( 1 );
            DISPLAY_HUD( 0 );
            ENABLE_CROSSHAIR( 0 );
             /* RESETTIMER */ sub_7904( ref l_U276 );
             /* P_STREAMREQ_SCRIPT_STREAM_STOP */ sub_42601( "LBUS_13_DOOR_KICK", ref g_U1704 );
             /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_43390( "LBUS_13_DOOR_KICK", ref g_U1704 );
            if (((IS_PED_DEAD( l_U218 )) == 0) AND ((DOES_PED_EXIST( l_U218 )) == 1))
            {
                SET_PED_CAN_TRIGGER_BULLET_CAM( l_U218, 0 );
                SET_PED_PROOFS( l_U218, 1, 1, 1, 1, 1 );
                SET_PED_INVINCIBLE( l_U218, 1 );
            }
            if (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1))
            {
                SET_PED_CAN_TRIGGER_BULLET_CAM( g_U2595, 0 );
                SET_PED_PROOFS( g_U2595, 1, 1, 1, 1, 1 );
                SET_PED_INVINCIBLE( g_U2595, 1 );
            }
            AUDIO_MUSIC_SUSPEND( 5000 );
            g_U2872 = 1;
            l_U71 = 1;
            l_U69 = 2;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eFailState = FAIL_HANDLE_GIO_DEATH_MPM_FAIL", 0 );
            return;
        }
        if (l_U389 == 0)
        {
            if (((IS_PED_DEAD( l_U218 )) == 1) AND ((DOES_PED_EXIST( l_U218 )) == 1))
            {
                AUDIO_MUSIC_FORCE_TRACK( "BUSDEPOT_ACTION_SONG_03", "BUSDEPOT_03_2", "", 0.00000000, 2000, 5000, -1082130432, 0 );
                l_U389 = 1;
            }
        }
        if (((IS_BULLET_CAMERA_RUNNING( 0 )) == 1) AND ((IS_LAST_MAN_STANDING_ACTIVE() == 0) AND (((IS_PED_DEAD( g_U2595 )) == 0) AND (((DOES_PED_EXIST( g_U2595 )) == 1) AND (((IS_PED_DEAD( l_U218 )) == 1) AND ((DOES_PED_EXIST( l_U218 )) == 1))))))
        {
             /* WRITESCRIPTLOG */ sub_607( "SP", "Activate the Railshooter script...", 0 );
            DEACTIVATE_BULLET_TIME( 0, 0 );
            DEACTIVATE_BULLET_TIME( 1, 0 );
            DEACTIVATE_BULLET_TIME( 0, 1 );
            DEACTIVATE_BULLET_TIME( 1, 1 );
            ENABLE_MPM( 0 );
            ENABLE_ALL_ADRENALINE( 1 );
            g_U2871 = 1;
            if (((CUTSCENE_NAMED_IS_LOADING( "mid_10e_bus_concat" )) == 1) || ((CUTSCENE_IS_LOADED( "mid_10e_bus_concat" )) == 1))
            {
                CLEAR_NAMED_CUTSCENE( "mid_10e_bus_concat" );
            }
            l_U68 = 11;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_FINISHED", 0 );
            break;
        }
        return;
        case 11:
        if (NOT (IS_BULLET_CAMERA_RUNNING( 0 )))
        {
             /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_FINISHED", 0 );
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U68 = 0;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    return;
}

/* P_INIT_GAMEPLAY_STRUCTS */ void sub_15233()
{
     /* WRITESCRIPTLOG */ sub_607( "SP", "P_INIT_GAMEPLAY_STRUCTS", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15341( ref l_U174, -71.61896000, 46.54910000, 0.40117700, 268.65510000, -1257669444, 26, 6, 0, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15341( ref l_U205, -38.93200000, 90.61500000, 0.20000000, 163.00000000, 187757786, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15341( ref l_U221, -39.70406000, 82.69193000, 0.20012300, 0.00000000, -1257669444, 26, 6, 0, 0, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15341( ref l_U235, -40.01031000, 85.93464000, 0.20012300, 180.00000000, 187757786, 7, 3, 2, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_15677( ref l_U111, "TRIG_OFF_MPM_REMOVE_BODIES", -40.92000000, 83.90000000, -0.20000000, 12.00000000, 10.00000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_15677( ref l_U132, "Robo Killing office peds", -39.00000000, 67.33000000, 3.60000000, 5.00000000, 5.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_15677( ref l_U153, "Robo Killing security ped", -37.36000000, 71.52000000, 0.82000000, 5.00000000, 5.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CLOSEDOOR */ sub_15951( ref g_U2295, 1 );
     /* P_SETDOORAUTOCLOSE */ sub_16208( ref g_U2295, 0 );
     /* P_CLOSEDOOR */ sub_15951( ref g_U2302, 1 );
     /* P_CLOSEDOOR */ sub_15951( ref g_U2309, 1 );
     /* P_SETDOORLOCKED */ sub_16313( ref g_U2302, 1 );
     /* P_SETDOORLOCKED */ sub_16313( ref g_U2309, 1 );
     /* P_CLOSEDOOR */ sub_15951( ref g_U2316, 1 );
     /* P_CLOSEDOOR */ sub_15951( ref g_U2323, 1 );
     /* P_SETDOORLOCKED */ sub_16313( ref g_U2316, 1 );
     /* P_SETDOORLOCKED */ sub_16313( ref g_U2323, 1 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_15341(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_15677(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CLOSEDOOR */ void sub_15951(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_15977( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16061( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_15977(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_16061(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORAUTOCLOSE */ void sub_16208(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_15977( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16061( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_SETDOORLOCKED */ void sub_16313(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_15977( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16061( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* P_INIT_SCRIPT_VARIABLES */ void sub_16517()
{
     /* WRITESCRIPTLOG */ sub_607( "SP", "P_INIT_SCRIPT_DATA", 0 );
    l_U219 = 0;
    l_U220 = 0;
    l_U408 = 0;
    l_U388 = 0;
    l_U389 = 0;
    g_U2872 = 0;
    g_U2871 = 0;
     /* RESETTIMER */ sub_7904( ref l_U249 );
     /* RESETTIMER */ sub_7904( ref l_U258 );
     /* RESETTIMER */ sub_7904( ref l_U267 );
     /* RESETTIMER */ sub_7904( ref l_U394 );
     /* RESETTIMER */ sub_7904( ref l_U411 );
     /* RESETTIMER */ sub_7904( ref l_U276 );
    l_U70 = 0;
    l_U72 = 0;
    l_U73 = 0;
    l_U71 = 0;
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_16964(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_17031( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17289( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_17031(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17289( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17289( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17289( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18820( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17289( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17289( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_17289(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17350( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_17350(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_18820(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_19865(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_19919( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20180( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_19919(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20180( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20180( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20180( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18820( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20180( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20180( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_20180(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17350( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_21845(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_21897( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22149( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_21897(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22149( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22149( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22149( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18820( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22149( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22149( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_22149(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17350( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_23729(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_23790( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24040( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_23790(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24040( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24040( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24040( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24040( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_18820( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_18820( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24040( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24040( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_24040(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17350( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_ALL_ASSETS_LOADED */ int sub_26653(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    if ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_26697( uParam0 ))
    {
        if ( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_27097( uParam1 ))
        {
            if ( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_27501( uParam2 ))
            {
                if ( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_27917( uParam3 ))
                {
                    if ( /* F_STREAMREQ_VEHICLE_RECORDING_IS_LOADED */ sub_28310( uParam4 ))
                    {
                        if ( /* F_STREAMREQ_ACTION_TREE_IS_LOADED */ sub_28732( uParam5 ))
                        {
                            if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ sub_29112( uParam6 ))
                            {
                                if ( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_29500( uParam7 ))
                                {
                                    return 1;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return 0;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_26697(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_27097(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_27501(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_27917(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_VEHICLE_RECORDING_IS_LOADED */ int sub_28310(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the VEHICLE_RECORDING to be requested: {} ###", 1, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the VEHICLE_RECORDING to load: {} ###", 1, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the VEHICLE_RECORDING to be removed: {} ###", 1, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ACTION_TREE_IS_LOADED */ int sub_28732(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ int sub_29112(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_29500(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* P_SETUP_SEC_GATE_BUTTON */ void sub_30007(int iParam0)
{
    vector vVar3;
    vector vVar6;
    unknown uVar9;
    vector vVar10;
    vector vVar13;

     /* WRITESCRIPTLOG */ sub_607( "SP", "P_SETUP_SEC_GATE_BUTTON", 0 );
    vVar3 = {-37.72700000, 76.33300000, 1.27300000};
    vVar6 = {0.00000000, 0.00000000, -90.00000000};
    if (iParam0 == 0)
    {
        uVar9 = g_U2130;
    }
    else
    {
        uVar9 = g_U2129;
    }
     /* CLEANOBJECT */ sub_10224( g_U2852 );
    g_U2852 =  /* CREATEOBJECTNOOFFSET */ sub_30170( uVar9, vVar3, vVar6, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U2852 )) == 1)
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U2852, ref g_U1848 );
        FREEZE_OBJECT_POSITION( g_U2852, 1 );
    }
    vVar10 = {-37.68800000, 76.55600000, 1.22100000};
    vVar13 = {0.00000000, -77.65000000, 0.00000000};
     /* CLEANOBJECT */ sub_10224( g_U2853 );
    g_U2853 =  /* CREATEOBJECTNOOFFSET */ sub_30170( g_U2131, vVar10, vVar13, 0, 0, 0 );
    if ((DOES_OBJECT_EXIST( g_U2853 )) == 1)
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U2853, ref g_U1848 );
        FREEZE_OBJECT_POSITION( g_U2853, 1 );
        SET_OBJECT_VISIBLE( g_U2853, 0 );
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_30170(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_3661( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_SETUP_GIOVANNA */ void sub_30744()
{
     /* WRITESCRIPTLOG */ sub_607( "SP", "P_SETUP_GIOVANNA", 0 );
    if ((((IS_PED_DEAD( g_U2595 )) == 1) AND ((DOES_PED_EXIST( g_U2595 )) == 1)) || ((DOES_PED_EXIST( g_U2595 )) == 0))
    {
         /* CLEANPED */ sub_3390( g_U2595 );
        g_U2595 =  /* CREATEPED */ sub_3479( ref l_U174 );
         /* P_SETUP_GIO_ATTRIBUTES */ sub_30876();
         /* P_SET_PED_INACTIVE */ sub_31315( g_U2595, 0 );
        SET_ROOM_FOR_PED_BY_NAME( g_U2595, ref g_U1832 );
    }
    return;
}

/* P_SETUP_GIO_ATTRIBUTES */ void sub_30876()
{
     /* WRITESCRIPTLOG */ sub_607( "SP", "P_SETUP_GIO_ATTRIBUTES", 0 );
    if (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1))
    {
        SET_PED_NAME_DEBUG( g_U2595, "piGiovanna" );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2595, 1 );
        SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( g_U2595, 0 );
        SET_PED_ONLY_DAMAGED_BY_PLAYER( g_U2595, 1 );
        SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U2595, 1 );
        SET_PED_CAN_PUSH_PLAYER( g_U2595, 1 );
        SET_PED_GORE_FROM_PLAYER( g_U2595, 1 );
        SET_PED_GORE_FROM_NPC( g_U2595, 0 );
        SET_PED_CAN_BE_TARGETTED( g_U2595, 0 );
        SET_PED_AS_ONE_SHOT_KILL( g_U2595, 1 );
        SET_PED_CAN_TRIGGER_BULLET_CAM( g_U2595, 1 );
        SET_BULLET_CAM_PREF( g_U2595, "QUICKCUT_FAILSAFE_01", "QUICKCUT_FAILSAFE_01", "QUICKCUT_FAILSAFE_01", "QUICKCUT_FAILSAFE_01", 1, 0, 0, 0, 0, 0, 0, 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0)
        {
            SET_PED_PRIMARY_LOOKAT( g_U2595,  /* PLAYER_PED_ID */ sub_1158() );
            SET_PED_DEFAULT_AIM_AT_PED( g_U2595,  /* PLAYER_PED_ID */ sub_1158() );
        }
    }
    return;
}

/* P_SET_PED_INACTIVE */ void sub_31315(unknown uParam0, boolean bParam1)
{
     /* WRITESCRIPTLOG */ sub_607( "SP", "P_SET_PED_INACTIVE", 0 );
    if (bParam1)
    {
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( uParam0, 1 );
            SET_PED_VISIBLE( uParam0, 0 );
            SET_PED_INVINCIBLE( uParam0, 1 );
            FREEZE_PED_POSITION( uParam0, 1 );
            SET_PED_COLLISION( uParam0, 0 );
        }
    }
    else if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_INVINCIBLE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
    }
    return;
}

/* P_CREATE_MPM_ENEMY */ void sub_31568()
{
     /* WRITESCRIPTLOG */ sub_607( "SP", "P_CREATE_MPM_ENEMY", 0 );
     /* CLEANPED */ sub_3390( l_U218 );
    l_U218 =  /* CREATEPED */ sub_3479( ref l_U205 );
    if (((IS_PED_DEAD( l_U218 )) == 0) AND ((DOES_PED_EXIST( l_U218 )) == 1))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218, 1 );
        SET_PED_PATH_CAN_DROP_FROM_HEIGHT( l_U218, 0 );
        SET_PED_PATH_CAN_USE_CLIMBOVERS( l_U218, 0 );
        SET_PED_AS_ONE_SHOT_KILL( l_U218, 1 );
        SET_PED_FREEZE_PROCESSING( l_U218, 1 );
        REGISTER_PED_SHOT_TUNING_SPECIAL01( l_U218 );
         /* F_GIVEPEDWEAPON */ sub_4836( l_U218, g_U2855, 25000, 0, 0 );
    }
    return;
}

/* HAS_SAVEFILE_LOADED */ int sub_32042(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_607( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_10582( uParam0,  /* PLAYER_PED_ID */ sub_1158() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* F_HANDLE_MID_10E_CUTSCENE */ int sub_32536()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    int iVar6;

    switch (l_U70)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eCutsceneState = CUTSCENE_SETUP", 0 );
        if (((CUTSCENE_NAMED_IS_LOADING( "mid_10e_bus_concat" )) == 0) AND ((CUTSCENE_IS_LOADED( "mid_10e_bus_concat" )) == 0))
        {
            PRE_STREAM_SEAMLESS_CUTSCENE( "mid_10e_bus_concat" );
        }
        AUDIO_MUSIC_STOP_ONESHOT();
        AUDIO_MUSIC_REQUEST_ONESHOT( "BUSDEPOT_ONESHOT_11", 0 );
        l_U70 = 2;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eCutsceneState = CUTSCENE_LOADING", 0 );
        break;
        case 2:
        if ((CUTSCENE_IS_LOADED( "mid_10e_bus_concat" )) == 1)
        {
            l_U70 = 3;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eCutsceneState = CUTSCENE_WAIT_FOR_HANDOFF", 0 );
            break;
        }
        return 0;
        case 3:
        if (g_U2870 == 1)
        {
            l_U70 = 4;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eCutsceneState = CUTSCENE_START", 0 );
            break;
        }
        return 0;
        case 4:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eCutsceneState = CUTSCENE_START", 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0)
        {
            CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_1158(), l_U390, l_U393 );
            CUTSCENE_REGISTER_PED_ACTION_INTENTION(  /* PLAYER_PED_ID */ sub_1158(), 47, -1, 0.00000000, 0.00000000, 0.00000000 );
            ISEQ_REGISTER_ENTITY( 689789076, "player",  /* PLAYER_PED_ID */ sub_1158(), 0 );
        }
        if (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1))
        {
            REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2595, "Giov_Bus", 0 );
            CUTSCENE_REGISTER_PED_TELEPORT( g_U2595, l_U423, l_U426 );
            ISEQ_REGISTER_ENTITY( -1476959292, "gio", g_U2595, 0 );
        }
        if (((IS_PED_DEAD( l_U218 )) == 0) AND ((DOES_PED_EXIST( l_U218 )) == 1))
        {
            SET_PED_FREEZE_PROCESSING( l_U218, 0 );
            REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U218, "M_Crac_Sold_OF", 0 );
            CUTSCENE_REGISTER_PED_TELEPORT( l_U218, l_U427, l_U430 );
            uVar3 = GET_WEAPON_FROM_HAND( l_U218, 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
            {
                REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar3, "W_SB_Uzi_Aa_H", 0 );
            }
            ISEQ_REGISTER_ENTITY( -1476959292, "enemy", l_U218, 0 );
        }
        CUTSCENE_REGISTER_ISEQ( 689789076 );
        CUTSCENE_REGISTER_ISEQ( -1476959292 );
        REGISTER_HIDE_ENTITY_AT_POSITION( g_U2302._fU0, g_U2302._fU4 );
        REGISTER_HIDE_ENTITY_AT_POSITION( g_U2309._fU0, g_U2309._fU4 );
        START_SEAMLESS_CUTSCENE();
        l_U70 = 5;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eCutsceneState = CUTSCENE_FIRST_FRAME", 0 );
        break;
        case 5:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eCutsceneState = CUTSCENE_FIRST_FRAME", 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0)
        {
            uVar2 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_33746();
            if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
            {
                SET_WEAPON_AMMO_IN_CLIP( uVar2, 10 );
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_1158(), uVar2, 0, 1 );
            }
        }
        AUDIO_MUSIC_FORCE_TRACK( "BUSDEPOT_ACTION_SONG_03", "BUSDEPOT_03_2", "", 0.00000000, 5000, 5000, -1082130432, 0 );
        DO_SCREEN_FADE_IN( 0 );
        l_U70 = 6;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eCutsceneState = CUTSCENE_PLAYING", 0 );
        break;
        case 6:
        if (HAS_CUTSCENE_FINISHED() == 1)
        {
            if (((CUTSCENE_NAMED_IS_LOADING( "mid_10e_bus_concat" )) == 1) || ((CUTSCENE_IS_LOADED( "mid_10e_bus_concat" )) == 1))
            {
                CLEAR_NAMED_CUTSCENE( "mid_10e_bus_concat" );
            }
            l_U70 = 0;
             /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eCutsceneState = CUTSCENE_IDLE", 0 );
            return 1;
        }
        else
        {
            uVar4 = GET_CUTSCENE_SECTION_PLAYING();
            uVar5 = GET_CUTSCENE_TIME();
            iVar6 = GET_CUTSCENE_TIME_MS();
            PRINTSTRING( "[SP] SECTION: " );
            PRINTINT( uVar4 );
            PRINTSTRING( " Time: " );
            PRINTINT( uVar5 );
            PRINTSTRING( " Time MS: " );
            PRINTINT( iVar6 );
            PRINTNL();
            if (l_U388 == 0)
            {
                if (iVar6 >= 9000)
                {
                    if ((AUDIO_MUSIC_IS_ONESHOT_PREPARED( "BUSDEPOT_ONESHOT_11" )) == 1)
                    {
                        AUDIO_MUSIC_PLAY_ONESHOT();
                        AUDIO_MUSIC_FORCE_TRACK( "BUSDEPOT_ACTION_SONG_03", "BUSDEPOT_03_2_4", "", 0.00000000, 1000, 6000, -1082130432, 0 );
                    }
                    l_U388 = 1;
                }
            }
        }
        break;
    }
    return 0;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_33746()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1158(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_33850( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1158(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1158(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1158(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_33850(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* F_HANDLE_MID_10E_BLENDOUT */ int sub_34918()
{
    unknown uVar2;
    unknown uVar3;

    switch (l_U72)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eBlendState = BLEND_SETUP", 0 );
         /* NIS_PRE_SETUP */ sub_2134( 1, 0, 0, 1 );
         /* P_OPENDOOR */ sub_35070( ref g_U2295, 0, 1, 1065353216 );
        DOOR_FIND_CLOSEST_ACTIVATE_SPATIAL_DATA( g_U2302._fU0, g_U2302._fU4, 0 );
        DOOR_FIND_CLOSEST_ACTIVATE_SPATIAL_DATA( g_U2309._fU0, g_U2309._fU4, 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0)
        {
            uVar2 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_33746();
            if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
            {
                SET_WEAPON_AMMO_IN_CLIP( uVar2, 10 );
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_1158(), uVar2, 0, 1 );
            }
        }
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0)
        {
            uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1158(), 2 );
            if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
            {
                SET_WEAPON_VISIBLE( uVar3, 1 );
            }
        }
        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1196() )) == 0))
        {
            PED_SET_ACTION_INTENTION(  /* PLAYER_PED_ID */ sub_1158(), 47, -1, 0.00000000, 0.00000000, 0.00000000 );
        }
        if ((ISEQ_QUERY_STATE( 689789076, 3 )) == 0)
        {
             /* TELEPORTPED */ sub_5247(  /* PLAYER_PED_ID */ sub_1158(), l_U390, l_U393 );
            ISEQ_REGISTER_ENTITY( 689789076, "player",  /* PLAYER_PED_ID */ sub_1158(), 0 );
            ISEQ_START( 689789076 );
        }
        if ((ISEQ_QUERY_STATE( -1476959292, 3 )) == 0)
        {
             /* TELEPORTPED */ sub_5247( g_U2595, l_U423, l_U426 );
            if (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1))
            {
                SET_ROOM_FOR_PED_BY_NAME( g_U2595, ref g_U1848 );
            }
             /* TELEPORTPED */ sub_5247( l_U218, l_U427, l_U430 );
            if (((IS_PED_DEAD( l_U218 )) == 0) AND ((DOES_PED_EXIST( l_U218 )) == 1))
            {
                SET_ROOM_FOR_PED_BY_NAME( l_U218, ref g_U1848 );
                SET_PED_FREEZE_PROCESSING( l_U218, 0 );
            }
            ISEQ_REGISTER_ENTITY( -1476959292, "gio", g_U2595, 0 );
            ISEQ_REGISTER_ENTITY( -1476959292, "enemy", l_U218, 0 );
            ISEQ_START( -1476959292 );
        }
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        CAMERA_PLAY_ANIMATED( "LEVEL_S_BUS_CP_05", "BUS_OFFICE_MPM_PSTL_FWD_CAM", 1, l_U404, l_U407, 0, 0 );
        AUDIO_MUSIC_FORCE_TRACK( "BUSDEPOT_ACTION_SONG_03", "BUSDEPOT_03_2_4", "", 0.00000000, 1000, 6000, -1082130432, 0 );
         /* P_OPENDOOR */ sub_35070( ref g_U2302, 1, 1, 1065353216 );
         /* P_OPENDOOR */ sub_35070( ref g_U2309, 0, 1, 1065353216 );
         /* P_CLOSEDOOR */ sub_15951( ref g_U2295, 1 );
         /* P_OPENDOOR */ sub_35070( ref g_U2295, 0, 1, 1065353216 );
         /* CREATETIMER */ sub_2324( ref l_U394, l_U403, 1, 0 );
         /* STARTTIMER */ sub_2474( ref l_U394 );
         /* CREATETIMER */ sub_2324( ref l_U276, l_U285, 1, 0 );
         /* STARTTIMER */ sub_2474( ref l_U276 );
        l_U72 = 4;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eBlendState = BLEND_FIRST_FRAME", 0 );
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eBlendState = BLEND_FIRST_FRAME", 0 );
        DO_SCREEN_FADE_IN( 0 );
        if ((l_U74._fU0 == 0) || (g_U764 < 9))
        {
            g_U764 = 9;
             /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_36248( ref l_U74, g_U764,  /* PLAYER_PED_ID */ sub_1158(), g_U2339[9], g_U2466[9], g_U2509[9], g_U2552[9], 1 );
        }
         /* P_START_CHECKPOINT_THREAD */ sub_40853( ref g_U765[10] );
        l_U72 = 5;
         /* WRITESCRIPTLOG */ sub_607( "SP", "eMid10eBlendState = BLEND_PLAYING", 0 );
        break;
        case 5:
        SET_CAM_SIDE_LEFT( 0 );
        if (( /* ISTIMERDONE */ sub_2687( ref l_U394 )) == 1)
        {
            if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1196() )) == 0))
            {
                ENABLE_MPM( 1 );
                ENABLE_ALL_ADRENALINE( 0 );
                ENABLE_CROSSHAIR( 0 );
                DISPLAY_HUD( 1 );
                SET_CROSSHAIR_PULSE();
                if (GET_ADRENALINE_AMT() < 0.10000000)
                {
                    SET_ADRENALINE_AMT( 0.10000000 );
                }
                SET_PED_CONSUMING_AMMO(  /* PLAYER_PED_ID */ sub_1158(), 0 );
                ACTIVATE_BULLET_TIME( 0, 1065353216, 1 );
                 /* P_MPM_LIMIT_PLAYER_ACTIONS */ sub_41119();
                SIMULATE_PLAYER_INPUT_GAIT( GET_PLAYER_ID(), 3, l_U422, 0 );
            }
        }
        if (l_U408 == 0)
        {
            if (IS_ANIMATED_CAMERA_PLAYING() == 1)
            {
                if (CAMERA_ANIMATED_CURRENT_TIME() >= l_U409)
                {
                    SET_GAMEPLAY_CAM_RELATIVE_HEADING( l_U420, 1065353216, 0 );
                    SET_GAMEPLAY_CAM_RELATIVE_PITCH( l_U421, 1065353216, 0 );
                    CAMERA_ANIMATED_STOP( l_U410, 1 );
                     /* CREATETIMER */ sub_2324( ref l_U411, l_U410, 1, 0 );
                     /* STARTTIMER */ sub_2474( ref l_U411 );
                    l_U408 = 1;
                }
            }
        }
        if (( /* ISTIMERDONE */ sub_2687( ref l_U411 )) == 1)
        {
             /* NIS_POST_SETUP */ sub_41505( 1, 1 );
            if (((IS_PED_DEAD( g_U2595 )) == 0) AND ((DOES_PED_EXIST( g_U2595 )) == 1))
            {
                PED_SET_ACTION_INTENTION( g_U2595, 47, 1000, 0.00000000, 0.00000000, 0.00000000 );
            }
            if (((IS_PED_DEAD( l_U218 )) == 0) AND ((DOES_PED_EXIST( l_U218 )) == 1))
            {
                PED_SET_ACTION_INTENTION( l_U218, 47, 1000, 0.00000000, 0.00000000, 0.00000000 );
            }
            l_U72 = 0;
            return 1;
        }
        break;
    }
    return 0;
}

/* P_OPENDOOR */ void sub_35070(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if (( /* F_DOESDOOREXIST */ sub_15977( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_16061( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_36248(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_607( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_607( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_13409( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_36539( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_37016( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_37016( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37276( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_37016( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37276( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37276( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_37016( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37276( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37276( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37276( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_37016( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37276( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37276( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37276( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_37276( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_38856( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_607( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_36539(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_10863( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_607( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_607( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_37016(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_37276(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_38856(int iParam0)
{
     /* WRITE_STRING */ sub_3778( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_38944( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_39021( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_39021( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_39021( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_39021( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_39021( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_39891( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU52 );
     /* WRITE_STRING */ sub_3778( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU96 );
     /* WRITE_STRING */ sub_3778( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU100 );
     /* WRITE_STRING */ sub_3778( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU104 );
     /* WRITE_STRING */ sub_3778( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU108 );
     /* WRITE_STRING */ sub_3778( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU112 );
     /* WRITE_STRING */ sub_3778( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU116 );
     /* WRITE_STRING */ sub_3778( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU120 );
     /* WRITE_STRING */ sub_3778( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU124 );
     /* WRITE_STRING */ sub_3778( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU128 );
     /* WRITE_STRING */ sub_3778( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_39190( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_39190( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_39190( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_38944(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_39021(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_39190(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_39891(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_START_CHECKPOINT_THREAD */ void sub_40853(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* P_MPM_LIMIT_PLAYER_ACTIONS */ void sub_41119()
{
     /* WRITESCRIPTLOG */ sub_607( "SP", "P_MPM_LIMIT_PLAYER_ACTIONS", 0 );
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1196() )) == 0))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1196(), 0, 0 );
        REENABLE_PLAYER_INPUT( 4 );
        REENABLE_PLAYER_INPUT( 6 );
        REENABLE_PLAYER_INPUT( 14 );
        REENABLE_PLAYER_INPUT( 15 );
        REENABLE_PLAYER_INPUT( 16 );
        REENABLE_PLAYER_INPUT( 17 );
        REENABLE_PLAYER_INPUT( 10 );
        REENABLE_PLAYER_INPUT( 11 );
        REENABLE_PLAYER_INPUT( 12 );
        REENABLE_PLAYER_INPUT( 13 );
        REENABLE_PLAYER_INPUT( 13 );
    }
    return;
}

/* NIS_POST_SETUP */ void sub_41505(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1196(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1158(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_41603();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_41603()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1158() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1158(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1158(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1158(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1158(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_KILL_PED */ void sub_42169(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_STOP */ void sub_42601(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_42651( uParam0, uParam1 ))
    {
        iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_42860( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            DISPLAYF( "[CCB]### Stopping the SCRIPT_STREAM: {} ###", 1, 1281, ref (uParam1^)[iVar4]._fU0 );
            STOP_SCRIPT_STREAM( iVar4 );
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam0 );
            SCRIPT_ASSERT( "Attempting to stop a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam0 );
        DISPLAYF( "Attempting to stop a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ int sub_42651(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB]### The SCRIPT_STREAM is loaded: {} ###", 1, 1281, ref (uParam1^)[I]._fU0 );
                return 1;
            }
        }
    }
    return 0;
}

/* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ int sub_42860(unknown uParam0, unknown uParam1)
{
    int Result;

    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
        {
            return Result;
        }
    }
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ void sub_43390(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_9153( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a SCRIPT_STREAM asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_UNLOAD_ASSETS */ void sub_44590()
{
     /* WRITESCRIPTLOG */ sub_607( "SP", "P_UNLOAD_ASSETS", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_44656( g_U2129, ref g_U910 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_44656( g_U2130, ref g_U910 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_44656( g_U2132, ref g_U910 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_44656( g_U2133, ref g_U910 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_45154( ref g_U1928, ref g_U1369 );
    ISEQ_UNREGISTER_ENTITY( -1476959292, "gio" );
    ISEQ_UNREGISTER_ENTITY( -1476959292, "enemy" );
    ISEQ_TERMINATE( -1476959292 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_9015( -1476959292, ref g_U1272 );
    ISEQ_UNREGISTER_ENTITY( 689789076, "player" );
    ISEQ_TERMINATE( 689789076 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_9015( 689789076, ref g_U1272 );
    ISEQ_UNREGISTER_ENTITY( 1106596692, "gio" );
    ISEQ_UNREGISTER_ENTITY( 1106596692, "enemy" );
    ISEQ_TERMINATE( 1106596692 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_9015( 1106596692, ref g_U1272 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_44656(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_9153( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_45154(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_9153( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

