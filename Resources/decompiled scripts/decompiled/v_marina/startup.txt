void main()
{
    g_U0 = 2;
    g_U1 = 4;
    g_U2 = 5;
    g_U3 = 7;
    g_U4 = 120000;
    g_U5 = 180000;
    g_U6 = 6000;
    g_U7 = 3000;
    g_U8 = 1500;
    g_U9 = 64036;
    g_U10 = 64036;
    g_U11 = 11;
    g_U12 = -6;
    g_U13 = -3;
    g_U14 = 3;
    g_U15 = 4;
    g_U16 = 30000;
    g_U17 = 90;
    g_U18 = 10;
    g_U19 = 5;
    g_U20 = 2;
    g_U21 = 1;
    g_U22 = 2;
    g_U23 = 5;
    g_U24 = 10;
    g_U25 = 10;
    g_U26 = 3;
    g_U27 = 10000;
    g_U28 = 10000;
    g_U29 = 400;
    g_U30 = 10000;
    g_U31 = 5.00000000;
    g_U32 = 100;
    g_U33 = 0.05000000;
    g_U34 = 1150;
    g_U35 = 50;
    g_U36 = 70;
    g_U37 = 100;
    g_U38 = 200;
    g_U39 = 250;
    g_U40 = 300;
    g_U41 = 3;
    g_U42 = 5;
    g_U43 = 10;
    g_U44 = 15;
    g_U45 = 20;
    g_U46 = 25;
    g_U47 = 50;
    g_U48 = 100;
    g_U49 = 150;
    g_U50 = 200;
    g_U51 = 5;
    g_U52 = 50;
    g_U53 = 250;
    g_U54 = 2500;
    g_U55 = 4000;
    g_U56 = 6000;
    g_U57 = 10000;
    g_U58 = 6000;
    g_U59 = 20000;
    g_U60 = 2.50000000;
    g_U61 = 10000;
    g_U62 = 3.50000000;
    g_U63 = 6;
    g_U64 = 1;
    g_U65 = 10000;
    g_U66 = 20000;
    g_U67 = 10000;
    g_U68 = 20000;
    g_U69 = 20000;
    g_U70 = 50;
    g_U71 = 20000;
    g_U72 = 10000;
    g_U73 = 30000;
    g_U74 = 20000;
    g_U75 = 10000;
    g_U76 = 20000;
    g_U77 = 20.00000000;
    g_U78 = 10;
    g_U79 = 1500;
    g_U80 = 10;
    g_U81 = 5;
    g_U82 = 10;
    g_U83 = 20;
    g_U84 = 10;
    g_U85 = 10;
    g_U86 = 20;
    g_U87 = 25;
    g_U88 = 10;
    g_U89 = 20;
    g_U90 = 5000;
    g_U91 = 20;
    g_U92 = 10;
    g_U93 = 10;
    g_U94 = 20;
    g_U95 = 30;
    g_U96 = 20;
    g_U97 = 25;
    g_U98 = 10;
    g_U99 = 10;
    g_U100 = 20;
    g_U101 = 10;
    g_U102 = 15;
    g_U103 = 15;
    g_U104 = 10;
    g_U105 = 5;
    g_U106 = 10;
    g_U107 = 5;
    g_U108 = 30;
    g_U109 = 20;
    g_U110 = 10;
    g_U111 = 5;
    g_U112 = 0.33334000;
    g_U113 = 1.00000000;
    g_U114 = 0.11111000;
    g_U115 = 0.20000000;
    g_U116 = 0.10000000;
    g_U2620 = 0;
    g_U2621 = -1;
    g_U2645 = -1;
    g_U4631 = 0;
    g_U4635 = 0;
    StrCopy( ref g_U4653, " ", 64 );
    g_U4669 = 0;
    g_U5253 = 0;
    g_U5275 = -1;
    g_U5277 = -1;
    g_U5447 = 1;
    g_U5452 = 10;
    g_U5453 = 20;
    g_U5454 = 30;
    g_U5455 = 10;
    g_U5456 = 10;
    g_U5457 = 10;
    g_U5458 = 10;
    g_U5459 = 10;
    g_U5460 = 20;
    g_U5461 = 10;
    g_U5462 = 30;
    g_U5463 = 10;
    g_U5464 = 10;
    g_U5465 = 20;
    g_U5466 = 10;
    g_U5467 = 20;
    g_U5468 = 10;
    g_U5469 = 5;
    g_U5470 = 20;
    g_U5471 = 50;
    g_U5472 = 10;
    g_U5473 = 20;
    g_U5474 = 10;
    g_U5475 = 5;
    g_U5476 = 20;
    g_U5477 = 20;
    g_U5478 = 50;
    g_U5479 = 100;
    g_U5480 = 125;
    g_U5481 = 15;
    g_U5482 = 30;
    g_U5483 = 50;
    g_U5484 = 100;
    g_U5485 = 100;
    g_U5486 = 10;
    g_U5487 = 20;
    g_U5488 = 20;
    g_U5489 = 20;
    g_U5490 = 5;
    g_U5491 = 25;
    g_U5492 = 20;
    g_U5493 = 20;
    g_U5494 = 10;
    g_U5495 = 20;
    g_U5496 = 20;
    g_U5497 = 20;
    g_U5498 = 10;
    g_U5499 = 10;
    g_U5500 = 20;
    g_U5501 = 75;
    g_U5502 = 75;
    g_U5503 = 200;
    g_U5504 = 200;
    g_U5505 = 20;
    g_U5506 = 10;
    g_U5507 = 10;
    g_U5508 = 200;
    g_U5509 = 25;
    g_U5510 = 25;
    g_U5511 = 75;
    g_U5512 = 150;
    g_U5513 = 0.20000000;
    g_U5514 = 0.20000000;
    g_U5515 = 0.10000000;
    g_U5516 = 0.10000000;
    g_U5517 = 0.10000000;
    g_U5518 = 0.10000000;
    g_U5519 = 0.10000000;
    g_U5520 = GET_STREAM_PED_PACK_ID( -1126833125 );
    g_U5521 = -1;
    g_U5522 = g_U2645;
    g_U5623 = 0;
    g_U5816 = -1;
    g_U5819 = 0;
    g_U5935 = 300;
    g_U5936 = 250;
    g_U5937 = 200;
    g_U5938 = 175;
    g_U5939 = 150;
    g_U5940 = 100;
    g_U5941 = 80;
    g_U5942 = 70;
    g_U5943 = 60;
    g_U5944 = 50;
    g_U5945 = 60;
    g_U5946 = 45;
    g_U5947 = 30;
    g_U5948 = 20;
    g_U5949 = 10;
    g_U5950 = 250;
    g_U6018 = 1;
    g_U6201 = -10;
    g_U6202 = -10;
    g_U6203 = -10;
    g_U6204 = -10;
    g_U6207 = 0;
    g_U6502 = 1;
     /* SEV_MP_INITLEVELDATA */ sub_1551();
    CREATE_PLAYER_WITH_AVATAR( NETWORK_GET_AVATAR_SELECTED_DEATHMATCH_SLOT_HASH(), 0, 0, 65486, 1 );
    SET_CAM_VIEW_MODE( 1 );
     /* VS_SP_MAIN */ sub_8133();
    return;
}

/* SEV_MP_INITLEVELDATA */ void sub_1551()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    int I;
    unknown uVar9;
    int iVar10;

    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData()", 0 );
    NETWORK_DUMP_STORED_QUERIES();
    NETWORK_REQUIRE_STORED_QUERIES( "common:/data/networkleveldata_queries.txt" );
    g_U6208 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 0, 0, 0 );
    g_U6210 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 3, 0, 0 );
    g_U6216 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 10, 0, 0 );
    g_U6211 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 20, 0, 0 );
    g_U6214 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 22, 0, 0 );
    g_U6215 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 2, 0, 0 );
    g_U6213 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 51, 0, 0 );
    g_U6212 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 24, 0, 0 );
    g_U6209 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 42, 0, 0 );
    g_U6217 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 14, 0, 0 );
    uVar7 =  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 38, 0, 0 );
     /* SEV_MP_GETTIMEOFDAYSETTINGSBYNODE */ sub_2412( uVar7, ref uVar2, ref uVar3 );
    SET_TIME_OF_DAY( uVar2, 0 );
    FREEZE_TIME_OF_DAY( uVar2, 0 );
    CLEAR_WEATHER_TYPE_PERSIST();
    g_U4463 = {uVar3};
    SET_WEATHER_TYPE_NOW_PERSIST( ref g_U4463 );
    DISPLAYF( "sev_mp_InitLevelData() Setting default weather to hour {} and weather {}", 2, 513, uVar2, 1281, ref g_U4463 );
     /* SEV_MP_GETLEVELNAMES */ sub_2678( ref g_U4189._fU16, ref g_U4189._fU0 );
    g_U4189._fU32 = GET_HASH_KEY( ref g_U4189._fU16 );
     /* HUD_SCOREBOARD_SETARENA */ sub_2814( ref g_U4189._fU16 );
     /* SEV_MP_INITLEVELVEHICLES */ sub_2858();
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} spawn points loaded", 1, 513, g_U6208 );
    for ( I = 0; I < g_U6208; I++ )
    {
        uVar9 =  /* SEV_MP_GETSPAWNPOINTNODE */ sub_5518( I );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Spawn point {} is named {}{} and is at position {}", 4, 513,  /* SEV_MP_GETSPAWNPOINTINDEXBYNODE */ sub_5670( uVar9 ), 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uVar9 ), 1281, ref g_U3274, 1027,  /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3028( uVar9 ) );
    }
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} spawn point groups loaded", 1, 513, g_U6210 );
    for ( I = 0; I < g_U6210; I++ )
    {
        uVar9 =  /* SEV_MP_GETSPGROUPNODE */ sub_5891( I );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Spawn point group {} is named {}{} and has {} spawnpoints", 4, 513, I, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uVar9 ), 1281, ref g_U3274, 513,  /* SEV_MP_GETLEVELDATASIZEBYNODE */ sub_6096( uVar9, "PlayerSpawnGroupMember" ) );
    }
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} cutscene groups loaded", 1, 513, g_U6216 );
    for ( I = 0; I < g_U6216; I++ )
    {
        uVar9 =  /* SEV_MP_GETCUTSCENEGROUPNODE */ sub_6380( I );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Cutscene group {} is named {}{} and has {} marks", 4, 513, I, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uVar9 ), 1281, ref g_U3274, 513,  /* SEV_MP_GETLEVELDATASIZEBYNODE */ sub_6096( uVar9, "CutsceneGroupMember" ) );
    }
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} territories points loaded", 1, 513, g_U6211 );
    for ( I = 0; I < g_U6211; I++ )
    {
        uVar9 =  /* SEV_MP_GETTERRITORYNODE */ sub_6707( I );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Territory {} is named {}{} and is at position {}", 4, 513, I, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uVar9 ), 1281, ref g_U3274, 1027,  /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3028( uVar9 ) );
    }
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} pickups loaded", 1, 513, g_U6214 );
    for ( I = 0; I < g_U6214; I++ )
    {
        uVar9 =  /* SEV_MP_GETPICKUPNODE */ sub_6997( I );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Pickup {} is named {}{} and is at position {}", 4, 513, I, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uVar9 ), 1281, ref g_U3274, 1027,  /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3028( uVar9 ) );
    }
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} spawn beacons loaded", 1, 513, g_U6215 );
    for ( I = 0; I < g_U6215; I++ )
    {
        uVar9 =  /* SEV_MP_GETSPAWNBEACONNODE */ sub_7287( I );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Spawn beacon {} is at position {} with radius {}", 3, 513, I, 1027,  /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3028( uVar9 ), 769,  /* SEV_MP_GETLEVELDATARADIUSBYNODE */ sub_7455( uVar9 ) );
    }
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} locations loaded", 1, 513, g_U6212 );
    for ( I = 0; I < g_U6212; I++ )
    {
        uVar9 =  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 24, I, 0 );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Location {} is at position {} with radius {}", 3, 513, I, 1027,  /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3028( uVar9 ), 769,  /* SEV_MP_GETLEVELDATARADIUSBYNODE */ sub_7455( uVar9 ) );
    }
    iVar10 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 85, 0, 0 );
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} GW Stories loaded", 1, 513, iVar10 );
    for ( I = 0; I < iVar10; I++ )
    {
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Story {} has {} nodes", 2, 513, I, 513,  /* SEV_MP_GETLEVELDATASIZEBYNODE */ sub_6096(  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 85, I, 0 ), "StoryNodes/StoryNode" ) );
    }
    return;
}

/* SEV_MP_GETLEVELDATASIZEFROMQUERY */ void sub_1691(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return  /* SEV_MP_GETLEVELDATASIZEFROMQUERYBYNODE */ sub_1747( g_U2645, uParam0, uParam1, uParam2 );
}

/* SEV_MP_GETLEVELDATASIZEFROMQUERYBYNODE */ void sub_1747(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown Result;

    Result = NETWORK_LEVEL_DATA_RUN_STORED_QUERY_COUNT( uParam0, uParam1, uParam2, uParam3 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataSizeFromQueryByNode() for query #{}, params {} and {}, and node {} is {}", 5, 513, uParam1, 513, uParam2, 513, uParam3, 1793, uParam0, 513, Result );
    return Result;
    return NETWORK_LEVEL_DATA_RUN_STORED_QUERY_COUNT( uParam0, uParam1, uParam2, uParam3 );
}

/* SEV_MP_GETLEVELDATANODE */ void sub_2121(unknown uParam0, unknown uParam1, unknown uParam2)
{
    unknown Result;

    Result = NETWORK_LEVEL_DATA_RUN_STORED_QUERY_NODE( g_U2645, uParam0, uParam1, uParam2 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataNode() Query #{} with params {} and {} returned node ", 6, 513, uParam0, 513, uParam1, 513, uParam2, 1793, Result, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( Result ), 1281, ref g_U3274 );
    return Result;
}

/* SEV_MP_GETLEVELDATANAMEBYNODE */ string sub_2290(unknown uParam0)
{
    if (NOT (NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 64, ref g_U3274, ":name", uParam0 )))
    {
        StrCopy( ref g_U3274, "", 64 );
    }
    return "";
}

/* SEV_MP_GETTIMEOFDAYSETTINGSBYNODE */ int sub_2412(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NETWORK_LEVEL_DATA_GET_INT_FROM_NODE( uParam1, ":hour", uParam0 ))
    {
        if (NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 16, uParam2, ":weather", uParam0 ))
        {
            return 1;
        }
    }
    return 0;
}

/* SEV_MP_GETLEVELNAMES */ void sub_2678(unknown uParam0, unknown uParam1)
{
    unknown uVar4;

    uVar4 =  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 30, 0, 0 );
    NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 16, uParam0, ":levelName", uVar4 );
    NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 16, uParam1, ":levelNameShort", uVar4 );
    return;
}

/* HUD_SCOREBOARD_SETARENA */ void sub_2814(unknown uParam0)
{
    return;
}

/* SEV_MP_INITLEVELVEHICLES */ void sub_2858()
{
    int iVar2;
    int iVar3;
    int J;
    int I;
    unknown uVar6;
    unknown uVar7;
    int iVar8;
    int iVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int iVar13;
    int iVar14;
    unknown uVar15;
    char[32] cVar16;
    int iVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    char[32] cVar28;

    DISPLAYF( "sev_mp_InitLevelVehicles() Loading {} vehicles", 1, 513, g_U6209 );
    for ( J = 0; J < g_U6209; J++ )
    {
        iVar2 =  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 42, J, 0 );
        if (iVar2 != g_U2645)
        {
            if (NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( ref uVar6, ":model", iVar2 ))
            {
                uVar10 = { /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3028( iVar2 )};
                uVar15 =  /* SEV_MP_GETLEVELDATAHEADINGBYNODE */ sub_3190( iVar2 );
                if (NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE( ref uVar7, ":autospawn", iVar2 ))
                {
                    iVar13 =  /* INT_TO_BOOL */ sub_3379( uVar7 );
                }
                else
                {
                    iVar13 = 0;
                }
                if (NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE( ref uVar7, ":nodestroy", iVar2 ))
                {
                    iVar14 =  /* INT_TO_BOOL */ sub_3379( uVar7 );
                }
                else
                {
                    iVar14 = 0;
                }
                if (NOT (NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 32, ref cVar16, ":milo", iVar2 )))
                {
                    StrCopy( ref cVar16, "", 32 );
                }
                if (NOT (NETWORK_LEVEL_DATA_GET_INT_FROM_NODE( ref iVar9, ":colour", iVar2 )))
                {
                    iVar9 = -1;
                }
                if (NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE( ref uVar7, ":frozen", iVar2 ))
                {
                    iVar24 =  /* INT_TO_BOOL */ sub_3379( uVar7 );
                }
                else
                {
                    iVar24 = 0;
                }
                if (NOT (NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 32, ref cVar28, ":name", iVar2 )))
                {
                    StrCopy( ref cVar28, "", 32 );
                }
                DISPLAYF( "sev_mp_InitLevelVehicles() Adding vehicle #{} as '{}' at pos {} with heading {}, colour {}, autoSpawn {}, noDamage {}, room '{}' and frozen {}", 9, 513, J, 1281, ref cVar28, 1027, uVar10, 769, uVar15, 513, iVar9, 257, iVar13, 257, iVar14, 1281, ref cVar16, 257, iVar24 );
                g_U6218[J] = { /* SEV_VEHICLECREATE */ sub_3859( J, ref cVar28, uVar10, uVar15, iVar9, iVar13, iVar14, ref cVar16, iVar24 )};
                g_U6218[J]._fU52 = uVar6;
                iVar8 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERYBYNODE */ sub_1747( iVar2, 44, 0, 0 );
                for ( I = 0; I < iVar8; I++ )
                {
                    if (NETWORK_LEVEL_DATA_RUN_STORED_QUERY_INT( ref uVar7, iVar2, 44, I, 0 ))
                    {
                        DISPLAYF( "sev_mp_InitLevelVehicles() Enabling extra {} on vehicle {}", 2, 513, uVar7, 513, J );
                         /* SEV_VEHICLEENABLEEXTRA */ sub_4290( J, uVar7 );
                    }
                }
                if (NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( ref uVar6, ":name", iVar2 ))
                {
                    iVar3 =  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 45, uVar6, 0 );
                    if (iVar3 != g_U2645)
                    {
                        iVar8 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERYBYNODE */ sub_1747( iVar3, 41, 0, 0 );
                        for ( I = 0; I < iVar8; I++ )
                        {
                            if (g_U6218[J]._fU140 < 4)
                            {
                                if ( /* SEV_MP_GETSPATIALDATAMODULEBYNODE */ sub_4473( iVar3, I, ref uVar25 ))
                                {
                                    g_U6218[J]._fU88[g_U6218[J]._fU140] = {uVar25};
                                    g_U6218[J]._fU140++;
                                }
                            }
                        }
                        DISPLAYF( "sev_mp_InitLevelVehicles() Added {} spatial data entries for vehicle {}", 2, 513, g_U6218[J]._fU140, 513, J );
                    }
                }
            }
            else
            {
                DISPLAYF( "sev_mp_InitLevelVehicles() Unable to load a model name for vehicle '{}{}', ignoring", 2, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( iVar2 ), 1281, ref g_U3274 );
            }
        }
    }
    return;
}

/* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ void sub_3028(unknown uParam0)
{
    unknown Result;
    unknown uVar4;
    unknown uVar5;

    NETWORK_LEVEL_DATA_GET_VECTOR_FROM_NODE( ref Result, ":pos", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataPositionByNode()", 3, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274, 1027, Result );
    return Result;
}

/* SEV_MP_GETLEVELDATAHEADINGBYNODE */ void sub_3190(unknown uParam0)
{
    unknown Result;

    NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( ref Result, ":heading", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataHeadingByNode()", 3, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274, 769, Result );
    return Result;
}

/* INT_TO_BOOL */ int sub_3379(int iParam0)
{
    if (iParam0 > 0)
    {
        return 1;
    }
    return 0;
}

/* SEV_VEHICLECREATE */ void sub_3859(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;
    unknown uVar45;
    unknown uVar46;
    unknown uVar47;
    unknown uVar48;

    array(ref Result._fU88, 4);
    ref Result;
    StrCopy( ref Result._fU0, uParam1, 32 );
    Result._fU32 =  /* SEV_ID_TO_VEHICLE */ sub_3914( iParam0 + 300 );
    Result._fU36 = {uParam2};
    Result._fU48 = uParam5 - 90;
    Result._fU56 = -1;
    Result._fU68 = uParam10;
    Result._fU60 = 0;
    Result._fU64 = uParam6;
    Result._fU72 = uParam7;
    Result._fU76 = 0;
    Result._fU80 = uParam8;
    if (NOT (ARE_STRINGS_EQUAL( uParam9, "" )))
    {
        Result._fU84 = GET_HASH_KEY( uParam9 );
    }
    else
    {
        Result._fU84 = 0;
    }
    Result._fU140 = 0;
    return Result;
}

/* SEV_ID_TO_VEHICLE */ void sub_3914(unknown uParam0)
{
    return SEV_ID_TO_INDEX( uParam0 );
}

/* SEV_VEHICLEENABLEEXTRA */ void sub_4290(unknown uParam0, unknown uParam1)
{
    SET_BIT( ref g_U6218[uParam0]._fU60, uParam1 );
    return;
}

/* SEV_MP_GETSPATIALDATAMODULEBYNODE */ int sub_4473(unknown uParam0, unknown uParam1, int iParam2)
{
    int iVar5;
    unknown uVar6;

    iVar5 =  /* SEV_MP_GETLEVELDATANODEBYNODE */ sub_4527( uParam0, 41, uParam1, 0 );
    if (iVar5 != g_U2645)
    {
        if (NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( iParam2 + 4, ":sectionID", iVar5 ))
        {
            if (NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( iParam2 + 0, ":uid", iVar5 ))
            {
                if (NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE( ref uVar6, ":enable", iVar5 ))
                {
                    iParam2->_fU8 =  /* INT_TO_BOOL */ sub_3379( uVar6 );
                }
                else
                {
                    iParam2->_fU8 = 0;
                }
                DISPLAYF( "[LEVELDATA] sev_mp_GetSpatialDataNormalLineByNode() Found entry sectionID {}, UID {} and enable {}", 3, 513, iParam2->_fU4, 513, iParam2->_fU0, 257, iParam2->_fU8 );
                return 1;
            }
        }
    }
    DISPLAYF( "[LEVELDATA] sev_mp_GetSpatialDataNormalLineByNode() Failed to find a valid normal line entry", 0 );
    return 0;
}

/* SEV_MP_GETLEVELDATANODEBYNODE */ void sub_4527(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown Result;

    Result = NETWORK_LEVEL_DATA_RUN_STORED_QUERY_NODE( uParam0, uParam1, uParam2, uParam3 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataNode() Query #{} with params {} and {} returned node ", 6, 513, uParam1, 513, uParam2, 513, uParam3, 1793, Result, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( Result ), 1281, ref g_U3274 );
    return Result;
}

/* SEV_MP_GETSPAWNPOINTNODE */ void sub_5518(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 0, uParam0, 0 );
}

/* SEV_MP_GETSPAWNPOINTINDEXBYNODE */ int sub_5670(unknown uParam0)
{
    return (g_U6208 - (NETWORK_LEVEL_DATA_GET_SIBLING_COUNT_AFTER_NODE( uParam0 ))) - 1;
}

/* SEV_MP_GETSPGROUPNODE */ void sub_5891(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 3, uParam0, 0 );
}

/* SEV_MP_GETLEVELDATASIZEBYNODE */ void sub_6096(unknown uParam0, unknown uParam1)
{
    unknown Result;

    Result = NETWORK_LEVEL_DATA_GET_NUM_NODES_FROM_NODE( uParam1, uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataSizeByNode() for query '{}' is {}", 2, 1537, uParam1, 513, Result );
    return Result;
    return NETWORK_LEVEL_DATA_GET_NUM_NODES_FROM_NODE( uParam1, uParam0 );
}

/* SEV_MP_GETCUTSCENEGROUPNODE */ void sub_6380(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 10, uParam0, 0 );
}

/* SEV_MP_GETTERRITORYNODE */ void sub_6707(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 20, uParam0, 0 );
}

/* SEV_MP_GETPICKUPNODE */ void sub_6997(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 22, uParam0, 0 );
}

/* SEV_MP_GETSPAWNBEACONNODE */ void sub_7287(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 2, uParam0, 0 );
}

/* SEV_MP_GETLEVELDATARADIUSBYNODE */ void sub_7455(unknown uParam0)
{
    unknown Result;

    NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( ref Result, ":radius", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataRadiusByNode()", 3, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274, 769, Result );
    return Result;
}

/* VS_SP_MAIN */ void sub_8133()
{
    int iVar2;
    boolean bVar3;
    boolean bVar4;
    boolean bVar5;

    SET_DEBUG_ACTIVE( 0 );
    iVar2 = GET_CHECKPOINT_SELECTED();
    bVar3 = iVar2 == 0;
    bVar4 = iVar2 == 3;
    bVar5 = iVar2 == 4;
     /* VS_SP_PLAYERSETUP */ sub_8466(  /* SEV_MP_GETSPAWNPOINTPOSITION */ sub_8192( 0 ), bVar3, bVar4,  /* SEV_MP_GETSPAWNPOINTROOMKEY */ sub_8258( 0 ) );
    if (bVar4)
    {
        DISPLAYF( "No scripts checkpoint.", 0 );
    }
    else if (bVar3)
    {
        DISPLAYF( "Disabling ped intelligence - player control will be disabled too", 0 );
        SET_ENABLE_PED_PROCESS_INTELLIGENCE( 1 );
    }
    else if (bVar5)
    {
        DISPLAYF( "Random Ped Test checkpoint.", 0 );
         /* VS_SP_KICKOFFRANDOMSTREAMPEDTEST */ sub_10086();
    }
    else
    {
        SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE( 1 );
         /* MP_CLEARARTDATA */ sub_19720( 0, 0 );
        DISPLAYF( "Loading script for dev menu RAG widgets", 0 );
        REQUEST_SCRIPT( "payne_versus_devmenuwidgets" );
        "[doubled result, dropped if not asigned]";
        while (NOT (HAS_SCRIPT_LOADED( "payne_versus_devmenuwidgets" )))
        {
            WAIT( 1 );
        }
        START_NEW_SCRIPT_TYPED( "payne_versus_devmenuwidgets", 8192, 0 );
    };;;
    return;
}

/* SEV_MP_GETSPAWNPOINTPOSITION */ void sub_8192(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3028(  /* SEV_MP_GETSPAWNPOINTNODE */ sub_5518( uParam0 ) );
}

/* SEV_MP_GETSPAWNPOINTROOMKEY */ void sub_8258(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATAROOMKEYBYNODE */ sub_8305(  /* SEV_MP_GETSPAWNPOINTNODE */ sub_5518( uParam0 ) );
}

/* SEV_MP_GETLEVELDATAROOMKEYBYNODE */ void sub_8305(unknown uParam0)
{
    unknown Result;

    NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( ref Result, ":milo", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataRoomKeyByNode()", 3, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274, 513, Result );
    return Result;
}

/* VS_SP_PLAYERSETUP */ void sub_8466(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5)
{
    DISPLAYF( "vs_sp_PlayerSetup() load models? ", 1, 257, bParam3 );
    LOAD_SCENE( uParam0 );
    GIVE_WEAPON_TO_PED_HAND(  /* PLAYER_PED_ID */ sub_8555(), -1074756423, 250000, 0 );
    GIVE_WEAPON_TO_PED_HOLSTER(  /* PLAYER_PED_ID */ sub_8555(), 406496141, 250000, 0 );
     /* VS_SP_PLAYERTELEPORT */ sub_8664( uParam0, 0.00000000, uParam5, 0 );
    DO_SCREEN_FADE_IN( 0 );
    if (NOT bParam4)
    {
        FORCE_WEAPON_LOAD();
        DISPLAYF( "Called FORCE_WEAPON_LOAD", 0 );
    }
    if (bParam3)
    {
         /* VS_SP_LOADTESTMODELS */ sub_9021( uParam0 );
    }
    return;
}

/* PLAYER_PED_ID */ void sub_8555()
{
    return GET_PLAYER_PED( INT_TO_PLAYERINDEX( GET_PLAYER_ID() ) );
}

/* VS_SP_PLAYERTELEPORT */ void sub_8664(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4, boolean bParam5)
{
    unknown uVar8;

    DISPLAYF( "Teleporting player to pos/heading:", 2, 1027, uParam0, 769, uParam3 );
    REQUEST_COLLISION_AT_COORD( uParam0 );
    LOAD_SCENE( uParam0 );
    if (iParam4 != 0)
    {
        LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_AT_COORDS( uParam0 ), iParam4 );
    }
    uVar8 =  /* VS_SP_GETPLAYERPED */ sub_8801();
    if (NOT (IS_PED_DEAD( uVar8 )))
    {
        if (bParam5)
        {
            SET_PED_COORDS_NO_OFFSET( uVar8, uParam0 );
        }
        else
        {
            SET_PED_COORDS( uVar8, uParam0, 1 );
        }
        SET_PED_HEADING( uVar8, uParam3 );
        if (iParam4 != 0)
        {
            SET_ROOM_FOR_PED_BY_KEY( uVar8, iParam4 );
        }
    }
    return;
}

/* VS_SP_GETPLAYERPED */ void sub_8801()
{
    return GET_PLAYER_PED( GET_PLAYER_ID() );
}

/* VS_SP_LOADTESTMODELS */ void sub_9021(unknown uParam0, unknown uParam1, unknown uParam2)
{
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( 1274458747, "mp_cs_201", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( 1274458747, "mp_cs_202", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( 1274458747, "mp_cs_203", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( 1274458747, "mp_cs_204", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( 1274458747, "mp_cs_205", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( 1274458747, "mp_cs_206", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( 1274458747, "mp_cs_207", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( 1274458747, "mp_cs_208", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( -1238607547, "mp_ufe_01", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( -1238607547, "mp_ufe_02", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( 174663350, "mp_ufe_03", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( 174663350, "mp_ufe_04", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( -1238607547, "mp_ufe_05", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( -1238607547, "mp_ufe_06", uParam0, 0, 1, 0, 0 );
     /* VS_SP_PED_CREATEATPOSHEADING */ sub_9079( -1238607547, "mp_ufe_07", uParam0, 0, 1, 0, 0 );
    DISPLAYF( "Done loading models", 0 );
    return;
}

/* VS_SP_PED_CREATEATPOSHEADING */ void sub_9079(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, boolean bParam6, boolean bParam7, boolean bParam8)
{
    unknown Result;

    DISPLAYF( "vs_sp_Ped_CreateAtPosHeading()", 0 );
    if (bParam6)
    {
        DISPLAYF( "Loading model {}", 1, 513, uParam0 );
        REQUEST_MODEL( uParam0 );
        "[doubled result, dropped if not asigned]";
        while (NOT (HAS_MODEL_LOADED( uParam0 )))
        {
            WAIT( 0 );
        }
        DISPLAYF( "Done loading model {}", 1, 513, uParam0 );
    }
    Result = CREATE_PED( 26, uParam0, uParam2, uParam5, 1, 0 );
    SET_PED_HEADING( Result, uParam5 );
    DISPLAYF( "Created ped with model {} and scene ped {}.", 2, 513, uParam0, 1537, uParam1 );
    if (bParam7)
    {
        ;
    }
    if (bParam8)
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( Result, 1 );
        FREEZE_PED_POSITION( Result, 1 );
    }
    return Result;
}

/* VS_SP_KICKOFFRANDOMSTREAMPEDTEST */ void sub_10086()
{
    int[15] iVar2;
    int[14] iVar18;

    array(ref iVar2, 15);
    array(ref iVar18, 14);
    iVar18[0] = -193028838;
    iVar18[1] = 1157878433;
    iVar18[2] = 147144082;
    iVar18[3] = -628443318;
    iVar18[4] = 786970899;
    iVar18[5] = 1887961707;
    iVar18[6] = -496155350;
    iVar18[7] = 534634923;
    iVar18[8] = -1750088116;
    iVar18[9] = 1026452798;
    iVar18[10] = -2030956875;
    iVar18[11] = 204318279;
    iVar18[12] = -1789417893;
    iVar18[13] = 1951695172;
    iVar2[0] = 297;
    iVar2[1] = 247;
    iVar2[2] = 187;
    iVar2[3] = 147;
    iVar2[4] = 168;
    iVar2[5] = 336;
    iVar2[6] = 352;
    iVar2[7] = 25;
    iVar2[8] = 118;
    iVar2[9] = 96;
    iVar2[10] = 67;
    iVar2[11] = 57;
    iVar2[12] = 27;
    iVar2[13] = 78;
    iVar2[14] = 261;
     /* SEV_MP_TELEPORTPLAYERTOSPAWNPOINT */ sub_10421( 0,  /* SEV_MP_GETSPAWNPOINTNODE */ sub_5518( 0 ), 1, 0, 0, 0 );
     /* VS_SP_DEBUG_CREATEANDLOADPEDSFROMARRAYS */ sub_19155( ref iVar18, ref iVar2 );
    return;
}

/* SEV_MP_TELEPORTPLAYERTOSPAWNPOINT */ void sub_10421(unknown uParam0, unknown uParam1, int iParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    if ( /* SEV_MP_ISPLAYERACTIVE */ sub_10469( uParam0 ))
    {
         /* __SEV_MP_BEFORETELEPORTPLAYER */ sub_10531( uParam0 );
         /* __SEV_MP_TELEPORTPLAYERTOSPAWNPOINT */ sub_12225( uParam0, uParam1, 0, 1, uParam3, uParam4, 1, uParam5 );
        if ((NOT g_U169._fU0) AND (uParam5))
        {
            iParam2 = 0;
        }
         /* __SEV_MP_AFTERTELEPORTPLAYER */ sub_18502( uParam0, iParam2 );
    }
    return;
}

/* SEV_MP_ISPLAYERACTIVE */ void sub_10469(unknown uParam0)
{
    return g_U179[uParam0]._fU0;
}

/* __SEV_MP_BEFORETELEPORTPLAYER */ void sub_10531(unknown uParam0)
{
     /* SEV_MP_FADEOUTPLAYER */ sub_10579( uParam0, 100, 0 );
     /* SEV_WAIT */ sub_11059( 100 );
     /* SEV_MP_PLAYERSETINERT */ sub_11134( uParam0, 1, 1 );
    return;
}

/* SEV_MP_FADEOUTPLAYER */ void sub_10579(unknown uParam0, unknown uParam1, unknown uParam2)
{
    DISPLAYF( "sev_mp_FadeOutPlayer() for player {} ({}) over {} ms", 3, 513, uParam0, 1281, ref g_U179[uParam0]._fU76, 513, uParam1 );
    SEV_ISOLATE();
    if ( /* SEV_MP_ISTHISMYPLAYER */ sub_10711( uParam0 ))
    {
         /* SEV_MP_FADEOUT */ sub_10811( uParam1, uParam2 );
    }
    SEV_ISOLATE_OFF();
    return;
}

/* SEV_MP_ISTHISMYPLAYER */ boolean sub_10711(int iParam0)
{
    return iParam0 == ( /* SEV_MP_GETMYPLAYER */ sub_10747());
}

/* SEV_MP_GETMYPLAYER */ void sub_10747()
{
    return SEV_GET_MY_PLAYER();
}

/* SEV_MP_FADEOUT */ void sub_10811(unknown uParam0, unknown uParam1)
{
    DISPLAYF( "sev_mp_FadeOut() attempting to fade out over {} ms", 1, 513, uParam0 );
    SEV_ISOLATE();
    if ((uParam1) || (NOT g_U3256))
    {
        DISPLAYF( "sev_mp_FadeOut() performing fade", 0 );
        MANOGAMETESTER_DISABLE();
        DISPLAYF( "[MANOGAMETESTER] disabled", 0 );
        g_U6206 = 0;
        DO_SCREEN_FADE_OUT( uParam0 );
    }
    SEV_ISOLATE_OFF();
    return;
}

/* SEV_WAIT */ void sub_11059(unknown uParam0)
{
    if (IS_THIS_THREAD_ISOLATED())
    {
        WAIT( uParam0 );
    }
    else
    {
        SEV_WAIT_FOR( SEV_ON_TIMER( uParam0 ) );
    }
    return;
}

/* SEV_MP_PLAYERSETINERT */ void sub_11134(unknown uParam0, unknown uParam1, boolean bParam2)
{
    DISPLAYF( "sev_mp_PlayerSetInert() {} ({}) to {} where joining is {}", 4, 513, uParam0, 1281, ref g_U179[uParam0]._fU76, 257, uParam1, 257,  /* SEV_MP_ISPLAYERJOINING */ sub_11261( uParam0 ) );
    if (( /* SEV_MP_ISPLAYERJOINING */ sub_11261( uParam0 )) || (uParam1))
    {
         /* SEV_MP_PLAYERSETHIDDEN */ sub_11383( uParam0, 1, 1 );
         /* SEV_MP_PLAYERSETCONTROL */ sub_11787( uParam0, 0 );
         /* SEV_MP_PLAYERSETINVINCIBLE */ sub_11990( uParam0, 1 );
    }
    else if (bParam2)
    {
         /* SEV_MP_PLAYERSETCONTROL */ sub_11787( uParam0, 1 );
    }
     /* SEV_MP_PLAYERSETHIDDEN */ sub_11383( uParam0, 0, bParam2 );
     /* SEV_MP_PLAYERSETINVINCIBLE */ sub_11990( uParam0, 0 );;
    return;
}

/* SEV_MP_ISPLAYERJOINING */ boolean sub_11261(unknown uParam0)
{
    return (g_U179[uParam0]._fU32 == 3) || ((g_U179[uParam0]._fU32 == 2) || (g_U179[uParam0]._fU32 == 1));
}

/* SEV_MP_PLAYERSETHIDDEN */ void sub_11383(unknown uParam0, boolean bParam1, boolean bParam2)
{
    DISPLAYF( "sev_mp_PlayerSetHidden() {} to {}", 2, 513, uParam0, 257, bParam1 );
    if (bParam1)
    {
        SET_PED_VISIBLE( g_U179[uParam0]._fU72, 0 );
         /* SEV_MP_PLAYERSETPOSFROZEN */ sub_11505( uParam0, 1 );
        SET_PED_COLLISION( g_U179[uParam0]._fU72, 0 );
    }
    else
    {
        SET_PED_COLLISION( g_U179[uParam0]._fU72, 1 );
        if (bParam2)
        {
             /* SEV_MP_PLAYERSETPOSFROZEN */ sub_11505( uParam0, 0 );
        }
        SET_PED_VISIBLE( g_U179[uParam0]._fU72, 1 );
    }
    SET_PED_CAN_BE_TARGETTED( g_U179[uParam0]._fU72, NOT bParam1 );
    g_U179[uParam0]._fU16 = bParam1;
    return;
}

/* SEV_MP_PLAYERSETPOSFROZEN */ void sub_11505(unknown uParam0, unknown uParam1)
{
    DISPLAYF( "sev_mp_PlayerSetPosFrozen() {} to {}", 2, 513, uParam0, 257, uParam1 );
    FREEZE_PED_POSITION( g_U179[uParam0]._fU72, uParam1 );
    g_U179[uParam0]._fU24 = uParam1;
    return;
}

/* SEV_MP_PLAYERSETCONTROL */ void sub_11787(unknown uParam0, unknown uParam1)
{
    DISPLAYF( "sev_mp_PlayerSetControl() {} to {}", 2, 513, uParam0, 257, uParam1 );
    SET_PLAYER_CONTROL_FOR_NETWORK(  /* SEV_MP_GETLOCALPLAYERINDEX */ sub_11880( uParam0 ), uParam1, 1 );
    g_U179[uParam0]._fU28 = uParam1;
    return;
}

/* SEV_MP_GETLOCALPLAYERINDEX */ void sub_11880(unknown uParam0)
{
    unknown Result;

    SEV_ISOLATE();
    Result = SEV_PLAYER_SLOT_TO_INDEX( uParam0 );
    SEV_ISOLATE_OFF();
    return Result;
}

/* SEV_MP_PLAYERSETINVINCIBLE */ void sub_11990(unknown uParam0, unknown uParam1)
{
    DISPLAYF( "sev_mp_PlayerSetInvincible() {} to {}", 2, 513, uParam0, 257, uParam1 );
    SET_PLAYER_INVINCIBLE(  /* SEV_MP_GETLOCALPLAYERINDEX */ sub_11880( uParam0 ), uParam1 );
    SET_PED_PROOFS( g_U179[uParam0]._fU72, uParam1, uParam1, uParam1, uParam1, uParam1 );
    g_U179[uParam0]._fU20 = uParam1;
    return;
}

/* __SEV_MP_TELEPORTPLAYERTOSPAWNPOINT */ void sub_12225(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
     /* __SEV_MP_TELEPORTPLAYERTOSPAWNPOINT_HEADINGOVERRIDE */ sub_12289( uParam0, uParam1, uParam2, uParam5, uParam4, uParam3, uParam6, uParam7 );
    return;
}

/* __SEV_MP_TELEPORTPLAYERTOSPAWNPOINT_HEADINGOVERRIDE */ void sub_12289(unknown uParam0, int iParam1, boolean bParam2, unknown uParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;

    DISPLAYF( "__sev_mp_TeleportPlayerToSpawnPoint() Player {} ({}) to SP {}{}", 4, 513, uParam0, 1281, ref g_U179[uParam0]._fU76, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( iParam1 ), 1281, ref g_U3274 );
    if ((iParam1 == g_U2645) || (iParam1 == nil))
    {
        SCRIPT_ASSERT( "__sev_mp_TeleportPlayerToSpawnPoint() Invalid spawn point node {} requested", 1, 1793, iParam1 );
        return;
    }
    uVar10 = { /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3028( iParam1 )};
    SEV_ISOLATE();
    if (bParam4)
    {
        uVar13 = uParam3;
    }
    else if (bParam2)
    {
        uVar13 =  /* SEV_MP_GETSPAWNPOINTGROUPHEADINGBYNODE */ sub_12624( iParam1, 1 );
    }
    else
    {
        uVar14 = { /* MP_SPAWN_GETHEADINGOPTIONS */ sub_12880( uParam0 )};
         /* SEV_MP_SPAWN_DOESSPAWNPOINTFITHEADINGOPTIONS */ sub_12952( iParam1, uVar14, ref uVar13, 20.00000000 );
    }
    SEV_ISOLATE_OFF();
     /* __SEV_MP_TELEPORTPLAYERTOPOSITION */ sub_14816( uParam0, uVar10, uVar13,  /* SEV_MP_GETLEVELDATAROOMKEYBYNODE */ sub_8305( iParam1 ), uParam5, uParam6, uParam7 );
    return;
}

/* SEV_MP_GETSPAWNPOINTGROUPHEADINGBYNODE */ void sub_12624(unknown uParam0, boolean bParam1)
{
    float Result;
    unknown uVar5;

    Result =  /* SEV_MP_GETLEVELDATAHEADINGBYNODE */ sub_3190( uParam0 );
    if (bParam1)
    {
        NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( ref uVar5, ":groupHeading", uParam0 );
        Result += uVar5;
    }
    DISPLAYF( "[LEVELDATA] sev_mp_GetSpawnPointGroupHeadingByNode() {}{} with heading {} (groupHeading {} added)", 4, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274, 769, Result, 769, uVar5 );
    return Result;
}

/* MP_SPAWN_GETHEADINGOPTIONS */ string sub_12880(unknown uParam0)
{
    return "[dynamic result, ret vals = 11]";
    break;
    g_U2597;
    uParam0;
    break;
}

/* SEV_MP_SPAWN_DOESSPAWNPOINTFITHEADINGOPTIONS */ void sub_12952(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown Result;
    float fVar24;
    float fVar25;
    unknown uVar26;
    boolean bVar27;
    int I;

    if (uParam1._fU0 <= 0)
    {
        (uParam12^) =  /* SEV_MP_GETLEVELDATAHEADINGBYNODE */ sub_3190( uParam0 );
        DISPLAYF( "[SpawnDebug] == Checking spawn {}{} heading, TRUE because there are no heading options!", 2, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274 );
        return 1;
    }
     /* SEV_MP_GETSPAWNPOINTBYNODE */ sub_13154( uParam0, ref uVar16 );
    if (uParam1._fU0 == 1)
    {
        Result = GET_BEST_HEADING_IF_POSSIBLE( uVar16._fU0, uParam1._fU4[0], uVar16._fU12, uVar16._fU16, uParam13, uParam12 );
        DISPLAYF( "[SpawnDebug] == Checking spawn {}{} with pos {}, heading {} with +- {} arc (+{}). {} toward pos {} with heading {}", 9, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274, 1027, uVar16._fU0, 769, uVar16._fU12, 769, uVar16._fU16, 769, uParam13, 257, Result, 1027, uParam1._fU4[0], 769, (uParam12^) );
        return Result;
    }
    else
    {
        (uParam12^) = uVar16._fU12;
    }
    if (uParam1._fU0 > 3)
    {
        SCRIPT_ASSERT( "Too many spawn heading options returned by game mode", 0 );
        uParam1._fU0 = 3;
    }
    for ( I = 0; I < uParam1._fU0; I++ )
    {
        if (NOT bVar27)
        {
            if (GET_BEST_HEADING_IF_POSSIBLE( uVar16._fU0, uParam1._fU4[I], uVar16._fU12, uVar16._fU16, uParam13, ref uVar26 ))
            {
                fVar24 = VDIST2( uVar16._fU0, uParam1._fU4[I] );
                (uParam12^) = uVar26;
                bVar27 = true;
                DISPLAYF( "[SpawnDebug] == Checking spawn {}{} with pos {}, heading {} +- {} arc (+{}). TRUE toward pos {} with heading {}", 8, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274, 1027, uVar16._fU0, 769, uVar16._fU12, 769, uVar16._fU16, 769, uParam13, 1027, uParam1._fU4[I], 769, (uParam12^) );
            }
            else
            {
                DISPLAYF( "[SpawnDebug] == Checking spawn {}{} with pos {}, heading {} +- {} arc (+{}). FALSE toward pos {} with heading {}", 8, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274, 1027, uVar16._fU0, 769, uVar16._fU12, 769, uVar16._fU16, 769, uParam13, 1027, uParam1._fU4[I], 769, uVar26 );
            }
        }
        else
        {
            fVar25 = VDIST2( uVar16._fU0, uParam1._fU4[I] );
            if (fVar25 < fVar24)
            {
                if (GET_BEST_HEADING_IF_POSSIBLE( uVar16._fU0, uParam1._fU4[I], uVar16._fU12, uVar16._fU16, uParam13, ref uVar26 ))
                {
                    fVar24 = fVar25;
                    (uParam12^) = uVar26;
                    bVar27 = true;
                    DISPLAYF( "[SpawnDebug] == Checking spawn {}{} with pos {}, heading {} +- {} arc (+{}). TRUE toward pos {} with heading {}", 8, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274, 1027, uVar16._fU0, 769, uVar16._fU12, 769, uVar16._fU16, 769, uParam13, 1027, uParam1._fU4[I], 769, (uParam12^) );
                }
                else
                {
                    DISPLAYF( "[SpawnDebug] == Checking spawn {}{} with pos {}, heading {} +- {} arc (+{}). FALSE toward pos {} with heading {}", 8, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274, 1027, uVar16._fU0, 769, uVar16._fU12, 769, uVar16._fU16, 769, uParam13, 1027, uParam1._fU4[I], 769, uVar26 );
                }
            }
        }
    }
    return bVar27;
}

/* SEV_MP_GETSPAWNPOINTBYNODE */ void sub_13154(unknown uParam0, int iParam1)
{
    NETWORK_LEVEL_DATA_GET_VECTOR_FROM_NODE( iParam1 + 0, ":pos", uParam0 );
    NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( iParam1 + 12, ":heading", uParam0 );
    NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( iParam1 + 16, ":headingArc", uParam0 );
    NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( iParam1 + 20, ":groupHeading", uParam0 );
    NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( iParam1 + 24, ":milo", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetSpawnPointByNode()", 7, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274, 1027, iParam1->_fU0, 769, iParam1->_fU12, 769, iParam1->_fU16, 769, iParam1->_fU20, 513, iParam1->_fU24 );
    return;
}

/* __SEV_MP_TELEPORTPLAYERTOPOSITION */ void sub_14816(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, int iParam5, boolean bParam6, boolean bParam7, unknown uParam8)
{
     /* SEV_MP_SETPLAYERTOCURRENTSPAWNWAVE */ sub_14864( uParam0 );
    DISPLAYF( "__sev_mp_TeleportPlayerToPosition() Player {} ({}) to position {}, heading {}, in room {}", 5, 513, uParam0, 1281, ref g_U179[uParam0]._fU76, 1027, uParam1, 769, uParam4, 513, iParam5 );
    if (IS_PED_DEAD( g_U179[uParam0]._fU72 ))
    {
        DISPLAYF( "__sev_mp_TeleportPlayerToPosition() ERROR: Player {} is dead!", 1, 513, uParam0 );
        SCRIPT_ASSERT( "__sev_mp_TeleportPlayerToPosition() ERROR: Player {} is dead!", 1, 513, uParam0 );
    }
    g_U179[uParam0]._fU164 = {uParam1};
    if (bParam6)
    {
         /* SEV_MP_SETPLAYERSTREAMINGPOINT */ sub_15299( uParam0, uParam1, uParam4, iParam5 );
         /* SEV_MP_BLOCKUNTILSTREAMINGHASFINISHED */ sub_15817( uParam0, 0, 0, -1, uParam8 );
    }
    CLEAR_PED_TASKS_IMMEDIATELY( g_U179[uParam0]._fU72 );
    SET_PED_COORDS( g_U179[uParam0]._fU72, uParam1, 0 );
    SET_PED_HEADING( g_U179[uParam0]._fU72, uParam4 );
    if (bParam7)
    {
         /* SEV_MP_RESETPLAYERSTREAMINGPOINT */ sub_18150( uParam0 );
    }
    SEV_ISOLATE();
    if ( /* SEV_MP_ISTHISMYPLAYER */ sub_10711( uParam0 ))
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0, 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( 0, 1065353216, 0 );
        STREAM_HELPERS_INIT();
    }
    SEV_ISOLATE_OFF();
    if (iParam5 != 0)
    {
        SET_ROOM_FOR_PED_BY_KEY( g_U179[uParam0]._fU72, iParam5 );
    }
    else
    {
        CLEAR_ROOM_FOR_PED( g_U179[uParam0]._fU72 );
    }
    return;
}

/* SEV_MP_SETPLAYERTOCURRENTSPAWNWAVE */ void sub_14864(unknown uParam0)
{
    if ( /* SEV_MP_ISPLAYERACTIVE */ sub_10469( uParam0 ))
    {
        g_U3226[uParam0] = g_U3225;
    }
    return;
}

/* SEV_MP_SETPLAYERSTREAMINGPOINT */ void sub_15299(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    SEV_ISOLATE();
    if ( /* SEV_MP_ISTHISMYPLAYER */ sub_10711( uParam0 ))
    {
         /* SEV_MP_SETSTREAMINGPOINT */ sub_15374( uParam1, uParam4, uParam5, 0, 1110704128 );
    }
    SEV_ISOLATE_OFF();
    return;
}

/* SEV_MP_SETSTREAMINGPOINT */ void sub_15374(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4, boolean bParam5, unknown uParam6)
{
    DISPLAYF( "[Streaming] sev_mp_SetStreamingPoint() for local player to {}, heading {}, roomKey {}, cutsceneMode {}, fov {}", 5, 1027, uParam0, 769, uParam3, 513, iParam4, 257, bParam5, 769, uParam6 );
     /* SEV_MP_ENABLESTREAMING */ sub_15559( 1 );
    if (bParam5)
    {
        uParam0._fU8 -= 1.00000000;
        SET_STREAMING_POINT_OF_INTEREST( uParam0, uParam3, 0, uParam6 );
    }
    else
    {
        SET_STREAMING_POINT_OF_INTEREST( uParam0, uParam3, 1, 1110704128 );
    }
    if (iParam4 != 0)
    {
        DISPLAYF( "[Streaming] sev_mp_SetStreamingPoint() for local player is requesting collision for room {}", 1, 513, iParam4 );
        REQUEST_ROOM_MINIMAL_COLLISION_MESH_BY_KEY( iParam4 );
    }
    return;
}

/* SEV_MP_ENABLESTREAMING */ void sub_15559(unknown uParam0)
{
    return;
}

/* SEV_MP_BLOCKUNTILSTREAMINGHASFINISHED */ void sub_15817(int iParam0, boolean bParam1, boolean bParam2, int iParam3, unknown uParam4)
{
    int iVar7;
    int Result;
    int iVar9;
    int iVar10;
    int iVar11;
    int iVar12;
    boolean bVar13;

    DISPLAYF( "[Streaming] sev_mp_BlockUntilStreamingHasFinished() started for player {} (Load scene = {}) manoTesterThreshold {}", 3, 513, iParam0, 257, bParam1, 513, iParam3 );
    iVar7 = GET_NETWORK_TIMER();
    SEV_ISOLATE();
    iVar9 =  /* SEV_MP_GETMYPLAYER */ sub_10747();
    if ( /* SEV_MP_ISPLAYERINDEXVALID */ sub_16036( iVar9, 1, 0 ))
    {
        if ((( /* SEV_MP_ISPLAYERACTIVEANDNOTWAITINGTOJOIN */ sub_16580( iVar9 )) AND (iParam0 == -1)) || (iParam0 == iVar9))
        {
            Result = GET_NETWORK_TIMER();
             /* SEV_MP_ENABLESTREAMING */ sub_15559( 1 );
            if (bParam1)
            {
                while (((GET_NETWORK_TIMER() - Result) < 10000) AND (NOT ( /* SEV_MP_ISLOADSCENEFINISHED */ sub_16710())))
                {
                    SEV_YIELD();
                }
            }
            if (bParam2)
            {
                while (((GET_NETWORK_TIMER() - Result) < 10000) AND (IS_LOCAL_PLAYER_STILL_SCANNING_WORLD()))
                {
                    SEV_YIELD();
                }
            }
            bVar13 = (GET_NETWORK_TIMER() - Result) >= 10000;
            while ((NOT bVar13) AND ((iVar12 < 15) || ( /* SEV_MP_HASSTREAMREQUESTS */ sub_16921())))
            {
                iVar11 = GET_NETWORK_TIMER() - Result;
                bVar13 = iVar11 >= 10000;
                iVar10++;
                if ((iParam3 > 0) AND (iVar11 >= iParam3))
                {
                    DISPLAYF( "[Streaming] Detected threshold exceeded, performing manotester dump", 0 );
                    MANOGAMETESTER_DUMP_NOW();
                    iParam3 = -1;
                }
                if (NOT bVar13)
                {
                     /* SEV_MP_ENABLESTREAMING */ sub_15559( 1 );
                    if (NOT ( /* SEV_MP_HASSTREAMREQUESTS */ sub_16921()))
                    {
                        iVar12++;
                    }
                    if ((iVar10 mod 30) == 0)
                    {
                        iVar9 =  /* SEV_MP_GETMYPLAYER */ sub_10747();
                        if (iVar9 == -1)
                        {
                            bVar13 = true;
                        }
                        else if (iParam0 == -1)
                        {
                            bVar13 = NOT ( /* SEV_MP_ISPLAYERACTIVEANDNOTWAITINGTOJOIN */ sub_16580( iVar9 ));
                        }
                        else
                        {
                            bVar13 = iParam0 != iVar9;
                        }
                    }
                    if ((NOT g_U169._fU0) AND (uParam4))
                    {
                        bVar13 = true;
                    }
                    DISPLAYF( "Loop #{} ({}) - Reqs = {}, Priority {}, Time Elapsed {}, Stable Frames {}", 6, 513, iVar10, 257,  /* SEV_MP_HASSTREAMREQUESTS */ sub_16921(), 513, GET_STABLE_NUM_OF_STREAMING_REQUESTS(), 513, GET_STABLE_NUM_OF_PRIORITY_REQUESTS(), 513, GET_NETWORK_TIMER() - Result, 513, iVar12 );
                    SEV_YIELD();
                }
            }
            Result = GET_NETWORK_TIMER() - Result;
            if (Result >= 10000)
            {
                DISPLAYF( "[Streaming] Timed out after {}ms over {} iterations where streaming is {}", 3, 513, Result, 513, iVar10, 257, (iParam0 == -1) || (SEV_GET_MY_PLAYER() == iParam0) );
            }
            else if (bVar13)
            {
                DISPLAYF( "[Streaming] Local player changed after {}ms over {} iterations where streaming is {}", 3, 513, Result, 513, iVar10, 257, (iParam0 == -1) || (SEV_GET_MY_PLAYER() == iParam0) );
            }
            else
            {
                DISPLAYF( "[Streaming] Finished locally in {}ms over {} iterations where streaming is {}", 3, 513, Result, 513, iVar10, 257, (iParam0 == -1) || (SEV_GET_MY_PLAYER() == iParam0) );
            }
        }
    }
    SEV_ISOLATE_OFF();
    if (NOT IS_THIS_THREAD_ISOLATED())
    {
        DISPLAYF( "[Streaming] About to sync - iPlayer {}, loadScene {}", 2, 513, iParam0, 257, bParam1 );
         /* SEV_SYNC_POINT */ sub_17916();
        DISPLAYF( "[Streaming] After waiting for sync, streaming took {}ms", 1, 513, GET_NETWORK_TIMER() - iVar7 );
    }
    return Result;
}

/* SEV_MP_ISPLAYERINDEXVALID */ int sub_16036(int iParam0, boolean bParam1, boolean bParam2)
{
    if (iParam0 < 0)
    {
        if (bParam1)
        {
            DISPLAYF( "sev_mp_IsPlayerIndexValid - ERROR: iPlayer points outside the mp_Players array! index: {}", 1, 513, iParam0 );
        }
        if (bParam2)
        {
            SCRIPT_ASSERT( "sev_mp_IsPlayerIndexValid - ERROR: iPlayer points outside the mp_Players array! index: {}", 1, 513, iParam0 );
        }
        return 0;
    }
    else if (iParam0 >= 16)
    {
        if (bParam1)
        {
            DISPLAYF( "sev_mp_IsPlayerIndexValid - ERROR: iPlayer points outside the mp_Players array! index: {}", 1, 513, iParam0 );
        }
        if (bParam2)
        {
            SCRIPT_ASSERT( "sev_mp_IsPlayerIndexValid - ERROR: iPlayer points outside the mp_Players array! index: {}", 1, 513, iParam0 );
        }
        return 0;
    }
    return 1;
}

/* SEV_MP_ISPLAYERACTIVEANDNOTWAITINGTOJOIN */ int sub_16580(unknown uParam0)
{
    if (g_U179[uParam0]._fU0)
    {
        return g_U179[uParam0]._fU32 == 0;
    }
    return 0;
}

/* SEV_MP_ISLOADSCENEFINISHED */ void sub_16710()
{
    SEV_ISOLATED_ONLY();
    DISPLAYF( "[Streaming] sev_mp_IsLoadSceneComplete()", 0 );
    return NETWORK_UPDATE_LOAD_SCENE();
}

/* SEV_MP_HASSTREAMREQUESTS */ boolean sub_16921()
{
    SEV_ISOLATED_ONLY();
    return (GET_STABLE_NUM_OF_STREAMING_REQUESTS() > 0) || (GET_STABLE_NUM_OF_PRIORITY_REQUESTS() > 0);
}

/* SEV_SYNC_POINT */ void sub_17916()
{
    unknown uVar2;

    uVar2 = SEV_CONSTRUCT_EVENT();
    SEV_INDUCE_GATHER_EVENT( uVar2 );
    SEV_WAIT_FOR( uVar2 );
    return;
}

/* SEV_MP_RESETPLAYERSTREAMINGPOINT */ void sub_18150(unknown uParam0)
{
    SEV_ISOLATE();
    if ( /* SEV_MP_ISTHISMYPLAYER */ sub_10711( uParam0 ))
    {
         /* SEV_MP_RESETSTREAMINGPOINT */ sub_18214();
    }
    SEV_ISOLATE_OFF();
    return;
}

/* SEV_MP_RESETSTREAMINGPOINT */ void sub_18214()
{
    SEV_ISOLATED_ONLY();
    DISPLAYF( "[Streaming] Reset streaming point", 0 );
    RESET_STREAMING_POINT_OF_INTEREST();
    return;
}

/* __SEV_MP_AFTERTELEPORTPLAYER */ void sub_18502(unknown uParam0, unknown uParam1)
{
     /* SEV_MP_PLAYERSETINERT */ sub_11134( uParam0, 0, uParam1 );
     /* SEV_MP_FADEINPLAYER */ sub_18560( uParam0, 100, 0, 0 );
    return;
}

/* SEV_MP_FADEINPLAYER */ void sub_18560(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    DISPLAYF( "sev_mp_FadeInPlayer() for player {} ({}) over {} ms", 3, 513, uParam0, 1281, ref g_U179[uParam0]._fU76, 513, uParam1 );
    SEV_ISOLATE();
    if ( /* SEV_MP_ISTHISMYPLAYER */ sub_10711( uParam0 ))
    {
         /* SEV_MP_FADEIN */ sub_18706( uParam1, uParam2, uParam3 );
    }
    SEV_ISOLATE_OFF();
    return;
}

/* SEV_MP_FADEIN */ void sub_18706(unknown uParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;

    DISPLAYF( "sev_mp_FadeIn() attempting to fade in over {} ms", 1, 513, uParam0 );
    SEV_ISOLATE();
    uVar5 =  /* SEV_MP_GETMYPLAYER */ sub_10747();
    if ( /* SEV_MP_ISPLAYERINDEXVALID */ sub_16036( uVar5, 1, 0 ))
    {
        if ( /* SEV_MP_ISPLAYERACTIVEANDNOTJOINING */ sub_18826( uVar5 ))
        {
            if ((uParam2) || (NOT ( /* SEV_MP_ISPLAYERWAITINGTOJOIN */ sub_18918( uVar5 ))))
            {
                if ((uParam1) || (NOT g_U3256))
                {
                    DISPLAYF( "sev_mp_FadeIn() performing fade", 0 );
                    DO_SCREEN_FADE_IN( uParam0 );
                    MANOGAMETESTER_ENABLE();
                    DISPLAYF( "[MANOGAMETESTER] enabled", 0 );
                    g_U6206 = 1;
                }
            }
        }
    }
    SEV_ISOLATE_OFF();
    return;
}

/* SEV_MP_ISPLAYERACTIVEANDNOTJOINING */ int sub_18826(unknown uParam0)
{
    if (g_U179[uParam0]._fU0)
    {
        return NOT ( /* SEV_MP_ISPLAYERJOINING */ sub_11261( uParam0 ));
    }
    return 0;
}

/* SEV_MP_ISPLAYERWAITINGTOJOIN */ boolean sub_18918(unknown uParam0)
{
    return g_U179[uParam0]._fU32 != 0;
}

/* VS_SP_DEBUG_CREATEANDLOADPEDSFROMARRAYS */ void sub_19155(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    DISPLAYF( "_sev_mp_Debug_CreateAndLoadPedsFromStuff() - Creating Peds", 0 );
    I = 0;
    iVar5 = 0;
    for ( I = 0; I < (uParam1^); I++ )
    {
         /* VS_SP_PED_CREATESPAWNPED_ATINDEX */ sub_19310( (uParam0^)[iVar5], (uParam1^)[I] );
        DISPLAYF( "_sev_mp_Debug_CreateAndLoadPedsFromStuff() - Creating Ped: Model {} at {}", 2, 513, (uParam0^)[iVar5], 1027,  /* SEV_MP_GETSPAWNPOINTPOSITION */ sub_8192( (uParam1^)[I] ) );
        iVar5++;
        if (iVar5 >= (uParam0^))
        {
            iVar5 = 0;
        }
    }
    DISPLAYF( "_sev_mp_Debug_CreateAndLoadPedsFromStuff() - Ped Created Done", 0 );
    return;
}

/* VS_SP_PED_CREATESPAWNPED_ATINDEX */ void sub_19310(unknown uParam0, unknown uParam1)
{
    unknown Result;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    uVar5 =  /* SEV_MP_GETSPAWNPOINTNODE */ sub_5518( uParam1 );
    uVar6 = { /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3028( uVar5 )};
    DISPLAYF( "[AG]:Spawning Model{} At Pos Index {} Coords:{}", 3, 513, uParam0, 513, uParam1, 1027, uVar6 );
    Result = CREATE_PED( 2, uParam0, uVar6, 0, 1, 0 );
    return Result;
}

/* MP_CLEARARTDATA */ void sub_19720(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;
    unknown uVar45;
    unknown uVar46;
    unknown uVar47;
    unknown uVar48;
    unknown uVar49;
    unknown uVar50;
    unknown uVar51;
    unknown uVar52;
    unknown uVar53;
    unknown uVar54;
    unknown uVar55;
    unknown uVar56;
    unknown uVar57;
    unknown uVar58;
    unknown uVar59;
    unknown uVar60;
    unknown uVar61;
    unknown uVar62;
    unknown uVar63;
    unknown uVar64;
    unknown uVar65;
    unknown uVar66;
    unknown uVar67;
    unknown uVar68;
    unknown uVar69;
    unknown uVar70;
    unknown uVar71;
    unknown uVar72;
    unknown uVar73;
    unknown uVar74;
    unknown uVar75;
    unknown uVar76;
    unknown uVar77;
    unknown uVar78;
    unknown uVar79;
    unknown uVar80;
    unknown uVar81;
    unknown uVar82;
    unknown uVar83;
    unknown uVar84;
    unknown uVar85;
    unknown uVar86;
    unknown uVar87;
    unknown uVar88;
    unknown uVar89;
    unknown uVar90;
    unknown uVar91;
    unknown uVar92;
    unknown uVar93;
    unknown uVar94;
    unknown uVar95;
    unknown uVar96;
    unknown uVar97;
    unknown uVar98;
    unknown uVar99;
    unknown uVar100;
    unknown uVar101;
    unknown uVar102;
    unknown uVar103;
    unknown uVar104;
    unknown uVar105;
    unknown uVar106;
    unknown uVar107;
    unknown uVar108;
    unknown uVar109;
    unknown uVar110;
    unknown uVar111;
    unknown uVar112;
    unknown uVar113;
    unknown uVar114;
    unknown uVar115;
    unknown uVar116;
    unknown uVar117;
    unknown uVar118;
    unknown uVar119;
    unknown uVar120;
    unknown uVar121;
    unknown uVar122;
    unknown uVar123;
    unknown uVar124;
    unknown uVar125;
    unknown uVar126;
    unknown uVar127;
    unknown uVar128;
    unknown uVar129;
    unknown uVar130;
    unknown uVar131;
    unknown uVar132;
    unknown uVar133;
    unknown uVar134;
    unknown uVar135;
    unknown uVar136;
    unknown uVar137;
    unknown uVar138;
    unknown uVar139;
    unknown uVar140;
    unknown uVar141;
    unknown uVar142;
    unknown uVar143;
    unknown uVar144;
    unknown uVar145;
    unknown uVar146;
    unknown uVar147;
    unknown uVar148;
    unknown uVar149;
    unknown uVar150;
    unknown uVar151;
    unknown uVar152;
    unknown uVar153;
    unknown uVar154;
    unknown uVar155;
    unknown uVar156;
    unknown uVar157;
    unknown uVar158;
    unknown uVar159;
    unknown uVar160;
    unknown uVar161;
    unknown uVar162;
    unknown uVar163;
    unknown uVar164;
    unknown uVar165;
    unknown uVar166;
    unknown uVar167;
    unknown uVar168;
    unknown uVar169;
    unknown uVar170;
    unknown uVar171;
    unknown uVar172;
    unknown uVar173;
    unknown uVar174;
    unknown uVar175;
    unknown uVar176;
    unknown uVar177;
    unknown uVar178;
    unknown uVar179;
    unknown uVar180;
    unknown uVar181;
    unknown uVar182;
    unknown uVar183;
    unknown uVar184;
    unknown uVar185;
    unknown uVar186;
    unknown uVar187;
    unknown uVar188;
    unknown uVar189;
    unknown uVar190;
    unknown uVar191;
    unknown uVar192;
    unknown uVar193;
    unknown uVar194;
    unknown uVar195;
    unknown uVar196;
    unknown uVar197;
    unknown uVar198;
    unknown uVar199;
    unknown uVar200;
    unknown uVar201;
    unknown uVar202;
    unknown uVar203;
    unknown uVar204;
    unknown uVar205;
    unknown uVar206;
    unknown uVar207;
    unknown uVar208;
    unknown uVar209;
    unknown uVar210;
    unknown uVar211;
    unknown uVar212;
    unknown uVar213;
    unknown uVar214;
    unknown uVar215;
    unknown uVar216;
    unknown uVar217;
    unknown uVar218;
    unknown uVar219;
    unknown uVar220;
    unknown uVar221;
    unknown uVar222;
    unknown uVar223;
    unknown uVar224;
    unknown uVar225;
    unknown uVar226;
    unknown uVar227;
    unknown uVar228;
    unknown uVar229;
    unknown uVar230;
    unknown uVar231;
    unknown uVar232;
    unknown uVar233;
    unknown uVar234;
    unknown uVar235;
    unknown uVar236;
    unknown uVar237;
    unknown uVar238;
    unknown uVar239;
    unknown uVar240;
    unknown uVar241;
    unknown uVar242;
    unknown uVar243;
    unknown uVar244;
    unknown uVar245;
    unknown uVar246;
    unknown uVar247;
    unknown uVar248;
    unknown uVar249;
    unknown uVar250;
    unknown uVar251;
    unknown uVar252;
    unknown uVar253;
    unknown uVar254;
    unknown uVar255;
    unknown uVar256;
    unknown uVar257;
    unknown uVar258;
    unknown uVar259;
    unknown uVar260;
    unknown uVar261;
    unknown uVar262;
    unknown uVar263;
    unknown uVar264;
    unknown uVar265;
    unknown uVar266;
    unknown uVar267;
    unknown uVar268;
    unknown uVar269;
    unknown uVar270;
    unknown uVar271;
    unknown uVar272;
    unknown uVar273;
    unknown uVar274;
    unknown uVar275;
    unknown uVar276;
    unknown uVar277;
    unknown uVar278;
    unknown uVar279;
    unknown uVar280;
    unknown uVar281;
    unknown uVar282;
    unknown uVar283;
    unknown uVar284;
    unknown uVar285;
    unknown uVar286;
    unknown uVar287;
    unknown uVar288;
    unknown uVar289;
    unknown uVar290;
    unknown uVar291;
    unknown uVar292;
    unknown uVar293;
    unknown uVar294;
    unknown uVar295;
    unknown uVar296;
    unknown uVar297;
    unknown uVar298;
    unknown uVar299;
    unknown uVar300;
    unknown uVar301;
    unknown uVar302;
    unknown uVar303;
    unknown uVar304;
    unknown uVar305;
    unknown uVar306;
    unknown uVar307;
    unknown uVar308;
    unknown uVar309;
    unknown uVar310;
    unknown uVar311;
    unknown uVar312;
    unknown uVar313;
    unknown uVar314;
    unknown uVar315;
    unknown uVar316;
    unknown uVar317;
    unknown uVar318;
    unknown uVar319;
    unknown uVar320;
    unknown uVar321;
    unknown uVar322;
    unknown uVar323;
    unknown uVar324;
    unknown uVar325;
    unknown uVar326;
    unknown uVar327;
    unknown uVar328;
    unknown uVar329;
    unknown uVar330;
    unknown uVar331;
    unknown uVar332;
    unknown uVar333;
    unknown uVar334;
    unknown uVar335;
    unknown uVar336;
    unknown uVar337;
    unknown uVar338;
    unknown uVar339;
    unknown uVar340;
    unknown uVar341;
    unknown uVar342;
    unknown uVar343;
    unknown uVar344;
    unknown uVar345;
    unknown uVar346;
    unknown uVar347;
    unknown uVar348;
    unknown uVar349;
    unknown uVar350;
    unknown uVar351;
    unknown uVar352;
    unknown uVar353;
    unknown uVar354;
    unknown uVar355;
    unknown uVar356;
    unknown uVar357;
    unknown uVar358;
    unknown uVar359;
    unknown uVar360;
    unknown uVar361;
    unknown uVar362;
    unknown uVar363;
    unknown uVar364;
    unknown uVar365;
    unknown uVar366;
    unknown uVar367;
    unknown uVar368;
    unknown uVar369;
    unknown uVar370;
    unknown uVar371;
    unknown uVar372;
    unknown uVar373;
    unknown uVar374;
    unknown uVar375;
    unknown uVar376;
    unknown uVar377;
    unknown uVar378;
    unknown uVar379;
    unknown uVar380;
    unknown uVar381;
    unknown uVar382;
    unknown uVar383;
    unknown uVar384;
    unknown uVar385;
    unknown uVar386;
    unknown uVar387;
    unknown uVar388;
    unknown uVar389;
    unknown uVar390;
    unknown uVar391;
    unknown uVar392;
    unknown uVar393;
    unknown uVar394;
    unknown uVar395;
    unknown uVar396;
    unknown uVar397;
    unknown uVar398;
    unknown uVar399;
    unknown uVar400;
    unknown uVar401;
    unknown uVar402;
    unknown uVar403;
    unknown uVar404;
    unknown uVar405;
    unknown uVar406;

     /* PUTS */ sub_19801( "mp_ClearArtData() - hiding all toggleable art data" );
    array(ref uVar6._fU0, 8);
    ref uVar6;
    array(ref uVar104._fU0._fU0, 8);
    ref uVar104._fU0;
    array(ref uVar104._fU392._fU0, 8);
    ref uVar104._fU392;
    array(ref uVar104._fU784._fU0, 8);
    ref uVar104._fU784;
    ref uVar104;
    iVar5 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 39, 0, 0 );
    for ( I = 0; I < iVar5; I++ )
    {
         /* MP_ARTDATA_RESETIPLDATASET */ sub_19915( ref uVar6 );
         /* SEV_MP_GETLEVELDATAIPLSETBYNODE */ sub_20101(  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 39, I, 0 ), ref uVar6, 55 );
         /* MP_REMOVEIPLSET */ sub_20860( uVar6, 0 );
    }
    for ( I = 0; I < g_U6213; I++ )
    {
         /* GW_BOMB_RESETBOMBARTDETAILS */ sub_21749( ref uVar104 );
        if ( /* SEV_MP_GETBOMBLOCATIONARTDETAILS */ sub_21843(  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 51, I, 0 ), ref uVar104 ))
        {
             /* MP_REMOVEIPLSET */ sub_20860( uVar104._fU784, 0 );
             /* MP_REMOVEIPLSET */ sub_20860( uVar104._fU392, 0 );
             /* MP_REQUESTIPLSET */ sub_22158( uVar104._fU0, 0 );
        }
    }
    for ( I = 0; I < g_U6211; I++ )
    {
        uVar406 =  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 20, I, 0 );
         /* MP_ARTDATA_RESETIPLDATASET */ sub_19915( ref uVar6 );
         /* SEV_MP_GETSIEGEBARRICADEARTDETAILS */ sub_22401( uVar406, ref uVar6 );
         /* MP_REMOVEIPLSET */ sub_20860( uVar6, 0 );
         /* MP_ARTDATA_RESETIPLDATASET */ sub_19915( ref uVar6 );
         /* SEV_MP_GETDROPOFFARTDETAILS */ sub_22645( uVar406, ref uVar6 );
         /* MP_REMOVEIPLSET */ sub_20860( uVar6, 0 );
    }
     /* MP_ARTDATA_RESETIPLDATASET */ sub_19915( ref uVar6 );
     /* SEV_MP_GETLEVELDATAIPLSETBYNODE */ sub_20101(  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 48, -2054448692, 0 ), ref uVar6, 55 );
     /* MP_REMOVEIPLSET */ sub_20860( uVar6, 0 );
    for ( I = 0; I < g_U6214; I++ )
    {
         /* MP_ARTDATA_RESETIPLDATASET */ sub_19915( ref uVar6 );
         /* SEV_MP_GETPICKUPARTDETAILS */ sub_22813(  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 22, I, 0 ), ref uVar6 );
         /* MP_REMOVEIPLSET */ sub_20860( uVar6, 0 );
    }
     /* MP_ARTDATA_REMOVEALLRESIZEIPLS */ sub_22909( 0 );
     /* PUTS */ sub_19801( "mp_ClearArtData() - done removing data" );
    return;
}

/* PUTS */ void sub_19801(unknown uParam0)
{
    DISPLAYF( "", 1, 1537, uParam0 );
    return;
}

/* MP_ARTDATA_RESETIPLDATASET */ void sub_19915(int iParam0)
{
    int I;

    for ( I = 0; I < 8; I++ )
    {
         /* MP_ARTDATA_RESETIPLDATA */ sub_19974( ref iParam0->_fU0[I] );
    }
    iParam0->_fU388 = 0;
    return;
}

/* MP_ARTDATA_RESETIPLDATA */ void sub_19974(int iParam0)
{
    StrCopy( ref iParam0->_fU0, "", 32 );
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    return;
}

/* SEV_MP_GETLEVELDATAIPLSETBYNODE */ void sub_20101(unknown uParam0, int iParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    int I;
    int iVar8;

    iVar8 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERYBYNODE */ sub_1747( uParam0, uParam2, 0, 0 );
    for ( I = 0; I < iVar8; I++ )
    {
        uVar5 =  /* SEV_MP_GETLEVELDATANODEBYNODE */ sub_4527( uParam0, uParam2, I, 0 );
        if (NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 32, ref iParam1->_fU0[iParam1->_fU388]._fU0, ":name", uVar5 ))
        {
            NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( ref iParam1->_fU0[iParam1->_fU388]._fU32, ":room", uVar5 );
            if (NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE( ref uVar6, ":addToRoot", uVar5 ))
            {
                iParam1->_fU0[iParam1->_fU388]._fU36 =  /* INT_TO_BOOL */ sub_3379( uVar6 );
            }
            else
            {
                iParam1->_fU0[iParam1->_fU388]._fU36 = 0;
            }
            if (NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE( ref uVar6, ":remove", uVar5 ))
            {
                iParam1->_fU0[iParam1->_fU388]._fU40 =  /* INT_TO_BOOL */ sub_3379( uVar6 );
            }
            else
            {
                iParam1->_fU0[iParam1->_fU388]._fU40 = 0;
            }
            if (NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE( ref uVar6, ":alwaysSeesExplosion", uVar5 ))
            {
                iParam1->_fU0[iParam1->_fU388]._fU44 =  /* INT_TO_BOOL */ sub_3379( uVar6 );
            }
            else
            {
                iParam1->_fU0[iParam1->_fU388]._fU44 = 0;
            }
            DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataIPLSetByNode() Added IPL #{} with name {}, roomKey {}, addToRoot {}, remove {}", 5, 513, iParam1->_fU388 + 1, 1281, ref iParam1->_fU0[iParam1->_fU388]._fU0, 513, iParam1->_fU0[iParam1->_fU388]._fU32, 257, iParam1->_fU0[iParam1->_fU388]._fU36, 257, iParam1->_fU0[iParam1->_fU388]._fU40 );
            iParam1->_fU388++;
        }
        else
        {
            DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataIPLSetByNode() Unable to load an IPL name for entry {}", 1, 513, I );
        }
    }
    return;
}

/* MP_REMOVEIPLSET */ void sub_20860(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47, unknown uParam48, unknown uParam49, unknown uParam50, unknown uParam51, unknown uParam52, unknown uParam53, unknown uParam54, unknown uParam55, unknown uParam56, unknown uParam57, unknown uParam58, unknown uParam59, unknown uParam60, unknown uParam61, unknown uParam62, unknown uParam63, unknown uParam64, unknown uParam65, unknown uParam66, unknown uParam67, unknown uParam68, unknown uParam69, unknown uParam70, unknown uParam71, unknown uParam72, unknown uParam73, unknown uParam74, unknown uParam75, unknown uParam76, unknown uParam77, unknown uParam78, unknown uParam79, unknown uParam80, unknown uParam81, unknown uParam82, unknown uParam83, unknown uParam84, unknown uParam85, unknown uParam86, unknown uParam87, unknown uParam88, unknown uParam89, unknown uParam90, unknown uParam91, unknown uParam92, unknown uParam93, unknown uParam94, unknown uParam95, unknown uParam96, unknown uParam97, unknown uParam98)
{
    int I;

    for ( I = 0; I < uParam0._fU388; I++ )
    {
        if (uParam0._fU0[I]._fU40)
        {
             /* MP_REQUESTIPL */ sub_20995( uParam0._fU0[I]._fU0, uParam0._fU0[I]._fU32, uParam0._fU0[I]._fU36, uParam0._fU0[I]._fU44, uParam98 );
        }
        else
        {
             /* MP_REMOVEIPL */ sub_21604( uParam0._fU0[I]._fU0 );
        }
    }
    return;
}

/* MP_REQUESTIPL */ void sub_20995(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, boolean bParam10, boolean bParam11)
{
    DISPLAYF( "mp_RequestIPL() IPL '{}', roomHash {}, addToRoot {}, sync {}", 4, 1281, ref uParam0, 513, iParam8, 257, uParam9, 257, bParam11 );
    if (iParam8 != 0)
    {
        SET_ROOM_FOR_OBJECTS_IN_IPL( ref uParam0, iParam8, uParam9 );
    }
    if (bParam11)
    {
        SYNC_FRAGMENT_OBJECTS_IN_IPL( ref uParam0, 1 );
    }
    if (bParam10)
    {
        SET_IPL_ALWAYS_SEES_EXPLOSION( ref uParam0 );
    }
    REQUEST_IPL( ref uParam0, 1 );
     /* MP_ARTDATA_SETSPATIALDATAFORIPL */ sub_21184( uParam0, 0 );
    return;
}

/* MP_ARTDATA_SETSPATIALDATAFORIPL */ void sub_21184(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, boolean bParam8)
{
    int iVar11;
    int I;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    int iVar17;

    iVar11 =  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 40, GET_HASH_KEY( ref uParam0 ), 0 );
    if (iVar11 != g_U2645)
    {
        iVar17 =  /* SEV_MP_GETSPATIALDATASIZE */ sub_21265( iVar11 );
        for ( I = 0; I < iVar17; I++ )
        {
            if ( /* SEV_MP_GETSPATIALDATAMODULEBYNODE */ sub_4473( iVar11, I, ref uVar14 ))
            {
                if (bParam8)
                {
                    uVar14._fU8 = NOT uVar14._fU8;
                }
                ENABLE_NORMAL_LINE_BY_HASH( uVar14._fU4, uVar14._fU0, uVar14._fU8 );
                ENABLE_COVERPOINTMP3_GROUP_FROM_LINE( uVar14._fU4, uVar14._fU0, uVar14._fU8 );
                DISPLAYF( "mp_ArtData_SetSpatialDataForIPL() Updating {} with sectionID {}, UID {}, and enable {}", 4, 1281, ref uParam0, 513, uVar14._fU4, 513, uVar14._fU0, 257, uVar14._fU8 );
            }
        }
    }
    return;
}

/* SEV_MP_GETSPATIALDATASIZE */ void sub_21265(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATASIZEBYNODE */ sub_6096( uParam0, "NormalLine" );
}

/* MP_REMOVEIPL */ void sub_21604(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    DISPLAYF( "mp_RemoveIPL() IPL '{}'", 1, 1281, ref uParam0 );
    REMOVE_IPL( ref uParam0, 1 );
     /* MP_ARTDATA_SETSPATIALDATAFORIPL */ sub_21184( uParam0, 1 );
    return;
}

/* GW_BOMB_RESETBOMBARTDETAILS */ void sub_21749(int iParam0)
{
     /* MP_ARTDATA_RESETIPLDATASET */ sub_19915( iParam0 + 0 );
     /* MP_ARTDATA_RESETIPLDATASET */ sub_19915( iParam0 + 392 );
     /* MP_ARTDATA_RESETIPLDATASET */ sub_19915( iParam0 + 784 );
    return;
}

/* SEV_MP_GETBOMBLOCATIONARTDETAILS */ int sub_21843(unknown uParam0, int iParam1)
{
    int iVar4;

    iVar4 = NETWORK_LEVEL_DATA_GET_NODE_FROM_NODE( "Normal(0)", uParam0 );
    if (iVar4 == g_U2645)
    {
        return 0;
    }
     /* SEV_MP_GETLEVELDATAIPLSETBYNODE */ sub_20101( iVar4, iParam1 + 0, 55 );
    iVar4 = NETWORK_LEVEL_DATA_GET_NODE_FROM_NODE( "Objective(0)", uParam0 );
    if (iVar4 == g_U2645)
    {
        return 0;
    }
     /* SEV_MP_GETLEVELDATAIPLSETBYNODE */ sub_20101( iVar4, iParam1 + 392, 55 );
    iVar4 = NETWORK_LEVEL_DATA_GET_NODE_FROM_NODE( "Destroyed(0)", uParam0 );
    if (iVar4 == g_U2645)
    {
        return 0;
    }
     /* SEV_MP_GETLEVELDATAIPLSETBYNODE */ sub_20101( iVar4, iParam1 + 784, 55 );
    NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 32, iParam1 + 1176, ":explosionSound", uParam0 );
    return 1;
}

/* MP_REQUESTIPLSET */ void sub_22158(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47, unknown uParam48, unknown uParam49, unknown uParam50, unknown uParam51, unknown uParam52, unknown uParam53, unknown uParam54, unknown uParam55, unknown uParam56, unknown uParam57, unknown uParam58, unknown uParam59, unknown uParam60, unknown uParam61, unknown uParam62, unknown uParam63, unknown uParam64, unknown uParam65, unknown uParam66, unknown uParam67, unknown uParam68, unknown uParam69, unknown uParam70, unknown uParam71, unknown uParam72, unknown uParam73, unknown uParam74, unknown uParam75, unknown uParam76, unknown uParam77, unknown uParam78, unknown uParam79, unknown uParam80, unknown uParam81, unknown uParam82, unknown uParam83, unknown uParam84, unknown uParam85, unknown uParam86, unknown uParam87, unknown uParam88, unknown uParam89, unknown uParam90, unknown uParam91, unknown uParam92, unknown uParam93, unknown uParam94, unknown uParam95, unknown uParam96, unknown uParam97, unknown uParam98)
{
    int I;

    for ( I = 0; I < uParam0._fU388; I++ )
    {
        if (uParam0._fU0[I]._fU40)
        {
             /* MP_REMOVEIPL */ sub_21604( uParam0._fU0[I]._fU0 );
        }
        else
        {
             /* MP_REQUESTIPL */ sub_20995( uParam0._fU0[I]._fU0, uParam0._fU0[I]._fU32, uParam0._fU0[I]._fU36, uParam0._fU0[I]._fU44, uParam98 );
        }
    }
    return;
}

/* SEV_MP_GETSIEGEBARRICADEARTDETAILS */ void sub_22401(unknown uParam0, unknown uParam1)
{
     /* SEV_MP_GETLEVELDATAIPLSETBYNODE */ sub_20101(  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 46,  /* SEV_MP_GETLEVELDATAKEYBYNODE */ sub_22453( uParam0 ), 0 ), uParam1, 55 );
    return;
}

/* SEV_MP_GETLEVELDATAKEYBYNODE */ void sub_22453(unknown uParam0)
{
    unknown Result;

    NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( ref Result, ":name", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataKeyByNode()", 3, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2290( uParam0 ), 1281, ref g_U3274, 513, Result );
    return Result;
}

/* SEV_MP_GETDROPOFFARTDETAILS */ void sub_22645(unknown uParam0, unknown uParam1)
{
     /* SEV_MP_GETLEVELDATAIPLSETBYNODE */ sub_20101(  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 48,  /* SEV_MP_GETLEVELDATAKEYBYNODE */ sub_22453( uParam0 ), 0 ), uParam1, 55 );
    return;
}

/* SEV_MP_GETPICKUPARTDETAILS */ void sub_22813(unknown uParam0, unknown uParam1)
{
     /* SEV_MP_GETLEVELDATAIPLSETBYNODE */ sub_20101(  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 47,  /* SEV_MP_GETLEVELDATAKEYBYNODE */ sub_22453( uParam0 ), 0 ), uParam1, 55 );
    return;
}

/* MP_ARTDATA_REMOVEALLRESIZEIPLS */ void sub_22909(boolean bParam0)
{
    int I;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;
    unknown uVar45;
    unknown uVar46;
    unknown uVar47;
    unknown uVar48;
    unknown uVar49;
    unknown uVar50;
    unknown uVar51;
    unknown uVar52;
    unknown uVar53;
    unknown uVar54;
    unknown uVar55;
    unknown uVar56;
    unknown uVar57;
    unknown uVar58;
    unknown uVar59;
    unknown uVar60;
    unknown uVar61;
    unknown uVar62;
    unknown uVar63;
    unknown uVar64;
    unknown uVar65;
    unknown uVar66;
    unknown uVar67;
    unknown uVar68;
    unknown uVar69;
    unknown uVar70;
    unknown uVar71;
    unknown uVar72;
    unknown uVar73;
    unknown uVar74;
    unknown uVar75;
    unknown uVar76;
    unknown uVar77;
    unknown uVar78;
    unknown uVar79;
    unknown uVar80;
    unknown uVar81;
    unknown uVar82;
    unknown uVar83;
    unknown uVar84;
    unknown uVar85;
    unknown uVar86;
    unknown uVar87;
    unknown uVar88;
    unknown uVar89;
    unknown uVar90;
    unknown uVar91;
    unknown uVar92;
    unknown uVar93;
    unknown uVar94;
    unknown uVar95;
    unknown uVar96;
    unknown uVar97;
    unknown uVar98;
    unknown uVar99;
    unknown uVar100;
    unknown uVar101;
    int iVar102;

    array(ref uVar4._fU0, 8);
    ref uVar4;
    iVar102 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1691( 75, 0, 0 );
    for ( I = 0; I < iVar102; I++ )
    {
         /* MP_ARTDATA_RESETIPLDATASET */ sub_19915( ref uVar4 );
         /* SEV_MP_GETLEVELDATAIPLSETBYNODE */ sub_20101(  /* SEV_MP_GETLEVELDATANODE */ sub_2121( 75, I, 0 ), ref uVar4, 78 );
        if (bParam0)
        {
             /* MP_REMOVEANDLOGIPLSET */ sub_23030( uVar4, 0 );
        }
        else
        {
             /* MP_REMOVEIPLSET */ sub_20860( uVar4, 0 );
        }
    }
    return;
}

/* MP_REMOVEANDLOGIPLSET */ void sub_23030(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47, unknown uParam48, unknown uParam49, unknown uParam50, unknown uParam51, unknown uParam52, unknown uParam53, unknown uParam54, unknown uParam55, unknown uParam56, unknown uParam57, unknown uParam58, unknown uParam59, unknown uParam60, unknown uParam61, unknown uParam62, unknown uParam63, unknown uParam64, unknown uParam65, unknown uParam66, unknown uParam67, unknown uParam68, unknown uParam69, unknown uParam70, unknown uParam71, unknown uParam72, unknown uParam73, unknown uParam74, unknown uParam75, unknown uParam76, unknown uParam77, unknown uParam78, unknown uParam79, unknown uParam80, unknown uParam81, unknown uParam82, unknown uParam83, unknown uParam84, unknown uParam85, unknown uParam86, unknown uParam87, unknown uParam88, unknown uParam89, unknown uParam90, unknown uParam91, unknown uParam92, unknown uParam93, unknown uParam94, unknown uParam95, unknown uParam96, unknown uParam97, unknown uParam98)
{
    int I;
    int iVar102;

    iVar102 = uParam98;
    if (iVar102 == 3)
    {
        iVar102 = 1;
    }
    for ( I = 0; I < uParam0._fU388; I++ )
    {
        if (uParam0._fU0[I]._fU40)
        {
             /* MP_REQUESTANDLOGIPL */ sub_23199( uParam0._fU0[I]._fU0, iVar102, uParam0._fU0[I]._fU32, uParam0._fU0[I]._fU36, uParam0._fU0[I]._fU44 );
        }
        else
        {
             /* MP_REMOVEANDLOGIPL */ sub_24951( uParam0._fU0[I]._fU0, uParam98 );
        }
    }
    return;
}

/* MP_REQUESTANDLOGIPL */ void sub_23199(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    boolean bVar14;

    if (iParam8 == 3)
    {
        DISPLAYF( "mp_RequestAndLogIPL: Attempted to add something with an remove logType, aborting", 0 );
        return;
    }
    if (NOT (ARE_STRINGS_EQUAL( "", ref uParam0 )))
    {
        DISPLAYF( "mp_RequestAndLogIPL: {} with type {}", 2, 1281, ref uParam0, 513, iParam8 );
        bVar14 =  /* MP_ARTDATA_LOGIPL */ sub_23421( uParam0, iParam8, uParam9, uParam10 );
        if (((NOT bVar14) AND (iParam8 != 0)) || ((bVar14) AND (iParam8 == 0)))
        {
            DISPLAYF( "mp_RequestAndLogIPL: Log entry verification failed, aborting", 0 );
            return;
        }
         /* MP_REQUESTIPL */ sub_20995( uParam0, uParam9, uParam10, uParam11, iParam8 == 2 );
    }
    return;
}

/* MP_ARTDATA_LOGIPL */ int sub_23421(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    int iVar13;
    int iVar14;
    int I;

    iVar13 = -1;
    iVar14 = -1;
    for ( I = 0; I < 24; I++ )
    {
        if (iVar13 == -1)
        {
            if (iVar14 == -1)
            {
                if (g_U4198[I]._fU40 == 0)
                {
                    iVar14 = I;
                }
            }
            if (ARE_STRINGS_EQUAL( ref g_U4198[I]._fU0, ref uParam0 ))
            {
                iVar13 = I;
            }
        }
    }
    if (iVar13 != -1)
    {
        if (iParam8 == 0)
        {
            StrCopy( ref g_U4198[iVar13]._fU0, "", 32 );
            g_U4198[iVar13]._fU32 = 0;
            g_U4198[iVar13]._fU36 = 0;
            g_U4198[iVar13]._fU40 = 0;
            DISPLAYF( "mp_ArtData_LogIPL: Removing entry for IPL {}", 1, 1281, ref uParam0 );
            return 0;
        }
        else
        {
            g_U4198[iVar13]._fU40 = iParam8;
            DISPLAYF( "mp_ArtData_LogIPL: Updating entry for IPL {} to type {}", 2, 1281, ref uParam0, 513, iParam8 );
            return 1;
        }
    }
    if (iParam8 == 0)
    {
        return 0;
    }
    if (iVar14 != -1)
    {
        g_U4198[iVar14]._fU0 = {uParam0};
        g_U4198[iVar14]._fU32 = uParam9;
        g_U4198[iVar14]._fU36 = uParam10;
        g_U4198[iVar14]._fU40 = iParam8;
        DISPLAYF( "mp_ArtData_LogIPL: Adding entry for IPL {} in room {} with type {}", 3, 1281, ref uParam0, 513, uParam9, 513, iParam8 );
        return 1;
    }
    DISPLAYF( "WARNING: Tried to add IPL entry {} with type {} to ArtDataLog, but the log is full. Increase the log size in payne_gangwars_globals.sch (ART_NUM_DATALOGS)", 2, 1281, ref uParam0, 513, iParam8 );
    SCRIPT_ASSERT( "WARNING: Tried to add IPL entry {} with type {} to ArtDataLog, but the log is full. Increase the log size in payne_gangwars_globals.sch (ART_NUM_DATALOGS)", 2, 1281, ref uParam0, 513, iParam8 );
     /* MP_ARTDATA_DEBUGPRINTCONTENTS */ sub_24347();
    return 0;
}

/* MP_ARTDATA_DEBUGPRINTCONTENTS */ void sub_24347()
{
    int I;

     /* PUTS */ sub_19801( "Art Data Log contents ===============================" );
    for ( I = 0; I < 24; I++ )
    {
        if (g_U4198[I]._fU40 == 0)
        {
            DISPLAYF( "Entry #{} is empty", 1, 513, I );
        }
        else if (g_U4198[I]._fU40 == 3)
        {
            DISPLAYF( "Entry #{} IPL = {} is flagged as REMOVE", 2, 513, I, 1281, ref g_U4198[I]._fU0 );
        }
        else
        {
            DISPLAYF( "Entry #{} IPL = {} in room {} is flagged as ADD", 3, 513, I, 1281, ref g_U4198[I]._fU0, 513, g_U4198[I]._fU32 );
        }
    }
     /* PUTS */ sub_19801( "=====================================================" );
    return;
}

/* MP_REMOVEANDLOGIPL */ void sub_24951(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8)
{
    boolean bVar11;

    if ((iParam8 == 2) || (iParam8 == 1))
    {
        DISPLAYF( "mp_RemoveAndLogIPL: Attempted to remove something with an add logType, aborting", 0 );
        return;
    }
    if (NOT (ARE_STRINGS_EQUAL( "", ref uParam0 )))
    {
        DISPLAYF( "mp_RemoveAndLogIPL: {} with type {}", 2, 1281, ref uParam0, 513, iParam8 );
        bVar11 =  /* MP_ARTDATA_LOGIPL */ sub_23421( uParam0, iParam8, 0, 0 );
        if (((NOT bVar11) AND (iParam8 != 0)) || ((bVar11) AND (iParam8 == 0)))
        {
            DISPLAYF( "mp_RemoveAndLogIPL: Log entry verification failed, aborting", 0 );
            return;
        }
         /* MP_REMOVEIPL */ sub_21604( uParam0 );
    }
    return;
}

