void main()
{
    int iVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    g_U0 = 2;
    g_U1 = 4;
    g_U2 = 5;
    g_U3 = 7;
    g_U4 = 120000;
    g_U5 = 180000;
    g_U6 = 6000;
    g_U7 = 3000;
    g_U8 = 1500;
    g_U9 = 64036;
    g_U10 = 64036;
    g_U11 = 11;
    g_U12 = -6;
    g_U13 = -3;
    g_U14 = 3;
    g_U15 = 4;
    g_U16 = 30000;
    g_U17 = 90;
    g_U18 = 10;
    g_U19 = 5;
    g_U20 = 2;
    g_U21 = 1;
    g_U22 = 2;
    g_U23 = 5;
    g_U24 = 10;
    g_U25 = 10;
    g_U26 = 3;
    g_U27 = 10000;
    g_U28 = 10000;
    g_U29 = 400;
    g_U30 = 10000;
    g_U31 = 5.00000000;
    g_U32 = 100;
    g_U33 = 0.05000000;
    g_U34 = 1150;
    g_U35 = 50;
    g_U36 = 70;
    g_U37 = 100;
    g_U38 = 200;
    g_U39 = 250;
    g_U40 = 300;
    g_U41 = 3;
    g_U42 = 5;
    g_U43 = 10;
    g_U44 = 15;
    g_U45 = 20;
    g_U46 = 25;
    g_U47 = 50;
    g_U48 = 100;
    g_U49 = 150;
    g_U50 = 200;
    g_U51 = 5;
    g_U52 = 50;
    g_U53 = 250;
    g_U54 = 2500;
    g_U55 = 4000;
    g_U56 = 6000;
    g_U57 = 10000;
    g_U58 = 6000;
    g_U59 = 20000;
    g_U60 = 2.50000000;
    g_U61 = 10000;
    g_U62 = 3.50000000;
    g_U63 = 6;
    g_U64 = 1;
    g_U65 = 10000;
    g_U66 = 20000;
    g_U67 = 10000;
    g_U68 = 20000;
    g_U69 = 20000;
    g_U70 = 50;
    g_U71 = 20000;
    g_U72 = 10000;
    g_U73 = 30000;
    g_U74 = 20000;
    g_U75 = 10000;
    g_U76 = 20000;
    g_U77 = 20.00000000;
    g_U78 = 10;
    g_U79 = 1500;
    g_U80 = 10;
    g_U81 = 5;
    g_U82 = 10;
    g_U83 = 20;
    g_U84 = 10;
    g_U85 = 10;
    g_U86 = 20;
    g_U87 = 25;
    g_U88 = 10;
    g_U89 = 20;
    g_U90 = 5000;
    g_U91 = 20;
    g_U92 = 10;
    g_U93 = 10;
    g_U94 = 20;
    g_U95 = 30;
    g_U96 = 20;
    g_U97 = 25;
    g_U98 = 10;
    g_U99 = 10;
    g_U100 = 20;
    g_U101 = 10;
    g_U102 = 15;
    g_U103 = 15;
    g_U104 = 10;
    g_U105 = 5;
    g_U106 = 10;
    g_U107 = 5;
    g_U108 = 30;
    g_U109 = 20;
    g_U110 = 10;
    g_U111 = 5;
    g_U112 = 0.33334000;
    g_U113 = 1.00000000;
    g_U114 = 0.11111000;
    g_U115 = 0.20000000;
    g_U116 = 0.10000000;
    g_U2620 = 0;
    g_U2621 = -1;
    g_U2645 = -1;
    g_U4631 = 0;
    g_U4635 = 0;
    StrCopy( ref g_U4653, " ", 64 );
    g_U4669 = 0;
    g_U5253 = 0;
    g_U5275 = -1;
    g_U5277 = -1;
    g_U5447 = 1;
    g_U5452 = 10;
    g_U5453 = 20;
    g_U5454 = 30;
    g_U5455 = 10;
    g_U5456 = 10;
    g_U5457 = 10;
    g_U5458 = 10;
    g_U5459 = 10;
    g_U5460 = 20;
    g_U5461 = 10;
    g_U5462 = 30;
    g_U5463 = 10;
    g_U5464 = 10;
    g_U5465 = 20;
    g_U5466 = 10;
    g_U5467 = 20;
    g_U5468 = 10;
    g_U5469 = 5;
    g_U5470 = 20;
    g_U5471 = 50;
    g_U5472 = 10;
    g_U5473 = 20;
    g_U5474 = 10;
    g_U5475 = 5;
    g_U5476 = 20;
    g_U5477 = 20;
    g_U5478 = 50;
    g_U5479 = 100;
    g_U5480 = 125;
    g_U5481 = 15;
    g_U5482 = 30;
    g_U5483 = 50;
    g_U5484 = 100;
    g_U5485 = 100;
    g_U5486 = 10;
    g_U5487 = 20;
    g_U5488 = 20;
    g_U5489 = 20;
    g_U5490 = 5;
    g_U5491 = 25;
    g_U5492 = 20;
    g_U5493 = 20;
    g_U5494 = 10;
    g_U5495 = 20;
    g_U5496 = 20;
    g_U5497 = 20;
    g_U5498 = 10;
    g_U5499 = 10;
    g_U5500 = 20;
    g_U5501 = 75;
    g_U5502 = 75;
    g_U5503 = 200;
    g_U5504 = 200;
    g_U5505 = 20;
    g_U5506 = 10;
    g_U5507 = 10;
    g_U5508 = 200;
    g_U5509 = 25;
    g_U5510 = 25;
    g_U5511 = 75;
    g_U5512 = 150;
    g_U5513 = 0.20000000;
    g_U5514 = 0.20000000;
    g_U5515 = 0.10000000;
    g_U5516 = 0.10000000;
    g_U5517 = 0.10000000;
    g_U5518 = 0.10000000;
    g_U5519 = 0.10000000;
    g_U5520 = GET_STREAM_PED_PACK_ID( -1126833125 );
    g_U5521 = -1;
    g_U5522 = g_U2645;
    g_U5623 = 0;
    g_U5816 = -1;
    g_U5819 = 0;
    g_U5935 = 300;
    g_U5936 = 250;
    g_U5937 = 200;
    g_U5938 = 175;
    g_U5939 = 150;
    g_U5940 = 100;
    g_U5941 = 80;
    g_U5942 = 70;
    g_U5943 = 60;
    g_U5944 = 50;
    g_U5945 = 60;
    g_U5946 = 45;
    g_U5947 = 30;
    g_U5948 = 20;
    g_U5949 = 10;
    g_U5950 = 250;
    g_U6018 = 1;
    g_U6201 = -10;
    g_U6202 = -10;
    g_U6203 = -10;
    g_U6204 = -10;
    g_U6207 = 0;
    g_U6502 = 1;
    DISPLAYF( "NETWORK SCRIPT KICK IN: payne_gangwars.sc", 0 );
     /* SEV_MP_INITLEVELDATA */ sub_1603();
    iVar2 =  /* SEV_MP_GETGAMEMODE */ sub_8153();
    if (NOT DOES_MAIN_PLAYER_EXIST())
    {
        DISPLAYF( "Main Player does not exist. Creating a New player...", 0 );
        DISPLAYF( "Game mode = {}", 1, 513, iVar2 );
         /* SEV_GW_SELECTGANGWARSSTORY */ sub_8656( iVar2 );
         /* SEV_MP_SETTEAMIDS */ sub_9480( iVar2 );
         /* SEV_MP_CHECKFORTEAMIDOVERRIDESFROMLOBBY */ sub_10860();
        uVar3 = { /* SEV_MP_GETINITIALSPAWNLOCATION */ sub_11428()};
        if ((iVar2 == 1) || (iVar2 == 2))
        {
            CREATE_PLAYER_WITH_AVATAR( NETWORK_GET_AVATAR_SELECTED_DEATHMATCH_SLOT_HASH(), uVar3, 0 );
        }
        else
        {
            CREATE_PLAYER_WITH_AVATAR( NETWORK_GET_AVATAR_SELECTED_DEATHMATCH_SLOT_HASH(), uVar3, 0 );
        }
         /* SET_NET_PLAYER_CONTROL */ sub_11787( GET_PLAYER_ID(), 0, 0 );
    }
    SET_DEBUG_ACTIVE( 0 );
    FORCE_WEAPON_LOAD();
    WAIT( 0 );
     /* LOAD_AND_LAUNCH_SCRIPT */ sub_12187( "payne_mp_bot", 8192, 0, 1 );
    SET_DEFAULT_GLOBAL_INSTANCE_PRIORITY();
    LOAD_ALL_PATH_NODES( 1 );
     /* LOAD_AND_LAUNCH_SCRIPT */ sub_12187( "network_startup_body", 1536, 6, 1 );
    DISPLAYF( "END payne_gangwars.sc ", 0 );
    return;
}

/* SEV_MP_INITLEVELDATA */ void sub_1603()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    int I;
    unknown uVar9;
    int iVar10;

    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData()", 0 );
    NETWORK_DUMP_STORED_QUERIES();
    NETWORK_REQUIRE_STORED_QUERIES( "common:/data/networkleveldata_queries.txt" );
    g_U6208 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1743( 0, 0, 0 );
    g_U6210 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1743( 3, 0, 0 );
    g_U6216 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1743( 10, 0, 0 );
    g_U6211 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1743( 20, 0, 0 );
    g_U6214 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1743( 22, 0, 0 );
    g_U6215 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1743( 2, 0, 0 );
    g_U6213 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1743( 51, 0, 0 );
    g_U6212 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1743( 24, 0, 0 );
    g_U6209 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1743( 42, 0, 0 );
    g_U6217 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1743( 14, 0, 0 );
    uVar7 =  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 38, 0, 0 );
     /* SEV_MP_GETTIMEOFDAYSETTINGSBYNODE */ sub_2464( uVar7, ref uVar2, ref uVar3 );
    SET_TIME_OF_DAY( uVar2, 0 );
    FREEZE_TIME_OF_DAY( uVar2, 0 );
    CLEAR_WEATHER_TYPE_PERSIST();
    g_U4463 = {uVar3};
    SET_WEATHER_TYPE_NOW_PERSIST( ref g_U4463 );
    DISPLAYF( "sev_mp_InitLevelData() Setting default weather to hour {} and weather {}", 2, 513, uVar2, 1281, ref g_U4463 );
     /* SEV_MP_GETLEVELNAMES */ sub_2730( ref g_U4189._fU16, ref g_U4189._fU0 );
    g_U4189._fU32 = GET_HASH_KEY( ref g_U4189._fU16 );
     /* HUD_SCOREBOARD_SETARENA */ sub_2866( ref g_U4189._fU16 );
     /* SEV_MP_INITLEVELVEHICLES */ sub_2910();
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} spawn points loaded", 1, 513, g_U6208 );
    for ( I = 0; I < g_U6208; I++ )
    {
        uVar9 =  /* SEV_MP_GETSPAWNPOINTNODE */ sub_5570( I );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Spawn point {} is named {}{} and is at position {}", 4, 513,  /* SEV_MP_GETSPAWNPOINTINDEXBYNODE */ sub_5722( uVar9 ), 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2342( uVar9 ), 1281, ref g_U3274, 1027,  /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3080( uVar9 ) );
    }
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} spawn point groups loaded", 1, 513, g_U6210 );
    for ( I = 0; I < g_U6210; I++ )
    {
        uVar9 =  /* SEV_MP_GETSPGROUPNODE */ sub_5943( I );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Spawn point group {} is named {}{} and has {} spawnpoints", 4, 513, I, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2342( uVar9 ), 1281, ref g_U3274, 513,  /* SEV_MP_GETLEVELDATASIZEBYNODE */ sub_6148( uVar9, "PlayerSpawnGroupMember" ) );
    }
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} cutscene groups loaded", 1, 513, g_U6216 );
    for ( I = 0; I < g_U6216; I++ )
    {
        uVar9 =  /* SEV_MP_GETCUTSCENEGROUPNODE */ sub_6432( I );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Cutscene group {} is named {}{} and has {} marks", 4, 513, I, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2342( uVar9 ), 1281, ref g_U3274, 513,  /* SEV_MP_GETLEVELDATASIZEBYNODE */ sub_6148( uVar9, "CutsceneGroupMember" ) );
    }
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} territories points loaded", 1, 513, g_U6211 );
    for ( I = 0; I < g_U6211; I++ )
    {
        uVar9 =  /* SEV_MP_GETTERRITORYNODE */ sub_6759( I );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Territory {} is named {}{} and is at position {}", 4, 513, I, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2342( uVar9 ), 1281, ref g_U3274, 1027,  /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3080( uVar9 ) );
    }
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} pickups loaded", 1, 513, g_U6214 );
    for ( I = 0; I < g_U6214; I++ )
    {
        uVar9 =  /* SEV_MP_GETPICKUPNODE */ sub_7049( I );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Pickup {} is named {}{} and is at position {}", 4, 513, I, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2342( uVar9 ), 1281, ref g_U3274, 1027,  /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3080( uVar9 ) );
    }
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} spawn beacons loaded", 1, 513, g_U6215 );
    for ( I = 0; I < g_U6215; I++ )
    {
        uVar9 =  /* SEV_MP_GETSPAWNBEACONNODE */ sub_7339( I );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Spawn beacon {} is at position {} with radius {}", 3, 513, I, 1027,  /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3080( uVar9 ), 769,  /* SEV_MP_GETLEVELDATARADIUSBYNODE */ sub_7507( uVar9 ) );
    }
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} locations loaded", 1, 513, g_U6212 );
    for ( I = 0; I < g_U6212; I++ )
    {
        uVar9 =  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 24, I, 0 );
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Location {} is at position {} with radius {}", 3, 513, I, 1027,  /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3080( uVar9 ), 769,  /* SEV_MP_GETLEVELDATARADIUSBYNODE */ sub_7507( uVar9 ) );
    }
    iVar10 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERY */ sub_1743( 85, 0, 0 );
    DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() {} GW Stories loaded", 1, 513, iVar10 );
    for ( I = 0; I < iVar10; I++ )
    {
        DISPLAYF( "[LEVELDATA] sev_mp_InitLevelData() Story {} has {} nodes", 2, 513, I, 513,  /* SEV_MP_GETLEVELDATASIZEBYNODE */ sub_6148(  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 85, I, 0 ), "StoryNodes/StoryNode" ) );
    }
    return;
}

/* SEV_MP_GETLEVELDATASIZEFROMQUERY */ void sub_1743(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return  /* SEV_MP_GETLEVELDATASIZEFROMQUERYBYNODE */ sub_1799( g_U2645, uParam0, uParam1, uParam2 );
}

/* SEV_MP_GETLEVELDATASIZEFROMQUERYBYNODE */ void sub_1799(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown Result;

    Result = NETWORK_LEVEL_DATA_RUN_STORED_QUERY_COUNT( uParam0, uParam1, uParam2, uParam3 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataSizeFromQueryByNode() for query #{}, params {} and {}, and node {} is {}", 5, 513, uParam1, 513, uParam2, 513, uParam3, 1793, uParam0, 513, Result );
    return Result;
    return NETWORK_LEVEL_DATA_RUN_STORED_QUERY_COUNT( uParam0, uParam1, uParam2, uParam3 );
}

/* SEV_MP_GETLEVELDATANODE */ void sub_2173(unknown uParam0, unknown uParam1, unknown uParam2)
{
    unknown Result;

    Result = NETWORK_LEVEL_DATA_RUN_STORED_QUERY_NODE( g_U2645, uParam0, uParam1, uParam2 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataNode() Query #{} with params {} and {} returned node ", 6, 513, uParam0, 513, uParam1, 513, uParam2, 1793, Result, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2342( Result ), 1281, ref g_U3274 );
    return Result;
}

/* SEV_MP_GETLEVELDATANAMEBYNODE */ string sub_2342(unknown uParam0)
{
    if (NOT (NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 64, ref g_U3274, ":name", uParam0 )))
    {
        StrCopy( ref g_U3274, "", 64 );
    }
    return "";
}

/* SEV_MP_GETTIMEOFDAYSETTINGSBYNODE */ int sub_2464(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NETWORK_LEVEL_DATA_GET_INT_FROM_NODE( uParam1, ":hour", uParam0 ))
    {
        if (NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 16, uParam2, ":weather", uParam0 ))
        {
            return 1;
        }
    }
    return 0;
}

/* SEV_MP_GETLEVELNAMES */ void sub_2730(unknown uParam0, unknown uParam1)
{
    unknown uVar4;

    uVar4 =  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 30, 0, 0 );
    NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 16, uParam0, ":levelName", uVar4 );
    NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 16, uParam1, ":levelNameShort", uVar4 );
    return;
}

/* HUD_SCOREBOARD_SETARENA */ void sub_2866(unknown uParam0)
{
    return;
}

/* SEV_MP_INITLEVELVEHICLES */ void sub_2910()
{
    int iVar2;
    int iVar3;
    int J;
    int I;
    unknown uVar6;
    unknown uVar7;
    int iVar8;
    int iVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int iVar13;
    int iVar14;
    unknown uVar15;
    char[32] cVar16;
    int iVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    char[32] cVar28;

    DISPLAYF( "sev_mp_InitLevelVehicles() Loading {} vehicles", 1, 513, g_U6209 );
    for ( J = 0; J < g_U6209; J++ )
    {
        iVar2 =  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 42, J, 0 );
        if (iVar2 != g_U2645)
        {
            if (NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( ref uVar6, ":model", iVar2 ))
            {
                uVar10 = { /* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ sub_3080( iVar2 )};
                uVar15 =  /* SEV_MP_GETLEVELDATAHEADINGBYNODE */ sub_3242( iVar2 );
                if (NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE( ref uVar7, ":autospawn", iVar2 ))
                {
                    iVar13 =  /* INT_TO_BOOL */ sub_3431( uVar7 );
                }
                else
                {
                    iVar13 = 0;
                }
                if (NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE( ref uVar7, ":nodestroy", iVar2 ))
                {
                    iVar14 =  /* INT_TO_BOOL */ sub_3431( uVar7 );
                }
                else
                {
                    iVar14 = 0;
                }
                if (NOT (NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 32, ref cVar16, ":milo", iVar2 )))
                {
                    StrCopy( ref cVar16, "", 32 );
                }
                if (NOT (NETWORK_LEVEL_DATA_GET_INT_FROM_NODE( ref iVar9, ":colour", iVar2 )))
                {
                    iVar9 = -1;
                }
                if (NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE( ref uVar7, ":frozen", iVar2 ))
                {
                    iVar24 =  /* INT_TO_BOOL */ sub_3431( uVar7 );
                }
                else
                {
                    iVar24 = 0;
                }
                if (NOT (NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE( 32, ref cVar28, ":name", iVar2 )))
                {
                    StrCopy( ref cVar28, "", 32 );
                }
                DISPLAYF( "sev_mp_InitLevelVehicles() Adding vehicle #{} as '{}' at pos {} with heading {}, colour {}, autoSpawn {}, noDamage {}, room '{}' and frozen {}", 9, 513, J, 1281, ref cVar28, 1027, uVar10, 769, uVar15, 513, iVar9, 257, iVar13, 257, iVar14, 1281, ref cVar16, 257, iVar24 );
                g_U6218[J] = { /* SEV_VEHICLECREATE */ sub_3911( J, ref cVar28, uVar10, uVar15, iVar9, iVar13, iVar14, ref cVar16, iVar24 )};
                g_U6218[J]._fU52 = uVar6;
                iVar8 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERYBYNODE */ sub_1799( iVar2, 44, 0, 0 );
                for ( I = 0; I < iVar8; I++ )
                {
                    if (NETWORK_LEVEL_DATA_RUN_STORED_QUERY_INT( ref uVar7, iVar2, 44, I, 0 ))
                    {
                        DISPLAYF( "sev_mp_InitLevelVehicles() Enabling extra {} on vehicle {}", 2, 513, uVar7, 513, J );
                         /* SEV_VEHICLEENABLEEXTRA */ sub_4342( J, uVar7 );
                    }
                }
                if (NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( ref uVar6, ":name", iVar2 ))
                {
                    iVar3 =  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 45, uVar6, 0 );
                    if (iVar3 != g_U2645)
                    {
                        iVar8 =  /* SEV_MP_GETLEVELDATASIZEFROMQUERYBYNODE */ sub_1799( iVar3, 41, 0, 0 );
                        for ( I = 0; I < iVar8; I++ )
                        {
                            if (g_U6218[J]._fU140 < 4)
                            {
                                if ( /* SEV_MP_GETSPATIALDATAMODULEBYNODE */ sub_4525( iVar3, I, ref uVar25 ))
                                {
                                    g_U6218[J]._fU88[g_U6218[J]._fU140] = {uVar25};
                                    g_U6218[J]._fU140++;
                                }
                            }
                        }
                        DISPLAYF( "sev_mp_InitLevelVehicles() Added {} spatial data entries for vehicle {}", 2, 513, g_U6218[J]._fU140, 513, J );
                    }
                }
            }
            else
            {
                DISPLAYF( "sev_mp_InitLevelVehicles() Unable to load a model name for vehicle '{}{}', ignoring", 2, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2342( iVar2 ), 1281, ref g_U3274 );
            }
        }
    }
    return;
}

/* SEV_MP_GETLEVELDATAPOSITIONBYNODE */ void sub_3080(unknown uParam0)
{
    unknown Result;
    unknown uVar4;
    unknown uVar5;

    NETWORK_LEVEL_DATA_GET_VECTOR_FROM_NODE( ref Result, ":pos", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataPositionByNode()", 3, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2342( uParam0 ), 1281, ref g_U3274, 1027, Result );
    return Result;
}

/* SEV_MP_GETLEVELDATAHEADINGBYNODE */ void sub_3242(unknown uParam0)
{
    unknown Result;

    NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( ref Result, ":heading", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataHeadingByNode()", 3, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2342( uParam0 ), 1281, ref g_U3274, 769, Result );
    return Result;
}

/* INT_TO_BOOL */ int sub_3431(int iParam0)
{
    if (iParam0 > 0)
    {
        return 1;
    }
    return 0;
}

/* SEV_VEHICLECREATE */ void sub_3911(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;
    unknown uVar45;
    unknown uVar46;
    unknown uVar47;
    unknown uVar48;

    array(ref Result._fU88, 4);
    ref Result;
    StrCopy( ref Result._fU0, uParam1, 32 );
    Result._fU32 =  /* SEV_ID_TO_VEHICLE */ sub_3966( iParam0 + 300 );
    Result._fU36 = {uParam2};
    Result._fU48 = uParam5 - 90;
    Result._fU56 = -1;
    Result._fU68 = uParam10;
    Result._fU60 = 0;
    Result._fU64 = uParam6;
    Result._fU72 = uParam7;
    Result._fU76 = 0;
    Result._fU80 = uParam8;
    if (NOT (ARE_STRINGS_EQUAL( uParam9, "" )))
    {
        Result._fU84 = GET_HASH_KEY( uParam9 );
    }
    else
    {
        Result._fU84 = 0;
    }
    Result._fU140 = 0;
    return Result;
}

/* SEV_ID_TO_VEHICLE */ void sub_3966(unknown uParam0)
{
    return SEV_ID_TO_INDEX( uParam0 );
}

/* SEV_VEHICLEENABLEEXTRA */ void sub_4342(unknown uParam0, unknown uParam1)
{
    SET_BIT( ref g_U6218[uParam0]._fU60, uParam1 );
    return;
}

/* SEV_MP_GETSPATIALDATAMODULEBYNODE */ int sub_4525(unknown uParam0, unknown uParam1, int iParam2)
{
    int iVar5;
    unknown uVar6;

    iVar5 =  /* SEV_MP_GETLEVELDATANODEBYNODE */ sub_4579( uParam0, 41, uParam1, 0 );
    if (iVar5 != g_U2645)
    {
        if (NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( iParam2 + 4, ":sectionID", iVar5 ))
        {
            if (NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( iParam2 + 0, ":uid", iVar5 ))
            {
                if (NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE( ref uVar6, ":enable", iVar5 ))
                {
                    iParam2->_fU8 =  /* INT_TO_BOOL */ sub_3431( uVar6 );
                }
                else
                {
                    iParam2->_fU8 = 0;
                }
                DISPLAYF( "[LEVELDATA] sev_mp_GetSpatialDataNormalLineByNode() Found entry sectionID {}, UID {} and enable {}", 3, 513, iParam2->_fU4, 513, iParam2->_fU0, 257, iParam2->_fU8 );
                return 1;
            }
        }
    }
    DISPLAYF( "[LEVELDATA] sev_mp_GetSpatialDataNormalLineByNode() Failed to find a valid normal line entry", 0 );
    return 0;
}

/* SEV_MP_GETLEVELDATANODEBYNODE */ void sub_4579(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown Result;

    Result = NETWORK_LEVEL_DATA_RUN_STORED_QUERY_NODE( uParam0, uParam1, uParam2, uParam3 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataNode() Query #{} with params {} and {} returned node ", 6, 513, uParam1, 513, uParam2, 513, uParam3, 1793, Result, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2342( Result ), 1281, ref g_U3274 );
    return Result;
}

/* SEV_MP_GETSPAWNPOINTNODE */ void sub_5570(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 0, uParam0, 0 );
}

/* SEV_MP_GETSPAWNPOINTINDEXBYNODE */ int sub_5722(unknown uParam0)
{
    return (g_U6208 - (NETWORK_LEVEL_DATA_GET_SIBLING_COUNT_AFTER_NODE( uParam0 ))) - 1;
}

/* SEV_MP_GETSPGROUPNODE */ void sub_5943(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 3, uParam0, 0 );
}

/* SEV_MP_GETLEVELDATASIZEBYNODE */ void sub_6148(unknown uParam0, unknown uParam1)
{
    unknown Result;

    Result = NETWORK_LEVEL_DATA_GET_NUM_NODES_FROM_NODE( uParam1, uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataSizeByNode() for query '{}' is {}", 2, 1537, uParam1, 513, Result );
    return Result;
    return NETWORK_LEVEL_DATA_GET_NUM_NODES_FROM_NODE( uParam1, uParam0 );
}

/* SEV_MP_GETCUTSCENEGROUPNODE */ void sub_6432(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 10, uParam0, 0 );
}

/* SEV_MP_GETTERRITORYNODE */ void sub_6759(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 20, uParam0, 0 );
}

/* SEV_MP_GETPICKUPNODE */ void sub_7049(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 22, uParam0, 0 );
}

/* SEV_MP_GETSPAWNBEACONNODE */ void sub_7339(unknown uParam0)
{
    return  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 2, uParam0, 0 );
}

/* SEV_MP_GETLEVELDATARADIUSBYNODE */ void sub_7507(unknown uParam0)
{
    unknown Result;

    NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE( ref Result, ":radius", uParam0 );
    DISPLAYF( "[LEVELDATA] sev_mp_GetLevelDataRadiusByNode()", 3, 1537,  /* SEV_MP_GETLEVELDATANAMEBYNODE */ sub_2342( uParam0 ), 1281, ref g_U3274, 769, Result );
    return Result;
}

/* SEV_MP_GETGAMEMODE */ void sub_8153()
{
    if (g_U117._fU4)
    {
        return g_U117._fU8;
        break;
    }
    if (IS_THIS_THREAD_CONNECTED())
    {
        DISPLAYF( "sev_mp_GetGameMode() directly from observation", 0 );
    }
    else
    {
        SCRIPT_ASSERT( "sev_mp_GetGameMode() ERROR: observation on an isolated thread when we didn't ask before, probably will go wrong!", 0 );
        DISPLAYF( "sev_mp_GetGameMode() ERROR: observation on an isolated thread when we didn't ask before, probably will go wrong!", 0 );
    }
    return LOBBY_GET_SELECTED_GAME_MODE();
}

/* SEV_GW_SELECTGANGWARSSTORY */ void sub_8656(int iParam0)
{
    if (iParam0 != 2)
    {
         /* PUTS */ sub_8760( "sev_mp_SelectGangwarsStory() - not Gang Wars, exiting" );
        g_U5521 = -1;
        return;
    }
    g_U5521 =  /* SEV_MP_GETLOBBYOPTIONVALUE */ sub_8811( 24 );
    DISPLAYF( "Lobby option LOBBY_OPT_GW_GAMEMODE = {}", 1, 513, g_U5521 );
    if ((g_U5521 >= 27) || (g_U5521 < 0))
    {
        g_U5521 = 1;
        DISPLAYF( "sev_mp_SelectGangwarsStory() - default story -", 1, 513, g_U5521 );
    }
    else
    {
        DISPLAYF( "sev_mp_SelectGangwarsStory() - chosen story =", 1, 513, g_U5521 );
    }
    return;
}

/* PUTS */ void sub_8760(unknown uParam0)
{
    DISPLAYF( "", 1, 1537, uParam0 );
    return;
}

/* SEV_MP_GETLOBBYOPTIONVALUE */ void sub_8811(unknown uParam0)
{
    if (g_U117._fU4)
    {
        return g_U117._fU12[uParam0];
        break;
    }
    if (IS_THIS_THREAD_CONNECTED())
    {
        DISPLAYF( "sev_mp_GetLobbyOptionValue() directly from observation", 0 );
    }
    else
    {
        SCRIPT_ASSERT( "sev_mp_GetLobbyOptionValue() ERROR: observation on an isolated thread when we didn't ask before, probably will go wrong!", 0 );
        DISPLAYF( "sev_mp_GetLobbyOptionValue() ERROR: observation on an isolated thread when we didn't ask before, probably will go wrong!", 0 );
    }
    return LOBBY_GET_OPTION_VALUE(  /* SEV_MP_GETGAMEMODE */ sub_8153(), uParam0 );
}

/* SEV_MP_SETTEAMIDS */ void sub_9480(unknown uParam0)
{
    int iVar3;
    int iVar4;

    if (NOT ( /* SEV_MP_GETPLAYERMODELS */ sub_9514( uParam0, ref iVar3, ref iVar4 )))
    {
        iVar3 = -490519477;
        iVar4 = -685981850;
    }
     /* SEV_MP_SETTEAMID */ sub_10387( 0, iVar3 );
     /* SEV_MP_SETTEAMID */ sub_10387( 1, iVar4 );
    return;
}

/* SEV_MP_GETPLAYERMODELS */ int sub_9514(int iParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    if (iParam0 == 2)
    {
        iVar5 =  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 34, g_U5521 - 1, 0 );
        if ((iVar5 != nil) AND (iVar5 != g_U2645))
        {
            if ( /* SEV_MP_GETPLAYERMODELSBYNODE */ sub_9601( iVar5, uParam1, uParam2 ))
            {
                return 1;
            }
        }
        DISPLAYF( "[LEVELDATA] sev_mp_GetPlayerModels() Failed to find a valid story-specific set of models, trying to grab the default story set", 0 );
        iVar5 =  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 32, 0, 0 );
        if ((iVar5 != nil) AND (iVar5 != g_U2645))
        {
            if ( /* SEV_MP_GETPLAYERMODELSBYNODE */ sub_9601( iVar5, uParam1, uParam2 ))
            {
                return 1;
            }
        }
        DISPLAYF( "[LEVELDATA] sev_mp_GetPlayerModels() Failed to find a valid default set of story models, trying to grab the default set", 0 );
    }
    iVar5 =  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 31, 0, 0 );
    if ((iVar5 != nil) AND (iVar5 != g_U2645))
    {
        if ( /* SEV_MP_GETPLAYERMODELSBYNODE */ sub_9601( iVar5, uParam1, uParam2 ))
        {
            return 1;
        }
    }
    DISPLAYF( "[LEVELDATA] sev_mp_GetPlayerModels() Failed to find a valid default set of models, setting to invalid", 0 );
    return 0;
}

/* SEV_MP_GETPLAYERMODELSBYNODE */ int sub_9601(unknown uParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;

    if (NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( ref uVar5, ":teamA", uParam0 ))
    {
        (uParam1^) = uVar5;
        DISPLAYF( "[LEVELDATA] sev_mp_GetPlayerModelsByNode() Found Team A of {}", 1, 513, uVar5 );
        if (NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE( ref uVar5, ":teamB", uParam0 ))
        {
            (uParam2^) = uVar5;
            DISPLAYF( "[LEVELDATA] sev_mp_GetPlayerModelsByNode() Found Team B of {}", 1, 513, uVar5 );
            return 1;
        }
    }
    return 0;
}

/* SEV_MP_SETTEAMID */ void sub_10387(unknown uParam0, unknown uParam1)
{
    if (NOT ( /* SEV_MP_ISTEAMINDEXVALID */ sub_10421( uParam0, 1, 1, 0 )))
    {
        return;
    }
    DISPLAYF( "sev_mp_SetTeamID() Setting Team {}'s ID to {}", 2, 513, uParam0, 513, uParam1 );
    g_U1060[uParam0]._fU4 = uParam1;
    return;
}

/* SEV_MP_ISTEAMINDEXVALID */ int sub_10421(int iParam0, boolean bParam1, boolean bParam2, unknown uParam3)
{
    char[64] cVar6;
    char[128] cVar22;

    if ((iParam0 >= 2) || (iParam0 < 0))
    {
        if ((bParam2) || (bParam1))
        {
            StrCopy( ref cVar6, "sev_mp_IsTeamIndexValid - ERROR: iTeam out of bounds: ", 64 );
            ConcatString(ref cVar6, iParam0, 64);
            if (bParam1)
            {
                 /* PUTS */ sub_8760( ref cVar6 );
            }
            if (bParam2)
            {
                SCRIPT_ASSERT( ref cVar6, 0 );
            }
        }
        return 0;
    }
    if ((g_U1060[iParam0]._fU0 == 0) AND (uParam3))
    {
        if ((bParam2) || (bParam1))
        {
            StrCopy( ref cVar22, "sev_mp_IsTeamIndexValid - ERROR: iTeam is not active: ", 128 );
            ConcatString(ref cVar22, iParam0, 128);
            ConcatString(ref cVar22, " has ", 128);
            ConcatString(ref cVar22, g_U1060[iParam0]._fU20, 128);
            if (bParam1)
            {
                 /* PUTS */ sub_8760( ref cVar22 );
            }
            if (bParam2)
            {
                SCRIPT_ASSERT( ref cVar22, 0 );
            }
        }
        return 0;
    }
    return 1;
}

/* SEV_MP_CHECKFORTEAMIDOVERRIDESFROMLOBBY */ void sub_10860()
{
     /* SEV_MP_CHECKFORTEAMIDOVERRIDEFROMLOBBY */ sub_10914( 0, 8 );
     /* SEV_MP_CHECKFORTEAMIDOVERRIDEFROMLOBBY */ sub_10914( 1, 2 );
    return;
}

/* SEV_MP_CHECKFORTEAMIDOVERRIDEFROMLOBBY */ void sub_10914(unknown uParam0, unknown uParam1)
{
    unknown uVar4;

    uVar4 =  /* SEV_MP_GETLOBBYOPTIONVALUE */ sub_8811( uParam1 );
    DISPLAYF( "TeamIDOverride - team {}, lobby option {}, set to {}", 3, 513, uParam0, 513, uParam1, 513, uVar4 );
    switch (uVar4)
    {
        default:
          case 0: break;
        case 1:
        g_U1060[uParam0]._fU4 = -685981850;
        break;
        case 2:
        g_U1060[uParam0]._fU4 = 1761086916;
        break;
        case 3:
        g_U1060[uParam0]._fU4 = -490519477;
        break;
        case 4:
        g_U1060[uParam0]._fU4 = -1615069372;
        break;
        case 5:
        g_U1060[uParam0]._fU4 = 1832091570;
        break;
        case 6:
        g_U1060[uParam0]._fU4 = 65927786;
        break;
        case 7:
        g_U1060[uParam0]._fU4 = -2061490738;
        break;
        case 8:
        g_U1060[uParam0]._fU4 = 2112275182;
        break;
        case 9:
        g_U1060[uParam0]._fU4 = -1871174663;
        break;
    }
    DISPLAYF( "Team ID after override is {} for team {}", 2, 513, g_U1060[uParam0]._fU4, 513, uParam0 );
    return;
}

/* SEV_MP_GETINITIALSPAWNLOCATION */ vector sub_11428()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;

    if (NETWORK_LEVEL_DATA_GET_VECTOR_FROM_NODE( ref Result, ":startLocation",  /* SEV_MP_GETLEVELDATANODE */ sub_2173( 30, 0, 0 ) ))
    {
        DISPLAYF( "[LEVELDATA] sev_mp_GetInitialSpawnLocation() Returning position {}", 1, 1027, Result );
        return Result;
        break;
    }
    DISPLAYF( "[LEVELDATA] sev_mp_GetInitialSpawnLocation() Returning default position of {}", 1, 1027, 0, 0, 65486 );
    return vector( 0, 0, 65486);
}

/* SET_NET_PLAYER_CONTROL */ void sub_11787(unknown uParam0, boolean bParam1, unknown uParam2)
{
    SET_PLAYER_CONTROL_FOR_NETWORK(  /* PLAYERS_ID */ sub_11824( uParam0 ), bParam1, 0 );
    SET_PED_VISIBLE(  /* PLAYERS_PED_ID */ sub_11876( uParam0 ), uParam2 );
    if (bParam1)
    {
        if (NOT (IS_PED_IN_ANY_VEHICLE(  /* PLAYERS_PED_ID */ sub_11876( uParam0 ) )))
        {
            SET_PED_COLLISION(  /* PLAYERS_PED_ID */ sub_11876( uParam0 ), 1 );
        }
        FREEZE_PED_POSITION(  /* PLAYERS_PED_ID */ sub_11876( uParam0 ), 0 );
        SET_PED_CAN_BE_TARGETTED(  /* PLAYERS_PED_ID */ sub_11876( uParam0 ), 0 );
        SET_PLAYER_INVINCIBLE(  /* PLAYERS_ID */ sub_11824( uParam0 ), 0 );
    }
    else
    {
        SET_PED_COLLISION(  /* PLAYERS_PED_ID */ sub_11876( uParam0 ), 0 );
        FREEZE_PED_POSITION(  /* PLAYERS_PED_ID */ sub_11876( uParam0 ), 1 );
        SET_PED_CAN_BE_TARGETTED(  /* PLAYERS_PED_ID */ sub_11876( uParam0 ), 1 );
        SET_PLAYER_INVINCIBLE(  /* PLAYERS_ID */ sub_11824( uParam0 ), 1 );
        REMOVE_PARTICLE_FX_FROM_PED(  /* PLAYERS_PED_ID */ sub_11876( uParam0 ) );
        if (NOT (IS_PED_FATALLY_INJURED(  /* PLAYERS_PED_ID */ sub_11876( uParam0 ) )))
        {
            CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYERS_PED_ID */ sub_11876( uParam0 ) );
        }
    }
    return;
}

/* PLAYERS_ID */ void sub_11824(unknown uParam0)
{
    return INT_TO_PLAYERINDEX( uParam0 );
}

/* PLAYERS_PED_ID */ void sub_11876(unknown uParam0)
{
    return GET_PLAYER_PED( INT_TO_PLAYERINDEX( uParam0 ) );
}

/* LOAD_AND_LAUNCH_SCRIPT */ void sub_12187(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    REQUEST_SCRIPT( uParam0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_SCRIPT_LOADED( uParam0 )))
    {
        SEV_YIELD();
    }
    if (bParam3)
    {
        START_NEW_SCRIPT_TYPED( uParam0, uParam1, uParam2 );
    }
    else
    {
        START_NEW_SCRIPT( uParam0, uParam1 );
    }
    return;
}

