void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U39 = -1;
    l_U40 = {64536, 64536, 64536};
    l_U44 = 0;
    l_U45 = 0;
    l_U46 = 1500;
    l_U125 = 0;
    l_U127 = 1;
    l_U128 = 0;
    l_U156 = 0;
    l_U282 = {-4.20000000, 67.10000000, 11.99500000};
    l_U285 = 290.00000000;
    l_U380 = 0;
     /* WRITESCRIPTLOG */ sub_375( "SP", "Script stad_FirstBleachers.sc is starting up...", 0 );
     /* P_FB_POPULATE_VARIABLE_ARRAYS */ sub_493();
    l_U125 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_827();
        if (l_U128 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_11285();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_FB */ sub_3562( 0 );
     /* P_RELEASE_FB_ASSETS */ sub_59666();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "stad_FirstBleachers" );
     /* WRITESCRIPTLOG */ sub_375( "SP", "Script stad_FirstBleachers.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_375(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_FB_POPULATE_VARIABLE_ARRAYS */ void sub_493()
{
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_FB_POPULATE_VARIABLE_ARRAYS start", 0 );
    l_U110[0] = g_U2390;
    l_U110[1] = -1652775333;
    l_U110[2] = 1816766229;
    l_U110[3] = 1873472982;
    l_U110[4] = -1993976541;
    l_U110[5] = -2096019114;
    l_U110[6] = g_U2385;
    l_U110[7] = g_U2378;
    l_U110[8] = g_U850;
    l_U120[0] = 1194438308;
    l_U120[1] = -2075384407;
    l_U120[2] = -389125832;
    l_U120[3] = 434544317;
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_FB_POPULATE_VARIABLE_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_827()
{
    if (g_U855 == 7)
    {
        switch (l_U128)
        {
            case 0:
            if ((((IS_PED_DEAD( g_U4371 )) == 1) AND ((DOES_PED_EXIST( g_U4371 )) == 1)) || (( /* RESTARTING_CHECKPOINT */ sub_1029()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() ))))
            {
                AUDIO_MUSIC_SUSPEND( 4000 );
                if ((IS_BULLET_CAMERA_TO_GAMEPLAY_ALLOWED()) AND (IS_PED_DEAD( g_U4371 )))
                {
                    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
                    BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
                }
                l_U128 = 1;
                 /* WRITESCRIPTLOG */ sub_375( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_1629())
            {
                l_U128 = 2;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_1689( 0 )) == 1)
            {
                l_U128 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
            {
                if ((g_U888[8]._fU40 != 4) AND (g_U888[8]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_375( "CR", "Shutting down script for MCE_BLEACHERS2.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_3260( ref g_U888[8] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U888[8]._fU32 );
                }
                l_U128 = 3;
                 /* WRITESCRIPTLOG */ sub_375( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_375( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_966() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_966(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_928() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_928(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
             /* P_CLEANUP_FB */ sub_3562( 1 );
            l_U128 = 4;
             /* WRITESCRIPTLOG */ sub_375( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_375( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U74._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_6603( ref l_U74,  /* PLAYER_PED_ID */ sub_928() );
            }
            l_U128 = 5;
             /* WRITESCRIPTLOG */ sub_375( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_375( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U125 = 1;
            l_U127 = 0;
            l_U128 = 0;
             /* WRITESCRIPTLOG */ sub_375( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_928()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_966() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_966()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1029()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_928(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_966(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_966(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_928() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_928(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_1629()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_1689(int iParam0)
{
    iParam0 = 1;
    switch (l_U45)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_1771( ref l_U47 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
            {
                l_U46 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1905( ref l_U47, l_U46, 1, 1 );
             /* STARTTIMER */ sub_2055( ref l_U47 );
        }
        if ( /* ISTIMERDONE */ sub_2188( ref l_U47 ))
        {
             /* WRITESCRIPTLOG */ sub_375( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_966() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_966(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U45 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U45 = 2;
            }
            else
            {
                l_U45 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_375( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_2689();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_375( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_2689();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_1771(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_1905(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2055(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2188(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_2689()
{
     /* WRITESCRIPTLOG */ sub_375( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_2764( ref l_U47 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_966() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_966(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U44 = 0;
    l_U44 = l_U44;
    l_U45 = 0;
    return;
}

/* RESETTIMER */ void sub_2764(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_3260(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_FB */ void sub_3562(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_CLEANUP_FB start", 0 );
    ISEQ_TERMINATE( 1410429600 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3640( 1410429600, ref g_U1263 );
    ISEQ_TERMINATE( 2062510625 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3640( 2062510625, ref g_U1263 );
    ISEQ_TERMINATE( -1247518834 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3640( -1247518834, ref g_U1263 );
    ISEQ_TERMINATE( 1600959260 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3640( 1600959260, ref g_U1263 );
     /* P_STREAMREQ_SCRIPT_STREAM_STOP */ sub_4809( "S_STAD_03_03_BLENDOUT", ref g_U2034 );
     /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_5602( "S_STAD_03_03_BLENDOUT", ref g_U2034 );
    if ((CUTSCENE_NAMED_IS_LOADING( "03_03_STADIUM" )) || (CUTSCENE_IS_LOADED( "03_03_STADIUM" )))
    {
        CLEAR_NAMED_CUTSCENE( "03_03_STADIUM" );
    }
    if (bParam0)
    {
        ENABLE_SHOOT_DODGE_HIGH_FALL_STAIRS_DETECTION( 0 );
         /* MAL_ESA_CLEAN */ sub_6041( ref g_U4193 );
         /* MAL_ESA_CLEAN */ sub_6041( ref g_U4282 );
        ISEQ_TERMINATE( -1414847258 );
         /* P_STREAMREQ_ISEQ_REMOVE */ sub_3640( -1414847258, ref g_U1263 );
        RESET_PED_MODEL_LOD_DISTANCES( g_U2385 );
         /* CLEANPED */ sub_6119( g_U4371 );
    }
     /* CLEANPED */ sub_6119( l_U268 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_966() )))
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
        {
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_966(), 0, 0 );
        }
    }
     /* P_STOP_SP_CHALLENGES */ sub_6358( bParam0 );
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_CLEANUP_FB end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_3640(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3778( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_3778(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_STOP */ void sub_4809(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_4859( uParam0, uParam1 ))
    {
        iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_5068( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            DISPLAYF( "[CCB]### Stopping the SCRIPT_STREAM: {} ###", 1, 1281, ref (uParam1^)[iVar4]._fU0 );
            STOP_SCRIPT_STREAM( iVar4 );
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam0 );
            SCRIPT_ASSERT( "Attempting to stop a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam0 );
        DISPLAYF( "Attempting to stop a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ int sub_4859(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB]### The SCRIPT_STREAM is loaded: {} ###", 1, 1281, ref (uParam1^)[I]._fU0 );
                return 1;
            }
        }
    }
    return 0;
}

/* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ int sub_5068(unknown uParam0, unknown uParam1)
{
    int Result;

    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
        {
            return Result;
        }
    }
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ void sub_5602(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3778( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a SCRIPT_STREAM asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* MAL_ESA_CLEAN */ void sub_6041(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_ES_CLEAN */ sub_6089( ref (uParam0^)[I] );
    }
    return;
}

/* MAL_ES_CLEAN */ void sub_6089(int iParam0)
{
     /* CLEANPED */ sub_6119( iParam0->_fU0 );
    iParam0->_fU172 = 0;
    return;
}

/* CLEANPED */ void sub_6119(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_6358(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_375( "CCB", "P_STOP_SP_CHALLENGES", 0 );
    if (bParam0)
    {
        ;
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_6603(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_375( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_6822( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_7986( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8300( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8779( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8300( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8779( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8300( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8779( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9095( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8779( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9095( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8779( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_9667( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_9869( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_928(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_375( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_6822(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6884( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_6884(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_7986(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_8300(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_8704( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_8704(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_8779(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_9095(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_8704( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_9667(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_9869(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6884( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_9967( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_9967(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_11285()
{
    int iVar2;

    iVar2 = l_U125;
    switch (l_U125)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_375( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_11483();
         /* P_SET_STATIC_DATA */ sub_12201();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U125 = 2;
         /* WRITESCRIPTLOG */ sub_375( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_375( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_FB_PERSISTENT_ASSETS */ sub_13670();
         /* P_REQUEST_FB_NONPERSISTENT_ASSETS */ sub_22036();
        l_U125 = 3;
         /* WRITESCRIPTLOG */ sub_375( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ sub_29269( ref g_U2034 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_28855( ref g_U1263 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_28464( ref g_U1354 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_28062( ref g_U1214 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_27665( ref g_U1069 ))))))
        {
            if ((IS_MAGDEMO()) || ((NOT l_U74._fU0) AND (g_U854 == 7)))
            {
                l_U125 = 4;
                 /* WRITESCRIPTLOG */ sub_375( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U125 = 6;
                 /* WRITESCRIPTLOG */ sub_375( "SP", "eCheckpointState = CP_FB_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_375( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U3879 = 1;
        l_U127 = 0;
        FREEZE_TIME_OF_DAY( 21, 0 );
        SET_WEATHER_TYPE_NOW_PERSIST( "CLOUDY" );
        if ((IS_MAGDEMO()) || (( /* HAS_SAVEFILE_LOADED */ sub_29922( ref l_U74 )) == 0))
        {
            if (IS_MAGDEMO())
            {
                REMOVE_ALL_PED_WEAPONS(  /* PLAYER_PED_ID */ sub_928() );
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
                CLEAR_AREA( g_U649, 10000.00000000, 1 );
                g_U3883 = 0;
                g_U3884 = 0;
                SET_PED_HEALTH(  /* PLAYER_PED_ID */ sub_928(), GET_PED_MAX_HEALTH(  /* PLAYER_PED_ID */ sub_928() ), 0 );
                SET_PAYNEKILLER_AMT( 6 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_3260( ref g_U888[10] );
                 /* MAL_GIVEPEDWEAPON */ sub_30258(  /* PLAYER_PED_ID */ sub_928(), 68019059, 200, 0, 0 );
                 /* MAL_GIVEPEDWEAPONINHOLSTER */ sub_30571(  /* PLAYER_PED_ID */ sub_928(), 1194438308, 200, 0, 0 );
            }
            else
            {
                 /* MAL_GIVEPEDWEAPON */ sub_30258(  /* PLAYER_PED_ID */ sub_928(), 68019059, 100, 0, 0 );
                 /* MAL_GIVEPEDWEAPONINHOLSTER */ sub_30571(  /* PLAYER_PED_ID */ sub_928(), 1194438308, 100, 0, 0 );
            }
            l_U125 = 5;
             /* WRITESCRIPTLOG */ sub_375( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U125 = 6;
             /* WRITESCRIPTLOG */ sub_375( "SP", "eCheckpointState = CP_FB_PRE_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_928(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_928(), 0, 0 ) )))
            {
                l_U125 = 6;
                 /* WRITESCRIPTLOG */ sub_375( "GA", "eCheckpointState = CP_FB_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if (l_U126)
        {
             /* P_CREATE_GATE_VCPF_PRE */ sub_31103();
             /* P_CREATE_BACK_TURNED_VCPF_PRE */ sub_31544();
        }
        if ( /* MAL_ENEMYSTRUCTARRAYCREATE */ sub_31774( ref g_U4193, "BackTurned", ref l_U286, 1.00000000, 1, 0 ))
        {
            if ( /* MAL_ENEMYSTRUCTARRAYCREATE */ sub_31774( ref g_U4282, "Gate_VCPF", ref l_U293, 1.00000000, 1, 0 ))
            {
                if ( /* F_CREATE_BLEACHERS_BAGMAN */ sub_35757())
                {
                    if ( /* F_SETUP_BLEACHERS_EDISON */ sub_36306())
                    {
                         /* P_CREATE_GATE_VCPF_POST */ sub_36857();
                         /* P_CREATE_BACK_TURNED_VCPF_POST */ sub_37919();
                         /* P_FB_CREATE_PLACEMENTS */ sub_38217();
                         /* P_TECH_LIGHTS_ON_LLOD */ sub_39375( 0 );
                         /* P_CREATE_STADIUM_OBJECTS */ sub_39964();
                         /* P_CREATE_DEAD_BODIES_ON_FIELD */ sub_40159();
                        l_U125 = 7;
                         /* WRITESCRIPTLOG */ sub_375( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
                    }
                }
            }
        }
        break;
        case 7:
        if (g_U3879)
        {
            l_U125 = 8;
             /* WRITESCRIPTLOG */ sub_375( "GA", "eCheckpointState = CP_FB_HANDLE_03_03_STAD", 0 );
        }
        break;
        case 8:
        if (l_U126)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_50132( ref l_U129, "03_03_STADIUM", 40950, 41440, 41785, 42966, 43647, 46927, 250, 0 );
            l_U129._fU100 = g_U853;
            if (l_U127)
            {
                l_U129._fU4 = 2;
            }
            else
            {
                l_U129._fU4 = 7;
            }
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_50703( ref l_U129 ))
        {
            if (NOT l_U74._fU0)
            {
                g_U855 = 7;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_52709( ref l_U74, g_U855,  /* PLAYER_PED_ID */ sub_928(), g_U2138[7], g_U2256[7], g_U2296[7], g_U2336[7], 1 );
            }
            ENABLE_SHOOT_DODGE_HIGH_FALL_STAIRS_DETECTION( 1 );
            l_U125 = 9;
             /* WRITESCRIPTLOG */ sub_375( "GA", "eCheckpointState = CP_FB_FIRST_FIGHT", 0 );
        }
        break;
        case 9:
        if (l_U126)
        {
             /* DISABLETIMER */ sub_57347( ref l_U259 );
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_966() )))
            {
                if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
                {
                    SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_966(), 0, 0 );
                }
            }
             /* STARTTIMER */ sub_2055( ref l_U330 );
             /* LOADSEAMLESSCUTSCENE */ sub_27193( "MID_06_STADIUM", 0 );
             /* P_START_SP_CHALLENGES */ sub_57474();
        }
         /* P_HANDLE_GATE_VCPF_GET_SHOT */ sub_48095();
         /* P_HANDLE_GATE_KICKED_OPEN */ sub_49414();
        if (( /* F_HAS_PLAYER_ALERTED_BACK_TURNED_VCPF */ sub_57568()) AND (NOT l_U292))
        {
            l_U292 = 1;
             /* P_BACK_TURNED_VCPF_ENGAGE_PLAYER */ sub_57963();
             /* MAL_ES_SETACTINT */ sub_58463( ref g_U4282[1], 47, 1000 );
             /* MAL_ES_UNBLOCKANDCOMBATPLAYER */ sub_43146( ref g_U4282[1], 1 );
        }
        if ( /* F_IS_PLAYER_AIMING_AT_BAGMAN */ sub_58529())
        {
             /* P_HIDE_BAGMAN */ sub_58661();
        }
        if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_58813( ref l_U238,  /* PLAYER_PED_ID */ sub_928(), 0 ))
        {
            PLAY_IMAGEFX( "FLICKER_VIBRATE_INTERLACE_01", 4, 1 );
            PLAY_IMAGEFX( "FLICKER_VIBRATE_INTERLACE_01", 4, 1 );
        }
        if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_59096( ref l_U217, 0 )) || ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_59096( ref l_U196, 0 )))
        {
             /* WRITESCRIPTLOG */ sub_375( "GA", "Player went through the gate.", 0 );
            if ( /* F_ISPLAYERINTRIGGERBOX */ sub_59291( l_U196 ))
            {
                g_U4192 = 1;
            }
            else
            {
                g_U4192 = 0;
            }
             /* P_CREATE_AND_START_TIMER */ sub_59376( ref l_U166, 100 );
        }
        if ( /* ISTIMERDONE */ sub_2188( ref l_U166 ))
        {
             /* CLEANPED */ sub_6119( l_U268 );
            l_U125 = 12;
             /* WRITESCRIPTLOG */ sub_375( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 12:
        if (l_U126)
        {
            g_U3880 = 1;
        }
        if (g_U3881)
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U125 = 0;
             /* WRITESCRIPTLOG */ sub_375( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U125 != iVar2)
    {
        l_U126 = 1;
    }
    else
    {
        l_U126 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_11483()
{
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U126 = 1;
     /* SETUP_SCRIPTED_SPEECH */ sub_11580( "SSTDAUD" );
    l_U292 = 0;
    l_U299 = 0;
     /* CREATETIMER */ sub_1905( ref l_U300, 2000, 1, 0 );
     /* CREATETIMER */ sub_1905( ref l_U330, 9000, 1, 0 );
    l_U339 = 0;
    l_U340[0] = 0;
    l_U340[1] = 0;
     /* CREATETIMER */ sub_1905( ref l_U343[0], 1000, 1, 0 );
     /* CREATETIMER */ sub_1905( ref l_U343[1], 1000, 1, 0 );
     /* CREATETIMER */ sub_1905( ref l_U362, 1000, 1, 0 );
     /* P_SETDOORLOCKED */ sub_11860( ref g_U3647, 1 );
    l_U156 = 0;
     /* CREATETIMER */ sub_1905( ref l_U157, 750, 1, 0 );
    g_U4192 = 0;
    l_U380 = 0;
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* SETUP_SCRIPTED_SPEECH */ void sub_11580(unknown uParam0)
{
    StrCopy( ref g_U157._fU0, uParam0, 16 );
     /* CLEARPEDCONVERSATIONDATA */ sub_11624();
    return;
}

/* CLEARPEDCONVERSATIONDATA */ void sub_11624()
{
    int I;

    for ( I = 0; I <= 8; I++ )
    {
        g_U157._fU16[I]._fU0 = nil;
        g_U157._fU16[I]._fU4 = 0;
        g_U157._fU92[I] = 0;
    }
    return;
}

/* P_SETDOORLOCKED */ void sub_11860(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_11890( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_11974( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_11890(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_11974(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SET_STATIC_DATA */ void sub_12201()
{
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATETRIGGERBOX */ sub_12335( ref l_U175, "TRIGGER_ACTIVATE_BACKTURNED_VCPF", 38.99326000, 58.83429000, 9.10036600, 2, 2, 3, 0, 0, 0, 1 );
     /* P_CREATETRIGGERBOX */ sub_12335( ref l_U309, "tb_StartPassos_Shoot_mesBackTurned", 12.02000000, 59.77000000, 7.27000000, 5.00000000, 20.00000000, 8.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12335( ref l_U217, "TRIGGER_MOVE_BAGMAN", 1.51000000, 60.61000000, 9.52000000, 3.00000000, 4.00000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12335( ref l_U196, "TRIGGER_ON_FAR_SIDE", 1.23000000, 39.76000000, 2.47000000, 3.66000000, 2.54000000, 3.06000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_12335( ref l_U238, "TRIGGER_ImageFX01", 4.95964000, 60.20000000, 9.52000000, 3.00000000, 4.00000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CLOSEDOOR */ sub_12763( ref g_U3486, 1 );
     /* P_CLOSEDOOR */ sub_12763( ref g_U3479, 1 );
     /* P_SETDOORAUTOCLOSE */ sub_12917( ref g_U3647, 1 );
     /* P_CLOSEDOOR */ sub_12763( ref g_U3647, 1 );
     /* P_SETDOORMINMAXLIMIT */ sub_13021( ref g_U3640, 79.00000000, 80.00000000 );
     /* P_OPENDOOR */ sub_13251( ref g_U3640, 0, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_13415( ref g_U3640, 1 );
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATETRIGGERBOX */ void sub_12335(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CLOSEDOOR */ void sub_12763(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_11890( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_11974( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* P_SETDOORAUTOCLOSE */ void sub_12917(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_11890( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_11974( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_SETDOORMINMAXLIMIT */ void sub_13021(int iParam0, float fParam1, float fParam2)
{
    if (( /* F_DOESDOOREXIST */ sub_11890( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_11974( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        PRINTSTRING( "[SP]### Error: Door fMinLimit greater than fMaxLimit (default min:-81.0 max:81.0) ###" );
        PRINTNL();
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

/* P_OPENDOOR */ void sub_13251(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if (( /* F_DOESDOOREXIST */ sub_11890( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_11974( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

/* P_SETDOORLATCH */ void sub_13415(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_11890( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_11974( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_REQUEST_FB_PERSISTENT_ASSETS */ void sub_13670()
{
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_REQUEST_FB_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_13771( ref l_U110, ref g_U1069 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_16693( ref l_U120, ref g_U1214 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "LEVEL_S_STAD_CP_04", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "npc_pstl_cover_grenade", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "npc_rifle_cover_grenade", ref g_U1354 );
     /* P_LOAD_PLGE_ANIM_DICTS */ sub_20687( 0, 0 );
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_REQUEST_FB_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_13771(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_13844( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_13844(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_13911( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14169( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_13911(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14169( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14169( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14169( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_15700( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14169( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14169( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_14169(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14230( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_14230(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_15700(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_16693(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_16767( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_16767(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_16821( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17082( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_16821(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17082( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17082( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17082( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_15700( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17082( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17082( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_17082(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14230( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_18741(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_18793( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19045( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_18793(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19045( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19045( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19045( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_15700( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19045( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19045( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_19045(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14230( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_LOAD_PLGE_ANIM_DICTS */ void sub_20687(boolean bParam0, boolean bParam1)
{
    if (NOT bParam0)
    {
        if (NOT bParam1)
        {
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_RIFLE_CROUCH", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_PSTL_CROUCH", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_RIFLE_KNEE", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_PSTL_KNEE", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_PSTL_CORE", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_PSTL_COVER", ref g_U1354 );
        }
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_RIFLE_CORE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_RIFLE_CORE_RELOAD", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_PSTL_CORE_RELOAD", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_RIFLE_HANDSIG", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_PSTL_HANDSIG", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_RIFLE_ACTIONS", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_PSTL_ACTIONS", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_RIFLE_COVER", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_RIFLE_REACT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_PSTL_REACT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_RIFLE_COVER_EXIT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_PSTL_COVER_EXIT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18741( "PLGE_PSTL_FULLBODY", ref g_U1354 );
    }
    else
    {
         /* LOADANIMDICT */ sub_21318( "PLGE_RIFLE_CROUCH", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_PSTL_CROUCH", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_RIFLE_CORE", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_PSTL_CORE", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_RIFLE_CORE_RELOAD", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_PSTL_CORE_RELOAD", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_RIFLE_HANDSIG", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_PSTL_HANDSIG", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_RIFLE_ACTIONS", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_PSTL_ACTIONS", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_RIFLE_KNEE", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_PSTL_KNEE", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_RIFLE_COVER", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_PSTL_COVER", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_RIFLE_REACT", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_PSTL_REACT", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_RIFLE_COVER_EXIT", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_PSTL_COVER_EXIT", 0, 1 );
         /* LOADANIMDICT */ sub_21318( "PLGE_PSTL_FULLBODY", 0, 1 );
    }
    return;
}

/* LOADANIMDICT */ void sub_21318(unknown uParam0, unknown uParam1, int iParam2)
{
    REQUEST_ANIM_DICT( uParam0, uParam1 );
    "[doubled result, dropped if not asigned]";
    if (iParam2 == 1)
    {
        while ((HAS_ANIM_DICT_LOADED( uParam0, uParam1 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an animation dictionary to be loaded: {} ###", 1, 1537, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_REQUEST_FB_NONPERSISTENT_ASSETS */ void sub_22036()
{
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_REQUEST_FB_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_22144( -1414847258, ref g_U1263 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_22144( 1410429600, ref g_U1263 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_22144( 2062510625, ref g_U1263 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_22144( -1247518834, ref g_U1263 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_22144( 1600959260, ref g_U1263 );
     /* P_STREAMREQ_SCRIPT_STREAM_INSERT */ sub_25023( "S_STAD_03_03_BLENDOUT", ref g_U2034 );
    if ((l_U127) AND (g_U854 < 7))
    {
         /* LOADSEAMLESSCUTSCENE */ sub_27193( "03_03_STADIUM", 0 );
    }
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_REQUEST_FB_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_22144(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_22205( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22455( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_22205(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22455( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22455( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22455( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22455( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_15700( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_15700( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22455( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22455( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_22455(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14230( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_INSERT */ void sub_25023(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_IS_INDEX_AVAILABLE */ sub_25079( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing SCRIPT_STREAM asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_25343( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_INDEX_AVAILABLE */ int sub_25079(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_25343( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is already loading!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_25343( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (Result <= 2)
                {
                    if ((GET_SCRIPT_STREAM_STATE( uParam0, Result )) == 2)
                    {
                        DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                        DISPLAYF( "The SCRIPT_STREAM asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_25343( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The SCRIPT_STREAM asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                        (uParam1^)[Result]._fU32 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_15700( ref (uParam1^)[Result]._fU36 );
                        return Result;
                    }
                }
                else
                {
                    DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The SCRIPT_STREAM asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_25343( Result, uParam1, uParam2 );
                    return -1;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The SCRIPT_STREAM asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_25343( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (Result <= 2)
        {
            if ((GET_SCRIPT_STREAM_STATE( uParam0, iVar6 )) == 2)
            {
                DISPLAYF( "[CCB] ### The SCRIPT_STREAM is already loaded: {} ###", 1, 1537, uParam0 );
                DISPLAYF( "The SCRIPT_STREAM asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing SCRIPT_STREAM: {} ###", 1, 1537, uParam0 );
                StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
                (uParam1^)[iVar6]._fU32 = 3;
                 /* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ sub_25343( iVar6, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar6;
            }
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The SCRIPT_STREAM - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_SCRIPT_STREAM_THREADID_SET_ID */ void sub_25343(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14230( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The SCRIPT_STREAM asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_27193(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_27665(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_28062(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_28464(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_28855(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_SCRIPT_STREAM_IS_LOADED */ int sub_29269(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for SCRIPT_STREAM to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_29922(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_375( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_6603( uParam0,  /* PLAYER_PED_ID */ sub_928() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* MAL_GIVEPEDWEAPON */ void sub_30258(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
    unknown Result;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (bParam4)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                 /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_GivePedWeapon waiting for weapon to exist" );
            }
        }
        return Result;
    }
    return nil;
}

/* MAL_WRITESCRIPTLOG */ void sub_30426(unknown uParam0)
{
    unknown uVar3;

    uVar3 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar3, 1537, "MSWW", 1537, uParam0, 1537, "###" );
    return;
}

/* MAL_GIVEPEDWEAPONINHOLSTER */ void sub_30571(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
    int Result;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam2, uParam3 );
        if (bParam4)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam3 );
            while (Result == 0)
            {
                WAIT( 0 );
                Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam3 );
                 /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_GivePedWeapon waiting for weapon to exist" );
            }
        }
        return Result;
    }
    return nil;
}

/* P_CREATE_GATE_VCPF_PRE */ void sub_31103()
{
     /* MAL_WRITESCRIPTLOG */ sub_30426( "P_CREATE_GATE_VCPF" );
     /* STAD_ENEMYSTRUCTFILL */ sub_31220( ref g_U4282[0], 1.51000000, 60.51100000, 9.61700000, 97.21608000, g_U652, 2137086934, g_U2385, 7, 30, 1, 1478009203, 1 );
     /* STAD_ENEMYSTRUCTFILL */ sub_31220( ref g_U4282[1], 0.45400000, 61.20400000, 9.80000000, 356.09770000, g_U652, -895758148, g_U2385, 7, 30, 1, 1478009203, 1 );
    return;
}

/* STAD_ENEMYSTRUCTFILL */ void sub_31220(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19)
{
     /* MAL_ENEMYSTRUCTFILL */ sub_31296( uParam0, uParam1, uParam4, uParam18, 68019059, 2, g_U3928, uParam15, uParam16, uParam14, uParam19, uParam17, uParam13, uParam5 );
    return;
}

/* MAL_ENEMYSTRUCTFILL */ void sub_31296(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29)
{
    iParam0->_fU56 = {uParam1};
    iParam0->_fU68 = uParam4;
    iParam0->_fU72 = uParam5;
    iParam0->_fU76 = uParam6;
    iParam0->_fU80 = uParam7;
    iParam0->_fU84 = {uParam8};
    iParam0->_fU116 = uParam16;
    iParam0->_fU120 = uParam17;
    iParam0->_fU124 = uParam18;
    iParam0->_fU128 = uParam19;
    iParam0->_fU132 = uParam20;
    iParam0->_fU136 = uParam21;
    iParam0->_fU140 = {uParam22};
    return;
}

/* P_CREATE_BACK_TURNED_VCPF_PRE */ void sub_31544()
{
     /* MAL_WRITESCRIPTLOG */ sub_30426( "P_CREATE_BACK_TURNED_VCPF" );
     /* STAD_ENEMYSTRUCTFILL */ sub_31220( ref g_U4193[0], 3.77242900, 57.93283000, 9.58316300, 99.58700000, g_U652, 1076771207, g_U2385, 7, 30, 0, 68019059, 1 );
     /* STAD_ENEMYSTRUCTFILL */ sub_31220( ref g_U4193[1], 7.20359400, 58.72173000, 9.58640600, 0, g_U652, 58789141, g_U2385, 7, 30, 1, 1478009203, 1 );
    return;
}

/* MAL_ENEMYSTRUCTARRAYCREATE */ int sub_31774(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4, boolean bParam5)
{
    int I;

    PRINTSTRING( "[MSWW] ### MAL_EnemyStructArrayCreate starting: " );
     /* WRITE_STRING */ sub_8704( uParam1 );
    if (NOT bParam4)
    {
         /* P_SETUP_AI_GROUP */ sub_31891( uParam2, uParam3, 1 );
        for ( I = 0; I < (uParam0^); I++ )
        {
             /* MAL_ENEMYSTRUCTCREATE */ sub_32301( ref (uParam0^)[I] );
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_34845( (uParam0^)[I]._fU0, uParam2 );
        }
         /* MAL_ESA_GIVEDEBUGNAMES */ sub_35243( uParam0, uParam1 );
    }
    else if ((uParam0^)[0]._fU172 == 0)
    {
         /* P_SETUP_AI_GROUP */ sub_31891( uParam2, uParam3, 1 );
    }
    if ((uParam0^)[0]._fU172 < (uParam0^))
    {
         /* MAL_ENEMYSTRUCTCREATE */ sub_32301( ref (uParam0^)[(uParam0^)[0]._fU172] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_34845( (uParam0^)[(uParam0^)[0]._fU172]._fU0, uParam2 );
        (uParam0^)[0]._fU172++;
    }
    else
    {
         /* MAL_ESA_GIVEDEBUGNAMES */ sub_35243( uParam0, uParam1 );
        return 1;
    }
    if (bParam5)
    {
         /* MAL_ESA_PROCESSINGFREEZE */ sub_35534( uParam0, 1, 0, -1 );
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_31891(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* MAL_ENEMYSTRUCTCREATE */ void sub_32301(int iParam0)
{
    unknown uVar3;

     /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_EnemyStructCreate starting" );
     /* MAL_CREATEPEDADV */ sub_32440( iParam0 + 0, iParam0 + 4, iParam0->_fU56, iParam0->_fU68, iParam0->_fU72, iParam0->_fU80, iParam0->_fU84, iParam0->_fU116, iParam0->_fU120, iParam0->_fU124, 1 );
    if (NOT (ARE_STRINGS_EQUAL( iParam0 + 140, ref g_U652 )))
    {
        PRINTSTRING( "[MSWW] ### MAL_EnemyStructCreate adding ped to room: " );
         /* WRITE_STRING */ sub_8704( iParam0 + 140 );
         /* MAL_SETROOMFORPED */ sub_34385( iParam0 + 0, iParam0 + 140 );
    }
    if (iParam0->_fU128)
    {
         /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_EnemyStructCreate giving ped backup weapon" );
         /* MAL_GIVEPEDWEAPONINHOLSTER */ sub_30571( iParam0->_fU0, iParam0->_fU76, 25000, 1, 0 );
    }
    if (iParam0->_fU132)
    {
        uVar3 = GET_WEAPON_FROM_HAND( iParam0->_fU0, 0, 0 );
         /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_34571( ref uVar3, 14, 1 );
    }
    if (iParam0->_fU136 != 0)
    {
         /* MAL_GIVEPEDPERSISTANTVARIATIONENUM */ sub_34734( iParam0 + 0, iParam0->_fU136 );
    }
    return iParam0->_fU0;
}

/* MAL_CREATEPEDADV */ void sub_32440(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19)
{
     /* P_CREATEPEDSTRUCT */ sub_32484( uParam1, uParam2, uParam5, uParam18, 7, 3, 2, 0, 0 );
    (uParam0^) =  /* MAL_CREATEPED */ sub_32606( uParam0, uParam1, 1, 1, uParam19 );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( (uParam0^), 1 );
    }
     /* MAL_GIVEPEDWEAPON */ sub_30258( (uParam0^), uParam6, 25000, 0, 0 );
     /* MAL_SETTEMPLATEANDRANGES */ sub_33862( uParam0, ref uParam8, uParam16, uParam17, 1 );
     /* MAL_SETPEDCOMBATMOVEMENT */ sub_34193( uParam0, uParam7 );
    return (uParam0^);
}

/* P_CREATEPEDSTRUCT */ void sub_32484(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU12 = uParam4;
    iParam0->_fU16 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU48 = uParam10;
    return;
}

/* MAL_CREATEPED */ void sub_32606(unknown uParam0, unknown uParam1, boolean bParam2, boolean bParam3, unknown uParam4)
{
     /* CLEANPED */ sub_6119( (uParam0^) );
    (uParam0^) =  /* CREATEPED */ sub_32642( uParam1 );
    if (bParam3)
    {
        while (NOT (DOES_PED_EXIST( (uParam0^) )))
        {
            WAIT( 0 );
             /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_CreatePed waiting for ped to exist" );
        }
    }
    SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( (uParam0^), uParam4 );
     /* MAL_SETPEDCOMBATATTRIBUTES */ sub_33693( uParam0, 32, 0 );
    SET_PED_IGNORE_LOS_CHECKS( (uParam0^), NOT bParam2 );
    SET_PED_EMOTION_STATE( (uParam0^), 1 );
    return (uParam0^);
}

/* CREATEPED */ void sub_32642(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_32824( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_33373( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_33474( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_32824(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_8704( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_33373(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_33474(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* MAL_SETPEDCOMBATATTRIBUTES */ void sub_33693(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_COMBAT_ATTRIBUTES( (uParam0^), uParam1, uParam2 );
    }
    return;
}

/* MAL_SETTEMPLATEANDRANGES */ void sub_33862(unknown uParam0, unknown uParam1, float fParam2, float fParam3, boolean bParam4)
{
     /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_SetTemplateAndRanges" );
    PRINTSTRING( "[MSWW]### Template Name: " );
     /* WRITE_STRING */ sub_8704( uParam1 );
    PRINTSTRING( "[MSWW]### Min Range: " );
     /* WRITE_FLOAT */ sub_34006( fParam2 );
    PRINTSTRING( "[MSWW]### Max Range: " );
     /* WRITE_FLOAT */ sub_34006( fParam3 );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    if (NOT bParam4)
    {
         /* MAL_SETPEDCOMBATATTRIBUTES */ sub_33693( uParam0, 1, 0 );
    }
    return;
}

/* WRITE_FLOAT */ void sub_34006(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* MAL_SETPEDCOMBATMOVEMENT */ void sub_34193(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_SETROOMFORPED */ void sub_34385(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_ROOM_FOR_PED_BY_NAME( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ void sub_34571(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (GET_DOES_WEAPON_EXIST( (uParam0^) ))
    {
        if (bParam2)
        {
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
        else
        {
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
    }
    return;
}

/* MAL_GIVEPEDPERSISTANTVARIATIONENUM */ void sub_34734(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PERSISTENT_PED_VARIATION_ENUM( (uParam0^), uParam1 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_34845(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_8704( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_31891( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_31891( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* MAL_ESA_GIVEDEBUGNAMES */ void sub_35243(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I]._fU0 )))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I]._fU0, ref cVar5 );
        }
    }
    return;
}

/* MAL_ESA_PROCESSINGFREEZE */ void sub_35534(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_PROCESSINGFREEZE */ sub_35611( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_PROCESSINGFREEZE */ void sub_35611(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_FREEZE_PROCESSING( iParam0->_fU0, uParam1 );
    }
    return;
}

/* F_CREATE_BLEACHERS_BAGMAN */ int sub_35757()
{
    if (NOT (DOES_PED_EXIST( l_U268 )))
    {
         /* MAL_WRITESCRIPTLOG */ sub_30426( "P_CREATE_BLEACHERS_BAGMAN" );
         /* P_CREATEPEDSTRUCT */ sub_32484( ref l_U269, l_U282, l_U285, g_U2378, 26, 6, 0, 0, 0 );
        l_U268 =  /* MAL_CREATEPED */ sub_32606( ref l_U268, ref l_U269, 1, 0, 0 );
         /* MAL_GIVEPEDPERSISTANTVARIATION */ sub_35917( ref l_U268, "M3_G_CS_BAG_W" );
        if ((NOT (IS_PED_DEAD( l_U268 ))) AND (DOES_PED_EXIST( l_U268 )))
        {
            SET_PED_INVINCIBLE( l_U268, 1 );
            SET_PED_GORE_AS_ALLY( l_U268 );
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U268, 1 );
        }
         /* MAL_GIVEPEDWEAPON */ sub_30258( l_U268, -389125832, 25000, 0, 0 );
        ISEQ_REGISTER_ENTITY( 2062510625, "s_stad_bagman", l_U268, 0 );
         /* TELEPORTPED */ sub_36200( l_U268, l_U269._fU0, l_U269._fU12 );
        ISEQ_START( 2062510625 );
        return 0;
        break;
    }
    return 1;
}

/* MAL_GIVEPEDPERSISTANTVARIATION */ void sub_35917(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        PRINTSTRING( "[MSWW] ### Assigning scene ped variation: " );
         /* WRITE_STRING */ sub_8704( uParam1 );
        SET_PERSISTENT_PED_VARIATION( (uParam0^), uParam1 );
    }
    return;
}

/* TELEPORTPED */ void sub_36200(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* F_SETUP_BLEACHERS_EDISON */ int sub_36306()
{
    if (NOT (DOES_PED_EXIST( g_U4371 )))
    {
         /* P_CREATEPEDSTRUCT */ sub_32484( ref g_U4372, g_U4385, g_U4388, g_U2376, 26, 6, 0, 0, 0 );
        g_U4371 =  /* MAL_CREATEPED */ sub_32606( ref g_U4371, ref g_U4372, 1, 0, 0 );
         /* MAL_GIVEPEDPERSISTANTVARIATION */ sub_35917( ref g_U4371, "Pass_Stad_Hat" );
        if ((NOT (IS_PED_DEAD( g_U4371 ))) AND (DOES_PED_EXIST( g_U4371 )))
        {
            SET_PED_HEALTH( g_U4371, 400, 0 );
            SET_PED_GORE_AS_ALLY( g_U4371 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4371, 1 );
            SET_PED_CAN_INITIATE_BULLET_CAM( g_U4371, 1 );
            SET_PED_ONLY_DAMAGED_BY_PLAYER( g_U4371, 1 );
            FREEZE_PED_POSITION( g_U4371, 1 );
        }
         /* P_DEACTIVATEPED */ sub_36553( g_U4371 );
         /* MAL_STANDSTILL */ sub_36672( ref g_U4371 );
        ISEQ_REGISTER_ENTITY( -1414847258, "stad_sniper", g_U4371, 0 );
        ISEQ_START( -1414847258 );
        return 0;
        break;
    }
    return 1;
}

/* P_DEACTIVATEPED */ void sub_36553(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* MAL_STANDSTILL */ void sub_36672(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_STAND_STILL( 0, -1 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    return;
}

/* P_CREATE_GATE_VCPF_POST */ void sub_36857()
{
     /* MAL_WRITESCRIPTLOG */ sub_30426( "P_CREATE_GATE_VCPF" );
     /* MAL_ESA_SETPEDARRAYRELATIONSHIP */ sub_36925( ref g_U4282, 2, 6 );
     /* MAL_ESA_SETFLASHLIGHTDATA */ sub_37119( ref g_U4282, "Flashlight_Stadium" );
     /* MAL_ESA_VISIBLE */ sub_37305( ref g_U4282, 0, 0, -1 );
     /* MAL_ESA_SETASONESHOTKILL */ sub_37530( ref g_U4282, 1, 0, -1 );
     /* MAL_ESA_SETCANAVOIDLINEOFFIRE */ sub_37712( ref g_U4282, 0 );
     /* MAL_ES_INVINCIBLE */ sub_37841( ref g_U4282[0], 1 );
    return;
}

/* MAL_ESA_SETPEDARRAYRELATIONSHIP */ void sub_36925(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_ES_SETPEDRELATIONSHIP */ sub_36995( ref (uParam0^)[I], uParam1, uParam2 );
    }
    return;
}

/* MAL_ES_SETPEDRELATIONSHIP */ void sub_36995(int iParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_RELATIONSHIP( iParam0->_fU0, uParam1, uParam2 );
    }
    return;
}

/* MAL_ESA_SETFLASHLIGHTDATA */ void sub_37119(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_ES_SETFLASHLIGHTDATA */ sub_37181( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_SETFLASHLIGHTDATA */ void sub_37181(int iParam0, unknown uParam1)
{
    if (iParam0->_fU132)
    {
        if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
        {
            SET_WEAPON_LIGHT_DATA_BY_NAME( GET_WEAPON_FROM_HAND( iParam0->_fU0, 0, 0 ), uParam1 );
        }
    }
    return;
}

/* MAL_ESA_VISIBLE */ void sub_37305(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_SETPEDVISIBLE */ sub_37373( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_SETPEDVISIBLE */ void sub_37373(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_VISIBLE( iParam0->_fU0, uParam1 );
    }
    else
    {
         /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_ES_SetPedVisible DOES NOT HAVE VALID PED!" );
    }
    return;
}

/* MAL_ESA_SETASONESHOTKILL */ void sub_37530(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_SETASONESHOTKILL */ sub_37611( (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_SETASONESHOTKILL */ void sub_37611(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44)
{
    if (NOT (IS_PED_DEAD( uParam0._fU0 )))
    {
        SET_PED_AS_ONE_SHOT_KILL( uParam0._fU0, uParam44 );
    }
    return;
}

/* MAL_ESA_SETCANAVOIDLINEOFFIRE */ void sub_37712(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I]._fU0 )))
        {
            SET_PED_PATH_CAN_AVOID_LINE_OF_FIRE( (uParam0^)[I]._fU0, uParam1 );
        }
    }
    return;
}

/* MAL_ES_INVINCIBLE */ void sub_37841(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_INVINCIBLE( iParam0->_fU0, uParam1 );
    }
    return;
}

/* P_CREATE_BACK_TURNED_VCPF_POST */ void sub_37919()
{
     /* MAL_WRITESCRIPTLOG */ sub_30426( "P_CREATE_BACK_TURNED_VCPF" );
     /* MAL_ESA_SETFLASHLIGHTDATA */ sub_37119( ref g_U4193, "Flashlight_Stadium" );
     /* MAL_ESA_VISIBLE */ sub_37305( ref g_U4193, 0, 0, -1 );
     /* MAL_ESA_GIVEGRENADES */ sub_38044( ref g_U4193, 3, 0, -1 );
     /* MAL_ESA_SETCANAVOIDLINEOFFIRE */ sub_37712( ref g_U4193, 0 );
    return;
}

/* MAL_ESA_GIVEGRENADES */ void sub_38044(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_GIVEPEDGRENADES */ sub_38117( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_GIVEPEDGRENADES */ void sub_38117(int iParam0, unknown uParam1)
{
     /* MAL_GIVEPEDWEAPONINHOLSTER */ sub_30571( iParam0->_fU0, -1980065396, uParam1, 5, 0 );
    return;
}

/* P_FB_CREATE_PLACEMENTS */ void sub_38217()
{
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_FB_CREATE_PLACEMENTS start", 0 );
     /* P_CREATE_S_STA_GG_M1_01 */ sub_38294();
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_FB_CREATE_PLACEMENTS end", 0 );
    return;
}

/* P_CREATE_S_STA_GG_M1_01 */ void sub_38294()
{
     /* WRITESCRIPTLOG */ sub_375( "CO", "Add_Placement_CL_S_STA_GG_M1_01", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_38427( ref g_U793, g_U850, 1117909780, -807345911, 46.62000000, 39.87000000, 3.10000000, 0.00000000, 0.00000000, 1.00000000, "" );
     /* P_CREATECOLLECTIBLE */ sub_38584( ref g_U793 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_38427(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_375( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_38584(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_375( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_38667( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_375( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_375( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_38667( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_38907( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_38992( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_375( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_375( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_38667(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* CLEANPLACEMENT */ void sub_38907(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* CREATEPLACEMENT */ void sub_38992(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_TECH_LIGHTS_ON_LLOD */ void sub_39375(boolean bParam0)
{
     /* MAL_WRITESCRIPTLOG */ sub_30426( "P_TECH_LIGHTS_ON_LLOD" );
     /* CLEANOBJECT */ sub_39443( g_U3948 );
     /* CLEANOBJECT */ sub_39443( g_U3949 );
     /* CLEANOBJECT */ sub_39443( g_U3950 );
     /* CLEANOBJECT */ sub_39443( g_U3951 );
     /* CLEANOBJECT */ sub_39443( g_U3952 );
    if (bParam0)
    {
        g_U3952 =  /* CREATEOBJECTNOOFFSET */ sub_39575( g_U2408, 0.00100000, 77.00000000, 42.50000000, 0, 0, 180, 0, 0, 1 );
    }
    else
    {
        g_U3952 =  /* CREATEOBJECTNOOFFSET */ sub_39575( g_U2408, g_U3965, 0, 0, 0, 0, 0, 1 );
    }
    if (DOES_OBJECT_EXIST( g_U3952 ))
    {
        FREEZE_OBJECT_POSITION( g_U3952, 1 );
    }
    return;
}

/* CLEANOBJECT */ void sub_39443(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_39575(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_32824( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_CREATE_STADIUM_OBJECTS */ void sub_39964()
{
     /* WRITE_STRING */ sub_8704( "[SP]### P_CREATE_STADIUM_OBJECTS ###" );
    if (DOES_OBJECT_EXIST( g_U3704 ))
    {
         /* CLEANOBJECT */ sub_39443( g_U3704 );
    }
    g_U3704 =  /* CREATEOBJECTNOOFFSET */ sub_39575( g_U2390, -10.46000000, 5.99000000, 0.70000000, 0.00000000, 0.00000000, 18.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U3704 ))
    {
        FREEZE_OBJECT_POSITION( g_U3704, 1 );
    }
    return;
}

/* P_CREATE_DEAD_BODIES_ON_FIELD */ void sub_40159()
{
     /* CLEANOBJECTARRAY */ sub_40205( ref g_U3941 );
    g_U3941[0] =  /* CREATEOBJECTNOOFFSET */ sub_39575( -1652775333, -4.14443000, 10.10766000, 0.14177000, 0, 0, 2.56000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[0] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[0], 1 );
    }
    g_U3941[1] =  /* CREATEOBJECTNOOFFSET */ sub_39575( 1816766229, 10.25816000, 2.27307000, 0.14177000, 0, 0, 1.88000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[1] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[1], 1 );
    }
    g_U3941[2] =  /* CREATEOBJECTNOOFFSET */ sub_39575( 1873472982, 13.91821000, 23.57691000, 0.14177000, 0, 0, 2.23000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[2] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[2], 1 );
    }
    g_U3941[3] =  /* CREATEOBJECTNOOFFSET */ sub_39575( -1993976541, 11.90281000, 13.09956000, 0.14177000, 0, 0, 2.95000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[3] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[3], 1 );
    }
    g_U3941[4] =  /* CREATEOBJECTNOOFFSET */ sub_39575( -1993976541, 10.14508000, 8.20610000, 0.14177000, 0, 0, 90.68000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[4] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[4], 1 );
    }
    g_U3941[5] =  /* CREATEOBJECTNOOFFSET */ sub_39575( -2096019114, 3.94087000, 16.99167000, 0.14177000, 0, 0, -1.16000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[5] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[5], 1 );
    }
    return;
}

/* CLEANOBJECTARRAY */ void sub_40205(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANOBJECT */ sub_39443( (uParam0^)[I] );
    }
    return;
}

/* F_0303_PRESETUP */ int sub_40950()
{
     /* P_CLEAR_PED_HEADTRACKING */ sub_40983(  /* PLAYER_PED_ID */ sub_928() );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
    {
        if ((HAS_PED_GOT_SPECIFIC_WEAPON(  /* PLAYER_PED_ID */ sub_928(), -2075384407 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_375( "MF", "Removing sniper rifle from player", 0 );
            if ((GET_WEAPON_TYPE( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_928(), 0, 0 ) )) == -2075384407)
            {
                REMOVE_PED_WEAPON(  /* PLAYER_PED_ID */ sub_928(), GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_928(), 0, 0 ) );
            }
            else
            {
                REMOVE_PED_WEAPON(  /* PLAYER_PED_ID */ sub_928(), GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_928(), 2 ) );
            }
        }
    }
    CLEAR_PED_DEFAULT_AIM(  /* PLAYER_PED_ID */ sub_928() );
    return 1;
}

/* P_CLEAR_PED_HEADTRACKING */ void sub_40983(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0 )))
    {
        if (iParam0 == ( /* PLAYER_PED_ID */ sub_928()))
        {
             /* WRITESCRIPTLOG */ sub_375( "[AT]", "Clearing headtracking on Max.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_375( "[AT]", "Clearing headtracking on non-player ped.", 0 );
        }
        TASK_CLEAR_LOOK_AT( iParam0 );
    }
    else
    {
        SCRIPT_ASSERT( "Passed invalid or dead ped to P_CLEAR_PED_HEADTRACKING!", 0 );
    }
    return;
}

/* P_0303_REGISTRATION */ void sub_41440()
{
    REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4371, "Pass_heli_pilo", 0 );
    CUTSCENE_REGISTER_PED_TELEPORT( g_U4371, g_U4385, g_U4388 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_Crac_Sold_SR", 2137086934 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_Crac_Sold_SR^1", -895758148 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_Crac_Sold_SR^2", 1076771207 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_Crac_Sold_SR^3", 58789141 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_Crac_Sold_SR^4", 2137086934 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
    {
        ISEQ_REGISTER_ENTITY( 1410429600, "03_03_BLEND_MAX",  /* PLAYER_PED_ID */ sub_928(), 0 );
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_928(), 34.60300000, 60.73500000, 12.68100000, 180.00000000 );
        CUTSCENE_REGISTER_ISEQ( 1410429600 );
    }
    return;
}

/* P_0303_HANDLE */ void sub_41785()
{
    unknown uVar2;

    if (l_U129._fU52)
    {
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
         /* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ sub_41835( 1 );
         /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_42476( 0 );
        uVar2 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_928(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar2 ))
        {
            SET_WEAPON_VISIBLE( uVar2, 1 );
        }
        FREEZE_TIME_OF_DAY( 21, 0 );
        SET_WEATHER_TYPE_NOW_PERSIST( "CLOUDY" );
    }
     /* MAL_SETPEDVISIBLE */ sub_42815( l_U268, 0 );
     /* MAL_ESA_VISIBLE */ sub_37305( ref g_U4282, 0, 0, -1 );
     /* MAL_ESA_VISIBLE */ sub_37305( ref g_U4193, 0, 0, -1 );
    return;
}

/* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ void sub_41835(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )) == 0)
    {
        iVar3 = 0;
        uVar4 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_928(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 0)
        {
            iVar3 = 1;
        }
        if ((( /* IS_WEAPON_SINGLE_HANDED */ sub_41958( uVar4 )) == 0) AND ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1))
        {
            iVar3 = 1;
        }
        if (iVar3 == 1)
        {
            uVar5 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_42193();
            if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_928(), uVar5, 0, uParam0 );
            }
        }
    }
    return;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_41958(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_42193()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_928(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_41958( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_928(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_928(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_928(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_42476(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_928(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_928(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_928(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_928(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_928(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* MAL_SETPEDVISIBLE */ void sub_42815(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_VISIBLE( uParam0, uParam1 );
    }
    else
    {
         /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_SetPedVisible DOES NOT HAVE VALID PED!" );
    }
    return;
}

/* F_0303_POST */ int sub_42966()
{
     /* P_STREAMREQ_SCRIPT_STREAM_STOP */ sub_4809( "S_STAD_03_03_BLENDOUT", ref g_U2034 );
     /* P_STREAMREQ_SCRIPT_STREAM_REMOVE */ sub_5602( "S_STAD_03_03_BLENDOUT", ref g_U2034 );
     /* MAL_ESA_UNBLOCKANDCOMBATPLAYER */ sub_43063( ref g_U4193, 0, 3, -1 );
     /* MAL_SETPEDVISIBLE */ sub_42815( l_U268, 1 );
     /* MAL_ESA_VISIBLE */ sub_37305( ref g_U4282, 1, 0, -1 );
     /* MAL_ESA_VISIBLE */ sub_37305( ref g_U4193, 1, 0, -1 );
    return 1;
}

/* MAL_ESA_UNBLOCKANDCOMBATPLAYER */ void sub_43063(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_UNBLOCKANDCOMBATPLAYER */ sub_43146( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_UNBLOCKANDCOMBATPLAYER */ void sub_43146(int iParam0, unknown uParam1)
{
     /* MAL_UNBLOCKANDCOMBATPLAYER */ sub_43201( iParam0 + 0, iParam0->_fU80, uParam1 );
    return;
}

/* MAL_UNBLOCKANDCOMBATPLAYER */ void sub_43201(unknown uParam0, unknown uParam1, unknown uParam2)
{
     /* MAL_UNBLOCKANDCOMBATPED */ sub_43251( uParam0,  /* PLAYER_PED_ID */ sub_928(), uParam1, uParam2 );
    return;
}

/* MAL_UNBLOCKANDCOMBATPED */ void sub_43251(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

     /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_UnblockAndCombatPed" );
    OPEN_SEQUENCE_TASK( ref uVar6 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
         /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_UnblockAndCombatPed: Victim is not dead" );
        TASK_COMBAT_PED( 0, uParam1 );
    }
    CLOSE_SEQUENCE_TASK( uVar6 );
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
         /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_UnblockAndCombatPed: Ped is not dead" );
        if (bParam3)
        {
            CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        }
        else
        {
            CLEAR_PED_TASKS( (uParam0^) );
        }
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam2 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar6 );
    }
    CLEAR_SEQUENCE_TASK( uVar6 );
    return;
}

/* P_0303_PREPARE_BLENDOUT */ void sub_43647()
{
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
     /* P_ACTIVATEPED */ sub_43697( g_U4371 );
    CAMERA_PLAY_ANIMATED( "LEVEL_S_STAD_CP_04", "B_OUT_03_03_STADIUM_FWD_CAM", 0, g_U649, 0.00000000, 0, 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
    {
        SET_PED_PROP_INDEX(  /* PLAYER_PED_ID */ sub_928(), 3, 0, 0, 255 );
    }
    if (NOT (ISEQ_QUERY_STATE( 1410429600, 3 )))
    {
        ISEQ_REGISTER_ENTITY( 1410429600, "03_03_BLEND_MAX",  /* PLAYER_PED_ID */ sub_928(), 0 );
         /* TELEPORTPED */ sub_36200(  /* PLAYER_PED_ID */ sub_928(), 34.60300000, 60.73500000, 12.68100000, 180.00000000 );
        ISEQ_START( 1410429600 );
    }
     /* P_STREAMREQ_SCRIPT_STREAM_PLAY_FRONTEND */ sub_44044( "S_STAD_03_03_BLENDOUT", ref g_U2034 );
     /* P_ACTIVATE_BACK_TURNED_VCPF */ sub_44517();
     /* P_ACTIVATE_GATE_VCPF */ sub_46651();
    AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_5", "", 0, 6000, -1, -1082130432, 0 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "STADIUM_ONESHOT_9", 0 );
    return;
}

/* P_ACTIVATEPED */ void sub_43697(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_STREAMREQ_SCRIPT_STREAM_PLAY_FRONTEND */ void sub_44044(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = -1;
    if ( /* F_STREAMREQ_SCRIPT_STREAM_IS_ASSET_LOADED */ sub_4859( uParam0, uParam1 ))
    {
        iVar4 =  /* F_STREAMREQ_SCRIPT_STREAM_GET_SLOT */ sub_5068( uParam0, uParam1 );
        if (NOT (iVar4 == -1))
        {
            DISPLAYF( "[CCB]### Playing the SCRIPT_STREAM: {} ###", 1, 1281, ref (uParam1^)[iVar4]._fU0 );
            PLAY_SCRIPT_STREAM_FRONTEND( iVar4 );
        }
        else
        {
            DISPLAYF( "[CCB]### The SCRIPT_STREAM slot is NOT valid!!! {} ###", 1, 1537, uParam0 );
            SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset slot that is NOT valid!!!", 0 );
        }
    }
    else
    {
        DISPLAYF( "[CCB]### The SCRIPT_STREAM asset is NOT loaded!!! {} ###", 1, 1537, uParam0 );
        SCRIPT_ASSERT( "Attempting to play a SCRIPT_STREAM asset that is NOT loaded!!!", 0 );
    }
    return;
}

/* P_ACTIVATE_BACK_TURNED_VCPF */ void sub_44517()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;

     /* MAL_WRITESCRIPTLOG */ sub_30426( "P_ACTIVATE_BACK_TURNED_VCPF" );
     /* MAL_ESA_VISIBLE */ sub_37305( ref g_U4193, 1, 0, -1 );
     /* MAL_ESA_TELEPORTTOSPAWN */ sub_44610( ref g_U4193, 0, -1 );
     /* MAL_REGISTERPEDWITHISEQ */ sub_44885( g_U4193[0]._fU0, -1247518834, "s_stad_cp1" );
     /* MAL_REGISTERPEDWITHISEQ */ sub_44885( g_U4193[1]._fU0, -1247518834, "s_stad_cp2" );
    ISEQ_START( -1247518834 );
     /* MAL_ESA_TELEPORTTOSPAWN */ sub_44610( ref g_U4193, 0, -1 );
    if ((NOT (IS_PED_DEAD( l_U268 ))) AND (NOT (IS_PED_DEAD( g_U4193[1]._fU0 ))))
    {
        TASK_SHOOT_AT_PED( g_U4193[1]._fU0, l_U268, -1, -256437761, 0, 0, 0 );
    }
     /* MAL_SETPEDCONSUMINGAMMO */ sub_45101( ref g_U4193[1]._fU0, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45188( 1,  /* PLAYER_PED_ID */ sub_928(), "MAX", ref uVar2, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_45188( 2, g_U4371, "PASSOS", ref uVar2, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_45452( "SSTD_TGOF", ref uVar2, 8, 1 );
     /* MAL_ESA_SETLOCKEDANDREGISTEREDONPLAYER */ sub_46356( ref g_U4193, 0, -1 );
    return;
}

/* MAL_ESA_TELEPORTTOSPAWN */ void sub_44610(unknown uParam0, unknown uParam1, int iParam2)
{
    int I;

    if (iParam2 == -1)
    {
        iParam2 = (uParam0^) - 1;
    }
    for ( I = uParam1; I <= iParam2; I++ )
    {
         /* MAL_ES_TELEPORTTOSPAWN */ sub_44688( (uParam0^)[I] );
    }
    return;
}

/* MAL_ES_TELEPORTTOSPAWN */ void sub_44688(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43)
{
     /* MAL_ES_TELEPORT */ sub_44741( uParam0, uParam0._fU56, uParam0._fU68 );
    return;
}

/* MAL_ES_TELEPORT */ void sub_44741(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47)
{
    if (NOT (IS_PED_DEAD( uParam0._fU0 )))
    {
        SET_PED_COORDS( uParam0._fU0, uParam44, 1 );
        SET_PED_HEADING( uParam0._fU0, uParam47 );
    }
    return;
}

/* MAL_REGISTERPEDWITHISEQ */ void sub_44885(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        ISEQ_REGISTER_ENTITY( uParam1, uParam2, uParam0, 0 );
    }
    return;
}

/* MAL_SETPEDCONSUMINGAMMO */ void sub_45101(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_CONSUMING_AMMO( (uParam0^), uParam1 );
    }
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_45188(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_45452(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_45497( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_45497(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_45584( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_45584(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_45636( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_46154( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_45636(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_46154(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* MAL_ESA_SETLOCKEDANDREGISTEREDONPLAYER */ void sub_46356(unknown uParam0, unknown uParam1, int iParam2)
{
    int I;

    if (iParam2 == -1)
    {
        iParam2 = (uParam0^) - 1;
    }
    for ( I = uParam1; I <= iParam2; I++ )
    {
         /* MAL_REGISTERTARGET */ sub_46452( ref (uParam0^)[I]._fU0,  /* PLAYER_PED_ID */ sub_928() );
         /* MAL_SETLOCKEDTARGET */ sub_46545( ref (uParam0^)[I]._fU0,  /* PLAYER_PED_ID */ sub_928() );
    }
    return;
}

/* MAL_REGISTERTARGET */ void sub_46452(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        REGISTER_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_SETLOCKEDTARGET */ void sub_46545(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        SET_LOCKED_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* P_ACTIVATE_GATE_VCPF */ void sub_46651()
{
     /* MAL_WRITESCRIPTLOG */ sub_30426( "P_ACTIVATE_GATE_VCPF" );
     /* MAL_ESA_VISIBLE */ sub_37305( ref g_U4282, 1, 0, -1 );
     /* MAL_REGISTERPEDWITHISEQ */ sub_44885( g_U4282[0]._fU0, 1600959260, "v39_first_soldier" );
     /* MAL_REGISTERPEDWITHISEQ */ sub_44885( g_U4282[1]._fU0, 1600959260, "v39_second_soldier" );
     /* MAL_ESA_TELEPORTTOSPAWN */ sub_44610( ref g_U4282, 0, -1 );
    ISEQ_START( 1600959260 );
    return;
}

/* F_0303_HANDLE_BLENDOUT */ int sub_46927()
{
    if (l_U129._fU52)
    {
        if (IS_MAGDEMO())
        {
            if (g_U854 == 7)
            {
                DO_SCREEN_FADE_IN( 250 );
                FORCE_PAUSEMENU_OPEN( 1 );
            }
        }
        else
        {
            DO_SCREEN_FADE_IN( 0 );
        }
        if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_966() )))
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
            {
                SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_966(), 1, 0 );
            }
        }
         /* P_MAKE_PASSOS_SNIPER */ sub_47081();
    }
    if (NOT l_U156)
    {
        if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_STAD_CP_04", "B_OUT_03_03_STADIUM_FWD_CAM" )) - 100))
        {
             /* MAL_WRITESCRIPTLOG */ sub_30426( "Starting anim cam blendout" );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0, 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( 0, 1065353216, 0 );
            CAMERA_ANIMATED_STOP( 750, 1 );
             /* STARTTIMER */ sub_2055( ref l_U157 );
            l_U156 = 1;
        }
    }
     /* P_HANDLE_GATE_VCPF_GET_SHOT */ sub_48095();
     /* P_HANDLE_GATE_KICKED_OPEN */ sub_49414();
    if ((ISEQ_QUERY_ENTITY_STATE( 1410429600, "03_03_BLEND_MAX", 6 )) || (ISEQ_QUERY_ENTITY_STATE( 1410429600, "03_03_BLEND_MAX", 5 )))
    {
         /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_IsISequenceDone(txtSeq0303BlendOut)" );
        SIMULATE_PLAYER_INPUT_GAIT(  /* PLAYER_ID */ sub_966(), 3, 1500, 0 );
        if (NOT l_U156)
        {
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0, 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( 0, 1065353216, 0 );
            CAMERA_ANIMATED_STOP( 750, 1 );
             /* STARTTIMER */ sub_2055( ref l_U157 );
            l_U156 = 1;
        }
        if ( /* ISTIMERDONE */ sub_2188( ref l_U157 ))
        {
             /* P_START_CHECKPOINT_THREAD */ sub_50061( ref g_U888[8] );
            return 1;
        }
    }
    return 0;
}

/* P_MAKE_PASSOS_SNIPER */ void sub_47081()
{
    unknown uVar2;

     /* MAL_WRITESCRIPTLOG */ sub_30426( "Giving Edison a gun" );
    uVar2 =  /* MAL_GIVEPEDWEAPON */ sub_30258( g_U4371, -2075384407, 25000, 0, 0 );
     /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_34571( ref uVar2, 13, 1 );
    SET_LASER_SIGHT_ATTACHMENT( uVar2, -12373631 );
    if (NOT (IS_PED_DEAD( g_U4371 )))
    {
        PED_ACTION_TREE_PLAY_NODE( g_U4371, "/Global/SNIPER_BEHAVIOR/SNIPER3SET_SEQ/STATES/DUCK_TO_PEEK" );
         /* MAL_SETPEDRELATIONSHIP */ sub_47283( ref g_U4371, 2, 3 );
         /* MAL_SETLOCKEDANDREGISTEREDONPED */ sub_47372( ref g_U4371, g_U4282[1]._fU0 );
         /* MAL_AIMGUNATPED */ sub_47461( g_U4371, g_U4282[1]._fU0, -1, 1 );
         /* MAL_SETPEDCONSUMINGAMMO */ sub_45101( ref g_U4371, 0 );
         /* MAL_SETPEDACCURACY */ sub_47557( ref g_U4371, 31186664 );
         /* MAL_SETCANTRIGGERBULLETCAM */ sub_47630( g_U4371, 1 );
    }
     /* MAL_GIVEPEDPERSISTANTVARIATION */ sub_35917( ref g_U4371, "Pass_Stad_Hset" );
    return;
}

/* MAL_SETPEDRELATIONSHIP */ void sub_47283(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_RELATIONSHIP( (uParam0^), uParam1, uParam2 );
    }
    return;
}

/* MAL_SETLOCKEDANDREGISTEREDONPED */ void sub_47372(unknown uParam0, unknown uParam1)
{
     /* MAL_REGISTERTARGET */ sub_46452( uParam0, uParam1 );
     /* MAL_SETLOCKEDTARGET */ sub_46545( uParam0, uParam1 );
    return;
}

/* MAL_AIMGUNATPED */ void sub_47461(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( uParam0 ))))
    {
        TASK_AIM_GUN_AT_PED( uParam0, uParam1, uParam2, uParam3 );
    }
    return;
}

/* MAL_SETPEDACCURACY */ void sub_47557(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_ACCURACY( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_SETCANTRIGGERBULLETCAM */ int sub_47630(unknown uParam0, boolean bParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        if (bParam1)
        {
            if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( uParam0 )))
            {
                 /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_SetCanTriggerBulletCam: Ped is not able to trigger BC, adding" );
                SET_PED_CAN_TRIGGER_BULLET_CAM( uParam0, bParam1 );
                return 1;
            }
        }
        else if (GET_PED_CAN_TRIGGER_BULLET_CAM( uParam0 ))
        {
             /* MAL_WRITESCRIPTLOG */ sub_30426( "MAL_SetCanTriggerBulletCam turning off BC" );
            SET_PED_CAN_TRIGGER_BULLET_CAM( uParam0, bParam1 );
            return 1;
        }
    }
    return 0;
}

/* P_HANDLE_GATE_VCPF_GET_SHOT */ void sub_48095()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;

    if (( /* MAL_ES_GETACTINTSTATUS */ sub_48147( ref g_U4282[0], 52 )) == 1)
    {
         /* WRITESCRIPTLOG */ sub_375( "GA", "Killing gate VCPF enemy 0", 0 );
         /* MAL_ES_FINISHACTINT */ sub_48325( ref g_U4282[0], 52 );
        if ((NOT (IS_PED_DEAD( l_U268 ))) AND ((NOT (IS_PED_DEAD( g_U4282[0]._fU0 ))) AND (NOT (IS_PED_DEAD( g_U4371 )))))
        {
             /* WRITESCRIPTLOG */ sub_375( "GA", "Passos shooting enemy 0.", 0 );
            OPEN_SEQUENCE_TASK( ref uVar2 );
            TASK_AIM_GUN_AT_PED( 0, g_U4282[0]._fU0, 1500, 0 );
            if (IS_PED_DEAD( g_U4282[1]._fU0 ))
            {
                TASK_AIM_GUN_AT_PED( 0, l_U268, -1, 0 );
            }
            else
            {
                TASK_AIM_GUN_AT_PED( 0, g_U4282[1]._fU0, -1, 0 );
            }
            CLOSE_SEQUENCE_TASK( uVar2 );
            TASK_PERFORM_SEQUENCE( g_U4371, uVar2 );
            CLEAR_SEQUENCE_TASK( uVar2 );
            SET_PED_SHOOTS_AT_COORD( g_U4371, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_BONE_COORDS( g_U4282[0]._fU0, 49176, g_U649 ) );
        }
         /* P_KILL_PED */ sub_48711( g_U4282[0]._fU0 );
    }
    if (( /* MAL_ES_GETACTINTSTATUS */ sub_48147( ref g_U4282[1], 53 )) == 1)
    {
         /* WRITESCRIPTLOG */ sub_375( "GA", "Killing gate VCPF enemy 1", 0 );
         /* MAL_ES_FINISHACTINT */ sub_48325( ref g_U4282[1], 53 );
        if ((NOT (IS_PED_DEAD( l_U268 ))) AND ((NOT (IS_PED_DEAD( g_U4282[1]._fU0 ))) AND (NOT (IS_PED_DEAD( g_U4371 )))))
        {
             /* WRITESCRIPTLOG */ sub_375( "GA", "Passos shooting enemy 1.", 0 );
            OPEN_SEQUENCE_TASK( ref uVar3 );
            TASK_AIM_GUN_AT_PED( 0, g_U4282[1]._fU0, 1500, 0 );
            if (IS_PED_DEAD( g_U4282[0]._fU0 ))
            {
                TASK_AIM_GUN_AT_PED( 0, l_U268, -1, 0 );
            }
            else
            {
                TASK_AIM_GUN_AT_PED( 0, g_U4282[0]._fU0, -1, 0 );
            }
            CLOSE_SEQUENCE_TASK( uVar3 );
            TASK_PERFORM_SEQUENCE( g_U4371, uVar3 );
            CLEAR_SEQUENCE_TASK( uVar3 );
            SET_PED_SHOOTS_AT_COORD( g_U4371, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_BONE_COORDS( g_U4282[1]._fU0, 49176, g_U649 ) );
        }
         /* P_KILL_PED */ sub_48711( g_U4282[1]._fU0 );
    }
    if ((NOT l_U300._fU20) AND ((NOT l_U300._fU16) AND ((IS_PED_DEAD( g_U4193[1]._fU0 )) AND ((IS_PED_DEAD( g_U4193[0]._fU0 )) AND ((IS_PED_DEAD( g_U4282[1]._fU0 )) AND (IS_PED_DEAD( g_U4282[0]._fU0 )))))))
    {
         /* STARTTIMER */ sub_2055( ref l_U300 );
    }
    if ((NOT l_U339) AND (NOT (IS_PED_DEAD( g_U4371 ))))
    {
        if ( /* ISTIMERDONE */ sub_2188( ref l_U300 ))
        {
            uVar4 = GET_WEAPON_FROM_HAND( g_U4371, 0, 0 );
            if (GET_DOES_WEAPON_EXIST( uVar4 ))
            {
                 /* WRITESCRIPTLOG */ sub_375( "GA", "Turn off Passos' laser", 0 );
                ENABLE_WEAPON_ATTACHMENT( uVar4, 13, 0 );
                TASK_AIM_GUN_AT_COORD( g_U4371, -15.02753000, 60.52505000, 12.45157000, -1, 0 );
            }
        }
    }
    return;
}

/* MAL_ES_GETACTINTSTATUS */ void sub_48147(int iParam0, unknown uParam1)
{
    return  /* MAL_GETACTINTSTATUS */ sub_48189( iParam0->_fU0, uParam1 );
}

/* MAL_GETACTINTSTATUS */ int sub_48189(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return PED_GET_ACTION_INTENTION_STATUS( uParam0, uParam1 );
    }
    return 0;
}

/* MAL_ES_FINISHACTINT */ void sub_48325(int iParam0, unknown uParam1)
{
     /* MAL_FINISHACTINT */ sub_48363( iParam0 + 0, uParam1 );
    return;
}

/* MAL_FINISHACTINT */ void sub_48363(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        PED_FINISH_ACTION_INTENTION( (uParam0^), uParam1 );
    }
    return;
}

/* P_KILL_PED */ void sub_48711(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* P_HANDLE_GATE_KICKED_OPEN */ void sub_49414()
{
    if (NOT l_U299)
    {
        if (NOT ( /* F_ISDOORLOCKED */ sub_49467( ref g_U3647 )))
        {
             /* P_SETDOORLOCKED */ sub_11860( ref g_U3647, 1 );
             /* WRITESCRIPTLOG */ sub_375( "MF", "Performing emergency lock on door craca preto are kicking open", 0 );
        }
    }
    if ((NOT (IS_PED_DEAD( g_U4282[0]._fU0 ))) AND (NOT l_U299))
    {
        if ((( /* MAL_ES_GETACTINTSTATUS */ sub_48147( ref g_U4282[0], 54 )) == 1) AND (ISEQ_QUERY_ENTITY_STATE( 1600959260, "v39_first_soldier", 3 )))
        {
             /* WRITESCRIPTLOG */ sub_375( "GA", "Bleachers gate kicked open.", 0 );
             /* P_SETDOORLOCKED */ sub_11860( ref g_U3647, 0 );
             /* P_SETDOORLATCH */ sub_13415( ref g_U3647, 1 );
             /* P_SETDOORAUTOCLOSE */ sub_12917( ref g_U3647, 1 );
             /* P_OPENDOOR */ sub_13251( ref g_U3647, 1, 1, 1.00000000 );
             /* MAL_ES_INVINCIBLE */ sub_37841( ref g_U4282[0], 0 );
            l_U299 = 1;
        }
    }
    return;
}

/* F_ISDOORLOCKED */ void sub_49467(int iParam0)
{
    unknown Result;
    unknown uVar4;

    if (( /* F_DOESDOOREXIST */ sub_11890( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_11974( iParam0 );
    }
    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref Result, ref uVar4 );
    return Result;
}

/* P_START_CHECKPOINT_THREAD */ void sub_50061(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_50132(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_375( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_50356( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 50253, 50303, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_50253()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_50303()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_50356(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_HANDLECUTSCENE */ void sub_50703(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_375( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_375( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_375( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_375( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_375( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_375( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_27193( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_375( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_51594( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_51594( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_375( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_42476( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_51594( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_52254( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_52254( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* NIS_PRE_SETUP */ void sub_51594(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_966(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_928(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_928() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_928(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* NIS_POST_SETUP */ void sub_52254(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_966(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_928(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_52352();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_52352()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_928(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_928(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_928(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_928(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_52709(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_375( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_375( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_9869( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_53000( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_53477( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_53477( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_53737( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_53477( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_53737( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_53737( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_53477( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_53737( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_53737( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_53737( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_53477( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_53737( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_53737( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_53737( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_53737( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_55317( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_375( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_53000(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6884( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_375( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_375( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_53477(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_53737(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_55317(int iParam0)
{
     /* WRITE_STRING */ sub_8704( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_55405( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_34006( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_34006( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_34006( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_34006( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_34006( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_56309( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU52 );
     /* WRITE_STRING */ sub_8704( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU96 );
     /* WRITE_STRING */ sub_8704( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU100 );
     /* WRITE_STRING */ sub_8704( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU104 );
     /* WRITE_STRING */ sub_8704( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU108 );
     /* WRITE_STRING */ sub_8704( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU112 );
     /* WRITE_STRING */ sub_8704( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU116 );
     /* WRITE_STRING */ sub_8704( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU120 );
     /* WRITE_STRING */ sub_8704( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU124 );
     /* WRITE_STRING */ sub_8704( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU128 );
     /* WRITE_STRING */ sub_8704( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_55608( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_55608( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_55608( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_55405(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_55608(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_56309(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* DISABLETIMER */ void sub_57347(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* P_START_SP_CHALLENGES */ void sub_57474()
{
     /* WRITESCRIPTLOG */ sub_375( "CCB", "P_START_SP_CHALLENGES", 0 );
    return;
}

/* F_HAS_PLAYER_ALERTED_BACK_TURNED_VCPF */ int sub_57568()
{
    int iVar2;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_928() ))) AND (NOT (IS_PED_DEAD( g_U4193[0]._fU0 ))))
    {
        if (( /* GET_DISTANCE_BETWEEN_PEDS */ sub_57675( g_U4193[0]._fU0,  /* PLAYER_PED_ID */ sub_928(), 1 )) < 18.00000000)
        {
            return 1;
        }
        if (HAS_SHOT_BEEN_FIRED_IN_AREA( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_928() ), 60.00000000, 1, ref iVar2 ))
        {
            if ((iVar2 == g_U4371) || (iVar2 == ( /* PLAYER_PED_ID */ sub_928())))
            {
                 /* WRITESCRIPTLOG */ sub_375( "GA", "Player or Passos shot.", 0 );
                return 1;
            }
        }
    }
    return 0;
}

/* GET_DISTANCE_BETWEEN_PEDS */ void sub_57675(unknown uParam0, unknown uParam1, boolean bParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar5 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        uVar8 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    }
    if (bParam2)
    {
        return VDIST( uVar5, uVar8 );
        break;
    }
    return VDIST( uVar5._fU0, uVar5._fU4, 0, uVar8._fU0, uVar8._fU4, 0 );
}

/* P_BACK_TURNED_VCPF_ENGAGE_PLAYER */ void sub_57963()
{
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_BACK_TURNED_VCPF_ENGAGE_PLAYER start", 0 );
     /* MAL_SETPEDCONSUMINGAMMO */ sub_45101( ref g_U4193[1]._fU0, 1 );
     /* MAL_ESA_BLOCK */ sub_58084( ref g_U4193, 0, 0, -1 );
     /* MAL_ESA_SETACTINT */ sub_58244( ref g_U4193, 47, 1000 );
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_BACK_TURNED_VCPF_ENGAGE_PLAYER end", 0 );
    return;
}

/* MAL_ESA_BLOCK */ void sub_58084(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_BLOCK */ sub_58150( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_BLOCK */ void sub_58150(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( iParam0->_fU0, uParam1 );
    }
    return;
}

/* MAL_ESA_SETACTINT */ void sub_58244(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_SETACTINT */ sub_58303( (uParam0^)[I]._fU0, uParam1, uParam2 );
    }
    return;
}

/* MAL_SETACTINT */ void sub_58303(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        PED_SET_ACTION_INTENTION( uParam0, uParam1, uParam2, g_U649 );
    }
    return;
}

/* MAL_ES_SETACTINT */ void sub_58463(int iParam0, unknown uParam1, unknown uParam2)
{
     /* MAL_SETACTINT */ sub_58303( iParam0->_fU0, uParam1, uParam2 );
    return;
}

/* F_IS_PLAYER_AIMING_AT_BAGMAN */ int sub_58529()
{
    if (NOT (IS_PED_DEAD( l_U268 )))
    {
        if ((PED_GET_ACTION_INTENTION_STATUS( l_U268, 52 )) == 3)
        {
            if (IS_PED_IN_CROSSHAIR_CYLINDER( l_U268, 2.50000000, 60.00000000, 0, -1082130432 ))
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_HIDE_BAGMAN */ void sub_58661()
{
    if (NOT (IS_PED_DEAD( l_U268 )))
    {
         /* WRITESCRIPTLOG */ sub_375( "GA", "Putting Bag Man into head down cover.", 0 );
        PED_FINISH_ACTION_INTENTION( l_U268, 52 );
        PED_SET_ACTION_INTENTION( l_U268, 47, 1000, g_U649 );
    }
    return;
}

/* F_ISPEDINTRIGGERBOXFIRSTTIME */ void sub_58813(int iParam0, unknown uParam1, unknown uParam2)
{
    if (iParam0->_fU68 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU68 =  /* F_ISPEDINTRIGGERBOX */ sub_58883( uParam1, (iParam0^) );
        if ((iParam0->_fU68) AND (uParam2))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU68;
}

/* F_ISPEDINTRIGGERBOX */ int sub_58883(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_59096(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_58883(  /* PLAYER_PED_ID */ sub_928(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_59291(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_58883(  /* PLAYER_PED_ID */ sub_928(), uParam0 );
}

/* P_CREATE_AND_START_TIMER */ void sub_59376(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_1905( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_2055( uParam0 );
    return;
}

/* P_RELEASE_FB_ASSETS */ void sub_59666()
{
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_RELEASE_FB_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_59745( ref l_U110, ref g_U1069 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_60293( ref l_U120, ref g_U1214 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "LEVEL_S_STAD_CP_04", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "npc_pstl_cover_grenade", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "npc_rifle_cover_grenade", ref g_U1354 );
     /* P_UNLOAD_PLGE_ANIM_DICTS */ sub_61144( 0 );
     /* WRITESCRIPTLOG */ sub_375( "GA", "P_RELEASE_FB_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_59745(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_59818( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_59818(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3778( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_60293(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_60367( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_60367(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3778( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_60737(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3778( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_UNLOAD_PLGE_ANIM_DICTS */ void sub_61144(boolean bParam0)
{
    if (NOT bParam0)
    {
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_RIFLE_CROUCH", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_PSTL_CROUCH", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_RIFLE_CORE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_PSTL_CORE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_RIFLE_CORE_RELOAD", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_PSTL_CORE_RELOAD", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_RIFLE_HANDSIG", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_PSTL_HANDSIG", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_RIFLE_ACTIONS", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_PSTL_ACTIONS", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_RIFLE_KNEE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_PSTL_KNEE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_RIFLE_COVER", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_PSTL_COVER", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_RIFLE_REACT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_PSTL_REACT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_RIFLE_COVER_EXIT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_PSTL_COVER_EXIT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_60737( "PLGE_PSTL_FULLBODY", ref g_U1354 );
    }
    else
    {
         /* UNLOADANIMDICT */ sub_61767( "PLGE_RIFLE_CROUCH" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_PSTL_CROUCH" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_RIFLE_CORE" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_PSTL_CORE" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_RIFLE_CORE_RELOAD" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_PSTL_CORE_RELOAD" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_RIFLE_HANDSIG" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_PSTL_HANDSIG" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_RIFLE_ACTIONS" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_PSTL_ACTIONS" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_RIFLE_KNEE" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_PSTL_KNEE" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_RIFLE_COVER" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_PSTL_COVER" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_RIFLE_REACT" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_PSTL_REACT" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_RIFLE_COVER_EXIT" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_PSTL_COVER_EXIT" );
         /* UNLOADANIMDICT */ sub_61767( "PLGE_PSTL_FULLBODY" );
    }
    return;
}

/* UNLOADANIMDICT */ void sub_61767(unknown uParam0)
{
    REMOVE_ANIM_DICT( uParam0, 0 );
    return;
}

