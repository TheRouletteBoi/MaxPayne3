void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U39 = -1;
    l_U40 = {64536, 64536, 64536};
    l_U44 = 0;
    l_U45 = 0;
    l_U46 = 1500;
    l_U75 = 0;
    l_U133 = 0;
    l_U135 = 1;
    l_U136 = 0;
    l_U761 = 0;
    l_U762 = 0;
    l_U817 = 0;
    l_U818 = 3;
    l_U837 = 0;
    l_U916 = 0;
    l_U917 = 0;
    l_U972 = {33.54393000, 61.34373000, 11.64529000};
    l_U975 = 111.25860000;
    l_U976 = {35, 62.75000000, 13.25000000};
    l_U979 = {65431, 21.33000000, 14.49000000};
    l_U1072 = 0;
    l_U1076 = 1;
    l_U1077 = 1;
     /* WRITESCRIPTLOG */ sub_477( "SP", "Script template_checkpoint_script_1.sc is starting up...", 0 );
     /* P_SB_POPULATE_VARIABLE_ARRAYS */ sub_595();
    l_U133 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_994();
        if (l_U136 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_10725();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_SB */ sub_3481( 1 );
     /* P_RELEASE_SB_ASSETS */ sub_69653();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "template_checkpoint_script_1" );
     /* WRITESCRIPTLOG */ sub_477( "SP", "Script template_checkpoint_script_1.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_477(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_SB_POPULATE_VARIABLE_ARRAYS */ void sub_595()
{
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_SB_POPULATE_VARIABLE_ARRAYS start", 0 );
    l_U113[0] = g_U2390;
    l_U113[1] = -1652775333;
    l_U113[2] = 1816766229;
    l_U113[3] = 1873472982;
    l_U113[4] = -1993976541;
    l_U113[5] = -2096019114;
    l_U113[6] = g_U2391;
    l_U113[7] = g_U2392;
    l_U113[8] = g_U2393;
    l_U113[9] = g_U2404;
    l_U113[10] = g_U2405;
    l_U113[11] = g_U2406;
    l_U113[12] = g_U2407;
    l_U113[13] = g_U848;
    l_U128[0] = 1194438308;
    l_U128[1] = -2075384407;
    l_U128[2] = 1478009203;
    l_U128[3] = 434544317;
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_SB_POPULATE_VARIABLE_ARRAYS end", 0 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_994()
{
    if (g_U855 == 10)
    {
        switch (l_U136)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1196()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )))
            {
                AUDIO_MUSIC_SUSPEND( 4000 );
                l_U136 = 1;
                 /* WRITESCRIPTLOG */ sub_477( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_1724())
            {
                l_U136 = 2;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_1784( 0 )) == 1)
            {
                l_U136 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )))
            {
                l_U136 = 3;
                 /* WRITESCRIPTLOG */ sub_477( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_477( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1133() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1133(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1095() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1095(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
             /* P_CLEANUP_SB */ sub_3481( 1 );
            l_U136 = 4;
             /* WRITESCRIPTLOG */ sub_477( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_477( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U77._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_6087( ref l_U77,  /* PLAYER_PED_ID */ sub_1095() );
            }
            l_U136 = 5;
             /* WRITESCRIPTLOG */ sub_477( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_477( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U133 = 1;
            l_U135 = 0;
            l_U136 = 0;
             /* WRITESCRIPTLOG */ sub_477( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_1095()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1133() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1133()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1196()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1095(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1133(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1133(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1095() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1095(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_1724()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_1784(int iParam0)
{
    iParam0 = 1;
    switch (l_U45)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_1866( ref l_U47 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )))
            {
                l_U46 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_2000( ref l_U47, l_U46, 1, 1 );
             /* STARTTIMER */ sub_2150( ref l_U47 );
        }
        if ( /* ISTIMERDONE */ sub_2283( ref l_U47 ))
        {
             /* WRITESCRIPTLOG */ sub_477( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1133() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1133(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U45 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U45 = 2;
            }
            else
            {
                l_U45 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_477( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_2784();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_477( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_2784();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_1866(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_2000(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2150(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2283(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_2784()
{
     /* WRITESCRIPTLOG */ sub_477( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_2859( ref l_U47 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1133() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1133(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U44 = 0;
    l_U44 = l_U44;
    l_U45 = 0;
    return;
}

/* RESETTIMER */ void sub_2859(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_CLEANUP_SB */ void sub_3481(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_CLEANUP_SB start", 0 );
    ENABLE_SHOOT_DODGE_HIGH_FALL_STAIRS_DETECTION( 0 );
    ISEQ_TERMINATE( -1414847258 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3567( -1414847258, ref g_U1263 );
    if ((CUTSCENE_NAMED_IS_LOADING( "MID_08A_STAD_concat" )) || (CUTSCENE_IS_LOADED( "MID_08A_STAD_concat" )))
    {
        CLEAR_NAMED_CUTSCENE( "MID_08A_STAD_concat" );
    }
     /* CREATETIMER */ sub_2000( ref l_U790, 1000, 1, 0 );
     /* CREATETIMER */ sub_2000( ref l_U799, 1000, 1, 0 );
     /* CREATETIMER */ sub_2000( ref l_U808, 1000, 1, 0 );
     /* CREATETIMER */ sub_2000( ref l_U819, 3000, 1, 0 );
    if (NOT bParam0)
    {
         /* P_CLEAN_ELEVATOR */ sub_4795( g_U3786 );
    }
     /* MAL_ESA_CLEAN */ sub_5020( ref l_U315 );
     /* CLEANPEDARRAY */ sub_5222( ref l_U674 );
     /* CLEANPLACEMENT */ sub_5303( g_U757._fU0 );
     /* SB_DESTROYSNIPER */ sub_5367( ref l_U242 );
     /* CLEANPED */ sub_5098( l_U958 );
    RESET_PED_MODEL_LOD_DISTANCES( g_U2387 );
     /* P_STOP_SP_CHALLENGES */ sub_5689();
     /* CLEANPLACEMENTARRAY */ sub_5846( ref l_U1073 );
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_CLEANUP_SB end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_3567(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3705( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_3705(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_CLEAN_ELEVATOR */ void sub_4795(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47, unknown uParam48, unknown uParam49, unknown uParam50, unknown uParam51, unknown uParam52, unknown uParam53, unknown uParam54, unknown uParam55, unknown uParam56, unknown uParam57, unknown uParam58, unknown uParam59, unknown uParam60, unknown uParam61, unknown uParam62, unknown uParam63, unknown uParam64, unknown uParam65, unknown uParam66, unknown uParam67, unknown uParam68, unknown uParam69, unknown uParam70, unknown uParam71, unknown uParam72, unknown uParam73, unknown uParam74, unknown uParam75, unknown uParam76, unknown uParam77, unknown uParam78, unknown uParam79)
{
     /* WRITE_STRING */ sub_4855( "[SP]### P_CLEAN_ELEVATOR ###" );
     /* CLEANOBJECT */ sub_4910( uParam0._fU232 );
     /* CLEANOBJECT */ sub_4910( uParam0._fU236 );
     /* CLEANOBJECT */ sub_4910( uParam0._fU240 );
     /* CLEANOBJECT */ sub_4910( uParam0._fU244 );
     /* CLEANOBJECT */ sub_4910( uParam0._fU248 );
    return;
}

/* WRITE_STRING */ void sub_4855(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* CLEANOBJECT */ void sub_4910(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* MAL_ESA_CLEAN */ void sub_5020(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_ES_CLEAN */ sub_5068( ref (uParam0^)[I] );
    }
    return;
}

/* MAL_ES_CLEAN */ void sub_5068(int iParam0)
{
     /* CLEANPED */ sub_5098( iParam0->_fU0 );
    iParam0->_fU172 = 0;
    return;
}

/* CLEANPED */ void sub_5098(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANPEDARRAY */ void sub_5222(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_5098( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_5303(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* SB_DESTROYSNIPER */ void sub_5367(int iParam0)
{
    iParam0->_fU164 = 0;
    I_SEQUENCE_UNREGISTER_ENTITY( "S_STAD_SNIPBEH", "stad_sniper" );
     /* TERMINATEINTERACTIVESEQUENCE */ sub_5460( "S_STAD_SNIPBEH", 0 );
     /* CLEANPED */ sub_5098( iParam0->_fU0 );
    return;
}

/* TERMINATEINTERACTIVESEQUENCE */ void sub_5460(unknown uParam0, int iParam1)
{
    if ((I_SEQUENCE_IS_LOADED( uParam0 )) == 1)
    {
        I_SEQUENCE_TERMINATE( uParam0 );
    }
    if (iParam1 == 1)
    {
        while ((I_SEQUENCE_IS_LOADED( uParam0 )) == 1)
        {
            DISPLAYF( "[SP]### Waiting for interactive sequence to terminate: {} ###", 1, 1537, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_5689()
{
     /* WRITESCRIPTLOG */ sub_477( "CCB", "P_STOP_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_477( "CCB", "Stopping the Stadium_Trophy context...", 0 );
    END_CONTEXT( "Stadium_Trophy" );
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_5846(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_5303( (uParam0^)[I] );
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_6087(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_477( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_6306( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_7470( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7784( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8219( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7784( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8219( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7784( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8219( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8535( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8219( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8535( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8219( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_9107( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_9309( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1095(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_477( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_6306(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6368( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_6368(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_7470(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_7784(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_4855( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_8219(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_8535(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_4855( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_9107(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_9309(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6368( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_9407( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_9407(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_10725()
{
    int iVar2;

    iVar2 = l_U133;
    switch (l_U133)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_477( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_10955();
         /* P_SET_STATIC_DATA */ sub_11194();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U133 = 2;
         /* WRITESCRIPTLOG */ sub_477( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_477( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_SB_PERSISTENT_ASSETS */ sub_13806();
         /* P_REQUEST_SB_NONPERSISTENT_ASSETS */ sub_22375();
        l_U133 = 3;
         /* WRITESCRIPTLOG */ sub_477( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_26600( ref g_U1263 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_26209( ref g_U1354 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_25807( ref g_U1214 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_25410( ref g_U1069 )))))
        {
            if ((NOT l_U77._fU0) AND (g_U854 == 10))
            {
                l_U133 = 4;
                 /* WRITESCRIPTLOG */ sub_477( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U133 = 6;
                 /* WRITESCRIPTLOG */ sub_477( "SP", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_477( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U3884 = 1;
        l_U135 = 0;
         /* P_SETUP_FREIGHT_ELEVATOR */ sub_27244( 0 );
         /* P_OPEN_ELEVATOR_DOORS */ sub_29077( ref g_U3786, 1, 0 );
         /* P_HANDLE_ELEVATOR */ sub_29366( ref g_U3786 );
        if (( /* HAS_SAVEFILE_LOADED */ sub_31443( ref l_U77 )) == 0)
        {
            if (IS_MAGDEMO())
            {
                 /* MAL_GIVEPEDWEAPON */ sub_31674(  /* PLAYER_PED_ID */ sub_1095(), 68019059, 200, 0, 0 );
                 /* MAL_GIVEPEDWEAPONINHOLSTER */ sub_31987(  /* PLAYER_PED_ID */ sub_1095(), 1194438308, 200, 0, 0 );
            }
            else
            {
                 /* MAL_GIVEPEDWEAPON */ sub_31674(  /* PLAYER_PED_ID */ sub_1095(), 68019059, 100, 0, 0 );
                 /* MAL_GIVEPEDWEAPONINHOLSTER */ sub_31987(  /* PLAYER_PED_ID */ sub_1095(), 1194438308, 100, 0, 0 );
            }
            l_U133 = 5;
             /* WRITESCRIPTLOG */ sub_477( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U133 = 6;
             /* WRITESCRIPTLOG */ sub_477( "SP", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1095(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1095(), 0, 0 ) )))
            {
                l_U133 = 6;
                 /* WRITESCRIPTLOG */ sub_477( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 6:
        if (g_U3884)
        {
             /* P_TECH_LIGHTS_ON_LLOD */ sub_32518( 0 );
             /* P_CREATE_STADIUM_OBJECTS */ sub_33058();
             /* P_CREATE_DEAD_BODIES_ON_FIELD */ sub_33253();
             /* CLEANPLACEMENTARRAY */ sub_5846( ref l_U1073 );
            l_U1073[0] =  /* CREATEPLACEMENT */ sub_33916( -4072149, -99.41000000, -33.37000000, 19.88000000, g_U649, 1, 0, 0, 1119092736 );
            l_U1073[1] =  /* CREATEPLACEMENT */ sub_33916( -4072149, -99.67000000, -33.38000000, 19.88000000, g_U649, 1, 0, 0, 1119092736 );
             /* P_2NDBLEACHERS_SET_DATA */ sub_34143();
            if (l_U135)
            {
                l_U133 = 8;
                 /* WRITESCRIPTLOG */ sub_477( "GA", "eCheckpointState = CP_SB_ELEVATOR_CUTSCENE", 0 );
            }
            else
            {
                l_U133 = 7;
                 /* WRITESCRIPTLOG */ sub_477( "GA", "eCheckpointState = CP_SB_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 7:
        if (l_U134)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )))
            {
                 /* TELEPORTPED */ sub_35145(  /* PLAYER_PED_ID */ sub_1095(), g_U2138[10], g_U2256[10] );
                FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_1095(), 0 );
            }
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2296[10], 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2336[10], 1065353216, 0 );
        }
        if ( /* MAL_ENEMYSTRUCTARRAYCREATE */ sub_35301( ref l_U315, "2ndBleachers", ref l_U668, 1.00000000, 1, 0 ))
        {
            if ( /* F_SPAWN_PASSOS_TO_SUPPRESS_SNIPER */ sub_39007())
            {
                if ( /* F_SBLEACHERS_START_VCPF_SNIPER */ sub_39789())
                {
                     /* P_2NDBLEACHERS_POST_SPAWN */ sub_41613();
                    l_U133 = 8;
                     /* WRITESCRIPTLOG */ sub_477( "GA", "eCheckpointState = CP_SB_ELEVATOR_CUTSCENE", 0 );
                }
            }
        }
        break;
        case 8:
        if (l_U134)
        {
            PLAY_IMAGEFX( "GAMMA_SATURATION_COLOR_ZOOM_X", 4, 1 );
             /* CUTSYS_CREATESTANDALONECUTSCENE */ sub_46777( ref l_U858, "MID_07_STADIUM", 42448, 42772, 43875, 44768, 250, 0 );
            l_U858._fU100 = g_U853;
            l_U858._fU104 = 0;
             /* P_CREATE_S_STA_GG_M8_02 */ sub_47415();
            if (l_U135)
            {
                l_U858._fU4 = 2;
            }
            else
            {
                l_U858._fU4 = 9;
            }
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_48264( ref l_U858 ))
        {
            if (NOT l_U77._fU0)
            {
                g_U855 = 10;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_50869( ref l_U77, g_U855,  /* PLAYER_PED_ID */ sub_1095(), g_U2138[10], g_U2256[10], g_U2296[10], g_U2336[10], 1 );
            }
            ENABLE_SHOOT_DODGE_HIGH_FALL_STAIRS_DETECTION( 1 );
            l_U133 = 9;
             /* WRITESCRIPTLOG */ sub_477( "GA", "eCheckpointState = CP_SB_BLEACHERS_FIGHT", 0 );
        }
        break;
        case 9:
         /* P_HANDLE_STATE_BLEACHERS_FIGHT */ sub_55502( l_U134 );
        break;
        case 10:
         /* P_HANDLE_STATE_BLEACHERS_SNIPER_INTRO */ sub_61167( l_U134 );
        break;
        case 11:
         /* P_HANDLE_STATE_SNIPER_RUN */ sub_62742( l_U134 );
        break;
        case 12:
         /* P_HANDLE_STATE_SNIPER_FIGHT */ sub_63594( l_U134 );
        if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_69202( ref l_U221,  /* PLAYER_PED_ID */ sub_1095(), 0 ))
        {
             /* WRITESCRIPTLOG */ sub_477( "SP", "TRIG_TOP_STAIRS_IMAGE_FX", 0 );
            PLAY_IMAGEFX( "FLICKER_VIBRATE_LIGHTEN", 4, 0 );
        }
        break;
        case 13:
        if (l_U134)
        {
             /* WRITESCRIPTLOG */ sub_477( "SA", "Mag demo complete.", 0 );
            START_PANEL_WIPE( 0, 6 );
            DO_SCREEN_FADE_OUT( 500 );
        }
        if (IS_SCREEN_FADED_OUT())
        {
            RETURN_TO_TITLESCREEN( 0 );
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        }
        break;
        case 14:
        if ((g_U855 == 11) || (NOT HAS_CUTSCENE_FINISHED()))
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U133 = 0;
             /* WRITESCRIPTLOG */ sub_477( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U133 != iVar2)
    {
        l_U134 = 1;
    }
    else
    {
        l_U134 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_10955()
{
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U134 = 1;
    l_U817 = 0;
    l_U818 = 4;
     /* CREATETIMER */ sub_2000( ref l_U949, 1000, 1, 0 );
     /* CREATETIMER */ sub_2000( ref l_U763, 2000, 1, 0 );
     /* CREATETIMER */ sub_2000( ref l_U772, 3000, 1, 0 );
     /* CREATETIMER */ sub_2000( ref l_U781, 10, 1, 0 );
    l_U916 = 0;
    l_U917 = 0;
    l_U761 = 0;
    l_U762 = 0;
    l_U1072 = 0;
    l_U837 = 0;
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* P_SET_STATIC_DATA */ void sub_11194()
{
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATETRIGGERBOX */ sub_11329( ref l_U928, "tb_SB_Elevator", -103.62000000, 22.04000000, 27.65000000, 5.00000000, 4.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11329( ref l_U158, "TRIGGER_LEFT_BLEACHERS", -95.68000000, -30.40000000, 18.23000000, 3.46000000, 6.33000000, 3.53000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11329( ref l_U137, "TRIG_LARGE_GATE_IMAGE_FX", -92.89000000, -30.36000000, 17.41000000, 4.00000000, 6.50000000, 4.00000000, 0.00000000, 0.00000000, 0.18000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11329( ref l_U179, "TRIGGER_ACTIVATE_SNIPER_AND_GUARD", -93.89000000, -38.12000000, 19.31000000, 1.21000000, 2.57000000, 2.61000000, 0.00000000, 0.00000000, -55.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11329( ref l_U221, "TRIG_TOP_STAIRS_IMAGE_FX", -96.14000000, -38.61000000, 18.45780000, 4.00000000, 6.50000000, 4.00000000, 0.00000000, 0.00000000, 0.18000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11329( ref l_U982, "TETH_UPPER", -101.73000000, -0.09000000, 27.49000000, 10.89000000, 89.47000000, 5.10000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11329( ref l_U200, "TRIGGER_REINFORCEMENTS", -90.89000000, -40.25000000, 19.31000000, 3.48000000, 9.66000000, 2.61000000, 0.00000000, 0.00000000, -30.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11329( ref l_U1006, "TRIG_NORMALCAM", -101.87000000, 22.11000000, 27.61000000, 9.33000000, 6.50000000, 3.94000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12067( ref l_U1003, "TETH_LOWER1", -83.80000000, -12.14000000, 18.30000000, 3.11000000, 16.34000000, 3.10000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12067( ref l_U1004, "TETH_LOWER2", -83.80000000, 10.36000000, 18.30000000, 3.11000000, 19.93000000, 3.10000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12067( ref l_U1005, "TETH_LOWER3", -83.80000000, -1.60000000, 18.30000000, 2.11000000, 5.72000000, 3.10000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12067( ref l_U755[0], "TETH_SnipNest0", -85.17000000, -54.26000000, 19.45000000, 1.75000000, 3.48000000, 2.11000000, 0.00000000, 0.00000000, -80.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12067( ref l_U755[1], "TETH_SnipNest1", -87.16000000, -52.16000000, 19.45000000, 3.12000000, 1.83000000, 2.11000000, 0.00000000, 0.00000000, -80.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12067( ref l_U755[2], "TETH_SnipNest2", -86.67000000, -49.03000000, 19.45000000, 4.68000000, 1.83000000, 2.11000000, 0.00000000, 0.00000000, -110.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12067( ref l_U755[3], "TETH_SnipNest3", -87.98000000, -42.72000000, 19.45000000, 10.71000000, 3.31000000, 2.11000000, 0.00000000, 0.00000000, -65.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12067( ref l_U755[4], "TETH_SnipNest4", -87.33000000, -37.90000000, 19.45000000, 3.53000000, 3.31000000, 2.11000000, 0.00000000, 0.00000000, -65.00000000, 1 );
     /* P_SETDOORLOCKED */ sub_12677( ref g_U3696, 0 );
     /* P_OPENDOOR */ sub_12947( ref g_U3696, 0, 1, 0.60000000 );
     /* P_SETDOORAFFECTEDBYBULLETS */ sub_13111( ref g_U3696, 0 );
     /* P_SETDOORLOCKED */ sub_12677( ref g_U3689, 0 );
     /* P_SETDOORMINMAXLIMIT */ sub_13231( ref g_U3689, -20.00000000, 0.00000000 );
     /* P_OPENDOOR */ sub_12947( ref g_U3689, 1, 1, -1 );
     /* P_SETDOORAFFECTEDBYBULLETS */ sub_13111( ref g_U3689, 0 );
     /* P_CLOSEDOOR */ sub_13478( ref g_U3465, 1 );
     /* P_CLOSEDOOR */ sub_13478( ref g_U3472, 1 );
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATETRIGGERBOX */ void sub_11329(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_12067(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_SETDOORLOCKED */ void sub_12677(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_12707( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12791( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_12707(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_12791(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_OPENDOOR */ void sub_12947(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if (( /* F_DOESDOOREXIST */ sub_12707( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12791( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

/* P_SETDOORAFFECTEDBYBULLETS */ void sub_13111(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_12707( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12791( iParam0 );
    }
    DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( iParam0->_fU0, iParam0->_fU4 ), uParam1 );
    return;
}

/* P_SETDOORMINMAXLIMIT */ void sub_13231(int iParam0, float fParam1, float fParam2)
{
    if (( /* F_DOESDOOREXIST */ sub_12707( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12791( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        PRINTSTRING( "[SP]### Error: Door fMinLimit greater than fMaxLimit (default min:-81.0 max:81.0) ###" );
        PRINTNL();
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

/* P_CLOSEDOOR */ void sub_13478(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_12707( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12791( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* P_REQUEST_SB_PERSISTENT_ASSETS */ void sub_13806()
{
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_REQUEST_SB_PERSISTENT_ASSETS start", 0 );
     /* SETUP_SCRIPTED_SPEECH */ sub_13909( "SSTDAUD" );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_14080( ref l_U113, ref g_U1069 );
    if ((NOT l_U135) || (g_U854 == 10))
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_14153( g_U2387, ref g_U1069 );
    }
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_17035( ref l_U128, ref g_U1214 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "npc_pstl_cover_grenade", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "npc_rifle_cover_grenade", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "LEVEL_S_STAD_PU", ref g_U1354 );
     /* P_LOAD_PLGE_ANIM_DICTS */ sub_21026( 0, 0 );
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_REQUEST_SB_PERSISTENT_ASSETS end", 0 );
    return;
}

/* SETUP_SCRIPTED_SPEECH */ void sub_13909(unknown uParam0)
{
    StrCopy( ref g_U157._fU0, uParam0, 16 );
     /* CLEARPEDCONVERSATIONDATA */ sub_13953();
    return;
}

/* CLEARPEDCONVERSATIONDATA */ void sub_13953()
{
    int I;

    for ( I = 0; I <= 8; I++ )
    {
        g_U157._fU16[I]._fU0 = nil;
        g_U157._fU16[I]._fU4 = 0;
        g_U157._fU92[I] = 0;
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_14080(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_14153( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_14153(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_14220( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14478( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_14220(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14478( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14478( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14478( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16009( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14478( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14478( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_14478(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14539( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_14539(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_16009(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_17035(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_17109( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_17109(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_17163( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17424( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_17163(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17424( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17424( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17424( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16009( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17424( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17424( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_17424(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14539( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_19087(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_19139( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19391( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_19139(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19391( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19391( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19391( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16009( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19391( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_19391( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_19391(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14539( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_LOAD_PLGE_ANIM_DICTS */ void sub_21026(boolean bParam0, boolean bParam1)
{
    if (NOT bParam0)
    {
        if (NOT bParam1)
        {
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_RIFLE_CROUCH", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_PSTL_CROUCH", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_RIFLE_KNEE", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_PSTL_KNEE", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_PSTL_CORE", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_PSTL_COVER", ref g_U1354 );
        }
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_RIFLE_CORE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_RIFLE_CORE_RELOAD", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_PSTL_CORE_RELOAD", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_RIFLE_HANDSIG", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_PSTL_HANDSIG", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_RIFLE_ACTIONS", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_PSTL_ACTIONS", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_RIFLE_COVER", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_RIFLE_REACT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_PSTL_REACT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_RIFLE_COVER_EXIT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_PSTL_COVER_EXIT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_19087( "PLGE_PSTL_FULLBODY", ref g_U1354 );
    }
    else
    {
         /* LOADANIMDICT */ sub_21657( "PLGE_RIFLE_CROUCH", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_PSTL_CROUCH", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_RIFLE_CORE", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_PSTL_CORE", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_RIFLE_CORE_RELOAD", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_PSTL_CORE_RELOAD", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_RIFLE_HANDSIG", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_PSTL_HANDSIG", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_RIFLE_ACTIONS", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_PSTL_ACTIONS", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_RIFLE_KNEE", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_PSTL_KNEE", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_RIFLE_COVER", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_PSTL_COVER", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_RIFLE_REACT", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_PSTL_REACT", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_RIFLE_COVER_EXIT", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_PSTL_COVER_EXIT", 0, 1 );
         /* LOADANIMDICT */ sub_21657( "PLGE_PSTL_FULLBODY", 0, 1 );
    }
    return;
}

/* LOADANIMDICT */ void sub_21657(unknown uParam0, unknown uParam1, int iParam2)
{
    REQUEST_ANIM_DICT( uParam0, uParam1 );
    "[doubled result, dropped if not asigned]";
    if (iParam2 == 1)
    {
        while ((HAS_ANIM_DICT_LOADED( uParam0, uParam1 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an animation dictionary to be loaded: {} ###", 1, 1537, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_REQUEST_SB_NONPERSISTENT_ASSETS */ void sub_22375()
{
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_REQUEST_SB_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_22483( -1414847258, ref g_U1263 );
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_REQUEST_SB_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_22483(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_22544( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22794( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_22544(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22794( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22794( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22794( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22794( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_16009( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_16009( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22794( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_22794( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_22794(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14539( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_25410(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_25807(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_26209(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_26600(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* P_SETUP_FREIGHT_ELEVATOR */ void sub_27244(unknown uParam0)
{
    vector[2] vVar3;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;

     /* WRITE_STRING */ sub_4855( "[SP]### P_SETUP_FREIGHT_ELEVATOR ###" );
    array(ref vVar3, 2);
    vVar3[0] = {-104.17000000, 22.06000000, 12.76000000};
    vVar3[1] = {-104.17000000, 22.06000000, 27.62000000};
     /* P_CREATEELEVATORSTRUCTSERVICEDUEL */ sub_27414( ref g_U3786, ref vVar3, 0.00000000, 0.00000000, -90.00000000, g_U2391, g_U2392, g_U2393, 1.00000000 );
    if (g_U854 == 10)
    {
         /* P_CREATEELEVATOR */ sub_27987( ref g_U3786, 1, 1 );
         /* P_OPEN_ELEVATOR_DOORS */ sub_29077( ref g_U3786, 1, 0 );
        SET_OBJECT_COORDS( g_U3786._fU232, -104.17000000, 22.06000000, 27.62000000 );
    }
    else
    {
         /* P_CREATEELEVATOR */ sub_27987( ref g_U3786, 0, uParam0 );
        SET_OBJECT_COORDS( g_U3786._fU232, -104.17000000, 22.06000000, 12.76000000 );
    }
    return;
}

/* P_CREATEELEVATORSTRUCTSERVICEDUEL */ void sub_27414(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
     /* WRITE_STRING */ sub_4855( "[SP]### P_CreateElevatorStructService ###" );
     /* P_CREATEELEVATORSTRUCTSERVICE */ sub_27523( iParam0, uParam1, uParam2, uParam5, uParam6, uParam8 );
    iParam0->_fU288 = 1;
    iParam0->_fU284 = 1;
    iParam0->_fU224 = uParam7;
    iParam0->_fU228 = uParam7;
    return;
}

/* P_CREATEELEVATORSTRUCTSERVICE */ void sub_27523(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
     /* WRITE_STRING */ sub_4855( "[SP]### P_CreateElevatorStructService ###" );
     /* P_CREATEELEVATORSTRUCT */ sub_27629( iParam0, uParam1, uParam2, uParam5, uParam6, uParam6, uParam7 );
    iParam0->_fU288 = 1;
    iParam0->_fU292 = 2.74000000;
    iParam0->_fU296 = 0.05000000;
    return;
}

/* P_CREATEELEVATORSTRUCT */ void sub_27629(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;

     /* WRITE_STRING */ sub_4855( "[SP]### P_CreateElevatorStruct ###" );
    I = 0;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        iParam0->_fU24[I] = {(uParam1^)[I]};
    }
    iParam0->_fU316 = 0;
    iParam0->_fU12 = {uParam2};
    iParam0->_fU212 = uParam5;
    iParam0->_fU216 = uParam6;
    iParam0->_fU220 = uParam7;
    iParam0->_fU284 = 0;
    iParam0->_fU288 = 0;
    iParam0->_fU292 = 0.88000000;
    iParam0->_fU296 = 0.02500000;
    iParam0->_fU300 = 0.00000000;
    iParam0->_fU304 = 0.00000000;
    iParam0->_fU208 = uParam8;
    return;
}

/* P_CREATEELEVATOR */ void sub_27987(int iParam0, unknown uParam1, unknown uParam2)
{
     /* WRITE_STRING */ sub_4855( "[SP]### P_CreateElevator ###" );
    iParam0->_fU0 = {iParam0->_fU24[uParam1]};
     /* CLEANOBJECT */ sub_4910( iParam0->_fU232 );
    iParam0->_fU232 =  /* CREATEOBJECT */ sub_28103( iParam0->_fU212, iParam0->_fU0, iParam0->_fU12, 0, uParam2, 0 );
    if ((DOES_OBJECT_EXIST( iParam0->_fU232 )) == 1)
    {
        FREEZE_OBJECT_POSITION( iParam0->_fU232, 1 );
    }
     /* CLEANOBJECT */ sub_4910( iParam0->_fU236 );
    iParam0->_fU236 =  /* CREATEOBJECT */ sub_28103( iParam0->_fU216, iParam0->_fU0, iParam0->_fU12, 0, uParam2, 0 );
    if ((DOES_OBJECT_EXIST( iParam0->_fU236 )) == 1)
    {
        FREEZE_OBJECT_POSITION( iParam0->_fU236, 1 );
    }
    if (iParam0->_fU288 == 0)
    {
         /* CLEANOBJECT */ sub_4910( iParam0->_fU240 );
        iParam0->_fU240 =  /* CREATEOBJECT */ sub_28103( iParam0->_fU220, iParam0->_fU0, iParam0->_fU12, 0, uParam2, 0 );
        if ((DOES_OBJECT_EXIST( iParam0->_fU240 )) == 1)
        {
            FREEZE_OBJECT_POSITION( iParam0->_fU240, 1 );
        }
    }
    if (iParam0->_fU284 == 1)
    {
         /* CLEANOBJECT */ sub_4910( iParam0->_fU244 );
        iParam0->_fU244 =  /* CREATEOBJECT */ sub_28103( iParam0->_fU224, iParam0->_fU0, iParam0->_fU12, 0, uParam2, 0 );
        if ((DOES_OBJECT_EXIST( iParam0->_fU244 )) == 1)
        {
            FREEZE_OBJECT_POSITION( iParam0->_fU244, 1 );
        }
        if (iParam0->_fU288 == 0)
        {
             /* CLEANOBJECT */ sub_4910( iParam0->_fU248 );
            iParam0->_fU248 =  /* CREATEOBJECT */ sub_28103( iParam0->_fU228, iParam0->_fU0, iParam0->_fU12, 0, uParam2, 0 );
            if ((DOES_OBJECT_EXIST( iParam0->_fU248 )) == 1)
            {
                FREEZE_OBJECT_POSITION( iParam0->_fU248, 1 );
            }
        }
    }
    return;
}

/* CREATEOBJECT */ void sub_28103(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_28228( uParam0, 1 );
    }
    Result = CREATE_OBJECT( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* LOADMODEL */ void sub_28228(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_4855( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_OPEN_ELEVATOR_DOORS */ void sub_29077(int iParam0, int iParam1, int iParam2)
{
     /* WRITE_STRING */ sub_4855( "[SP]### P_OPEN_ELEVATOR_DOORS ###" );
    if (iParam2 == 0)
    {
        if (iParam1 == 1)
        {
            iParam0->_fU308 = 2;
        }
        else if (iParam0->_fU288 == 1)
        {
            ;
        }
        iParam0->_fU308 = 1;;
    }
    else if (iParam1 == 1)
    {
        iParam0->_fU312 = 2;
    }
    else if (iParam0->_fU288 == 1)
    {
        ;
    }
    iParam0->_fU312 = 1;;;
    return;
}

/* P_HANDLE_ELEVATOR */ void sub_29366(int iParam0)
{
    int I;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    float fVar8;
    float fVar9;
    float fVar10;
    vector vVar11;
    vector vVar14;

    if (iParam0->_fU316 == 2)
    {
        iParam0->_fU204 = -1;
        I = 0;
        for ( I = 0; I <= 9; I++ )
        {
            if (iParam0->_fU160[I] >= 0)
            {
                iParam0->_fU204 = iParam0->_fU160[I];
                iParam0->_fU160[I] = -1;
                uVar4 = {iParam0->_fU24[iParam0->_fU204] - iParam0->_fU0};
                uVar7 = ABSF( (uVar4._fU0 + uVar4._fU4) + uVar4._fU8 );
                fVar8 = (TIMESTEP() * iParam0->_fU208) * (uVar4._fU0 / uVar7);
                fVar9 = (TIMESTEP() * iParam0->_fU208) * (uVar4._fU4 / uVar7);
                fVar10 = (TIMESTEP() * iParam0->_fU208) * (uVar4._fU8 / uVar7);
                iParam0->_fU148 = {fVar8, fVar9, fVar10};
                iParam0->_fU316 = 1;
                I = 9;
            }
        }
        if (iParam0->_fU204 == -1)
        {
             /* WRITE_STRING */ sub_4855( "[ML] --- ELEVATOR DONE MOVING ---" );
            iParam0->_fU316 = 3;
        }
    }
    if (iParam0->_fU316 == 1)
    {
        iParam0->_fU0 = {iParam0->_fU0 + iParam0->_fU148};
        if ((((ref iParam0->_fU0->_fU8) <= iParam0->_fU24[iParam0->_fU204]._fU8) AND ((ref iParam0->_fU148->_fU8) < 0)) || ((((ref iParam0->_fU0->_fU8) >= iParam0->_fU24[iParam0->_fU204]._fU8) AND ((ref iParam0->_fU148->_fU8) > 0)) || ((((ref iParam0->_fU0->_fU4) <= iParam0->_fU24[iParam0->_fU204]._fU4) AND ((ref iParam0->_fU148->_fU4) < 0)) || ((((ref iParam0->_fU0->_fU4) >= iParam0->_fU24[iParam0->_fU204]._fU4) AND ((ref iParam0->_fU148->_fU4) > 0)) || ((((ref iParam0->_fU0->_fU0) <= iParam0->_fU24[iParam0->_fU204]._fU0) AND ((ref iParam0->_fU148->_fU0) < 0)) || (((ref iParam0->_fU0->_fU0) >= iParam0->_fU24[iParam0->_fU204]._fU0) AND ((ref iParam0->_fU148->_fU0) > 0)))))))
        {
            iParam0->_fU316 = 2;
        }
    }
    if ((DOES_OBJECT_EXIST( iParam0->_fU232 )) == 1)
    {
        SET_OBJECT_COORDS( iParam0->_fU232, iParam0->_fU0 );
    }
    if (iParam0->_fU308 == 2)
    {
        iParam0->_fU300 = iParam0->_fU292;
        iParam0->_fU308 = 2;
    }
    else if (iParam0->_fU308 == 0)
    {
        iParam0->_fU300 = 0.00000000;
        iParam0->_fU308 = 0;
    }
    if (iParam0->_fU308 == 1)
    {
        if (iParam0->_fU300 < iParam0->_fU292)
        {
            iParam0->_fU300 += iParam0->_fU296;
        }
        if (iParam0->_fU300 >= iParam0->_fU292)
        {
            iParam0->_fU300 = iParam0->_fU292;
            iParam0->_fU308 = 2;
        }
    }
    else if (iParam0->_fU308 == 3)
    {
        if (iParam0->_fU300 > 0.00000000)
        {
            iParam0->_fU300 -= iParam0->_fU296;
        }
        if (iParam0->_fU300 <= 0.00000000)
        {
            iParam0->_fU300 = 0.00000000;
            iParam0->_fU308 = 0;
        }
    }
    if ((DOES_OBJECT_EXIST( iParam0->_fU232 )) == 1)
    {
        vVar11 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU232 )};
    }
    if (iParam0->_fU288 == 0)
    {
        if ((ref iParam0->_fU12->_fU8) == 0.00000000)
        {
            vVar14 = {-iParam0->_fU300, 0.00000000, 0.00000000};
        }
        else if (((ref iParam0->_fU12->_fU8) == -270.00000000) || ((ref iParam0->_fU12->_fU8) == 90.00000000))
        {
            vVar14 = {0.00000000, -iParam0->_fU300, 0.00000000};
        }
        else if (((ref iParam0->_fU12->_fU8) == -180.00000000) || ((ref iParam0->_fU12->_fU8) == 180.00000000))
        {
            vVar14 = {iParam0->_fU300, 0.00000000, 0.00000000};
        }
        else if (((ref iParam0->_fU12->_fU8) == -90.00000000) || ((ref iParam0->_fU12->_fU8) == 270.00000000))
        {
            vVar14 = {0.00000000, iParam0->_fU300, 0.00000000};
        };;;;
    }
    else
    {
        vVar14 = {0.00000000, 0.00000000, iParam0->_fU300};
    }
    if ((DOES_OBJECT_EXIST( iParam0->_fU236 )) == 1)
    {
        FREEZE_OBJECT_POSITION( iParam0->_fU236, 0 );
        SET_OBJECT_COORDS( iParam0->_fU236, vVar11 + vVar14 );
        FREEZE_OBJECT_POSITION( iParam0->_fU236, 1 );
    }
    if ((DOES_OBJECT_EXIST( iParam0->_fU240 )) == 1)
    {
        FREEZE_OBJECT_POSITION( iParam0->_fU240, 0 );
        SET_OBJECT_COORDS( iParam0->_fU240, vVar11 - vVar14 );
        FREEZE_OBJECT_POSITION( iParam0->_fU240, 1 );
    }
    if (iParam0->_fU284 == 1)
    {
        if (iParam0->_fU312 == 2)
        {
            iParam0->_fU304 = iParam0->_fU292;
            iParam0->_fU312 = 2;
        }
        else if (iParam0->_fU312 == 0)
        {
            iParam0->_fU304 = 0.00000000;
            iParam0->_fU312 = 0;
        }
        if (iParam0->_fU312 == 1)
        {
            if (iParam0->_fU304 < iParam0->_fU292)
            {
                iParam0->_fU304 += iParam0->_fU296;
            }
            if (iParam0->_fU304 >= iParam0->_fU292)
            {
                iParam0->_fU304 = iParam0->_fU292;
                iParam0->_fU312 = 2;
            }
        }
        else if (iParam0->_fU312 == 3)
        {
            if (iParam0->_fU304 > 0.00000000)
            {
                iParam0->_fU304 -= iParam0->_fU296;
            }
            if (iParam0->_fU304 <= 0.00000000)
            {
                iParam0->_fU304 = 0.00000000;
                iParam0->_fU312 = 0;
            }
        }
        if (iParam0->_fU288 == 0)
        {
            if ((ref iParam0->_fU12->_fU8) == 0.00000000)
            {
                vVar14 = {-iParam0->_fU304, 0.00000000, 0.00000000};
            }
            else if (((ref iParam0->_fU12->_fU8) == -270.00000000) || ((ref iParam0->_fU12->_fU8) == 90.00000000))
            {
                vVar14 = {0.00000000, -iParam0->_fU304, 0.00000000};
            }
            else if (((ref iParam0->_fU12->_fU8) == -180.00000000) || ((ref iParam0->_fU12->_fU8) == 180.00000000))
            {
                vVar14 = {iParam0->_fU304, 0.00000000, 0.00000000};
            }
            else if (((ref iParam0->_fU12->_fU8) == -90.00000000) || ((ref iParam0->_fU12->_fU8) == 270.00000000))
            {
                vVar14 = {0.00000000, iParam0->_fU304, 0.00000000};
            };;;;
        }
        else
        {
            vVar14 = {0.00000000, 0.00000000, -iParam0->_fU304};
        }
        if ((DOES_OBJECT_EXIST( iParam0->_fU244 )) == 1)
        {
            FREEZE_OBJECT_POSITION( iParam0->_fU244, 0 );
            SET_OBJECT_COORDS( iParam0->_fU244, vVar11 - vVar14 );
            FREEZE_OBJECT_POSITION( iParam0->_fU244, 1 );
        }
        if ((DOES_OBJECT_EXIST( iParam0->_fU248 )) == 1)
        {
            FREEZE_OBJECT_POSITION( iParam0->_fU248, 0 );
            SET_OBJECT_COORDS( iParam0->_fU248, vVar11 + vVar14 );
            FREEZE_OBJECT_POSITION( iParam0->_fU248, 1 );
        }
    }
    return;
}

/* HAS_SAVEFILE_LOADED */ int sub_31443(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_477( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_6087( uParam0,  /* PLAYER_PED_ID */ sub_1095() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* MAL_GIVEPEDWEAPON */ void sub_31674(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
    unknown Result;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (bParam4)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                 /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_GivePedWeapon waiting for weapon to exist" );
            }
        }
        return Result;
    }
    return nil;
}

/* MAL_WRITESCRIPTLOG */ void sub_31842(unknown uParam0)
{
    unknown uVar3;

    uVar3 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar3, 1537, "MSWW", 1537, uParam0, 1537, "###" );
    return;
}

/* MAL_GIVEPEDWEAPONINHOLSTER */ void sub_31987(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
    int Result;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam2, uParam3 );
        if (bParam4)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam3 );
            while (Result == 0)
            {
                WAIT( 0 );
                Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam3 );
                 /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_GivePedWeapon waiting for weapon to exist" );
            }
        }
        return Result;
    }
    return nil;
}

/* P_TECH_LIGHTS_ON_LLOD */ void sub_32518(boolean bParam0)
{
     /* MAL_WRITESCRIPTLOG */ sub_31842( "P_TECH_LIGHTS_ON_LLOD" );
     /* CLEANOBJECT */ sub_4910( g_U3948 );
     /* CLEANOBJECT */ sub_4910( g_U3949 );
     /* CLEANOBJECT */ sub_4910( g_U3950 );
     /* CLEANOBJECT */ sub_4910( g_U3951 );
     /* CLEANOBJECT */ sub_4910( g_U3952 );
    if (bParam0)
    {
        g_U3952 =  /* CREATEOBJECTNOOFFSET */ sub_32669( g_U2408, 0.00100000, 77.00000000, 42.50000000, 0, 0, 180, 0, 0, 1 );
    }
    else
    {
        g_U3952 =  /* CREATEOBJECTNOOFFSET */ sub_32669( g_U2408, g_U3965, 0, 0, 0, 0, 0, 1 );
    }
    if (DOES_OBJECT_EXIST( g_U3952 ))
    {
        FREEZE_OBJECT_POSITION( g_U3952, 1 );
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_32669(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_28228( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_CREATE_STADIUM_OBJECTS */ void sub_33058()
{
     /* WRITE_STRING */ sub_4855( "[SP]### P_CREATE_STADIUM_OBJECTS ###" );
    if (DOES_OBJECT_EXIST( g_U3704 ))
    {
         /* CLEANOBJECT */ sub_4910( g_U3704 );
    }
    g_U3704 =  /* CREATEOBJECTNOOFFSET */ sub_32669( g_U2390, -10.46000000, 5.99000000, 0.70000000, 0.00000000, 0.00000000, 18.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U3704 ))
    {
        FREEZE_OBJECT_POSITION( g_U3704, 1 );
    }
    return;
}

/* P_CREATE_DEAD_BODIES_ON_FIELD */ void sub_33253()
{
     /* CLEANOBJECTARRAY */ sub_33299( ref g_U3941 );
    g_U3941[0] =  /* CREATEOBJECTNOOFFSET */ sub_32669( -1652775333, -4.14443000, 10.10766000, 0.14177000, 0, 0, 2.56000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[0] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[0], 1 );
    }
    g_U3941[1] =  /* CREATEOBJECTNOOFFSET */ sub_32669( 1816766229, 10.25816000, 2.27307000, 0.14177000, 0, 0, 1.88000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[1] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[1], 1 );
    }
    g_U3941[2] =  /* CREATEOBJECTNOOFFSET */ sub_32669( 1873472982, 13.91821000, 23.57691000, 0.14177000, 0, 0, 2.23000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[2] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[2], 1 );
    }
    g_U3941[3] =  /* CREATEOBJECTNOOFFSET */ sub_32669( -1993976541, 11.90281000, 13.09956000, 0.14177000, 0, 0, 2.95000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[3] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[3], 1 );
    }
    g_U3941[4] =  /* CREATEOBJECTNOOFFSET */ sub_32669( -1993976541, 10.14508000, 8.20610000, 0.14177000, 0, 0, 90.68000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[4] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[4], 1 );
    }
    g_U3941[5] =  /* CREATEOBJECTNOOFFSET */ sub_32669( -2096019114, 3.94087000, 16.99167000, 0.14177000, 0, 0, -1.16000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[5] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[5], 1 );
    }
    return;
}

/* CLEANOBJECTARRAY */ void sub_33299(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANOBJECT */ sub_4910( (uParam0^)[I] );
    }
    return;
}

/* CREATEPLACEMENT */ void sub_33916(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_2NDBLEACHERS_SET_DATA */ void sub_34143()
{
     /* STAD_ENEMYSTRUCTFILL */ sub_34238( ref l_U315[0], -83.43350000, 22.41694000, 18.39152000, 88.05052000, g_U652, -1531280410, g_U2387, 5, 40, 1, 1478009203, 1 );
     /* STAD_ENEMYSTRUCTFILL */ sub_34238( ref l_U315[1], -84.84703000, 6.59958600, 18.20597000, 90.23103000, g_U652, -1747838984, g_U2387, 5, 40, 1, 1478009203, 1 );
     /* STAD_ENEMYSTRUCTFILL */ sub_34238( ref l_U315[2], -84.68730000, -5.88232900, 18.20966000, 45.86000000, g_U652, -861211968, g_U2387, 5, 50, 1, 1478009203, 1 );
     /* STAD_ENEMYSTRUCTFILL */ sub_34238( ref l_U315[3], -84.87743000, 10.44463000, 18.20571000, 90.00000000, g_U652, 897229039, g_U2387, 5, 40, 1, 1478009203, 1 );
     /* STAD_ENEMYSTRUCTFILL */ sub_34238( ref l_U315[4], -84.63132000, -12.80470000, 18.21018000, 0.00000000, g_U652, -1907850586, g_U2387, 5, 40, 1, 1478009203, 1 );
     /* STAD_ENEMYSTRUCTFILL */ sub_34238( ref l_U315[5], -83.88351000, 22.38138000, 18.38889000, 90.00000000, g_U652, 1707910683, g_U2387, 3, 6, 1, 434544317, 0 );
     /* STAD_ENEMYSTRUCTFILL */ sub_34238( ref l_U315[6], -84.24703000, -1.92234300, 18.22109000, 90.00000000, g_U652, -326882315, g_U2387, 5, 40, 1, 1478009203, 1 );
     /* STAD_ENEMYSTRUCTFILL */ sub_34238( ref l_U315[7], -84.44899000, -22.77632000, 18.38301000, 90.00000000, g_U652, 912555300, g_U2387, 5, 40, 1, 1478009203, 1 );
    return;
}

/* STAD_ENEMYSTRUCTFILL */ void sub_34238(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19)
{
     /* MAL_ENEMYSTRUCTFILL */ sub_34314( uParam0, uParam1, uParam4, uParam18, 68019059, 2, g_U3928, uParam15, uParam16, uParam14, uParam19, uParam17, uParam13, uParam5 );
    return;
}

/* MAL_ENEMYSTRUCTFILL */ void sub_34314(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29)
{
    iParam0->_fU56 = {uParam1};
    iParam0->_fU68 = uParam4;
    iParam0->_fU72 = uParam5;
    iParam0->_fU76 = uParam6;
    iParam0->_fU80 = uParam7;
    iParam0->_fU84 = {uParam8};
    iParam0->_fU116 = uParam16;
    iParam0->_fU120 = uParam17;
    iParam0->_fU124 = uParam18;
    iParam0->_fU128 = uParam19;
    iParam0->_fU132 = uParam20;
    iParam0->_fU136 = uParam21;
    iParam0->_fU140 = {uParam22};
    return;
}

/* TELEPORTPED */ void sub_35145(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* MAL_ENEMYSTRUCTARRAYCREATE */ int sub_35301(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4, boolean bParam5)
{
    int I;

    PRINTSTRING( "[MSWW] ### MAL_EnemyStructArrayCreate starting: " );
     /* WRITE_STRING */ sub_4855( uParam1 );
    if (NOT bParam4)
    {
         /* P_SETUP_AI_GROUP */ sub_35418( uParam2, uParam3, 1 );
        for ( I = 0; I < (uParam0^); I++ )
        {
             /* MAL_ENEMYSTRUCTCREATE */ sub_35828( ref (uParam0^)[I] );
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_38132( (uParam0^)[I]._fU0, uParam2 );
        }
         /* MAL_ESA_GIVEDEBUGNAMES */ sub_38530( uParam0, uParam1 );
    }
    else if ((uParam0^)[0]._fU172 == 0)
    {
         /* P_SETUP_AI_GROUP */ sub_35418( uParam2, uParam3, 1 );
    }
    if ((uParam0^)[0]._fU172 < (uParam0^))
    {
         /* MAL_ENEMYSTRUCTCREATE */ sub_35828( ref (uParam0^)[(uParam0^)[0]._fU172] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_38132( (uParam0^)[(uParam0^)[0]._fU172]._fU0, uParam2 );
        (uParam0^)[0]._fU172++;
    }
    else
    {
         /* MAL_ESA_GIVEDEBUGNAMES */ sub_38530( uParam0, uParam1 );
        return 1;
    }
    if (bParam5)
    {
         /* MAL_ESA_PROCESSINGFREEZE */ sub_38821( uParam0, 1, 0, -1 );
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_35418(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* MAL_ENEMYSTRUCTCREATE */ void sub_35828(int iParam0)
{
    unknown uVar3;

     /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_EnemyStructCreate starting" );
     /* MAL_CREATEPEDADV */ sub_35967( iParam0 + 0, iParam0 + 4, iParam0->_fU56, iParam0->_fU68, iParam0->_fU72, iParam0->_fU80, iParam0->_fU84, iParam0->_fU116, iParam0->_fU120, iParam0->_fU124, 1 );
    if (NOT (ARE_STRINGS_EQUAL( iParam0 + 140, ref g_U652 )))
    {
        PRINTSTRING( "[MSWW] ### MAL_EnemyStructCreate adding ped to room: " );
         /* WRITE_STRING */ sub_4855( iParam0 + 140 );
         /* MAL_SETROOMFORPED */ sub_37672( iParam0 + 0, iParam0 + 140 );
    }
    if (iParam0->_fU128)
    {
         /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_EnemyStructCreate giving ped backup weapon" );
         /* MAL_GIVEPEDWEAPONINHOLSTER */ sub_31987( iParam0->_fU0, iParam0->_fU76, 25000, 1, 0 );
    }
    if (iParam0->_fU132)
    {
        uVar3 = GET_WEAPON_FROM_HAND( iParam0->_fU0, 0, 0 );
         /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_37858( ref uVar3, 14, 1 );
    }
    if (iParam0->_fU136 != 0)
    {
         /* MAL_GIVEPEDPERSISTANTVARIATIONENUM */ sub_38021( iParam0 + 0, iParam0->_fU136 );
    }
    return iParam0->_fU0;
}

/* MAL_CREATEPEDADV */ void sub_35967(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19)
{
     /* P_CREATEPEDSTRUCT */ sub_36011( uParam1, uParam2, uParam5, uParam18, 7, 3, 2, 0, 0 );
    (uParam0^) =  /* MAL_CREATEPED */ sub_36133( uParam0, uParam1, 1, 1, uParam19 );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( (uParam0^), 1 );
    }
     /* MAL_GIVEPEDWEAPON */ sub_31674( (uParam0^), uParam6, 25000, 0, 0 );
     /* MAL_SETTEMPLATEANDRANGES */ sub_37149( uParam0, ref uParam8, uParam16, uParam17, 1 );
     /* MAL_SETPEDCOMBATMOVEMENT */ sub_37480( uParam0, uParam7 );
    return (uParam0^);
}

/* P_CREATEPEDSTRUCT */ void sub_36011(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU12 = uParam4;
    iParam0->_fU16 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU48 = uParam10;
    return;
}

/* MAL_CREATEPED */ void sub_36133(unknown uParam0, unknown uParam1, boolean bParam2, boolean bParam3, unknown uParam4)
{
     /* CLEANPED */ sub_5098( (uParam0^) );
    (uParam0^) =  /* CREATEPED */ sub_36169( uParam1 );
    if (bParam3)
    {
        while (NOT (DOES_PED_EXIST( (uParam0^) )))
        {
            WAIT( 0 );
             /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_CreatePed waiting for ped to exist" );
        }
    }
    SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( (uParam0^), uParam4 );
     /* MAL_SETPEDCOMBATATTRIBUTES */ sub_36980( uParam0, 32, 0 );
    SET_PED_IGNORE_LOS_CHECKS( (uParam0^), NOT bParam2 );
    SET_PED_EMOTION_STATE( (uParam0^), 1 );
    return (uParam0^);
}

/* CREATEPED */ void sub_36169(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_28228( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_36660( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_36761( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_36660(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_36761(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* MAL_SETPEDCOMBATATTRIBUTES */ void sub_36980(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_COMBAT_ATTRIBUTES( (uParam0^), uParam1, uParam2 );
    }
    return;
}

/* MAL_SETTEMPLATEANDRANGES */ void sub_37149(unknown uParam0, unknown uParam1, float fParam2, float fParam3, boolean bParam4)
{
     /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_SetTemplateAndRanges" );
    PRINTSTRING( "[MSWW]### Template Name: " );
     /* WRITE_STRING */ sub_4855( uParam1 );
    PRINTSTRING( "[MSWW]### Min Range: " );
     /* WRITE_FLOAT */ sub_37293( fParam2 );
    PRINTSTRING( "[MSWW]### Max Range: " );
     /* WRITE_FLOAT */ sub_37293( fParam3 );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    if (NOT bParam4)
    {
         /* MAL_SETPEDCOMBATATTRIBUTES */ sub_36980( uParam0, 1, 0 );
    }
    return;
}

/* WRITE_FLOAT */ void sub_37293(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* MAL_SETPEDCOMBATMOVEMENT */ void sub_37480(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_SETROOMFORPED */ void sub_37672(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_ROOM_FOR_PED_BY_NAME( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ void sub_37858(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (GET_DOES_WEAPON_EXIST( (uParam0^) ))
    {
        if (bParam2)
        {
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
        else
        {
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
    }
    return;
}

/* MAL_GIVEPEDPERSISTANTVARIATIONENUM */ void sub_38021(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PERSISTENT_PED_VARIATION_ENUM( (uParam0^), uParam1 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_38132(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_4855( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_35418( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_35418( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* MAL_ESA_GIVEDEBUGNAMES */ void sub_38530(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I]._fU0 )))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I]._fU0, ref cVar5 );
        }
    }
    return;
}

/* MAL_ESA_PROCESSINGFREEZE */ void sub_38821(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_PROCESSINGFREEZE */ sub_38898( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_PROCESSINGFREEZE */ void sub_38898(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_FREEZE_PROCESSING( iParam0->_fU0, uParam1 );
    }
    return;
}

/* F_SPAWN_PASSOS_TO_SUPPRESS_SNIPER */ int sub_39007()
{
    if (NOT (DOES_PED_EXIST( l_U958 )))
    {
         /* WRITESCRIPTLOG */ sub_477( "GA", "Creating Passos.", 0 );
         /* P_CREATEPEDSTRUCT */ sub_36011( ref l_U959, l_U972, l_U975, g_U2387, 26, 6, 0, 0, 0 );
        l_U958 =  /* MAL_CREATEPED */ sub_36133( ref l_U958, ref l_U959, 0, 0, 0 );
         /* MAL_SETPEDRELATIONSHIP */ sub_39158( ref l_U958, 2, 3 );
         /* MAL_FREEZEPED */ sub_39236( ref l_U958, 1 );
         /* MAL_STANDSTILL */ sub_39302( ref l_U958 );
         /* MAL_SETTEMPLATEANDRANGES */ sub_37149( ref l_U958, "AIT_EXPERT", 0, 100, 1 );
         /* MAL_TELEPORTPED */ sub_39464( l_U958, l_U972, l_U975 );
         /* MAL_GIVEPEDWEAPON */ sub_31674( l_U958, -2075384407, 25000, 0, 0 );
        SET_PED_NAME_DEBUG( l_U958, "SUPPRESSION" );
        if (NOT (IS_PED_DEAD( l_U958 )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U958, 1 );
            TASK_AIM_GUN_AT_COORD( l_U958, -79.60660000, -48.35410000, 24.45726000, -1, 1 );
            SET_PED_VISIBLE( l_U958, 0 );
        }
         /* MAL_SETPEDCONSUMINGAMMO */ sub_39666( ref l_U958, 0 );
        return 0;
        break;
    }
     /* WRITESCRIPTLOG */ sub_477( "GA", "Passos exists.", 0 );
    return 1;
}

/* MAL_SETPEDRELATIONSHIP */ void sub_39158(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_RELATIONSHIP( (uParam0^), uParam1, uParam2 );
    }
    return;
}

/* MAL_FREEZEPED */ void sub_39236(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        FREEZE_PED_POSITION( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_STANDSTILL */ void sub_39302(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_STAND_STILL( 0, -1 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    return;
}

/* MAL_TELEPORTPED */ void sub_39464(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* MAL_SETPEDCONSUMINGAMMO */ void sub_39666(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_CONSUMING_AMMO( (uParam0^), uParam1 );
    }
    return;
}

/* F_SBLEACHERS_START_VCPF_SNIPER */ int sub_39789()
{
    if (NOT (DOES_PED_EXIST( l_U242._fU0 )))
    {
         /* WRITESCRIPTLOG */ sub_477( "GA", "Creating Second Bleachers Sniper.", 0 );
         /* SB_CREATESNIPER */ sub_39976( ref l_U242, -83.19709000, -47.67694000, 22.84675000, -83.97000000, -43.14000000, 24.02000000, -83.97000000, -43.14000000, 24.02000000, 0, 0, 0, g_U2387, 0, 0, 0, 20, 4500 );
         /* MAL_GIVEPEDPERSISTANTVARIATION */ sub_41378( ref l_U242._fU0, "M3_CP_S2_Avg" );
        l_U242._fU164 = 5;
        l_U242._fU204 = 1;
         /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_37858( ref l_U242._fU188, 13, 0 );
        SET_PED_COMBAT_RANGE_MAX( l_U242._fU0, 100 );
        SET_PED_SEEING_RANGE( l_U242._fU0, 100, 75 );
        return 0;
        break;
    }
    return 1;
}

/* SB_CREATESNIPER */ void sub_39976(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18)
{
    iParam0->_fU56 = {uParam1};
    iParam0->_fU72 = {uParam4};
    iParam0->_fU84 = {uParam7};
    iParam0->_fU96 = {uParam10};
    iParam0->_fU68 = uParam17;
    iParam0->_fU160 = uParam13;
    iParam0->_fU108 = {uParam14};
    iParam0->_fU164 = 0;
    iParam0->_fU168 = 0;
    iParam0->_fU172 = 0;
    iParam0->_fU176 = 0;
    iParam0->_fU180 = 0;
    iParam0->_fU184 = 0;
    iParam0->_fU192 = uParam18;
    iParam0->_fU156 = 1500;
    iParam0->_fU196 = 3;
    iParam0->_fU200 = 0;
    iParam0->_fU204 = 0;
    iParam0->_fU208 = -256437761;
    iParam0->_fU212 = 0;
    iParam0->_fU216 = 0;
     /* P_CREATEPEDSTRUCT */ sub_36011( iParam0 + 4, iParam0->_fU56, iParam0->_fU68, iParam0->_fU160, 7, 3, 2, 0, 0 );
    iParam0->_fU0 =  /* MAL_CREATEPED */ sub_36133( iParam0 + 0, iParam0 + 4, 1, 1, 0 );
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( iParam0->_fU0, 1 );
        SET_PED_INVINCIBLE( iParam0->_fU0, 1 );
        SET_PED_GORE( iParam0->_fU0, 0 );
        FREEZE_PED_POSITION( iParam0->_fU0, 1 );
         /* MAL_TELEPORTPED */ sub_39464( iParam0->_fU0, iParam0->_fU56, iParam0->_fU68 );
        SET_PED_ALERTNESS( iParam0->_fU0, 3 );
        SET_PED_ACCURACY( iParam0->_fU0, 31186664 );
        SET_PED_CAN_BE_TARGETTED( iParam0->_fU0, 0 );
        SET_PED_AI_TEMPLATE( iParam0->_fU0, "AIT_EXPERT" );
        SET_PED_PERFECT_ACCURACY_OVERRIDE( iParam0->_fU0, 1 );
        SET_PED_CONSUMING_AMMO( iParam0->_fU0, 0 );
    }
    iParam0->_fU188 =  /* MAL_GIVEPEDWEAPON */ sub_31674( iParam0->_fU0, -2075384407, 25000, 0, 0 );
    ENABLE_WEAPON_ATTACHMENT( iParam0->_fU188, 13, 1 );
    TOGGLE_WEAPON_ATTACHMENT( iParam0->_fU188, 13, 1 );
    SET_LASER_SIGHT_ATTACHMENT( iParam0->_fU188, -12373631 );
     /* SETUPINTERACTIVESEQUENCE */ sub_40623( "S_STAD_SNIPBEH", "LEVEL_S_STAD_PU", "/LEVEL/S_STAD/s_stad_snipbeh.act", "/Global/SNIPER_BEHAVIOR", 1 );
     /* LOADANIMDICT */ sub_21657( "LEVEL_S_STAD_PU", 0, 1 );
    I_SEQUENCE_REGISTER_ENTITY( "S_STAD_SNIPBEH", "stad_sniper", iParam0->_fU0, 0 );
    I_SEQUENCE_START( "S_STAD_SNIPBEH" );
    while (NOT (I_SEQUENCE_QUERY_ENTITY_STATE( "S_STAD_SNIPBEH", "stad_sniper", 3 )))
    {
        WAIT( 0 );
    }
     /* MAL_TELEPORTPED */ sub_39464( iParam0->_fU0, iParam0->_fU56, iParam0->_fU68 );
    PED_ACTION_TREE_PLAY_NODE( iParam0->_fU0, "/Global/SNIPER_BEHAVIOR/SNIPER3SET_SEQ/STATES/DUCK_TO_PEEK" );
     /* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ sub_41070( iParam0 + 0 );
    return;
}

/* SETUPINTERACTIVESEQUENCE */ void sub_40623(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    if ((I_SEQUENCE_IS_LOADED( uParam0 )) == 0)
    {
        I_SEQUENCE_SETUP( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            while ((I_SEQUENCE_QUERY_STATE( uParam0, 1 )) == 1)
            {
                DISPLAYF( "[SP]### Waiting for interactive sequence to be loaded: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ void sub_41070(unknown uParam0)
{
     /* MAL_SETLOCKEDANDREGISTEREDONPED */ sub_41124( uParam0,  /* PLAYER_PED_ID */ sub_1095() );
    return;
}

/* MAL_SETLOCKEDANDREGISTEREDONPED */ void sub_41124(unknown uParam0, unknown uParam1)
{
     /* MAL_REGISTERTARGET */ sub_41172( uParam0, uParam1 );
     /* MAL_SETLOCKEDTARGET */ sub_41254( uParam0, uParam1 );
    return;
}

/* MAL_REGISTERTARGET */ void sub_41172(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        REGISTER_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_SETLOCKEDTARGET */ void sub_41254(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        SET_LOCKED_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_GIVEPEDPERSISTANTVARIATION */ void sub_41378(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        PRINTSTRING( "[MSWW] ### Assigning scene ped variation: " );
         /* WRITE_STRING */ sub_4855( uParam1 );
        SET_PERSISTENT_PED_VARIATION( (uParam0^), uParam1 );
    }
    return;
}

/* P_2NDBLEACHERS_POST_SPAWN */ void sub_41613()
{
     /* MAL_ESA_SETFLASHLIGHTDATA */ sub_41676( ref l_U315, "Flashlight_Stadium" );
    SET_GROUP_MAX_NUM_ADVANCING( l_U668._fU0, 10 );
    SET_GROUP_MAX_NUM_MOVING( l_U668._fU0, 10 );
     /* MAL_ESA_GIVEGRENADES */ sub_41892( ref l_U315, 3, 0, -1 );
     /* MAL_ES_CLEAN */ sub_5068( ref l_U315[7] );
     /* MAL_ES_CLEAN */ sub_5068( ref l_U315[4] );
     /* MAL_ESA_VISIBLE */ sub_42082( ref l_U315, 0, 0, -1 );
    return;
}

/* MAL_ESA_SETFLASHLIGHTDATA */ void sub_41676(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_ES_SETFLASHLIGHTDATA */ sub_41738( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_SETFLASHLIGHTDATA */ void sub_41738(int iParam0, unknown uParam1)
{
    if (iParam0->_fU132)
    {
        if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
        {
            SET_WEAPON_LIGHT_DATA_BY_NAME( GET_WEAPON_FROM_HAND( iParam0->_fU0, 0, 0 ), uParam1 );
        }
    }
    return;
}

/* MAL_ESA_GIVEGRENADES */ void sub_41892(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_GIVEPEDGRENADES */ sub_41965( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_GIVEPEDGRENADES */ void sub_41965(int iParam0, unknown uParam1)
{
     /* MAL_GIVEPEDWEAPONINHOLSTER */ sub_31987( iParam0->_fU0, -1980065396, uParam1, 5, 0 );
    return;
}

/* MAL_ESA_VISIBLE */ void sub_42082(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_SETPEDVISIBLE */ sub_42150( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_SETPEDVISIBLE */ void sub_42150(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_VISIBLE( iParam0->_fU0, uParam1 );
    }
    else
    {
         /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_ES_SetPedVisible DOES NOT HAVE VALID PED!" );
    }
    return;
}

/* F_MID_07_PRESETUP */ int sub_42448()
{
     /* NIS_CREATE_STATIC_CAM */ sub_42524( ref l_U885, -105.44380000, 22.10410000, 29.82888000, -12.50354000, -0.00000000, -88.46050000, 45.00000000, 2000 );
    SET_HELPER_TRACKING_MODE( 1 );
    return 1;
}

/* NIS_CREATE_STATIC_CAM */ void sub_42524(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_2000( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U723, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* P_MID_07_REGISTER */ void sub_42772()
{
    if (DOES_OBJECT_EXIST( g_U3786._fU232 ))
    {
         /* MAL_WRITESCRIPTLOG */ sub_31842( "ElevatorFreight.objMainRoom DOES EXIST" );
        REGISTER_OBJECT_PRE_SEAMLESS_CUTSCENE( g_U3786._fU232, "P_ST_FRTELE_AA_H", 0 );
    }
    else
    {
         /* MAL_WRITESCRIPTLOG */ sub_31842( "ElevatorFreight.objMainRoom DOES NOT EXIST" );
    }
    if (DOES_OBJECT_EXIST( g_U3786._fU236 ))
    {
         /* MAL_WRITESCRIPTLOG */ sub_31842( "ElevatorFreight.objIntDoorFrontR DOES EXIST" );
        REGISTER_OBJECT_PRE_SEAMLESS_CUTSCENE( g_U3786._fU236, "P_ST_FRTELEDR1", 0 );
    }
    else
    {
         /* MAL_WRITESCRIPTLOG */ sub_31842( "ElevatorFreight.objIntDoorFrontR DOES NOT EXIST" );
    }
    if (DOES_OBJECT_EXIST( g_U3786._fU244 ))
    {
         /* MAL_WRITESCRIPTLOG */ sub_31842( "ElevatorFreight.objIntDoorBackR DOES EXIST" );
        REGISTER_OBJECT_PRE_SEAMLESS_CUTSCENE( g_U3786._fU244, "P_ST_FRTELEDR2", 0 );
    }
    else
    {
         /* MAL_WRITESCRIPTLOG */ sub_31842( "ElevatorFreight.objIntDoorBackR DOES NOT EXIST" );
    }
    CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_1095(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_IDLE" );
    REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE(  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_43353(), "W_PI_Clt1911_Aa_H", 0 );
    CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_1095(), g_U2138[10], g_U2256[10] );
    CUTSCENE_ENABLE_SKIP( 0 );
    return;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_43353()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1095(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_43457( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1095(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1095(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1095(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_43457(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* P_MID_07_HANDLECUTSCENE */ void sub_43875()
{
    if (l_U858._fU52)
    {
         /* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ sub_43926( 1 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_14153( g_U2387, ref g_U1069 );
         /* NIS_PLAY_STATIC_CAMERA */ sub_44140( ref l_U885 );
        FREEZE_TIME_OF_DAY( 22, 0 );
        SET_WEATHER_TYPE_NOW_PERSIST( "CLOUDY" );
    }
    if (NOT l_U916)
    {
        if ( /* F_STREAMREQ_MODELNAMES_IS_ASSET_LOADED */ sub_44294( g_U2387, ref g_U1069 ))
        {
            if ( /* MAL_ENEMYSTRUCTARRAYCREATE */ sub_35301( ref l_U315, "2ndBleachers", ref l_U668, 1.00000000, 1, 0 ))
            {
                if ( /* F_SPAWN_PASSOS_TO_SUPPRESS_SNIPER */ sub_39007())
                {
                    if ( /* F_SBLEACHERS_START_VCPF_SNIPER */ sub_39789())
                    {
                         /* WRITESCRIPTLOG */ sub_477( "GA", "All peds spawned for the start of the Second Bleachers checkpoint.", 0 );
                         /* P_2NDBLEACHERS_POST_SPAWN */ sub_41613();
                        l_U916 = 1;
                    }
                }
            }
        }
    }
    if (NOT l_U917)
    {
        if (GET_CUTSCENE_TIME() >= 8)
        {
            SET_FORCED_AIM_INTENTION_DIRECTION( 0.97882100, 0.02736600, -0.20288300 );
            l_U917 = 1;
            CUTSCENE_ENABLE_SKIP( 1 );
            AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_2_6", "", 0, 3000, -1, -1082130432, 0 );
        }
    }
    return;
}

/* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ void sub_43926(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )) == 0)
    {
        iVar3 = 0;
        uVar4 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1095(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 0)
        {
            iVar3 = 1;
        }
        if ((( /* IS_WEAPON_SINGLE_HANDED */ sub_43457( uVar4 )) == 0) AND ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1))
        {
            iVar3 = 1;
        }
        if (iVar3 == 1)
        {
            uVar5 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_43353();
            if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_1095(), uVar5, 0, uParam0 );
            }
        }
    }
    return;
}

/* NIS_PLAY_STATIC_CAMERA */ void sub_44140(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_2150( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_ASSET_LOADED */ int sub_44294(int iParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I]._fU4 == 3)
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loaded: {!f1}", 2, 1, -874832622, 513, (uParam1^)[I]._fU0 );
                return 1;
            }
        }
    }
    return 0;
}

/* F_MID_07_POSTCUTSCENE */ int sub_44768()
{
    SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1133(), 1, 0 );
    SET_CAM_VIEW_MODE( 0 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2296[10], 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2336[10], 1065353216, 0 );
    if (NOT IS_MAGDEMO())
    {
        DO_SCREEN_FADE_IN( 0 );
    }
    SET_HELPER_TRACKING_MODE( 0 );
    if (NOT (IS_PED_DEAD( l_U958 )))
    {
        SET_PED_VISIBLE( l_U958, 1 );
    }
    STREAM_HELPERS_REQUEST_AT_LOC( l_U976, 0 );
    STREAM_HELPERS_REQUEST_AT_LOC( l_U979, 0 );
    if (l_U135)
    {
         /* NIS_RETURN_TO_GAMEPLAY_CAM */ sub_44986( 500, 1, 0, g_U2296[10], g_U2336[10], 0 );
    }
     /* P_ACTIVATE_SECOND_BLEACHERS_VCPF */ sub_45112();
    if ((g_U854 == 10) AND (IS_MAGDEMO()))
    {
        DO_SCREEN_FADE_IN( 250 );
        FORCE_PAUSEMENU_OPEN( 1 );
    }
    RESET_FORCED_AIM_INTENTION_DIRECTION();
    return 1;
}

/* NIS_RETURN_TO_GAMEPLAY_CAM */ void sub_44986(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, float fParam4, unknown uParam5)
{
    SET_CAM_SIDE_LEFT( uParam2 );
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam3, 1065353216, 0 );
    }
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( fParam4, 1065353216, 0 );
    }
    RENDER_SCRIPT_CAMS( 0, uParam1, uParam0, uParam5 );
    return;
}

/* P_ACTIVATE_SECOND_BLEACHERS_VCPF */ void sub_45112()
{
     /* MAL_WRITESCRIPTLOG */ sub_31842( "P_ACTIVATE_SECOND_BLEACHERS_VCPF" );
     /* MAL_ESA_VISIBLE */ sub_42082( ref l_U315, 1, 0, -1 );
     /* MAL_ESA_ALERTNESSANDEMOTIONSTATE */ sub_45215( ref l_U315, 3, 2 );
     /* MAL_ESA_SETLOCKEDANDREGISTEREDONPLAYER */ sub_45575( ref l_U315, 0, -1 );
    SET_PED_MODEL_LOD_DISTANCES( g_U2387, 10, 80 );
     /* MAL_ESA_UNBLOCKANDCOMBATPLAYER */ sub_45740( ref l_U315, 0, 0, 2 );
     /* MAL_ESA_BLOCK */ sub_46287( ref l_U315, 0, 3, 4 );
     /* MAL_ES_ATTACKMOVE */ sub_46472( ref l_U315[5], -99.64168000, 22.20774000, 27.80001000, 1092616192, 1101004800 );
     /* MAL_ES_ATTACKMOVE */ sub_46472( ref l_U315[6], -99.98265000, -1.54767200, 27.79759000, 1092616192, 1101004800 );
     /* MAL_ES_ATTACKMOVE */ sub_46472( ref l_U315[7], -99.94400000, -22.55386000, 27.80001000, 1092616192, 1101004800 );
    return;
}

/* MAL_ESA_ALERTNESSANDEMOTIONSTATE */ void sub_45215(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_ES_ALERTNESSANDEMOTIONSTATE */ sub_45286( ref (uParam0^)[I], uParam1, uParam2 );
    }
    return;
}

/* MAL_ES_ALERTNESSANDEMOTIONSTATE */ void sub_45286(int iParam0, unknown uParam1, unknown uParam2)
{
     /* MAL_SETPEDALERTNESSANDEMOTIONSTATE */ sub_45338( iParam0 + 0, uParam1, uParam2 );
    return;
}

/* MAL_SETPEDALERTNESSANDEMOTIONSTATE */ void sub_45338(unknown uParam0, unknown uParam1, unknown uParam2)
{
     /* MAL_SETPEDALERTNESS */ sub_45389( uParam0, uParam1 );
     /* MAL_SETPEDEMOTIONSTATION */ sub_45461( uParam0, uParam2 );
    return;
}

/* MAL_SETPEDALERTNESS */ void sub_45389(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_ALERTNESS( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_SETPEDEMOTIONSTATION */ void sub_45461(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_EMOTION_STATE( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_ESA_SETLOCKEDANDREGISTEREDONPLAYER */ void sub_45575(unknown uParam0, unknown uParam1, int iParam2)
{
    int I;

    if (iParam2 == -1)
    {
        iParam2 = (uParam0^) - 1;
    }
    for ( I = uParam1; I <= iParam2; I++ )
    {
         /* MAL_REGISTERTARGET */ sub_41172( ref (uParam0^)[I]._fU0,  /* PLAYER_PED_ID */ sub_1095() );
         /* MAL_SETLOCKEDTARGET */ sub_41254( ref (uParam0^)[I]._fU0,  /* PLAYER_PED_ID */ sub_1095() );
    }
    return;
}

/* MAL_ESA_UNBLOCKANDCOMBATPLAYER */ void sub_45740(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_UNBLOCKANDCOMBATPLAYER */ sub_45823( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_UNBLOCKANDCOMBATPLAYER */ void sub_45823(int iParam0, unknown uParam1)
{
     /* MAL_UNBLOCKANDCOMBATPLAYER */ sub_45878( iParam0 + 0, iParam0->_fU80, uParam1 );
    return;
}

/* MAL_UNBLOCKANDCOMBATPLAYER */ void sub_45878(unknown uParam0, unknown uParam1, unknown uParam2)
{
     /* MAL_UNBLOCKANDCOMBATPED */ sub_45928( uParam0,  /* PLAYER_PED_ID */ sub_1095(), uParam1, uParam2 );
    return;
}

/* MAL_UNBLOCKANDCOMBATPED */ void sub_45928(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

     /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_UnblockAndCombatPed" );
    OPEN_SEQUENCE_TASK( ref uVar6 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
         /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_UnblockAndCombatPed: Victim is not dead" );
        TASK_COMBAT_PED( 0, uParam1 );
    }
    CLOSE_SEQUENCE_TASK( uVar6 );
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
         /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_UnblockAndCombatPed: Ped is not dead" );
        if (bParam3)
        {
            CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        }
        else
        {
            CLEAR_PED_TASKS( (uParam0^) );
        }
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam2 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar6 );
    }
    CLEAR_SEQUENCE_TASK( uVar6 );
    return;
}

/* MAL_ESA_BLOCK */ void sub_46287(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_BLOCK */ sub_46353( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_BLOCK */ void sub_46353(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( iParam0->_fU0, uParam1 );
    }
    return;
}

/* MAL_ES_ATTACKMOVE */ void sub_46472(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    unknown uVar8;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        OPEN_SEQUENCE_TASK( ref uVar8 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_ATTACK_MOVE( 0, uParam1, uParam4, uParam5, -1082130432, 3 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1095() );
        CLOSE_SEQUENCE_TASK( uVar8 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar8 );
        CLEAR_SEQUENCE_TASK( uVar8 );
    }
    return;
}

/* CUTSYS_CREATESTANDALONECUTSCENE */ void sub_46777(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
     /* WRITESCRIPTLOG */ sub_477( "MSWW", "CutSys_CreateStandaloneCutscene", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_47093( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam7, 0, 46888, 46939, 0, 46991, 47041, uParam6 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDOUT */ void sub_46888()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDOUT */ int sub_46939()
{
    return 1;
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_46991()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_47041()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_47093(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* P_CREATE_S_STA_GG_M8_02 */ void sub_47415()
{
     /* WRITESCRIPTLOG */ sub_477( "CO", "Add_Placement_CL_S_STA_GG_M8_02", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_47550( ref g_U757, g_U848, 1253424315, 2109254140, -87.96000000, 27.95000000, 18.42000000, 1.50000000, 0.00000000, -0.50000000, "" );
     /* P_CREATECOLLECTIBLE */ sub_47707( ref g_U757 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_47550(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_477( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_47707(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_477( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_47790( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_477( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_477( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_47790( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_5303( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_33916( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_477( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_477( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_47790(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_48264(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_477( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_477( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_477( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_477( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_49066( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_477( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_49490( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_49490( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_477( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_50034( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_49490( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_50414( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_50414( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* LOADSEAMLESSCUTSCENE */ void sub_49066(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* NIS_PRE_SETUP */ void sub_49490(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1133(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1095(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1095() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1095(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_50034(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1095(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1095(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1095(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1095(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1095(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_50414(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1133(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1095(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_50512();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_50512()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1095(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1095(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1095(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1095(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_50869(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_477( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_477( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_9309( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_51160( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_51637( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_51637( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_51897( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_51637( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_51897( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_51897( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_51637( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_51897( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_51897( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_51897( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_51637( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_51897( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_51897( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_51897( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_51897( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_53477( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_477( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_51160(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6368( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_477( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_477( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_51637(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_51897(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_53477(int iParam0)
{
     /* WRITE_STRING */ sub_4855( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_53565( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_37293( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_37293( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_37293( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_37293( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_37293( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_54469( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU52 );
     /* WRITE_STRING */ sub_4855( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU96 );
     /* WRITE_STRING */ sub_4855( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU100 );
     /* WRITE_STRING */ sub_4855( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU104 );
     /* WRITE_STRING */ sub_4855( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU108 );
     /* WRITE_STRING */ sub_4855( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU112 );
     /* WRITE_STRING */ sub_4855( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU116 );
     /* WRITE_STRING */ sub_4855( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU120 );
     /* WRITE_STRING */ sub_4855( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU124 );
     /* WRITE_STRING */ sub_4855( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU128 );
     /* WRITE_STRING */ sub_4855( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_53768( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_53768( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_53768( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_53565(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_53768(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_54469(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_HANDLE_STATE_BLEACHERS_FIGHT */ void sub_55502(boolean bParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;

    if (bParam0)
    {
         /* WRITESCRIPTLOG */ sub_477( "[SA]", "Entering state STATE_BLEACHERS_FIGHT.", 0 );
         /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U1054, 15000 );
        AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_2_5_6", "", 0, 7000, -1, -1082130432, 0 );
         /* LOADSEAMLESSCUTSCENE */ sub_49066( "MID_08A_STAD_concat", 0 );
         /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U1063, 7500 );
    }
    if (NOT l_U1072)
    {
        if ((( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_55984( ref l_U315 )) < 1) || ( /* MAL_HASPLAYERFIRED */ sub_55783( 1 )))
        {
            l_U1072 = 1;
             /* RESETTIMER */ sub_2859( ref l_U1063 );
        }
        else if ((NOT l_U949._fU20) AND (NOT ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_56123( l_U918 ))))
        {
            if ( /* ISTIMERDONE */ sub_2283( ref l_U1063 ))
            {
                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_56388( 1,  /* PLAYER_PED_ID */ sub_1095(), "PASSOS", ref uVar3, 2, 0 );
                 /* PLAY_SINGLE_SPEECH */ sub_56629( "SSTD_ST2B", ref uVar3, 8, 1 );
                 /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U1063, 7500 );
                 /* MAL_WRITESCRIPTLOG */ sub_31842( "PLAYING Y U NO FIRE DIALOGUE" );
            }
        }
    }
    if ( /* ISTIMERDONE */ sub_2283( ref l_U1054 ))
    {
        ;
    }
    if (NOT l_U1006._fU64)
    {
        if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_57610( l_U1006 )))
        {
            SET_CAM_VIEW_MODE( 1 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1133(), 0, 0 );
            l_U1006._fU64 = 1;
        }
    }
     /* P_HANDLE_COVER_TEST */ sub_57771();
     /* SB_HANDLESNIPERBEHAVIOUR */ sub_57904( ref l_U242 );
    if ((NOT l_U949._fU16) AND (NOT l_U949._fU20))
    {
        if ( /* F_2NDBLEACHERS_MAX_SPOT_ENEMIES */ sub_59979())
        {
             /* WRITESCRIPTLOG */ sub_477( "GA", "Max Spotted enemies.", 0 );
        }
    }
    if ((NOT (IS_PED_VAULTING(  /* PLAYER_PED_ID */ sub_1095() ))) AND ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT IS_PLAYER_SHOOTDODGING()) AND (( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_55984( ref l_U315 )) < 1))))
    {
        l_U133 = 10;
         /* WRITESCRIPTLOG */ sub_477( "GA", "eCheckpointState = CP_SB_SNIPER_INTRO", 0 );
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_60284( ref l_U158, 0 ))
    {
        if ((CUTSCENE_NAMED_IS_LOADING( "MID_08A_STAD_concat" )) || (CUTSCENE_IS_LOADED( "MID_08A_STAD_concat" )))
        {
            CLEAR_NAMED_CUTSCENE( "MID_08A_STAD_concat" );
        }
         /* P_CREATE_SNIPER_REPLACEMENT */ sub_60512();
        l_U133 = 12;
         /* WRITESCRIPTLOG */ sub_477( "GA", "eCheckpointState = CP_SB_SNIPER_FIGHT", 0 );
    }
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_55612(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_2000( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_2150( uParam0 );
    return;
}

/* MAL_HASPLAYERFIRED */ int sub_55783(unknown uParam0)
{
    int iVar3;

    iVar3 = nil;
    if (HAS_SHOT_BEEN_FIRED_IN_AREA(  /* MAL_GETPEDCOORDS */ sub_55823(  /* PLAYER_PED_ID */ sub_1095() ), 2.00000000, uParam0, ref iVar3 ))
    {
        if (iVar3 == ( /* PLAYER_PED_ID */ sub_1095()))
        {
             /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_HasPlayerFired RETURNING TRUE" );
            return 1;
        }
    }
    return 0;
}

/* MAL_GETPEDCOORDS */ vector sub_55823(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return "[dynamic result, ret vals = 3]";
        break;
        GET_PED_COORDS( uParam0 );
        "[doubled result, dropped if not asigned]";
        "[doubled result, dropped if not asigned]";
        break;
    }
    return vector( 0, 0, 0);
}

/* MAL_ESA_GETNUMLIVINGPEDS */ void sub_55984(unknown uParam0)
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I]._fU0 )))
        {
            Result++;
        }
    }
    return Result;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_56123(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_56166( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_56166(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_56388(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_56629(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_56674( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_56674(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_56761( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_56761(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_56813( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_57331( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_56813(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_57331(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_57610(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_57653(  /* PLAYER_PED_ID */ sub_1095(), uParam0 );
}

/* F_ISPEDINTRIGGERBOX */ int sub_57653(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_HANDLE_COVER_TEST */ void sub_57771()
{
    if (l_U1077)
    {
        l_U1077 = 0;
        START_WIDGET_GROUP( "Use Cover task in sequence" );
        ADD_WIDGET_BOOL( "Use Sequence: ", ref l_U1076 );
        STOP_WIDGET_GROUP();
    }
    return;
}

/* SB_HANDLESNIPERBEHAVIOUR */ void sub_57904(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        switch (iParam0->_fU164)
        {
            case 0:
            if (NOT (( /* F_GET_SCRIPT_TASK_STATUS */ sub_58029( iParam0->_fU0, 37 )) == 1))
            {
                iParam0->_fU168 = 0;
                iParam0->_fU176 = 0;
                iParam0->_fU180 = 0;
                iParam0->_fU172 = 0;
                TASK_AIM_GUN_AT_COORD( iParam0->_fU0, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU0 ), -1, 1 );
            }
            break;
            case 1:
            if ((NOT iParam0->_fU216) AND ( /* SB_ISMAXAIMINGATSNIPER */ sub_58190( iParam0 )))
            {
                 /* SB_SNIPERDUCKS */ sub_58326( iParam0 );
            }
            else if (NOT iParam0->_fU168)
            {
                 /* SB_SNIPERFIRES */ sub_58556( iParam0 );
            }
            break;
            case 4:
            if ( /* ISTIMERDONE */ sub_2283( iParam0 + 120 ))
            {
                 /* WRITESCRIPTLOG */ sub_477( "MSWW", "SniperBehaviour: Duck timer done", "###" );
                if ( /* SB_ISMAXAIMINGATSNIPER */ sub_58190( iParam0 ))
                {
                     /* SB_SNIPERDUCKS */ sub_58326( iParam0 );
                }
                else if (iParam0->_fU212)
                {
                     /* SB_SNIPERSEARCHES */ sub_58939( iParam0 );
                }
                else
                {
                     /* SB_SNIPERFIRES */ sub_58556( iParam0 );
                }
            }
            break;
            case 2:
            if ((NOT iParam0->_fU216) AND ( /* SB_ISMAXAIMINGATSNIPER */ sub_58190( iParam0 )))
            {
                 /* SB_SNIPERDUCKS */ sub_58326( iParam0 );
            }
            else if (NOT iParam0->_fU176)
            {
                 /* SB_SNIPERSEARCHES */ sub_58939( iParam0 );
            }
            break;
            case 3:
            if ((NOT iParam0->_fU216) AND ( /* SB_ISMAXAIMINGATSNIPER */ sub_58190( iParam0 )))
            {
                 /* SB_SNIPERDUCKS */ sub_58326( iParam0 );
            }
            else if (NOT iParam0->_fU180)
            {
                 /* SB_SNIPERWARNS */ sub_59326( iParam0 );
            }
            else if (( /* F_GET_SEQUENCE_PROGRESS */ sub_59721( iParam0->_fU0 )) == 3)
            {
                 /* SB_SNIPERWARNS */ sub_59326( iParam0 );
            };;;
            break;
            case 5:
            if (NOT iParam0->_fU184)
            {
                PED_ACTION_TREE_PLAY_NODE( iParam0->_fU0, "/Global/SNIPER_BEHAVIOR/SNIPER3SET_SEQ/STATES/DUCK" );
                iParam0->_fU168 = 0;
                iParam0->_fU176 = 0;
                iParam0->_fU180 = 0;
                iParam0->_fU172 = 0;
                iParam0->_fU184 = 1;
            }
            break;
        }
    }
    return;
}

/* F_GET_SCRIPT_TASK_STATUS */ int sub_58029(unknown uParam0, unknown uParam1)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        return GET_SCRIPT_TASK_STATUS( uParam0, uParam1 );
    }
    return 0;
}

/* SB_ISMAXAIMINGATSNIPER */ int sub_58190(int iParam0)
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if (IS_PED_IN_CROSSHAIR_CYLINDER( iParam0->_fU0, iParam0->_fU196, 1000, iParam0->_fU200, -1082130432 ))
        {
            return 1;
        }
    }
    return 0;
}

/* SB_SNIPERDUCKS */ void sub_58326(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        if ((NOT iParam0->_fU184) AND (NOT iParam0->_fU172))
        {
             /* MAL_WRITESCRIPTLOG */ sub_31842( "Sniper ducks" );
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 47, 1000, g_U649 );
        }
        iParam0->_fU168 = 0;
        iParam0->_fU176 = 0;
        iParam0->_fU180 = 0;
        iParam0->_fU172 = 1;
        iParam0->_fU184 = 0;
         /* CREATETIMER */ sub_2000( iParam0 + 120, iParam0->_fU156, 1, 0 );
         /* STARTTIMER */ sub_2150( iParam0 + 120 );
        iParam0->_fU164 = 4;
    }
    return;
}

/* SB_SNIPERFIRES */ void sub_58556(int iParam0)
{
    unknown uVar3;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if ((iParam0->_fU184) || (iParam0->_fU172))
        {
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 48, 1000, g_U649 );
        }
         /* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ sub_41070( iParam0 + 0 );
        iParam0->_fU168 = 1;
        iParam0->_fU176 = 0;
        iParam0->_fU180 = 0;
        iParam0->_fU172 = 0;
        iParam0->_fU184 = 0;
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_AIM_GUN_AT_PED( 0,  /* PLAYER_PED_ID */ sub_1095(), iParam0->_fU192, 0 );
        TASK_SHOOT_AT_PED( 0,  /* PLAYER_PED_ID */ sub_1095(), -1, iParam0->_fU208, 0, 0, iParam0->_fU204 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
        iParam0->_fU164 = 1;
    }
    return;
}

/* SB_SNIPERSEARCHES */ void sub_58939(int iParam0)
{
    unknown uVar3;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if ((iParam0->_fU184) || (iParam0->_fU172))
        {
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 48, 1000, g_U649 );
        }
        iParam0->_fU168 = 0;
        iParam0->_fU176 = 1;
        iParam0->_fU180 = 0;
        iParam0->_fU172 = 0;
        iParam0->_fU184 = 0;
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_AIM_GUN_AT_COORD( 0, iParam0->_fU72, 2000, 0 );
        TASK_AIM_GUN_AT_COORD( 0, iParam0->_fU84, 2000, 0 );
        SET_SEQUENCE_TO_REPEAT( uVar3, 1 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
        iParam0->_fU164 = 2;
    }
    return;
}

/* SB_SNIPERWARNS */ void sub_59326(int iParam0)
{
    float fVar3;
    float fVar4;
    float fVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if ((iParam0->_fU184) || (iParam0->_fU172))
        {
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 48, 1000, g_U649 );
        }
        iParam0->_fU168 = 0;
        iParam0->_fU176 = 0;
        iParam0->_fU180 = 1;
        iParam0->_fU172 = 0;
        iParam0->_fU184 = 0;
        fVar3 = (GET_RANDOM_FLOAT_IN_RANGE( -0.50000000, 0.50000000 )) + (ref iParam0->_fU96->_fU0);
        fVar4 = (GET_RANDOM_FLOAT_IN_RANGE( -0.50000000, 0.50000000 )) + (ref iParam0->_fU96->_fU4);
        fVar5 = (GET_RANDOM_FLOAT_IN_RANGE( -0.50000000, 0.50000000 )) + (ref iParam0->_fU96->_fU8);
        uVar6 = {fVar3, fVar4, ref iParam0->_fU96->_fU8};
        OPEN_SEQUENCE_TASK( ref uVar9 );
        TASK_AIM_GUN_AT_COORD( 0, uVar6, 3000, 1 );
        TASK_SHOOT_AT_COORD( 0, uVar6, 1000, 1566631136, 0, 0 );
        TASK_AIM_GUN_AT_COORD( 0, uVar6, 1000, 0 );
        TASK_AIM_GUN_AT_COORD( 0, uVar6, -1, 0 );
        CLOSE_SEQUENCE_TASK( uVar9 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar9 );
        CLEAR_SEQUENCE_TASK( uVar9 );
        iParam0->_fU164 = 3;
    }
    return;
}

/* F_GET_SEQUENCE_PROGRESS */ int sub_59721(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        return GET_SEQUENCE_PROGRESS( uParam0 );
    }
    return -1;
}

/* F_2NDBLEACHERS_MAX_SPOT_ENEMIES */ int sub_59979()
{
    int I;

    if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_57610( l_U928 )))
    {
        return 1;
    }
    for ( I = 0; I < l_U315; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U315[I]._fU0 )))
        {
            if (IS_PED_SHOOTING( l_U315[I]._fU0 ))
            {
                return 1;
            }
        }
    }
    return 0;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_60284(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_57653(  /* PLAYER_PED_ID */ sub_1095(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* P_CREATE_SNIPER_REPLACEMENT */ void sub_60512()
{
    int I;

     /* WRITESCRIPTLOG */ sub_477( "GA", "P_CREATE_SNIPER_REPLACEMENT start", 0 );
    l_U704[0] = {-83.28000000, -47.69000000, 22.90000000};
    l_U711[0] = 70.00000000;
    l_U714[0] = 1194438308;
    l_U717[0] = 2;
    l_U720[0] = {g_U3928};
    l_U737[0] = 4.00000000;
    l_U740[0] = 30.00000000;
    l_U743[0] = g_U2387;
    l_U746[0] = "M3_CP_S2_Avg";
     /* P_SETUP_AI_GROUP */ sub_35418( ref l_U749, 1.00000000, 0 );
    for ( I = 0; I <= 0; I++ )
    {
        PRINTSTRING( "[MSWW] ### MAL_SetupPedGroupAdv creating ped: " );
         /* WRITE_INT */ sub_53768( I );
         /* P_CREATEPEDSTRUCT */ sub_36011( ref l_U677[I], l_U704[I], l_U711[I], l_U743[I], 7, 3, 2, 0, 0 );
        l_U674[I] =  /* MAL_CREATEPED */ sub_36133( ref l_U674[I], ref l_U677[I], 1, 0, 0 );
         /* MAL_STANDSTILL */ sub_39302( ref l_U674[I] );
         /* MAL_GIVEPEDWEAPON */ sub_31674( l_U674[I], l_U714[I], 25000, 0, 0 );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_38132( l_U674[I], ref l_U749 );
         /* MAL_SETTEMPLATEANDRANGES */ sub_37149( ref l_U674[I], ref l_U720[I], l_U737[I], l_U740[I], 1 );
         /* MAL_SETPEDCOMBATMOVEMENT */ sub_37480( ref l_U674[I], l_U717[I] );
    }
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_CREATE_SNIPER_REPLACEMENT end", 0 );
    return;
}

/* P_HANDLE_STATE_BLEACHERS_SNIPER_INTRO */ void sub_61167(boolean bParam0)
{
    if (bParam0)
    {
         /* WRITESCRIPTLOG */ sub_477( "[SA]", "Entering state STATE_BLEACHERS_SNIPER_INTRO.", 0 );
         /* CUTSYS_CREATESTANDALONECUTSCENE */ sub_46777( ref l_U1027, "MID_08A_STAD_concat", 61310, 61363, 61959, 62033, 250, 0 );
        l_U1027._fU4 = 0;
         /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U297, 500 );
    }
    if ( /* ISTIMERDONE */ sub_2283( ref l_U297 ))
    {
        l_U1027._fU4 = 2;
    }
    if ( /* CUTSYS_HANDLECUTSCENE */ sub_48264( ref l_U1027 ))
    {
        l_U133 = 11;
         /* WRITESCRIPTLOG */ sub_477( "GA", "eCheckpointState = CP_SB_SNIPER_RUN", 0 );
    }
    return;
}

/* CUTSYS_DEFAULT_PRECUTSCENESETUP */ int sub_61310()
{
    return 1;
}

/* MID08A_REGISTER */ void sub_61363()
{
    if (NOT (IS_PED_DEAD( l_U242._fU0 )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( l_U242._fU0, "M_CRAC_SOLD_BB", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( l_U242._fU188, "W_SR_M82_Aa_H", 0 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( l_U242._fU0, "/Global/SNIPER_BEHAVIOR/SNIPER3SET_SEQ/STATES/DUCK/DUCK_HOLD" );
        CUTSCENE_REGISTER_PED_TELEPORT( l_U242._fU0, l_U242._fU56, l_U242._fU68 );
    }
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() )))
    {
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_1095(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_IDLE" );
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_1095(), (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_1095() ))) - (vector( 0, 0, 1)),  /* MAL_GETDESIREDHEADINGTOFACEPOINT */ sub_61708( -83.42564000, -43.70032000, 24.33051000 ) );
    }
    return;
}

/* MAL_GETDESIREDHEADINGTOFACEPOINT */ void sub_61708(unknown uParam0, unknown uParam1, unknown uParam2)
{
    vector vVar5;
    vector vVar8;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown Result;

    vVar5 = {uParam0};
    vVar8 = { /* MAL_GETPEDCOORDS */ sub_55823(  /* PLAYER_PED_ID */ sub_1095() )};
    uVar11 = { /* F_GET_VECTOR_NORM */ sub_61781( vVar5 - vVar8 )};
    Result = ACOS( uVar11._fU4 );
    return Result;
}

/* F_GET_VECTOR_NORM */ vector sub_61781(unknown uParam0, unknown uParam1, unknown uParam2)
{
    float fVar5;

    fVar5 = SQRT( ((uParam0._fU0 * uParam0._fU0) + (uParam0._fU4 * uParam0._fU4)) + (uParam0._fU8 * uParam0._fU8) );
    if (fVar5 > 0.00000000)
    {
        return vector( uParam0._fU0 / fVar5, uParam0._fU4 / fVar5, uParam0._fU8 / fVar5);
        break;
    }
    return vector( 0.00000000, 0.00000000, 0.00000000);
}

/* MID08A_HANDLE */ void sub_61959()
{
    if (l_U1027._fU52)
    {
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
        CAMERA_POINT_AT_PED( l_U242._fU0, 1000 );
    }
    return;
}

/* MID08A_POST */ int sub_62033()
{
    unknown uVar2;

     /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_37858( ref l_U242._fU188, 13, 1 );
    SET_LASER_SIGHT_ATTACHMENT( l_U242._fU188, -12373631 );
     /* MAL_SETPEDALERTNESSANDEMOTIONSTATE */ sub_45338( ref l_U958, 3, 2 );
     /* MAL_SETLOCKEDANDREGISTEREDONPED */ sub_41124( ref l_U958, l_U242._fU0 );
    uVar2 = GET_WEAPON_FROM_HAND( l_U958, 0, 0 );
     /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_37858( ref uVar2, 13, 1 );
    SET_LASER_SIGHT_ATTACHMENT( uVar2, -1732869806 );
     /* P_PASSOS_SHOOT_AT_SNIPER */ sub_62158();
     /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U808, 4000 );
    l_U817 = 1;
    l_U242._fU164 = 5;
     /* SB_HANDLESNIPERBEHAVIOUR */ sub_57904( ref l_U242 );
     /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U808, 4000 );
    return 1;
}

/* P_PASSOS_SHOOT_AT_SNIPER */ void sub_62158()
{
    unknown uVar2;
    unknown uVar3;

    if (NOT (IS_PED_DEAD( l_U958 )))
    {
         /* MAL_WRITESCRIPTLOG */ sub_31842( "P_PASSOS_SHOOT_AT_SNIPER" );
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_AIM_GUN_AT_COORD( 0, -79.60000000, -47.50000000, 24.20000000, GET_RANDOM_INT_IN_RANGE( 1750, 2450 ), 0 );
        TASK_AIM_GUN_AT_COORD( 0, -82.47000000, -44.35000000, 23.97000000, GET_RANDOM_INT_IN_RANGE( 1250, 2350 ), 0 );
        SET_SEQUENCE_TO_REPEAT( uVar2, 1 );
        CLOSE_SEQUENCE_TASK( uVar2 );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_AIM_GUN_AT_COORD( 0, -80.13309000, -46.20161000, 23.44295000, 100, 0 );
        TASK_SHOOT_AT_COORD( 0, -80.13309000, -46.20161000, 23.44295000, 500, 1566631136, 1, 0 );
        TASK_AIM_GUN_AT_COORD( 0, -80.13309000, -46.20161000, 23.44295000, 500, 0 );
        TASK_PERFORM_SEQUENCE( 0, uVar2 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( l_U958, uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    return;
}

/* P_HANDLE_STATE_SNIPER_RUN */ void sub_62742(boolean bParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;

    if (bParam0)
    {
         /* WRITESCRIPTLOG */ sub_477( "[SA]", "Entering state STATE_BLEACHERS_SNIPER_RUN.", 0 );
         /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U306, 500 );
         /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U799, 100 );
         /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U828, 2000 );
    }
    if ( /* ISTIMERDONE */ sub_2283( ref l_U306 ))
    {
        CAMERA_CLEAR_POINT_AT_TARGET();
    }
     /* SB_HANDLESNIPERBEHAVIOUR */ sub_57904( ref l_U242 );
    if ((NOT l_U179._fU64) AND (l_U817))
    {
        if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_62932()))
        {
            if ( /* ISTIMERDONE */ sub_2283( ref l_U808 ))
            {
                if (l_U818 > 0)
                {
                     /* P_PASSOS_SHOOT_AT_SNIPER */ sub_62158();
                     /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U808, 2000 + (GET_RANDOM_INT_IN_RANGE( 2000, 4000 )) );
                    l_U818--;
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_477( "GA", "Passos out of bullets.", 0 );
                     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_56388( 1,  /* PLAYER_PED_ID */ sub_1095(), "PASSOS", ref uVar3, 2, 0 );
                     /* PLAY_SINGLE_SPEECH */ sub_56629( "SSTD_3SFM", ref uVar3, 8, 1 );
                     /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U819, 3000 );
                     /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U828, 3500 );
                    uVar13 = GET_WEAPON_FROM_HAND( l_U958, 0, 0 );
                     /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_37858( ref uVar13, 13, 0 );
                    l_U817 = 0;
                }
            }
        }
    }
    if ( /* ISTIMERDONE */ sub_2283( ref l_U819 ))
    {
        l_U242._fU164 = 1;
    }
    if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_62932()))
    {
        if ((l_U837 < 6) AND ( /* ISTIMERDONE */ sub_2283( ref l_U828 )))
        {
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_56388( 1,  /* PLAYER_PED_ID */ sub_1095(), "PASSOS", ref uVar14, 2, 0 );
             /* PLAY_SINGLE_SPEECH */ sub_56629( "SSTD_MFFM", ref uVar14, 8, 1 );
             /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U828, 6000 );
            l_U837++;
        }
    }
    if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_60284( ref l_U137, 0 )) == 1)
    {
        if (IS_SCRIPTEDFX_ENABLED() == 1)
        {
             /* WRITESCRIPTLOG */ sub_477( "SP", "Playing Large Gate Doors Image FX", 0 );
            PLAY_IMAGEFX( "TRIPLE_MOVE_RIGHT_COLOR_SPLIT1", 4, 0 );
        }
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_60284( ref l_U158, 0 ))
    {
         /* P_CREATE_SNIPER_REPLACEMENT */ sub_60512();
         /* RESETTIMER */ sub_2859( ref l_U828 );
        l_U133 = 12;
         /* WRITESCRIPTLOG */ sub_477( "GA", "eCheckpointState = CP_SB_SNIPER_FIGHT", 0 );
    }
    return;
}

/* IS_ANY_SPEECH_CURRENTLY_PLAYING */ void sub_62932()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

/* P_HANDLE_STATE_SNIPER_FIGHT */ void sub_63594(boolean bParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;

    if (bParam0)
    {
         /* WRITESCRIPTLOG */ sub_477( "[SA]", "Entering state STATE_BLEACHERS_SNIPER_FIGHT.", 0 );
         /* RESET_SCRIPT_SPEECH_STRUCT */ sub_63705( ref l_U838 );
         /* P_SPEECH_PLAY_MONOLOGUE */ sub_63814( "SSTD_GTMR", ref l_U838 );
        CAMERA_CLEAR_POINT_AT_TARGET();
         /* DISABLETIMER */ sub_63930( ref l_U819 );
         /* DISABLETIMER */ sub_63930( ref l_U808 );
         /* SB_DESTROYSNIPER */ sub_5367( ref l_U242 );
         /* CLEANPED */ sub_5098( l_U958 );
         /* WRITESCRIPTLOG */ sub_477( "GA", "Player left bleachers, locking doors.", 0 );
         /* P_LOCK_BLEACHERS_GATE */ sub_64054();
         /* P_CREATE_SNIPER_GUARD */ sub_64116();
    }
     /* MAL_ISDOORCLOSEDBUTNOTLOCKED */ sub_65233( ref g_U3689, 1, 0.05000000 );
     /* MAL_ISDOORCLOSEDBUTNOTLOCKED */ sub_65233( ref g_U3696, 1, 0.05000000 );
    if ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65525( ref l_U674 )) + ( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_55984( ref l_U315 ))) == 1)
    {
         /* MAL_ASSIGNBULLETCAMTOLASTLIVINGPED */ sub_65659( ref l_U674 );
         /* MAL_ESA_ASSIGNBULLETCAMTOLASTLIVINGPED */ sub_66044( ref l_U315, 0, 0, 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_60284( ref l_U179, 0 ))
    {
         /* P_ACTIVATE_SNIPER_AND_GUARD */ sub_66281();
         /* MAL_ESA_BLOCK */ sub_46287( ref l_U315, 1, 0, -1 );
         /* P_CREATE_AND_START_TIMER */ sub_55612( ref l_U763, 1000 );
        PLAY_IMAGEFX( "FLASH_WHITE", 4, 0 );
        PLAY_IMAGEFX( "GAMMA_ZOOM_1", 4, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_56388( 1, l_U674[1], "M3_CP_CKP10_PH", ref uVar3, 2, 0 );
         /* PLAY_SINGLE_SPEECH */ sub_56629( "SSTD_CPSM", ref uVar3, 8, 1 );
    }
    if (NOT (IS_SPHERE_VISIBLE( -96.32922000, -34.89222000, 20.26814000, 1.00000000, 0 )))
    {
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_60284( ref l_U200, 0 ))
        {
             /* MAL_ES_TELEPORT */ sub_66962( l_U315[0], -96.27937000, -32.53033000, 18.37909000, 0 );
             /* MAL_ES_TELEPORT */ sub_66962( l_U315[1], -97.79519000, -31.72494000, 18.37909000, 0 );
             /* MAL_ES_TELEPORT */ sub_66962( l_U315[2], -98.35775000, -30.26540000, 18.37909000, 0 );
             /* MAL_ES_TELEPORT */ sub_66962( l_U315[3], -98.35775000, -30.26540000, 18.37909000, 0 );
             /* MAL_ES_TELEPORT */ sub_66962( l_U315[4], -94.35062000, -32.12373000, 18.37909000, 0 );
             /* MAL_ES_TELEPORT */ sub_66962( l_U315[5], -92.89578000, -30.98616000, 18.37909000, 0 );
             /* MAL_ES_TELEPORT */ sub_66962( l_U315[6], -91.93711000, -31.42878000, 18.37909000, 0 );
             /* MAL_ES_TELEPORT */ sub_66962( l_U315[7], -92.16702000, -29.46534000, 18.37909000, 0 );
             /* MAL_ESA_CLEARTETHERS */ sub_67305( ref l_U315 );
             /* MAL_ESA_GIVETETHERARRAY */ sub_67474( ref l_U315, ref l_U755, 1 );
             /* MAL_ESA_UNBLOCKANDCOMBATPLAYER */ sub_45740( ref l_U315, 1, 0, -1 );
        }
    }
    if ( /* ISTIMERDONE */ sub_2283( ref l_U763 ))
    {
         /* WRITESCRIPTLOG */ sub_477( "GA", "Putting the sniper into cover", 0 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U674[0], 0 );
    }
    if (NOT l_U762)
    {
        if ( /* MAL_COMPAREPLAYERPOSAXIS */ sub_67814( "Y", "Less", -44.70000000 ))
        {
            l_U762 = 1;
             /* MAL_MOVETOPOINTTHENCOMBATPLAYER */ sub_68074( ref l_U674[0], -79.42380000, -51.40019000, 22.75031000, 0 );
             /* MAL_NOUSECOVER */ sub_68255( ref l_U674[0] );
        }
    }
    if (NOT l_U761)
    {
        uVar13 = { /* MAL_GETPEDCOORDS */ sub_55823(  /* PLAYER_PED_ID */ sub_1095() )};
        if ((NOT (IS_PED_DEAD( l_U674[1] ))) AND (uVar13._fU8 >= 23))
        {
             /* MAL_MOVETOPOINTTAKECOVERAGAINSTPLAYER */ sub_68381( l_U674[1], -87.24025000, -38.22030000, 19.67152000, 1, 1 );
            l_U761 = 1;
        }
    }
    else
    {
        uVar16 = { /* MAL_GETPEDCOORDS */ sub_55823(  /* PLAYER_PED_ID */ sub_1095() )};
        if ((NOT (IS_PED_DEAD( l_U674[1] ))) AND (uVar16._fU8 < 21))
        {
             /* MAL_CLEARHIDEINCOVER */ sub_68705( l_U674[1] );
             /* MAL_BLOCKPEDARRAY */ sub_68786( ref l_U674, 0 );
            l_U761 = 0;
        }
    }
    if ((( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_55984( ref l_U315 )) < 1) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65525( ref l_U674 )) < 1))
    {
        if ((NOT IS_MAGDEMO()) AND (NOT g_U3871))
        {
            g_U3871 = 1;
             /* P_START_CHECKPOINT_THREAD */ sub_68954( ref g_U888[11] );
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1133(), 0, 0 );
            REENABLE_PLAYER_INPUT( 4 );
            AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_5", "", 0, 8000, -1, -1082130432, 0 );
        }
        if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND (NOT IS_LAST_MAN_STANDING_ACTIVE()))
        {
            if (IS_MAGDEMO())
            {
                l_U133 = 13;
            }
            else
            {
                g_U3885 = 1;
                l_U133 = 14;
            }
             /* WRITESCRIPTLOG */ sub_477( "GA", "eCheckpointState = CP_FINISHED", 0 );
        }
    }
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_63705(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_63814(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_63705( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_56388( 0,  /* PLAYER_PED_ID */ sub_1095(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_56388( 1,  /* PLAYER_PED_ID */ sub_1095(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_56629( uParam0, uParam1, 8, 1 );
    return;
}

/* DISABLETIMER */ void sub_63930(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* P_LOCK_BLEACHERS_GATE */ void sub_64054()
{
     /* P_CLOSEDOOR */ sub_13478( ref g_U3696, 0 );
     /* P_CLOSEDOOR */ sub_13478( ref g_U3689, 0 );
    return;
}

/* P_CREATE_SNIPER_GUARD */ void sub_64116()
{
    int I;

     /* WRITESCRIPTLOG */ sub_477( "GA", "P_CREATE_SNIPER_GUARD start", 0 );
    l_U704[1] = {-86.67196000, -52.28669000, 19.40133000};
    l_U711[1] = 19.82463000;
    l_U714[1] = 1478009203;
    l_U717[1] = 2;
    l_U720[1] = {g_U3928};
    l_U737[1] = 3.00000000;
    l_U740[1] = 6.00000000;
    l_U743[1] = g_U2387;
    l_U746[1] = "M3_CP_28_Mus";
    for ( I = 1; I <= 1; I++ )
    {
        PRINTSTRING( "[MSWW] ### MAL_SetupPedGroupAdv creating ped: " );
         /* WRITE_INT */ sub_53768( I );
         /* P_CREATEPEDSTRUCT */ sub_36011( ref l_U677[I], l_U704[I], l_U711[I], l_U743[I], 7, 3, 2, 0, 0 );
        l_U674[I] =  /* MAL_CREATEPED */ sub_36133( ref l_U674[I], ref l_U677[I], 1, 0, 0 );
         /* MAL_STANDSTILL */ sub_39302( ref l_U674[I] );
         /* MAL_GIVEPEDWEAPON */ sub_31674( l_U674[I], l_U714[I], 25000, 0, 0 );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_38132( l_U674[I], ref l_U749 );
         /* MAL_SETTEMPLATEANDRANGES */ sub_37149( ref l_U674[I], ref l_U720[I], l_U737[I], l_U740[I], 1 );
         /* MAL_SETPEDCOMBATMOVEMENT */ sub_37480( ref l_U674[I], l_U717[I] );
    }
     /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_64637( ref l_U674, "SniperAndGuard" );
     /* MAL_GIVEPEDWEAPONINHOLSTER */ sub_31987( l_U674[1], 68019059, 25000, 1, 0 );
     /* MAL_GIVEPEDARRAYPERSISTANTVARIATIONS */ sub_64799( ref l_U674, ref l_U746 );
    SET_PED_VALIDATE_BULLET_CAM_HIT( l_U674[0], 0 );
    SET_PED_VALIDATE_BULLET_CAM_HIT( l_U674[1], 0 );
     /* MAL_GIVEPEDHARDTETHER */ sub_64948( ref l_U674[1], l_U755[0] );
     /* MAL_GIVEPEDHARDTETHER */ sub_64948( ref l_U674[1], l_U755[1] );
     /* MAL_GIVEPEDHARDTETHER */ sub_64948( ref l_U674[1], l_U755[2] );
     /* MAL_GIVEPEDHARDTETHER */ sub_64948( ref l_U674[1], l_U755[3] );
     /* MAL_GIVEPEDHARDTETHER */ sub_64948( ref l_U674[1], l_U755[4] );
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_CREATE_SNIPER_GUARD end", 0 );
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_64637(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* MAL_GIVEPEDARRAYPERSISTANTVARIATIONS */ void sub_64799(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* MAL_GIVEPEDPERSISTANTVARIATION */ sub_41378( ref (uParam0^)[I], (uParam1^)[I] );
    }
    return;
}

/* MAL_GIVEPEDHARDTETHER */ void sub_64948(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
         /* P_TETHERPED */ sub_65003( ref uParam1, (uParam0^), 1 );
    }
    return;
}

/* P_TETHERPED */ void sub_65003(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* MAL_ISDOORCLOSEDBUTNOTLOCKED */ int sub_65233(unknown uParam0, boolean bParam1, float fParam2)
{
    if (NOT ( /* F_ISDOORLOCKED */ sub_65276( uParam0 )))
    {
        if ((( /* F_GETDOOROPENRATIO */ sub_65362( uParam0 )) > (fParam2 * -1)) AND (( /* F_GETDOOROPENRATIO */ sub_65362( uParam0 )) < fParam2))
        {
            if (bParam1)
            {
                 /* P_SETDOORLOCKED */ sub_12677( uParam0, 1 );
            }
            return 1;
        }
    }
    return 0;
}

/* F_ISDOORLOCKED */ void sub_65276(int iParam0)
{
    unknown Result;
    unknown uVar4;

    if (( /* F_DOESDOOREXIST */ sub_12707( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12791( iParam0 );
    }
    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref Result, ref uVar4 );
    return Result;
}

/* F_GETDOOROPENRATIO */ void sub_65362(int iParam0)
{
    int iVar3;
    float Result;

    if (( /* F_DOESDOOREXIST */ sub_12707( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12791( iParam0 );
    }
    iVar3 = 0;
    Result = 0.00000000;
    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar3, ref Result );
    return Result;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_65525(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* MAL_ASSIGNBULLETCAMTOLASTLIVINGPED */ void sub_65659(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65525( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if ( /* MAL_SETCANTRIGGERBULLETCAM */ sub_65744( (uParam0^)[I], 1 ))
            {
                return (uParam0^)[I];
            }
        }
    }
    return nil;
}

/* MAL_SETCANTRIGGERBULLETCAM */ int sub_65744(unknown uParam0, boolean bParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        if (bParam1)
        {
            if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( uParam0 )))
            {
                 /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_SetCanTriggerBulletCam: Ped is not able to trigger BC, adding" );
                SET_PED_CAN_TRIGGER_BULLET_CAM( uParam0, bParam1 );
                return 1;
            }
        }
        else if (GET_PED_CAN_TRIGGER_BULLET_CAM( uParam0 ))
        {
             /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_SetCanTriggerBulletCam turning off BC" );
            SET_PED_CAN_TRIGGER_BULLET_CAM( uParam0, bParam1 );
            return 1;
        }
    }
    return 0;
}

/* MAL_ESA_ASSIGNBULLETCAMTOLASTLIVINGPED */ void sub_66044(unknown uParam0, boolean bParam1, unknown uParam2, unknown uParam3)
{
    int I;

    if (( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_55984( uParam0 )) == 1)
    {
        for ( I = 0; I < (uParam0^); I++ )
        {
            if ( /* MAL_SETCANTRIGGERBULLETCAM */ sub_65744( (uParam0^)[I]._fU0, 1 ))
            {
                if (bParam1)
                {
                    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, uParam2 );
                }
                BULLET_CAMERA_TRACK_UNTIL_GROUNDED( uParam3 );
                return (uParam0^)[I];
            }
        }
    }
    return g_U671;
}

/* P_ACTIVATE_SNIPER_AND_GUARD */ void sub_66281()
{
     /* MAL_WRITESCRIPTLOG */ sub_31842( "P_ACTIVATE_SNIPER_AND_GUARD" );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() ))) AND (NOT (IS_PED_DEAD( l_U674[0] ))))
    {
         /* WRITESCRIPTLOG */ sub_477( "GA", "Sniper going into cover.", 0 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U674[0], 1 );
        TASK_COMBAT_MOVE_TO_COVER_COORDS( l_U674[0], "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( l_U674[0] ),  /* PLAYER_PED_ID */ sub_1095() );
    }
    if (NOT (IS_PED_DEAD( l_U674[1] )))
    {
         /* MAL_SETPEDALERTNESS */ sub_45389( ref l_U674[1], 2 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U674[1], 0 );
    }
     /* MAL_SETPEDARRAYLOCKEDANDREGISTEREDTARGET */ sub_66539( ref l_U674,  /* PLAYER_PED_ID */ sub_1095() );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_63705( ref l_U848 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_56388( 2, l_U674[1], "M3_CP_34_MUS", ref l_U848, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_56388( 3,  /* PLAYER_PED_ID */ sub_1095(), "MAX", ref l_U848, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_56629( "SSTD_SSCA", ref l_U848, 7, 1 );
    return;
}

/* MAL_SETPEDARRAYLOCKEDANDREGISTEREDTARGET */ void sub_66539(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* MAL_REGISTERTARGET */ sub_41172( ref (uParam0^)[I], uParam1 );
         /* MAL_SETLOCKEDTARGET */ sub_41254( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_TELEPORT */ void sub_66962(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47)
{
    if (NOT (IS_PED_DEAD( uParam0._fU0 )))
    {
        SET_PED_COORDS( uParam0._fU0, uParam44, 1 );
        SET_PED_HEADING( uParam0._fU0, uParam47 );
    }
    return;
}

/* MAL_ESA_CLEARTETHERS */ void sub_67305(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_REMOVEALLTETHERSFROMPED */ sub_67363( (uParam0^)[I]._fU0 );
    }
    return;
}

/* P_REMOVEALLTETHERSFROMPED */ void sub_67363(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        RESET_PED_TETHERING( uParam0 );
    }
    return;
}

/* MAL_ESA_GIVETETHERARRAY */ void sub_67474(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
         /* MAL_ESA_GIVETETHER */ sub_67539( uParam0, (uParam1^)[I], uParam2, 0, -1 );
    }
    return;
}

/* MAL_ESA_GIVETETHER */ void sub_67539(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    int I;

    if (iParam4 == -1)
    {
        iParam4 = (uParam0^) - 1;
    }
    for ( I = uParam3; I <= iParam4; I++ )
    {
         /* MAL_ES_GIVETETHER */ sub_67612( ref (uParam0^)[I], uParam1, uParam2 );
    }
    return;
}

/* MAL_ES_GIVETETHER */ void sub_67612(int iParam0, unknown uParam1, unknown uParam2)
{
     /* P_TETHERPED */ sub_65003( ref uParam1, iParam0->_fU0, uParam2 );
    return;
}

/* MAL_COMPAREPLAYERPOSAXIS */ int sub_67814(unknown uParam0, unknown uParam1, float fParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    float fVar8;

    uVar5 = { /* MAL_GETPEDCOORDS */ sub_55823(  /* PLAYER_PED_ID */ sub_1095() )};
    if (ARE_STRINGS_EQUAL( uParam0, "X" ))
    {
        fVar8 = uVar5._fU0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "Y" ))
    {
        fVar8 = uVar5._fU4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "Z" ))
    {
        fVar8 = uVar5._fU8;
    };;;
    if (ARE_STRINGS_EQUAL( uParam1, "Greater" ))
    {
        if (fVar8 > fParam2)
        {
            return 1;
        }
    }
    else if (ARE_STRINGS_EQUAL( uParam1, "Less" ))
    {
        if (fVar8 < fParam2)
        {
            return 1;
        }
    }
    return 0;
}

/* MAL_MOVETOPOINTTHENCOMBATPLAYER */ void sub_68074(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    unknown uVar7;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        OPEN_SEQUENCE_TASK( ref uVar7 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, uParam1, 3, 20000, 1048576000, 0, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, uParam4 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1095() );
        CLOSE_SEQUENCE_TASK( uVar7 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar7 );
        CLEAR_SEQUENCE_TASK( uVar7 );
    }
    return;
}

/* MAL_NOUSECOVER */ void sub_68255(unknown uParam0)
{
     /* MAL_SETPEDCOMBATATTRIBUTES */ sub_36980( uParam0, 1, 0 );
    return;
}

/* MAL_MOVETOPOINTTAKECOVERAGAINSTPLAYER */ void sub_68381(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, boolean bParam5)
{
    unknown uVar8;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1095() ))) AND (NOT (IS_PED_DEAD( uParam0 ))))
    {
         /* MAL_WRITESCRIPTLOG */ sub_31842( "MAL_TakeCoverFromPlayerAtPosition" );
        CLEAR_PED_TASKS( uParam0 );
        OPEN_SEQUENCE_TASK( ref uVar8 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, uParam4 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, uParam1, 3, 20000, 1048576000, 0, 0 );
        TASK_COMBAT_MOVE_TO_COVER_COORDS( 0, uParam1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1095() );
        CLOSE_SEQUENCE_TASK( uVar8 );
        TASK_PERFORM_SEQUENCE( uParam0, uVar8 );
        CLEAR_SEQUENCE_TASK( uVar8 );
        if (bParam5)
        {
            SET_PED_FLAG_LOCK_TO_COVER( uParam0, 1 );
        }
    }
    return;
}

/* MAL_CLEARHIDEINCOVER */ void sub_68705(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FLAG_LOCK_TO_COVER( uParam0, 0 );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( uParam0, 0 );
    }
    return;
}

/* MAL_BLOCKPEDARRAY */ void sub_68786(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( (uParam0^)[I], uParam1 );
        }
    }
    return;
}

/* P_START_CHECKPOINT_THREAD */ void sub_68954(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* F_ISPEDINTRIGGERBOXFIRSTTIME */ void sub_69202(int iParam0, unknown uParam1, unknown uParam2)
{
    if (iParam0->_fU68 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU68 =  /* F_ISPEDINTRIGGERBOX */ sub_57653( uParam1, (iParam0^) );
        if ((iParam0->_fU68) AND (uParam2))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU68;
}

/* P_RELEASE_SB_ASSETS */ void sub_69653()
{
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_RELEASE_SB_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_69732( ref l_U113, ref g_U1069 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_70280( ref l_U128, ref g_U1214 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_69805( g_U2387, ref g_U1069 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "npc_pstl_cover_grenade", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "npc_rifle_cover_grenade", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "LEVEL_S_STAD_PU", ref g_U1354 );
     /* P_UNLOAD_PLGE_ANIM_DICTS */ sub_71142( 0 );
     /* WRITESCRIPTLOG */ sub_477( "GA", "P_RELEASE_SB_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_69732(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_69805( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_69805(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3705( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_70280(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_70354( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_70354(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3705( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_70742(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3705( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_UNLOAD_PLGE_ANIM_DICTS */ void sub_71142(boolean bParam0)
{
    if (NOT bParam0)
    {
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_RIFLE_CROUCH", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_PSTL_CROUCH", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_RIFLE_CORE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_PSTL_CORE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_RIFLE_CORE_RELOAD", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_PSTL_CORE_RELOAD", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_RIFLE_HANDSIG", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_PSTL_HANDSIG", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_RIFLE_ACTIONS", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_PSTL_ACTIONS", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_RIFLE_KNEE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_PSTL_KNEE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_RIFLE_COVER", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_PSTL_COVER", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_RIFLE_REACT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_PSTL_REACT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_RIFLE_COVER_EXIT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_PSTL_COVER_EXIT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_70742( "PLGE_PSTL_FULLBODY", ref g_U1354 );
    }
    else
    {
         /* UNLOADANIMDICT */ sub_71765( "PLGE_RIFLE_CROUCH" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_PSTL_CROUCH" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_RIFLE_CORE" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_PSTL_CORE" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_RIFLE_CORE_RELOAD" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_PSTL_CORE_RELOAD" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_RIFLE_HANDSIG" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_PSTL_HANDSIG" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_RIFLE_ACTIONS" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_PSTL_ACTIONS" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_RIFLE_KNEE" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_PSTL_KNEE" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_RIFLE_COVER" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_PSTL_COVER" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_RIFLE_REACT" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_PSTL_REACT" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_RIFLE_COVER_EXIT" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_PSTL_COVER_EXIT" );
         /* UNLOADANIMDICT */ sub_71765( "PLGE_PSTL_FULLBODY" );
    }
    return;
}

/* UNLOADANIMDICT */ void sub_71765(unknown uParam0)
{
    REMOVE_ANIM_DICT( uParam0, 0 );
    return;
}

