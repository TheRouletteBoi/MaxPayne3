void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    l_U39 = -1;
    l_U40 = {64536, 64536, 64536};
    l_U62 = 0;
    l_U63 = 0;
    l_U64 = 1500;
    l_U75 = 0;
    l_U127 = 0;
    l_U129 = 1;
    l_U130 = 0;
    l_U172 = {94.00000000, -9.80000000, 9.60000000};
    l_U175 = 90.00000000;
    l_U494 = 2000;
    l_U495 = 750;
    l_U660 = -1;
    l_U670 = {90.40000000, 14.96000000, 9.62000000};
    l_U673 = 270.00000000;
    l_U724 = 12000;
    l_U725 = 15000;
    l_U1314 = {85.25000000, 25.81000000, 9.60000000};
    l_U1317 = 180.00000000;
    l_U1318 = {93.24000000, 3.54000000, 9.64000000};
    l_U1321 = 0.00000000;
    l_U1377 = {92.58926000, -9.65747400, 9.60318000};
    l_U1380 = 89.75311000;
    l_U1381 = 0;
    l_U1382 = 0;
    l_U1383 = 0;
    l_U1384 = 0;
    l_U1385 = 0;
    l_U1386 = 0;
    l_U1387 = 0;
    l_U1388 = 0;
    l_U1408 = 0;
    l_U1409 = 0;
    l_U1410 = 0;
    l_U1411 = 0;
    l_U1422 = 0;
    l_U1450 = 0;
     /* WRITESCRIPTLOG */ sub_617( "SP", "Script stad_StoreRestaurant.sc is starting up...", 0 );
     /* P_STORE_POPULATE_VARIABLE_ARRAYS */ sub_735();
     /* P_CREATE_SCRIPT_WIDGETS */ sub_1344();
    l_U127 = 1;
    l_U75 = 0;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_3211();
        if (l_U130 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_15294();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_STORE */ sub_6234( 0 );
     /* P_RELEASE_STORE_ASSETS */ sub_81398();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "stad_StoreRestaurant" );
     /* WRITESCRIPTLOG */ sub_617( "SP", "Script stad_StoreRestaurant.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_617(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_STORE_POPULATE_VARIABLE_ARRAYS */ void sub_735()
{
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_STORE_POPULATE_VARIABLE_ARRAYS start", 0 );
    l_U113[0] = g_U2390;
    l_U113[1] = -1652775333;
    l_U113[2] = 1816766229;
    l_U113[3] = 1873472982;
    l_U113[4] = -1993976541;
    l_U113[5] = -2096019114;
    l_U113[6] = g_U2382;
    l_U113[7] = g_U2383;
    l_U113[8] = g_U847;
    l_U123[0] = 1194438308;
    l_U123[1] = 1478009203;
    l_U123[2] = 434544317;
    l_U496 = {93.27000000, 5.68000000, 9.70000000};
    l_U499 = 176.80000000;
    l_U500 = 500;
    l_U595[0] = {92.42000000, 4.33000000, 11.20000000};
    l_U605[0] = {-5.16000000, 0.00000000, -51.91000000};
    l_U619[0] = {3.00000000, 0.00000000, 3.00000000};
    l_U615[0] = 1500;
    l_U595[1] = {91.76572000, -7.67074900, 11.92441000};
    l_U605[1] = {-19.65665000, -0.00548800, -150.58190000};
    l_U619[1] = {5.00000000, 0.00000000, 5.00000000};
    l_U615[1] = 2000;
    l_U595[2] = {93.44251000, -11.96680000, 13.62962000};
    l_U605[2] = {-69.99995000, -0.00000100, -88.08092000};
    l_U619[2] = {3.00000000, 3.00000000, 3.00000000};
    l_U615[2] = 3000;
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_STORE_POPULATE_VARIABLE_ARRAYS end", 0 );
    return;
}

/* P_CREATE_SCRIPT_WIDGETS */ void sub_1344()
{
    if (NOT l_U1450)
    {
        START_WIDGET_GROUP( "Stores/Concession tuning" );
        START_WIDGET_GROUP( "Passos death scene" );
        ADD_WIDGET_INT_SLIDER( "Passos comes out cover delay", ref l_U500, 0, 10000, 1 );
        START_WIDGET_GROUP( "Shooter Position" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U496._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U496._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U496._fU8, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Heading", ref l_U499, 65356, 180, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Cam 1" );
        START_WIDGET_GROUP( "Position" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U595[0]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U595[0]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U595[0]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Rotation" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U605[0]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U605[0]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U605[0]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Shake" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U619[0]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U619[0]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U619[0]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        ADD_WIDGET_INT_SLIDER( "Duration", ref l_U615[0], 0, 10000, 1 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Cam 2" );
        START_WIDGET_GROUP( "Position" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U595[1]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U595[1]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U595[1]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Rotation" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U605[1]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U605[1]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U605[1]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Shake" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U619[1]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U619[1]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U619[1]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        ADD_WIDGET_INT_SLIDER( "Duration", ref l_U615[1], 0, 10000, 1 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Cam 3" );
        START_WIDGET_GROUP( "Position" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U595[2]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U595[2]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U595[2]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Rotation" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U605[2]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U605[2]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U605[2]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Shake" );
        ADD_WIDGET_FLOAT_SLIDER( "X", ref l_U619[2]._fU0, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Y", ref l_U619[2]._fU4, -200.00000000, 200.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Z", ref l_U619[2]._fU8, -200.00000000, 200.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        ADD_WIDGET_INT_SLIDER( "Duration", ref l_U615[2], 0, 10000, 1 );
        STOP_WIDGET_GROUP();
        ADD_WIDGET_INT_SLIDER( "nPassosDeathCamTimer_Restaurant", ref l_U494, 0, 10000, 1 );
        ADD_WIDGET_INT_SLIDER( "nPassosDeathCamTimer_Stairs", ref l_U495, 0, 10000, 1 );
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        l_U1450 = 1;
    }
    return;
}

/* P_HANDLE_FAILURE */ void sub_3211()
{
    if (g_U855 == 5)
    {
        switch (l_U130)
        {
            case 0:
            if (((IS_PED_DEAD( g_U4007 )) AND (DOES_PED_EXIST( g_U4007 ))) || (( /* RESTARTING_CHECKPOINT */ sub_3413()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() ))))
            {
                if (IS_PED_DEAD( g_U4392 ))
                {
                    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
                    RESET_LAST_MAN_STANDING();
                    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )))
                    {
                        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_3312(), 1 );
                    }
                }
                l_U130 = 1;
                 /* WRITESCRIPTLOG */ sub_617( "SP", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_4021())
            {
                l_U130 = 2;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_4081( 0 )) == 1)
            {
                l_U130 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )))
            {
                if ((g_U888[6]._fU40 != 4) AND (g_U888[6]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_617( "CR", "Shutting down script for MCE_CONCESSION.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_5652( ref g_U888[6] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U888[6]._fU32 );
                    g_U3876 = 0;
                }
                l_U130 = 3;
                 /* WRITESCRIPTLOG */ sub_617( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_617( "SP", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_3350() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_3350(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_3312() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_3312(), 0 );
                }
                SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_3312(), 0 );
            }
            DO_SCREEN_FADE_OUT( 0 );
             /* P_IMAGEFX_STOP_BULLETCAM */ sub_5971( "STAD_PASSOS_STORES_SCRIPTED_FAIL_FX" );
            TERMINATE_GAME_BULLET_CAMERA();
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
             /* P_CLEANUP_STORE */ sub_6234( 1 );
             /* P_LOAD_AREA */ sub_9743( 5 );
            l_U130 = 4;
             /* WRITESCRIPTLOG */ sub_617( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_617( "SP", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            if (l_U77._fU0)
            {
                 /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_10612( ref l_U77,  /* PLAYER_PED_ID */ sub_3312() );
            }
            l_U130 = 5;
             /* WRITESCRIPTLOG */ sub_617( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_617( "SP", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U127 = 1;
            l_U129 = 0;
            l_U130 = 0;
             /* WRITESCRIPTLOG */ sub_617( "SP", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_3312()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_3350() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_3350()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_3413()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_3312(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_3350(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_3350(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_3312() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_3312(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_4021()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_4081(int iParam0)
{
    iParam0 = 1;
    switch (l_U63)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_4163( ref l_U65 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )))
            {
                l_U64 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_4297( ref l_U65, l_U64, 1, 1 );
             /* STARTTIMER */ sub_4447( ref l_U65 );
        }
        if ( /* ISTIMERDONE */ sub_4580( ref l_U65 ))
        {
             /* WRITESCRIPTLOG */ sub_617( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_3350() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_3350(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U63 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U63 = 2;
            }
            else
            {
                l_U63 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_617( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_5081();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_617( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_5081();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_4163(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_4297(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_4447(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_4580(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_5081()
{
     /* WRITESCRIPTLOG */ sub_617( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_5156( ref l_U65 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_3350() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_3350(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U62 = 0;
    l_U62 = l_U62;
    l_U63 = 0;
    return;
}

/* RESETTIMER */ void sub_5156(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_5652(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_IMAGEFX_STOP_BULLETCAM */ void sub_5971(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_617( "CO", "P_IMAGEFX_STOP_BULLETCAM:  Cameras Deleted", 0 );
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
     /* CLEANCAMERA */ sub_6081( ref l_U76 );
    l_U75 = 1;
    return;
}

/* CLEANCAMERA */ void sub_6081(unknown uParam0)
{
    if ((DOES_CAM_EXIST( (uParam0^) )) == 1)
    {
        if ((IS_CAM_ACTIVE( (uParam0^) )) == 1)
        {
            SET_CAM_ACTIVE( (uParam0^), 0 );
        }
        DESTROY_CAM( (uParam0^) );
    }
    (uParam0^) = nil;
    return;
}

/* P_CLEANUP_STORE */ void sub_6234(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_CLEANUP_STORE start", 0 );
     /* TERMINATEISEQ */ sub_6303( -767085492, 0 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6613( -767085492, ref g_U1263 );
     /* TERMINATEISEQ */ sub_6303( -334595829, 0 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6613( -334595829, ref g_U1263 );
     /* TERMINATEISEQ */ sub_6303( 1262534908, 0 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6613( 1262534908, ref g_U1263 );
     /* TERMINATEISEQ */ sub_6303( 1812693303, 0 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6613( 1812693303, ref g_U1263 );
     /* TERMINATEISEQ */ sub_6303( 1154908660, 0 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6613( 1154908660, ref g_U1263 );
     /* TERMINATEISEQ */ sub_6303( -1414847258, 0 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6613( -1414847258, ref g_U1263 );
     /* P_SAFE_STOP_SOUND */ sub_7807( l_U660, 0 );
     /* P_SAFE_RELEASE_SOUND_ID */ sub_7990( ref l_U660 );
    if ((CUTSCENE_NAMED_IS_LOADING( "03_02a_stad_concat" )) || (CUTSCENE_IS_LOADED( "03_02a_stad_concat" )))
    {
        CLEAR_NAMED_CUTSCENE( "03_02a_stad_concat" );
    }
    if ((CUTSCENE_NAMED_IS_LOADING( "03_02a_STADIUM_PT8" )) || (CUTSCENE_IS_LOADED( "03_02a_STADIUM_PT8" )))
    {
        CLEAR_NAMED_CUTSCENE( "03_02a_STADIUM_PT8" );
    }
     /* KILL_SPEECH */ sub_8379( ref l_U705, 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )))
    {
        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_3312(), 0 );
    }
     /* CLEANPLACEMENTARRAY */ sub_8677( ref l_U453 );
    if (bParam0)
    {
         /* CLEANPED */ sub_8823( g_U4007 );
         /* MAL_ESA_CLEAN */ sub_8912( ref g_U4008 );
         /* MAL_ESA_CLEAN */ sub_8912( ref g_U4141 );
         /* CLEANPED */ sub_8823( g_U4186 );
         /* CLEANPEDARRAY */ sub_9053( ref g_U4187 );
         /* CLEANPLACEMENT */ sub_8732( g_U4191 );
    }
     /* CLEANPED */ sub_8823( l_U674 );
     /* SB_DESTROYSNIPER */ sub_9151( ref l_U1322 );
     /* P_STOP_SP_CHALLENGES */ sub_9453( bParam0 );
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_CLEANUP_STORE end", 0 );
    return;
}

/* TERMINATEISEQ */ void sub_6303(unknown uParam0, int iParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;

    if ((ISEQ_DOES_EXIST( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The interactive sequence you are trying to terminate does not exist!!!!", 0 );
    }
    if ((ISEQ_IS_LOADED( uParam0 )) == 1)
    {
        ISEQ_TERMINATE( uParam0 );
    }
    ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
    if (iParam1 == 1)
    {
        while ((ISEQ_IS_LOADED( uParam0 )) == 1)
        {
            DISPLAYF( "[SP]### Waiting for interactive sequence to terminate: {0} {1} ###", 2, 1281, ref uVar4, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_6613(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6751( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_6751(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_SAFE_STOP_SOUND */ void sub_7807(int iParam0, unknown uParam1)
{
    if (iParam0 != -1)
    {
         /* WRITESCRIPTLOG */ sub_617( "MF", "P_SAFE_STOP_SOUND: Stopping Sound...", 0 );
        STOP_SOUND( iParam0, uParam1 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_617( "MF", "P_SAFE_STOP_SOUND: Not stopping sound (SoundID = -1)", 0 );
    }
    return;
}

/* P_SAFE_RELEASE_SOUND_ID */ void sub_7990(unknown uParam0)
{
    if ((uParam0^) != -1)
    {
         /* WRITESCRIPTLOG */ sub_617( "MF", "P_SAFE_RELEASE_SOUND_ID: Releasing Sound...", 0 );
        RELEASE_SOUND_ID( (uParam0^) );
        (uParam0^) = -1;
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_617( "MF", "P_SAFE_RELEASE_SOUND_ID: Not RELEASING sound (SoundID != -1)", 0 );
    }
    return;
}

/* KILL_SPEECH */ void sub_8379(int iParam0, unknown uParam1)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_8407( (iParam0^) )))
    {
        ;
    }
    else
    {
        PRINTSTRING( "\n KILL SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
        {
            if (iParam0->_fU8 == g_U6[iParam0->_fU4])
            {
                STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
            }
        }
    }
    return;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_8407(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* CLEANPLACEMENTARRAY */ void sub_8677(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_8732( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_8732(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* CLEANPED */ void sub_8823(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* MAL_ESA_CLEAN */ void sub_8912(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_ES_CLEAN */ sub_8960( ref (uParam0^)[I] );
    }
    return;
}

/* MAL_ES_CLEAN */ void sub_8960(int iParam0)
{
     /* CLEANPED */ sub_8823( iParam0->_fU0 );
    iParam0->_fU172 = 0;
    return;
}

/* CLEANPEDARRAY */ void sub_9053(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_8823( (uParam0^)[I] );
    }
    return;
}

/* SB_DESTROYSNIPER */ void sub_9151(int iParam0)
{
    iParam0->_fU164 = 0;
    I_SEQUENCE_UNREGISTER_ENTITY( "S_STAD_SNIPBEH", "stad_sniper" );
     /* TERMINATEINTERACTIVESEQUENCE */ sub_9244( "S_STAD_SNIPBEH", 0 );
     /* CLEANPED */ sub_8823( iParam0->_fU0 );
    return;
}

/* TERMINATEINTERACTIVESEQUENCE */ void sub_9244(unknown uParam0, int iParam1)
{
    if ((I_SEQUENCE_IS_LOADED( uParam0 )) == 1)
    {
        I_SEQUENCE_TERMINATE( uParam0 );
    }
    if (iParam1 == 1)
    {
        while ((I_SEQUENCE_IS_LOADED( uParam0 )) == 1)
        {
            DISPLAYF( "[SP]### Waiting for interactive sequence to terminate: {} ###", 1, 1537, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_9453(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_617( "CCB", "P_STOP_SP_CHALLENGES", 0 );
    if (bParam0)
    {
         /* WRITESCRIPTLOG */ sub_617( "CCB", "Stopping the Stadium_Stores context...", 0 );
        END_CONTEXT( "Stadium_Stores" );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_617( "CCB", "Stopping the Stadium_To_Stands context...", 0 );
        END_CONTEXT( "Stadium_To_Stands" );
    }
    return;
}

/* P_LOAD_AREA */ void sub_9743(unknown uParam0)
{
    vector vVar3;
    unknown uVar6;
    int iVar7;
    string sVar8;
    unknown uVar9;

     /* MAL_WRITESCRIPTLOG */ sub_9781( "P_LOAD_AREA" );
    vVar3 = {g_U2138[uParam0]};
    uVar6 = g_U2256[uParam0];
    iVar7 = -1;
    switch (uParam0)
    {
        case 2:
        case 21:
        iVar7 = GET_HASH_KEY( ref g_U2460 );
        sVar8 = "Int_Bsmt_01";
        break;
        case 3:
        case 22:
        iVar7 = GET_HASH_KEY( "Room_Hallway_01" );
        sVar8 = "Int_Bsmt_02";
        break;
        case 4:
        case 23:
        iVar7 = GET_HASH_KEY( "Room_Staircase_02" );
        sVar8 = "Int_Bsmt_03";
        break;
        case 5:
        case 24:
        iVar7 = GET_HASH_KEY( ref g_U2484 );
        sVar8 = "int_store_00";
        break;
        case 9:
        case 27:
        iVar7 = GET_HASH_KEY( ref g_U2548 );
        sVar8 = "int_Trophy_01";
        break;
        case 10:
        vVar3 = {-97.16455000, 22.49700000, 26.58807000};
        SET_PED_COORDS(  /* PLAYER_PED_ID */ sub_3312(), -2.36477500, 2.76315900, 1.17283500, 1 );
        SET_PED_HEADING(  /* PLAYER_PED_ID */ sub_3312(), uVar6 );
        LOAD_SCENE( -2.36477500, 2.76315900, 1.17283500 );
        break;
    }
    if (iVar7 == -1)
    {
        LOAD_SCENE( vVar3 );
    }
    else
    {
        uVar9 = GET_INTERIOR_FROM_NAME( sVar8, 0 );
        SET_INTERIOR_ACTIVE( uVar9, 1, 0 );
        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar9, iVar7 );
    }
    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )) == 0)
    {
        SET_PED_COORDS(  /* PLAYER_PED_ID */ sub_3312(), vVar3, 1 );
        SET_PED_HEADING(  /* PLAYER_PED_ID */ sub_3312(), uVar6 );
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_3312(), 0 );
    }
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2296[uParam0], 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2296[uParam0], 1065353216, 0 );
    return;
}

/* MAL_WRITESCRIPTLOG */ void sub_9781(unknown uParam0)
{
    unknown uVar3;

    uVar3 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar3, 1537, "MSWW", 1537, uParam0, 1537, "###" );
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_10612(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_617( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_10831( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_11995( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_12309( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12788( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_12309( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12788( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_12309( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12788( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_13104( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12788( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_13104( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_12788( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_13676( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_13878( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_3312(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_617( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_10831(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_10893( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_10893(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_11995(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_12309(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_12713( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_12713(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_12788(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_13104(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_12713( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_13676(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_13878(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_10893( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_13976( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_13976(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_15294()
{
    int iVar2;

    iVar2 = l_U127;
    switch (l_U127)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_617( "SP", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_15516();
         /* P_SET_STATIC_DATA */ sub_16004();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        ACTION_TREE_FORCE_UNLOAD( "NPC\AMED.act" );
        l_U127 = 2;
         /* WRITESCRIPTLOG */ sub_617( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_617( "SP", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_STORE_PERSISTENT_ASSETS */ sub_18728();
         /* P_REQUEST_STORE_NONPERSISTENT_ASSETS */ sub_29066();
        l_U127 = 3;
         /* WRITESCRIPTLOG */ sub_617( "SP", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_34164( ref g_U2074 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_33750( ref g_U1263 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_33359( ref g_U1354 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_32957( ref g_U1214 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_32560( ref g_U1069 ))))))
        {
            if ((NOT l_U77._fU0) AND (g_U854 == 5))
            {
                l_U127 = 4;
                 /* WRITESCRIPTLOG */ sub_617( "SP", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U127 = 6;
                 /* WRITESCRIPTLOG */ sub_617( "SP", "eCheckpointState = CP_STORE_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_617( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        l_U129 = 0;
        g_U3875 = 1;
        FREEZE_TIME_OF_DAY( 21, 0 );
        SET_WEATHER_TYPE_NOW_PERSIST( "SUNNY" );
        if (( /* HAS_SAVEFILE_LOADED */ sub_34799( ref l_U77 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_13104(  /* PLAYER_PED_ID */ sub_3312(), 68019059, 50, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_12309(  /* PLAYER_PED_ID */ sub_3312(), 1194438308, 0, 50, 0 );
            l_U127 = 5;
             /* WRITESCRIPTLOG */ sub_617( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U127 = 6;
             /* WRITESCRIPTLOG */ sub_617( "SP", "eCheckpointState = CP_STORE_PRE_CREATE_ASSETS", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_3312(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 0, 0 ) )))
            {
                l_U127 = 6;
                 /* WRITESCRIPTLOG */ sub_617( "GA", "eCheckpointState = CP_STORE_PRE_CREATE_ASSETS", 0 );
            }
        }
        break;
        case 6:
        if (l_U128)
        {
             /* CLEANPED */ sub_8823( g_U4007 );
             /* MAL_ESA_CLEAN */ sub_8912( ref g_U4008 );
             /* MAL_ESA_CLEAN */ sub_8912( ref g_U4141 );
             /* CLEANPED */ sub_8823( g_U4186 );
             /* CLEANPEDARRAY */ sub_9053( ref g_U4187 );
             /* P_STORES_VCPF_PRE */ sub_35388();
            l_U1312 = 1;
        }
        if ( /* MAL_ENEMYSTRUCTARRAYCREATE */ sub_36049( ref g_U4008, "RestaurantVCPF", ref l_U461, 0.00000000, 1, 0 ))
        {
            if ( /* MAL_ENEMYSTRUCTARRAYCREATE */ sub_36049( ref g_U4141, "RestaurantReinforcements", ref l_U467, 0.00000000, 1, 0 ))
            {
                if ( /* F_CREATE_STORES_CS */ sub_40424())
                {
                    if ( /* F_EDISON_SPAWN */ sub_41372())
                    {
                        if ( /* F_CREATE_RESTAURANT_CRACHA_DEAD_BODY */ sub_42453())
                        {
                            if ( /* F_CREATE_BATHROOM_DEAD_GUY */ sub_42995())
                            {
                                 /* P_STORES_VCPF_POST */ sub_44152();
                                 /* P_EDISON_SETUP_STORES */ sub_46081();
                                 /* P_CREATE_STORE_PLACEMENTS */ sub_46199();
                                 /* P_CREATE_DEAD_BODIES_ON_FIELD */ sub_47432();
                                 /* P_CREATE_STADIUM_OBJECTS */ sub_48405();
                                l_U127 = 7;
                                 /* WRITESCRIPTLOG */ sub_617( "GA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
                            }
                        }
                    }
                }
            }
        }
        break;
        case 7:
        if (g_U3875)
        {
            l_U127 = 8;
             /* WRITESCRIPTLOG */ sub_617( "GA", "eCheckpointState = CP_HANDLE_03_02A_STAD", 0 );
        }
        break;
        case 8:
        if (l_U128)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_60207( ref l_U132, "03_02A_STAD_concat", 48776, 52585, 54241, 55920, 55980, 59599, 250, 0 );
            l_U132._fU100 = g_U853;
            if (l_U129)
            {
                l_U132._fU4 = 2;
            }
            else
            {
                AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_5_6", "", 0, 5000, -1, -1082130432, 0 );
                l_U132._fU4 = 7;
            }
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_60832( ref l_U132 ))
        {
            if (NOT l_U77._fU0)
            {
                g_U855 = 5;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_63118( ref l_U77, g_U855,  /* PLAYER_PED_ID */ sub_3312(), g_U2138[g_U855], g_U2256[g_U855], g_U2296[g_U855], g_U2336[g_U855], 1 );
            }
            l_U127 = 9;
             /* WRITESCRIPTLOG */ sub_617( "GA", "eCheckpointState = CP_RESTAURANT_FIGHT", 0 );
        }
        break;
        case 9:
         /* P_HANDLE_STATE_RESTAURANT_FIGHT */ sub_67700( l_U128 );
        break;
        case 10:
         /* P_HANDLE_STATE_PASSOS_GETS_SHOT_NIS */ sub_73044( l_U128 );
        break;
        case 11:
         /* P_HANDLE_STATE_PASSOS_WALKING_NIS */ sub_76687( l_U128 );
        break;
        case 12:
         /* P_HANDLE_STATE_JOIN_PASSOS_IN_RESTAURANT */ sub_78294( l_U128 );
        break;
        case 13:
        if ((g_U855 == 6) || (NOT HAS_CUTSCENE_FINISHED()))
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U127 = 0;
             /* WRITESCRIPTLOG */ sub_617( "SP", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U127 != iVar2)
    {
        l_U128 = 1;
    }
    else
    {
        l_U128 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_15516()
{
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_INITIALIZE_SCRIPT_DATA start", 0 );
    l_U128 = 1;
     /* SETUP_SCRIPTED_SPEECH */ sub_15613( "SSTDAUD" );
     /* CREATETIMER */ sub_4297( ref l_U629, 5000, 1, 0 );
     /* CREATETIMER */ sub_4297( ref l_U638, 20000, 1, 0 );
    l_U482 = 0;
    l_U726 = 0;
     /* CREATETIMER */ sub_4297( ref l_U661, 1000, 1, 0 );
     /* CREATETIMER */ sub_4297( ref l_U696, 50, 1, 0 );
    l_U1312 = 0;
    l_U1313 = 0;
     /* CREATETIMER */ sub_4297( ref l_U423, 2000, 1, 0 );
    l_U1381 = 0;
    l_U1382 = 0;
    l_U1385 = 0;
    l_U1386 = 0;
    l_U1383 = 0;
    l_U1384 = 0;
    l_U131 = 0;
    l_U1387 = 0;
    l_U1388 = 0;
    l_U1409 = 0;
    l_U1410 = 0;
    l_U1408 = 0;
    l_U1411 = 0;
    l_U1422 = 0;
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_INITIALIZE_SCRIPT_DATA end", 0 );
    return;
}

/* SETUP_SCRIPTED_SPEECH */ void sub_15613(unknown uParam0)
{
    StrCopy( ref g_U157._fU0, uParam0, 16 );
     /* CLEARPEDCONVERSATIONDATA */ sub_15657();
    return;
}

/* CLEARPEDCONVERSATIONDATA */ void sub_15657()
{
    int I;

    for ( I = 0; I <= 8; I++ )
    {
        g_U157._fU16[I]._fU0 = nil;
        g_U157._fU16[I]._fU4 = 0;
        g_U157._fU92[I] = 0;
    }
    return;
}

/* P_SET_STATIC_DATA */ void sub_16004()
{
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_SET_STATIC_DATA start", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16108( ref l_U1272[0], 91.79931000, 2.07550300, 9.65311000, 0.00000000, 2069722096, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16108( ref l_U1272[1], 91.79931000, 2.07550300, 9.65311000, 0.00000000, 957054562, 26, 6, 0, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16108( ref l_U1272[2], 91.79931000, 2.07550300, 9.65311000, 0.00000000, 1530933710, 26, 6, 0, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16108( ref l_U647, l_U670, 0.00000000, -587133859, 26, 6, 0, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U675, "TRIGGER_DEAD_VCPF", 90.33000000, 17.75000000, 8.67000000, 22.00000000, 15.14000000, 4.85000000, 0.00000000, 0.00000000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U359[0], "TRIGGER_IN_RESTAURANT", 89.67000000, 17.27000000, 8.67000000, 22.50000000, 21.10000000, 4.85000000, 0.00000000, 0.00000000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U359[1], "TRIGGER_ENTERED_BATHROOMS", 107.39000000, -8.07000000, 9.50000000, 3.05000000, 15.97000000, 2.63000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U359[2], "TRIGGER_BY_STAIRS", 101.26000000, -22.62000000, 9.50000000, 15.23000000, 14.36000000, 2.63000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERREGION */ sub_16785( ref l_U218, ref l_U359 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U432, "TRIGGER_RESTAURANT_HARD_FAIL", 89.67000000, 21.33000000, 8.67000000, 22.50000000, 21.10000000, 4.85000000, 0.00000000, 0.00000000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U868[0], "Amb Speech PETS A", 92.13000000, -21.38000000, 8.99000000, 7.32000000, 5.05000000, 4.19000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U868[1], "Amb Speech PETS B", 89.08000000, -17.41000000, 8.99000000, 1.59000000, 4.09000000, 4.19000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U868[2], "Amb Speech PETS C", 94.60000000, -14.95000000, 8.99000000, 2.24000000, 4.09000000, 4.19000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U868[3], "Amb Speech PETS D", 85.17000000, -4.20000000, 8.99000000, 4.60000000, 12.84000000, 4.19000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U868[4], "Amb Speech PETS E", 88.12000000, -0.24000000, 8.99000000, 1.40000000, 2.97000000, 4.19000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U868[5], "Amb Speech PETS G", 95.00000000, 3.68000000, 8.99000000, 1.89000000, 4.49000000, 4.19000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERREGION */ sub_16785( ref l_U727, ref l_U868 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U995, "SPEECH BAR", 94.32000000, 25.12000000, 8.67000000, 4.91000000, 5.09000000, 4.85000000, 0.00000000, 0.00000000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U176, "TRIG_RESTAURANT_DIALOG_1", 90.76000000, 13.58000000, 8.90000000, 12.17000000, 14.78000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U197, "TRIG_RESTAURANT_DIALOG_2", 93.28000000, 24.26000000, 8.90000000, 7.00000000, 6.59000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_17968( ref l_U458[0], "TETHER_RESTAURANT_1", 92.29000000, 6.06000000, 8.42000000, 8.71000000, 17.61000000, 4.30000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_17968( ref l_U458[1], "TETHER_RESTAURANT_3", 86.94000000, -3.46000000, 8.42000000, 4.62000000, 18.67000000, 4.30000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U1157[0], "FoodCourt_Mono_A", 56.70000000, 73.37000000, 9.00000000, 9.04000000, 8.79000000, 3.96000000, 0.00000000, 0.00000000, -6.35000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U1157[1], "FoodCourt_Mono_B", 64.66000000, 72.10000000, 9.00000000, 8.69000000, 7.15000000, 3.96000000, 0.00000000, 0.00000000, -19.73000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U1157[2], "FoodCourt_Mono_C", 72.15000000, 69.26000000, 9.00000000, 8.78000000, 8.13000000, 3.96000000, 0.00000000, 0.00000000, -30.62000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U1157[3], "FoodCourt_Mono_D", 79.20000000, 64.96000000, 9.00000000, 8.78000000, 8.13000000, 3.96000000, 0.00000000, 0.00000000, -40.28000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16427( ref l_U1157[4], "FoodCourt_Mono_E", 85.89000000, 59.79000000, 9.00000000, 8.78000000, 8.13000000, 3.96000000, 0.00000000, 0.00000000, -44.56000000, 1 );
     /* P_CREATETRIGGERREGION */ sub_16785( ref l_U1016, ref l_U1157 );
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_SET_STATIC_DATA end", 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_16108(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_16427(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETRIGGERREGION */ void sub_16785(int iParam0, unknown uParam1)
{
    int iVar4;
    int I;

    iVar4 = (uParam1^);
    if (iVar4 > 6)
    {
         /* WRITESCRIPTLOG */ sub_617( "[SA]", "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
        SCRIPT_ASSERT( "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
    }
    for ( I = 0; I < iVar4; I++ )
    {
        iParam0->_fU0[I] = {(uParam1^)[I]};
    }
    iParam0->_fU508 = iVar4;
    iParam0->_fU548 = 0;
    iParam0->_fU552 = 0;
    iParam0->_fU556 = 0;
    iParam0->_fU560 = 0;
    return;
}

/* P_CREATETETHERBOX */ void sub_17968(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_REQUEST_STORE_PERSISTENT_ASSETS */ void sub_18728()
{
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_REQUEST_STORE_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_18835( ref l_U113, ref g_U1069 );
    if ((l_U129) AND (g_U854 < 5))
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_18908( g_U2378, ref g_U1069 );
    }
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_21789( ref l_U123, ref g_U1214 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "DAM_KO", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "LEVEL_S_STAD_CP_03", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "LEVEL_S_STAD_PU", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "DAM_DEAD", ref g_U1354 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_25818( "SCRIPT_MISSION\S_STAD_STORES_RADIO", ref g_U2074 );
     /* P_LOAD_PLGE_ANIM_DICTS */ sub_27714( 0, 0 );
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_REQUEST_STORE_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_18835(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_18908( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_18908(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_18975( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19233( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_18975(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19233( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19233( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19233( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20764( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19233( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_19233( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_19233(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19294( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_19294(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_20764(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_21789(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21863( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_21863(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_21917( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22178( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_21917(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22178( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22178( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22178( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20764( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22178( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_22178( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_22178(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19294( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_23825(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_23877( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_24129( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_23877(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_24129( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_24129( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_24129( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20764( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_24129( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_24129( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_24129(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19294( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_25818(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_25871( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26126( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_25871(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26126( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26126( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26126( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_20764( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26126( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_26126( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_26126(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19294( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_LOAD_PLGE_ANIM_DICTS */ void sub_27714(boolean bParam0, boolean bParam1)
{
    if (NOT bParam0)
    {
        if (NOT bParam1)
        {
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_RIFLE_CROUCH", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_PSTL_CROUCH", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_RIFLE_KNEE", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_PSTL_KNEE", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_PSTL_CORE", ref g_U1354 );
             /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_PSTL_COVER", ref g_U1354 );
        }
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_RIFLE_CORE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_RIFLE_CORE_RELOAD", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_PSTL_CORE_RELOAD", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_RIFLE_HANDSIG", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_PSTL_HANDSIG", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_RIFLE_ACTIONS", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_PSTL_ACTIONS", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_RIFLE_COVER", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_RIFLE_REACT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_PSTL_REACT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_RIFLE_COVER_EXIT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_PSTL_COVER_EXIT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_23825( "PLGE_PSTL_FULLBODY", ref g_U1354 );
    }
    else
    {
         /* LOADANIMDICT */ sub_28345( "PLGE_RIFLE_CROUCH", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_PSTL_CROUCH", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_RIFLE_CORE", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_PSTL_CORE", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_RIFLE_CORE_RELOAD", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_PSTL_CORE_RELOAD", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_RIFLE_HANDSIG", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_PSTL_HANDSIG", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_RIFLE_ACTIONS", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_PSTL_ACTIONS", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_RIFLE_KNEE", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_PSTL_KNEE", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_RIFLE_COVER", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_PSTL_COVER", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_RIFLE_REACT", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_PSTL_REACT", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_RIFLE_COVER_EXIT", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_PSTL_COVER_EXIT", 0, 1 );
         /* LOADANIMDICT */ sub_28345( "PLGE_PSTL_FULLBODY", 0, 1 );
    }
    return;
}

/* LOADANIMDICT */ void sub_28345(unknown uParam0, unknown uParam1, int iParam2)
{
    REQUEST_ANIM_DICT( uParam0, uParam1 );
    "[doubled result, dropped if not asigned]";
    if (iParam2 == 1)
    {
        while ((HAS_ANIM_DICT_LOADED( uParam0, uParam1 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an animation dictionary to be loaded: {} ###", 1, 1537, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_REQUEST_STORE_NONPERSISTENT_ASSETS */ void sub_29066()
{
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_REQUEST_STORE_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_29180( -767085492, ref g_U1263 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_29180( -334595829, ref g_U1263 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_29180( 1262534908, ref g_U1263 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_29180( 1812693303, ref g_U1263 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_29180( 1154908660, ref g_U1263 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_29180( -1414847258, ref g_U1263 );
    if ((l_U129) AND (g_U854 < 5))
    {
         /* LOADSEAMLESSCUTSCENE */ sub_32085( "03_02a_stad_concat", 0 );
    }
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_REQUEST_STORE_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_29180(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_29241( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_29491( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_29241(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_29491( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_29491( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_29491( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_29491( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_20764( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_20764( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_29491( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_29491( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_29491(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_19294( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_32085(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_32560(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_32957(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_33359(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_33750(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_34164(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_34799(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_617( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_10612( uParam0,  /* PLAYER_PED_ID */ sub_3312() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_STORES_VCPF_PRE */ void sub_35388()
{
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_RESTAURANT_VCPF_Pre start", 0 );
     /* STAD_ENEMYSTRUCTFILL */ sub_35519( ref g_U4008[0], 93.37000000, -2.25000000, 9.70000000, 180.00000000, g_U2484, -1328310086, g_U2383, 5, 40.00000000, 0, 68019059, 0 );
     /* STAD_ENEMYSTRUCTFILL */ sub_35519( ref g_U4008[1], 95.58000000, 6.60000000, 9.70000000, 160.00000000, g_U2492, 841173843, g_U2383, 7, 40.00000000, 0, 1478009203, 0 );
     /* STAD_ENEMYSTRUCTFILL */ sub_35519( ref g_U4008[2], 90.85000000, 6.58000000, 9.70000000, 200.00000000, g_U2492, 402676984, g_U2383, 6, 40.00000000, 0, 1478009203, 0 );
     /* STAD_ENEMYSTRUCTFILL */ sub_35519( ref g_U4141[0], 97.43761000, -0.24330100, 9.60270800, 90.00000000, g_U2476, -1885862289, g_U2383, 3, 6, 0, 434544317, 0 );
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_RESTAURANT_VCPF_Pre end", 0 );
    return;
}

/* STAD_ENEMYSTRUCTFILL */ void sub_35519(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19)
{
     /* MAL_ENEMYSTRUCTFILL */ sub_35595( uParam0, uParam1, uParam4, uParam18, 68019059, 2, g_U3928, uParam15, uParam16, uParam14, uParam19, uParam17, uParam13, uParam5 );
    return;
}

/* MAL_ENEMYSTRUCTFILL */ void sub_35595(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29)
{
    iParam0->_fU56 = {uParam1};
    iParam0->_fU68 = uParam4;
    iParam0->_fU72 = uParam5;
    iParam0->_fU76 = uParam6;
    iParam0->_fU80 = uParam7;
    iParam0->_fU84 = {uParam8};
    iParam0->_fU116 = uParam16;
    iParam0->_fU120 = uParam17;
    iParam0->_fU124 = uParam18;
    iParam0->_fU128 = uParam19;
    iParam0->_fU132 = uParam20;
    iParam0->_fU136 = uParam21;
    iParam0->_fU140 = {uParam22};
    return;
}

/* MAL_ENEMYSTRUCTARRAYCREATE */ int sub_36049(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4, boolean bParam5)
{
    int I;

    PRINTSTRING( "[MSWW] ### MAL_EnemyStructArrayCreate starting: " );
     /* WRITE_STRING */ sub_12713( uParam1 );
    if (NOT bParam4)
    {
         /* P_SETUP_AI_GROUP */ sub_36166( uParam2, uParam3, 1 );
        for ( I = 0; I < (uParam0^); I++ )
        {
             /* MAL_ENEMYSTRUCTCREATE */ sub_36576( ref (uParam0^)[I] );
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_39497( (uParam0^)[I]._fU0, uParam2 );
        }
         /* MAL_ESA_GIVEDEBUGNAMES */ sub_39895( uParam0, uParam1 );
    }
    else if ((uParam0^)[0]._fU172 == 0)
    {
         /* P_SETUP_AI_GROUP */ sub_36166( uParam2, uParam3, 1 );
    }
    if ((uParam0^)[0]._fU172 < (uParam0^))
    {
         /* MAL_ENEMYSTRUCTCREATE */ sub_36576( ref (uParam0^)[(uParam0^)[0]._fU172] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_39497( (uParam0^)[(uParam0^)[0]._fU172]._fU0, uParam2 );
        (uParam0^)[0]._fU172++;
    }
    else
    {
         /* MAL_ESA_GIVEDEBUGNAMES */ sub_39895( uParam0, uParam1 );
        return 1;
    }
    if (bParam5)
    {
         /* MAL_ESA_PROCESSINGFREEZE */ sub_40186( uParam0, 1, 0, -1 );
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_36166(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* MAL_ENEMYSTRUCTCREATE */ void sub_36576(int iParam0)
{
    unknown uVar3;

     /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_EnemyStructCreate starting" );
     /* MAL_CREATEPEDADV */ sub_36715( iParam0 + 0, iParam0 + 4, iParam0->_fU56, iParam0->_fU68, iParam0->_fU72, iParam0->_fU80, iParam0->_fU84, iParam0->_fU116, iParam0->_fU120, iParam0->_fU124, 1 );
    if (NOT (ARE_STRINGS_EQUAL( iParam0 + 140, ref g_U652 )))
    {
        PRINTSTRING( "[MSWW] ### MAL_EnemyStructCreate adding ped to room: " );
         /* WRITE_STRING */ sub_12713( iParam0 + 140 );
         /* MAL_SETROOMFORPED */ sub_38848( iParam0 + 0, iParam0 + 140 );
    }
    if (iParam0->_fU128)
    {
         /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_EnemyStructCreate giving ped backup weapon" );
         /* MAL_GIVEPEDWEAPONINHOLSTER */ sub_38997( iParam0->_fU0, iParam0->_fU76, 25000, 1, 0 );
    }
    if (iParam0->_fU132)
    {
        uVar3 = GET_WEAPON_FROM_HAND( iParam0->_fU0, 0, 0 );
         /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_39223( ref uVar3, 14, 1 );
    }
    if (iParam0->_fU136 != 0)
    {
         /* MAL_GIVEPEDPERSISTANTVARIATIONENUM */ sub_39386( iParam0 + 0, iParam0->_fU136 );
    }
    return iParam0->_fU0;
}

/* MAL_CREATEPEDADV */ void sub_36715(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19)
{
     /* P_CREATEPEDSTRUCT */ sub_36759( uParam1, uParam2, uParam5, uParam18, 7, 3, 2, 0, 0 );
    (uParam0^) =  /* MAL_CREATEPED */ sub_36881( uParam0, uParam1, 1, 1, uParam19 );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( (uParam0^), 1 );
    }
     /* MAL_GIVEPEDWEAPON */ sub_38120( (uParam0^), uParam6, 25000, 0, 0 );
     /* MAL_SETTEMPLATEANDRANGES */ sub_38325( uParam0, ref uParam8, uParam16, uParam17, 1 );
     /* MAL_SETPEDCOMBATMOVEMENT */ sub_38656( uParam0, uParam7 );
    return (uParam0^);
}

/* P_CREATEPEDSTRUCT */ void sub_36759(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU12 = uParam4;
    iParam0->_fU16 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU48 = uParam10;
    return;
}

/* MAL_CREATEPED */ void sub_36881(unknown uParam0, unknown uParam1, boolean bParam2, boolean bParam3, unknown uParam4)
{
     /* CLEANPED */ sub_8823( (uParam0^) );
    (uParam0^) =  /* CREATEPED */ sub_36917( uParam1 );
    if (bParam3)
    {
        while (NOT (DOES_PED_EXIST( (uParam0^) )))
        {
            WAIT( 0 );
             /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_CreatePed waiting for ped to exist" );
        }
    }
    SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( (uParam0^), uParam4 );
     /* MAL_SETPEDCOMBATATTRIBUTES */ sub_37968( uParam0, 32, 0 );
    SET_PED_IGNORE_LOS_CHECKS( (uParam0^), NOT bParam2 );
    SET_PED_EMOTION_STATE( (uParam0^), 1 );
    return (uParam0^);
}

/* CREATEPED */ void sub_36917(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_37099( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_37648( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_37749( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_37099(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_12713( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_37648(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_37749(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* MAL_SETPEDCOMBATATTRIBUTES */ void sub_37968(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_COMBAT_ATTRIBUTES( (uParam0^), uParam1, uParam2 );
    }
    return;
}

/* MAL_GIVEPEDWEAPON */ void sub_38120(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
    unknown Result;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (bParam4)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                 /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_GivePedWeapon waiting for weapon to exist" );
            }
        }
        return Result;
    }
    return nil;
}

/* MAL_SETTEMPLATEANDRANGES */ void sub_38325(unknown uParam0, unknown uParam1, float fParam2, float fParam3, boolean bParam4)
{
     /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_SetTemplateAndRanges" );
    PRINTSTRING( "[MSWW]### Template Name: " );
     /* WRITE_STRING */ sub_12713( uParam1 );
    PRINTSTRING( "[MSWW]### Min Range: " );
     /* WRITE_FLOAT */ sub_38469( fParam2 );
    PRINTSTRING( "[MSWW]### Max Range: " );
     /* WRITE_FLOAT */ sub_38469( fParam3 );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    if (NOT bParam4)
    {
         /* MAL_SETPEDCOMBATATTRIBUTES */ sub_37968( uParam0, 1, 0 );
    }
    return;
}

/* WRITE_FLOAT */ void sub_38469(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* MAL_SETPEDCOMBATMOVEMENT */ void sub_38656(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_SETROOMFORPED */ void sub_38848(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_ROOM_FOR_PED_BY_NAME( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_GIVEPEDWEAPONINHOLSTER */ void sub_38997(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
    int Result;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam2, uParam3 );
        if (bParam4)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam3 );
            while (Result == 0)
            {
                WAIT( 0 );
                Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam3 );
                 /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_GivePedWeapon waiting for weapon to exist" );
            }
        }
        return Result;
    }
    return nil;
}

/* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ void sub_39223(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (GET_DOES_WEAPON_EXIST( (uParam0^) ))
    {
        if (bParam2)
        {
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
        else
        {
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
    }
    return;
}

/* MAL_GIVEPEDPERSISTANTVARIATIONENUM */ void sub_39386(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PERSISTENT_PED_VARIATION_ENUM( (uParam0^), uParam1 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_39497(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_12713( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_36166( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_36166( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* MAL_ESA_GIVEDEBUGNAMES */ void sub_39895(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I]._fU0 )))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I]._fU0, ref cVar5 );
        }
    }
    return;
}

/* MAL_ESA_PROCESSINGFREEZE */ void sub_40186(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_PROCESSINGFREEZE */ sub_40263( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_PROCESSINGFREEZE */ void sub_40263(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_FREEZE_PROCESSING( iParam0->_fU0, uParam1 );
    }
    return;
}

/* F_CREATE_STORES_CS */ int sub_40424()
{
    char[64] cVar2;

    switch (l_U1312)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_617( "AT", "e_ST_SpawnCS = ENTITY_STATE_INIT", 0 );
        if (g_U855 < 5)
        {
            l_U1313 = 0;
        }
        else
        {
            l_U1313 = 1;
        }
        l_U1312 = 2;
         /* WRITESCRIPTLOG */ sub_617( "AT", "e_ST_SpawnCS = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating piStores_Cutscene_CS[", 64 );
        ConcatString(ref cVar2, l_U1313, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        g_U4187[l_U1313] =  /* CREATEPED */ sub_36917( ref l_U1272[l_U1313] );
        if (NOT (IS_PED_DEAD( g_U4187[l_U1313] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4187[l_U1313], 1 );
            SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U4187[l_U1313], 1 );
            SET_PED_AIM_LOCKONABLE( g_U4187[l_U1313], 0 );
            SET_PED_CAN_BE_TARGETTED( g_U4187[l_U1313], 0 );
            SET_PED_AS_ONE_SHOT_KILL( g_U4187[l_U1313], 1 );
            STOP_PED_SPEAKING( g_U4187[l_U1313], 1 );
            SET_PED_INVINCIBLE( g_U4187[l_U1313], 1 );
            FREEZE_PED_POSITION( g_U4187[l_U1313], 1 );
            if (l_U1313 != 1)
            {
                SET_ROOM_FOR_PED_BY_NAME( g_U4187[l_U1313], ref g_U2484 );
            }
        }
        l_U1313++;
        if (l_U1313 >= g_U4187)
        {
            l_U1312 = 3;
             /* WRITESCRIPTLOG */ sub_617( "AT", "e_ST_SpawnCS = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_41074( ref g_U4187, "piStores_Cutscene_CS" );
        if (g_U855 < 5)
        {
             /* F_GIVEPEDWEAPON */ sub_13104( g_U4187[0], 68019059, 25000, 0, 1 );
             /* F_GIVEPEDWEAPON */ sub_13104( g_U4187[1], 434544317, 25000, 0, 1 );
             /* F_GIVEPEDWEAPON */ sub_13104( g_U4187[2], 1478009203, 25000, 0, 1 );
        }
        l_U1312 = 4;
         /* WRITESCRIPTLOG */ sub_617( "AT", "e_ST_SpawnCS = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_41074(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* F_EDISON_SPAWN */ int sub_41372()
{
    if (DOES_PED_EXIST( g_U4007 ))
    {
         /* WRITESCRIPTLOG */ sub_617( "GA", "Passos exists.", 0 );
        return 1;
        break;
    }
     /* WRITESCRIPTLOG */ sub_617( "GA", "Creating Passos", 0 );
     /* P_CREATEPEDSTRUCT */ sub_36759( ref l_U159, l_U172, l_U175, g_U2376, 26, 6, 0, 0, 0 );
    g_U4007 =  /* MAL_CREATEPED */ sub_36881( ref g_U4007, ref l_U159, 1, 0, 0 );
     /* MAL_GIVEPEDPERSISTANTVARIATION */ sub_41553( ref g_U4007, "Pass_Stad_Hat" );
    if ((NOT (IS_PED_DEAD( g_U4007 ))) AND (DOES_PED_EXIST( g_U4007 )))
    {
        SET_PED_HEALTH( g_U4007, 400, 0 );
        SET_PED_GORE_AS_ALLY( g_U4007 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4007, 1 );
        SET_PED_CONSUMING_AMMO( g_U4007, 0 );
    }
     /* MAL_STANDSTILL */ sub_41780( ref g_U4007 );
     /* MAL_WRITESCRIPTLOG */ sub_9781( "Giving Edison a gun" );
     /* F_GIVEPEDWEAPON */ sub_13104( g_U4007, 68019059, 25000, 0, 0 );
     /* MAL_SETPEDRELATIONSHIP */ sub_41951( ref g_U4007, 2, 3 );
     /* MAL_SETCANTRIGGERBULLETCAM */ sub_42030( g_U4007, 1 );
    SET_PED_CAN_INITIATE_BULLET_CAM( g_U4007, 1 );
    SET_PED_VALIDATE_BULLET_CAM_HIT( g_U4007, 0 );
    SET_PED_ONLY_DAMAGED_BY_PLAYER( g_U4007, 1 );
    SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U4007, 1 );
    SET_AI_SHOULD_ALWAYS_MISS_PED( g_U4007, 1 );
    SET_PED_CAN_PUSH_PLAYER( g_U4007, 1 );
    SET_PED_RESIST_TO_OBJECT_COLLISION( g_U4007, 1 );
    "[doubled result, dropped if not asigned]";
    "[doubled result, dropped if not asigned]";
    SET_CAN_AI_KICK_THROUGH_CORPSES( g_U4007, 1 );
    "[doubled result, dropped if not asigned]";
    "[doubled result, dropped if not asigned]";
    SET_PED_AS_ONE_SHOT_KILL( g_U4007, 1 );
    SET_PED_NAME_DEBUG( g_U4007, "STORES_EDISON!" );
    return 0;
}

/* MAL_GIVEPEDPERSISTANTVARIATION */ void sub_41553(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        PRINTSTRING( "[MSWW] ### Assigning scene ped variation: " );
         /* WRITE_STRING */ sub_12713( uParam1 );
        SET_PERSISTENT_PED_VARIATION( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_STANDSTILL */ void sub_41780(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_STAND_STILL( 0, -1 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    return;
}

/* MAL_SETPEDRELATIONSHIP */ void sub_41951(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_RELATIONSHIP( (uParam0^), uParam1, uParam2 );
    }
    return;
}

/* MAL_SETCANTRIGGERBULLETCAM */ int sub_42030(unknown uParam0, boolean bParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        if (bParam1)
        {
            if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( uParam0 )))
            {
                 /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_SetCanTriggerBulletCam: Ped is not able to trigger BC, adding" );
                SET_PED_CAN_TRIGGER_BULLET_CAM( uParam0, bParam1 );
                return 1;
            }
        }
        else if (GET_PED_CAN_TRIGGER_BULLET_CAM( uParam0 ))
        {
             /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_SetCanTriggerBulletCam turning off BC" );
            SET_PED_CAN_TRIGGER_BULLET_CAM( uParam0, bParam1 );
            return 1;
        }
    }
    return 0;
}

/* F_CREATE_RESTAURANT_CRACHA_DEAD_BODY */ int sub_42453()
{
    if (DOES_PED_EXIST( g_U4186 ))
    {
         /* WRITESCRIPTLOG */ sub_617( "GA", "Dead CP exists.", 0 );
        return 1;
        break;
    }
     /* WRITESCRIPTLOG */ sub_617( "GA", "Creating Dead CP.", 0 );
    g_U4186 =  /* CREATEPED */ sub_36917( ref l_U647 );
    if (NOT (IS_PED_DEAD( g_U4186 )))
    {
         /* TELEPORTPED */ sub_42636( g_U4186, l_U670, l_U673 );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U4186, 1 );
        SET_ROOM_FOR_PED_BY_NAME( g_U4186, ref g_U2492 );
        FREEZE_PED_POSITION( g_U4186, 1 );
        SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U4186, 1 );
        SET_PED_AS_ONE_SHOT_KILL( g_U4186, 1 );
        STOP_PED_SPEAKING( g_U4186, 1 );
        SET_PED_INVINCIBLE( g_U4186, 1 );
        SET_PED_CAN_BE_TARGETTED( g_U4186, 0 );
        SET_FREEZE_PED_AIM( g_U4186, 1 );
        SET_PED_AIM_LOCKONABLE( g_U4186, 0 );
        SET_PED_NAME_DEBUG( g_U4186, "pi_DeadCPRestaurant" );
    }
     /* MAL_REGISTERPEDWITHISEQ */ sub_42895( g_U4186, 1812693303, "DeadVCPF" );
    ISEQ_START( 1812693303 );
    return 0;
}

/* TELEPORTPED */ void sub_42636(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* MAL_REGISTERPEDWITHISEQ */ void sub_42895(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        ISEQ_REGISTER_ENTITY( uParam1, uParam2, uParam0, 0 );
    }
    return;
}

/* F_CREATE_BATHROOM_DEAD_GUY */ int sub_42995()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;

    if (DOES_PED_EXIST( l_U674 ))
    {
         /* WRITESCRIPTLOG */ sub_617( "GA", "Dead washroom CS exists.", 0 );
        return 1;
        break;
    }
     /* WRITESCRIPTLOG */ sub_617( "GA", "Creating Dead Washroom CS", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16108( ref uVar2, 115.03250000, -3.42266600, 9.60178200, 0, -1072749639, 7, 3, 2, 0, 0 );
    l_U674 =  /* MAL_CREATEPED */ sub_36881( ref g_U4411, ref uVar2, 1, 0, 0 );
     /* P_CREATE_DEAD_BODY */ sub_43195( l_U674, 0 );
    return 0;
}

/* P_CREATE_DEAD_BODY */ void sub_43195(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
         /* WRITE_STRING */ sub_12713( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

/* P_STORES_VCPF_POST */ void sub_44152()
{
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_RESTAURANT_VCPF_Post start", 0 );
     /* MAL_ESA_ALERTNESSANDEMOTIONSTATE */ sub_44231( ref g_U4008, 3, 2 );
     /* MAL_ESA_SETLOCKEDANDREGISTEREDONPLAYER */ sub_44591( ref g_U4008, 0, -1 );
     /* MAL_ESA_SETPEDARRAYRELATIONSHIP */ sub_44884( ref g_U4008, 2, 6 );
     /* MAL_ESA_CANINITIATEBULLETCAM */ sub_45058( ref g_U4008, 1 );
     /* MAL_ESA_SETFLASHLIGHTDATA */ sub_45247( ref g_U4008, "Flashlight_Stadium" );
     /* MAL_ESA_GIVETETHERARRAY */ sub_45435( ref g_U4008, ref l_U458, 1 );
     /* MAL_ESA_ALERTNESSANDEMOTIONSTATE */ sub_44231( ref g_U4141, 3, 2 );
     /* MAL_ESA_SETLOCKEDANDREGISTEREDONPLAYER */ sub_44591( ref g_U4141, 0, -1 );
     /* MAL_ESA_VISIBLE */ sub_45771( ref g_U4141, 0, 0, -1 );
     /* MAL_ESA_SETFLASHLIGHTDATA */ sub_45247( ref g_U4141, "Flashlight_Stadium" );
     /* MAL_ESA_GIVETETHERARRAY */ sub_45435( ref g_U4141, ref l_U458, 1 );
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_RESTAURANT_VCPF_Post end", 0 );
    return;
}

/* MAL_ESA_ALERTNESSANDEMOTIONSTATE */ void sub_44231(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_ES_ALERTNESSANDEMOTIONSTATE */ sub_44302( ref (uParam0^)[I], uParam1, uParam2 );
    }
    return;
}

/* MAL_ES_ALERTNESSANDEMOTIONSTATE */ void sub_44302(int iParam0, unknown uParam1, unknown uParam2)
{
     /* MAL_SETPEDALERTNESSANDEMOTIONSTATE */ sub_44354( iParam0 + 0, uParam1, uParam2 );
    return;
}

/* MAL_SETPEDALERTNESSANDEMOTIONSTATE */ void sub_44354(unknown uParam0, unknown uParam1, unknown uParam2)
{
     /* MAL_SETPEDALERTNESS */ sub_44405( uParam0, uParam1 );
     /* MAL_SETPEDEMOTIONSTATION */ sub_44477( uParam0, uParam2 );
    return;
}

/* MAL_SETPEDALERTNESS */ void sub_44405(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_ALERTNESS( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_SETPEDEMOTIONSTATION */ void sub_44477(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_EMOTION_STATE( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_ESA_SETLOCKEDANDREGISTEREDONPLAYER */ void sub_44591(unknown uParam0, unknown uParam1, int iParam2)
{
    int I;

    if (iParam2 == -1)
    {
        iParam2 = (uParam0^) - 1;
    }
    for ( I = uParam1; I <= iParam2; I++ )
    {
         /* MAL_REGISTERTARGET */ sub_44687( ref (uParam0^)[I]._fU0,  /* PLAYER_PED_ID */ sub_3312() );
         /* MAL_SETLOCKEDTARGET */ sub_44780( ref (uParam0^)[I]._fU0,  /* PLAYER_PED_ID */ sub_3312() );
    }
    return;
}

/* MAL_REGISTERTARGET */ void sub_44687(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        REGISTER_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_SETLOCKEDTARGET */ void sub_44780(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        SET_LOCKED_TARGET( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_ESA_SETPEDARRAYRELATIONSHIP */ void sub_44884(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_ES_SETPEDRELATIONSHIP */ sub_44954( ref (uParam0^)[I], uParam1, uParam2 );
    }
    return;
}

/* MAL_ES_SETPEDRELATIONSHIP */ void sub_44954(int iParam0, unknown uParam1, unknown uParam2)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_RELATIONSHIP( iParam0->_fU0, uParam1, uParam2 );
    }
    return;
}

/* MAL_ESA_CANINITIATEBULLETCAM */ void sub_45058(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_ES_CANINITIATEBULLETCAM */ sub_45123( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_CANINITIATEBULLETCAM */ void sub_45123(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_CAN_INITIATE_BULLET_CAM( iParam0->_fU0, uParam1 );
    }
    return;
}

/* MAL_ESA_SETFLASHLIGHTDATA */ void sub_45247(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_ES_SETFLASHLIGHTDATA */ sub_45309( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_SETFLASHLIGHTDATA */ void sub_45309(int iParam0, unknown uParam1)
{
    if (iParam0->_fU132)
    {
        if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
        {
            SET_WEAPON_LIGHT_DATA_BY_NAME( GET_WEAPON_FROM_HAND( iParam0->_fU0, 0, 0 ), uParam1 );
        }
    }
    return;
}

/* MAL_ESA_GIVETETHERARRAY */ void sub_45435(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
         /* MAL_ESA_GIVETETHER */ sub_45500( uParam0, (uParam1^)[I], uParam2, 0, -1 );
    }
    return;
}

/* MAL_ESA_GIVETETHER */ void sub_45500(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    int I;

    if (iParam4 == -1)
    {
        iParam4 = (uParam0^) - 1;
    }
    for ( I = uParam3; I <= iParam4; I++ )
    {
         /* MAL_ES_GIVETETHER */ sub_45573( ref (uParam0^)[I], uParam1, uParam2 );
    }
    return;
}

/* MAL_ES_GIVETETHER */ void sub_45573(int iParam0, unknown uParam1, unknown uParam2)
{
     /* P_TETHERPED */ sub_45611( ref uParam1, iParam0->_fU0, uParam2 );
    return;
}

/* P_TETHERPED */ void sub_45611(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* MAL_ESA_VISIBLE */ void sub_45771(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_SETPEDVISIBLE */ sub_45839( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_SETPEDVISIBLE */ void sub_45839(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_VISIBLE( iParam0->_fU0, uParam1 );
    }
    else
    {
         /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_ES_SetPedVisible DOES NOT HAVE VALID PED!" );
    }
    return;
}

/* P_EDISON_SETUP_STORES */ void sub_46081()
{
     /* MAL_WRITESCRIPTLOG */ sub_9781( "P_EDISON_SETUP_STORES" );
    if (NOT (IS_PED_DEAD( g_U4007 )))
    {
        SET_ROOM_FOR_PED_BY_NAME( g_U4007, ref g_U2484 );
        SET_PED_CAN_INITIATE_BULLET_CAM( g_U4007, 1 );
    }
    return;
}

/* P_CREATE_STORE_PLACEMENTS */ void sub_46199()
{
     /* WRITESCRIPTLOG */ sub_617( "SP", "P_CREATE_STORE_PLACEMENTS", "###" );
     /* CLEANPLACEMENTARRAY */ sub_8677( ref l_U453 );
    l_U453[0] =  /* CREATEPLACEMENT */ sub_46325( -4072149, 93.31000000, -3.10000000, 9.86000000, g_U649, 1, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U453[0], ref g_U2484 );
    l_U453[2] =  /* CREATEPLACEMENT */ sub_46325( -4072149, 118.14000000, -6.39000000, 10.83000000, g_U649, 1, 0, 0, 1119092736 );
    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U453[2], "Room_Wash01" );
     /* P_CREATE_S_STA_GG_M8_01 */ sub_46599();
    return;
}

/* CREATEPLACEMENT */ void sub_46325(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_CREATE_S_STA_GG_M8_01 */ void sub_46599()
{
     /* WRITESCRIPTLOG */ sub_617( "CO", "Add_Placement_CL_S_STA_GG_M8_01", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_46745( ref g_U739, g_U847, 945952788, -942653930, 88.35000000, -16.91000000, 10.65000000, 1.50000000, 0.00000000, 1.50000000, "Int_store_00" );
     /* P_CREATECOLLECTIBLE */ sub_46902( ref g_U739 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_46745(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_617( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_46902(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_617( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_46985( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_617( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_617( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_46985( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_8732( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_46325( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_617( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_617( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_46985(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_CREATE_DEAD_BODIES_ON_FIELD */ void sub_47432()
{
     /* CLEANOBJECTARRAY */ sub_47478( ref g_U3941 );
    g_U3941[0] =  /* CREATEOBJECTNOOFFSET */ sub_47636( -1652775333, -4.14443000, 10.10766000, 0.14177000, 0, 0, 2.56000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[0] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[0], 1 );
    }
    g_U3941[1] =  /* CREATEOBJECTNOOFFSET */ sub_47636( 1816766229, 10.25816000, 2.27307000, 0.14177000, 0, 0, 1.88000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[1] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[1], 1 );
    }
    g_U3941[2] =  /* CREATEOBJECTNOOFFSET */ sub_47636( 1873472982, 13.91821000, 23.57691000, 0.14177000, 0, 0, 2.23000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[2] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[2], 1 );
    }
    g_U3941[3] =  /* CREATEOBJECTNOOFFSET */ sub_47636( -1993976541, 11.90281000, 13.09956000, 0.14177000, 0, 0, 2.95000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[3] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[3], 1 );
    }
    g_U3941[4] =  /* CREATEOBJECTNOOFFSET */ sub_47636( -1993976541, 10.14508000, 8.20610000, 0.14177000, 0, 0, 90.68000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[4] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[4], 1 );
    }
    g_U3941[5] =  /* CREATEOBJECTNOOFFSET */ sub_47636( -2096019114, 3.94087000, 16.99167000, 0.14177000, 0, 0, -1.16000000, 0, 0, 1 );
    if (DOES_OBJECT_EXIST( g_U3941[5] ))
    {
        FREEZE_OBJECT_POSITION( g_U3941[5], 1 );
    }
    return;
}

/* CLEANOBJECTARRAY */ void sub_47478(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANOBJECT */ sub_47530( (uParam0^)[I] );
    }
    return;
}

/* CLEANOBJECT */ void sub_47530(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_47636(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_37099( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_CREATE_STADIUM_OBJECTS */ void sub_48405()
{
     /* WRITE_STRING */ sub_12713( "[SP]### P_CREATE_STADIUM_OBJECTS ###" );
    if (DOES_OBJECT_EXIST( g_U3704 ))
    {
         /* CLEANOBJECT */ sub_47530( g_U3704 );
    }
    g_U3704 =  /* CREATEOBJECTNOOFFSET */ sub_47636( g_U2390, -10.46000000, 5.99000000, 0.70000000, 0.00000000, 0.00000000, 18.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U3704 ))
    {
        FREEZE_OBJECT_POSITION( g_U3704, 1 );
    }
    return;
}

/* F_0302A_PRESETUP */ int sub_48776()
{
     /* WRITESCRIPTLOG */ sub_617( "AT", "F_0302A_PRESETUP", 0 );
     /* P_CREATE_STORES_SNIPER */ sub_48835();
    AUDIO_MUSIC_REQUEST_ONESHOT( "STADIUM_ONESHOT_7", 0 );
    return 1;
}

/* P_CREATE_STORES_SNIPER */ void sub_48835()
{
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_CREATE_STORES_SNIPER start", 0 );
     /* MAL_WRITESCRIPTLOG */ sub_9781( "Creating stores sniper" );
     /* SB_CREATESNIPER */ sub_49034( ref l_U1322, 41.08343000, 61.76176000, 11.64524000, 76.52078000, 49.85817000, 11.80000000, 76.52078000, 49.65817000, 11.60000000, 86.96375000, 22.01132000, 9.60026400, g_U2383, 40.49274000, 61.63966000, 11.64522000, 214.59710000, 4000 );
     /* MAL_GIVEPEDPERSISTANTVARIATION */ sub_41553( ref l_U1322._fU0, "M3_CP_S1B_Avg" );
    SET_ROOM_FOR_PED_BY_NAME( l_U1322._fU0, "Room_Pressbooth" );
    l_U1322._fU164 = 0;
    l_U1322._fU204 = 1;
    l_U1322._fU216 = 1;
    SET_PED_PERFECT_ACCURACY_OVERRIDE( l_U1322._fU0, 0 );
     /* SB_HANDLESNIPERBEHAVIOUR */ sub_50446( ref l_U1322 );
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_CREATE_STORES_SNIPER end", 0 );
    return;
}

/* SB_CREATESNIPER */ void sub_49034(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18)
{
    iParam0->_fU56 = {uParam1};
    iParam0->_fU72 = {uParam4};
    iParam0->_fU84 = {uParam7};
    iParam0->_fU96 = {uParam10};
    iParam0->_fU68 = uParam17;
    iParam0->_fU160 = uParam13;
    iParam0->_fU108 = {uParam14};
    iParam0->_fU164 = 0;
    iParam0->_fU168 = 0;
    iParam0->_fU172 = 0;
    iParam0->_fU176 = 0;
    iParam0->_fU180 = 0;
    iParam0->_fU184 = 0;
    iParam0->_fU192 = uParam18;
    iParam0->_fU156 = 1500;
    iParam0->_fU196 = 3;
    iParam0->_fU200 = 0;
    iParam0->_fU204 = 0;
    iParam0->_fU208 = -256437761;
    iParam0->_fU212 = 0;
    iParam0->_fU216 = 0;
     /* P_CREATEPEDSTRUCT */ sub_36759( iParam0 + 4, iParam0->_fU56, iParam0->_fU68, iParam0->_fU160, 7, 3, 2, 0, 0 );
    iParam0->_fU0 =  /* MAL_CREATEPED */ sub_36881( iParam0 + 0, iParam0 + 4, 1, 1, 0 );
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( iParam0->_fU0, 1 );
        SET_PED_INVINCIBLE( iParam0->_fU0, 1 );
        SET_PED_GORE( iParam0->_fU0, 0 );
        FREEZE_PED_POSITION( iParam0->_fU0, 1 );
         /* MAL_TELEPORTPED */ sub_49407( iParam0->_fU0, iParam0->_fU56, iParam0->_fU68 );
        SET_PED_ALERTNESS( iParam0->_fU0, 3 );
        SET_PED_ACCURACY( iParam0->_fU0, 31186664 );
        SET_PED_CAN_BE_TARGETTED( iParam0->_fU0, 0 );
        SET_PED_AI_TEMPLATE( iParam0->_fU0, "AIT_EXPERT" );
        SET_PED_PERFECT_ACCURACY_OVERRIDE( iParam0->_fU0, 1 );
        SET_PED_CONSUMING_AMMO( iParam0->_fU0, 0 );
    }
    iParam0->_fU188 =  /* MAL_GIVEPEDWEAPON */ sub_38120( iParam0->_fU0, -2075384407, 25000, 0, 0 );
    ENABLE_WEAPON_ATTACHMENT( iParam0->_fU188, 13, 1 );
    TOGGLE_WEAPON_ATTACHMENT( iParam0->_fU188, 13, 1 );
    SET_LASER_SIGHT_ATTACHMENT( iParam0->_fU188, -12373631 );
     /* SETUPINTERACTIVESEQUENCE */ sub_49751( "S_STAD_SNIPBEH", "LEVEL_S_STAD_PU", "/LEVEL/S_STAD/s_stad_snipbeh.act", "/Global/SNIPER_BEHAVIOR", 1 );
     /* LOADANIMDICT */ sub_28345( "LEVEL_S_STAD_PU", 0, 1 );
    I_SEQUENCE_REGISTER_ENTITY( "S_STAD_SNIPBEH", "stad_sniper", iParam0->_fU0, 0 );
    I_SEQUENCE_START( "S_STAD_SNIPBEH" );
    while (NOT (I_SEQUENCE_QUERY_ENTITY_STATE( "S_STAD_SNIPBEH", "stad_sniper", 3 )))
    {
        WAIT( 0 );
    }
     /* MAL_TELEPORTPED */ sub_49407( iParam0->_fU0, iParam0->_fU56, iParam0->_fU68 );
    PED_ACTION_TREE_PLAY_NODE( iParam0->_fU0, "/Global/SNIPER_BEHAVIOR/SNIPER3SET_SEQ/STATES/DUCK_TO_PEEK" );
     /* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ sub_50198( iParam0 + 0 );
    return;
}

/* MAL_TELEPORTPED */ void sub_49407(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* SETUPINTERACTIVESEQUENCE */ void sub_49751(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    if ((I_SEQUENCE_IS_LOADED( uParam0 )) == 0)
    {
        I_SEQUENCE_SETUP( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            while ((I_SEQUENCE_QUERY_STATE( uParam0, 1 )) == 1)
            {
                DISPLAYF( "[SP]### Waiting for interactive sequence to be loaded: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ void sub_50198(unknown uParam0)
{
     /* MAL_SETLOCKEDANDREGISTEREDONPED */ sub_50252( uParam0,  /* PLAYER_PED_ID */ sub_3312() );
    return;
}

/* MAL_SETLOCKEDANDREGISTEREDONPED */ void sub_50252(unknown uParam0, unknown uParam1)
{
     /* MAL_REGISTERTARGET */ sub_44687( uParam0, uParam1 );
     /* MAL_SETLOCKEDTARGET */ sub_44780( uParam0, uParam1 );
    return;
}

/* SB_HANDLESNIPERBEHAVIOUR */ void sub_50446(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        switch (iParam0->_fU164)
        {
            case 0:
            if (NOT (( /* F_GET_SCRIPT_TASK_STATUS */ sub_50571( iParam0->_fU0, 37 )) == 1))
            {
                iParam0->_fU168 = 0;
                iParam0->_fU176 = 0;
                iParam0->_fU180 = 0;
                iParam0->_fU172 = 0;
                TASK_AIM_GUN_AT_COORD( iParam0->_fU0, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU0 ), -1, 1 );
            }
            break;
            case 1:
            if ((NOT iParam0->_fU216) AND ( /* SB_ISMAXAIMINGATSNIPER */ sub_50732( iParam0 )))
            {
                 /* SB_SNIPERDUCKS */ sub_50868( iParam0 );
            }
            else if (NOT iParam0->_fU168)
            {
                 /* SB_SNIPERFIRES */ sub_51098( iParam0 );
            }
            break;
            case 4:
            if ( /* ISTIMERDONE */ sub_4580( iParam0 + 120 ))
            {
                 /* WRITESCRIPTLOG */ sub_617( "MSWW", "SniperBehaviour: Duck timer done", "###" );
                if ( /* SB_ISMAXAIMINGATSNIPER */ sub_50732( iParam0 ))
                {
                     /* SB_SNIPERDUCKS */ sub_50868( iParam0 );
                }
                else if (iParam0->_fU212)
                {
                     /* SB_SNIPERSEARCHES */ sub_51481( iParam0 );
                }
                else
                {
                     /* SB_SNIPERFIRES */ sub_51098( iParam0 );
                }
            }
            break;
            case 2:
            if ((NOT iParam0->_fU216) AND ( /* SB_ISMAXAIMINGATSNIPER */ sub_50732( iParam0 )))
            {
                 /* SB_SNIPERDUCKS */ sub_50868( iParam0 );
            }
            else if (NOT iParam0->_fU176)
            {
                 /* SB_SNIPERSEARCHES */ sub_51481( iParam0 );
            }
            break;
            case 3:
            if ((NOT iParam0->_fU216) AND ( /* SB_ISMAXAIMINGATSNIPER */ sub_50732( iParam0 )))
            {
                 /* SB_SNIPERDUCKS */ sub_50868( iParam0 );
            }
            else if (NOT iParam0->_fU180)
            {
                 /* SB_SNIPERWARNS */ sub_51868( iParam0 );
            }
            else if (( /* F_GET_SEQUENCE_PROGRESS */ sub_52263( iParam0->_fU0 )) == 3)
            {
                 /* SB_SNIPERWARNS */ sub_51868( iParam0 );
            };;;
            break;
            case 5:
            if (NOT iParam0->_fU184)
            {
                PED_ACTION_TREE_PLAY_NODE( iParam0->_fU0, "/Global/SNIPER_BEHAVIOR/SNIPER3SET_SEQ/STATES/DUCK" );
                iParam0->_fU168 = 0;
                iParam0->_fU176 = 0;
                iParam0->_fU180 = 0;
                iParam0->_fU172 = 0;
                iParam0->_fU184 = 1;
            }
            break;
        }
    }
    return;
}

/* F_GET_SCRIPT_TASK_STATUS */ int sub_50571(unknown uParam0, unknown uParam1)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        return GET_SCRIPT_TASK_STATUS( uParam0, uParam1 );
    }
    return 0;
}

/* SB_ISMAXAIMINGATSNIPER */ int sub_50732(int iParam0)
{
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if (IS_PED_IN_CROSSHAIR_CYLINDER( iParam0->_fU0, iParam0->_fU196, 1000, iParam0->_fU200, -1082130432 ))
        {
            return 1;
        }
    }
    return 0;
}

/* SB_SNIPERDUCKS */ void sub_50868(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        if ((NOT iParam0->_fU184) AND (NOT iParam0->_fU172))
        {
             /* MAL_WRITESCRIPTLOG */ sub_9781( "Sniper ducks" );
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 47, 1000, g_U649 );
        }
        iParam0->_fU168 = 0;
        iParam0->_fU176 = 0;
        iParam0->_fU180 = 0;
        iParam0->_fU172 = 1;
        iParam0->_fU184 = 0;
         /* CREATETIMER */ sub_4297( iParam0 + 120, iParam0->_fU156, 1, 0 );
         /* STARTTIMER */ sub_4447( iParam0 + 120 );
        iParam0->_fU164 = 4;
    }
    return;
}

/* SB_SNIPERFIRES */ void sub_51098(int iParam0)
{
    unknown uVar3;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if ((iParam0->_fU184) || (iParam0->_fU172))
        {
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 48, 1000, g_U649 );
        }
         /* MAL_SETLOCKEDANDREGISTEREDONPLAYER */ sub_50198( iParam0 + 0 );
        iParam0->_fU168 = 1;
        iParam0->_fU176 = 0;
        iParam0->_fU180 = 0;
        iParam0->_fU172 = 0;
        iParam0->_fU184 = 0;
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_AIM_GUN_AT_PED( 0,  /* PLAYER_PED_ID */ sub_3312(), iParam0->_fU192, 0 );
        TASK_SHOOT_AT_PED( 0,  /* PLAYER_PED_ID */ sub_3312(), -1, iParam0->_fU208, 0, 0, iParam0->_fU204 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
        iParam0->_fU164 = 1;
    }
    return;
}

/* SB_SNIPERSEARCHES */ void sub_51481(int iParam0)
{
    unknown uVar3;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if ((iParam0->_fU184) || (iParam0->_fU172))
        {
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 48, 1000, g_U649 );
        }
        iParam0->_fU168 = 0;
        iParam0->_fU176 = 1;
        iParam0->_fU180 = 0;
        iParam0->_fU172 = 0;
        iParam0->_fU184 = 0;
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_AIM_GUN_AT_COORD( 0, iParam0->_fU72, 2000, 0 );
        TASK_AIM_GUN_AT_COORD( 0, iParam0->_fU84, 2000, 0 );
        SET_SEQUENCE_TO_REPEAT( uVar3, 1 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
        iParam0->_fU164 = 2;
    }
    return;
}

/* SB_SNIPERWARNS */ void sub_51868(int iParam0)
{
    float fVar3;
    float fVar4;
    float fVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;

    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() ))) AND (NOT (IS_PED_DEAD( iParam0->_fU0 ))))
    {
        if ((iParam0->_fU184) || (iParam0->_fU172))
        {
            CLEAR_PED_TASKS( iParam0->_fU0 );
            PED_SET_ACTION_INTENTION( iParam0->_fU0, 48, 1000, g_U649 );
        }
        iParam0->_fU168 = 0;
        iParam0->_fU176 = 0;
        iParam0->_fU180 = 1;
        iParam0->_fU172 = 0;
        iParam0->_fU184 = 0;
        fVar3 = (GET_RANDOM_FLOAT_IN_RANGE( -0.50000000, 0.50000000 )) + (ref iParam0->_fU96->_fU0);
        fVar4 = (GET_RANDOM_FLOAT_IN_RANGE( -0.50000000, 0.50000000 )) + (ref iParam0->_fU96->_fU4);
        fVar5 = (GET_RANDOM_FLOAT_IN_RANGE( -0.50000000, 0.50000000 )) + (ref iParam0->_fU96->_fU8);
        uVar6 = {fVar3, fVar4, ref iParam0->_fU96->_fU8};
        OPEN_SEQUENCE_TASK( ref uVar9 );
        TASK_AIM_GUN_AT_COORD( 0, uVar6, 3000, 1 );
        TASK_SHOOT_AT_COORD( 0, uVar6, 1000, 1566631136, 0, 0 );
        TASK_AIM_GUN_AT_COORD( 0, uVar6, 1000, 0 );
        TASK_AIM_GUN_AT_COORD( 0, uVar6, -1, 0 );
        CLOSE_SEQUENCE_TASK( uVar9 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar9 );
        CLEAR_SEQUENCE_TASK( uVar9 );
        iParam0->_fU164 = 3;
    }
    return;
}

/* F_GET_SEQUENCE_PROGRESS */ int sub_52263(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        return GET_SEQUENCE_PROGRESS( uParam0 );
    }
    return -1;
}

/* P_0302A_REGISTRATION */ void sub_52585()
{
     /* WRITESCRIPTLOG */ sub_617( "AT", "P_0302A_REGISTRATION", 0 );
    REGISTER_HIDE_ENTITY_AT_POSITION( g_U3171._fU0, g_U3171._fU4 );
    REGISTER_HIDE_ENTITY_AT_POSITION( g_U3164._fU0, g_U3164._fU4 );
    REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( l_U1322._fU188, "W_SR_M82_Aa_H", 0 );
    if (((IS_PED_DEAD( g_U4007 )) == 0) AND ((DOES_PED_EXIST( g_U4007 )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4007, "Pass_heli_pilo", 0 );
        if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( g_U4007, 0, 0 ) )) == 0)
        {
             /* MAL_WRITESCRIPTLOG */ sub_9781( "PASSOS GUN NOT EXIST!" );
        }
        CUTSCENE_REGISTER_ISEQ( -334595829 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4007, l_U172, l_U175 );
        ISEQ_REGISTER_ENTITY( -334595829, "MID03B_PASSOS_COVER", g_U4007, 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4007, 0, 0 ), "W_PI_PT92_Aa_H", 0 );
    }
    if (((IS_PED_DEAD( g_U4008[0]._fU0 )) == 0) AND ((DOES_PED_EXIST( g_U4008[0]._fU0 )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4008[0]._fU0, "M_Crac_Sold_SR", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4008[0]._fU0, 0, 0 ), "W_PI_PT92_Aa_H^2", 0 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U4008[0]._fU0, "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_LOCO" );
    }
    if (((IS_PED_DEAD( g_U4008[1]._fU0 )) == 0) AND ((DOES_PED_EXIST( g_U4008[1]._fU0 )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4008[1]._fU0, "M_Crac_Sold_SR^1", 0 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U4008[1]._fU0, "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_LOCO" );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4008[1]._fU0, 0, 0 ), "W_SB_MP5_Aa_H^1", 0 );
    }
    if (((IS_PED_DEAD( g_U4008[2]._fU0 )) == 0) AND ((DOES_PED_EXIST( g_U4008[2]._fU0 )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4008[2]._fU0, "M_Crac_Sold_SR^2", 0 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U4008[2]._fU0, "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_LOCO" );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4008[2]._fU0, 0, 0 ), "W_SB_MP5_Aa_H^2", 0 );
    }
    if (((IS_PED_DEAD( g_U4187[0] )) == 0) AND ((DOES_PED_EXIST( g_U4187[0] )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4187[0], "G_CS_Bag_Avg", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4187[0], 0, 0 ), "W_PI_PT92_Aa_H^1", 0 );
    }
    if (((IS_PED_DEAD( g_U4187[1] )) == 0) AND ((DOES_PED_EXIST( g_U4187[1] )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4187[1], "G_CS_K_Sold_SR", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4187[1], 0, 0 ), "W_SG_BenM3_Aa_H", 1 );
        ISEQ_REGISTER_ENTITY( 1154908660, "Sniped", g_U4187[1], 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4187[1], l_U1314, l_U1317 );
    }
    if (((IS_PED_DEAD( g_U4187[2] )) == 0) AND ((DOES_PED_EXIST( g_U4187[2] )) == 1))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4187[2], "G_CS_K_Sold_SR^1", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4187[2], 0, 0 ), "W_SB_MP5_Aa_H", 1 );
        ISEQ_REGISTER_ENTITY( 1154908660, "Executed", g_U4187[2], 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4187[2], l_U1318, l_U1321 );
    }
    CUTSCENE_REGISTER_ISEQ( 1154908660 );
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )) == 0) AND ((DOES_PED_EXIST(  /* PLAYER_PED_ID */ sub_3312() )) == 1))
    {
        CUTSCENE_REGISTER_ISEQ( -767085492 );
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_3312(), l_U1377, l_U1380 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_3312(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_IDLE" );
        ISEQ_REGISTER_ENTITY( -767085492, "Max",  /* PLAYER_PED_ID */ sub_3312(), 0 );
        CUTSCENE_REGISTER_SET_PLAYER_IN_COVER( "stores_simple", "GrabSpline12", 0, 1 );
    }
    return;
}

/* P_0302A_HANDLE_CUTSCENE */ void sub_54241()
{
    if (l_U132._fU52)
    {
        AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1", 0, 0, -1, -1, -1082130432, 0 );
        FREEZE_TIME_OF_DAY( 21, 0 );
        SET_WEATHER_TYPE_NOW_PERSIST( "SUNNY" );
         /* P_HOLSTERRIFLEORDUALANDDRAWPISTOL */ sub_54370( ref l_U1381, ref l_U1382, 1, 0 );
    }
    if (NOT l_U1386)
    {
        if (GET_CUTSCENE_TIME() >= 28)
        {
            l_U1386 = 1;
            AUDIO_MUSIC_PLAY_ONESHOT();
        }
    }
    if (NOT l_U1383)
    {
        if (GET_CUTSCENE_TIME() > 42)
        {
            l_U1383 = 1;
            AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_6", "", 0, 6000, -1, -1082130432, 0 );
        }
    }
    if (NOT l_U1384)
    {
        if (GET_CUTSCENE_TIME() > 78)
        {
            l_U1384 = 1;
            AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_5_6", "", 0, 5000, -1, -1082130432, 0 );
        }
    }
    return;
}

/* P_HOLSTERRIFLEORDUALANDDRAWPISTOL */ void sub_54370(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

    uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 0, 0 );
    if (GET_DOES_WEAPON_EXIST( uVar6 ))
    {
        if ( /* F_ISPLAYERHOLDINGRIFLE */ sub_54446())
        {
            (uParam0^) = 1;
            SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_3312(), 0, 0, uParam2 );
            uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 0, 0 );
            if (bParam3)
            {
                 /* WRITESCRIPTLOG */ sub_617( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: Waiting for player to holster RIFLE in right hand...", "###" );
                while (GET_DOES_WEAPON_EXIST( uVar6 ))
                {
                    WAIT( 0 );
                    uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 0, 0 );
                }
            }
             /* WRITESCRIPTLOG */ sub_617( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: ...right hand RIFLE holstered!", "###" );
        }
    }
    uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 1, 0 );
    if (GET_DOES_WEAPON_EXIST( uVar6 ))
    {
        (uParam1^) = 1;
        SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_3312(), 0, 1, uParam2 );
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 1, 0 );
        if (bParam3)
        {
             /* WRITESCRIPTLOG */ sub_617( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: Waiting for player to holster gun in LEFT hand...", "###" );
            while (GET_DOES_WEAPON_EXIST( uVar6 ))
            {
                WAIT( 0 );
                uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 1, 0 );
            }
        }
         /* WRITESCRIPTLOG */ sub_617( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: ...LEFT hand gun holstered!", "###" );
    }
    uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 0, 0 );
    if (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
    {
        uVar6 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_3312(), 0 );
        if (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
        {
            uVar6 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_3312(), 1 );
        }
        SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_3312(), uVar6, 0, uParam2 );
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 0, 0 );
        if (bParam3)
        {
             /* WRITESCRIPTLOG */ sub_617( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: Waiting for player to draw gun from HOLSTER...", "###" );
            while (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
            {
                WAIT( 0 );
                uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 0, 0 );
            }
        }
         /* WRITESCRIPTLOG */ sub_617( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: ...gun drawn from HOLSTER!", "###" );
    }
    return;
}

/* F_ISPLAYERHOLDINGRIFLE */ int sub_54446()
{
    int[18] iVar2;
    unknown uVar21;
    int I;

    array(ref iVar2, 18);
    iVar2[0] = -1013714740;
    iVar2[1] = -1074756423;
    iVar2[2] = 1308526797;
    iVar2[3] = 840671040;
    iVar2[4] = 57534114;
    iVar2[5] = 724901397;
    iVar2[6] = 1992962408;
    iVar2[7] = 319712764;
    iVar2[8] = 427207702;
    iVar2[9] = -110877124;
    iVar2[10] = 1224272620;
    iVar2[11] = 10648147;
    iVar2[12] = -2075384407;
    iVar2[13] = 1478009203;
    iVar2[14] = 434544317;
    iVar2[15] = -168327769;
    iVar2[16] = -184942895;
    iVar2[17] = 514118749;
    uVar21 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 0, 0 );
    if (GET_DOES_WEAPON_EXIST( uVar21 ))
    {
        for ( I = 0; I < iVar2; I++ )
        {
            if ((GET_WEAPON_TYPE( uVar21 )) == iVar2[I])
            {
                return 1;
            }
        }
    }
    return 0;
}

/* F_0302A_POST */ int sub_55920()
{
     /* WRITESCRIPTLOG */ sub_617( "AT", "F_0302A_POST", 0 );
    return 1;
}

/* P_0302A_PREPARE_BLENDOUT */ void sub_55980()
{
     /* WRITESCRIPTLOG */ sub_617( "AT", "P_0302A_PREPARE_BLENDOUT", 0 );
    SET_PLAYER_GLOBAL_COMBAT_TIMER_STATE( 1 );
    CAMERA_PLAY_ANIMATED( "LEVEL_S_STAD_CP_03", "B_OUT_MID_03B_STADIUM_CAM", 1, 92.70000000, -16.75100000, 11.12000000, 180.00000000, 0, 0 );
     /* P_STORES_COMBAT_SETUP */ sub_56143();
     /* CLEANPED */ sub_8823( g_U4187[0] );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_57234( g_U2378, ref g_U1069 );
     /* P_SETDOORLOCKED */ sub_57687( ref g_U3164, 1 );
     /* P_SETDOORLOCKED */ sub_57687( ref g_U3171, 1 );
    if (NOT (ISEQ_QUERY_STATE( -767085492, 3 )))
    {
         /* TELEPORTPED */ sub_42636(  /* PLAYER_PED_ID */ sub_3312(), l_U1377, l_U1380 );
        ISEQ_REGISTER_ENTITY( -767085492, "Max",  /* PLAYER_PED_ID */ sub_3312(), 0 );
        ISEQ_START( -767085492 );
        SNAP_PLAYER_TO_COVERLINE(  /* PLAYER_ID */ sub_3350(), "stores_simple", "GrabSpline12", 1, 92.59013000, -9.58677800, 9.60321800 );
    }
    if (NOT (ISEQ_QUERY_STATE( -334595829, 3 )))
    {
         /* TELEPORTPED */ sub_42636( g_U4007, l_U172, l_U175 );
        ISEQ_REGISTER_ENTITY( -334595829, "MID03B_PASSOS_COVER", g_U4007, 0 );
        ISEQ_START( -334595829 );
    }
     /* MAL_REMOVEALLGUNSFROMPED */ sub_58194( ref g_U4187[1] );
     /* MAL_REMOVEALLGUNSFROMPED */ sub_58194( ref g_U4187[2] );
    if (NOT (ISEQ_QUERY_STATE( 1154908660, 3 )))
    {
         /* TELEPORTPED */ sub_42636( g_U4187[1], l_U1314, l_U1317 );
         /* TELEPORTPED */ sub_42636( g_U4187[2], l_U1318, l_U1321 );
         /* MAL_REGISTERPEDWITHISEQ */ sub_42895( g_U4187[1], 1154908660, "Sniped" );
         /* MAL_REGISTERPEDWITHISEQ */ sub_42895( g_U4187[2], 1154908660, "Executed" );
        ISEQ_START( 1154908660 );
    }
    SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_3350(), 1 );
     /* SB_DESTROYSNIPER */ sub_9151( ref l_U1322 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_6613( -1414847258, ref g_U1263 );
     /* P_ACTIVATE_RESTAURANT_REINFORCEMENTS */ sub_59186();
     /* CLEANPLACEMENT */ sub_8732( g_U4191 );
    g_U4191 =  /* CREATEPLACEMENT */ sub_46325( 280965399, 94.19000000, 1.86000000, 9.68000000, -1.57100000, 0, -1.57100000, 1, 0, 0, 1119092736 );
    return;
}

/* P_STORES_COMBAT_SETUP */ void sub_56143()
{
     /* WRITESCRIPTLOG */ sub_617( "MF", "P_STORES_COMBAT_SETUP - START", 0 );
     /* P_START_STORES_CP */ sub_56220();
     /* P_STORES_CP_ENGAGE_FROM_COVER */ sub_56574();
     /* STARTTIMER */ sub_4447( ref l_U629 );
     /* STARTTIMER */ sub_4447( ref l_U638 );
     /* WRITESCRIPTLOG */ sub_617( "MF", "P_STORES_COMBAT_SETUP - END", 0 );
    return;
}

/* P_START_STORES_CP */ void sub_56220()
{
     /* MAL_WRITESCRIPTLOG */ sub_9781( "P_START_STORES_CP" );
    PED_RESET_IK( g_U4008[0]._fU0 );
     /* MAL_ES_STAYINCOVER */ sub_56343( ref g_U4008[0], "GenCover", "83253945_4285F2ED_Popover1" );
     /* MAL_ES_STAYINCOVER */ sub_56343( ref g_U4008[1], "GenCover", "83253945_7E669829_Corner2" );
     /* MAL_ES_STAYINCOVER */ sub_56343( ref g_U4008[2], "stores_simple", "storesCorner12" );
    return;
}

/* MAL_ES_STAYINCOVER */ void sub_56343(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;

    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        OPEN_SEQUENCE_TASK( ref uVar5 );
        TASK_COMBAT_SNAP_TO_COVER( 0, uParam1, uParam2, 0 );
        CLOSE_SEQUENCE_TASK( uVar5 );
        TASK_PERFORM_SEQUENCE( iParam0->_fU0, uVar5 );
        CLEAR_SEQUENCE_TASK( uVar5 );
        SET_PED_FLAG_LOCK_TO_COVER( iParam0->_fU0, 1 );
    }
    return;
}

/* P_STORES_CP_ENGAGE_FROM_COVER */ void sub_56574()
{
    int I;

     /* WRITESCRIPTLOG */ sub_617( "GA", "P_STORES_CP_ENGAGE_FROM_COVER start", 0 );
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( l_U461._fU0, 1.00000000 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( l_U461._fU0, 1.00000000 );
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( l_U467._fU0, 1.00000000 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( l_U467._fU0, 1.00000000 );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() ))) AND (NOT (IS_PED_DEAD( g_U4008[0]._fU0 ))))
    {
        SET_PED_COVER_TARGET_PED( g_U4008[0]._fU0,  /* PLAYER_PED_ID */ sub_3312() );
        SET_PED_FORCE_START_FIRING_FROM_COVER( g_U4008[0]._fU0 );
    }
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() ))) AND (NOT (IS_PED_DEAD( g_U4008[1]._fU0 ))))
    {
        SET_PED_COVER_TARGET_PED( g_U4008[1]._fU0,  /* PLAYER_PED_ID */ sub_3312() );
    }
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() ))) AND (NOT (IS_PED_DEAD( g_U4008[2]._fU0 ))))
    {
        SET_PED_COVER_TARGET_PED( g_U4008[2]._fU0,  /* PLAYER_PED_ID */ sub_3312() );
    }
    for ( I = 0; I < g_U4008; I++ )
    {
        SET_PED_COMBAT_ATTRIBUTES( g_U4008[I]._fU0, 1, 1 );
    }
    if (NOT (IS_PED_DEAD( g_U4008[1]._fU0 )))
    {
        SET_PED_FLAG_BLOCK_WOUNDED_MOVEMENT( g_U4008[1]._fU0, 1 );
    }
    if (NOT (IS_PED_DEAD( g_U4008[2]._fU0 )))
    {
        SET_PED_FLAG_BLOCK_WOUNDED_MOVEMENT( g_U4008[2]._fU0, 1 );
    }
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_STORES_CP_ENGAGE_FROM_COVER start", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_57234(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6751( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_SETDOORLOCKED */ void sub_57687(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_57717( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_57801( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_57717(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_57801(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* MAL_REMOVEALLGUNSFROMPED */ void sub_58194(unknown uParam0)
{
     /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_RemoveAllGunsFromPed started" );
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
         /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_RemoveAllGunsFromPed WEAPONHAND_LEFT" );
         /* WRITE_INT */ sub_58347( GET_WEAPON_FROM_HAND( (uParam0^), 1, 0 ) );
        if ((GET_WEAPON_FROM_HAND( (uParam0^), 1, 0 )) != 0)
        {
            REMOVE_PED_WEAPON( (uParam0^), GET_WEAPON_FROM_HAND( (uParam0^), 1, 0 ) );
        }
         /* WRITE_INT */ sub_58347( GET_WEAPON_FROM_HAND( (uParam0^), 1, 0 ) );
         /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_RemoveAllGunsFromPed WEAPONHAND_RIGHT" );
         /* WRITE_INT */ sub_58347( GET_WEAPON_FROM_HAND( (uParam0^), 0, 0 ) );
        if ((GET_WEAPON_FROM_HAND( (uParam0^), 0, 0 )) != 0)
        {
            REMOVE_PED_WEAPON( (uParam0^), GET_WEAPON_FROM_HAND( (uParam0^), 0, 0 ) );
        }
         /* WRITE_INT */ sub_58347( GET_WEAPON_FROM_HAND( (uParam0^), 0, 0 ) );
         /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_RemoveAllGunsFromPed WEAPONHOLSTER_PISTOL_LEFT" );
         /* WRITE_INT */ sub_58347( GET_WEAPON_FROM_HOLSTER( (uParam0^), 1 ) );
        if ((GET_WEAPON_FROM_HOLSTER( (uParam0^), 1 )) != 0)
        {
            REMOVE_PED_WEAPON( (uParam0^), GET_WEAPON_FROM_HOLSTER( (uParam0^), 1 ) );
        }
         /* WRITE_INT */ sub_58347( GET_WEAPON_FROM_HOLSTER( (uParam0^), 1 ) );
         /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_RemoveAllGunsFromPed WEAPONHOLSTER_PISTOL_RIGHT" );
         /* WRITE_INT */ sub_58347( GET_WEAPON_FROM_HOLSTER( (uParam0^), 0 ) );
        if ((GET_WEAPON_FROM_HOLSTER( (uParam0^), 0 )) != 0)
        {
            REMOVE_PED_WEAPON( (uParam0^), GET_WEAPON_FROM_HOLSTER( (uParam0^), 0 ) );
        }
         /* WRITE_INT */ sub_58347( GET_WEAPON_FROM_HOLSTER( (uParam0^), 0 ) );
         /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_RemoveAllGunsFromPed WEAPONHOLSTER_RIFLE" );
         /* WRITE_INT */ sub_58347( GET_WEAPON_FROM_HOLSTER( (uParam0^), 2 ) );
        if ((GET_WEAPON_FROM_HOLSTER( (uParam0^), 2 )) != 0)
        {
            REMOVE_PED_WEAPON( (uParam0^), GET_WEAPON_FROM_HOLSTER( (uParam0^), 2 ) );
        }
         /* WRITE_INT */ sub_58347( GET_WEAPON_FROM_HOLSTER( (uParam0^), 2 ) );
    }
     /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_RemoveAllGunsFromPed ended" );
    return;
}

/* WRITE_INT */ void sub_58347(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* P_ACTIVATE_RESTAURANT_REINFORCEMENTS */ void sub_59186()
{
    unknown uVar2;

     /* MAL_ESA_VISIBLE */ sub_45771( ref g_U4141, 1, 0, -1 );
    if (NOT (IS_PED_DEAD( g_U4141[0]._fU0 )))
    {
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 89.26026000, 4.33582700, 9.60269500,  /* PLAYER_PED_ID */ sub_3312(), 3, 0, 1056964608, 0, 1, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 86.75937000, 3.69999900, 8.66029500,  /* PLAYER_PED_ID */ sub_3312(), 3, 0, 1056964608, 0, 1, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, 87.37415000, -8.04071500, 8.66029500,  /* PLAYER_PED_ID */ sub_3312(), 3, 0, 1056964608, 0, 1, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_MOVE_TO_COVER( 0, "GenCover", "83253945_5583FFD2_Popover1", 0 );
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( g_U4141[0]._fU0, uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U4141[0]._fU0, 1 );
    }
    return;
}

/* F_0302A_HANDLE_BLENDOUT */ int sub_59599()
{
    if (l_U132._fU52)
    {
        if (NOT (IS_PED_DEAD( g_U4187[1] )))
        {
            SET_PED_INVINCIBLE( g_U4187[1], 0 );
            SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U4187[1], 0 );
            FREEZE_PED_POSITION( g_U4187[1], 0 );
            SET_PED_CORPSE( g_U4187[1], 0 );
        }
        if (NOT (IS_PED_DEAD( g_U4187[2] )))
        {
            SET_PED_INVINCIBLE( g_U4187[2], 0 );
            SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( g_U4187[2], 0 );
            FREEZE_PED_POSITION( g_U4187[2], 0 );
            SET_PED_CORPSE( g_U4187[2], 0 );
        }
        if (NOT ( /* F_IMAGEFX_FADE_IN */ sub_59819()))
        {
            DO_SCREEN_FADE_IN( 0 );
        }
    }
    if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_STAD_CP_03", "B_OUT_MID_03B_STADIUM_CAM" )) - 100))
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( 65446, 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( -7.01622200, 1065353216, 0 );
        CAMERA_FREEZE_FRAME( 1, 500, 0, 0 );
        return 1;
    }
    return 0;
}

/* F_IMAGEFX_FADE_IN */ int sub_59819()
{
    if (l_U75)
    {
         /* WRITESCRIPTLOG */ sub_617( "CO", "F_IMAGEFX_FADE_IN: IMAGEFX START", 0 );
        START_PANEL_WIPE( 0, 6 );
        PLAY_IMAGEFX( "BULLETCAM_IMPACT", 3, 1 );
        PLAY_IMAGEFX( "BLACK_FADE_UP_FAST_01", 3, 1 );
        DO_SCREEN_FADE_IN( 0 );
        l_U75 = 0;
        return 1;
        break;
    }
     /* WRITESCRIPTLOG */ sub_617( "CO", "F_IMAGEFX_FADE_IN: NORMAL START", 0 );
    return 0;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_60207(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_617( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_60431( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 60328, 60378, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_60328()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_60378()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_60431(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_HANDLECUTSCENE */ void sub_60832(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_617( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_617( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_617( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_617( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_617( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_617( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_32085( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_617( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_61723( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_61723( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_617( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_62267( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_61723( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_62647( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_62647( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* NIS_PRE_SETUP */ void sub_61723(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_3350(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_3312(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_3312() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_3312(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_62267(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_3312(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_3312(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_3312(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_62647(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_3350(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_3312(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_62745();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_62745()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3312(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_3312(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_3312(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_63118(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_617( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_617( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_13878( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_63409( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_63886( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_63886( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_64146( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_63886( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_64146( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_64146( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_63886( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_64146( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_64146( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_64146( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_63886( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_64146( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_64146( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_64146( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_64146( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_65726( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_617( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_63409(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_10893( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_617( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_617( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_63886(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_64146(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_65726(int iParam0)
{
     /* WRITE_STRING */ sub_12713( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_65814( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_38469( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_38469( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_38469( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_38469( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_38469( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_66677( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU52 );
     /* WRITE_STRING */ sub_12713( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU96 );
     /* WRITE_STRING */ sub_12713( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU100 );
     /* WRITE_STRING */ sub_12713( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU104 );
     /* WRITE_STRING */ sub_12713( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU108 );
     /* WRITE_STRING */ sub_12713( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU112 );
     /* WRITE_STRING */ sub_12713( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU116 );
     /* WRITE_STRING */ sub_12713( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU120 );
     /* WRITE_STRING */ sub_12713( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU124 );
     /* WRITE_STRING */ sub_12713( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU128 );
     /* WRITE_STRING */ sub_12713( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_58347( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_58347( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_58347( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_65814(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_66677(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_HANDLE_STATE_RESTAURANT_FIGHT */ void sub_67700(boolean bParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    unknown uVar40;
    unknown uVar41;
    unknown uVar42;
    unknown uVar43;
    unknown uVar44;
    unknown uVar45;
    unknown uVar46;
    unknown uVar47;
    unknown uVar48;
    unknown uVar49;
    unknown uVar50;
    unknown uVar51;
    unknown uVar52;
    unknown uVar53;
    unknown uVar54;
    unknown uVar55;
    unknown uVar56;

    if (bParam0)
    {
         /* WRITESCRIPTLOG */ sub_617( "[SA]", "Entering progression state STATE_RESTAURANT_FIGHT.", "[STATE]" );
         /* P_START_SP_CHALLENGES */ sub_67826();
         /* P_CREATE_AND_START_TIMER */ sub_67988( ref l_U473, 500 );
         /* LOADSEAMLESSCUTSCENE */ sub_32085( "03_02a_STADIUM_PT8", 0 );
         /* P_CREATE_AND_START_TIMER */ sub_67988( ref l_U1399, 10000 );
    }
    if ( /* HASTIMERBEENACTIVATED */ sub_4163( ref l_U1399 ))
    {
        if ( /* MAL_HASPLAYERFIRED */ sub_68105( 1 ))
        {
             /* MAL_WRITESCRIPTLOG */ sub_9781( "ResetTimer(tMaxHasNotFired)" );
             /* RESETTIMER */ sub_5156( ref l_U1399 );
             /* STARTTIMER */ sub_4447( ref l_U1399 );
        }
        else if (NOT (IS_ANY_SPEECH_PLAYING( g_U4007 )))
        {
            if ((l_U1408 < 3) AND ( /* ISTIMERDONE */ sub_4580( ref l_U1399 )))
            {
                 /* MAL_WRITESCRIPTLOG */ sub_9781( "IsTimerDone(tMaxHasNotFired)" );
                 /* RESET_SCRIPT_SPEECH_STRUCT */ sub_68445( ref l_U1389 );
                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_68559( 1, g_U4007, "PASSOS", ref l_U1389, 2, 0 );
                 /* PLAY_SINGLE_SPEECH */ sub_68803( "SSTD_NSIS", ref l_U1389, 7, 1 );
                 /* RESETTIMER */ sub_5156( ref l_U1399 );
                 /* P_CREATE_AND_START_TIMER */ sub_67988( ref l_U1399, 12000 );
                l_U1408++;
            }
        }
    }
    if (NOT ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_69740( l_U1412 )))
    {
        if ((IS_LAST_MAN_STANDING_ACTIVE()) AND (NOT l_U1411))
        {
            l_U1411 = 1;
        }
        else if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (l_U1411))
        {
            l_U1411 = 0;
             /* MAL_WRITESCRIPTLOG */ sub_9781( "Chance to react to LMS here" );
            if (( /* F_GETRANDOMINTINRANGE */ sub_69968( 0, 3 )) == 0)
            {
                 /* RESET_SCRIPT_SPEECH_STRUCT */ sub_68445( ref l_U1412 );
                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_68559( 1, g_U4007, "PASSOS", ref l_U1412, 2, 0 );
                 /* PLAY_SINGLE_SPEECH */ sub_68803( "SSTD_PMPL", ref l_U1412, 7, 1 );
            }
        }
        else if ( /* MAL_ISACTINTCOMPLETED */ sub_70120( ref g_U4007, 54, 1 ))
        {
             /* MAL_WRITESCRIPTLOG */ sub_9781( "Chance to speak while shooting" );
            if (( /* F_GETRANDOMINTINRANGE */ sub_69968( 0, l_U1422 )) > 3)
            {
                 /* RESET_SCRIPT_SPEECH_STRUCT */ sub_68445( ref l_U1412 );
                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_68559( 1, g_U4007, "PASSOS", ref l_U1412, 2, 0 );
                 /* PLAY_SINGLE_SPEECH */ sub_68803( "SSTD_PSAE", ref l_U1412, 7, 1 );
                l_U1422 = 0;
            }
            else
            {
                l_U1422++;
            }
        };;;
    }
     /* MAL_ESA_ZHEIGHTCHECK */ sub_70479( ref g_U4008, 7.00000000, 1, 0 );
     /* MAL_ESA_ZHEIGHTCHECK */ sub_70479( ref g_U4141, 7.00000000, 1, 0 );
    if ((NOT (IS_ANY_SPEECH_PLAYING( g_U4007 ))) AND ((NOT l_U218._fU556) AND ( /* F_ISPLAYERINTRIGGERREGION */ sub_70702( ref l_U218, 0 ))))
    {
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_68559( 1, g_U4007, "PASSOS", ref uVar3, 2, 0 );
         /* PLAY_SINGLE_SPEECH */ sub_68803( "SSTD_LCIS", ref uVar3, 7, 1 );
    }
    if (NOT l_U1388)
    {
        if (NOT (IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_3312() )))
        {
            l_U1388 = 1;
             /* MAL_ESA_CLEARSTAYINCOVER */ sub_71121( ref g_U4141, 0, -1 );
             /* MAL_ESA_CLEARSTAYINCOVER */ sub_71121( ref g_U4008, 0, -1 );
             /* MAL_ESA_UNBLOCKANDCOMBATPLAYER */ sub_71308( ref g_U4141, 0, 0, -1 );
             /* MAL_ESA_UNBLOCKANDCOMBATPLAYER */ sub_71308( ref g_U4008, 0, 0, -1 );
        }
    }
    if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ((( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_71864( ref g_U4008 )) + ( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_71864( ref g_U4141 ))) > 0)))
    {
        if (( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( l_U432 )) || ( /* F_TIMEDISPLAYERINTRIGGERREGION */ sub_72013( ref l_U218, 5000, 0 )))
        {
            l_U127 = 10;
             /* WRITESCRIPTLOG */ sub_617( "GA", "eCheckpointState = CP_NIS_PASSOS_GETS_SHOT", 0 );
        }
    }
    if ((( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_71864( ref g_U4141 )) + ( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_71864( ref g_U4008 ))) == 1)
    {
        uVar13 = { /* MAL_ESA_ASSIGNBULLETCAMTOLASTLIVINGPED */ sub_72432( ref g_U4008, 0, 0, 0 )};
        if (NOT (uVar13._fU0 == g_U671._fU0))
        {
             /* WRITESCRIPTLOG */ sub_617( "GA", "Assigned bullet camera to Stores CP.", 0 );
            FORCE_CUSTOM_WIPE_BULLET_CAMERA( 1 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
            BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
        }
        else
        {
            uVar13 = { /* MAL_ESA_ASSIGNBULLETCAMTOLASTLIVINGPED */ sub_72432( ref g_U4141, 0, 0, 0 )};
            if (NOT (uVar13._fU0 == g_U671._fU0))
            {
                 /* WRITESCRIPTLOG */ sub_617( "GA", "Assigned bullet camera to Stores CP.", 0 );
                FORCE_CUSTOM_WIPE_BULLET_CAMERA( 1 );
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
                BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
            }
        }
    }
    if ((( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_71864( ref g_U4008 )) + ( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_71864( ref g_U4141 ))) < 1)
    {
        if (NOT l_U1385)
        {
            l_U1385 = 1;
            AUDIO_MUSIC_FORCE_TRACK( "STADIUM_FINAL", "STADIUM_1_6", "", 0, 10000, -1, -1082130432, 0 );
        }
    }
    if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ((( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_71864( ref g_U4008 )) + ( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_71864( ref g_U4141 ))) < 1))
    {
         /* KILL_SPEECH */ sub_8379( ref l_U1412, 0 );
        l_U127 = 11;
         /* WRITESCRIPTLOG */ sub_617( "GA", "eCheckpointState = CP_HANDLE_NIS_PASSOS_WALKING", 0 );
    }
    return;
}

/* P_START_SP_CHALLENGES */ void sub_67826()
{
     /* WRITESCRIPTLOG */ sub_617( "CCB", "P_START_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_617( "CCB", "Starting the Stadium_Stores context...", 0 );
    START_CONTEXT( "Stadium_Stores" );
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_67988(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_4297( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_4447( uParam0 );
    return;
}

/* MAL_HASPLAYERFIRED */ int sub_68105(unknown uParam0)
{
    int iVar3;

    iVar3 = nil;
    if (HAS_SHOT_BEEN_FIRED_IN_AREA(  /* MAL_GETPEDCOORDS */ sub_68145(  /* PLAYER_PED_ID */ sub_3312() ), 2.00000000, uParam0, ref iVar3 ))
    {
        if (iVar3 == ( /* PLAYER_PED_ID */ sub_3312()))
        {
             /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_HasPlayerFired RETURNING TRUE" );
            return 1;
        }
    }
    return 0;
}

/* MAL_GETPEDCOORDS */ vector sub_68145(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return "[dynamic result, ret vals = 3]";
        break;
        GET_PED_COORDS( uParam0 );
        "[doubled result, dropped if not asigned]";
        "[doubled result, dropped if not asigned]";
        break;
    }
    return vector( 0, 0, 0);
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_68445(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_68559(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_68803(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_68848( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_68848(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_68935( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_68935(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_68987( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_69505( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_68987(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_69505(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_69740(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_8407( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* F_GETRANDOMINTINRANGE */ void sub_69968(unknown uParam0, int iParam1)
{
    int Result;

    Result = GET_RANDOM_INT_IN_RANGE( uParam0, iParam1 + 1 );
    if (Result > iParam1)
    {
        Result = iParam1;
    }
    return Result;
}

/* MAL_ISACTINTCOMPLETED */ int sub_70120(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (( /* MAL_GETACTINTSTATUS */ sub_70159( (uParam0^), uParam1 )) == 1)
    {
        if (bParam2)
        {
             /* MAL_FINISHACTINT */ sub_70247( uParam0, uParam1 );
        }
        return 1;
    }
    return 0;
}

/* MAL_GETACTINTSTATUS */ int sub_70159(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return PED_GET_ACTION_INTENTION_STATUS( uParam0, uParam1 );
    }
    return 0;
}

/* MAL_FINISHACTINT */ void sub_70247(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        PED_FINISH_ACTION_INTENTION( (uParam0^), uParam1 );
    }
    return;
}

/* MAL_ESA_ZHEIGHTCHECK */ void sub_70479(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_ES_ZHEIGHTCHECK */ sub_70540( ref (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* MAL_ES_ZHEIGHTCHECK */ void sub_70540(int iParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( iParam0->_fU0, 0, 0 );
            }
            if (bParam3)
            {
                 /* MAL_ES_CLEAN */ sub_8960( iParam0 );
            }
        }
    }
    return;
}

/* F_ISPLAYERINTRIGGERREGION */ void sub_70702(int iParam0, unknown uParam1)
{
    int Result;
    int I;
    int J;

    Result = 0;
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            if ( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( iParam0->_fU0[I] ))
            {
                Result = 1;
            }
        }
    }
    if ((uParam1) AND (Result))
    {
        for ( J = 0; J < iParam0->_fU508; J++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[J]._fU0, 0 );
        }
    }
    iParam0->_fU548 = 1;
    return Result;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_70789(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_70832(  /* PLAYER_PED_ID */ sub_3312(), uParam0 );
}

/* F_ISPEDINTRIGGERBOX */ int sub_70832(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* MAL_ESA_CLEARSTAYINCOVER */ void sub_71121(unknown uParam0, unknown uParam1, int iParam2)
{
    int I;

    if (iParam2 == -1)
    {
        iParam2 = (uParam0^) - 1;
    }
    for ( I = uParam1; I <= iParam2; I++ )
    {
         /* MAL_ES_CLEARSTAYINCOVER */ sub_71196( ref (uParam0^)[I] );
    }
    return;
}

/* MAL_ES_CLEARSTAYINCOVER */ void sub_71196(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_PED_FLAG_LOCK_TO_COVER( iParam0->_fU0, 0 );
    }
    return;
}

/* MAL_ESA_UNBLOCKANDCOMBATPLAYER */ void sub_71308(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_UNBLOCKANDCOMBATPLAYER */ sub_71391( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_UNBLOCKANDCOMBATPLAYER */ void sub_71391(int iParam0, unknown uParam1)
{
     /* MAL_UNBLOCKANDCOMBATPLAYER */ sub_71446( iParam0 + 0, iParam0->_fU80, uParam1 );
    return;
}

/* MAL_UNBLOCKANDCOMBATPLAYER */ void sub_71446(unknown uParam0, unknown uParam1, unknown uParam2)
{
     /* MAL_UNBLOCKANDCOMBATPED */ sub_71496( uParam0,  /* PLAYER_PED_ID */ sub_3312(), uParam1, uParam2 );
    return;
}

/* MAL_UNBLOCKANDCOMBATPED */ void sub_71496(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

     /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_UnblockAndCombatPed" );
    OPEN_SEQUENCE_TASK( ref uVar6 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
         /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_UnblockAndCombatPed: Victim is not dead" );
        TASK_COMBAT_PED( 0, uParam1 );
    }
    CLOSE_SEQUENCE_TASK( uVar6 );
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
         /* MAL_WRITESCRIPTLOG */ sub_9781( "MAL_UnblockAndCombatPed: Ped is not dead" );
        if (bParam3)
        {
            CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        }
        else
        {
            CLEAR_PED_TASKS( (uParam0^) );
        }
        SET_PED_COMBAT_MOVEMENT( (uParam0^), uParam2 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar6 );
    }
    CLEAR_SEQUENCE_TASK( uVar6 );
    return;
}

/* MAL_ESA_GETNUMLIVINGPEDS */ void sub_71864(unknown uParam0)
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I]._fU0 )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_TIMEDISPLAYERINTRIGGERREGION */ void sub_72013(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int I;

    Result = 0;
    if ( /* F_ISPLAYERINTRIGGERREGION */ sub_70702( iParam0, 0 ))
    {
        if (iParam0->_fU560)
        {
            Result = 1;
        }
        else if (iParam0->_fU556)
        {
            if ( /* ISTIMERDONE */ sub_4580( iParam0 + 512 ))
            {
                 /* RESETTIMER */ sub_5156( iParam0 + 512 );
                iParam0->_fU556 = 0;
                iParam0->_fU560 = 1;
                Result = 1;
            }
        }
        else
        {
             /* CREATETIMER */ sub_4297( iParam0 + 512, uParam1, 1, 0 );
             /* STARTTIMER */ sub_4447( iParam0 + 512 );
            iParam0->_fU556 = 1;
            iParam0->_fU560 = 0;
        }
    }
    else if (iParam0->_fU556)
    {
        iParam0->_fU556 = 0;
         /* RESETTIMER */ sub_5156( iParam0 + 512 );
    }
    if (iParam0->_fU560)
    {
        iParam0->_fU560 = 0;
    }
    if ((uParam2) AND (Result))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[I]._fU0, 0 );
        }
    }
    return Result;
}

/* MAL_ESA_ASSIGNBULLETCAMTOLASTLIVINGPED */ void sub_72432(unknown uParam0, boolean bParam1, unknown uParam2, unknown uParam3)
{
    int I;

    if (( /* MAL_ESA_GETNUMLIVINGPEDS */ sub_71864( uParam0 )) == 1)
    {
        for ( I = 0; I < (uParam0^); I++ )
        {
            if ( /* MAL_SETCANTRIGGERBULLETCAM */ sub_42030( (uParam0^)[I]._fU0, 1 ))
            {
                if (bParam1)
                {
                    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, uParam2 );
                }
                BULLET_CAMERA_TRACK_UNTIL_GROUNDED( uParam3 );
                return (uParam0^)[I];
            }
        }
    }
    return g_U671;
}

/* P_HANDLE_STATE_PASSOS_GETS_SHOT_NIS */ void sub_73044(boolean bParam0)
{
    if (bParam0)
    {
         /* WRITESCRIPTLOG */ sub_617( "[SA]", "Entering progression state STATE_PASSOS_GETS_SHOT_NIS.", "[STATE]" );
        SET_FADE_MUTE_OVERRIDE( 1 );
        DO_SCREEN_FADE_OUT( 0 );
         /* NIS_PRE_SETUP */ sub_61723( 1, 0, 0, 0 );
         /* MAL_ESA_STANDSTILL */ sub_73207( ref g_U4141 );
         /* MAL_ESA_STANDSTILL */ sub_73207( ref g_U4008 );
        if ( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( l_U359[0] ))
        {
             /* NIS_CREATE_STATIC_CAM */ sub_73367( ref l_U501[0], 89.57000000, -13.01000000, 11.06000000, -13.55000000, 1.22000000, -73.45000000, 59.10000000, l_U615[0] );
             /* NIS_CREATE_STATIC_CAM */ sub_73367( ref l_U501[1], 89.57000000, -13.01000000, 11.06000000, -13.55000000, 1.22000000, -73.45000000, 45, l_U615[1] );
             /* NIS_CREATE_STATIC_CAM */ sub_73367( ref l_U501[2], 93.12427000, -12.01371000, 10.77984000, -17.28911000, -0.00003200, -36.70882000, 45, l_U615[2] );
             /* MAL_TELEPORTPED */ sub_49407( g_U4007, 93.66046000, -10.09645000, 9.60321800, 147.07860000 );
            l_U493 = l_U494;
        }
        else
        {
             /* NIS_CREATE_STATIC_CAM */ sub_73367( ref l_U501[0], l_U595[0], l_U605[0], 45, l_U615[0] );
             /* NIS_CREATE_STATIC_CAM */ sub_73367( ref l_U501[1], l_U595[1], l_U605[1], 45, l_U615[1] );
             /* NIS_CREATE_STATIC_CAM */ sub_73367( ref l_U501[2], l_U595[2], l_U605[2], 45, l_U615[2] );
             /* MAL_TELEPORTPED */ sub_49407( g_U4007, 93.66046000, -10.09645000, 9.60321800, 0.00000000 );
            l_U493 = l_U495;
        }
         /* P_PASSOS_DEATH_SETUP_SHOOTER */ sub_73926();
         /* P_CREATE_AND_START_TIMER */ sub_67988( ref l_U484, 1000 );
        l_U482 = 1;
    }
    switch (l_U482)
    {
        case 0: break;
        case 1:
        if ( /* ISTIMERDONE */ sub_4580( ref l_U484 ))
        {
             /* NIS_PLAY_STATIC_CAMERA */ sub_74987( ref l_U501[0] );
             /* P_PASSOS_DEATH_MOVE_PASSOS_OUT_OF_COVER */ sub_75096();
             /* P_CREATE_AND_START_TIMER */ sub_67988( ref l_U484, l_U493 );
            DO_SCREEN_FADE_IN( 250 );
            SET_FADE_MUTE_OVERRIDE( 0 );
            l_U482 = 2;
        }
        break;
        case 2:
         /* NIS_SHAKE_CAMERA */ sub_75556(  /* F_CAM_SHAKE_WOBBLY */ sub_75497(), 0.25000000 );
        l_U482 = 3;
        break;
        case 3:
        if ( /* ISTIMERDONE */ sub_4580( ref l_U484 ))
        {
            if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( l_U359[0] )))
            {
                 /* NIS_PLAY_STATIC_CAMERA */ sub_74987( ref l_U501[1] );
            }
            if (NOT l_U1387)
            {
                 /* P_IMAGEFX_START_BULLETCAM */ sub_75718( "STAD_PASSOS_STORES_SCRIPTED_FAIL_FX", 1 );
                l_U1387 = 1;
            }
        }
        if (( /* MAL_GETACTINTSTATUS */ sub_70159( g_U4007, 46 )) == 1)
        {
            TASK_SHOOT_AT_PED( l_U483, g_U4007, -1, -256437761, 1, 0, 0 );
            SET_PED_SHOOTS_AT_COORD( l_U483, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_BONE_COORDS( g_U4007, 65488, g_U649 ) );
             /* P_PASSOS_DEATH_KILL_PASSOS */ sub_76106();
             /* NIS_SHAKE_CAMERA */ sub_75556(  /* F_CAM_SHAKE_MED_EXPLOSION */ sub_76363(), 1.00000000 );
            l_U482 = 4;
        }
        break;
        case 4:
         /* P_CREATE_AND_START_TIMER */ sub_67988( ref l_U484, 750 );
        l_U482 = 5;
        break;
        case 5:
        if ( /* ISTIMERDONE */ sub_4580( ref l_U484 ))
        {
            l_U482 = 6;
        }
        break;
        case 6:
        CLEAR_PED_TASKS_IMMEDIATELY( l_U483 );
        SET_PED_INVINCIBLE( l_U483, 0 );
        FREEZE_PED_POSITION( l_U483, 0 );
         /* NIS_POST_SETUP */ sub_62647( 1, 1 );
        if (NOT (IS_PED_DEAD( g_U4007 )))
        {
            SCRIPT_ASSERT( "P_HANDLE_STATE_PASSOS_GETS_SHOT_NIS() - Passos should be dead, but he's not!", 0 );
        }
        l_U482 = 7;
        break;
        case 7: break;
    }
    return;
}

/* MAL_ESA_STANDSTILL */ void sub_73207(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* MAL_STANDSTILL */ sub_41780( ref (uParam0^)[I]._fU0 );
    }
    return;
}

/* NIS_CREATE_STATIC_CAM */ void sub_73367(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_4297( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref g_U723, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* P_PASSOS_DEATH_SETUP_SHOOTER */ void sub_73926()
{
    int iVar2;
    int I;
    int J;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;

     /* MAL_ESA_BLOCK */ sub_73974( ref g_U4141, 1, 0, -1 );
     /* MAL_ESA_BLOCK */ sub_73974( ref g_U4008, 1, 0, -1 );
    iVar2 = -1;
    for ( I = 0; I < g_U4008; I++ )
    {
        if ((iVar2 < 0) AND (NOT (IS_PED_DEAD( g_U4008[I]._fU0 ))))
        {
            iVar2 = I;
        }
    }
    if (iVar2 > -1)
    {
        l_U483 = g_U4008[iVar2]._fU0;
    }
    else
    {
        for ( J = 0; J < g_U4141; J++ )
        {
            if ((iVar2 < 0) AND (NOT (IS_PED_DEAD( g_U4141[J]._fU0 ))))
            {
                iVar2 = J;
            }
        }
        if (NOT (IS_PED_DEAD( g_U4141[iVar2]._fU0 )))
        {
            PRINTSTRING( "MSWW: P_PASSOS_DEATH_SETUP_SHOOTER index: " );
             /* WRITE_INT */ sub_58347( iVar2 );
            l_U483 = g_U4141[iVar2]._fU0;
        }
        else
        {
            SCRIPT_ASSERT( "P_PASSOS_DEATH_SETUP_SHOOTER COULD NOT FIND LIVING SHOOTER OMFG", 0 );
        }
    }
    SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U483, 1 );
    uVar5 = GET_WEAPON_FROM_HAND( l_U483, 0, 0 );
    uVar6 = GET_WEAPON_TYPE( uVar5 );
    SET_AMMO_IN_CLIP( l_U483, uVar6, GET_MAX_AMMO_IN_CLIP( l_U483, uVar6 ) );
    CLEAR_PED_TASKS_IMMEDIATELY( l_U483 );
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( l_U359[0] ))
    {
         /* TELEPORTPED */ sub_42636( l_U483, 90.86912000, -13.19800000, 9.60321800, 322.89000000 );
    }
    else
    {
         /* TELEPORTPED */ sub_42636( l_U483, l_U496, l_U499 );
    }
    CLEAR_PED_TASKS_IMMEDIATELY( l_U483 );
    PED_ACTION_TREE_PLAY_NODE( l_U483, "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_IDLE" );
    FREEZE_PED_POSITION( l_U483, 1 );
    SET_PED_INVINCIBLE( l_U483, 1 );
     /* MAL_REGISTERTARGET */ sub_44687( ref l_U483, g_U4007 );
    OPEN_SEQUENCE_TASK( ref uVar7 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( l_U359[0] ))
    {
        TASK_AIM_GUN_AT_PED( 0, g_U4007, -1, 1 );
    }
    else
    {
        TASK_AIM_GUN_AT_COORD( 0, 94.20000000, -14.05000000, 11.44000000, -1, 1 );
    }
    CLOSE_SEQUENCE_TASK( uVar7 );
    TASK_PERFORM_SEQUENCE( l_U483, uVar7 );
    CLEAR_SEQUENCE_TASK( uVar7 );
    return;
}

/* MAL_ESA_BLOCK */ void sub_73974(unknown uParam0, unknown uParam1, unknown uParam2, int iParam3)
{
    int I;

    if (iParam3 == -1)
    {
        iParam3 = (uParam0^) - 1;
    }
    for ( I = uParam2; I <= iParam3; I++ )
    {
         /* MAL_ES_BLOCK */ sub_74040( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* MAL_ES_BLOCK */ void sub_74040(int iParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( iParam0->_fU0 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( iParam0->_fU0, uParam1 );
    }
    return;
}

/* NIS_PLAY_STATIC_CAMERA */ void sub_74987(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_4447( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* P_PASSOS_DEATH_MOVE_PASSOS_OUT_OF_COVER */ void sub_75096()
{
    if (NOT (IS_PED_DEAD( g_U4007 )))
    {
        SET_PED_CAN_INITIATE_BULLET_CAM( g_U4007, 0 );
        SET_PED_AS_ONE_SHOT_KILL( g_U4007, 1 );
        CLEAR_PED_TASKS_IMMEDIATELY( g_U4007 );
        if ( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( l_U359[0] ))
        {
             /* MAL_PEDPLAYERACTIONTREENODE */ sub_75290( g_U4007, "/Global/S_STAD_M3B_PAS/SEQ_START/HORRIBLE_DEATH/FROM_BEHIND" );
        }
        else
        {
             /* MAL_PEDPLAYERACTIONTREENODE */ sub_75290( g_U4007, "/Global/S_STAD_M3B_PAS/SEQ_START/HORRIBLE_DEATH/FROM_RESTAURANT" );
        }
    }
    return;
}

/* MAL_PEDPLAYERACTIONTREENODE */ void sub_75290(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        PED_ACTION_TREE_PLAY_NODE( uParam0, uParam1 );
    }
    return;
}

/* F_CAM_SHAKE_WOBBLY */ string sub_75497()
{
    return "WOBBLY_SHAKE";
}

/* NIS_SHAKE_CAMERA */ void sub_75556(unknown uParam0, unknown uParam1)
{
    SHAKE_CAM( GET_RENDERING_CAM(), uParam0, uParam1 );
    return;
}

/* P_IMAGEFX_START_BULLETCAM */ void sub_75718(unknown uParam0, boolean bParam1)
{
    PRINTSTRING( "[CO] P_IMAGEFX_START_BULLETCAM: Starting BulletCam: " );
    PRINTSTRING( uParam0 );
    PRINTNL();
     /* CLEANCAMERA */ sub_6081( ref l_U76 );
    l_U76 = CREATE_CAM( "DEFAULT_BULLET_CAMERA", 1 );
    SETUP_BULLET_CAMERA_SCENE( l_U76, uParam0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, "", "" );
    if (bParam1)
    {
        RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
    }
    return;
}

/* P_PASSOS_DEATH_KILL_PASSOS */ void sub_76106()
{
    if (NOT (IS_PED_DEAD( g_U4007 )))
    {
        START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE( "blood_headshot", g_U4007, 0, 0, 0, 0, 0, 0, 65488, 2.00000000 );
        START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE( "blood_headshot_exit", g_U4007, 0, 0, 0, 0, 0, 0, 65488, 2.00000000 );
         /* P_KILL_PED */ sub_76277( g_U4007 );
    }
    return;
}

/* P_KILL_PED */ void sub_76277(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* F_CAM_SHAKE_MED_EXPLOSION */ string sub_76363()
{
    return "MEDIUM_EXPLOSION_SHAKE";
}

/* P_HANDLE_STATE_PASSOS_WALKING_NIS */ void sub_76687(boolean bParam0)
{
    if (bParam0)
    {
         /* WRITESCRIPTLOG */ sub_617( "[SA]", "Entering progression state STATE_PASSOS_WALKING_NIS.", "[STATE]" );
         /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_60207( ref l_U1423, "03_02a_STADIUM_PT8", 76842, 77157, 77472, 77522, 77622, 77910, 250, 0 );
        l_U1423._fU4 = 2;
    }
    if ((l_U1423._fU52) AND (l_U1423._fU4 == 6))
    {
        if ((IS_BULLET_CAMERA_TO_GAMEPLAY_ALLOWED() == 0) AND (IS_BULLET_CAMERA_ACTIVE() == 1))
        {
            START_PANEL_WIPE( 300, 6 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
        }
    }
    if ( /* CUTSYS_HANDLECUTSCENE */ sub_60832( ref l_U1423 ))
    {
        RESET_FORCED_AIM_INTENTION_DIRECTION();
        l_U127 = 12;
         /* WRITESCRIPTLOG */ sub_617( "GA", "eCheckpointState = CP_JOIN_PASSOS_IN_RESTAURANT", 0 );
    }
    return;
}

/* F_PASSOSWALK_PRE */ int sub_76842()
{
    SET_PED_CAN_INITIATE_BULLET_CAM( g_U4007, 0 );
     /* P_CLEAR_PED_HEADTRACKING */ sub_76889( g_U4007 );
    return 1;
}

/* P_CLEAR_PED_HEADTRACKING */ void sub_76889(int iParam0)
{
    if (NOT (IS_PED_DEAD( iParam0 )))
    {
        if (iParam0 == ( /* PLAYER_PED_ID */ sub_3312()))
        {
             /* WRITESCRIPTLOG */ sub_617( "[AT]", "Clearing headtracking on Max.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_617( "[AT]", "Clearing headtracking on non-player ped.", 0 );
        }
        TASK_CLEAR_LOOK_AT( iParam0 );
    }
    else
    {
        SCRIPT_ASSERT( "Passed invalid or dead ped to P_CLEAR_PED_HEADTRACKING!", 0 );
    }
    return;
}

/* P_PASSOSWALK_REGISTER */ void sub_77157()
{
    CUTSCENE_REGISTER_ISEQ( 1262534908 );
    if (NOT (IS_PED_DEAD( g_U4007 )))
    {
        ISEQ_REGISTER_ENTITY( 1262534908, "Passos", g_U4007, 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U4007, 94.80002000, -3.28871200, 9.60303300, 0.00000000 );
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U4007, "Pass_heli_Pilo", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U4007, 0, 0 ), "W_PI_PT92_Aa_H", 0 );
    }
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() )))
    {
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_3312(), 90.67464000, 0.11329500, 9.60321800, 336.94400000 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_3312(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_IDLE" );
    }
    return;
}

/* CUTSYS_DEFAULT_HANDLECUTSCENE */ void sub_77472()
{
    return;
}

/* F_PASSOSWALK_POST */ int sub_77522()
{
     /* P_START_CHECKPOINT_THREAD */ sub_77559( ref g_U888[6] );
    return 1;
}

/* P_START_CHECKPOINT_THREAD */ void sub_77559(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* P_PASSOSWALK_PREPAREBLENDOUT */ void sub_77622()
{
    CAMERA_PLAY_ANIMATED( "LEVEL_S_STAD_CP_03", "VIG_29_STAD_PAS_WALK_CAM", 0, 92.02000000, 1.19000000, 11.24000000, 180, 0, 0 );
    SET_FORCED_AIM_INTENTION_DIRECTION( 0.38618700, 0.92125200, 0.04642300 );
     /* P_PLAY_DEAD_CP_RADIO_CHATTER */ sub_77762();
    return;
}

/* P_PLAY_DEAD_CP_RADIO_CHATTER */ void sub_77762()
{
     /* WRITESCRIPTLOG */ sub_617( "GA", "Starting Radio Chatter.", 0 );
    l_U660 = GET_SOUND_ID();
    PLAY_SOUND_FROM_COORD( l_U660, "S_STAD_STORES_RADIO", l_U647._fU0 );
    return;
}

/* F_PASSOSWALK_HANDLEBLENDOUT */ int sub_77910()
{
    if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_STAD_CP_03", "VIG_29_STAD_PAS_WALK_CAM" )) - 1))
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0, 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( 0, 1065353216, 0 );
        CAMERA_FREEZE_FRAME( 1, 2000, 0, 0 );
        return 1;
    }
    return 0;
}

/* P_HANDLE_STATE_JOIN_PASSOS_IN_RESTAURANT */ void sub_78294(boolean bParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;

    if (bParam0)
    {
         /* WRITESCRIPTLOG */ sub_617( "[SA]", "Entering progression state STATE_PASSOS_FINDS_BODY_NIS.", "[STATE]" );
         /* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ sub_78434();
    }
    if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_78605()))
    {
         /* P_HANDLE_AMBIENT_SPEECH */ sub_78705();
    }
     /* P_HANDLE_PASSOS_CALL_MAX_DEAD_BODY */ sub_79850();
    if ( /* MAL_ISACTINTCOMPLETED */ sub_70120( ref g_U4007, 52, 1 ))
    {
        l_U1410 = 1;
    }
    if ((NOT (IS_ANY_SPEECH_PLAYING( g_U4007 ))) AND (l_U1410))
    {
        if ((IS_PLAYER_SHOOTDODGING()) AND (NOT l_U1409))
        {
            l_U1409 = 1;
        }
        else if ((NOT IS_PLAYER_SHOOTDODGING()) AND (l_U1409))
        {
            l_U1409 = 0;
            if (( /* F_GETRANDOMINTINRANGE */ sub_69968( 0, 2 )) == 0)
            {
                 /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_68559( 1, g_U4007, "PASSOS", ref uVar3, 2, 0 );
                 /* PLAY_SINGLE_SPEECH */ sub_68803( "SSTD_SDNC", ref uVar3, 7, 1 );
                 /* MAL_WRITESCRIPTLOG */ sub_9781( "PLAYING SSTD_SDNC" );
            }
        }
        else if ((NOT (IS_PED_IN_CROSSHAIR_CYLINDER( g_U4007, 3, 10000, 0, -1082130432 ))) AND ((NOT (IS_BULLET_TIME_ACTIVE( 1 ))) AND ((( /* F_GETRANDOMINTINRANGE */ sub_69968( 0, 2 )) == 0) AND ( /* MAL_HASPLAYERFIRED */ sub_68105( 1 )))))
        {
             /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_68559( 1, g_U4007, "PASSOS", ref uVar13, 2, 0 );
             /* PLAY_SINGLE_SPEECH */ sub_68803( "SSTD_PSOC", ref uVar13, 7, 1 );
             /* MAL_WRITESCRIPTLOG */ sub_9781( "PLAYING SSTD_PSOC" );
        };;;
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_80962( ref l_U675, 0 ))
    {
         /* WRITESCRIPTLOG */ sub_617( "GA", "Kicking off starting MID 04B", 0 );
         /* STARTTIMER */ sub_4447( ref l_U696 );
    }
    if ((NOT (IS_PED_DEAD( g_U4007 ))) AND ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ( /* ISTIMERDONE */ sub_4580( ref l_U696 ))))
    {
        g_U3876 = 1;
        l_U127 = 13;
         /* WRITESCRIPTLOG */ sub_617( "GA", "eCheckpointState = CP_FINISHED", 0 );
    }
    return;
}

/* P_GBL_REFRESH_PAYNE_KILLER_COUNT */ void sub_78434()
{
     /* WRITESCRIPTLOG */ sub_617( "MF", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - START", 0 );
    g_U4002 = GET_PAYNEKILLER_AMT();
     /* WRITESCRIPTLOG */ sub_617( "MF", "P_GBL_REFRESH_PAYNE_KILLER_COUNT - END", 0 );
    return;
}

/* IS_ANY_SPEECH_CURRENTLY_PLAYING */ void sub_78605()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

/* P_HANDLE_AMBIENT_SPEECH */ void sub_78705()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;

    if ( /* F_ISPLAYERINTRIGGERREGIONFIRSTTIME */ sub_78746( ref l_U727, 0 ))
    {
        return;
    }
    if (NOT ( /* HASTIMERBEENACTIVATED */ sub_4163( ref g_U3992 )))
    {
         /* P_CREATE_AND_START_TIMER */ sub_67988( ref g_U3992, g_U4001 );
    }
    if ((TIME_SINCE_LAST_MONOLOGUE() > 5000) AND ( /* F_GBL_HAS_PLAYER_JUST_ACQUIRED_PAIN_KILLERS */ sub_78882()))
    {
         /* WRITESCRIPTLOG */ sub_617( "MF", "Playing Speech: SSTD_MFSP", 0 );
         /* P_SPEECH_PLAY_MONOLOGUE */ sub_79151( ref g_U4003, ref uVar2 );
         /* RESETTIMER */ sub_5156( ref g_U3992 );
        return;
    }
    if ( /* F_ISPLAYERINTRIGGERREGION */ sub_70702( ref l_U1016, 0 ))
    {
        if ( /* F_GBL_IS_PLAYER_READY_TO_SAY_EXPLORE_SPEECH_MONOLOGUE */ sub_79293( ref l_U1263, 10000, 20000 ))
        {
             /* WRITESCRIPTLOG */ sub_617( "MF", "Playing Speech: SSTD_PECH", 0 );
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_79151( "SSTD_PECH", ref uVar2 );
            return;
        }
    }
    else if ((NOT l_U1263._fU16) AND ( /* HASTIMERBEENACTIVATED */ sub_4163( ref l_U1263 )))
    {
         /* WRITESCRIPTLOG */ sub_617( "MF", "Disabling ambient dialogue timer: tmr_FoodCourt_Amb_Mono", 0 );
         /* DISABLETIMER */ sub_79797( ref l_U1263 );
    }
    return;
}

/* F_ISPLAYERINTRIGGERREGIONFIRSTTIME */ void sub_78746(int iParam0, unknown uParam1)
{
    if (iParam0->_fU548)
    {
        return 0;
    }
    else
    {
        iParam0->_fU548 =  /* F_ISPLAYERINTRIGGERREGION */ sub_70702( iParam0, uParam1 );
    }
    return iParam0->_fU548;
}

/* F_GBL_HAS_PLAYER_JUST_ACQUIRED_PAIN_KILLERS */ int sub_78882()
{
    if (GET_PAYNEKILLER_AMT() > g_U4002)
    {
         /* WRITESCRIPTLOG */ sub_617( "MF", "Player picked up Payne Killers!", 0 );
        PRINTSTRING( "HAD: " );
         /* WRITE_INT */ sub_58347( g_U4002 );
        PRINTSTRING( "NOW: " );
         /* WRITE_INT */ sub_58347( GET_PAYNEKILLER_AMT() );
        g_U4002 = GET_PAYNEKILLER_AMT();
        return 1;
    }
    g_U4002 = GET_PAYNEKILLER_AMT();
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_79151(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_68445( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_68559( 0,  /* PLAYER_PED_ID */ sub_3312(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_68559( 1,  /* PLAYER_PED_ID */ sub_3312(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_68803( uParam0, uParam1, 8, 1 );
    return;
}

/* F_GBL_IS_PLAYER_READY_TO_SAY_EXPLORE_SPEECH_MONOLOGUE */ int sub_79293(int iParam0, unknown uParam1, unknown uParam2)
{
    if (NOT ( /* HASTIMERBEENACTIVATED */ sub_4163( iParam0 )))
    {
         /* WRITESCRIPTLOG */ sub_617( "MF", "F_GBL_IS_PLAYER_READY_TO_SAY_EXPLORE_SPEECH_MONOLOGUE - Starting Timer", 0 );
         /* CREATETIMER */ sub_4297( iParam0, 5000, 1, 0 );
         /* STARTTIMER */ sub_4447( iParam0 );
    }
    if ((GET_PED_SPEED(  /* PLAYER_PED_ID */ sub_3312() )) < 0.10000000)
    {
        iParam0->_fU12 = uParam1;
    }
    else
    {
        iParam0->_fU12 = uParam2;
    }
    if ( /* ISTIMERDONE */ sub_4580( iParam0 ))
    {
         /* WRITESCRIPTLOG */ sub_617( "MF", "F_GBL_IS_PLAYER_READY_TO_SAY_EXPLORE_SPEECH_MONOLOGUE - Timer is complete!", 0 );
        return 1;
    }
    return 0;
}

/* DISABLETIMER */ void sub_79797(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* P_HANDLE_PASSOS_CALL_MAX_DEAD_BODY */ void sub_79850()
{
    switch (l_U726)
    {
        case 0:
        if ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( l_U197 ))) AND (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( l_U176 ))))
        {
             /* WRITESCRIPTLOG */ sub_617( "SBA", "First time Passos calls to Max", "***" );
             /* P_PASSOS_CALL_MAX_DEAD_BODY */ sub_80013();
            l_U726 = 2;
        }
        break;
        case 1:
        if ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( l_U197 ))) AND (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( l_U176 ))))
        {
            if ( /* ISTIMERDONE */ sub_4580( ref l_U715 ))
            {
                 /* WRITESCRIPTLOG */ sub_617( "SBA", "Random timer is up", "***" );
                 /* P_PASSOS_CALL_MAX_DEAD_BODY */ sub_80013();
                l_U726 = 2;
            }
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_617( "SBA", "Max in Restaurant, waiting to restart random timer", "***" );
            l_U726 = 2;
        }
        break;
        case 2:
        if ((NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( l_U197 ))) AND (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_70789( l_U176 ))))
        {
             /* WRITESCRIPTLOG */ sub_617( "SBA", "Restarting random timer", "***" );
             /* CREATETIMER */ sub_4297( ref l_U715, GET_RANDOM_INT_IN_RANGE( l_U724, l_U725 ), 1, 0 );
             /* STARTTIMER */ sub_4447( ref l_U715 );
            l_U726 = 1;
        }
        break;
    }
    return;
}

/* P_PASSOS_CALL_MAX_DEAD_BODY */ void sub_80013()
{
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_PASSOS_CALL_MAX_DEAD_BODY start", 0 );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3312() ))) AND ((I_SEQUENCE_QUERY_ENTITY_STATE( ref g_U2764, "Passos", 3 )) AND (NOT (IS_PED_DEAD( g_U4007 )))))
    {
        PED_SET_ACTION_INTENTION( g_U4007, 37, 1000, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_3312() ) );
         /* RESET_SCRIPT_SPEECH_STRUCT */ sub_68445( ref l_U705 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_68559( 1, g_U4007, "PASSOS", ref l_U705, 2, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_68559( 0,  /* PLAYER_PED_ID */ sub_3312(), "MAX", ref l_U705, 2, 0 );
         /* PLAY_SINGLE_SPEECH */ sub_68803( "SSTD_STPD", ref l_U705, 7, 1 );
    }
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_PASSOS_CALL_MAX_DEAD_BODY end", 0 );
    return;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_80962(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_70832(  /* PLAYER_PED_ID */ sub_3312(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* P_RELEASE_STORE_ASSETS */ void sub_81398()
{
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_RELEASE_STORE_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_81483( ref l_U113, ref g_U1069 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_57234( g_U2378, ref g_U1069 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_81602( ref l_U123, ref g_U1214 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "DAM_KO", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "LEVEL_S_STAD_CP_03", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "LEVEL_S_STAD_PU", ref g_U1354 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "DAM_DEAD", ref g_U1354 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_82489( "SCRIPT_MISSION\S_STAD_STORES_RADIO", ref g_U2074 );
     /* P_UNLOAD_PLGE_ANIM_DICTS */ sub_82829( 0 );
     /* WRITESCRIPTLOG */ sub_617( "GA", "P_RELEASE_STORE_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_81483(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_57234( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_81602(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_81676( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_81676(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6751( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_82034(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6751( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_82489(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_6751( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_UNLOAD_PLGE_ANIM_DICTS */ void sub_82829(boolean bParam0)
{
    if (NOT bParam0)
    {
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_RIFLE_CROUCH", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_PSTL_CROUCH", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_RIFLE_CORE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_PSTL_CORE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_RIFLE_CORE_RELOAD", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_PSTL_CORE_RELOAD", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_RIFLE_HANDSIG", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_PSTL_HANDSIG", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_RIFLE_ACTIONS", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_PSTL_ACTIONS", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_RIFLE_KNEE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_PSTL_KNEE", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_RIFLE_COVER", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_PSTL_COVER", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_RIFLE_REACT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_PSTL_REACT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_RIFLE_COVER_EXIT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_PSTL_COVER_EXIT", ref g_U1354 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_82034( "PLGE_PSTL_FULLBODY", ref g_U1354 );
    }
    else
    {
         /* UNLOADANIMDICT */ sub_83452( "PLGE_RIFLE_CROUCH" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_PSTL_CROUCH" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_RIFLE_CORE" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_PSTL_CORE" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_RIFLE_CORE_RELOAD" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_PSTL_CORE_RELOAD" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_RIFLE_HANDSIG" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_PSTL_HANDSIG" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_RIFLE_ACTIONS" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_PSTL_ACTIONS" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_RIFLE_KNEE" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_PSTL_KNEE" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_RIFLE_COVER" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_PSTL_COVER" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_RIFLE_REACT" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_PSTL_REACT" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_RIFLE_COVER_EXIT" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_PSTL_COVER_EXIT" );
         /* UNLOADANIMDICT */ sub_83452( "PLGE_PSTL_FULLBODY" );
    }
    return;
}

/* UNLOADANIMDICT */ void sub_83452(unknown uParam0)
{
    REMOVE_ANIM_DICT( uParam0, 0 );
    return;
}

