void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U55 = {0, 0, 0};
    StrCopy( ref l_U58, "DUMMY", 32 );
    l_U66 = 1;
    l_U71 = 0;
    l_U72 = 0;
    l_U73 = 0;
    l_U76 = 0;
    l_U122 = 0;
    l_U123 = 0;
    l_U124 = 1500;
    l_U212 = "PED_DEF";
    l_U254 = 1.00000000;
    l_U266 = 0;
    l_U307 = 0;
    l_U336 = 12;
    l_U383 = 0;
    l_U385 = 0;
    l_U877 = -1;
    l_U882 = {1001.41700000, -48.13000000, 8.78000000};
    l_U885 = {1001.18000000, -47.98000000, 9.08000000};
    l_U888 = {1001.18000000, -47.77000000, 9.08000000};
    l_U918 = {1035.88000000, -49.30000000, 9.04000000};
    sub_545( "AT", "Script s_police_killHouse.sc is starting up...", 0 );
    sub_594();
    l_U383 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
        sub_704();
        if (l_U385 == 0)
        {
            sub_10471();
        }
        WAIT( 0 );
    }
    sub_5377();
    sub_35023();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_police_killHouse" );
    sub_545( "AT", "Script s_police_killHouse.sc is terminating...", 0 );
    return;
}

void sub_545(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    return;
}

void sub_594()
{
    sub_545( "AT", "P_SETUP_ASSET_ARRAYS", 0 );
    l_U924[0] = -893441735;
    l_U924[1] = -36467684;
    l_U924[2] = 1007533882;
    return;
}

void sub_704()
{
    if (g_U821 == 15)
    {
        switch (l_U385)
        {
            case 0:
            if ((sub_859()) || (IS_PED_DEAD( sub_786() )))
            {
                l_U385 = 1;
                sub_545( "AT", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            sub_1354( 1 );
            if (sub_4012())
            {
                l_U385 = 3;
            }
            else if ((sub_4052( 0 )) == 1)
            {
                l_U385 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD( sub_786() )))
            {
                l_U385 = 3;
                sub_545( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
            sub_545( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD( sub_786() ))) AND (NOT (IS_PLAYER_DEAD( sub_808() ))))
            {
                SET_PLAYER_CONTROL( sub_808(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK( sub_786() ))
                {
                    SET_PED_FORCED_TO_WALK( sub_786(), 0 );
                }
            }
            if ((g_U862[16]._fU40 != 4) AND (g_U862[16]._fU40 != 0))
            {
                sub_545( "CR", "Shutting down script for MCE_SHOOT_RANGE.", 0 );
                sub_5279( ref g_U862[16] );
                SET_EXITFLAG_FOR_SCRIPT( g_U862[16]._fU32 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            AUDIO_MUSIC_STOP_ONESHOT();
            sub_5377();
            sub_5874( 15 );
            l_U385 = 4;
            sub_545( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
            sub_545( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            sub_6255( ref l_U347, sub_786() );
            l_U385 = 5;
            sub_545( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
            sub_545( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U383 = 1;
            l_U385 = 0;
            sub_545( "AT", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

int sub_786()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED( sub_808() );
    }
    return 0;
}

void sub_808()
{
    return GET_PLAYER_ID();
}

int sub_859()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD( sub_786() )))
        {
            SET_PED_FORCED_TO_WALK( sub_786(), 0 );
            SET_PLAYER_FORCED_AIM( sub_808(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE( sub_808(), 1 );
            if ((IS_PED_VISIBLE( sub_786() )) == 0)
            {
                SET_PED_VISIBLE( sub_786(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

void sub_1354(boolean bParam0)
{
    int iVar3;

    if (NOT (IS_PED_DEAD( sub_786() )))
    {
        if (NOT (IS_PED_IN_COMBAT( sub_786() )))
        {
            if ((NOT l_U327._fU16) AND (NOT l_U327._fU20))
            {
                sub_545( "AT", "Starting painkiller dialogue timer.", 0 );
                sub_1480( ref l_U327, 3500, 1, 0 );
                sub_1616( ref l_U327 );
            }
            if ((l_U327._fU16) AND (sub_1732()))
            {
                sub_545( "AT", "Dialogue detected. Restarting painkiller dialogue timer.", 0 );
                sub_1480( ref l_U327, 3500, 1, 0 );
                sub_1616( ref l_U327 );
            }
            iVar3 = GET_PAYNEKILLER_AMT();
            if (iVar3 > l_U336)
            {
                if (NOT sub_1732())
                {
                    if ((l_U327._fU16) || (sub_1935( ref l_U327 )))
                    {
                        if (g_U4303 < 6)
                        {
                            if ((GET_RANDOM_INT_IN_RANGE( 0, 500 )) < 300)
                            {
                                sub_545( "GA", "Playing painkiller monologue.", 0 );
                                sub_2188( ref l_U337 );
                                sub_2270( 0, sub_786(), "MAX", ref l_U337, 2, 0 );
                                sub_2270( 1, sub_786(), "MAX", ref l_U337, 2, 0 );
                                sub_2512( "SPOL_PLFNDPL", ref l_U337, 8, 1 );
                                g_U4303++;
                            }
                            else
                            {
                                sub_545( "GA", "Not playing painkiller speech, failed random chance test.", 0 );
                            }
                        }
                        else
                        {
                            sub_545( "GA", "Not Playing painkiller speech, already played all 6 lines.", 0 );
                        }
                    }
                    else
                    {
                        sub_545( "GA", "Not playing painkiller speech, not long enough since last dialogue.", 0 );
                    }
                }
                else
                {
                    sub_545( "GA", "Not playing painkiller speech, another speech is currently playing.", 0 );
                }
            }
            l_U336 = iVar3;
        }
        if (sub_3642( l_U337 ))
        {
            if (NOT HAS_CUTSCENE_FINISHED())
            {
                sub_545( "GA", "Killing painkiller speech for cutscene playing.", 0 );
                sub_3882( ref l_U337, 0 );
            }
        }
    }
    if (bParam0)
    {
        sub_1480( ref l_U327, 20000, 1, 0 );
        sub_1616( ref l_U327 );
    }
    return;
}

void sub_1480(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

void sub_1616(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

void sub_1732()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

int sub_1935(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

void sub_2188(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

void sub_2270(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

void sub_2512(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return sub_2536( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

void sub_2536(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return sub_2591( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

int sub_2591(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT (sub_2626( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
    sub_3120( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

int sub_2626(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

void sub_3120(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

int sub_3642(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT (sub_3655( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

boolean sub_3655(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

void sub_3882(int iParam0, unknown uParam1)
{
    if (NOT (sub_3655( (iParam0^) )))
    {
        ;
    }
    else if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (iParam0->_fU8 == g_U6[iParam0->_fU4])
        {
            STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
        }
    }
    return;
}

void sub_4012()
{
    return g_U648;
}

int sub_4052(int iParam0)
{
    iParam0 = 1;
    switch (l_U123)
    {
        case 0:
        if (NOT (sub_4113( ref l_U125 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_786() )))
            {
                l_U124 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
            sub_1480( ref l_U125, l_U124, 1, 1 );
            sub_1616( ref l_U125 );
        }
        if (sub_1935( ref l_U125 ))
        {
            sub_545( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_786() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD( sub_808() )))
            {
                SET_PLAYER_CONTROL( sub_808(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U123 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U123 = 2;
            }
            else
            {
                l_U123 = 3;
            }
        }
        break;
        case 2:
        sub_545( "NS", "Player will QUIT", 0 );
        sub_4572();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
        sub_545( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        sub_4572();
        return 1;
        break;
    }
    return 0;
}

int sub_4113(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_4572()
{
    sub_545( "NS", "P_PostFailRetryCleanup", 0 );
    sub_4622( ref l_U125 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD( sub_808() )))
    {
        SET_PLAYER_CONTROL( sub_808(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U122 = 0;
    l_U122 = l_U122;
    l_U123 = 0;
    return;
}

void sub_4622(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

void sub_5279(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

void sub_5377()
{
    sub_545( "AT", "P_CLEANUP_KILLHOUSE", 0 );
    sub_5424( ref l_U584 );
    sub_5424( ref l_U527 );
    sub_5458( l_U610 );
    sub_5574( ref l_U879 );
    sub_5574( ref l_U915 );
    sub_5607( l_U923 );
    sub_5693( l_U881 );
    sub_5693( l_U917 );
    sub_5743();
    return;
}

void sub_5424(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_5458( (uParam0^)[I] );
    }
    return;
}

void sub_5458(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

void sub_5574(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_5607( (uParam0^)[I] );
    }
    return;
}

void sub_5607(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

void sub_5693(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

void sub_5743()
{
    if (l_U877 != -1)
    {
        STOP_SOUND( l_U877, 0 );
        RELEASE_SOUND_ID( l_U877 );
        l_U877 = -1;
        sub_545( "AT", "Stopping and releasing FIRING_RANGE_CEASE_FIRE!", 0 );
    }
    return;
}

void sub_5874(unknown uParam0)
{
    char[64] cVar3;
    unknown uVar19;

    if (NOT (IS_PED_DEAD( sub_786() )))
    {
        sub_5926( sub_786(), g_U2953[uParam0], g_U3083[uParam0] );
        FREEZE_PED_POSITION( sub_786(), 1 );
        if (NOT (IS_STRING_NULL( ref g_U1091[uParam0]._fU0 )))
        {
            StrCopy( ref cVar3, "Loading room: ", 64 );
            ConcatString(ref cVar3, ref g_U1091[uParam0]._fU0, 64);
            uVar19 = GET_INTERIOR_FROM_NAME( ref g_U1091[uParam0]._fU64, 0 );
            SET_INTERIOR_ACTIVE( uVar19, 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( uVar19, GET_HASH_KEY( ref g_U1091[uParam0]._fU0 ) );
        }
        FREEZE_PED_POSITION( sub_786(), 0 );
    }
    return;
}

void sub_5926(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

void sub_6255(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

    sub_545( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
    sub_6439( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
        sub_7516( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 = sub_7808( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
        sub_8168( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 = sub_7808( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
        sub_8168( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 = sub_7808( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
        sub_8168( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 = sub_8453( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
        sub_8168( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 = sub_8453( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
        sub_8168( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if ((sub_8946( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
    sub_9107( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING( sub_786(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
    sub_545( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

void sub_6439(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 = sub_6471( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

int sub_6471(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

void sub_7516(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

void sub_7808(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                }
            }
        }
    }
    else
    {
        sub_8124( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

void sub_8124(unknown uParam0)
{
    return;
}

void sub_8168(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

void sub_8453(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                }
            }
        }
    }
    else
    {
        sub_8124( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

int sub_8946(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

void sub_9107(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 = sub_6471( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
    sub_9179( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

void sub_9179(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

void sub_10471()
{
    int iVar2;
    int iVar3;
    unknown uVar4;
    float fVar5;

    iVar2 = l_U383;
    switch (l_U383)
    {
        case 0: break;
        case 1:
        sub_545( "AT", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
        sub_10643();
        sub_11036();
        sub_14022();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U383 = 2;
        sub_545( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
        sub_545( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        sub_14939();
        sub_18461();
        l_U383 = 3;
        sub_545( "AT", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if ((sub_18917( ref g_U2613 )) AND ((sub_18790( ref g_U2889 )) AND (sub_18670( ref g_U2468 ))))
        {
            g_U822[15] = 1;
            if ((NOT l_U347._fU0) AND (g_U820 == 15))
            {
                sub_545( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
                l_U383 = 4;
            }
            else
            {
                sub_545( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
                l_U383 = 6;
            }
        }
        break;
        case 4:
        sub_545( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        g_U842[15] = 1;
        if (NOT (sub_19274( ref l_U347 )))
        {
            sub_8453( sub_786(), 57534114, 200, 0, 0 );
            sub_7808( sub_786(), -862236369, 0, 200, 0 );
            sub_7808( sub_786(), -862236369, 1, 200, 0 );
            SET_PAYNEKILLER_AMT( 7 );
            l_U383 = 5;
            sub_545( "AT", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U383 = 6;
            sub_545( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD( sub_786() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER( sub_786(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER( sub_786(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( sub_786(), 0, 0 ) ))))
            {
                g_U821 = 15;
                sub_19810( ref l_U347, g_U821, sub_786(), g_U2953[15], g_U3083[15], g_U3127[15], g_U3171[15], 1 );
                l_U383 = 6;
                sub_545( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
            }
        }
        break;
        case 6:
        if (l_U384)
        {
            l_U555 = 1;
            l_U407 = 1;
            l_U881 = sub_23532( -36467684, l_U882, 0, 0, 90.00000000, 0, 0, 0 );
            if (DOES_OBJECT_EXIST( l_U881 ))
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U881, "MloRoom_range" );
                FREEZE_OBJECT_POSITION( l_U881, 1 );
            }
            l_U917 = sub_23532( 1007533882, l_U918, 0, 0, 0, 0, 0, 0 );
            if (DOES_OBJECT_EXIST( l_U917 ))
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U917, "MloRoom_Killhouse" );
                FREEZE_OBJECT_POSITION( l_U917, 1 );
            }
        }
        if (sub_24064())
        {
            l_U383 = 7;
            sub_545( "AT", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        break;
        case 7:
        if ((NOT (CUTSCENE_IS_LOADED( ref g_U3485 ))) AND (g_U842[15]))
        {
            sub_26819( 1, 1 );
            DO_SCREEN_FADE_IN( 0 );
            if (IS_DEATH_PANEL_WIPE_ALLOWED())
            {
                DO_SCREEN_FADE_IN( 0 );
            }
            SET_WEATHER_TYPE_NOW_PERSIST( "SUNNY" );
            sub_10768( ref g_U4121, 0 );
            sub_10768( ref g_U4128, 0 );
            sub_27154( ref g_U4121, ref g_U4128 );
            sub_27365( ref l_U879, ref l_U891 );
            if (g_U821 != 15)
            {
                g_U821 = 15;
                sub_19810( ref l_U347, g_U821, sub_786(), g_U2953[15], g_U3083[15], g_U3127[15], g_U3171[15], 1 );
            }
            if (NOT AUDIO_IS_MUSIC_PLAYING())
            {
                sub_545( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_6", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_6", "PRECINCT_01_1_6", 0, -1, 7000, -1082130432, 0 );
            }
            sub_26487( ref l_U527 );
            sub_26487( ref l_U584 );
            l_U383 = 8;
            sub_545( "AT", "eCheckpointState = CP_HANDLE_KILLHOUSE_GAMEPLAY", 0 );
        }
        break;
        case 8:
        if (l_U384)
        {
            sub_545( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_6 fade in over 4 seconds, old music out over 8 seconds", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_6", "PRECINCT_01_1_6", 0, -1, -1, -1082130432, 0 );
        }
        if (sub_28052())
        {
            sub_29589();
        }
        iVar3 = (sub_29933( ref l_U527 )) + (sub_29933( ref l_U584 ));
        if (DOES_PED_EXIST( l_U610 ))
        {
            if (NOT (IS_PED_DEAD( l_U610 )))
            {
                iVar3++;
            }
        }
        if (NOT l_U878)
        {
            if (((sub_29933( ref l_U527 )) + (sub_29933( ref l_U584 ))) < 5)
            {
                sub_545( "AT", "Enemies at 50%. Switching music.", 0 );
                sub_545( "AT", "Forcing music PRECINCT_FINAL mood PRECINCT_01_1_5", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_1_5", "PRECINCT_01_1_5", 0, 10000, 10000, -1082130432, 0 );
                l_U878 = 1;
            }
        }
        if (sub_28111( ref l_U894, 0 ))
        {
            l_U893 = 1;
        }
        if (NOT l_U893)
        {
            if (sub_30347( "SPOL_PLFNDPL", ref l_U879, ref l_U891 ))
            {
                sub_545( "SBA", "Playing Pill monologue for puiKillHousePainkillers", "..." );
                l_U893 = 1;
            }
        }
        if (sub_28111( ref l_U634, 0 ))
        {
            sub_29119( l_U527[0] );
            sub_29119( l_U527[1] );
            sub_30855( ref l_U527[0] );
            sub_31052( ref l_U527[1], "floor4", "Corner_Position137", 0 );
        }
        if (NOT l_U554)
        {
            if (((IS_PED_DEAD( l_U527[1] )) AND (IS_PED_DEAD( l_U527[0] ))) || (sub_28111( ref l_U655, 0 )))
            {
                sub_29119( l_U527[2] );
                sub_29119( l_U527[3] );
                sub_31341( ref l_U527[2], 0 );
                sub_31341( ref l_U527[3], 0 );
                sub_31433( l_U527[2], 1013.58000000, -60.09000000, 4.80000000, 4, 40, -1082130432, 3 );
                sub_31433( l_U527[3], 1011.97300000, -59.32400000, 4.80000000, 4, 40, -1082130432, 3 );
                sub_31540( ref l_U527[2] );
                sub_31540( ref l_U527[3] );
                sub_545( "SBA", "Expanded tethers for peds 2 and 3", 0 );
                sub_26005( ref l_U806[0], l_U527[2], 1 );
                sub_26005( ref l_U806[1], l_U527[2], 1 );
                sub_26005( ref l_U806[2], l_U527[2], 1 );
                sub_26005( ref l_U806[4], l_U527[2], 1 );
                sub_26005( ref l_U806[8], l_U527[2], 1 );
                sub_26005( ref l_U806[1], l_U527[3], 1 );
                sub_26005( ref l_U806[2], l_U527[3], 1 );
                sub_26005( ref l_U806[4], l_U527[3], 1 );
                l_U554 = 1;
            }
        }
        if (sub_28111( ref l_U676, 0 ))
        {
            sub_29119( l_U527[4] );
            sub_29119( l_U527[5] );
            sub_29119( l_U527[6] );
            sub_31052( ref l_U527[4], "floor4", "Corner_Position71", 0 );
            sub_31052( ref l_U527[5], "gencover", "5FBC25E3_5116CF77_Popover1", 0 );
            sub_31052( ref l_U527[6], "floor4", "Corner_Position79", 0 );
            sub_32060();
        }
        if (sub_28111( ref l_U697, 0 ))
        {
            sub_29119( l_U584[0] );
            TOGGLE_WEAPON_ATTACHMENT( GET_WEAPON_FROM_HAND( l_U584[0], 0, 0 ), 13, 1 );
            REGISTER_TARGET( l_U584[0], sub_786() );
            SET_LOCKED_TARGET( l_U584[0], sub_786() );
            TASK_COMBAT_PED( l_U584[0], sub_786() );
            sub_5458( l_U527[7] );
            sub_29119( l_U527[8] );
            sub_31052( ref l_U527[8], "GenCover", "5FBC25E3_B9E77F47_Corner1", 0 );
        }
        sub_32733();
        if (sub_28111( ref l_U611, 0 ))
        {
            sub_32961();
        }
        if (NOT l_U632)
        {
            if (sub_28153( l_U610, l_U781 ))
            {
                SET_PED_INVINCIBLE( l_U610, 0 );
                SET_PED_NO_RAGDOLL_TO_BULLET_UNLESS_DEAD( l_U610, 0 );
                l_U632 = 1;
            }
        }
        else if (NOT l_U633)
        {
            if (((sub_33478( ref g_U4009 )) > -0.05000000) AND ((sub_33478( ref g_U4009 )) < 0.05000000))
            {
                sub_545( "SBA", "Setting Killhouse exit one-way", 0 );
                sub_27172( ref g_U4009, 0.00000000, 75.00000000 );
                if (NOT (IS_PED_DEAD( l_U610 )))
                {
                    SET_PED_INVINCIBLE( l_U610, 0 );
                    SET_PED_NO_RAGDOLL_TO_BULLET_UNLESS_DEAD( l_U610, 0 );
                }
                l_U633 = 1;
            }
        }
        if (iVar3 == 1)
        {
            sub_33704( ref l_U527 );
            sub_33704( ref l_U584 );
            if (NOT (IS_PED_DEAD( l_U610 )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( l_U610 )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( l_U610, 1 );
                }
            }
        }
        if (iVar3 == 0)
        {
            if ((NOT l_U938._fU16) AND (NOT l_U938._fU20))
            {
                sub_1616( ref l_U938 );
                sub_27365( ref l_U915, ref l_U921 );
            }
            if (sub_33943())
            {
                if (sub_1935( ref l_U938 ))
                {
                    sub_34026( "SPOL_DWKLHSE", ref l_U928 );
                }
            }
            sub_1354( 0 );
        }
        if (sub_28111( ref l_U386, 0 ))
        {
            sub_34126();
        }
        if (sub_34254( l_U386 ))
        {
            if (sub_4113( ref l_U938 ))
            {
                sub_4622( ref l_U938 );
            }
            if (l_U877 != -1)
            {
                if (sub_10780( ref g_U4009 ))
                {
                    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( g_U4009._fU0, g_U4009._fU4, ref uVar4, ref fVar5 );
                    if ((uVar4) || ((fVar5 > -0.10000000) AND (fVar5 < 0.10000000)))
                    {
                        sub_545( "AT", "Door closed! Playing ALL CLEAR!", 0 );
                        sub_5743();
                        PLAY_SOUND_FROM_COORD( -1, "PRISONER_EXCHANGE_DOOR_BUTTON", g_U4009._fU4 );
                        sub_27172( ref g_U4009, 0.00000000, 75.00000000 );
                        if (NOT (IS_PED_DEAD( l_U610 )))
                        {
                            SET_PED_INVINCIBLE( l_U610, 0 );
                            SET_PED_NO_RAGDOLL_TO_BULLET_UNLESS_DEAD( l_U610, 0 );
                        }
                        l_U633 = 1;
                    }
                    else
                    {
                        sub_545( "at", "door is not closed", 0 );
                    }
                }
            }
        }
        if (sub_28111( ref l_U835, 0 ))
        {
            g_U862[16]._fU36 = 1;
        }
        if (sub_28111( ref l_U856, 0 ))
        {
            g_U842[16] = 1;
            sub_1616( ref l_U826 );
            l_U383 = 9;
            sub_545( "AT", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 9:
        if (sub_1935( ref l_U826 ))
        {
            sub_5743();
        }
        if (NOT l_U633)
        {
            if (((sub_33478( ref g_U4009 )) > -0.10000000) AND ((sub_33478( ref g_U4009 )) < 0.10000000))
            {
                sub_545( "SBA", "Setting Killhouse exit one-way", 0 );
                sub_27172( ref g_U4009, 0.00000000, 75.00000000 );
                if (NOT (IS_PED_DEAD( l_U610 )))
                {
                    SET_PED_INVINCIBLE( l_U610, 0 );
                    SET_PED_NO_RAGDOLL_TO_BULLET_UNLESS_DEAD( l_U610, 0 );
                }
                l_U633 = 1;
            }
        }
        if (g_U821 == 16)
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U383 = 0;
            sub_545( "AT", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U383 != iVar2)
    {
        l_U384 = 1;
    }
    else
    {
        l_U384 = 0;
    }
    return;
}

void sub_10643()
{
    sub_545( "AT", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U384 = 1;
    l_U878 = 0;
    l_U553 = 0;
    l_U554 = 0;
    l_U596 = 0;
    l_U893 = 0;
    l_U632 = 0;
    l_U633 = 0;
    l_U407 = 0;
    l_U408 = 0;
    l_U555 = 0;
    l_U556 = 0;
    sub_10768( ref g_U4009, 1 );
    sub_10768( ref g_U3995, 1 );
    sub_10768( ref g_U4002, 1 );
    sub_1480( ref l_U826, 2500, 1, 0 );
    sub_1480( ref l_U817, 3000, 1, 0 );
    sub_1480( ref l_U938, 9000, 1, 0 );
    return;
}

void sub_10768(int iParam0, int iParam1)
{
    if ((sub_10780( iParam0 )) == 0)
    {
        sub_10846( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

int sub_10780(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_10846(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

void sub_11036()
{
    sub_545( "AT", "P_SET_STATIC_DATA", 0 );
    sub_11115( ref l_U409[0], 1012.87200000, -62.79350000, 4.80023100, 165.71180000, -1983305255, 7, 3, 2, 0, 0 );
    sub_11115( ref l_U409[1], 1012.52000000, -62.13309000, 4.80022900, 199.83940000, -88105423, 7, 3, 2, 0, 0 );
    sub_11115( ref l_U409[2], 1010.65600000, -54.30459000, 4.80019600, 100.00000000, 171162196, 7, 3, 2, 0, 0 );
    sub_11115( ref l_U409[3], 1013.85900000, -52.66032000, 4.80021000, 119.60970000, 496943840, 7, 3, 2, 0, 0 );
    sub_11115( ref l_U409[4], 1020.45400000, -57.17445000, 4.80026100, 10.48268000, 1492281543, 7, 3, 2, 0, 0 );
    sub_11115( ref l_U409[5], 1024.73600000, -62.81292000, 4.80027800, 51.68561000, 1080155410, 7, 3, 2, 0, 0 );
    sub_11115( ref l_U409[6], 1025.53200000, -65.92851000, 4.80027900, 76.40356000, 1139881660, 7, 3, 2, 0, 0 );
    sub_11115( ref l_U409[7], 1025.58600000, -68.85862000, 4.80027700, 298.48010000, -1952390290, 7, 3, 2, 0, 0 );
    sub_11115( ref l_U409[8], 1031.67400000, -70.87954000, 4.80029700, 30.00000000, -679538760, 7, 3, 2, 0, 0 );
    sub_11115( ref l_U557[0], 1031.53600000, -61.52093000, 7.70716800, 104.97100000, 1326067522, 7, 3, 2, 0, 0 );
    sub_11115( ref l_U557[1], 1022.69000000, -68.45000000, 8.76000000, 82.95000000, -2023785959, 7, 3, 2, 0, 0 );
    sub_11115( ref l_U597, 1034.74400000, -47.64400000, 7.80000000, 180, -411727246, 7, 3, 2, 0, 0 );
    l_U593[0] = 1;
    l_U593[1] = 2;
    sub_11786( ref l_U894, "TRIG_ENTERING_KILLHOUSE", 1003.46000000, -50.11000000, 7.50000000, 4.70000000, 2.77000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11786( ref l_U634, "TRIGGER_ENEMIES1", 1010.22000000, -68.44000000, 4.77000000, 9.34000000, 2.47000000, 5.59000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_11786( ref l_U655, "TRIGGER_ENEMIES1A", 1013.20000000, -60.57200000, 4.77000000, 3.00000000, 5.00000000, 5.59000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_11786( ref l_U676, "TRIGGER_ENEMIES2", 1007.82000000, -56.27000000, 4.77000000, 3.00000000, 4.00000000, 5.59000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_11786( ref l_U697, "TRIGGER_ENEMIES3", 1012.99000000, -53.71000000, 4.77000000, 5.00000000, 5.00000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_11786( ref l_U718, "TRIGGER_LAST_ENEMIES", 1019.57000000, -56.11000000, 4.77000000, 3.00000000, 10.00000000, 5.59000000, 0.00000000, 0.00000000, -10.00000000, 1 );
    sub_11786( ref l_U739, "TRIGGER_SNIPERPOS1", 1010.87000000, -70.34000000, 4.72000000, 6.00000000, 5.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11786( ref l_U760, "TRIGGER_SNIPERPOS2", 1022.04000000, -61.81000000, 4.72000000, 12.00000000, 21.98000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11786( ref l_U781, "TRIGGER_SNIPERPOS3", 1032.81000000, -61.81000000, 4.72000000, 9.00000000, 21.98000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_11786( ref l_U611, "TB_DEPLOY_CHARGER", 1034.59000000, -65.47000000, 4.77000000, 2.00000000, 5.03000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_11786( ref l_U386, "TB_TRIGGER_ALARM", 1034.83000000, -48.29000000, 7.68000000, 2.00000000, 2.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_11786( ref l_U835, "TB_START_SR", 1035.10000000, -63.40000000, 4.77000000, 2.00000000, 4.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_11786( ref l_U856, "TB_END_KILLHOUSE", 1037.04000000, -44.37000000, 7.68000000, 5.00000000, 7.41000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12853( ref l_U805, "TETH_LONE_SNIPER", 1032.14000000, -60.95000000, 7.49000000, 5.00000000, 2.20000000, 4.00000000, 0.00000000, 0.00000000, 84.30000000, 1 );
    sub_12853( ref l_U802, "TETH_SNIPERS_FIRST", 1018.87500000, -67.61423000, 8.76532400, 1.50000000, 4.80000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_12853( ref l_U803, "TETH_SNIPERS_SECOND", 1020.81600000, -65.36088000, 8.76533400, 5.00000000, 1.50000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_12853( ref l_U804, "TETH_SNIPERS_THIRD", 1022.81100000, -67.29227000, 8.76533400, 1.50000000, 4.80000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_12853( ref l_U806[0], "TETH_GROUND_0", 1014.69000000, -68.21000000, 4.76000000, 8.70000000, 6.50000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12853( ref l_U806[1], "TETH_GROUND_1", 1013.44000000, -62.49000000, 4.76000000, 3.00000000, 4.00000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12853( ref l_U806[2], "TETH_GROUND_2", 1010.80000000, -58.68000000, 4.76000000, 4.80000000, 9.80000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12853( ref l_U806[3], "TETH_GROUND_3", 1010.80000000, -53.83000000, 4.76000000, 5.00000000, 9.80000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12853( ref l_U806[4], "TETH_GROUND_4", 1023.55000000, -55.28000000, 4.76000000, 8.00000000, 16.00000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12853( ref l_U806[5], "TETH_GROUND_5", 1026.45000000, -61.80000000, 4.76000000, 5.50000000, 7.50000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12853( ref l_U806[6], "TETH_GROUND_6", 1027.13000000, -68.48000000, 4.76000000, 8.30000000, 6.50000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12853( ref l_U806[7], "TETH_GROUND_7", 1032.14000000, -70.45000000, 4.76000000, 4.20000000, 4.20000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12853( ref l_U806[8], "TETH_GROUND_8", 1007.00000000, -67.92725000, 4.80018800, 10.00000000, 9.00000000, 4.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_12853( ref l_U816, "TETH_GROUND_LAST", 1033.32000000, -61.90000000, 4.76000000, 8.00000000, 20.79000000, 6.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    l_U543[0] = 434544317;
    l_U543[1] = 1964270085;
    l_U543[2] = 1964270085;
    l_U543[3] = 57534114;
    l_U543[4] = 1964270085;
    l_U543[5] = 434544317;
    l_U543[6] = 1964270085;
    l_U543[7] = 1964270085;
    l_U543[8] = 57534114;
    return;
}

void sub_11115(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

void sub_11786(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_12853(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_14022()
{
    sub_545( "AT", "P_CREATE_KILLHOUSE_PLACEMENTS", 0 );
    l_U879[0] = sub_14109( -4072149, l_U885, 0.00000000, 0.00000000, 60.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U879[0] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U879[0], "MloRoom_range" );
    }
    l_U915[0] = sub_14109( -4072149, 1035.98000000, -49.05000000, 9.06000000, 0, 0, 0, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U915[0] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U915[0], "MloRoom_Killhouse" );
    }
    l_U923 = CREATE_AMMOBAG_PLACEMENT_ROTATE( 1028.75000000, -65.43000000, 4.80000000, 0.00000000, 0.00000000, 2.30000000, 10.00000000, 3.00000000, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U923 ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U923, "MloRoom_Killhouse" );
        sub_14472( l_U923 );
    }
    return;
}

void sub_14109(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    return Result;
}

void sub_14472(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        SET_AMMOBAG_REGEN_TIME( uParam0, 10.00000000 );
        SET_AMMOBAG_REGEN_RANGE( uParam0, 3.00000000 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1088031219, 45 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 954369040, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1138793073, 95 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1087746638, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1295933220, 30 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1383321053, 85 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1481241171, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1889644301, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -790090695, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1742569970, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1575030772, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1622373246, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 558118158, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1701914198, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1126469201, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 936600426, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 205668857, 0 );
    }
    return;
}

void sub_14939()
{
    sub_545( "AT", "P_REQUEST_KILLHOUSE_PERSISTENT_ASSETS start", 0 );
    sub_15014( ref l_U924, ref g_U2468 );
    sub_16422( ref g_U3537, ref g_U2889 );
    sub_17418( 434544317, ref g_U2613 );
    sub_17418( 1964270085, ref g_U2613 );
    sub_17418( 10648147, ref g_U2613 );
    sub_17418( 57534114, ref g_U2613 );
    sub_545( "AT", "P_REQUEST_KILLHOUSE_PERSISTENT_ASSETS end", 0 );
    return;
}

void sub_15014(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_15049( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_15049(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 = sub_15084( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
            sub_15215( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

int sub_15084(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                sub_15215( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                sub_15215( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    sub_15215( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_15863( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                sub_15215( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_15215( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_15215(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15235( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

int sub_15235(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            if ((uParam1^)[I] == iParam0)
            {
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
        else
        {
            (uParam1^)[I] = nil;
            Result = I;
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

void sub_15863(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

void sub_16422(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_16443( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
        sub_16581( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_16443(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                sub_16581( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                sub_16581( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    sub_16581( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                    sub_15863( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                sub_16581( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
            sub_16581( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_16581(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15235( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_17418(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_17439( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
        sub_17571( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_17439(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                sub_17571( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                sub_17571( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    sub_17571( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_15863( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                sub_17571( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_17571( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_17571(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15235( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_18461()
{
    sub_545( "AT", "P_REQUEST_KILLHOUSE_NONPERSISTENT_ASSETS start", 0 );
    sub_545( "AT", "P_REQUEST_KILLHOUSE_NONPERSISTENT_ASSETS end", 0 );
    return;
}

int sub_18670(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_18790(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_18917(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_19274(unknown uParam0)
{
    sub_545( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
            sub_6255( uParam0, sub_786() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

void sub_19810(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

    sub_545( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
        sub_545( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
        sub_9107( iParam1 );
        sub_20069( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
            sub_20520( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
            sub_20520( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_20752( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
            sub_20520( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_20752( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_20752( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
            sub_20520( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_20752( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_20752( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_20752( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
            sub_20520( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_20752( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_20752( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_20752( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if (sub_20752( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
            sub_22310( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
    sub_545( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

void sub_20069(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 = sub_6471( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
        sub_545( "TEH", "Ending context", 0 );
        sub_545( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

void sub_20520(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

void sub_20752(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

void sub_22310(int iParam0)
{
    sub_8124( "CHECKPOINT DATA" );
    sub_22349( iParam0->_fU4 );
    sub_22372( iParam0->_fU16 );
    sub_22372( iParam0->_fU20 );
    sub_22372( iParam0->_fU24 );
    sub_22415( iParam0->_fU28 );
    sub_22415( iParam0->_fU56 );
    sub_22415( iParam0->_fU60 );
    sub_22415( iParam0->_fU64 );
    sub_22415( iParam0->_fU68 );
    sub_22415( iParam0->_fU72 );
    sub_22415( iParam0->_fU76 );
    sub_22415( iParam0->_fU80 );
    sub_22415( iParam0->_fU84 );
    sub_22415( iParam0->_fU88 );
    sub_22415( iParam0->_fU92 );
    sub_22372( iParam0->_fU32 );
    sub_22415( iParam0->_fU36 );
    sub_22415( iParam0->_fU40 );
    sub_22415( iParam0->_fU44 );
    sub_22372( iParam0->_fU136 );
    sub_22620( iParam0->_fU140 );
    sub_22415( iParam0->_fU52 );
    sub_8124( "---nRightHolsterAttachmentEnabled: " );
    sub_22415( iParam0->_fU96 );
    sub_8124( "---nRightHolsterAttachmentToggled: " );
    sub_22415( iParam0->_fU100 );
    sub_8124( "---nLeftHolsterAttachmentEnabled: " );
    sub_22415( iParam0->_fU104 );
    sub_8124( "---nLeftHolsterAttachmentToggled: " );
    sub_22415( iParam0->_fU108 );
    sub_8124( "---nRifleHolsterAttachmentEnabled: " );
    sub_22415( iParam0->_fU112 );
    sub_8124( "---nRifleHolsterAttachmentToggled: " );
    sub_22415( iParam0->_fU116 );
    sub_8124( "---nRightHandAttachmentEnabled: " );
    sub_22415( iParam0->_fU120 );
    sub_8124( "---nRightHandAttachmentToggled: " );
    sub_22415( iParam0->_fU124 );
    sub_8124( "---nLeftHandAttachmentEnabled: " );
    sub_22415( iParam0->_fU128 );
    sub_8124( "---nLeftHandAttachmentToggled: " );
    sub_22415( iParam0->_fU132 );
    sub_22415( l_U1 );
    sub_22415( 144 );
    return;
}

void sub_22349(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return;
}

void sub_22372(unknown uParam0)
{
    return;
}

void sub_22415(unknown uParam0)
{
    return;
}

void sub_22620(boolean bParam0)
{
    if (bParam0)
    {
        ;
    }
    return;
}

void sub_23532(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
        sub_23642( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

void sub_23642(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
        sub_8124( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

int sub_24064()
{
    char[64] cVar2;
    unknown uVar18;

    switch (l_U407)
    {
        case 1:
        sub_545( "AT", "eSpawnGroundEnemies = ENTITY_STATE_INIT", 0 );
        sub_24181( ref l_U537, 1056964608, 0 );
        l_U408 = 0;
        l_U407 = 2;
        sub_545( "AT", "eSpawnGroundEnemies = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating piGroundEnemies[", 64 );
        ConcatString(ref cVar2, l_U408, 64);
        ConcatString(ref cVar2, "]", 64);
        l_U527[l_U408] = sub_24484( ref l_U409[l_U408] );
        sub_25163( l_U527[l_U408], ref l_U537 );
        if (NOT (IS_PED_DEAD( l_U527[l_U408] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U527[l_U408], 1 );
            SET_PED_ALERTNESS( l_U527[l_U408], 3 );
            TASK_STAND_STILL( l_U527[l_U408], -1 );
            SET_ROOM_FOR_PED_BY_NAME( l_U527[l_U408], "MloRoom_Killhouse" );
            SET_PED_AI_TEMPLATE( l_U527[l_U408], "AIT_EXPERT" );
        }
        uVar18 = sub_8453( l_U527[l_U408], l_U543[l_U408], 25000, 0, 0 );
        if (l_U543[l_U408] != 1964270085)
        {
            sub_25644( ref uVar18, 14, 1 );
        }
        l_U408++;
        if (l_U408 >= l_U527)
        {
            l_U407 = 3;
            sub_545( "AT", "eSpawnGroundEnemies = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U537._fU0, 1 );
        sub_25885( ref l_U527, "GroundEnemies" );
        sub_25979();
        sub_26487( ref l_U527 );
        l_U407 = 4;
        sub_545( "AT", "eSpawnGroundEnemies = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

void sub_24181(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
        }
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

void sub_24484(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
        sub_23642( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
    sub_24963( iParam0->_fU40 );
    sub_25043( iParam0->_fU40 );
    return iParam0->_fU40;
}

void sub_24963(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

void sub_25043(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

void sub_25163(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
        sub_8124( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
            sub_24181( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
            sub_24181( iParam1, 1056964608, 0 );
        }
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

void sub_25644(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (GET_DOES_WEAPON_EXIST( (uParam0^) ))
    {
        if (bParam2)
        {
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
        else
        {
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
    }
    return;
}

void sub_25885(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

void sub_25979()
{
    sub_26005( ref l_U806[0], l_U527[0], 1 );
    sub_26005( ref l_U806[1], l_U527[0], 1 );
    sub_26005( ref l_U806[2], l_U527[0], 1 );
    sub_26005( ref l_U806[8], l_U527[0], 1 );
    sub_26005( ref l_U806[0], l_U527[1], 1 );
    sub_26005( ref l_U806[1], l_U527[1], 1 );
    sub_26005( ref l_U806[2], l_U527[1], 1 );
    sub_26005( ref l_U806[8], l_U527[1], 1 );
    sub_26005( ref l_U806[3], l_U527[2], 1 );
    sub_26005( ref l_U806[3], l_U527[3], 1 );
    sub_26005( ref l_U806[4], l_U527[4], 1 );
    sub_26005( ref l_U806[5], l_U527[4], 1 );
    sub_26005( ref l_U806[4], l_U527[5], 1 );
    sub_26005( ref l_U806[5], l_U527[5], 1 );
    sub_26005( ref l_U806[4], l_U527[6], 1 );
    sub_26005( ref l_U806[5], l_U527[6], 1 );
    sub_26005( ref l_U806[6], l_U527[7], 1 );
    sub_26005( ref l_U806[7], l_U527[7], 1 );
    sub_26005( ref l_U806[6], l_U527[8], 1 );
    sub_26005( ref l_U806[7], l_U527[8], 1 );
    return;
}

void sub_26005(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

void sub_26487(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_26518( (uParam0^)[I] );
    }
    return;
}

void sub_26518(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

void sub_26819(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD( sub_786() )))
    {
        SET_PLAYER_CONTROL( sub_808(), 1, 0 );
        SET_PED_INVINCIBLE( sub_786(), 0 );
        if (bParam0)
        {
            sub_26900();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

void sub_26900()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD( sub_786() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND( sub_786(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND( sub_786(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_786(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP( sub_786(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

void sub_27154(unknown uParam0, unknown uParam1)
{
    sub_27172( uParam0, 0, 90 );
    sub_27172( uParam1, 65446, 0 );
    sub_27282( uParam0, 1 );
    sub_27282( uParam1, 1 );
    return;
}

void sub_27172(int iParam0, float fParam1, float fParam2)
{
    if ((sub_10780( iParam0 )) == 0)
    {
        sub_10846( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        ;
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

void sub_27282(int iParam0, unknown uParam1)
{
    if ((sub_10780( iParam0 )) == 0)
    {
        sub_10846( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

void sub_27365(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if (DOES_PLACEMENT_EXIST( (uParam0^)[I] ))
        {
            sub_545( "RJM", "DO_ANY_PAINKILLERS_STILL_EXIST - Found a pill in there, we can still play some V.O.", 0 );
            (uParam1^)[I] = 1;
        }
        else
        {
            (uParam1^)[I] = 0;
        }
    }
    return;
}

int sub_28052()
{
    unknown uVar2;
    char[64] cVar3;

    switch (l_U555)
    {
        case 1:
        if (sub_28111( ref l_U739, 0 ))
        {
            sub_545( "AT", "eSpawnSnipers = ENTITY_STATE_INIT", 0 );
            sub_24181( ref l_U587, 1056964608, 0 );
            l_U556 = 0;
            l_U555 = 2;
            sub_545( "AT", "eSpawnSnipers = ENTITY_STATE_CREATING", 0 );
        }
        break;
        case 2:
        StrCopy( ref cVar3, "Creating psSnipers[", 64 );
        ConcatString(ref cVar3, l_U556, 64);
        ConcatString(ref cVar3, "]", 64);
        l_U584[l_U556] = sub_24484( ref l_U557[l_U556] );
        sub_25163( l_U584[l_U556], ref l_U587 );
        uVar2 = sub_8453( l_U584[l_U556], 10648147, 25000, 0, 0 );
        ENABLE_WEAPON_ATTACHMENT( uVar2, 13, 1 );
        SET_LASER_SIGHT_ATTACHMENT( uVar2, -938171172 );
        if (NOT (IS_PED_DEAD( l_U584[l_U556] )))
        {
            sub_26518( l_U584[l_U556] );
            SET_PED_AI_TEMPLATE( l_U584[l_U556], "AIT_SNIPER" );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U584[l_U556], 1 );
            SET_PED_COMBAT_ATTRIBUTES( l_U584[l_U556], 16, 0 );
            SET_PED_EMOTION_STATE( l_U584[l_U556], 3 );
            SET_PED_ALERTNESS( l_U584[l_U556], 3 );
            SET_PED_FLAG_BLOCK_BLINDFIRE_IN_COVER( l_U584[l_U556], 1 );
            SET_PED_FLAG_BLOCK_LEANFIRE_IN_COVER( l_U584[l_U556], 1 );
            SET_PED_PINNED_DOWN( l_U584[l_U556], 0, -1 );
            SET_PED_COMBAT_ATTRIBUTES( l_U584[l_U556], 1, 0 );
            SET_PED_IGNORE_LOS_CHECKS( l_U584[l_U556], 0 );
            SET_PED_FLAG_BLOCK_GORE_REACTION( l_U584[l_U556], 1 );
            SET_ROOM_FOR_PED_BY_NAME( l_U584[l_U556], "MloRoom_Killhouse" );
            SET_PED_ACCURACY( l_U584[l_U556], 31186664 );
        }
        l_U556++;
        if (l_U556 >= l_U584)
        {
            l_U555 = 3;
            sub_545( "AT", "eSpawnSnipers = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
        sub_25885( ref l_U584, "Sniper" );
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U587._fU0, 0 );
        SET_GROUP_MAX_NUMS_FIRING( l_U587._fU0, ref l_U593 );
        sub_26005( ref l_U805, l_U584[0], 1 );
        sub_26005( ref l_U802, l_U584[1], 1 );
        sub_545( "AT", "FIRST TIME Moving snipers to position 1.", 0 );
        sub_29119( l_U584[1] );
        if (NOT (IS_PED_DEAD( l_U584[1] )))
        {
            uVar2 = GET_WEAPON_FROM_HAND( l_U584[1], 0, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uVar2, 13, 1 );
            REGISTER_TARGET( l_U584[1], sub_786() );
            SET_LOCKED_TARGET( l_U584[1], sub_786() );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U584[1], 0 );
        }
        sub_29335( ref l_U584[1], l_U802 );
        l_U760._fU64 = 0;
        l_U781._fU64 = 0;
        sub_1480( ref l_U817, 2000, 1, 0 );
        sub_1616( ref l_U817 );
        l_U555 = 4;
        sub_545( "AT", "eSpawnSnipers = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

void sub_28111(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 = sub_28153( sub_786(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

int sub_28153(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

void sub_29119(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

void sub_29335(unknown uParam0, unknown uParam1)
{
    if ((NOT (IS_PED_DEAD( sub_786() ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        sub_29388( (uParam0^) );
        sub_26005( ref uParam1, (uParam0^), 1 );
    }
    return;
}

void sub_29388(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        RESET_PED_TETHERING( uParam0 );
    }
    return;
}

void sub_29589()
{
    if (sub_1935( ref l_U817 ))
    {
        if (sub_28111( ref l_U739, 0 ))
        {
            sub_545( "AT", "Moving snipers to position 1.", 0 );
            sub_29335( ref l_U584[1], l_U802 );
            l_U739._fU64 = 0;
            l_U781._fU64 = 0;
        }
        if (sub_28111( ref l_U760, 0 ))
        {
            sub_545( "AT", "Moving snipers to position 2.", 0 );
            sub_29335( ref l_U584[1], l_U803 );
            l_U739._fU64 = 0;
            l_U781._fU64 = 0;
        }
        if (sub_28111( ref l_U781, 0 ))
        {
            sub_545( "AT", "Moving snipers to position 3.", 0 );
            sub_29335( ref l_U584[1], l_U804 );
            l_U739._fU64 = 0;
            l_U760._fU64 = 0;
        }
        sub_1480( ref l_U817, 2000, 1, 0 );
        sub_1616( ref l_U817 );
    }
    return;
}

void sub_29933(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

int sub_30347(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    if ((IS_PLAYER_DEAD( sub_808() )) == 0)
    {
        if (sub_1732() == 0)
        {
            for ( I = 0; I <= ((uParam1^) - 1); I++ )
            {
                if ((uParam2^)[I])
                {
                    if ((HAS_PLACEMENT_BEEN_COLLECTED( (uParam1^)[I] )) || (NOT (DOES_PLACEMENT_EXIST( (uParam1^)[I] ))))
                    {
                        (uParam2^)[I] = 0;
                        if (TIME_SINCE_LAST_MONOLOGUE() > 5000)
                        {
                            sub_2188( ref l_U317 );
                            sub_30490( uParam0, ref l_U317 );
                            return 1;
                        }
                    }
                }
            }
        }
    }
    return 0;
}

void sub_30490(unknown uParam0, unknown uParam1)
{
    sub_545( "SBA", "P_SPEECH_PLAY_MAX_MONOLOGUE", "***" );
    if (sub_30547())
    {
        sub_2188( uParam1 );
        sub_2270( 0, sub_786(), "MAX", uParam1, 2, 0 );
        sub_2270( 1, sub_786(), "MAX", uParam1, 2, 0 );
        sub_2512( uParam0, uParam1, 8, 1 );
    }
    return;
}

int sub_30547()
{
    if (sub_30562( sub_786() ))
    {
        return 1;
    }
    return 0;
}

int sub_30562(unknown uParam0)
{
    if ((NOT (IS_PED_DEAD( uParam0 ))) AND (DOES_PED_EXIST( uParam0 )))
    {
        return 1;
    }
    return 0;
}

void sub_30855(unknown uParam0)
{
    unknown uVar3;

    if ((NOT (IS_PED_DEAD( sub_786() ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        SET_PED_FREEZE_PROCESSING( (uParam0^), 0 );
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0, sub_786() );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar3 );
        REGISTER_TARGET( (uParam0^), sub_786() );
        SET_LOCKED_TARGET( (uParam0^), sub_786() );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    return;
}

void sub_31052(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

    if ((NOT (IS_PED_DEAD( sub_786() ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        SET_PED_FREEZE_PROCESSING( (uParam0^), 0 );
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        OPEN_SEQUENCE_TASK( ref uVar6 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_SNAP_TO_COVER( 0, uParam1, uParam2, sub_786() );
        CLOSE_SEQUENCE_TASK( uVar6 );
        if (bParam3)
        {
            SET_PED_FLAG_LOCK_TO_COVER( (uParam0^), 1 );
        }
        else
        {
            SET_PED_FLAG_LOCK_TO_COVER( (uParam0^), 0 );
        }
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar6 );
        REGISTER_TARGET( (uParam0^), sub_786() );
        SET_LOCKED_TARGET( (uParam0^), sub_786() );
        CLEAR_SEQUENCE_TASK( uVar6 );
    }
    return;
}

void sub_31341(unknown uParam0, unknown uParam1)
{
    if (sub_30562( (uParam0^) ))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( (uParam0^), uParam1 );
    }
    return;
}

void sub_31433(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    if (sub_30562( uParam0 ))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( uParam0 );
        TASK_ATTACK_MOVE( uParam0, uParam1, uParam4, uParam5, uParam6, uParam7 );
    }
    return;
}

void sub_31540(unknown uParam0)
{
    if ((sub_30547()) AND (sub_30562( (uParam0^) )))
    {
        sub_31576( uParam0, sub_786() );
    }
    return;
}

void sub_31576(unknown uParam0, unknown uParam1)
{
    if ((sub_30562( uParam1 )) AND (sub_30562( (uParam0^) )))
    {
        REGISTER_TARGET( (uParam0^), uParam1 );
    }
    return;
}

void sub_32060()
{
    sub_545( "SBA", "P_CREATE_LAST_CHARGER_ENEMY", 0 );
    sub_32147( ref l_U597, ref l_U610, 57534114, "AIT_EXPERT", 0, 25000, 3, 0, 25000 );
    sub_32405( ref l_U610, g_U3461 );
    SET_PED_INVINCIBLE( l_U610, 1 );
    SET_PED_NO_RAGDOLL_TO_BULLET_UNLESS_DEAD( l_U610, 1 );
    sub_26518( l_U610 );
    sub_27172( ref g_U4009, -85.00000000, 75.00000000 );
    DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( g_U4009._fU0, g_U4009._fU4 ), 0 );
    return;
}

void sub_32147(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, int iParam7, unknown uParam8)
{
    unknown uVar11;

    sub_5458( (uParam1^) );
    (uParam1^) = sub_24484( uParam0 );
    if (sub_30562( (uParam1^) ))
    {
        uVar11 = sub_8453( (uParam1^), uParam2, uParam5, 0, 1 );
        if (iParam7 != 0)
        {
            sub_7808( (uParam1^), iParam7, 0, uParam8, 0 );
        }
        SET_PED_AI_TEMPLATE( (uParam1^), uParam3 );
        SET_PED_ALERTNESS( (uParam1^), uParam6 );
        switch (uParam4)
        {
            case 0: break;
            case 1:
            ENABLE_WEAPON_ATTACHMENT( uVar11, 13, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uVar11, 13, 1 );
            break;
            case 2:
            ENABLE_WEAPON_ATTACHMENT( uVar11, 14, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uVar11, 14, 1 );
            break;
            case 3:
            ENABLE_WEAPON_ATTACHMENT( uVar11, 12, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uVar11, 12, 1 );
            break;
        }
    }
    return;
}

void sub_32405(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    if (sub_30562( (uParam0^) ))
    {
        SET_ROOM_FOR_PED_BY_NAME( (uParam0^), ref uParam1 );
    }
    return;
}

void sub_32733()
{
    if (NOT l_U553)
    {
        if (((IS_PED_DEAD( l_U584[0] )) AND ((sub_29933( ref l_U527 )) <= 2)) || (sub_28111( ref l_U718, 0 )))
        {
            sub_545( "SBA", "P_FREE_UP_LAST_ENEMIES: Go go go...  GO!", 0 );
            if (NOT (IS_PED_DEAD( l_U527[8] )))
            {
                RESET_PED_TETHERING( l_U527[8] );
                TASK_ATTACK_MOVE( l_U527[8], 1026.66200000, -61.98876000, 4.80030500, 2, 1101004800, -1082130432, 3 );
            }
            l_U553 = 1;
        }
    }
    return;
}

void sub_32961()
{
    sub_545( "SBA", "P_DEPLOY_LAST_CHARGER: Send in the last guy", 0 );
    sub_29119( l_U610 );
    sub_33060( ref l_U610, 1034.91000000, -53.48791000, 7.81206200, 3 );
    sub_26005( ref l_U816, l_U610, 1 );
    sub_26005( ref l_U806[6], l_U610, 1 );
    sub_26005( ref l_U806[5], l_U610, 1 );
    sub_26005( ref l_U806[4], l_U610, 1 );
    return;
}

void sub_33060(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    unknown uVar7;

    if (sub_30562( (uParam0^) ))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( (uParam0^) );
        CLEAR_LOCKED_TARGET( (uParam0^) );
        sub_31540( uParam0 );
        sub_33112( uParam0 );
        OPEN_SEQUENCE_TASK( ref uVar7 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, uParam1, uParam4, 20000, 1048576000, 0, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        if (sub_30547())
        {
            TASK_COMBAT_PED( 0, sub_786() );
        }
        CLOSE_SEQUENCE_TASK( uVar7 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar7 );
        CLEAR_SEQUENCE_TASK( uVar7 );
    }
    return;
}

void sub_33112(unknown uParam0)
{
    if ((sub_30547()) AND (sub_30562( (uParam0^) )))
    {
        sub_33148( uParam0, sub_786() );
    }
    return;
}

void sub_33148(unknown uParam0, unknown uParam1)
{
    if ((sub_30562( uParam1 )) AND (sub_30562( (uParam0^) )))
    {
        SET_LOCKED_TARGET( (uParam0^), uParam1 );
    }
    return;
}

void sub_33478(int iParam0)
{
    int iVar3;
    float Result;

    if ((sub_10780( iParam0 )) == 0)
    {
        sub_10846( iParam0 );
    }
    iVar3 = 0;
    Result = 0.00000000;
    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar3, ref Result );
    return Result;
}

void sub_33704(unknown uParam0)
{
    int I;

    if ((sub_29933( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

int sub_33943()
{
    if ((l_U327._fU16) || (sub_1935( ref l_U327 )))
    {
        return 1;
    }
    return 0;
}

void sub_34026(unknown uParam0, unknown uParam1)
{
    sub_2188( uParam1 );
    sub_2270( 0, sub_786(), "MAX", uParam1, 2, 0 );
    sub_2270( 1, sub_786(), "MAX", uParam1, 2, 0 );
    sub_2512( uParam0, uParam1, 8, 1 );
    return;
}

void sub_34126()
{
    l_U877 = GET_SOUND_ID();
    PLAY_SOUND_FROM_COORD( l_U877, "FIRING_RANGE_CEASE_FIRE", g_U4009._fU4 );
    sub_545( "AT", "Playing FIRING_RANGE_CEASE_FIRE!", 0 );
    return;
}

void sub_34254(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return sub_28153( sub_786(), uParam0 );
}

void sub_35023()
{
    sub_545( "AT", "P_RELEASE_KILLHOUSE_ASSETS", 0 );
    sub_35081( ref l_U924, ref g_U2468 );
    sub_35504( ref g_U3537, ref g_U2889 );
    sub_35682( 434544317, ref g_U2613 );
    sub_35682( 1964270085, ref g_U2613 );
    sub_35682( 10648147, ref g_U2613 );
    sub_35682( 57534114, ref g_U2613 );
    return;
}

void sub_35081(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_35116( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_35116(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_35228( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

int sub_35228(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else if ((uParam1^)[I] == iParam0)
        {
            (uParam1^)[I] = nil;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            Result = I;
        }
        else
        {
            (uParam1^)[I] = nil;
        };;;
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

void sub_35504(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_35228( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_35682(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 = sub_35228( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

