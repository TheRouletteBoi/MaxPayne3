void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U74 = 0;
    l_U75 = 0;
    l_U76 = 1500;
    l_U87 = 0;
    l_U167 = "PED_DEF";
    l_U209 = 1.00000000;
    l_U221 = 0;
    l_U262 = 0;
    l_U291 = 12;
    l_U338 = 0;
    l_U340 = 0;
    l_U341 = 0;
    l_U599 = 2330;
    l_U639 = 0;
    l_U672 = 0;
    l_U708 = -1;
    l_U841 = {1033.29000000, -44.77000000, 7.80000000};
    sub_457( "AT", "Script s_police_firingRange.sc is starting up...", 0 );
    sub_506();
    l_U338 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
        sub_590();
        if (l_U341 == 0)
        {
            sub_10726();
        }
        WAIT( 0 );
    }
    sub_5255();
    sub_36371();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_police_firingRange" );
    sub_457( "AT", "Script s_police_firingRange.sc is terminating...", 0 );
    return;
}

void sub_457(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    return;
}

void sub_506()
{
    sub_457( "AT", "P_SETUP_ASSET_ARRAYS", 0 );
    l_U839[0] = -893441735;
    return;
}

void sub_590()
{
    if (g_U821 == 16)
    {
        switch (l_U341)
        {
            case 0:
            if ((sub_745()) || (IS_PED_DEAD( sub_672() )))
            {
                l_U341 = 1;
                sub_457( "AT", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            sub_1240( 1 );
            if (sub_3898())
            {
                l_U341 = 3;
            }
            else if ((sub_3938( 0 )) == 1)
            {
                l_U341 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD( sub_672() )))
            {
                l_U341 = 3;
                sub_457( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
            sub_457( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD( sub_672() ))) AND (NOT (IS_PLAYER_DEAD( sub_694() ))))
            {
                SET_PLAYER_CONTROL( sub_694(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK( sub_672() ))
                {
                    SET_PED_FORCED_TO_WALK( sub_672(), 0 );
                }
            }
            if ((g_U862[17]._fU40 != 4) AND (g_U862[17]._fU40 != 0))
            {
                sub_457( "CR", "Shutting down script for MCE_FINAL_FLOOR.", 0 );
                sub_5165( ref g_U862[17] );
                SET_EXITFLAG_FOR_SCRIPT( g_U862[17]._fU32 );
            }
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            AUDIO_MUSIC_STOP_ONESHOT();
            sub_5255();
            sub_6115( 16 );
            l_U341 = 4;
            sub_457( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
            sub_457( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            sub_6496( ref l_U302, sub_672() );
            SET_HELPER_TRACKING_MODE( 1 );
            l_U340 = 1;
            l_U341 = 5;
            sub_457( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
            sub_457( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U338 = 1;
            l_U341 = 0;
            sub_457( "AT", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

int sub_672()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED( sub_694() );
    }
    return 0;
}

void sub_694()
{
    return GET_PLAYER_ID();
}

int sub_745()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD( sub_672() )))
        {
            SET_PED_FORCED_TO_WALK( sub_672(), 0 );
            SET_PLAYER_FORCED_AIM( sub_694(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE( sub_694(), 1 );
            if ((IS_PED_VISIBLE( sub_672() )) == 0)
            {
                SET_PED_VISIBLE( sub_672(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

void sub_1240(boolean bParam0)
{
    int iVar3;

    if (NOT (IS_PED_DEAD( sub_672() )))
    {
        if (NOT (IS_PED_IN_COMBAT( sub_672() )))
        {
            if ((NOT l_U282._fU16) AND (NOT l_U282._fU20))
            {
                sub_457( "AT", "Starting painkiller dialogue timer.", 0 );
                sub_1366( ref l_U282, 3500, 1, 0 );
                sub_1502( ref l_U282 );
            }
            if ((l_U282._fU16) AND (sub_1618()))
            {
                sub_457( "AT", "Dialogue detected. Restarting painkiller dialogue timer.", 0 );
                sub_1366( ref l_U282, 3500, 1, 0 );
                sub_1502( ref l_U282 );
            }
            iVar3 = GET_PAYNEKILLER_AMT();
            if (iVar3 > l_U291)
            {
                if (NOT sub_1618())
                {
                    if ((l_U282._fU16) || (sub_1821( ref l_U282 )))
                    {
                        if (g_U4303 < 6)
                        {
                            if ((GET_RANDOM_INT_IN_RANGE( 0, 500 )) < 300)
                            {
                                sub_457( "GA", "Playing painkiller monologue.", 0 );
                                sub_2074( ref l_U292 );
                                sub_2156( 0, sub_672(), "MAX", ref l_U292, 2, 0 );
                                sub_2156( 1, sub_672(), "MAX", ref l_U292, 2, 0 );
                                sub_2398( "SPOL_PLFNDPL", ref l_U292, 8, 1 );
                                g_U4303++;
                            }
                            else
                            {
                                sub_457( "GA", "Not playing painkiller speech, failed random chance test.", 0 );
                            }
                        }
                        else
                        {
                            sub_457( "GA", "Not Playing painkiller speech, already played all 6 lines.", 0 );
                        }
                    }
                    else
                    {
                        sub_457( "GA", "Not playing painkiller speech, not long enough since last dialogue.", 0 );
                    }
                }
                else
                {
                    sub_457( "GA", "Not playing painkiller speech, another speech is currently playing.", 0 );
                }
            }
            l_U291 = iVar3;
        }
        if (sub_3528( l_U292 ))
        {
            if (NOT HAS_CUTSCENE_FINISHED())
            {
                sub_457( "GA", "Killing painkiller speech for cutscene playing.", 0 );
                sub_3768( ref l_U292, 0 );
            }
        }
    }
    if (bParam0)
    {
        sub_1366( ref l_U282, 20000, 1, 0 );
        sub_1502( ref l_U282 );
    }
    return;
}

void sub_1366(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

void sub_1502(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

void sub_1618()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

int sub_1821(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

void sub_2074(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

void sub_2156(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

void sub_2398(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return sub_2422( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

void sub_2422(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return sub_2477( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

int sub_2477(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT (sub_2512( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
    sub_3006( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

int sub_2512(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

void sub_3006(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

int sub_3528(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT (sub_3541( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

boolean sub_3541(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

void sub_3768(int iParam0, unknown uParam1)
{
    if (NOT (sub_3541( (iParam0^) )))
    {
        ;
    }
    else if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (iParam0->_fU8 == g_U6[iParam0->_fU4])
        {
            STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, uParam1, 0 );
        }
    }
    return;
}

void sub_3898()
{
    return g_U648;
}

int sub_3938(int iParam0)
{
    iParam0 = 1;
    switch (l_U75)
    {
        case 0:
        if (NOT (sub_3999( ref l_U77 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_672() )))
            {
                l_U76 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
            sub_1366( ref l_U77, l_U76, 1, 1 );
            sub_1502( ref l_U77 );
        }
        if (sub_1821( ref l_U77 ))
        {
            sub_457( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD( sub_672() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD( sub_694() )))
            {
                SET_PLAYER_CONTROL( sub_694(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U75 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U75 = 2;
            }
            else
            {
                l_U75 = 3;
            }
        }
        break;
        case 2:
        sub_457( "NS", "Player will QUIT", 0 );
        sub_4458();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
        sub_457( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        sub_4458();
        return 1;
        break;
    }
    return 0;
}

int sub_3999(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_4458()
{
    sub_457( "NS", "P_PostFailRetryCleanup", 0 );
    sub_4508( ref l_U77 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD( sub_694() )))
    {
        SET_PLAYER_CONTROL( sub_694(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U74 = 0;
    l_U74 = l_U74;
    l_U75 = 0;
    return;
}

void sub_4508(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

void sub_5165(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

void sub_5255()
{
    sub_457( "AT", "P_CLEANUP_FIRINGRANGE", 0 );
    sub_5300();
    sub_5425( ref l_U793 );
    SET_HELPER_TRACKING_MODE( 0 );
    sub_5458( g_U739._fU0 );
    ISEQ_TERMINATE( 879508723 );
    sub_5561( 879508723, ref g_U2662 );
    ISEQ_TERMINATE( 1691769945 );
    sub_5561( 1691769945, ref g_U2662 );
    sub_5959( ref l_U575 );
    sub_5993( l_U653 );
    sub_5993( l_U707 );
    return;
}

void sub_5300()
{
    if (l_U708 != -1)
    {
        STOP_SOUND( l_U708, 0 );
        RELEASE_SOUND_ID( l_U708 );
        l_U708 = -1;
        sub_457( "AT", "Stopping and releasing FIRING_RANGE_ALL_CLEAR!", 0 );
    }
    return;
}

void sub_5425(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_5458( (uParam0^)[I] );
    }
    return;
}

void sub_5458(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

void sub_5561(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_5673( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

int sub_5673(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else if ((uParam1^)[I] == iParam0)
        {
            (uParam1^)[I] = nil;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            Result = I;
        }
        else
        {
            (uParam1^)[I] = nil;
        };;;
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

void sub_5959(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_5993( (uParam0^)[I] );
    }
    return;
}

void sub_5993(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

void sub_6115(unknown uParam0)
{
    char[64] cVar3;
    unknown uVar19;

    if (NOT (IS_PED_DEAD( sub_672() )))
    {
        sub_6167( sub_672(), g_U2953[uParam0], g_U3083[uParam0] );
        FREEZE_PED_POSITION( sub_672(), 1 );
        if (NOT (IS_STRING_NULL( ref g_U1091[uParam0]._fU0 )))
        {
            StrCopy( ref cVar3, "Loading room: ", 64 );
            ConcatString(ref cVar3, ref g_U1091[uParam0]._fU0, 64);
            uVar19 = GET_INTERIOR_FROM_NAME( ref g_U1091[uParam0]._fU64, 0 );
            SET_INTERIOR_ACTIVE( uVar19, 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( uVar19, GET_HASH_KEY( ref g_U1091[uParam0]._fU0 ) );
        }
        FREEZE_PED_POSITION( sub_672(), 0 );
    }
    return;
}

void sub_6167(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

void sub_6496(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

    sub_457( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
    sub_6680( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
        sub_7757( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 = sub_8049( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
        sub_8409( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 = sub_8049( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
        sub_8409( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 = sub_8049( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
        sub_8409( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 = sub_8694( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
        sub_8409( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 = sub_8694( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
        sub_8409( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if ((sub_9187( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
    sub_9348( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING( sub_672(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
    sub_457( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

void sub_6680(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 = sub_6712( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

int sub_6712(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

void sub_7757(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

void sub_8049(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                }
            }
        }
    }
    else
    {
        sub_8365( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

void sub_8365(unknown uParam0)
{
    return;
}

void sub_8409(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

void sub_8694(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                }
            }
        }
    }
    else
    {
        sub_8365( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

int sub_9187(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

void sub_9348(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 = sub_6712( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
    sub_9420( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

void sub_9420(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

void sub_10726()
{
    int iVar2;
    int I;

    iVar2 = l_U338;
    switch (l_U338)
    {
        case 0: break;
        case 1:
        sub_457( "AT", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
        sub_10922();
        sub_11828();
        sub_13724();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U338 = 2;
        sub_457( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
        sub_457( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        sub_14869();
        sub_18593();
        l_U338 = 3;
        sub_457( "AT", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if ((sub_21149( ref g_U2662 )) AND ((sub_21028( ref g_U2613 )) AND ((sub_20901( ref g_U2889 )) AND (sub_20781( ref g_U2468 )))))
        {
            g_U822[16] = 1;
            if ((NOT l_U302._fU0) AND (g_U820 == 16))
            {
                sub_457( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
                l_U338 = 4;
            }
            else
            {
                sub_457( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
                l_U338 = 6;
            }
        }
        break;
        case 4:
        sub_457( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        l_U340 = 1;
        if (NOT (sub_21573( ref l_U302 )))
        {
            sub_8694( sub_672(), 57534114, 200, 0, 0 );
            sub_8049( sub_672(), -862236369, 0, 200, 0 );
            sub_8049( sub_672(), -862236369, 1, 200, 0 );
            SET_PAYNEKILLER_AMT( 7 );
            sub_6167( sub_672(), g_U2953[16], g_U3083[16] );
            l_U338 = 5;
            sub_457( "AT", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U338 = 6;
            sub_457( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD( sub_672() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER( sub_672(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER( sub_672(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND( sub_672(), 0, 0 ) ))))
            {
                g_U821 = 16;
                sub_22136( ref l_U302, g_U821, sub_672(), g_U2953[16], g_U3083[16], g_U3127[16], g_U3171[16], 1 );
                l_U338 = 6;
                sub_457( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
            }
        }
        break;
        case 6:
        if (l_U339)
        {
            l_U468 = 1;
        }
        if (sub_25829())
        {
            l_U338 = 7;
            sub_457( "AT", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        break;
        case 7:
        if (sub_28107( l_U342 ))
        {
            sub_28188();
            sub_28914();
            l_U338 = 8;
            sub_457( "AT", "eCheckpointState = CP_START_SHOOTING_RANGE_COMBAT", 0 );
        }
        break;
        case 8:
        if (l_U340)
        {
            if (NOT (IS_PLAYER_DEAD( sub_694() )))
            {
                SNAP_PLAYER_TO_COVERPOINT( sub_694(), "GenCover", "5FBC25E3_673F1030_Corner2", 0 );
                DO_SCREEN_FADE_IN( 0 );
                SET_PLAYER_CONTROL( sub_694(), 1, 0 );
                SET_HELPER_TRACKING_MODE( 0 );
                if (IS_DEATH_PANEL_WIPE_ALLOWED())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
            }
            sub_457( "AT", "Setting music. TRACK: PRECINCT_FINAL MOOD: PRECINCT_01_4_5", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_4_5", "", 0, 1000, 10000, -1082130432, 0 );
        }
        else
        {
            sub_457( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_4_5_6", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_4_5", "", 0, 1000, 10000, -1082130432, 0 );
        }
        if (g_U821 != 16)
        {
            g_U821 = 16;
            sub_22136( ref l_U302, g_U821, sub_672(), g_U2953[16], g_U3083[16], g_U3127[16], g_U3171[16], 1 );
        }
        sub_29979();
        sub_1502( ref l_U709 );
        l_U338 = 9;
        sub_457( "AT", "eCheckpointState = CP_HANDLE_SHOOTING_RANGE_COMBAT", 0 );
        break;
        case 9:
        if (sub_1821( ref l_U709 ))
        {
            sub_30197();
        }
        if (sub_1821( ref l_U600 ))
        {
            sub_30327();
        }
        if (sub_1821( ref l_U609 ))
        {
            sub_30524();
        }
        if (sub_30647( ref l_U405, 0 ))
        {
            sub_457( "RJM", "Bullet proofing, but this might be very bad!", 0 );
            sub_30811( ref l_U600 );
            sub_30811( ref l_U609 );
            for ( I = 0; I <= (l_U575 - 1); I++ )
            {
                if (sub_28296( l_U575[I] ))
                {
                    if (I == 0)
                    {
                        SET_PED_FLAG_FIRE_UNTIL_EMPTY_IN_COVER( l_U575[I], 0 );
                        SET_PED_FLAG_FORCE_LEANFIRE_IN_COVER( l_U575[I], 0 );
                    }
                    SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U575[I], 0 );
                    SET_PED_FLAG_LOCK_TO_COVER( l_U575[I], 0 );
                }
            }
        }
        if (sub_30647( ref l_U363, 0 ))
        {
            sub_30995( ref g_U4009, 0 );
            DOOR_FIND_CLOSEST_SET_FORCE_CLOSE( g_U4009._fU0, g_U4009._fU4, 1, 0 );
        }
        if ((NOT l_U639) AND (((sub_31159( ref l_U575 )) <= 5) || (sub_28107( l_U618 ))))
        {
            sub_457( "AT", "Mobilizing rear guard and dealing with the door.", 0 );
            sub_11524( ref g_U4149, 1 );
            sub_11524( ref g_U4156, 1 );
            DOOR_FIND_CLOSEST_SET_FORCE_CLOSE( g_U4149._fU0, g_U4149._fU4, 1, 0 );
            DOOR_FIND_CLOSEST_SET_FORCE_CLOSE( g_U4156._fU0, g_U4156._fU4, 1, 0 );
            sub_30995( ref g_U4149, 0 );
            sub_30995( ref g_U4156, 0 );
            sub_1502( ref l_U760 );
            l_U639 = 1;
        }
        if (sub_1821( ref l_U760 ))
        {
            if (NOT (sub_31440( g_U4149, 1 )))
            {
                sub_457( "AT", "Locking rear left door.", 0 );
                sub_11450( ref g_U4149, 0 );
                sub_11524( ref g_U4149, 1 );
                sub_31594( ref g_U4149, 1, 0 );
                sub_30995( ref g_U4149, 0 );
            }
            if (NOT (sub_31440( g_U4156, 1 )))
            {
                sub_457( "AT", "Locking rear right door.", 0 );
                sub_11450( ref g_U4156, 0 );
                sub_11524( ref g_U4156, 1 );
                sub_31594( ref g_U4156, 1, 0 );
                sub_30995( ref g_U4156, 0 );
            }
            for ( I = 0; I < l_U575; I++ )
            {
                if (sub_28125( l_U575[I], l_U739 ))
                {
                    sub_457( "AT", "Enemy is stuck. Cleaning ped.", 0 );
                    sub_5993( l_U575[I] );
                }
            }
        }
        sub_31875( ref l_U575 );
        sub_32013( ref l_U575, -1054867456, 0, 1 );
        if ((NOT l_U838) AND ((sub_31159( ref l_U575 )) == 0))
        {
            sub_457( "GA", "Forcing music PRECINCT_FINAL mood PRECINCT_01_5, fade out over 9 seconds", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "PRECINCT_FINAL", "PRECINCT_01_5", "PRECINCT_01_5", 0, -1, 9000, -1082130432, 0 );
            l_U838 = 1;
        }
        if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ((sub_31159( ref l_U575 )) == 0))
        {
            sub_32369();
            sub_32691();
            sub_1502( ref l_U654 );
            l_U338 = 10;
            sub_457( "AT", "eCheckpointState = CP_SHOOTING_RANGE_POST_COMBAT", 0 );
        }
        break;
        case 10:
        if (NOT l_U672)
        {
            if (sub_32946())
            {
                if (sub_1821( ref l_U654 ))
                {
                    sub_457( "AT", "Unlocking doors.", 0 );
                    sub_11061( ref g_U4149, 0 );
                    sub_11061( ref g_U4156, 0 );
                    sub_33207();
                    sub_457( "GA", "Playing music one shot PRECINCT_ONESHOT_1", 0 );
                    AUDIO_MUSIC_PLAY_ONESHOT();
                    sub_1502( ref l_U663 );
                    l_U672 = 1;
                    g_U862[17]._fU36 = 1;
                }
            }
        }
        else if (sub_1821( ref l_U663 ))
        {
            sub_33552();
        }
        if (sub_33735( ref l_U771, l_U653, 0 ))
        {
            sub_457( "AT", "Opening door.", 0 );
            sub_11450( ref g_U4149, 1 );
            sub_11450( ref g_U4156, 1 );
            sub_11283( ref g_U4149, 0, 0, 1065353216 );
            sub_11283( ref g_U4156, 1, 0, 1065353216 );
        }
        if (sub_30647( ref l_U673, 0 ))
        {
            if (sub_33927())
            {
                if (NOT (IS_PED_DEAD( l_U653 )))
                {
                    sub_34014( "SPOL_DSNKSUF", ref l_U809 );
                }
            }
            sub_457( "AT", "Final enemy is alive and offscreen. Cleaning him.", 0 );
            sub_28391( l_U707 );
            if ((DOES_PED_EXIST( l_U707 )) AND ((IS_PLAYER_DEAD( sub_694() )) == 0))
            {
                SET_PED_CAN_TRIGGER_BULLET_CAM( l_U707, 1 );
                REGISTER_TARGET( l_U707, sub_672() );
                SET_LOCKED_TARGET( l_U707, sub_672() );
                TASK_COMBAT_PED( l_U707, sub_672() );
            }
            l_U338 = 11;
            sub_457( "AT", "eCheckpointState = CP_REPAIR_SHOP", 0 );
        }
        break;
        case 11:
        sub_34320();
        if (IS_PED_DEAD( l_U707 ))
        {
            if ((NOT l_U829._fU16) AND (NOT l_U829._fU20))
            {
                sub_1502( ref l_U829 );
                sub_35771( ref l_U793, ref l_U796 );
            }
            sub_1240( 0 );
        }
        if ((sub_33927()) AND (NOT sub_1618()))
        {
            if (sub_1821( ref l_U829 ))
            {
                sub_34014( "SPOL_BCKHLW", ref l_U819 );
            }
        }
        if (sub_30647( ref l_U384, 0 ))
        {
            sub_11061( ref g_U4149, 1 );
            sub_11061( ref g_U4156, 1 );
        }
        if (sub_30647( ref l_U718, 0 ))
        {
            g_U842[17] = 1;
            sub_3768( ref l_U819, 0 );
            sub_3768( ref l_U809, 0 );
            sub_3768( ref l_U799, 0 );
            PLAY_IMAGEFX( "CONTRAST_ZOOM_FAST_HARD", 4, 1 );
            l_U338 = 12;
            sub_457( "AT", "eCheckpointState = CP_FINISHED", 0 );
        }
        break;
        case 12:
        if (g_U821 == 17)
        {
            sub_457( "AT", "eCheckpointState = CP_FINISHED", 0 );
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U338 = 0;
            sub_457( "AT", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U338 != iVar2)
    {
        l_U339 = 1;
    }
    else
    {
        l_U339 = 0;
    }
    return;
}

void sub_10922()
{
    sub_457( "AT", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U339 = 1;
    l_U708 = -1;
    l_U639 = 0;
    l_U672 = 0;
    l_U838 = 0;
    sub_1366( ref l_U709, 2000, 1, 0 );
    sub_1366( ref l_U760, 10000, 1, 0 );
    sub_1366( ref l_U654, 1500, 1, 0 );
    sub_1366( ref l_U663, 2200, 1, 0 );
    sub_11061( ref g_U4149, 0 );
    sub_11061( ref g_U4156, 0 );
    sub_11283( ref g_U4156, 1, 1, 1065353216 );
    sub_11283( ref g_U4149, 1, 1, 1065353216 );
    sub_11450( ref g_U4149, 0 );
    sub_11450( ref g_U4156, 0 );
    sub_11524( ref g_U4149, 0 );
    sub_11524( ref g_U4156, 0 );
    sub_1366( ref l_U829, 3000, 1, 0 );
    sub_11611( ref g_U4009 );
    sub_11611( ref g_U4149 );
    sub_11611( ref g_U4156 );
    sub_1366( ref l_U600, 3000, 1, 0 );
    sub_1366( ref l_U609, 3000, 1, 0 );
    l_U468 = 0;
    l_U469 = 0;
    return;
}

void sub_11061(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if ((sub_11073( iParam0 )) == 0)
    {
        sub_11139( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

int sub_11073(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

void sub_11139(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

void sub_11283(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if ((sub_11073( iParam0 )) == 0)
    {
        sub_11139( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

void sub_11450(int iParam0, unknown uParam1)
{
    if ((sub_11073( iParam0 )) == 0)
    {
        sub_11139( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

void sub_11524(int iParam0, unknown uParam1)
{
    if ((sub_11073( iParam0 )) == 0)
    {
        sub_11139( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

void sub_11611(int iParam0)
{
    unknown uVar3;

    uVar3 = DOOR_FIND_CLOSEST( iParam0->_fU0, iParam0->_fU4 );
    if (DOES_OBJECT_EXIST( uVar3 ))
    {
        DOOR_SET_IS_AFFECTED_BY_BULLETS( uVar3, 0 );
    }
    else
    {
        SCRIPT_ASSERT( "Tried to set a doorto be not affected by bullets but could not find door!", 0 );
    }
    return;
}

void sub_11828()
{
    sub_457( "AT", "P_SET_STATIC_DATA", 0 );
    sub_11906( ref l_U470[0], 1021.60000000, -43.28000000, 7.80000000, 65446, -1966116049, 7, 3, 2, 0, 0 );
    sub_11906( ref l_U470[1], 1023.89000000, -47.38000000, 7.80000000, 65446, -1635333625, 7, 3, 2, 0, 0 );
    sub_11906( ref l_U470[2], 1019.45000000, -40.63000000, 7.80000000, -90.00000000, -1326496690, 7, 3, 2, 0, 0 );
    sub_11906( ref l_U470[3], 1019.45000000, -39.42000000, 7.80000000, -90.00000000, 835575742, 7, 3, 2, 0, 0 );
    sub_11906( ref l_U470[4], 1016.26000000, -43.66000000, 7.80000000, 180.00000000, 539682560, 7, 3, 2, 0, 0 );
    sub_11906( ref l_U470[5], 1016.27000000, -44.58000000, 7.80000000, -90.00000000, 202977358, 7, 3, 2, 0, 0 );
    sub_11906( ref l_U470[6], 1010.35000000, -41.76000000, 7.80000000, 65446, 614555232, 7, 3, 2, 0, 0 );
    sub_11906( ref l_U470[7], 1010.35000000, -40.12000000, 7.80000000, -112.50000000, 1036961553, 7, 3, 2, 0, 0 );
    sub_11906( ref l_U640, 1008.36400000, -34.39241000, 7.79724400, 222.17810000, -574496338, 7, 3, 2, 0, 0 );
    sub_11906( ref l_U694, 1020.95200000, -21.20250000, 7.80007700, 222.17810000, -1966116049, 7, 3, 2, 0, 0 );
    sub_12459( ref l_U618, "TB_WAVE2", 1021.74000000, -42.86000000, 7.68000000, 12.00000000, 5.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12459( ref l_U718, "TB_CUTSCENE_OUTER", 1017.42000000, -14.00000000, 11.00000000, 3.50000000, 3.20000000, 3.40000000, 0.00000000, 0.00000000, -180.00000000, 1 );
    sub_12459( ref l_U771, "TB_OPEN_DOOR", 1008.11000000, -36.01000000, 7.68000000, 2.00000000, 3.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12459( ref l_U739, "TB_DETECT_FAIL_DEPLOY", 1015.14000000, -33.71000000, 7.68000000, 6.00000000, 28.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12459( ref l_U673, "TB_CLEAN_SURRENDER_ENEMY", 1015.75000000, -34.23000000, 7.76000000, 5.00000000, 6.00000000, 3.00000000, 0.00000000, 0.00000000, 90.00000000, 1 );
    sub_12459( ref l_U342, "TB_START_FIRING_RANGE", 1034.83000000, -46.05000000, 7.68000000, 5.00000000, 4.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12459( ref l_U363, "TB_CLOSE_FRANGE_DOOR", 1034.83000000, -44.37000000, 7.68000000, 5.00000000, 4.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12459( ref l_U405, "TB_RESET_PEDFLAGS", 1028.68000000, -42.86000000, 7.68000000, 12.00000000, 5.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_12459( ref l_U384, "TB_CLOSE_WORKSHOP_DOOR", 1021.96200000, -28.82364000, 7.80007700, 5.00000000, 4.00000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    sub_12459( ref l_U426, "TB_IMAGEFX_STAIRS01", 1020.97000000, -15.27600000, 7.60000000, 3.50000000, 3.20000000, 3.40000000, 0.00000000, 0.00000000, -180.00000000, 1 );
    sub_12459( ref l_U447, "TB_IMAGEFX_STAIRS02", 1019.19000000, -9.73000000, 9.63000000, 6.00000000, 3.20000000, 3.40000000, 0.00000000, 0.00000000, -180.00000000, 1 );
    sub_13405( ref l_U769, "TETH_AWAY_FROM_DOOR1", 1008.90000000, -44.89000000, 7.68000000, 8.00000000, 5.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_13405( ref l_U770, "TETH_AWAY_FROM_DOOR2", 1023.75000000, -42.86000000, 7.68000000, 12.00000000, 26.00000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
    sub_13405( ref l_U792, "TETH_WORKSHOP", 1022.74100000, -26.19295000, 7.80007700, 18.00000000, 18.00000000, 3.50000000, 0.00000000, 0.00000000, -0.00000000, 1 );
    l_U590[0] = 1964270085;
    l_U590[1] = 434544317;
    l_U590[2] = 434544317;
    l_U590[3] = -862236369;
    l_U590[4] = 1964270085;
    l_U590[5] = 1964270085;
    l_U590[6] = 434544317;
    l_U590[7] = -862236369;
    return;
}

void sub_11906(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

void sub_12459(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_13405(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

void sub_13724()
{
    vector[4] vVar2;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    int I;

    array(ref vVar2, 4);
    sub_13738();
    vVar2[0] = {1028.99300000, -29.00700000, 9.24000000};
    vVar2[1] = {1028.95300000, -29.10700000, 9.40000000};
    vVar2[2] = {1028.95300000, -29.15700000, 9.24000000};
    vVar2[3] = {1028.94400000, -29.25400000, 9.24000000};
    for ( I = 0; I < l_U793; I++ )
    {
        l_U793[I] = sub_14276( -4072149, vVar2[I], 0, 0, 0, 1, 0, 0, 1119092736 );
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U793[I], "MloRoom_workshop" );
    }
    return;
}

void sub_13738()
{
    sub_457( "CO", "P_CREATE_S_POL_GG_RP_03", 0 );
    sub_13851( ref g_U739, g_U816, 1030346995, -944657628, 1032.12000000, -47.72000000, 7.82000000, 1.50000000, 0.00000000, 5.00000000, "MloRoom_range" );
    sub_13980( ref g_U739 );
    return;
}

void sub_13851(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
        sub_457( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

void sub_13980(int iParam0)
{
    sub_457( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if ((sub_14041( iParam0->_fU12 )) == 1)
        {
            sub_457( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
            sub_457( "CO", "has never been collected.", 0 );
        }
        if ((sub_14041( iParam0->_fU12 )) == 0)
        {
            sub_5458( iParam0->_fU0 );
            iParam0->_fU0 = sub_14276( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                    sub_457( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
        sub_457( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

int sub_14041(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

void sub_14276(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            WAIT( 0 );
        }
    }
    return Result;
}

void sub_14869()
{
    sub_457( "AT", "P_REQUEST_FIRINGRANGE_PERSISTENT_ASSETS start", 0 );
    sub_14946( ref l_U839, ref g_U2468 );
    sub_16354( ref g_U3537, ref g_U2889 );
    sub_16354( ref g_U3489, ref g_U2889 );
    sub_17363( 434544317, ref g_U2613 );
    sub_17363( 1964270085, ref g_U2613 );
    sub_17363( 1194438308, ref g_U2613 );
    sub_17363( -862236369, ref g_U2613 );
    sub_17363( 57534114, ref g_U2613 );
    sub_18363( g_U816, 1 );
    sub_457( "AT", "P_REQUEST_FIRINGRANGE_PERSISTENT_ASSETS end", 0 );
    return;
}

void sub_14946(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_14981( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_14981(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 = sub_15016( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
            sub_15147( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

int sub_15016(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                sub_15147( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                sub_15147( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    sub_15147( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_15795( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                sub_15147( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_15147( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_15147(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15167( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

int sub_15167(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
        {
            if ((uParam1^)[I] == iParam0)
            {
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
        else
        {
            (uParam1^)[I] = nil;
            Result = I;
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

void sub_15795(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

void sub_16354(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_16375( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
        sub_16513( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_16375(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                sub_16513( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                sub_16513( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    sub_16513( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                    sub_15795( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                sub_16513( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
            sub_16513( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_16513(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15167( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_17363(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 = sub_17384( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
        sub_17516( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

int sub_17384(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                sub_17516( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                sub_17516( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    sub_17516( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                    sub_15795( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                sub_17516( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
            sub_17516( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_17516(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15167( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

void sub_18363(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
        sub_8365( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            WAIT( 0 );
        }
    }
    return;
}

void sub_18593()
{
    sub_457( "AT", "P_REQUEST_FIRINGRANGE_NONPERSISTENT_ASSETS start", 0 );
    sub_18674( 879508723, ref g_U2662 );
    sub_18674( 1691769945, ref g_U2662 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "PRECINCT_ONESHOT_1", 0 );
    sub_457( "AT", "P_REQUEST_FIRINGRANGE_NONPERSISTENT_ASSETS end", 0 );
    return;
}

void sub_18674(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 = sub_18709( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
            sub_18861( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

int sub_18709(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                sub_18861( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                sub_18861( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        sub_18861( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                        sub_18861( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        sub_15795( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        sub_15795( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                sub_18861( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                sub_18861( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

void sub_18861(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 = sub_15167( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

int sub_20781(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_20901(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_21028(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            return 0;
        };;;
    }
    return 1;
}

int sub_21149(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

int sub_21573(unknown uParam0)
{
    sub_457( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
            sub_6496( uParam0, sub_672() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

void sub_22136(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

    sub_457( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
        sub_457( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
        sub_9348( iParam1 );
        sub_22395( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
            sub_22846( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
            sub_22846( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_23078( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
            sub_22846( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_23078( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_23078( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
            sub_22846( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_23078( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_23078( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_23078( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
            sub_22846( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if (sub_23078( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if (sub_23078( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if (sub_23078( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if (sub_23078( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
            sub_24636( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
    sub_457( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

void sub_22395(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 = sub_6712( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
        sub_457( "TEH", "Ending context", 0 );
        sub_457( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

void sub_22846(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

void sub_23078(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

void sub_24636(int iParam0)
{
    sub_8365( "CHECKPOINT DATA" );
    sub_24675( iParam0->_fU4 );
    sub_24698( iParam0->_fU16 );
    sub_24698( iParam0->_fU20 );
    sub_24698( iParam0->_fU24 );
    sub_24741( iParam0->_fU28 );
    sub_24741( iParam0->_fU56 );
    sub_24741( iParam0->_fU60 );
    sub_24741( iParam0->_fU64 );
    sub_24741( iParam0->_fU68 );
    sub_24741( iParam0->_fU72 );
    sub_24741( iParam0->_fU76 );
    sub_24741( iParam0->_fU80 );
    sub_24741( iParam0->_fU84 );
    sub_24741( iParam0->_fU88 );
    sub_24741( iParam0->_fU92 );
    sub_24698( iParam0->_fU32 );
    sub_24741( iParam0->_fU36 );
    sub_24741( iParam0->_fU40 );
    sub_24741( iParam0->_fU44 );
    sub_24698( iParam0->_fU136 );
    sub_24946( iParam0->_fU140 );
    sub_24741( iParam0->_fU52 );
    sub_8365( "---nRightHolsterAttachmentEnabled: " );
    sub_24741( iParam0->_fU96 );
    sub_8365( "---nRightHolsterAttachmentToggled: " );
    sub_24741( iParam0->_fU100 );
    sub_8365( "---nLeftHolsterAttachmentEnabled: " );
    sub_24741( iParam0->_fU104 );
    sub_8365( "---nLeftHolsterAttachmentToggled: " );
    sub_24741( iParam0->_fU108 );
    sub_8365( "---nRifleHolsterAttachmentEnabled: " );
    sub_24741( iParam0->_fU112 );
    sub_8365( "---nRifleHolsterAttachmentToggled: " );
    sub_24741( iParam0->_fU116 );
    sub_8365( "---nRightHandAttachmentEnabled: " );
    sub_24741( iParam0->_fU120 );
    sub_8365( "---nRightHandAttachmentToggled: " );
    sub_24741( iParam0->_fU124 );
    sub_8365( "---nLeftHandAttachmentEnabled: " );
    sub_24741( iParam0->_fU128 );
    sub_8365( "---nLeftHandAttachmentToggled: " );
    sub_24741( iParam0->_fU132 );
    sub_24741( l_U1 );
    sub_24741( 144 );
    return;
}

void sub_24675(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return;
}

void sub_24698(unknown uParam0)
{
    return;
}

void sub_24741(unknown uParam0)
{
    return;
}

void sub_24946(boolean bParam0)
{
    if (bParam0)
    {
        ;
    }
    return;
}

int sub_25829()
{
    switch (l_U468)
    {
        case 1:
        sub_457( "AT", "eSpawnFiringRange = ENTITY_STATE_INIT", 0 );
        sub_25944( ref l_U584, 1056964608, 0 );
        l_U469 = 0;
        l_U468 = 2;
        sub_457( "AT", "eSpawnFiringRange = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        l_U575[l_U469] = sub_26199( ref l_U470[l_U469] );
        sub_26878( l_U575[l_U469], ref l_U584 );
        sub_8694( l_U575[l_U469], l_U590[l_U469], 25000, 0, 0 );
        sub_8049( l_U575[l_U469], -862236369, 0, 25000, 0 );
        if (NOT (IS_PED_DEAD( l_U575[l_U469] )))
        {
            SET_PED_AI_TEMPLATE( l_U575[l_U469], "AIT_EXPERT" );
            SET_ROOM_FOR_PED_BY_NAME( l_U575[l_U469], "MloRoom_Range" );
        }
        l_U469++;
        if (l_U469 >= l_U575)
        {
            l_U468 = 3;
            sub_457( "AT", "eSpawnFiringRange = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U584._fU0, 1 );
        SET_GROUP_MAX_NUM_ADVANCING( l_U584._fU0, l_U575 );
        SET_PED_NAME_DEBUG( l_U575[0], "WAVE1" );
        SET_PED_NAME_DEBUG( l_U575[1], "WAVE1_1" );
        SET_PED_NAME_DEBUG( l_U575[2], "WAVE1_2" );
        SET_PED_NAME_DEBUG( l_U575[3], "WAVE1_3" );
        SET_PED_NAME_DEBUG( l_U575[4], "WAVE2" );
        SET_PED_NAME_DEBUG( l_U575[5], "WAVE2_1" );
        SET_PED_NAME_DEBUG( l_U575[6], "WAVE2_2" );
        SET_PED_NAME_DEBUG( l_U575[7], "WAVE2_3" );
        sub_27636( ref l_U575, ref l_U769, 1 );
        sub_27636( ref l_U575, ref l_U770, 1 );
        sub_27799( ref l_U575 );
        l_U468 = 4;
        sub_457( "AT", "eSpawnFiringRange = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

void sub_25944(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
        }
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

void sub_26199(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
        sub_18363( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
    sub_26678( iParam0->_fU40 );
    sub_26758( iParam0->_fU40 );
    return iParam0->_fU40;
}

void sub_26678(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

void sub_26758(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

void sub_26878(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
        sub_8365( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
            sub_25944( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
            sub_25944( iParam1, 1056964608, 0 );
        }
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

void sub_27636(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            sub_27691( uParam1, (uParam0^)[I], uParam2 );
        }
    }
    return;
}

void sub_27691(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

void sub_27799(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_27830( (uParam0^)[I] );
    }
    return;
}

void sub_27830(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

void sub_28107(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return sub_28125( sub_672(), uParam0 );
}

int sub_28125(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

void sub_28188()
{
    sub_457( "RJM", "P_ACTIVATE_WAVE1", 0 );
    sub_28283( ref l_U575[0], "wave1", "GenCover", "5FBC25E3_EDE6685F_Corner2" );
    sub_28283( ref l_U575[1], "wave1_1", "GenCover", "5FBC25E3_99E9FD3_Corner1" );
    sub_28283( ref l_U575[2], "wave1_2", "GenCover", "5FBC25E3_DC2D39A6_Corner2" );
    sub_28283( ref l_U575[3], "wave1_3", "GenCover", "5FBC25E3_563BB90C_Corner1" );
    if (sub_28296( l_U575[0] ))
    {
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U575[0], 0 );
        SET_PED_FLAG_FIRE_UNTIL_EMPTY_IN_COVER( l_U575[0], 1 );
        SET_PED_FLAG_FORCE_LEANFIRE_IN_COVER( l_U575[0], 1 );
    }
    sub_1366( ref l_U600, l_U599, 1, 0 );
    sub_1502( ref l_U600 );
    ISEQ_START( 879508723 );
    return;
}

void sub_28283(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    if ((sub_28344()) AND (sub_28296( (uParam0^) )))
    {
        sub_28391( (uParam0^) );
        sub_28494( uParam0, uParam2, uParam3 );
        REGISTER_TARGET( (uParam0^), sub_672() );
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( (uParam0^), 1 );
        SET_PED_FLAG_LOCK_TO_COVER( (uParam0^), 1 );
        ISEQ_REGISTER_ENTITY( 879508723, uParam1, (uParam0^), 0 );
    }
    return;
}

int sub_28296(unknown uParam0)
{
    if ((NOT (IS_PED_DEAD( uParam0 ))) AND (DOES_PED_EXIST( uParam0 )))
    {
        return 1;
    }
    return 0;
}

int sub_28344()
{
    if (sub_28296( sub_672() ))
    {
        return 1;
    }
    return 0;
}

void sub_28391(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

void sub_28494(unknown uParam0, unknown uParam1, unknown uParam2)
{
    if ((NOT (IS_PED_DEAD( sub_672() ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        TASK_COMBAT_SNAP_TO_COVER( (uParam0^), uParam1, uParam2, 0 );
    }
    return;
}

void sub_28914()
{
    sub_457( "RJM", "P_ACTIVATE_WAVE2", 0 );
    sub_28391( l_U575[4] );
    sub_28391( l_U575[5] );
    sub_28391( l_U575[6] );
    sub_28391( l_U575[7] );
    sub_28494( ref l_U575[4], "GenCover", "5FBC25E3_8542971D_Corner1" );
    sub_28494( ref l_U575[5], "GenCover", "5FBC25E3_299BDFCD_Corner2" );
    sub_6167( l_U575[6], l_U470[6]._fU0, l_U470[6]._fU12 );
    sub_6167( l_U575[7], l_U470[7]._fU0, l_U470[7]._fU12 );
    REGISTER_TARGET( l_U575[4], sub_672() );
    REGISTER_TARGET( l_U575[5], sub_672() );
    REGISTER_TARGET( l_U575[6], sub_672() );
    REGISTER_TARGET( l_U575[7], sub_672() );
    TASK_COMBAT_PED( l_U575[6], sub_672() );
    TASK_COMBAT_PED( l_U575[7], sub_672() );
    ISEQ_REGISTER_ENTITY( 1691769945, "wave2", l_U575[4], 0 );
    ISEQ_REGISTER_ENTITY( 1691769945, "wave2_1", l_U575[5], 0 );
    ISEQ_REGISTER_ENTITY( 1691769945, "wave2_2", l_U575[6], 0 );
    ISEQ_REGISTER_ENTITY( 1691769945, "wave2_3", l_U575[7], 0 );
    ISEQ_START( 1691769945 );
    return;
}

void sub_29979()
{
    l_U708 = GET_SOUND_ID();
    PLAY_SOUND_FROM_COORD( l_U708, "FIRING_RANGE_ALL_CLEAR", g_U4009._fU4 );
    sub_457( "AT", "Playing FIRING_RANGE_ALL_CLEAR!", 0 );
    return;
}

void sub_30197()
{
    sub_457( "AT", "Door closed! Playing ALL CLEAR!", 0 );
    sub_5300();
    PLAY_SOUND_FROM_COORD( -1, "PRISONER_EXCHANGE_DOOR_BUTTON", g_U4009._fU4 );
    return;
}

void sub_30327()
{
    sub_457( "RJM", "P_UNLOCK_FIRST_HALF_WAVE1", 0 );
    if (sub_28296( l_U575[0] ))
    {
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U575[0], 0 );
        SET_PED_FLAG_LOCK_TO_COVER( l_U575[0], 0 );
    }
    if (sub_28296( l_U575[1] ))
    {
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U575[1], 0 );
        SET_PED_FLAG_LOCK_TO_COVER( l_U575[1], 0 );
    }
    sub_1366( ref l_U609, l_U599, 1, 0 );
    sub_1502( ref l_U609 );
    return;
}

void sub_30524()
{
    if (sub_28296( l_U575[2] ))
    {
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U575[2], 0 );
        SET_PED_FLAG_LOCK_TO_COVER( l_U575[2], 0 );
    }
    if (sub_28296( l_U575[3] ))
    {
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER( l_U575[3], 0 );
        SET_PED_FLAG_LOCK_TO_COVER( l_U575[3], 0 );
    }
    return;
}

void sub_30647(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 = sub_28125( sub_672(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

void sub_30811(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

void sub_30995(int iParam0, int iParam1)
{
    if ((sub_11073( iParam0 )) == 0)
    {
        sub_11139( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

void sub_31159(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

int sub_31440(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7)
{
    boolean bVar10;
    float fVar11;

    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( uParam0._fU0, uParam0._fU4, ref bVar10, ref fVar11 );
    if (bParam7)
    {
        if (bVar10)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    if (fVar11 < 0.10000000)
    {
        return 1;
    }
    return 0;
}

void sub_31594(int iParam0, unknown uParam1, unknown uParam2)
{
    if ((sub_11073( iParam0 )) == 0)
    {
        sub_11139( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_FORCE_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1, uParam2 );
    return;
}

void sub_31875(unknown uParam0)
{
    int I;

    if ((sub_31159( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

void sub_32013(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        sub_32050( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

void sub_32050(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                sub_5993( uParam0 );
            }
        }
    }
    return;
}

void sub_32369()
{
    sub_457( "AT", "Creating final enemy.", 0 );
    l_U653 = sub_26199( ref l_U640 );
    if (NOT (IS_PED_DEAD( l_U653 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U653, 1 );
        sub_8694( l_U653, 434544317, 25000, 0, 0 );
        sub_8049( l_U653, -862236369, 1, 25000, 0 );
        SET_ROOM_FOR_PED_BY_NAME( l_U653, "MloRoom_workshop" );
        SET_PED_AS_ONE_SHOT_KILL( l_U653, 1 );
        SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( l_U653, 0 );
        SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( l_U653, 1 );
        SET_PED_USES_ANIMATED_DEATH( l_U653, 0 );
        SET_PED_NAME_DEBUG( l_U653, "piFinalEnemy" );
        if ((IS_GERMAN_VERSION() == 1) || (IS_JAPANESE_GAME()))
        {
            SET_PED_RELATIONSHIP_GROUP( l_U653, 1 );
            SET_PED_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP( l_U653, 0, 0 );
            SET_PED_GORE_FROM_PLAYER( l_U653, 0 );
        }
    }
    sub_27830( l_U653 );
    return;
}

void sub_32691()
{
    sub_457( "AT", "Creating final enemy.", 0 );
    l_U707 = sub_26199( ref l_U694 );
    if (NOT (IS_PED_DEAD( l_U707 )))
    {
        sub_8694( l_U707, 1478009203, 25000, 0, 0 );
        SET_ROOM_FOR_PED_BY_NAME( l_U707, "MloRoom_workshop" );
    }
    sub_27691( ref l_U792, l_U707, 1 );
    sub_27830( l_U707 );
    return;
}

int sub_32946()
{
    vector vVar2;

    vVar2 = {1007.93200000, -35.04556000, 9.79835500};
    if (IS_SPHERE_VISIBLE( vVar2, 0.50000000, 0 ))
    {
        if (NOT (IS_PED_DEAD( sub_672() )))
        {
            if (((sub_33022( sub_672(), vVar2 )) > 8.00000000) AND ((sub_33022( sub_672(), vVar2 )) < 20.00000000))
            {
                return 1;
            }
        }
    }
    return 0;
}

void sub_33022(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    else
    {
        return -1.00000000;
    }
    return VDIST( uVar6, uParam1 );
}

void sub_33207()
{
    unknown uVar2;

    sub_457( "AT", "Activating final enemy.", 0 );
    sub_28391( l_U653 );
    if ((NOT (IS_PED_DEAD( sub_672() ))) AND (NOT (IS_PED_DEAD( l_U653 ))))
    {
        CLEAR_PED_TASKS_IMMEDIATELY( l_U653 );
        REGISTER_TARGET( l_U653, sub_672() );
        SET_LOCKED_TARGET( l_U653, sub_672() );
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 1008.50700000, -38.60109000, 7.80015700, 3, 20000, 1048576000, 0, 0 );
        TASK_SURRENDER( 0, sub_672(), 1103626240 );
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( l_U653, uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
    }
    return;
}

void sub_33552()
{
    sub_457( "SBA", "P_DIAL_SURRENDER", 0 );
    if ((NOT (IS_PED_DEAD( sub_672() ))) AND (NOT (IS_PED_DEAD( l_U653 ))))
    {
        sub_2074( ref l_U799 );
        sub_2156( 1, l_U653, "M13_UFE_126_MUS", ref l_U799, 2, 0 );
        sub_2156( 0, sub_672(), "MAX", ref l_U799, 2, 0 );
        sub_2398( "SPOL_CP16A", ref l_U799, 8, 1 );
    }
    return;
}

void sub_33735(int iParam0, unknown uParam1, unknown uParam2)
{
    if (iParam0->_fU68 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU68 = sub_28125( uParam1, (iParam0^) );
        if ((iParam0->_fU68) AND (uParam2))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU68;
}

int sub_33927()
{
    if ((l_U282._fU16) || (sub_1821( ref l_U282 )))
    {
        return 1;
    }
    return 0;
}

void sub_34014(unknown uParam0, unknown uParam1)
{
    sub_2074( uParam1 );
    sub_2156( 0, sub_672(), "MAX", uParam1, 2, 0 );
    sub_2156( 1, sub_672(), "MAX", uParam1, 2, 0 );
    sub_2398( uParam0, uParam1, 8, 1 );
    return;
}

void sub_34320()
{
    if (sub_33735( ref l_U426, sub_672(), 0 ))
    {
        sub_34350();
    }
    if (sub_33735( ref l_U447, sub_672(), 0 ))
    {
        sub_34733();
    }
    sub_34964( ref l_U844 );
    return;
}

void sub_34350()
{
    sub_34364( ref l_U844 );
    l_U844[0]._fU4 = "EXPOSURE_DARKEN_CONTRAST";
    l_U844[0]._fU16 = 750;
    l_U844[0]._fU24 = 1;
    l_U844[0]._fU20 = 1;
    l_U844[0]._fU12 = 0;
    l_U844[0]._fU8 = 4;
    l_U844[0]._fU32 = 0;
    l_U844[1]._fU4 = "BLUR_ZOOM_LIGHT_FAST";
    l_U844[1]._fU8 = 4;
    l_U844[1]._fU16 = 750;
    l_U844[1]._fU24 = 1;
    l_U844[1]._fU32 = 0;
    l_U86 = 0;
    return;
}

void sub_34364(unknown uParam0)
{
    int I;

    sub_457( "CO", "P_INIT_IMAGEFX", 0 );
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I]._fU4 = "";
        (uParam0^)[I]._fU12 = 0;
        (uParam0^)[I]._fU16 = 0;
        (uParam0^)[I]._fU20 = 0;
        (uParam0^)[I]._fU24 = 0;
        (uParam0^)[I]._fU28 = 0;
        (uParam0^)[I]._fU32 = 1;
    }
    return;
}

void sub_34733()
{
    sub_34364( ref l_U844 );
    l_U844[0]._fU4 = "EXPOSURE_DARKEN_CONTRAST";
    l_U844[0]._fU8 = 4;
    l_U844[0]._fU12 = 0;
    l_U844[0]._fU16 = 1000;
    l_U844[0]._fU24 = 1;
    l_U844[0]._fU20 = 1;
    l_U844[0]._fU32 = 0;
    l_U844[1]._fU4 = "TRIPLE_INTERLACE_COLOR_MED";
    l_U844[1]._fU8 = 4;
    l_U844[1]._fU16 = 1000;
    l_U844[1]._fU24 = 1;
    l_U844[1]._fU32 = 0;
    l_U86 = 0;
    return;
}

void sub_34964(unknown uParam0)
{
    int I;
    int J;

    switch (l_U86)
    {
        case 0:
        sub_457( "CO", "P_HANDLE_IMAGEFX", 0 );
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (uParam0^)[I]._fU32)
            {
                sub_1366( ref (uParam0^)[I]._fU36, (uParam0^)[I]._fU12, 1, 0 );
                sub_1502( ref (uParam0^)[I]._fU36 );
                if ((uParam0^)[I]._fU20 > 0)
                {
                    I += (uParam0^)[I]._fU20;
                }
            }
        }
        l_U86 = 1;
        break;
        case 1:
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (sub_1821( ref (uParam0^)[I]._fU36 ))
            {
                (uParam0^)[I]._fU0 = PLAY_IMAGEFX( (uParam0^)[I]._fU4, (uParam0^)[I]._fU8, (uParam0^)[I]._fU28 );
                if ((uParam0^)[I]._fU16 > 0)
                {
                    sub_1366( ref (uParam0^)[I]._fU72, (uParam0^)[I]._fU16, 1, 0 );
                    sub_1502( ref (uParam0^)[I]._fU72 );
                }
                if ((uParam0^)[I]._fU20 > 0)
                {
                    for ( J = I + 1; J <= (I + (uParam0^)[I]._fU20); J++ )
                    {
                        (uParam0^)[J]._fU0 = PLAY_IMAGEFX( (uParam0^)[J]._fU4, (uParam0^)[J]._fU8, (uParam0^)[I]._fU28 );
                        if ((uParam0^)[J]._fU16 > 0)
                        {
                            sub_1366( ref (uParam0^)[J]._fU72, (uParam0^)[J]._fU16, 1, 0 );
                            sub_1502( ref (uParam0^)[J]._fU72 );
                        }
                    }
                    I += (uParam0^)[I]._fU20;
                }
            }
            if (sub_1821( ref (uParam0^)[I]._fU72 ))
            {
                STOP_IMAGEFX( (uParam0^)[I]._fU0, (uParam0^)[I]._fU24 );
                (uParam0^)[I]._fU32 = 1;
                if ((uParam0^)[I]._fU20 > 0)
                {
                    if ((uParam0^)[I]._fU20 == 1)
                    {
                        STOP_IMAGEFX( (uParam0^)[I + 1]._fU0, (uParam0^)[I + 1]._fU24 );
                        (uParam0^)[I + 1]._fU32 = 1;
                    }
                    else
                    {
                        for ( J = I + 1; J <= (uParam0^)[I]._fU20; J++ )
                        {
                            STOP_IMAGEFX( (uParam0^)[J]._fU0, (uParam0^)[J]._fU24 );
                            (uParam0^)[J]._fU32 = 1;
                        }
                    }
                    I += (uParam0^)[I]._fU20;
                }
            }
        }
        break;
    }
    return;
}

void sub_35771(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if (DOES_PLACEMENT_EXIST( (uParam0^)[I] ))
        {
            sub_457( "RJM", "DO_ANY_PAINKILLERS_STILL_EXIST - Found a pill in there, we can still play some V.O.", 0 );
            (uParam1^)[I] = 1;
        }
        else
        {
            (uParam1^)[I] = 0;
        }
    }
    return;
}

void sub_36371()
{
    sub_457( "AT", "P_RELEASE_FIRINGRANGE_ASSETS", 0 );
    sub_36431( ref l_U839, ref g_U2468 );
    sub_36709( ref g_U3537, ref g_U2889 );
    sub_36709( ref g_U3489, ref g_U2889 );
    ISEQ_TERMINATE( 879508723 );
    sub_5561( 879508723, ref g_U2662 );
    ISEQ_TERMINATE( 1691769945 );
    sub_5561( 1691769945, ref g_U2662 );
    sub_36952( 434544317, ref g_U2613 );
    sub_36952( 1964270085, ref g_U2613 );
    sub_36952( 1194438308, ref g_U2613 );
    sub_36952( -862236369, ref g_U2613 );
    sub_36952( 57534114, ref g_U2613 );
    sub_37167( g_U816 );
    return;
}

void sub_36431(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        sub_36466( (uParam0^)[I], uParam1 );
    }
    return;
}

void sub_36466(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 = sub_5673( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

void sub_36709(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 = sub_5673( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_36952(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 = sub_5673( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    return;
}

void sub_37167(unknown uParam0)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 1)
    {
        SET_MODEL_AS_NO_LONGER_NEEDED( uParam0 );
    }
    else
    {
        sub_8365( "[SP]### ERROR! (UnloadModel) Trying to unload a model that isn't in the img! ###" );
    }
    return;
}

