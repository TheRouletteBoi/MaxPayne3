void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U73 = -1;
    l_U74 = {64536, 64536, 64536};
    l_U78 = 0;
    l_U79 = 0;
    l_U80 = 1500;
    l_U91 = 0;
    l_U129 = 0;
    l_U130 = 1;
    l_U131 = 1;
    l_U132 = 0;
    l_U133 = 0;
    l_U134 = 0;
    l_U135 = 0;
    l_U137 = {-48.79000000, -30.90000000, 5.73000000};
    l_U140 = {0.00000000, 0.00000000, 180.00000000};
    l_U144 = {-48.79000000, -30.90000000, 5.73000000};
    l_U147 = {0.00000000, 0.00000000, 180.00000000};
    l_U152 = {-48.79000000, -30.90000000, 5.61000000};
    l_U155 = {0.00000000, 0.00000000, 180.00000000};
    l_U158 = {-48.77120000, -31.79000000, 4.38443000};
    l_U161 = 0.00000000;
    l_U162 = {-49.91000000, -31.54000000, 4.38000000};
    l_U165 = 25.00000000;
    l_U175 = 1000;
    l_U335 = {-49.12100000, -32.31600000, 5.90300000};
    l_U338 = {-2.06400000, -0.00000000, -18.16200000};
    l_U341 = 1200;
    l_U373 = {-49.17100000, -33.63800000, 5.71600000};
    l_U376 = {-1.45500000, 0.40300000, 21.37900000};
    l_U379 = 3500;
    l_U411 = {-51.95200000, -28.63800000, 5.90700000};
    l_U414 = {-7.02700000, -0.36800000, 18.96000000};
    l_U417 = 2500;
    l_U418 = 3700;
    l_U419 = 0.10000000;
    l_U422 = {-34.84000000, -151.59000000, 5.30000000};
    l_U425 = {0.00000000, 0.00000000, 90.00000000};
    l_U428 = {-26.56000000, -86.29000000, 9.80000000};
    l_U431 = {0.00000000, 0.00000000, 0.00000000};
    l_U467 = 1500;
    l_U801 = {-50.78700000, -128.54900000, 4.33000000};
    l_U804 = {-50.78700000, -69.63100000, 4.33000000};
    l_U807 = 3.70000000;
    l_U808 = {-47.09300000, -128.53900000, 4.33000000};
    l_U811 = {-47.09300000, -69.62100000, 4.33000000};
    l_U814 = {-60.53363000, -121.03310000, 6.58906000};
    l_U817 = {0.00000000, 0.00000000, -90.00000000};
    l_U860 = 4500;
    l_U861 = 1000;
    l_U862 = 0;
    l_U1027 = -1574512993;
    l_U1256 = 30000;
    l_U1257 = 45000;
    l_U1283 = 8000;
    l_U1284 = 16000;
    l_U1350 = 0;
    l_U1351 = 0;
    l_U1352 = 0;
    l_U1353 = 0;
    l_U1354 = 0;
    l_U1355 = 0;
    l_U1356 = 0;
     /* WRITESCRIPTLOG */ sub_1157( "AT", "Script s_air_Departures.sc is starting up...", 0 );
     /* P_SETUP_ASSET_ARRAYS */ sub_1275();
    l_U129 = 1;
    START_WIDGET_GROUP( "Button and Painkillers" );
    ADD_WIDGET_BOOL( "Reset Button", ref l_U1354 );
    ADD_WIDGET_BOOL( "Reset Boxes", ref l_U1355 );
    ADD_WIDGET_BOOL( "Disable Gate Collison", ref l_U1356 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U137, "Button Position", 0.01000000 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U140, "Button Rotation", 0.01000000 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U144, "Overlay Position", 0.01000000 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U147, "Overlay Rotation", 0.01000000 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U152, "Indicator Position", 0.01000000 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U155, "Indicator Rotation", 0.01000000 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U158, "Player Teleport Pos", 0.01000000 );
    ADD_WIDGET_FLOAT_SLIDER( "Player Teleport Heading", ref l_U161, -360.00000000, 360.00000000, 0.01000000 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U162, "Player Teleport RunPos", 0.01000000 );
    ADD_WIDGET_FLOAT_SLIDER( "Player Teleport Run Heading", ref l_U165, -360.00000000, 360.00000000, 0.01000000 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U422, "Bathroom Box Pos", 1036831949 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U425, "Bathroom Box Rot", 1036831949 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U428, "Upstairs Box Pos", 1036831949 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U431, "Upstairs Box Rot", 1036831949 );
    START_WIDGET_GROUP( "Camera" );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U335, "NIS Cam Position", 1036831949 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U338, "NIS Cam Rotation", 1036831949 );
    ADD_WIDGET_INT_SLIDER( "NIS Button shot time", ref l_U341, 0, 15000, 1 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U373, "NIS Run Start Position", 1036831949 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U376, "NIS Run Start Rotation", 1036831949 );
    ADD_WIDGET_INT_SLIDER( "NIS Start Run shot time", ref l_U379, 0, 15000, 1 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U411, "NIS Run End Position", 1036831949 );
     /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_1653( ref l_U414, "NIS Run End Rotation", 1036831949 );
    ADD_WIDGET_INT_SLIDER( "NIS End Run shot time", ref l_U417, 0, 15000, 1 );
    ADD_WIDGET_INT_SLIDER( "Interp time", ref l_U418, 0, 20000, 1 );
    ADD_WIDGET_FLOAT_SLIDER( "Gate jump-to anim", ref l_U419, 0.00000000, 1.00000000, 0.01000000 );
    STOP_WIDGET_GROUP();
    STOP_WIDGET_GROUP();
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_2746();
        if (l_U133 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_13398();
        }
         /* P_HANDLE_PLACING_AND_TESTING */ sub_80922();
        WAIT( 0 );
    }
     /* P_CLEANUP_DEPARTURES */ sub_5214( 1 );
     /* P_RELEASE_DEPARTURES_ASSETS */ sub_81337();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_air_Departures" );
     /* WRITESCRIPTLOG */ sub_1157( "AT", "Script s_air_Departures.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_1157(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_SETUP_ASSET_ARRAYS */ void sub_1275()
{
    l_U1012[0] = 2004595611;
    l_U1012[1] = g_U2393;
    l_U1012[2] = 1640831600;
    l_U1012[3] = g_U2394;
    l_U1012[4] = g_U2395;
    l_U1012[5] = g_U826;
    l_U1012[6] = g_U827;
    l_U1012[7] = l_U1027;
    l_U1012[8] = -1409914275;
    l_U1012[9] = -576031449;
    l_U1012[10] = -338998251;
    l_U1012[11] = -1913048611;
    l_U1012[12] = 1586610117;
    l_U1012[13] = -2043642572;
    return;
}

/* P_ADD_WIDGET_VECTOR_SLIDER */ void sub_1653(int iParam0, unknown uParam1, unknown uParam2)
{
    START_WIDGET_GROUP( uParam1 );
    ADD_WIDGET_FLOAT_SLIDER( "x", iParam0 + 0, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "y", iParam0 + 4, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "z", iParam0 + 8, 60536, 5000, uParam2 );
    STOP_WIDGET_GROUP();
    return;
}

/* P_HANDLE_FAILURE */ void sub_2746()
{
    if (g_U830 == 3)
    {
        switch (l_U133)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_2948()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
            {
                l_U133 = 1;
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_3466())
            {
                l_U133 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_3526( 0 )) == 1)
            {
                l_U133 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
            {
                l_U133 = 3;
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_1157( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_2885() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_2885(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2847() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2847(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
             /* P_CLEANUP_DEPARTURES */ sub_5214( 0 );
            l_U133 = 4;
             /* WRITESCRIPTLOG */ sub_1157( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_1157( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_8452( ref l_U93,  /* PLAYER_PED_ID */ sub_2847() );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "MILO_ap_depart", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "MILO_ap_depart", 0 ), GET_HASH_KEY( ref g_U2278 ) );
            if ((g_U861[4]._fU40 != 4) AND (g_U861[4]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_1157( "GA", "Shutting down script for TRAM_CONCESSIONS.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_13118( ref g_U861[4] );
                SET_EXITFLAG_FOR_SCRIPT( g_U861[4]._fU32 );
            }
            g_U846[4] = 0;
            l_U131 = 0;
            l_U133 = 5;
             /* WRITESCRIPTLOG */ sub_1157( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_1157( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U129 = 1;
            l_U133 = 0;
             /* WRITESCRIPTLOG */ sub_1157( "AT", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_2847()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_2885() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_2885()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_2948()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2847(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_2885(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_2885(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_2847() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_2847(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_3466()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_3526(int iParam0)
{
    iParam0 = 1;
    switch (l_U79)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_3608( ref l_U81 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
            {
                l_U80 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_3742( ref l_U81, l_U80, 1, 1 );
             /* STARTTIMER */ sub_3892( ref l_U81 );
        }
        if ( /* ISTIMERDONE */ sub_4025( ref l_U81 ))
        {
             /* WRITESCRIPTLOG */ sub_1157( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_2885() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_2885(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U79 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U79 = 2;
            }
            else
            {
                l_U79 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_1157( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_4526();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_1157( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_4526();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_3608(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_3742(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_3892(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_4025(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_4526()
{
     /* WRITESCRIPTLOG */ sub_1157( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_4601( ref l_U81 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_2885() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_2885(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U78 = 0;
    l_U78 = l_U78;
    l_U79 = 0;
    return;
}

/* RESETTIMER */ void sub_4601(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_CLEANUP_DEPARTURES */ void sub_5214(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_CLEANUP_DEPARTURES", 0 );
    ISEQ_TERMINATE( -192153712 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_5302( -192153712, ref g_U1368 );
    ISEQ_TERMINATE( 224058020 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_5302( 224058020, ref g_U1368 );
    ISEQ_TERMINATE( -1956283442 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_5302( -1956283442, ref g_U1368 );
    ISEQ_TERMINATE( 789239515 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_5302( 789239515, ref g_U1368 );
    ISEQ_TERMINATE( 783941433 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_5302( 783941433, ref g_U1368 );
    if (NOT bParam0)
    {
         /* CLEANPEDARRAY */ sub_6481( ref g_U2632 );
         /* CLEANPEDARRAY */ sub_6481( ref g_U2760 );
         /* CLEANPEDARRAY */ sub_6481( ref g_U2474 );
         /* CLEANPEDARRAY */ sub_6481( ref g_U2588 );
    }
     /* CLEANOBJECT */ sub_6667( l_U798 );
     /* CLEANOBJECT */ sub_6667( l_U797 );
     /* CLEANOBJECT */ sub_6667( l_U800 );
     /* CLEANOBJECT */ sub_6667( l_U799 );
     /* CLEANOBJECT */ sub_6667( l_U820 );
     /* CLEANOBJECT */ sub_6667( l_U821 );
     /* CLEANOBJECT */ sub_6667( l_U822 );
     /* CLEANOBJECT */ sub_6667( l_U823 );
     /* CLEANOBJECT */ sub_6667( l_U136 );
     /* CLEANOBJECT */ sub_6667( l_U150 );
     /* CLEANOBJECT */ sub_6667( l_U151 );
     /* CLEANOBJECT */ sub_6667( l_U143 );
     /* CLEANOBJECT */ sub_6667( l_U420 );
     /* CLEANOBJECT */ sub_6667( l_U421 );
    if (NOT bParam0)
    {
         /* CLEANOBJECT */ sub_6667( g_U2467 );
    }
     /* CLEANPLACEMENTARRAY */ sub_6873( ref l_U824 );
     /* CLEANPLACEMENT */ sub_6928( g_U769._fU0 );
     /* CLEANPLACEMENT */ sub_6928( g_U787._fU0 );
     /* P_ENABLE_POI */ sub_7036( ref l_U176, 0 );
    if ((IS_SCRIPT_MOVIE_PLAYING( 0 )) AND (NOT bParam0))
    {
        STOP_MOVIE( 0 );
    }
    RESET_PED_MODEL_LOD_DISTANCES( 2004595611 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_8080( ref l_U553 );
     /* P_STOP_SP_CHALLENGES */ sub_8173();
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_5302(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5440( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_5440(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* CLEANPEDARRAY */ void sub_6481(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_6531( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_6531(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANOBJECT */ void sub_6667(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_6873(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_6928( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_6928(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_ENABLE_POI */ void sub_7036(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if ((iParam0->_fU4 == 1) AND (iParam0->_fU320 == 1))
        {
             /* P_ENABLEPOIGLINT */ sub_7095( iParam0, 1 );
        }
        iParam0->_fU0 = 1;
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_7095( iParam0, 0 );
         /* P_ENABLEPOIINTERACTIONTEXT */ sub_7314( iParam0, 0 );
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )) == 0)
        {
            TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_2847() );
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2847(), 0 );
                iParam0->_fU328 = 0;
            }
        }
        iParam0->_fU8 = 0;
        iParam0->_fU0 = 0;
    }
    return;
}

/* P_ENABLEPOIGLINT */ void sub_7095(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        if (iParam0->_fU12 != nil)
        {
            if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
            {
                ENABLE_GLINT( iParam0->_fU12, 1 );
            }
            else
            {
                iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
            }
        }
        else
        {
            iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
        }
    }
    else if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            ENABLE_GLINT( iParam0->_fU12, 0 );
        }
    }
    return;
}

/* P_ENABLEPOIINTERACTIONTEXT */ void sub_7314(int iParam0, int iParam1)
{
    if (iParam1 == 1)
    {
        SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
        SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
        if ((iParam0->_fU72 == 0) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU68 == 1)))
        {
            SET_INTERACTIONTEXT_VISIBLE( 0 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
        else
        {
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_7494( iParam0 );
        if (iParam0->_fU332 == 1)
        {
            SET_INTERACTIONTEXT_PULSE( 1 );
            SET_INTERACTIONTEXT_PULSE_PERIOD( iParam0->_fU336 );
        }
    }
    else
    {
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        SET_INTERACTIONTEXT_BUTTON_VISIBLE( 0 );
    }
    return;
}

/* P_UPDATEINTERACTIONTEXTAVAILABLE */ void sub_7494(int iParam0)
{
    if (iParam0->_fU60 == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 0 );
        iParam0->_fU56 = 0;
    }
    else if (iParam0->_fU56 == 1)
    {
        if (( /* F_ISACTIONINGAVAILABLE */ sub_7590( iParam0 )) == 0)
        {
            SET_INTERACTIONTEXT_AVAILABLE( 0 );
            iParam0->_fU56 = 0;
        }
    }
    else if (( /* F_ISACTIONINGAVAILABLE */ sub_7590( iParam0 )) == 1)
    {
        SET_INTERACTIONTEXT_AVAILABLE( 1 );
        iParam0->_fU56 = 1;
    };;;
    return;
}

/* F_ISACTIONINGAVAILABLE */ int sub_7590(int iParam0)
{
    if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )) == 0) AND ((IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_2885() )) == 0))
    {
        if (((IS_PED_RELOADING(  /* PLAYER_PED_ID */ sub_2847() )) == 1) || (((IS_PED_GETTING_UP(  /* PLAYER_PED_ID */ sub_2847() )) == 1) || (((IS_PED_PICKING_UP_PICKUP(  /* PLAYER_PED_ID */ sub_2847() )) == 1) || (((IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_2847() )) == 1) || (((IS_PED_DUCKING(  /* PLAYER_PED_ID */ sub_2847() )) == 1) || (IS_PLAYER_SHOOTDODGING() == 1))))))
        {
            return 0;
        }
        if (iParam0->_fU304 == 0)
        {
            if ((IS_MONOLOGUE_PLAYING() == 1) || ((IS_ANY_SPEECH_PLAYING(  /* PLAYER_PED_ID */ sub_2847() )) == 1))
            {
                return 0;
            }
        }
        return 1;
    }
    return 0;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_8080(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_8173()
{
     /* WRITESCRIPTLOG */ sub_1157( "CCB", "P_STOP_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_1157( "CCB", "Stopping the Finale_Departures context...", 0 );
    END_CONTEXT( "Finale_Departures" );
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_8452(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_1157( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_8671( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_9835( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10149( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10628( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10149( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10628( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10149( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10628( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_10944( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10628( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_10944( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10628( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_11516( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_11718( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_2847(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_1157( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_8671(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_8733( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_8733(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_9835(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_10149(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_10553( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_10553(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_10628(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_10944(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_10553( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_11516(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_11718(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_8733( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_11816( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_11816(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_13118(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_HANDLE_EVENTS */ void sub_13398()
{
    int iVar2;
    int I;
    int iVar4;

    iVar2 = l_U129;
     /* P_HANDLE_SP_CHALLENGES */ sub_13433();
     /* P_HANDLE_IMAGEFX_DEPART */ sub_16384();
    switch (l_U129)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_1157( "AT", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_SET_STATIC_DATA */ sub_17747();
         /* P_INITIALIZE_SCRIPT_DATA */ sub_21689();
         /* P_INITIALIZE_SP_CHALLENGES */ sub_23049();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U129 = 2;
         /* WRITESCRIPTLOG */ sub_1157( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_1157( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_DEPARTURES_PERSISTENT_ASSETS */ sub_25462();
         /* P_REQUEST_DEPARTURES_NONPERSISTENT_ASSETS */ sub_34406();
        l_U129 = 3;
         /* WRITESCRIPTLOG */ sub_1157( "AT", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_39229( ref g_U1950 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_38815( ref g_U1368 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_38424( ref g_U1429 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_38022( ref g_U1247 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_37625( ref g_U1030 ))))))
        {
            g_U831[3] = 1;
            if ((NOT l_U93._fU0) AND (g_U829 == 3))
            {
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
                l_U129 = 4;
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_1157( "GA", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
                l_U129 = 6;
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_1157( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        l_U131 = 0;
        g_U846[3] = 1;
        if (( /* HAS_SAVEFILE_LOADED */ sub_39845( ref l_U93 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_10944(  /* PLAYER_PED_ID */ sub_2847(), -1013714740, 50, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10149(  /* PLAYER_PED_ID */ sub_2847(), -1464892298, 0, 50, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10149(  /* PLAYER_PED_ID */ sub_2847(), -612753081, 1, 50, 0 );
            l_U129 = 5;
             /* WRITESCRIPTLOG */ sub_1157( "GA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U129 = 6;
             /* WRITESCRIPTLOG */ sub_1157( "GA", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2847(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2847(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2847(), 0, 0 ) ))))
            {
                g_U830 = 3;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_40396( ref l_U93, g_U830,  /* PLAYER_PED_ID */ sub_2847(), g_U2014[3], g_U2129[3], g_U2168[3], g_U2207[3], 0 );
                l_U129 = 6;
                 /* WRITESCRIPTLOG */ sub_1157( "GA", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
            }
        }
        break;
        case 6:
        if (l_U130)
        {
            l_U563 = 1;
            l_U519 = 1;
            l_U679 = 1;
            l_U732 = 1;
        }
        if ( /* F_SETUP_DEPARTURES_VIG04_ENEMIES */ sub_45091())
        {
            if ( /* F_SETUP_DEPARTURES_VIG05_ENEMIES */ sub_48238())
            {
                l_U129 = 7;
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
            }
        }
        break;
        case 7:
        if (l_U130)
        {
             /* P_CREATE_PEOPLEMOVER */ sub_49098( ref l_U798, l_U804, 0 );
             /* P_CREATE_PEOPLEMOVER */ sub_49098( ref l_U797, l_U801, 0 );
             /* P_CREATE_PEOPLEMOVER */ sub_49098( ref l_U800, l_U811, 1 );
             /* P_CREATE_PEOPLEMOVER */ sub_49098( ref l_U799, l_U808, 1 );
             /* P_CREATE_ESCALATOR */ sub_49707( ref l_U822, ref l_U823, -35.16600000, -89.34100000, 6.62600000, 0.00000000, 0.00000000, -135.00000000, 0, ref g_U2278 );
             /* P_CREATE_ESCALATOR */ sub_49707( ref l_U820, ref l_U821, -35.16200000, -103.89200000, 6.62600000, 0.00000000, 0.00000000, -45.00000000, 1, ref g_U2278 );
             /* P_CREATE_PLACEMENTS */ sub_50481();
             /* P_CREATE_DEPARTURES_GATE */ sub_52446( ref g_U2278 );
             /* P_CREATE_GATE_OBJECTS */ sub_52761();
            SET_MOVIE_LOOP( 0, 1 );
             /* P_SETUP_AGA */ sub_53191( ref g_U2632, ref l_U441, ref l_U459, 0, 6 );
             /* P_SETUP_AGA */ sub_53191( ref g_U2760, ref l_U441, ref l_U459, -1, -1 );
        }
        if ((ISEQ_QUERY_STATE( 783941433, 2 )) AND (g_U846[3]))
        {
            if (l_U131)
            {
                if (CUTSCENE_IS_LOADED( "MID_03_FIN_concat" ))
                {
                     /* WRITESCRIPTLOG */ sub_1157( "AT", "eCheckpointState = CP_MID_03_FINALE", 0 );
                    l_U129 = 8;
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_1157( "AT", "Waiting for MID_03_FIN to load ...", 0 );
                }
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "eCheckpointState = CP_MID_03_FINALE", 0 );
                l_U129 = 8;
            }
        }
        break;
        case 8:
        if (l_U130)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_63176( ref l_U831, "MID_03_FIN_concat", 53808, 53861, 56226, 56429, 56510, 59686, 250, 0 );
             /* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ sub_63723( ref l_U831, "MILO_ap_depart", ref g_U2278 );
            if (l_U131)
            {
                l_U831._fU4 = 2;
                l_U831._fU104 = 0;
            }
            else
            {
                l_U831._fU4 = 7;
            }
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_63865( ref l_U831 ))
        {
            if (g_U830 != 3)
            {
                g_U830 = 3;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_40396( ref l_U93, g_U830,  /* PLAYER_PED_ID */ sub_2847(), g_U2014[3], g_U2129[3], g_U2168[3], g_U2207[3], 1 );
            }
             /* P_START_SP_CHALLENGES */ sub_66040();
            l_U129 = 9;
            if (IS_DEATH_PANEL_WIPE_ALLOWED())
            {
                DO_SCREEN_FADE_IN( 0 );
            }
             /* WRITESCRIPTLOG */ sub_1157( "AT", "eCheckpointState = CP_HANDLE_GAMEPLAY", 0 );
        }
        break;
        case 9:
        if (l_U130)
        {
             /* STARTTIMER */ sub_3892( ref l_U739 );
             /* STARTTIMER */ sub_3892( ref l_U1274 );
        }
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_66322( ref g_U2632, -1054867456, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_66322( ref g_U2760, -1054867456, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_66322( ref g_U2474, -1054867456, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_66322( ref g_U2588, -1054867456, 0, 1 );
         /* P_DEPARTURE_HANDLE_PATROL_REACTING_TO_SPOT_MAX */ sub_61521();
         /* P_HANDLE_IN_COMBAT_DIALOGUE */ sub_66574();
         /* P_HANDLE_AVOIDING_TASK_MASSIVE_CRASH */ sub_67157();
        if (NOT l_U464)
        {
            if ((l_U465) || (( /* F_IS_PLAYER_RIDING_PEOPLEMOVER_PRONE */ sub_67919()) || ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67789( ref l_U657, 0 ))))
            {
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "Sending in first half reinforcements!", 0 );
                 /* P_ACTIVATE_FIRST_REINFORCEMENTS */ sub_68557();
                l_U464 = 1;
            }
        }
        if (NOT l_U466)
        {
            if ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2760 )) < 2) || (l_U657._fU64))
            {
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "Unlocking enemies from cover.", 0 );
                 /* P_UNLOCK_VIG_04_ENEMIES */ sub_68960();
                l_U466 = 1;
            }
        }
        if (NOT l_U463)
        {
            if ((l_U465) || (( /* F_IS_PLAYER_RIDING_PEOPLEMOVER_PRONE */ sub_67919()) || ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67789( ref l_U498, 0 ))))
            {
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "Activiating middle wave upstairs guys.", 0 );
                 /* P_ACTIVATE_MIDDLE_WAVE_ENEMIES */ sub_69289();
                l_U463 = 1;
            }
        }
        if (NOT l_U862)
        {
            if ( /* F_ISPLAYERINTRIGGERBOX */ sub_69701( l_U863 ))
            {
                 /* WRITESCRIPTLOG */ sub_1157( "GA", "Starting FINALE_SONG_02 music track with FINALE_02_1_2 mood. Fade in 5 sec", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_02", "FINALE_02_1_2", "FINALE_02_1_2", 2.00000000, 5000, 10000, -1082130432, 0 );
                l_U862 = 1;
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67789( ref l_U690, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Player entered second half.", 0 );
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67789( ref l_U948, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Player is has triggered the last wave.", 0 );
        }
        if (l_U690._fU64)
        {
            if (NOT l_U1011)
            {
                for ( I = 0; I < g_U2632; I++ )
                {
                    if (NOT (IS_PED_DEAD( g_U2632[I] )))
                    {
                        SET_PED_COMBAT_RANGE_MAX( g_U2632[I], 12.00000000 );
                    }
                }
                for ( I = 0; I < g_U2760; I++ )
                {
                    if (NOT (IS_PED_DEAD( g_U2760[I] )))
                    {
                        SET_PED_COMBAT_RANGE_MAX( g_U2760[I], 12.00000000 );
                    }
                }
                l_U1011 = 1;
            }
            if ( /* F_SETUP_DEPARTURES_REINFORCEMENT_ENEMIES */ sub_70223())
            {
                if (NOT l_U462)
                {
                     /* WRITESCRIPTLOG */ sub_1157( "AT", "Activiating cover dudes.", 0 );
                     /* P_ACTIVATE_SECOND_AREA_SNAP_TO_COVER_GUYS */ sub_71520();
                    l_U462 = 1;
                }
                if ((NOT l_U678) AND ( /* F_ISPLAYERINTRIGGERBOX */ sub_69701( l_U711 )))
                {
                     /* WRITESCRIPTLOG */ sub_1157( "AT", "Activiating first reinforcement enemies.", 0 );
                     /* P_ACTIVATE_STAIRS_ENEMIES */ sub_72556();
                     /* P_ACTIVATE_GATE_ENEMIES */ sub_72839();
                     /* WRITESCRIPTLOG */ sub_1157( "AT", "Opening Gate!", 0 );
                    l_U134 = 1;
                    l_U678 = 1;
                }
                if (((((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2632 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2760 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2474 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2588 ))) > 0) AND (l_U678))
                {
                    if ((l_U134 != 3) AND (l_U134 != 4))
                    {
                        if ( /* F_CAN_GATE_CLOSE */ sub_73391())
                        {
                             /* WRITESCRIPTLOG */ sub_1157( "AT", "Closing Gate!", 0 );
                            l_U134 = 3;
                        }
                    }
                    if (l_U134 == 4)
                    {
                         /* P_CLEAN_UP_GUYS_IN_CONCESSIONS */ sub_73703();
                    }
                }
            }
        }
        if (((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2474 )) <= 4) AND (l_U679 == 4)) || (l_U948._fU64))
        {
            if ( /* F_SETUP_DEPARTURES_REINFORCEMENT2_ENEMIES */ sub_74052())
            {
                if (NOT l_U738)
                {
                     /* WRITESCRIPTLOG */ sub_1157( "AT", "Activating final enemies.", 0 );
                     /* P_ACTIVATE_FINAL_ENEMIES */ sub_74938();
                    l_U738 = 1;
                }
            }
        }
         /* P_HANDLE_GATE_OPENING_AND_CLOSING */ sub_75462();
        if ((l_U738) AND (l_U678))
        {
            iVar4 = ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2632 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2760 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2474 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2588 ));
            if (iVar4 == 1)
            {
                 /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_76447( ref g_U2632 );
                 /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_76447( ref g_U2760 );
                 /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_76447( ref g_U2474 );
                 /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_76447( ref g_U2588 );
            }
            if (iVar4 == 0)
            {
                if (NOT g_U861[4]._fU36)
                {
                    g_U861[4]._fU36 = 1;
                }
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "eCheckpointState = CP_WAIT_FOR_BUTTON_PRESS", 0 );
                l_U129 = 10;
                break;
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_67789( ref l_U884, 0 ))
        {
            if ((l_U134 != 3) AND (l_U134 != 4))
            {
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "Closing Gate!", 0 );
                l_U134 = 3;
            }
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Starting up s_air_TramConcessions ...", 0 );
            g_U861[4]._fU36 = 1;
        }
        break;
        case 10:
        if (l_U130)
        {
             /* WRITESCRIPTLOG */ sub_1157( "GA", "Fading out FINALE_SONG_02 FINALE_02_1_2 over 10 seconds.", 0 );
            AUDIO_MUSIC_SUSPEND( 15000 );
            l_U135 = 1;
             /* P_ENABLE_POI */ sub_7036( ref l_U176, 1 );
            if (DOES_OBJECT_EXIST( l_U143 ))
            {
                SET_OBJECT_VISIBLE( l_U143, 1 );
            }
        }
        if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND (NOT ( /* F_IS_PED_PLAYING_SPEECH */ sub_77031(  /* PLAYER_PED_ID */ sub_2847() ))))
        {
             /* P_DP_HANDLE_OUT_OF_COMBAT_DIALOGUE */ sub_77119();
        }
        if ( /* F_HANDLE_POI */ sub_77970( ref l_U176 ))
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "eCheckpointState = CP_FINISHED", 0 );
            if (DOES_OBJECT_EXIST( g_U2467 ))
            {
                if (l_U926)
                {
                     /* WRITESCRIPTLOG */ sub_1157( "AT", "Safety triggered for enabling gate collision.", 0 );
                    SET_OBJECT_COLLISION( g_U2467, 1 );
                    if ((GET_OBJECT_ANIM_CURRENT_TIME( g_U2467, "APD_secGates03", "ap_anim" )) != 0.00000000)
                    {
                         /* WRITESCRIPTLOG */ sub_1157( "AT", "Safety triggered for closing gate.", 0 );
                         /* MAL_PLAYOBJECTANIM */ sub_52649( g_U2467, "APD_secGates03", "ap_anim", -1.00000000, 1.00000000 );
                    }
                }
            }
             /* WRITESCRIPTLOG */ sub_1157( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_4 mood. Fade in 1000 sec", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_4", "FINALE_01_4", 0.00000000, 1000, 5000, -1082130432, 0 );
            if (IS_SCRIPT_MOVIE_PLAYING( 0 ))
            {
                STOP_MOVIE( 0 );
            }
            g_U846[4] = 1;
            l_U129 = 11;
        }
        break;
        case 11:
        if (g_U830 == 4)
        {
             /* P_CLEANUP_ENEMIES_NOT_IN_CONCESSIONS */ sub_80282();
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U129 = 0;
             /* WRITESCRIPTLOG */ sub_1157( "AT", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U129 != iVar2)
    {
        l_U130 = 1;
    }
    else
    {
        l_U130 = 0;
    }
    return;
}

/* P_HANDLE_SP_CHALLENGES */ void sub_13433()
{
    switch (l_U1028)
    {
        case 0:
         /* WRITESCRIPTLOG */ sub_1157( "CCB", "eUngrounded - STATE_CHALLENGE_IDLE", 0 );
        l_U1028 = 1;
        break;
        case 1:
        if (l_U129 >= 9)
        {
             /* P_HANDLE_UNGROUNDED_CHALLENGE */ sub_13584( ref g_U2474, ref l_U1159 );
             /* P_HANDLE_UNGROUNDED_CHALLENGE */ sub_13584( ref g_U2632, ref l_U1168 );
             /* P_HANDLE_UNGROUNDED_CHALLENGE */ sub_13584( ref g_U2760, ref l_U1178 );
             /* P_HANDLE_UNGROUNDED_CHALLENGE */ sub_13584( ref g_U2588, ref l_U1182 );
        }
        break;
        case 2: break;
    }
    switch (l_U1029)
    {
        case 0:
         /* WRITESCRIPTLOG */ sub_1157( "CCB", "eRailshooter - STATE_CHALLENGE_IDLE", 0 );
        l_U1029 = 1;
        break;
        case 1:
        if (l_U129 >= 9)
        {
            if (NOT l_U1213)
            {
                if (( /* F_HANDLE_RAILSHOOTER_CHALLENGE */ sub_14474( ref g_U2588, ref l_U1209 )) || (( /* F_HANDLE_RAILSHOOTER_CHALLENGE */ sub_14474( ref g_U2760, ref l_U1205 )) || (( /* F_HANDLE_RAILSHOOTER_CHALLENGE */ sub_14474( ref g_U2632, ref l_U1195 )) || ( /* F_HANDLE_RAILSHOOTER_CHALLENGE */ sub_14474( ref g_U2474, ref l_U1186 )))))
                {
                    l_U1213 = 1;
                    if (SCRIPT_VAR_HASH_EXISTS( 131501252 ))
                    {
                         /* WRITESCRIPTLOG */ sub_1157( "CCB", "The player killed a ped while NOT in one of the escalator triggers...", 0 );
                        SCRIPT_VAR_HASH_SET_INT( 131501252, 1 );
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_1157( "CCB", "The FinaleRSReset script variable is NOT valid!!!", 0 );
                    }
                     /* CREATETIMER */ sub_3742( ref l_U1218, 150, 1, 0 );
                     /* RESETTIMER */ sub_4601( ref l_U1218 );
                }
            }
            else if ( /* ISTIMERDONE */ sub_4025( ref l_U1218 ))
            {
                l_U1213 = 0;
                if (SCRIPT_VAR_HASH_EXISTS( 131501252 ))
                {
                     /* WRITESCRIPTLOG */ sub_1157( "CCB", "Resetting the FinaleRSReset...", 0 );
                    SCRIPT_VAR_HASH_SET_INT( 131501252, 0 );
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_1157( "CCB", "The FinaleRSReset script variable is NOT valid!!!", 0 );
                }
            }
        }
        break;
        case 2: break;
    }
    switch (l_U1030)
    {
        case 0:
         /* WRITESCRIPTLOG */ sub_1157( "CCB", "eBootsHunt - STATE_CHALLENGE_IDLE", 0 );
        l_U1030 = 1;
        break;
        case 1:
        if (l_U129 >= 9)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
            {
                if (NOT l_U1214)
                {
                    if (IS_PLAYER_SHOOTDODGING())
                    {
                        l_U1214 = 1;
                         /* WRITESCRIPTLOG */ sub_1157( "CCB", "The player is shootdodging...", 0 );
                        l_U1217 = ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2474 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2632 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2760 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2588 ));
                        DISPLAYF( "[CCB] ### The current iEnemyCount value is: {} ###", 1, 513, l_U1217 );
                    }
                }
                else if (NOT l_U1215)
                {
                    if (IS_PLAYER_SHOOTDODGING())
                    {
                        if (( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1116[1] )) || ( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1116[0] )))
                        {
                            l_U1215 = 1;
                             /* WRITESCRIPTLOG */ sub_1157( "CCB", "Starting the ThreadingTheNeedle challenge...", 0 );
                        }
                    }
                }
                else if ((l_U1217 - (((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2474 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2632 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2760 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2588 )))) >= 3)
                {
                    if (SCRIPT_VAR_HASH_EXISTS( 1101606099 ))
                    {
                         /* WRITESCRIPTLOG */ sub_1157( "CCB", "The player killed 3 enemies in a single shoot dodge from the escalators...", 0 );
                        SCRIPT_VAR_HASH_SET_INT( 1101606099, 1 );
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_1157( "CCB", "The BootsHunt script variable is NOT valid!!!", 0 );
                    }
                     /* WRITESCRIPTLOG */ sub_1157( "CCB", "eBootsHunt - STATE_CHALLENGE_COMPLETE", 0 );
                    l_U1030 = 2;
                }
                if (NOT IS_PLAYER_SHOOTDODGING())
                {
                     /* WRITESCRIPTLOG */ sub_1157( "CCB", "The player is no longer shootdodging", 0 );
                    l_U1215 = 0;
                    l_U1214 = 0;
                }
            }
        }
        break;
        case 2: break;
    }
    return;
}

/* P_HANDLE_UNGROUNDED_CHALLENGE */ void sub_13584(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if (NOT (uParam1^)[I])
        {
            if (( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1031[3] )) || (( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1031[2] )) || (( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1031[1] )) || ( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1031[0] )))))
            {
                if ( /* F_HAS_PED_BEEN_KILLED_BY_PED */ sub_13818( (uParam0^)[I],  /* PLAYER_PED_ID */ sub_2847() ))
                {
                    (uParam1^)[I] = 1;
                    DISPLAYF( "[CCB] ### The player killed the ped {} on one of the people movers... ###", 1, 513, I );
                    l_U1216 = (SCRIPT_VAR_HASH_GET_INT( 647051862 )) + 1;
                    SCRIPT_VAR_HASH_SET_INT( 647051862, l_U1216 );
                    DISPLAYF( "[CCB] ### The current UngroundedKills value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 647051862 ) );
                }
            }
            else if ( /* F_HAS_PED_BEEN_KILLED_BY_PED */ sub_13818( (uParam0^)[I],  /* PLAYER_PED_ID */ sub_2847() ))
            {
                (uParam1^)[I] = 1;
                DISPLAYF( "[CCB] ### The player killed the ped {} NOT on one of the people movers!!! ###", 1, 513, I );
            }
        }
    }
    return;
}

/* F_ISPEDINTRIGGERBOX */ int sub_13669(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* F_HAS_PED_BEEN_KILLED_BY_PED */ int sub_13818(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        if (DOES_PED_EXIST( uParam0 ))
        {
            if (IS_PED_DEAD( uParam0 ))
            {
                if (HAS_PED_BEEN_DAMAGED_BY_PED( uParam0, uParam1, 0 ))
                {
                    return 1;
                }
            }
        }
    }
    return 0;
}

/* F_HANDLE_RAILSHOOTER_CHALLENGE */ int sub_14474(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if (NOT (uParam1^)[I])
        {
            if ((NOT ( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1116[1] ))) AND ((NOT ( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1116[0] ))) AND ((NOT ( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1031[3] ))) AND ((NOT ( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1031[2] ))) AND ((NOT ( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1031[1] ))) AND (NOT ( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1031[0] ))))))))
            {
                if ( /* F_HAS_PED_BEEN_KILLED_BY_PED */ sub_13818( (uParam0^)[I],  /* PLAYER_PED_ID */ sub_2847() ))
                {
                    (uParam1^)[I] = 1;
                    DISPLAYF( "[CCB] ### The player killed the ped {} but was NOT in one of the escalator or people mover triggers!!! ###", 1, 513, I );
                    return 1;
                }
            }
            else if ( /* F_HAS_PED_BEEN_KILLED_BY_PED */ sub_13818( (uParam0^)[I],  /* PLAYER_PED_ID */ sub_2847() ))
            {
                (uParam1^)[I] = 1;
                DISPLAYF( "[CCB] ### The player killed the ped {} in one of the escalator or people mover triggers... ###", 1, 513, I );
            }
        }
    }
    return 0;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_15637(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* P_HANDLE_IMAGEFX_DEPART */ void sub_16384()
{
    if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_16430( ref l_U1307,  /* PLAYER_PED_ID */ sub_2847(), 0 ))
    {
         /* WRITESCRIPTLOG */ sub_1157( "CO", "P_HANDLE_IMAGEFX_DEPART: tbImageFX_01", 0 );
        PLAY_IMAGEFX( "DOUBLE_WIDE_INTERLACE_FLASH_07", 4, 0 );
    }
    if (l_U176._fU0)
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1328 ))
        {
            if (l_U1352 < 2)
            {
                if (NOT l_U1353)
                {
                    l_U1352++;
                     /* WRITESCRIPTLOG */ sub_1157( "CO", "P_HANDLE_IMAGEFX_DEPART: tbImageFX_02", 0 );
                    PLAY_IMAGEFX( "GAMMA_SATURATION_COLOR_ZOOM", 4, 0 );
                    l_U1353 = 1;
                }
            }
        }
        else
        {
            l_U1353 = 0;
        }
    }
     /* P_HANDLE_IMAGEFX_COVER */ sub_16829();
    return;
}

/* F_ISPEDINTRIGGERBOXFIRSTTIME */ void sub_16430(int iParam0, unknown uParam1, unknown uParam2)
{
    if (iParam0->_fU68 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU68 =  /* F_ISPEDINTRIGGERBOX */ sub_13669( uParam1, (iParam0^) );
        if ((iParam0->_fU68) AND (uParam2))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU68;
}

/* P_HANDLE_IMAGEFX_COVER */ void sub_16829()
{
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
    {
        if (IS_PED_IN_COVER(  /* PLAYER_PED_ID */ sub_2847() ))
        {
            if (NOT l_U1351)
            {
                 /* WRITESCRIPTLOG */ sub_1157( "CO", "P_HANDLE_IMAGEFX_COVER", 0 );
                l_U1350++;
                l_U1351 = 1;
                PRINTSTRING( "******* [CO] P_HANDLE_IMAGEFX_COVER: " );
                PRINTINT( l_U1350 );
                PRINTNL();
                switch (l_U1349)
                {
                    case 0:
                    if (l_U1350 == 2)
                    {
                         /* WRITESCRIPTLOG */ sub_1157( "CO", "P_HANDLE_IMAGEFX_COVER: eIMAGEFX_RUN_01", 0 );
                        PLAY_IMAGEFX( "DOUBLE_WIDE_INTERLACE_FLASH_06", 4, 0 );
                        l_U1349 = 1;
                    }
                    break;
                    case 1:
                    if (l_U1350 == 4)
                    {
                         /* WRITESCRIPTLOG */ sub_1157( "CO", "P_HANDLE_IMAGEFX_COVER: eIMAGEFX_RUN_02", 0 );
                        PLAY_IMAGEFX( "FLICKER_VIBRATE_INTERLACE_01_R", 4, 0 );
                        l_U1349 = 2;
                    }
                    break;
                    case 2:
                    if (l_U1350 == 6)
                    {
                         /* WRITESCRIPTLOG */ sub_1157( "CO", "P_HANDLE_IMAGEFX_COVER: eIMAGEFX_RUN_03", 0 );
                        PLAY_IMAGEFX( "FLICKER_VIBRATE_ZOOM_05", 3, 0 );
                        l_U1349 = 3;
                    }
                    break;
                    case 3:
                    if (l_U1350 >= 8)
                    {
                         /* WRITESCRIPTLOG */ sub_1157( "CO", "P_HANDLE_IMAGEFX_COVER: eIMAGEFX_RUN_04", 0 );
                        PLAY_IMAGEFX( "DISTORT_INTERLACE_MID_INVRT_01", 4, 0 );
                        l_U1350 = 0;
                        l_U1349 = 0;
                    }
                    break;
                }
            }
        }
        else
        {
            l_U1351 = 0;
        }
    }
    return;
}

/* P_SET_STATIC_DATA */ void sub_17747()
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_SET_STATIC_DATA", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2764[0], -41.31900000, -120.60600000, 4.38400000, 180.00000000, -1481985412, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2764[1], -43.02000000, -120.86600000, 4.38500000, 180.00000000, 2086003218, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2764[2], -41.95900000, -130.06800000, 4.38700000, 180.00000000, -850069950, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2642[0], -57.01000000, -115.95000000, 4.38000000, 180.00000000, -666693278, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2642[1], -61.97000000, -116.20000000, 4.38000000, 180.00000000, 328397087, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2642[2], -66.28000000, -102.76000000, 4.38000000, 270.00000000, -1521155921, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2642[3], -60.68000000, -36.00000000, 8.78000000, 0.00000000, 613532058, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2642[4], -62.39000000, -80.15000000, 4.38000000, 180.00000000, -1374211425, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2642[5], -62.46000000, -80.15000000, 4.38000000, 0.00000000, 964394190, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2642[6], -63.93000000, -31.82000000, 8.78000000, 0.00000000, -1481985412, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2642[7], -27.01000000, -105.68000000, 8.78000000, 0.00000000, -1481985412, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2642[8], -60.62000000, -78.07000000, 8.78000000, 0.00000000, 328397087, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2483[0], -58.48000000, -25.94000000, 4.40000000, 0.00000000, -1895062431, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2483[1], -57.00000000, -80.59000000, 4.38000000, 0.00000000, 1200579297, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2483[2], -56.12000000, -25.89000000, 4.40000000, 0.00000000, 1619601612, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2483[3], -45.06000000, -70.52000000, 4.38000000, 0.00000000, 964394190, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2483[4], -58.95000000, -21.19000000, 4.40000000, 0.00000000, 964394190, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2483[5], -28.64000000, -31.70000000, 8.78000000, 0.00000000, 613532058, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2483[6], -59.48000000, -68.15000000, 8.78000000, 0.00000000, -1521155921, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2483[7], -33.85000000, -75.60000000, 8.79000000, 0.00000000, 2086003218, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2592[0], -28.26000000, -30.47000000, 8.78000000, 0.00000000, -666693278, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2592[1], -64.08000000, -32.86000000, 8.78000000, 0.00000000, 328397087, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_17847( ref g_U2592[2], -33.88000000, -44.61000000, 4.38000000, 0.00000000, -1521155921, 7, 3, 2, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U776, "TB_DOWNSTAIRS", -53.91000000, -93.07000000, 4.37000000, 136.38000000, 40.29000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U755, "TB_UPSTAIRS", -40.88000000, -93.07000000, 8.80000000, 136.38000000, 87.43000000, 4.00000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U657, "TRIGGER_FIRST_HALF_REINFORCE", -53.46000000, -129.00000000, 4.38000000, 40.78000000, 6.21000000, 9.38000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U498, "TB_SEND_MIDDLE_WAVE", -53.51000000, -132.06000000, 4.15000000, 41.05000000, 5.01000000, 10.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U884, "TB_START_PRELOAD", -51.87000000, -38.63000000, 4.38000000, 39.41000000, 5.32000000, 8.95000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U690, "TRIGGER_SECOND_HALF", -41.01000000, -95.67000000, 4.38000000, 89.48000000, 6.21000000, 9.38000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U711, "TRIGGER_OPEN_THE_GATE", -41.01000000, -77.31000000, 4.38000000, 89.48000000, 6.21000000, 9.38000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U948, "TRIGGER_LAST_ENEMIES", -36.66000000, -60.42000000, 4.28000000, 91.74000000, 8.03000000, 9.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U990, "TRIGGER_GATE_CAN_CLOSE", -67.91000000, -4.11000000, 4.29000000, 44.80000000, 53.91000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U927, "TRIGGER_TEMP_OPEN_GATE", -55.96000000, -32.31000000, 4.38000000, 17.34000000, 3.03000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U969, "IN_CONCESSIONS", -67.91000000, -3.40000000, 4.29000000, 44.80000000, 53.91000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U905, "TB_END_DEPARTURES", -59.33000000, -22.68000000, 4.38000000, 25.14000000, 5.27000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U262, "POI_INNER", -49.08000000, -31.56000000, 4.40000000, 1.40000000, 1.84000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U283, "POI_OUTER", -49.05000000, -32.35000000, 4.40000000, 2.94000000, 3.03000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U477, "GRENADE_GUY_SWITCH_WEAPON", -47.56000000, -42.09000000, 8.76000000, 30.36000000, 3.39000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U863, "tb_CP_M_3_1_CueStart", -53.46000000, -112.85000000, 4.38000000, 40.78000000, 6.21000000, 9.38000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_20374( ref l_U749, "TETH_AVOID_PEOPLEMOVER1", -61.87000000, -96.05000000, 4.44000000, 126.15000000, 18.82000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_20374( ref l_U750, "TETH_AVOID_PEOPLEMOVER2", -49.15000000, -153.00000000, 4.60000000, 14.87000000, 10.50000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_20374( ref l_U751, "TETH_AVOID_PEOPLEMOVER3", -22.92000000, -93.28000000, 4.44000000, 135.38000000, 44.95000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_20374( ref l_U752, "TETH_AVOID_PEOPLEMOVER4", -49.15000000, -46.42000000, 4.44000000, 25.87000000, 10.82000000, 3.80000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_20374( ref l_U753, "TETH_AVOID_PEOPLEMOVER5", -49.15000000, -102.84000000, 4.60000000, 31.95000000, 10.73000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_20374( ref l_U754, "TETH_UPSTAIRS", -38.69000000, -93.38000000, 7.77000000, 135.43000000, 77.22000000, 3.90000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U1307, "tbImageFX_01", -51.29000000, -92.33000000, 0.00000000, 50.00000000, 5.00000000, 20.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U1328, "tbImageFX_02", -49.31770000, -33.27930000, 2.70691000, 5.00000000, 5.00000000, 5.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATEDOORSTRUCT */ sub_21043( ref l_U434, 160797987, -22.79239000, -150.99070000, 5.50000000, 0.00000000, 0.00000000, 0.00000000 );
    l_U565[0] = -1013714740;
    l_U565[1] = -1013714740;
    l_U565[2] = 57534114;
    l_U565[3] = 724901397;
    l_U565[4] = -1464892298;
    l_U565[5] = -612753081;
    l_U565[6] = -1464892298;
    l_U565[7] = 57534114;
    l_U565[8] = -612753081;
    l_U521[0] = 57534114;
    l_U521[1] = 57534114;
    l_U521[2] = 57534114;
    l_U681[0] = 57534114;
    l_U681[1] = 57534114;
    l_U681[2] = -1013714740;
    l_U681[3] = -612753081;
    l_U681[4] = 57534114;
    l_U681[5] = -1464892298;
    l_U681[6] = 57534114;
    l_U681[7] = -1464892298;
    l_U734[0] = -1464892298;
    l_U734[1] = -1013714740;
    l_U734[2] = 57534114;
    l_U1258[0] = "SAIR_MSHFTRD";
    l_U1258[1] = "SAIR_MSHFTRA";
    l_U1258[2] = "SAIR_MSHFTRB";
    l_U1258[3] = "SAIR_MSHFTRC";
     /* CREATETIMER */ sub_3742( ref l_U739, 18000, 1, 0 );
     /* CREATETIMER */ sub_3742( ref l_U1274, l_U1283, 1, 0 );
     /* CREATETIMER */ sub_3742( ref l_U575[0], 1500, 1, 0 );
     /* CREATETIMER */ sub_3742( ref l_U575[1], 1000, 1, 0 );
     /* CREATETIMER */ sub_3742( ref l_U575[2], 1250, 1, 0 );
     /* CREATETIMER */ sub_3742( ref l_U575[3], 2000, 1, 0 );
     /* CREATETIMER */ sub_3742( ref l_U575[4], 1000, 1, 0 );
     /* CREATETIMER */ sub_3742( ref l_U575[5], 500, 1, 0 );
     /* CREATETIMER */ sub_3742( ref l_U525[0], 550, 1, 0 );
     /* CREATETIMER */ sub_3742( ref l_U525[1], 400, 1, 0 );
     /* CREATETIMER */ sub_3742( ref l_U525[2], 100, 1, 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_17847(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_19019(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_20374(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATEDOORSTRUCT */ void sub_21043(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_21689()
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U130 = 1;
    l_U858 = 0;
    l_U859 = 0;
    l_U563 = 0;
    l_U564 = 0;
    l_U519 = 0;
    l_U520 = 0;
    l_U679 = 0;
    l_U680 = 0;
    l_U732 = 0;
    l_U733 = 0;
    l_U135 = 0;
    l_U748 = 0;
    l_U926 = 0;
    l_U678 = 0;
    l_U738 = 0;
    l_U462 = 0;
    l_U1011 = 0;
    l_U464 = 0;
    l_U463 = 0;
    l_U466 = 0;
    l_U465 = 0;
     /* CREATETIMER */ sub_3742( ref l_U468, l_U467, 1, 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_8080( ref l_U1227 );
     /* DISABLETIMER */ sub_21925( ref l_U1237 );
     /* DISABLETIMER */ sub_21925( ref l_U1264 );
     /* DISABLETIMER */ sub_21925( ref l_U1247 );
    l_U1246 = 0;
    l_U1263 = 0;
    l_U1273 = 0;
    l_U1350 = 0;
    l_U1351 = 0;
    l_U1352 = 0;
    l_U1353 = 0;
    l_U1295 = 0;
    l_U1306 = 0;
    l_U132 = 0;
     /* P_CREATEPOISTRUCTTRIGGER */ sub_22073( ref l_U176, 1, l_U144, l_U262, l_U283, 0, 0 );
     /* P_SET_INTERACTIVE_TEXT */ sub_22836( ref l_U176, 30, "POI_OPENGATE" );
    return;
}

/* DISABLETIMER */ void sub_21925(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* P_CREATEPOISTRUCTTRIGGER */ void sub_22073(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21, unknown uParam22, unknown uParam23, unknown uParam24, unknown uParam25, unknown uParam26, unknown uParam27, unknown uParam28, unknown uParam29, unknown uParam30, unknown uParam31, unknown uParam32, unknown uParam33, unknown uParam34, unknown uParam35, unknown uParam36, unknown uParam37, unknown uParam38, unknown uParam39, unknown uParam40, unknown uParam41, unknown uParam42, unknown uParam43, unknown uParam44, unknown uParam45, unknown uParam46, unknown uParam47, unknown uParam48)
{
     /* P_CREATEBLANKPOISTRUCT */ sub_22117( iParam0, uParam47 );
    iParam0->_fU4 = uParam1;
    iParam0->_fU80 = 1;
    iParam0->_fU116 = {uParam5};
    iParam0->_fU88 = 1;
    iParam0->_fU216 = {uParam26};
    iParam0->_fU320 = uParam48;
    iParam0->_fU20 = {uParam2};
     /* P_CREATEPOIGLINT */ sub_22508( iParam0 );
    return;
}

/* P_CREATEBLANKPOISTRUCT */ void sub_22117(int iParam0, unknown uParam1)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = 0;
    iParam0->_fU8 = 0;
    iParam0->_fU12 = nil;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU52 = 1;
    iParam0->_fU56 = 1;
    iParam0->_fU60 = 0;
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = 0;
    iParam0->_fU80 = 0;
    iParam0->_fU84 = 0;
    iParam0->_fU100 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU112 = 0.00000000;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU96 = 0;
    iParam0->_fU200 = {0.00000000, 0.00000000, 0.00000000};
    iParam0->_fU212 = 0.00000000;
    iParam0->_fU300 = 0;
    iParam0->_fU304 = 1;
    iParam0->_fU308 = 0;
    iParam0->_fU324 = 1;
    iParam0->_fU328 = 0;
    iParam0->_fU340 = 0;
    iParam0->_fU336 = 0.20000000;
    return;
}

/* P_CREATEPOIGLINT */ void sub_22508(int iParam0)
{
    if (iParam0->_fU12 != nil)
    {
        if ((DOES_GLINT_EXIST( iParam0->_fU12 )) == 1)
        {
            REMOVE_GLINT( iParam0->_fU12 );
        }
    }
    iParam0->_fU12 = CREATE_GLINT( iParam0->_fU16, iParam0->_fU20 );
     /* P_INITPOIGLINT */ sub_22606( iParam0 );
    return;
}

/* P_INITPOIGLINT */ void sub_22606(int iParam0)
{
    if (iParam0->_fU0 == 1)
    {
        if (iParam0->_fU320 == 1)
        {
            if ((iParam0->_fU8 > 0) AND (iParam0->_fU4 == 0))
            {
                 /* P_ENABLEPOIGLINT */ sub_7095( iParam0, 1 );
            }
            else if ((iParam0->_fU8 < 2) AND (iParam0->_fU4 == 1))
            {
                 /* P_ENABLEPOIGLINT */ sub_7095( iParam0, 1 );
            }
            else if ((iParam0->_fU8 == 1) AND (iParam0->_fU4 == 2))
            {
                 /* P_ENABLEPOIGLINT */ sub_7095( iParam0, 1 );
            }
            else
            {
                 /* P_ENABLEPOIGLINT */ sub_7095( iParam0, 0 );
            };;;
        }
        else
        {
             /* P_ENABLEPOIGLINT */ sub_7095( iParam0, 0 );
        }
    }
    else
    {
         /* P_ENABLEPOIGLINT */ sub_7095( iParam0, 0 );
    }
    return;
}

/* P_SET_INTERACTIVE_TEXT */ void sub_22836(int iParam0, unknown uParam1, unknown uParam2)
{
    StrCopy( ref iParam0->_fU32, uParam2, 16 );
    iParam0->_fU48 = uParam1;
     /* P_INITINTERACTIVETEXT */ sub_22892( iParam0 );
    return;
}

/* P_INITINTERACTIVETEXT */ void sub_22892(int iParam0)
{
    if ((iParam0->_fU8 == 2) AND (iParam0->_fU0 == 1))
    {
        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
        {
            SET_INTERACTIONTEXT_BUTTON( iParam0->_fU48 );
            SET_INTERACTIONTEXT_TEXT( iParam0 + 32 );
            SET_INTERACTIONTEXT_VISIBLE( 1 );
            SET_INTERACTIONTEXT_BUTTON_VISIBLE( 1 );
            SET_INTERACTIONTEXT_AVAILABLE( 1 );
            iParam0->_fU56 = 1;
        }
    }
    return;
}

/* P_INITIALIZE_SP_CHALLENGES */ void sub_23049()
{
     /* WRITESCRIPTLOG */ sub_1157( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
    l_U1028 = 0;
    l_U1029 = 0;
    l_U1030 = 0;
     /* P_RESET_BOOL_ARRAY */ sub_23151( ref l_U1159 );
     /* P_RESET_BOOL_ARRAY */ sub_23151( ref l_U1168 );
     /* P_RESET_BOOL_ARRAY */ sub_23151( ref l_U1178 );
     /* P_RESET_BOOL_ARRAY */ sub_23151( ref l_U1182 );
     /* P_RESET_BOOL_ARRAY */ sub_23151( ref l_U1186 );
     /* P_RESET_BOOL_ARRAY */ sub_23151( ref l_U1195 );
     /* P_RESET_BOOL_ARRAY */ sub_23151( ref l_U1205 );
     /* P_RESET_BOOL_ARRAY */ sub_23151( ref l_U1209 );
    l_U1214 = 0;
    l_U1215 = 0;
    l_U1216 = 0;
    l_U1217 = 0;
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U1031[0], "TRIGGER_CONVEYOR_01", -47.10000000, -73.65000000, 4.28000000, 2.50000000, 27.00000000, 9.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U1031[1], "TRIGGER_CONVEYOR_02", -50.80000000, -73.65000000, 4.28000000, 2.50000000, 27.00000000, 9.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U1031[2], "TRIGGER_CONVEYOR_03", -47.10000000, -132.33000000, 4.28000000, 2.50000000, 27.00000000, 9.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U1031[3], "TRIGGER_CONVEYOR_04", -50.80000000, -132.33000000, 4.28000000, 2.50000000, 27.00000000, 9.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U1116[0], "TRIGGER_ESCALATOR_01", -35.03000000, -103.88000000, 4.28000000, 2.50000000, 13.00000000, 9.00000000, 0.00000000, 0.00000000, 135.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_19019( ref l_U1116[1], "TRIGGER_ESCALATOR_02", -35.17000000, -89.42000000, 4.28000000, 2.50000000, 13.00000000, 9.00000000, 0.00000000, 0.00000000, 45.00000000, 1 );
    if (NOT (SCRIPT_VAR_HASH_EXISTS( 647051862 )))
    {
         /* WRITESCRIPTLOG */ sub_1157( "CCB", "Creating the UngroundedKills script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( 647051862 );
        DISPLAYF( "[CCB] ### The current UngroundedKills value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 647051862 ) );
        if (SCRIPT_VAR_HASH_EXISTS( 647051862 ))
        {
             /* WRITESCRIPTLOG */ sub_1157( "CCB", "The UngroundedKills script variable was successfully created...", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_1157( "CCB", "The UngroundedKills script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_1157( "CCB", "The UngroundedKills script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( 647051862, 0 );
        DISPLAYF( "[CCB] ### The current UngroundedKills value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 647051862 ) );
    }
    if (NOT (SCRIPT_VAR_HASH_EXISTS( 131501252 )))
    {
         /* WRITESCRIPTLOG */ sub_1157( "CCB", "Creating the FinaleRSReset script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( 131501252 );
        DISPLAYF( "[CCB] ### The current FinaleRSReset value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 131501252 ) );
        if (SCRIPT_VAR_HASH_EXISTS( 131501252 ))
        {
             /* WRITESCRIPTLOG */ sub_1157( "CCB", "The FinaleRSReset script variable was successfully created...", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_1157( "CCB", "The FinaleRSReset script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_1157( "CCB", "The FinaleRSReset script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( 131501252, 0 );
        DISPLAYF( "[CCB] ### The current FinaleRSReset value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 131501252 ) );
    }
    if (NOT (SCRIPT_VAR_HASH_EXISTS( 1101606099 )))
    {
         /* WRITESCRIPTLOG */ sub_1157( "CCB", "Creating the BootsHunt script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( 1101606099 );
        DISPLAYF( "[CCB] ### The current BootsHunt value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 1101606099 ) );
        if (SCRIPT_VAR_HASH_EXISTS( 1101606099 ))
        {
             /* WRITESCRIPTLOG */ sub_1157( "CCB", "The BootsHunt script variable was successfully created...", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_1157( "CCB", "The BootsHunt script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_1157( "CCB", "The BootsHunt script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( 1101606099, 0 );
        DISPLAYF( "[CCB] ### The current BootsHunt value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( 1101606099 ) );
    }
    return;
}

/* P_RESET_BOOL_ARRAY */ void sub_23151(unknown uParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_1157( "CCB", "P_RESET_BOOL_ARRAY", 0 );
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = 0;
    }
    return;
}

/* P_REQUEST_DEPARTURES_PERSISTENT_ASSETS */ void sub_25462()
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_REQUEST_DEPARTURES_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_25579( ref l_U1012, ref g_U1030 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_28502( 57534114, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_28502( -1013714740, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_28502( -1464892298, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_28502( -612753081, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_28502( 724901397, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_28502( -378310276, ref g_U1247 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_30520( "PROP_BUTTON", ref g_U1429 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_30520( "npc_pstl_cover_grenade", ref g_U1429 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_30520( "npc_rifle_cover_grenade", ref g_U1429 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_32504( "SCRIPT_MISSION\S_AIR_DEPARTURE_01", ref g_U1950 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_25579(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_25652( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_25652(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_25719( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_25977( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_25719(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_25977( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_25977( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_25977( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_27508( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_25977( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_25977( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_25977(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_26038( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_26038(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_27508(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_28502(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_28556( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_28817( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_28556(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_28817( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_28817( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_28817( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_27508( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_28817( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_28817( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_28817(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_26038( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_30520(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_30572( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_30824( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_30572(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_30824( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_30824( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_30824( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_27508( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_30824( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_30824( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_30824(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_26038( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_32504(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_32557( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_32812( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_32557(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_32812( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_32812( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_32812( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_27508( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_32812( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_32812( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_32812(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_26038( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_DEPARTURES_NONPERSISTENT_ASSETS */ void sub_34406()
{
     /* WRITESCRIPTLOG */ sub_1157( "GA", "P_REQUEST_DEPARTURES_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_34530( 783941433, ref g_U1368 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_34530( -192153712, ref g_U1368 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_34530( 224058020, ref g_U1368 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_34530( -1956283442, ref g_U1368 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_34530( 789239515, ref g_U1368 );
    if ((l_U131) AND (g_U829 != 3))
    {
         /* WRITESCRIPTLOG */ sub_1157( "AT", "Requesting cutscene assets ...", 0 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_25652( 640993624, ref g_U1030 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_25652( 920743876, ref g_U1030 );
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_25652( -1022450266, ref g_U1030 );
    }
     /* WRITESCRIPTLOG */ sub_1157( "GA", "P_REQUEST_DEPARTURES_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_34530(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_34591( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_34841( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_34591(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_34841( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_34841( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_34841( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_34841( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_27508( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_27508( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_34841( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_34841( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_34841(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_26038( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_37625(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_38022(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_38424(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_38815(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_39229(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_39845(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_1157( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_8452( uParam0,  /* PLAYER_PED_ID */ sub_2847() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_40396(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_1157( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_1157( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_11718( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_40687( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_41164( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_41164( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_41424( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_41164( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_41424( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_41424( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_41164( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_41424( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_41424( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_41424( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_41164( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_41424( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_41424( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_41424( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_41424( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_43004( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_1157( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_40687(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_8733( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_1157( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_1157( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_41164(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_41424(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_43004(int iParam0)
{
     /* WRITE_STRING */ sub_10553( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_43092( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_43169( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_43169( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_43169( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_43169( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_43169( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_44039( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU52 );
     /* WRITE_STRING */ sub_10553( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU96 );
     /* WRITE_STRING */ sub_10553( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU100 );
     /* WRITE_STRING */ sub_10553( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU104 );
     /* WRITE_STRING */ sub_10553( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU108 );
     /* WRITE_STRING */ sub_10553( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU112 );
     /* WRITE_STRING */ sub_10553( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU116 );
     /* WRITE_STRING */ sub_10553( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU120 );
     /* WRITE_STRING */ sub_10553( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU124 );
     /* WRITE_STRING */ sub_10553( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU128 );
     /* WRITE_STRING */ sub_10553( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_43338( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_43338( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_43338( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_43092(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_43169(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_43338(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_44039(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* F_SETUP_DEPARTURES_VIG04_ENEMIES */ int sub_45091()
{
    char[64] cVar2;
    unknown uVar18;

    switch (l_U563)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnVIG04 = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_45239( ref l_U441, 1056964608, 0 );
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U441._fU0, 1 );
        l_U564 = 0;
        l_U563 = 2;
         /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnVIG04 = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_DP_VIG04[", 64 );
        ConcatString(ref cVar2, l_U564, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        g_U2632[l_U564] =  /* CREATEPED */ sub_45777( ref g_U2642[l_U564] );
        if (l_U564 < 6)
        {
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_46765( g_U2632[l_U564], ref l_U441 );
        }
        else
        {
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_46765( g_U2632[l_U564], ref l_U453 );
        }
        uVar18 =  /* F_GIVEPEDWEAPON */ sub_10944( g_U2632[l_U564], l_U565[l_U564], 25000, 0, 0 );
        if (l_U564 == 6)
        {
            DISPLAYF( "OMGGRENADEZ - Setting Grenade Throwing Parameters on pi_DP_VIG04[{}]", 1, 513, l_U564 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10149( g_U2632[l_U564], -378310276, 5, 25000, 0 );
            SET_PED_PROJECTILE_OVERRIDE_PARAMETERS( g_U2632[l_U564], 0, -1, -1, 1, 0 );
        }
        if (NOT (IS_PED_DEAD( g_U2632[l_U564] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2632[l_U564], 1 );
            SET_PED_AI_TEMPLATE( g_U2632[l_U564], "AIT_NORMAL" );
            SET_ROOM_FOR_PED_BY_NAME( g_U2632[l_U564], ref g_U2278 );
            if ((l_U564 == 6) || (l_U564 == 3))
            {
                 /* P_TETHERPED */ sub_47499( ref l_U754, g_U2632[l_U564], 3 );
            }
            else
            {
                 /* P_TETHERPED */ sub_47499( ref l_U749, g_U2632[l_U564], 3 );
                 /* P_TETHERPED */ sub_47499( ref l_U750, g_U2632[l_U564], 3 );
                 /* P_TETHERPED */ sub_47499( ref l_U751, g_U2632[l_U564], 3 );
                 /* P_TETHERPED */ sub_47499( ref l_U752, g_U2632[l_U564], 3 );
                 /* P_TETHERPED */ sub_47499( ref l_U753, g_U2632[l_U564], 3 );
            }
        }
        l_U564++;
        if (l_U564 >= g_U2632)
        {
            l_U563 = 3;
             /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnVIG04 = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_47812( ref g_U2632, "VIG04" );
        SET_GROUP_GRENADE_PARAMS( l_U441._fU0, 500 );
         /* P_DEACTIVATEPEDARRAY */ sub_47963( ref g_U2632 );
        l_U563 = 4;
         /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnVIG04 = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_45239(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* CREATEPED */ void sub_45777(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_45959( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_46508( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_46609( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_45959(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_10553( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_46508(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_46609(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_46765(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_10553( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_45239( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_45239( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_TETHERPED */ void sub_47499(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_47812(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_DEACTIVATEPEDARRAY */ void sub_47963(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_48017( (uParam0^)[I] );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_48017(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* F_SETUP_DEPARTURES_VIG05_ENEMIES */ int sub_48238()
{
    char[64] cVar2;

    switch (l_U519)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnVIG05 = ENTITY_STATE_INIT", 0 );
        l_U520 = 0;
        l_U519 = 2;
         /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnVIG05 = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_DP_VIG05[", 64 );
        ConcatString(ref cVar2, l_U520, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        g_U2760[l_U520] =  /* CREATEPED */ sub_45777( ref g_U2764[l_U520] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_46765( g_U2760[l_U520], ref l_U441 );
         /* F_GIVEPEDWEAPON */ sub_10944( g_U2760[l_U520], l_U521[l_U520], 25000, 0, 0 );
        if (NOT (IS_PED_DEAD( g_U2760[l_U520] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2760[l_U520], 1 );
            SET_PED_AI_TEMPLATE( g_U2760[l_U520], "AIT_NORMAL" );
            SET_ROOM_FOR_PED_BY_NAME( g_U2760[l_U520], ref g_U2278 );
        }
         /* P_TETHERPED */ sub_47499( ref l_U749, g_U2760[l_U520], 3 );
         /* P_TETHERPED */ sub_47499( ref l_U750, g_U2760[l_U520], 3 );
         /* P_TETHERPED */ sub_47499( ref l_U751, g_U2760[l_U520], 3 );
         /* P_TETHERPED */ sub_47499( ref l_U752, g_U2760[l_U520], 3 );
         /* P_TETHERPED */ sub_47499( ref l_U753, g_U2760[l_U520], 3 );
        l_U520++;
        if (l_U520 >= g_U2760)
        {
            l_U519 = 3;
             /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnVIG05 = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_47812( ref g_U2760, "VIG05" );
         /* P_DEACTIVATEPEDARRAY */ sub_47963( ref g_U2760 );
        l_U519 = 4;
         /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnVIG05 = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_CREATE_PEOPLEMOVER */ void sub_49098(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_CREATE_PEOPLEMOVER", 0 );
    (uParam0^) =  /* CREATEOBJECTMOVER */ sub_49192( g_U2393, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( (uParam0^) ))
    {
        if (bParam4)
        {
            SET_MOVER_SPEED( (uParam0^), 1.00000000, 0.00000000 );
        }
        else
        {
            SET_MOVER_SPEED( (uParam0^), -1.00000000, 0.00000000 );
        }
        FREEZE_OBJECT_POSITION( (uParam0^), 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( (uParam0^), ref g_U2278 );
    }
    return;
}

/* CREATEOBJECTMOVER */ void sub_49192(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object mover with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_45959( uParam0, 1 );
    }
    Result = CREATE_OBJECT_MOVER( uParam0, uParam1, NOT bParam7, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_CREATE_ESCALATOR */ void sub_49707(unknown uParam0, unknown uParam1, vector vParam2, unknown uParam5, unknown uParam6, unknown uParam7, boolean bParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_CREATE_ESCALATOR", 0 );
    (uParam0^) =  /* CREATEOBJECTNOOFFSET */ sub_49784( g_U2394, vParam2, uParam5, 0, 0, 0 );
    (uParam1^) =  /* CREATEOBJECTMOVER */ sub_49192( g_U2395, vParam2 - (vector( 0.00000000, 0.00000000, 2.38000000)), uParam5, 0, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( (uParam0^) ))
    {
        PLAY_OBJECT_ANIM( (uParam0^), "AP_EscSil_N1_Ad_H", "ap_anim", 0.00000000, 1, 0 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( (uParam0^), uParam9 );
        FREEZE_OBJECT_POSITION( (uParam0^), 1 );
        if (bParam8)
        {
            SET_OBJECT_ANIM_SPEED( (uParam0^), "AP_EscSil_N1_Ad_H", "ap_anim", 1.00000000 );
        }
        else
        {
            SET_OBJECT_ANIM_SPEED( (uParam0^), "AP_EscSil_N1_Ad_H", "ap_anim", -1.00000000 );
        }
    }
    if (DOES_OBJECT_EXIST( (uParam1^) ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( (uParam1^), uParam9 );
        FREEZE_OBJECT_POSITION( (uParam1^), 1 );
        if (bParam8)
        {
            SET_MOVER_SPEED( (uParam1^), 1.00000000, 1.00000000 );
        }
        else
        {
            SET_MOVER_SPEED( (uParam1^), -1.00000000, -1.00000000 );
        }
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_49784(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_45959( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_CREATE_PLACEMENTS */ void sub_50481()
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_CREATE_PLACEMENTS", 0 );
    l_U420 =  /* CREATEOBJECTNOOFFSET */ sub_49784( -2043642572, l_U422, l_U425, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U420 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U420, ref g_U2270 );
        FREEZE_OBJECT_POSITION( l_U420, 1 );
    }
    l_U421 =  /* CREATEOBJECTNOOFFSET */ sub_49784( -2043642572, l_U428, l_U431, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U421 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U421, ref g_U2278 );
        FREEZE_OBJECT_POSITION( l_U421, 1 );
    }
    l_U824[0] =  /* CREATEPLACEMENT */ sub_50743( -4072149, -68.98000000, -61.05000000, 5.39000000, 0.00000000, 0.00000000, 30.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U824[0] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U824[0], ref g_U2278 );
    }
    l_U824[1] =  /* CREATEPLACEMENT */ sub_50743( -4072149, -68.82000000, -61.30000000, 5.39000000, 0.00000000, 0.00000000, 0.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U824[1] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U824[1], ref g_U2278 );
    }
    l_U824[2] =  /* CREATEPLACEMENT */ sub_50743( -4072149, -68.85000000, -103.70000000, 5.39000000, 0.00000000, 0.00000000, 1.57070000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U824[2] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U824[2], ref g_U2278 );
    }
    l_U824[3] =  /* CREATEPLACEMENT */ sub_50743( -4072149, -34.76000000, -151.72000000, 5.60000000, 0.00000000, 0.00000000, 0.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U824[3] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U824[3], ref g_U2270 );
    }
    l_U824[4] =  /* CREATEPLACEMENT */ sub_50743( -4072149, -34.75000000, -151.54000000, 5.60000000, 0.00000000, 0.00000000, 1.57000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U824[4] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U824[4], ref g_U2270 );
    }
    l_U824[5] =  /* CREATEPLACEMENT */ sub_50743( -4072149, -26.68000000, -86.39000000, 9.82000000, 0.00000000, 0.00000000, 0.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U824[5] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U824[5], ref g_U2278 );
    }
     /* P_CREATE_S_AIR_GG_PD_01 */ sub_51445();
     /* P_CREATE_S_AIR_GG_PD_02 */ sub_52268();
    return;
}

/* CREATEPLACEMENT */ void sub_50743(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_CREATE_S_AIR_GG_PD_01 */ void sub_51445()
{
     /* WRITESCRIPTLOG */ sub_1157( "CO", "P_CREATE_S_AIR_GG_PD_01", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_51589( ref g_U769, g_U826, 1723974869, 1365850362, -60.25000000, -144.13000000, 8.80000000, 1.50000000, 0.00000000, 1.00000000, "GtaMloRoom_depart" );
     /* P_CREATECOLLECTIBLE */ sub_51746( ref g_U769 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_51589(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_1157( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_51746(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_1157( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_51829( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_1157( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_1157( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_51829( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_6928( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_50743( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_1157( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_1157( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_51829(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_CREATE_S_AIR_GG_PD_02 */ void sub_52268()
{
     /* WRITESCRIPTLOG */ sub_1157( "CO", "P_CREATE_S_AIR_GG_PD_02", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_51589( ref g_U787, g_U827, 1416568880, 1649728209, -67.55000000, -61.54000000, 4.40000000, 0.00000000, 1.50000000, 0.50000000, "GtaMloRoom_depart" );
     /* P_CREATECOLLECTIBLE */ sub_51746( ref g_U787 );
    return;
}

/* P_CREATE_DEPARTURES_GATE */ void sub_52446(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_CREATE_DEPARTURES_GATE", 0 );
    g_U2467 =  /* CREATEOBJECTNOOFFSET */ sub_49784( 1640831600, g_U2468, g_U2471, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U2467 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U2467, uParam0 );
        FREEZE_OBJECT_POSITION( g_U2467, 1 );
        SET_OBJECT_AS_PATH_OBSTACLE( g_U2467 );
    }
     /* MAL_PLAYOBJECTANIM */ sub_52649( g_U2467, "APD_secGates03", "ap_anim", 0.00000000, 0.00000000 );
    return;
}

/* MAL_PLAYOBJECTANIM */ void sub_52649(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        PLAY_OBJECT_ANIM( uParam0, uParam1, uParam2, 0.00000000, 0, 1 );
        SET_OBJECT_ANIM_CURRENT_TIME( uParam0, uParam1, uParam2, uParam4 );
        SET_OBJECT_ANIM_SPEED( uParam0, uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_CREATE_GATE_OBJECTS */ void sub_52761()
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_CREATE_GATE_OBJECTS", 0 );
    l_U136 =  /* CREATEOBJECTNOOFFSET */ sub_49784( -576031449, l_U137, l_U140, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U136 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U136, ref g_U2278 );
        FREEZE_OBJECT_POSITION( l_U136, 1 );
    }
    l_U143 =  /* CREATEOBJECTNOOFFSET */ sub_49784( -338998251, l_U144, l_U147, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U143 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U143, ref g_U2278 );
        FREEZE_OBJECT_POSITION( l_U143, 1 );
        SET_OBJECT_VISIBLE( l_U143, 0 );
    }
    l_U150 =  /* CREATEOBJECTNOOFFSET */ sub_49784( 1586610117, l_U152, l_U155, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U150 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U150, ref g_U2278 );
        FREEZE_OBJECT_POSITION( l_U150, 1 );
        SET_OBJECT_VISIBLE( l_U150, 0 );
    }
    l_U151 =  /* CREATEOBJECTNOOFFSET */ sub_49784( -1913048611, l_U152, l_U155, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U151 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U151, ref g_U2278 );
        FREEZE_OBJECT_POSITION( l_U151, 1 );
    }
    return;
}

/* P_SETUP_AGA */ void sub_53191(unknown uParam0, int iParam1, unknown uParam2, int iParam3, int iParam4)
{
    int I;

     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_SETUP_AGA", 0 );
    if (iParam3 == -1)
    {
        iParam3 = 0;
    }
    if (iParam4 == -1)
    {
        iParam4 = (uParam0^);
    }
    (uParam2^) = PEDGROUPTASK_ADVANCE_CREATE( iParam1->_fU0 );
    for ( I = iParam3; I <= (iParam4 - 1); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Assigning ped to aggressive group advance task.", 0 );
            PEDGROUPTASK_ADVANCE_ASSIGNPED( iParam1->_fU0, (uParam2^), (uParam0^)[I] );
        }
    }
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
    {
        PEDGROUPTASK_ADVANCE_SETTARGET_PED( iParam1->_fU0, (uParam2^),  /* PLAYER_PED_ID */ sub_2847() );
    }
    PEDGROUPTASK_ADVANCE_SETTIMETOHIDE( iParam1->_fU0, (uParam2^), 2.00000000 );
    PEDGROUPTASK_ADVANCE_SETTIMETOIDLE( iParam1->_fU0, (uParam2^), 5.00000000 );
    PEDGROUPTASK_ADVANCE_SETNUMPEDSTOADVANCE( iParam1->_fU0, (uParam2^), 3 );
    return;
}

/* CUTSYS_DEFAULT_PRECUTSCENESETUP */ int sub_53808()
{
    return 1;
}

/* P_REGISTER_MID_03_FIN */ void sub_53861()
{
     /* MAL_PLAYOBJECTANIM */ sub_52649( g_U2467, "APD_secGates03", "ap_anim", 0.00000000, 0.25000000 );
     /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_53943( 0 );
     /* P_ACTIVATEPEDARRAY */ sub_54216( ref g_U2760 );
     /* P_ACTIVATEPEDARRAY */ sub_54216( ref g_U2632 );
    CUTSCENE_REGISTER_ISEQ( 783941433 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
    {
        ISEQ_REGISTER_ENTITY( 783941433, "Max",  /* PLAYER_PED_ID */ sub_2847(), 0 );
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_2847(), g_U2014[3], g_U2129[3] );
        CUTSCENE_REGISTER_SET_PLAYER_IN_COVER( "ap_sec3", "Grabspline30-3", 0, 0 );
        CUTSCENE_SET_COVER_CAMERA_DIRECTION( g_U2168[3], g_U2207[3] );
    }
    if (NOT (IS_PED_DEAD( g_U2760[0] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2760[0], "A_UFE_Sold_B", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U2760[0], 0, 0 ), "W_AR_G36K_Aa_H", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U2760[0], g_U2764[0]._fU0, g_U2764[0]._fU12 );
    }
    if (NOT (IS_PED_DEAD( g_U2760[1] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2760[1], "A_UFE_Sold_B^1", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U2760[1], 0, 0 ), "W_AR_G36K_Aa_H^1", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U2760[1], g_U2764[1]._fU0, g_U2764[1]._fU12 );
    }
    if (NOT (IS_PED_DEAD( g_U2760[2] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2760[2], "A_UFE_Sold_B^2 ", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U2760[2], 0, 0 ), "W_AR_G36K_Aa_H^2", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U2760[2], g_U2764[2]._fU0, g_U2764[2]._fU12 );
    }
    if (NOT (IS_PED_DEAD( g_U2632[3] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2632[3], "A_UFE_Sold_B^6 ", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U2632[3], 0, 0 ), "W_sb_mt4_Aa_H^5", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U2632[3], g_U2642[3]._fU0, g_U2642[3]._fU12 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U2632[3], "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_IDLE" );
    }
    if (NOT (IS_PED_DEAD( g_U2632[0] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2632[0], "A_UFE_Sold_B^8", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U2632[0], 0, 0 ), "W_sb_mt4_Aa_H^3", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U2632[0], g_U2642[0]._fU0, g_U2642[0]._fU12 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U2632[0], "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_IDLE" );
    }
    if (NOT (IS_PED_DEAD( g_U2632[1] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2632[1], "A_UFE_Sold_B^10", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U2632[1], 0, 0 ), "W_sb_mt4_Aa_H^2", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U2632[1], g_U2642[1]._fU0, g_U2642[1]._fU12 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U2632[1], "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_IDLE" );
    }
    if (NOT (IS_PED_DEAD( g_U2632[2] )))
    {
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE( g_U2632[2], "A_UFE_Sold_B^11", 0 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( g_U2632[2], 0, 0 ), "W_sb_mt4_Aa_H^4", 0 );
        CUTSCENE_REGISTER_PED_TELEPORT( g_U2632[2], g_U2642[2]._fU0, g_U2642[2]._fU12 );
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE( g_U2632[2], "/Global/PLGE/PLGE_Root/PLGE_INITIALIZE_IDLE" );
    }
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "F_AP_Civ_Z", 1165314417 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "F_AP_Civ_Z^1", -818120854 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "F_AP_Civ_Z^2", -1369936065 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "F_AP_Civ_Z^3", -2061537378 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "F_AP_Civ_Z^4", 383606811 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "F_AP_Civ_Z^5", -1222687741 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_AP_Civ_B", 723153096 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_AP_Civ_B^1", 908013395 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_AP_Civ_B^2", -1164577665 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_AP_Civ_B^3", -1595077162 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_AP_Civ_B^4", -815131295 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_AP_Civ_B^5", 1738286717 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_AP_Sec_A", 888063291 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_AP_Sec_A^1", -2008726130 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_AP_Sec_A^2", 1727425139 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_AP_Sec_A^4", -458235918 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_AP_Sec_A^5", 888063291 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "M_AP_Sec_A^6", -2008726130 );
    CUTSCENE_ENABLE_SKIP( 0 );
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_53943(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2847(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2847(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2847(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2847(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2847(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_54216(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_54268( (uParam0^)[I] );
    }
    return;
}

/* P_ACTIVATEPED */ void sub_54268(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_DP_MID_03_FIN_HANDLECUTSCENE */ void sub_56226()
{
    if (NOT l_U858)
    {
        if (GET_CUTSCENE_TIME_MS() >= 11620)
        {
             /* WRITESCRIPTLOG */ sub_1157( "GA", "Fading out FINALE_SONG_01 FINALE_01_2 over 3 seconds.", 0 );
            AUDIO_MUSIC_SUSPEND( 3000 );
            l_U858 = 1;
        }
    }
    if (l_U132 == 0)
    {
        if (GET_CUTSCENE_TIME_MS() >= 8000)
        {
            CUTSCENE_ENABLE_SKIP( 1 );
            l_U132 = 1;
        }
    }
    return;
}

/* F_MID_03_FIN_POST */ int sub_56429()
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "Removing cutscene assets ...", 0 );
    return 1;
}

/* P_PREPARE_MID_03_FIN_BLENDOUT */ void sub_56510()
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_PREPARE_MID_03_FIN_BLENDOUT", 0 );
    SET_MOVIE_LOOP( 0, 1 );
    PLAY_MOVIE( 0, 0 );
     /* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ sub_56614( 1 );
     /* P_SETDOORLOCKED */ sub_57259( ref l_U434, 1 );
     /* MAL_PLAYOBJECTANIM */ sub_52649( g_U2467, "APD_secGates03", "ap_anim", -1.00000000, 1.00000000 );
    SET_PED_MODEL_LOD_DISTANCES( 2004595611, 10.00000000, 120.00000000 );
     /* P_ACTIVATE_VIG04 */ sub_57588();
     /* P_ACTIVATE_VIG05 */ sub_57983();
     /* P_DEPATURE_KICKOFF_MAX_SPOTTED */ sub_58287();
    l_U748 = 1;
    PEDGROUPTASK_ADVANCE_TRIGGER_MOVE( l_U441._fU0, l_U459 );
     /* NIS_PRE_SETUP */ sub_58537( 1, 0, 0, 0 );
    if ((NOT (ISEQ_QUERY_ENTITY_STATE( 783941433, "Max", 2 ))) AND (NOT (ISEQ_QUERY_ENTITY_STATE( 783941433, "Max", 3 ))))
    {
         /* P_RESET_MAX_ACTION_TREE */ sub_58758();
         /* MAL_WRITESCRIPTLOG */ sub_59154( "BOUT_MID03_FIN NOT STARTED BY CUTSCENE STARTING MANUALLY" );
        ISEQ_REGISTER_ENTITY( 783941433, "Max",  /* PLAYER_PED_ID */ sub_2847(), 0 );
         /* TELEPORTPED */ sub_58185(  /* PLAYER_PED_ID */ sub_2847(), g_U2014[3], g_U2129[3] );
        SNAP_PLAYER_TO_COVERLINE(  /* PLAYER_ID */ sub_2885(), "ap_sec3", "Grabspline30-3", 0, -49.37967000, -153.79600000, 4.38443000 );
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2168[3], 0, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2207[3], 0, 0 );
        ISEQ_START( 783941433 );
    }
    CAMERA_PLAY_ANIMATED( "LEVEL_S_FIN_CP_03", "B_OUT_MID_03_FIN_CAM", 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0, 0 );
     /* WRITESCRIPTLOG */ sub_1157( "GA", "Starting FINALE_SONG_02 music track with FINALE_02_1 mood. Fade in 0 sec, fStartOfsetScalar of 0.000001", 0 );
    AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_02", "FINALE_02_1", "FINALE_02_1", 2.00000000, 0, 10000, 0.00000100, 0 );
    return;
}

/* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ void sub_56614(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )) == 0)
    {
        iVar3 = 0;
        uVar4 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2847(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 0)
        {
            iVar3 = 1;
        }
        if ((( /* IS_WEAPON_SINGLE_HANDED */ sub_56737( uVar4 )) == 0) AND ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1))
        {
            iVar3 = 1;
        }
        if (iVar3 == 1)
        {
            uVar5 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_56972();
            if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_2847(), uVar5, 0, uParam0 );
            }
        }
    }
    return;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_56737(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_56972()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2847(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_56737( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2847(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2847(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2847(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* P_SETDOORLOCKED */ void sub_57259(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_57289( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_57373( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_57289(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_57373(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_ACTIVATE_VIG04 */ void sub_57588()
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_ACTIVATE_VIG04", 0 );
     /* P_ACTIVATEPED */ sub_54268( g_U2632[0] );
     /* P_ACTIVATEPED */ sub_54268( g_U2632[1] );
     /* P_ACTIVATEPED */ sub_54268( g_U2632[2] );
     /* P_ACTIVATEPED */ sub_54268( g_U2632[3] );
    if (NOT (IS_PED_DEAD( g_U2632[0] )))
    {
        TASK_COMBAT_SNAP_TO_COVER( g_U2632[0], "GenCover", "A2FE8EDB_3E1DDC86_Corner1", 0 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U2632[0], 1 );
    }
    if (NOT (IS_PED_DEAD( g_U2632[1] )))
    {
        TASK_COMBAT_SNAP_TO_COVER( g_U2632[1], "GenCover", "A2FE8EDB_B58DEE88_Corner1", 0 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U2632[1], 1 );
    }
    if (NOT (IS_PED_DEAD( g_U2632[2] )))
    {
        TASK_COMBAT_SNAP_TO_COVER( g_U2632[2], "GenCover", "A2FE8EDB_459DEAAA_Corner1", 0 );
        SET_PED_FLAG_LOCK_TO_COVER( g_U2632[2], 1 );
    }
    return;
}

/* P_ACTIVATE_VIG05 */ void sub_57983()
{
    int I;

     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_ACTIVATE_VIG05", 0 );
     /* P_ACTIVATEPEDARRAY */ sub_54216( ref g_U2760 );
    ISEQ_REGISTER_ENTITY( -1956283442, "GMED0", g_U2760[0], 0 );
    ISEQ_REGISTER_ENTITY( -1956283442, "GMED1", g_U2760[1], 0 );
    ISEQ_REGISTER_ENTITY( -1956283442, "GMED2", g_U2760[2], 0 );
    for ( I = 0; I <= 2; I++ )
    {
         /* TELEPORTPED */ sub_58185( g_U2760[I], g_U2764[I]._fU0, g_U2764[I]._fU12 );
    }
    ISEQ_START( -1956283442 );
    return;
}

/* TELEPORTPED */ void sub_58185(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_DEPATURE_KICKOFF_MAX_SPOTTED */ void sub_58287()
{
    int I;

     /* WRITESCRIPTLOG */ sub_1157( "GA", "P_DEPATURE_KICKOFF_MAX_SPOTTED start", 0 );
    for ( I = 0; I <= 8; I++ )
    {
         /* STARTTIMER */ sub_3892( ref l_U575[I] );
    }
    for ( I = 0; I <= 2; I++ )
    {
         /* STARTTIMER */ sub_3892( ref l_U525[I] );
    }
     /* WRITESCRIPTLOG */ sub_1157( "GA", "P_DEPATURE_KICKOFF_MAX_SPOTTED end", 0 );
    return;
}

/* NIS_PRE_SETUP */ void sub_58537(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_2885(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_2847(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_2847() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_2847(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_RESET_MAX_ACTION_TREE */ void sub_58758()
{
     /* WRITESCRIPTLOG */ sub_1157( "GA", "P_RESET_MAX_ACTION_TREE start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
    {
        if (IS_PLAYER_SHOOTDODGING())
        {
            SCRIPT_ASSERT( "Do not try to reset Max's action tree when he is shoot dodging.", 0 );
             /* WRITESCRIPTLOG */ sub_1157( "GA", "You cannot reset Max's action tree during a shoot dodge.", 0 );
        }
        else
        {
            PED_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_2847(), "/Global/Player" );
        }
    }
     /* WRITESCRIPTLOG */ sub_1157( "GA", "P_RESET_MAX_ACTION_TREE end", 0 );
    return;
}

/* MAL_WRITESCRIPTLOG */ void sub_59154(unknown uParam0)
{
    unknown uVar3;

    uVar3 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar3, 1537, "MSWW", 1537, uParam0, 1537, "###" );
    return;
}

/* F_HANDLE_MID_03_FIN_BLENDOUT */ int sub_59686()
{
    if (l_U831._fU52)
    {
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_59759( 0,  /* PLAYER_PED_ID */ sub_2847(), "MAX", ref l_U553, 2, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_59759( 1, g_U2760[0], "M14_UFE_29_MUS", ref l_U553, 2, 0 );
         /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_59759( 2, g_U2760[1], "M14_UFE_30_MUS", ref l_U553, 2, 0 );
         /* PLAY_SINGLE_SPEECH */ sub_60079( "SAIR_VIG05A", ref l_U553, 8, 1 );
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_60986( 640993624, ref g_U1030 );
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_60986( 920743876, ref g_U1030 );
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_60986( -1022450266, ref g_U1030 );
        if ((IS_DEATH_PANEL_WIPE_ALLOWED()) || (IS_SCREEN_FADED_OUT()))
        {
             /* WRITESCRIPTLOG */ sub_1157( "GA", "Fading in screen.", 0 );
            DO_SCREEN_FADE_IN( 0 );
        }
    }
     /* P_DEPARTURE_HANDLE_PATROL_REACTING_TO_SPOT_MAX */ sub_61521();
    if (CAMERA_ANIMATED_CURRENT_TIME() > l_U860)
    {
        if (NOT l_U859)
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Stopping animated blendout camera.", 0 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2168[3], 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2207[3], 1065353216, 0 );
            CAMERA_ANIMATED_STOP( l_U861, 1 );
            l_U859 = 1;
        }
    }
    if ((l_U859) AND ((ISEQ_QUERY_ENTITY_STATE( 783941433, "Max", 6 )) || (ISEQ_QUERY_ENTITY_STATE( 783941433, "Max", 5 ))))
    {
         /* WRITESCRIPTLOG */ sub_1157( "AT", "Blendout returning as finished!", 0 );
        if (l_U862)
        {
             /* WRITESCRIPTLOG */ sub_1157( "GA", "Starting FINALE_SONG_02 music track with FINALE_02_1_2 mood. Fade in 0 sec, 0.000001", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_02", "FINALE_02_1_2", "FINALE_02_1_2", 2.00000000, 0, 10000, 0.00000100, 0 );
        }
        return 1;
    }
    return 0;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_59759(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_60079(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_60124( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_60124(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_60211( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_60211(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_60263( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_60781( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_60263(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_60781(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_60986(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5440( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_DEPARTURE_HANDLE_PATROL_REACTING_TO_SPOT_MAX */ void sub_61521()
{
    if ( /* ISTIMERDONE */ sub_4025( ref l_U575[0] ))
    {
        ;
    }
    if ( /* ISTIMERDONE */ sub_4025( ref l_U575[1] ))
    {
        ;
    }
    if ( /* ISTIMERDONE */ sub_4025( ref l_U575[2] ))
    {
        ;
    }
    if ( /* ISTIMERDONE */ sub_4025( ref l_U575[3] ))
    {
         /* WRITESCRIPTLOG */ sub_1157( "AT", "Activating pi_DP_VIG04[3]!", 0 );
        PED_SET_ACTION_INTENTION( g_U2632[3], 1, 5000, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_2847() ) );
         /* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ sub_61744( ref g_U2632[3], -60.25000000, -133.71000000, 8.78000000, 0 );
    }
    if ( /* ISTIMERDONE */ sub_4025( ref l_U525[0] ))
    {
         /* WRITESCRIPTLOG */ sub_1157( "AT", "Activating pi_DP_VIG05[0]!", 0 );
        PED_SET_ACTION_INTENTION( g_U2760[0], 1, 5000, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_2847() ) );
         /* P_TASK_ENEMY_TO_COVER_THEN_COMBAT */ sub_62127( ref g_U2760[0], -39.55000000, -135.27000000, 4.38000000, 0, 0, 0, 0, 0 );
    }
    if ( /* ISTIMERDONE */ sub_4025( ref l_U525[1] ))
    {
         /* WRITESCRIPTLOG */ sub_1157( "AT", "Activating pi_DP_VIG05[1]!", 0 );
        PED_SET_ACTION_INTENTION( g_U2760[1], 1, 5000, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_2847() ) );
         /* P_TASK_ENEMY_TO_COVER_THEN_COMBAT */ sub_62127( ref g_U2760[1], -43.00000000, -134.26000000, 4.38000000, 0, 0, 0, 0, 0 );
    }
    if ( /* ISTIMERDONE */ sub_4025( ref l_U525[2] ))
    {
         /* WRITESCRIPTLOG */ sub_1157( "AT", "Activating pi_DP_VIG05[2]!", 0 );
        PED_SET_ACTION_INTENTION( g_U2760[2], 1, 5000, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_2847() ) );
         /* P_TASK_ENEMY_TO_COVER_THEN_COMBAT */ sub_62127( ref g_U2760[2], -41.79000000, -137.43000000, 4.38000000, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ void sub_61744(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
    unknown uVar7;

     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_TASK_ENEMY_TO_COORDS_THEN_COMBAT", 0 );
    if ((NOT (IS_PED_DEAD( (uParam0^) ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() ))))
    {
        REGISTER_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_2847() );
        OPEN_SEQUENCE_TASK( ref uVar7 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        if (bParam4)
        {
            TASK_GO_STRAIGHT_TO_COORD( 0, uParam1, 3, 20000 );
        }
        else
        {
            TASK_FOLLOW_NAV_MESH_TO_COORD( 0, uParam1, 3, 20000, 1048576000, 0, 0 );
        }
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_2847() );
        CLOSE_SEQUENCE_TASK( uVar7 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar7 );
        CLEAR_SEQUENCE_TASK( uVar7 );
    }
    return;
}

/* P_TASK_ENEMY_TO_COVER_THEN_COMBAT */ void sub_62127(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, boolean bParam6, boolean bParam7, unknown uParam8)
{
    unknown uVar11;

     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_TASK_ENEMY_TO_COVER_THEN_COMBAT", 0 );
    if ((NOT (IS_PED_DEAD( (uParam0^) ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() ))))
    {
        REGISTER_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_2847() );
        OPEN_SEQUENCE_TASK( ref uVar11 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        if (bParam6)
        {
            TASK_FOLLOW_NAV_MESH_TO_COORD( 0, uParam1, 3, 20000, 0.25000000, 256, 0 );
        }
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        if (NOT bParam7)
        {
            if ((NOT (IS_STRING_NULL( uParam5 ))) AND (NOT (IS_STRING_NULL( uParam4 ))))
            {
                TASK_COMBAT_MOVE_TO_COVER( 0, uParam4, uParam5, 0 );
            }
            else
            {
                TASK_COMBAT_MOVE_TO_COVER_COORDS( 0, uParam1, 0 );
            }
        }
        else if ((NOT (IS_STRING_NULL( uParam5 ))) AND (NOT (IS_STRING_NULL( uParam4 ))))
        {
            TASK_COMBAT_MOVE_TO_COVER_TACTICAL( 0, uParam4, uParam5, uParam8, 0 );
        }
        else
        {
            TASK_COMBAT_MOVE_TO_COVER_TACTICAL_COORDS( 0, uParam1, uParam8, 0 );
        }
        CLOSE_SEQUENCE_TASK( uVar11 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar11 );
        CLEAR_SEQUENCE_TASK( uVar11 );
    }
    return;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_63176(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_1157( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_63400( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 63297, 63347, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_63297()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_63347()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_63400(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ void sub_63723(int iParam0, unknown uParam1, unknown uParam2)
{
    iParam0->_fU68 = 1;
    iParam0->_fU72 = 1;
    iParam0->_fU76 = uParam1;
    iParam0->_fU80 = uParam2;
    iParam0->_fU24 = 1;
    return;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_63865(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_1157( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_1157( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_64667( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_1157( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_58537( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_58537( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_1157( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_53943( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_58537( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_65581( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_65581( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* LOADSEAMLESSCUTSCENE */ void sub_64667(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_65581(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_2885(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_2847(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_65679();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_65679()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2847(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2847(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_2847(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_2847(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_START_SP_CHALLENGES */ void sub_66040()
{
     /* WRITESCRIPTLOG */ sub_1157( "CCB", "P_START_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_1157( "CCB", "Starting the Finale_Departures context...", 0 );
    START_CONTEXT( "Finale_Departures" );
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_66322(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_66388( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_66388(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_6531( uParam0 );
            }
        }
    }
    return;
}

/* P_HANDLE_IN_COMBAT_DIALOGUE */ void sub_66574()
{
    if ((NOT ( /* ISTIMERDONE */ sub_4025( ref l_U1274 ))) AND (l_U1274._fU20))
    {
        return;
    }
    if (NOT l_U1295)
    {
        if ((GET_OBJECT_ANIM_CURRENT_TIME( g_U2467, "APD_secGates03", "ap_anim" )) > 0.20000000)
        {
            if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_66701()))
            {
                if (IS_OBJECT_ON_SCREEN( g_U2467 ))
                {
                     /* P_SPEECH_PLAY_MONOLOGUE */ sub_66836( "SAIR_MSTGOP", ref l_U1285 );
                    l_U1295 = 1;
                     /* P_CREATE_AND_START_TIMER */ sub_66968( ref l_U1274, GET_RANDOM_INT_IN_RANGE( l_U1283, l_U1284 ) );
                    return;
                }
            }
        }
    }
    if ((NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_66701())) AND (l_U1306 <= 2))
    {
        if (IS_EXPLOSION_IN_SPHERE( -1, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_2847() ), 20.00000000 ))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_66836( "SAIR_MXCUGATK", ref l_U1296 );
            l_U1306++;
             /* P_CREATE_AND_START_TIMER */ sub_66968( ref l_U1274, GET_RANDOM_INT_IN_RANGE( l_U1283, l_U1284 ) );
            return;
        }
    }
    return;
}

/* IS_ANY_SPEECH_CURRENTLY_PLAYING */ void sub_66701()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_66836(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_8080( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_59759( 0,  /* PLAYER_PED_ID */ sub_2847(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_59759( 1,  /* PLAYER_PED_ID */ sub_2847(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_60079( uParam0, uParam1, 8, 1 );
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_66968(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_3742( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_3892( uParam0 );
    return;
}

/* P_HANDLE_AVOIDING_TASK_MASSIVE_CRASH */ void sub_67157()
{
    int iVar2;

    iVar2 = ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2632 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2760 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2474 ))) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( ref g_U2588 ));
    if (iVar2 > 15)
    {
         /* P_CHECK_IF_PED_CAN_BE_SNEAKILY_KILLED */ sub_67260( ref g_U2632 );
         /* P_CHECK_IF_PED_CAN_BE_SNEAKILY_KILLED */ sub_67260( ref g_U2760 );
         /* P_CHECK_IF_PED_CAN_BE_SNEAKILY_KILLED */ sub_67260( ref g_U2474 );
         /* P_CHECK_IF_PED_CAN_BE_SNEAKILY_KILLED */ sub_67260( ref g_U2588 );
    }
    return;
}

/* P_CHECK_IF_PED_CAN_BE_SNEAKILY_KILLED */ void sub_67260(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() ))) AND (NOT (IS_PED_DEAD( (uParam0^)[I] ))))
        {
            if (NOT (IS_PED_PROCESSING_FROZEN( (uParam0^)[I] )))
            {
                if (( /* GET_DISTANCE_BETWEEN_PEDS */ sub_67391(  /* PLAYER_PED_ID */ sub_2847(), (uParam0^)[I], 1 )) > 20.00000000)
                {
                    if (NOT (IS_PED_ON_SCREEN( (uParam0^)[I], 1 )))
                    {
                         /* WRITESCRIPTLOG */ sub_1157( "AT", "Too many active peds! Gotta kill some!", 0 );
                         /* P_KILL_PED */ sub_67641( (uParam0^)[I] );
                    }
                }
            }
        }
    }
    return;
}

/* GET_DISTANCE_BETWEEN_PEDS */ void sub_67391(unknown uParam0, unknown uParam1, boolean bParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar5 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        uVar8 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    }
    if (bParam2)
    {
        return VDIST( uVar5, uVar8 );
        break;
    }
    return VDIST( uVar5._fU0, uVar5._fU4, 0, uVar8._fU0, uVar8._fU4, 0 );
}

/* P_KILL_PED */ void sub_67641(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_67789(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* F_IS_PLAYER_RIDING_PEOPLEMOVER_PRONE */ int sub_67919()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), l_U1031[2] ))
        {
            if (IS_PLAYER_SHOOTDODGING())
            {
                uVar2 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_2847() )};
                if (uVar2._fU8 <= 4.60000000)
                {
                    if ((NOT l_U468._fU16) AND (NOT l_U468._fU20))
                    {
                         /* CREATETIMER */ sub_3742( ref l_U468, l_U467, 1, 0 );
                         /* STARTTIMER */ sub_3892( ref l_U468 );
                    }
                    if ( /* ISTIMERDONE */ sub_4025( ref l_U468 ))
                    {
                         /* WRITESCRIPTLOG */ sub_1157( "AT", "Player is prone on the peoplemovers.", 0 );
                        l_U465 = 1;
                        return 1;
                    }
                }
            }
            else if (l_U468._fU20)
            {
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "Player no longer riding the peoplemover. Resetting timer.", 0 );
                 /* CREATETIMER */ sub_3742( ref l_U468, l_U467, 1, 0 );
            }
        }
        else if (l_U468._fU20)
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Player no longer riding the peoplemover. Resetting timer.", 0 );
             /* CREATETIMER */ sub_3742( ref l_U468, l_U467, 1, 0 );
        }
    }
    else if (l_U468._fU20)
    {
         /* WRITESCRIPTLOG */ sub_1157( "AT", "Player no longer riding the peoplemover. Resetting timer.", 0 );
         /* CREATETIMER */ sub_3742( ref l_U468, l_U467, 1, 0 );
    }
    return 0;
}

/* P_ACTIVATE_FIRST_REINFORCEMENTS */ void sub_68557()
{
     /* P_ACTIVATEPED */ sub_54268( g_U2632[4] );
     /* P_ACTIVATEPED */ sub_54268( g_U2632[5] );
    if (NOT l_U465)
    {
         /* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ sub_61744( ref g_U2632[4], -65.37000000, -101.46000000, 4.38000000, 0 );
         /* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ sub_61744( ref g_U2632[5], -60.40000000, -100.97000000, 4.38000000, 0 );
    }
    else
    {
         /* TELEPORTPED */ sub_58185( g_U2632[4], -36.41000000, -100.56000000, 4.38000000, 0 );
         /* TELEPORTPED */ sub_58185( g_U2632[5], -37.04000000, -100.03000000, 4.38000000, 0 );
         /* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ sub_61744( ref g_U2632[4], -52.35000000, -109.68000000, 4.38000000, 0 );
         /* P_TASK_ENEMY_TO_COVER_THEN_COMBAT */ sub_62127( ref g_U2632[5], -49.23000000, -101.42000000, 4.38000000, "GenCover", "A2FE8EDB_E5162270_Corner1", 1, 0, 0 );
    }
    return;
}

/* P_UNLOCK_VIG_04_ENEMIES */ void sub_68960()
{
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
    {
        if (NOT (IS_PED_DEAD( g_U2632[0] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( g_U2632[0], 0 );
            TASK_COMBAT_PED( g_U2632[0],  /* PLAYER_PED_ID */ sub_2847() );
        }
        if (NOT (IS_PED_DEAD( g_U2632[1] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( g_U2632[1], 0 );
            TASK_COMBAT_PED( g_U2632[1],  /* PLAYER_PED_ID */ sub_2847() );
        }
        if (NOT (IS_PED_DEAD( g_U2632[2] )))
        {
            SET_PED_FLAG_LOCK_TO_COVER( g_U2632[2], 0 );
            TASK_COMBAT_PED( g_U2632[2],  /* PLAYER_PED_ID */ sub_2847() );
        }
    }
    return;
}

/* P_ACTIVATE_MIDDLE_WAVE_ENEMIES */ void sub_69289()
{
    unknown uVar2;
    unknown uVar3;

     /* P_ACTIVATEPED */ sub_54268( g_U2632[7] );
     /* P_ACTIVATEPED */ sub_54268( g_U2632[8] );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() ))) AND (NOT (IS_PED_DEAD( g_U2632[7] ))))
    {
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, -46.18000000, -97.11000000, 8.74000000,  /* PLAYER_PED_ID */ sub_2847(), 0, 1092616192, 1101004800, -1082130432, 3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_2847() );
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( g_U2632[7], uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
    }
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() ))) AND (NOT (IS_PED_DEAD( g_U2632[8] ))))
    {
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, -60.35000000, -101.99000000, 8.78000000,  /* PLAYER_PED_ID */ sub_2847(), 0, 1092616192, 1101004800, -1082130432, 3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_2847() );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( g_U2632[8], uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_69701(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), uParam0 );
}

/* F_SETUP_DEPARTURES_REINFORCEMENT_ENEMIES */ int sub_70223()
{
    char[64] cVar2;
    unknown uVar18;

    switch (l_U679)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnReinforcement = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_45239( ref l_U453, 1056964608, 0 );
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U453._fU0, 1 );
        l_U680 = 0;
        l_U679 = 2;
         /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnReinforcement = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_DP_Reinforcement[", 64 );
        ConcatString(ref cVar2, l_U680, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        g_U2474[l_U680] =  /* CREATEPED */ sub_45777( ref g_U2483[l_U680] );
        if (l_U680 < 6)
        {
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_46765( g_U2474[l_U680], ref l_U453 );
        }
        else
        {
             /* P_QUICK_ADD_PED_TO_GROUP */ sub_46765( g_U2474[l_U680], ref l_U447 );
        }
        uVar18 =  /* F_GIVEPEDWEAPON */ sub_10944( g_U2474[l_U680], l_U681[l_U680], 25000, 0, 0 );
        if ((l_U680 == 6) || ((l_U680 == 4) || ((l_U680 == 2) || (l_U680 == 0))))
        {
            DISPLAYF( "OMGGRENADEZ - Setting Grenade Throwing Parameters on pi_DP_Reinforcement[{}]", 1, 513, l_U680 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10149( g_U2474[l_U680], -378310276, 5, 25000, 0 );
            SET_PED_PROJECTILE_OVERRIDE_PARAMETERS( g_U2474[l_U680], 0, -1, -1, 1, 0 );
        }
        if (NOT (IS_PED_DEAD( g_U2474[l_U680] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2474[l_U680], 1 );
            SET_PED_AI_TEMPLATE( g_U2474[l_U680], "AIT_EXPERT" );
            SET_PED_COMBAT_RANGE_MAX( g_U2474[l_U680], 18.00000000 );
            if ((l_U680 == 4) || ((l_U680 == 2) || (l_U680 == 0)))
            {
                SET_ROOM_FOR_PED_BY_NAME( g_U2474[l_U680], ref g_U2286 );
            }
            else
            {
                SET_ROOM_FOR_PED_BY_NAME( g_U2474[l_U680], ref g_U2278 );
            }
        }
        l_U680++;
        if (l_U680 >= g_U2474)
        {
            l_U679 = 3;
             /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnReinforcement = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_47812( ref g_U2474, "Reinforcement" );
        SET_GROUP_GRENADE_PARAMS( l_U453._fU0, 500 );
         /* P_TETHERPEDARRAY */ sub_71199( ref l_U749, ref g_U2474, 1 );
         /* P_TETHERPEDARRAY */ sub_71199( ref l_U750, ref g_U2474, 1 );
         /* P_TETHERPEDARRAY */ sub_71199( ref l_U751, ref g_U2474, 1 );
         /* P_TETHERPEDARRAY */ sub_71199( ref l_U752, ref g_U2474, 1 );
         /* P_TETHERPEDARRAY */ sub_71199( ref l_U753, ref g_U2474, 1 );
         /* P_TETHERPEDARRAY */ sub_71199( ref l_U754, ref g_U2474, 1 );
         /* P_DEACTIVATEPEDARRAY */ sub_47963( ref g_U2474 );
        l_U679 = 4;
         /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnReinforcement = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_TETHERPEDARRAY */ void sub_71199(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < (uParam1^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam1^)[I] )))
        {
             /* P_TETHERPED */ sub_47499( uParam0, (uParam1^)[I], uParam2 );
        }
    }
    return;
}

/* P_ACTIVATE_SECOND_AREA_SNAP_TO_COVER_GUYS */ void sub_71520()
{
    unknown uVar2;

     /* P_ACTIVATEPED */ sub_54268( g_U2474[1] );
     /* P_ACTIVATEPED */ sub_54268( g_U2474[3] );
     /* P_ACTIVATEPED */ sub_54268( g_U2474[6] );
     /* P_ACTIVATEPED */ sub_54268( g_U2474[7] );
     /* P_ACTIVATEPED */ sub_54268( g_U2632[6] );
     /* P_SETUP_AGA */ sub_53191( ref g_U2474, ref l_U453, ref l_U461, 0, 6 );
    SET_GROUP_MAX_NUM_ADVANCING( l_U453._fU0, 2 );
    if (NOT (IS_PED_DEAD( g_U2474[1] )))
    {
        if ( /* F_ISPLAYERINTRIGGERBOX */ sub_69701( l_U755 ))
        {
             /* TELEPORTPED */ sub_58185( g_U2474[1], -58.34000000, -81.44000000, 4.38000000, 0 );
            TASK_COMBAT_SNAP_TO_COVER( g_U2474[1], "GenCover", "A2FE8EDB_CDD83DF1_Corner1", 0 );
        }
        else
        {
            TASK_COMBAT_SNAP_TO_COVER( g_U2474[1], "GenCover", "A2FE8EDB_BB8C995A_Corner1", 0 );
        }
        REGISTER_TARGET( g_U2474[1],  /* PLAYER_PED_ID */ sub_2847() );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2474[1], 0 );
        TASK_COMBAT_PED( g_U2474[1],  /* PLAYER_PED_ID */ sub_2847() );
    }
    if (NOT (IS_PED_DEAD( g_U2474[3] )))
    {
        TASK_COMBAT_SNAP_TO_COVER( g_U2474[3], "GenCover", "A2FE8EDB_DDF3EAD9_Corner1", 0 );
        REGISTER_TARGET( g_U2474[3],  /* PLAYER_PED_ID */ sub_2847() );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2474[3], 0 );
        TASK_COMBAT_PED( g_U2474[3],  /* PLAYER_PED_ID */ sub_2847() );
    }
    if (NOT (IS_PED_DEAD( g_U2474[6] )))
    {
        TASK_COMBAT_SNAP_TO_COVER( g_U2474[6], "GenCover", "A2FE8EDB_B5258CE5_Popover2", 0 );
        REGISTER_TARGET( g_U2474[6],  /* PLAYER_PED_ID */ sub_2847() );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2474[6], 0 );
        TASK_COMBAT_PED( g_U2474[6],  /* PLAYER_PED_ID */ sub_2847() );
    }
    if (NOT (IS_PED_DEAD( g_U2474[7] )))
    {
        TASK_COMBAT_SNAP_TO_COVER( g_U2474[7], "GenCover", "A2FE8EDB_563BB90C_Corner2", 0 );
        REGISTER_TARGET( g_U2474[7],  /* PLAYER_PED_ID */ sub_2847() );
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2474[7], 0 );
        TASK_COMBAT_PED( g_U2474[7],  /* PLAYER_PED_ID */ sub_2847() );
    }
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() ))) AND (NOT (IS_PED_DEAD( g_U2632[6] ))))
    {
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, -52.85000000, -42.76000000, 8.72000000,  /* PLAYER_PED_ID */ sub_2847(), 0, 1092616192, 1101004800, -1082130432, 3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_2847() );
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( g_U2632[6], uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
    }
    return;
}

/* P_ACTIVATE_STAIRS_ENEMIES */ void sub_72556()
{
    unknown uVar2;

     /* P_ACTIVATEPED */ sub_54268( g_U2474[5] );
    OPEN_SEQUENCE_TASK( ref uVar2 );
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
    if ( /* F_ISPLAYERINTRIGGERBOX */ sub_69701( l_U755 ))
    {
        TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, -36.69000000, -28.80000000, 8.78000000,  /* PLAYER_PED_ID */ sub_2847(), 0, 1092616192, 1101004800, -1082130432, 3 );
    }
    else
    {
        TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED( 0, -45.70000000, -35.00000000, 5.09000000,  /* PLAYER_PED_ID */ sub_2847(), 0, 1092616192, 1101004800, -1082130432, 3 );
    }
    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
    TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_2847() );
    CLOSE_SEQUENCE_TASK( uVar2 );
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() ))) AND (NOT (IS_PED_DEAD( g_U2474[5] ))))
    {
        TASK_PERFORM_SEQUENCE( g_U2474[5], uVar2 );
    }
    CLEAR_SEQUENCE_TASK( uVar2 );
    return;
}

/* P_ACTIVATE_GATE_ENEMIES */ void sub_72839()
{
     /* P_ACTIVATEPED */ sub_54268( g_U2474[0] );
     /* P_ACTIVATEPED */ sub_54268( g_U2474[2] );
     /* P_ACTIVATEPED */ sub_54268( g_U2474[4] );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
    {
        if (NOT (IS_PED_DEAD( g_U2474[0] )))
        {
            SET_PED_SUGGESTED_COVER_POINT( g_U2474[0], "GenCover", "A2FE8EDB_AFE18161_Corner1" );
            REGISTER_TARGET( g_U2474[0],  /* PLAYER_PED_ID */ sub_2847() );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2474[0], 0 );
            TASK_COMBAT_PED( g_U2474[0],  /* PLAYER_PED_ID */ sub_2847() );
        }
        if (NOT (IS_PED_DEAD( g_U2474[2] )))
        {
            SET_PED_SUGGESTED_COVER_POINT( g_U2474[2], "GenCover", "A2FE8EDB_E8E364EF_Popover1" );
            REGISTER_TARGET( g_U2474[2],  /* PLAYER_PED_ID */ sub_2847() );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2474[2], 0 );
            TASK_COMBAT_PED( g_U2474[2],  /* PLAYER_PED_ID */ sub_2847() );
        }
        if (NOT (IS_PED_DEAD( g_U2474[4] )))
        {
            REGISTER_TARGET( g_U2474[4],  /* PLAYER_PED_ID */ sub_2847() );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2474[4], 0 );
            TASK_COMBAT_PED( g_U2474[4],  /* PLAYER_PED_ID */ sub_2847() );
        }
    }
    return;
}

/* F_CAN_GATE_CLOSE */ int sub_73391()
{
    int I;

    for ( I = 0; I < g_U2632; I++ )
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_13669( g_U2632[I], l_U990 ))
        {
            return 0;
        }
    }
    for ( I = 0; I < g_U2760; I++ )
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_13669( g_U2760[I], l_U990 ))
        {
            return 0;
        }
    }
    for ( I = 0; I < g_U2474; I++ )
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_13669( g_U2474[I], l_U990 ))
        {
            return 0;
        }
    }
    for ( I = 0; I < g_U2588; I++ )
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_13669( g_U2588[I], l_U990 ))
        {
            return 0;
        }
    }
    return 1;
}

/* P_CLEAN_UP_GUYS_IN_CONCESSIONS */ void sub_73703()
{
    int I;

    for ( I = 0; I < g_U2632; I++ )
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_13669( g_U2632[I], l_U969 ))
        {
             /* CLEANPED */ sub_6531( g_U2632[I] );
        }
    }
    for ( I = 0; I < g_U2760; I++ )
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_13669( g_U2760[I], l_U969 ))
        {
             /* CLEANPED */ sub_6531( g_U2760[I] );
        }
    }
    for ( I = 0; I < g_U2474; I++ )
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_13669( g_U2474[I], l_U969 ))
        {
             /* CLEANPED */ sub_6531( g_U2474[I] );
        }
    }
    for ( I = 0; I < g_U2588; I++ )
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_13669( g_U2588[I], l_U969 ))
        {
             /* CLEANPED */ sub_6531( g_U2588[I] );
        }
    }
    return;
}

/* F_SETUP_DEPARTURES_REINFORCEMENT2_ENEMIES */ int sub_74052()
{
    char[64] cVar2;
    unknown uVar18;

    switch (l_U732)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnReinforcement2 = ENTITY_STATE_INIT", 0 );
        l_U733 = 0;
        l_U732 = 2;
         /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnReinforcement2 = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_DP_Reinforcement2[", 64 );
        ConcatString(ref cVar2, l_U733, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        g_U2588[l_U733] =  /* CREATEPED */ sub_45777( ref g_U2592[l_U733] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_46765( g_U2588[l_U733], ref l_U453 );
        uVar18 =  /* F_GIVEPEDWEAPON */ sub_10944( g_U2588[l_U733], l_U734[l_U733], 25000, 0, 0 );
        if (NOT (IS_PED_DEAD( g_U2588[l_U733] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2588[l_U733], 1 );
            SET_PED_AI_TEMPLATE( g_U2588[l_U733], "AIT_EXPERT" );
            SET_PED_COMBAT_RANGE_MAX( g_U2588[l_U733], 12.00000000 );
            SET_ROOM_FOR_PED_BY_NAME( g_U2588[l_U733], ref g_U2278 );
        }
        l_U733++;
        if (l_U733 >= g_U2588)
        {
            l_U732 = 3;
             /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnReinforcement2 = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_47812( ref g_U2588, "Reinforcement2" );
         /* P_TETHERPEDARRAY */ sub_71199( ref l_U749, ref g_U2588, 1 );
         /* P_TETHERPEDARRAY */ sub_71199( ref l_U750, ref g_U2588, 1 );
         /* P_TETHERPEDARRAY */ sub_71199( ref l_U751, ref g_U2588, 1 );
         /* P_TETHERPEDARRAY */ sub_71199( ref l_U752, ref g_U2588, 1 );
         /* P_TETHERPEDARRAY */ sub_71199( ref l_U753, ref g_U2588, 1 );
         /* P_TETHERPEDARRAY */ sub_71199( ref l_U754, ref g_U2588, 1 );
         /* P_DEACTIVATEPEDARRAY */ sub_47963( ref g_U2588 );
        l_U732 = 4;
         /* WRITESCRIPTLOG */ sub_1157( "AT", "e_DP_SpawnReinforcement2 = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_ACTIVATE_FINAL_ENEMIES */ void sub_74938()
{
     /* P_ACTIVATEPED */ sub_54268( g_U2588[0] );
     /* P_ACTIVATEPED */ sub_54268( g_U2588[1] );
     /* P_ACTIVATEPED */ sub_54268( g_U2588[2] );
     /* P_SETUP_AGA */ sub_53191( ref g_U2588, ref l_U453, ref l_U461, -1, -1 );
    SET_GROUP_MAX_NUM_ADVANCING( l_U453._fU0, 2 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )))
    {
        if (NOT (IS_PED_DEAD( g_U2588[0] )))
        {
            SET_PED_SUGGESTED_COVER_POINT( g_U2588[0], "GenCover", "A2FE8EDB_A3AA5F07_Popover2" );
            REGISTER_TARGET( g_U2588[0],  /* PLAYER_PED_ID */ sub_2847() );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2588[0], 0 );
            TASK_COMBAT_PED( g_U2588[0],  /* PLAYER_PED_ID */ sub_2847() );
        }
        if (NOT (IS_PED_DEAD( g_U2588[1] )))
        {
            TASK_ATTACK_MOVE( g_U2588[1], -45.97000000, -42.63000000, 8.72000000, 1092616192, 1101004800, -1082130432, 3 );
            REGISTER_TARGET( g_U2588[1],  /* PLAYER_PED_ID */ sub_2847() );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2588[1], 0 );
            TASK_COMBAT_PED( g_U2588[1],  /* PLAYER_PED_ID */ sub_2847() );
        }
        if (NOT (IS_PED_DEAD( g_U2588[2] )))
        {
            TASK_ATTACK_MOVE( g_U2588[2], -41.81000000, -57.73000000, 4.38000000, 1092616192, 1101004800, -1082130432, 3 );
            REGISTER_TARGET( g_U2588[2],  /* PLAYER_PED_ID */ sub_2847() );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( g_U2588[2], 0 );
            TASK_COMBAT_PED( g_U2588[2],  /* PLAYER_PED_ID */ sub_2847() );
        }
    }
    return;
}

/* P_HANDLE_GATE_OPENING_AND_CLOSING */ void sub_75462()
{
    switch (l_U134)
    {
        case 0: break;
        case 1:
        if (DOES_OBJECT_EXIST( g_U2467 ))
        {
            if (((GET_OBJECT_ANIM_CURRENT_TIME( g_U2467, "APD_secGates03", "ap_anim" )) < 1.00000000) AND (NOT (IS_OBJECT_PLAYING_ANIM( g_U2467, "APD_secGates03", "ap_anim" ))))
            {
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "Starting gate animation.", 0 );
                PLAY_SOUND_FROM_COORD( -1, "S_AIR_DEPARTURE_GATE_OPEN", -55.25000000, -30.74000000, 6.14000000 );
                 /* MAL_PLAYOBJECTANIM */ sub_52649( g_U2467, "APD_secGates03", "ap_anim", 1065353216, 0 );
            }
            if ((NOT l_U926) AND ((GET_OBJECT_ANIM_CURRENT_TIME( g_U2467, "APD_secGates03", "ap_anim" )) > 0.70000000))
            {
                SET_OBJECT_COLLISION( g_U2467, 0 );
                l_U926 = 1;
            }
            if ((l_U926) AND ((GET_OBJECT_ANIM_CURRENT_TIME( g_U2467, "APD_secGates03", "ap_anim" )) == 1.00000000))
            {
                l_U1295 = 1;
                 /* WRITESCRIPTLOG */ sub_1157( "AT", "gsGateState = GATESTATE_OPEN", 0 );
                l_U134 = 2;
            }
        }
        break;
        case 2: break;
        case 3:
        if (((GET_OBJECT_ANIM_CURRENT_TIME( g_U2467, "APD_secGates03", "ap_anim" )) > 0.00000000) AND (NOT (IS_OBJECT_PLAYING_ANIM( g_U2467, "APD_secGates03", "ap_anim" ))))
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Starting gate animation.", 0 );
             /* MAL_PLAYOBJECTANIM */ sub_52649( g_U2467, "APD_secGates03", "ap_anim", -1.00000000, 1.00000000 );
            SET_OBJECT_COLLISION( g_U2467, 1 );
            l_U926 = 0;
        }
        if ((NOT l_U926) AND ((GET_OBJECT_ANIM_CURRENT_TIME( g_U2467, "APD_secGates03", "ap_anim" )) == 0.00000000))
        {
            PLAY_SOUND_FROM_COORD( -1, "S_AIR_DEPARTURE_GATE_SHUT", -55.25000000, -30.74000000, 6.14000000 );
             /* WRITESCRIPTLOG */ sub_1157( "AT", "gsGateState = GATESTATE_CLOSED", 0 );
            l_U134 = 4;
        }
        break;
        case 4: break;
    }
    return;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_76447(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_15637( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* F_IS_PED_PLAYING_SPEECH */ int sub_77031(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return IS_ANY_SPEECH_PLAYING( uParam0 );
    }
    return 0;
}

/* P_DP_HANDLE_OUT_OF_COMBAT_DIALOGUE */ void sub_77119()
{
    string[2] sVar2;
    int iVar5;
    int I;

    if ((NOT ( /* ISTIMERDONE */ sub_4025( ref l_U1237 ))) AND (l_U1237._fU20))
    {
        return;
    }
    if (NOT l_U1246)
    {
         /* P_CREATE_AND_START_TIMER */ sub_66968( ref l_U1247, 12000 );
        l_U1246 = 1;
    }
    if ( /* ISTIMERDONE */ sub_4025( ref l_U1247 ))
    {
        array(ref sVar2, 2);
        sVar2[0] = "SAIR_MSTHWB";
        sVar2[1] = "SAIR_MSTHWA";
         /* P_DP_PLAY_OUT_OF_COMBAT_DIALOGUE_VARIATION */ sub_77278( ref sVar2 );
        return;
    }
    if (l_U1247._fU16)
    {
        if (NOT l_U1264._fU20)
        {
             /* P_CREATE_AND_START_TIMER */ sub_66968( ref l_U1264, GET_RANDOM_INT_IN_RANGE( l_U1256, l_U1257 ) );
        }
        if ( /* ISTIMERDONE */ sub_4025( ref l_U1264 ))
        {
            if (l_U1263 < l_U1258)
            {
                 /* P_DP_PLAY_OUT_OF_COMBAT_DIALOGUE */ sub_77644( l_U1258[l_U1263] );
                l_U1263++;
                 /* P_CREATE_AND_START_TIMER */ sub_66968( ref l_U1264, GET_RANDOM_INT_IN_RANGE( l_U1256, l_U1257 ) );
                return;
            }
        }
        iVar5 = 0;
        for ( I = 0; I < l_U824; I++ )
        {
            if (DOES_PLACEMENT_EXIST( l_U824[I] ))
            {
                iVar5++;
            }
        }
        if (((GET_RANDOM_FLOAT_IN_RANGE( 0.00000000, 1.00000000 )) < 0.50000000) AND (iVar5 < l_U1273))
        {
             /* P_DP_PLAY_OUT_OF_COMBAT_DIALOGUE */ sub_77644( "SAIR_MFFKNPLS" );
        }
        l_U1273 = iVar5;
    }
    return;
}

/* P_DP_PLAY_OUT_OF_COMBAT_DIALOGUE_VARIATION */ void sub_77278(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_1157( "SA", "P_DP_PLAY_OUT_OF_COMBAT_DIALOGUE_VARIATION", 0 );
     /* P_SPEECH_PLAY_RANDOM_MONOLOGUE */ sub_77395( uParam0, ref l_U1227 );
     /* P_CREATE_AND_START_TIMER */ sub_66968( ref l_U1237, 8000 );
    return;
}

/* P_SPEECH_PLAY_RANDOM_MONOLOGUE */ void sub_77395(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;

     /* WRITESCRIPTLOG */ sub_1157( "SA", "P_PLAY_RANDOM_MONOLOGUE", 0 );
    uVar4 = (uParam0^);
    SET_RANDOM_SEED( GET_REAL_GAME_TIMER() );
    uVar5 = GET_RANDOM_INT_IN_RANGE( 0, uVar4 );
     /* P_SPEECH_PLAY_MONOLOGUE */ sub_66836( (uParam0^)[uVar5], uParam1 );
    return;
}

/* P_DP_PLAY_OUT_OF_COMBAT_DIALOGUE */ void sub_77644(unknown uParam0)
{
    DISPLAYF( "P_DP_PLAY_OUT_OF_COMBAT_DIALOGUE - Playing speech label {0}", 1, 1537, uParam0 );
     /* P_SPEECH_PLAY_MONOLOGUE */ sub_66836( uParam0, ref l_U1227 );
     /* P_CREATE_AND_START_TIMER */ sub_66968( ref l_U1237, 8000 );
    return;
}

/* F_HANDLE_POI */ int sub_77970(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    int iVar6;
    int iVar7;
    int iVar8;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )) == 0)
    {
        if (iParam0->_fU0 == 1)
        {
            uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS(  /* PLAYER_PED_ID */ sub_2847() )};
            iVar6 = 0;
            if (iParam0->_fU80 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), iParam0->_fU116 )) == 1)
                {
                    if (iParam0->_fU300 == 1)
                    {
                        if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                        {
                            iVar6 = 1;
                        }
                    }
                    else
                    {
                        iVar6 = 1;
                    }
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU84 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU112)
                    {
                        if (iParam0->_fU300 == 1)
                        {
                            if ((IS_PED_ON_SCREEN( iParam0->_fU316, 0 )) == 1)
                            {
                                iVar6 = 1;
                            }
                        }
                        else
                        {
                            iVar6 = 1;
                        }
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU100, 1 )) <= iParam0->_fU112)
            {
                if (iParam0->_fU300 == 1)
                {
                    if (((IS_OBJECT_ON_SCREEN( iParam0->_fU312 )) == 1) AND ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1))
                    {
                        iVar6 = 1;
                    }
                }
                else
                {
                    iVar6 = 1;
                }
            };;;;
            iVar7 = 0;
            if (iParam0->_fU88 == 1)
            {
                if (( /* F_ISPEDINTRIGGERBOX */ sub_13669(  /* PLAYER_PED_ID */ sub_2847(), iParam0->_fU216 )) == 1)
                {
                    iVar7 = 1;
                }
            }
            else if ((iParam0->_fU308 == 1) AND (iParam0->_fU92 == 1))
            {
                if ((DOES_OBJECT_EXIST( iParam0->_fU312 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_OBJECT_COORDS( iParam0->_fU312 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if (iParam0->_fU96 == 1)
            {
                if ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)
                {
                    if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU316 ), 1 )) <= iParam0->_fU212)
                    {
                        iVar7 = 1;
                    }
                }
            }
            else if ((GET_DISTANCE_BETWEEN_COORDS( uVar3, iParam0->_fU200, 1 )) <= iParam0->_fU212)
            {
                iVar7 = 1;
            };;;;
            if (iVar6 == 1)
            {
                if ((iParam0->_fU4 != 3) AND (iParam0->_fU52 == 1))
                {
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_UPDATEINTERACTIONTEXTAVAILABLE */ sub_7494( iParam0 );
                    }
                    iVar8 = 0;
                    if ((IS_WEAPON_PICKUP_VISIBLE() == 0) AND ((iParam0->_fU60 == 0) AND (( /* F_ISACTIONINGAVAILABLE */ sub_7590( iParam0 )) == 1)))
                    {
                        SET_ACTION_CONSUMED( 0, 1 );
                        if (( /* F_HASACTIONBEENPRESSED */ sub_78867()) == 1)
                        {
                            iVar8 = 1;
                        }
                    }
                    if (iVar8 == 1)
                    {
                        if (iParam0->_fU332 == 0)
                        {
                             /* P_ENABLE_POI */ sub_7036( iParam0, 0 );
                            iParam0->_fU64 = 1;
                        }
                        if (iParam0->_fU68 == 1)
                        {
                            iParam0->_fU72 = 0;
                        }
                        return 1;
                    }
                    else if (iParam0->_fU8 != 2)
                    {
                        if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                        {
                             /* P_ENABLEPOIGLINT */ sub_7095( iParam0, 0 );
                             /* P_ENABLEPOIINTERACTIONTEXT */ sub_7314( iParam0, 1 );
                        }
                        else if (iParam0->_fU320 == 1)
                        {
                             /* P_ENABLEPOIGLINT */ sub_7095( iParam0, 1 );
                        }
                        iParam0->_fU8 = 2;
                    }
                    if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                    {
                        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )) == 0)
                        {
                            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2847(), 1 );
                            iParam0->_fU328 = 1;
                        }
                    }
                }
            }
            else if (iVar7 == 1)
            {
                if (iParam0->_fU8 != 1)
                {
                    if ((iParam0->_fU4 != 3) AND (iParam0->_fU320 == 1))
                    {
                         /* P_ENABLEPOIGLINT */ sub_7095( iParam0, 1 );
                    }
                    if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                    {
                         /* P_ENABLEPOIINTERACTIONTEXT */ sub_7314( iParam0, 0 );
                    }
                    if (iParam0->_fU96 == 1)
                    {
                        if (((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )) == 0) AND ((((IS_PED_DEAD( iParam0->_fU316 )) == 1) || ((IS_PED_DEAD( iParam0->_fU316 )) == 0)) AND ((DOES_PED_EXIST( iParam0->_fU316 )) == 1)))
                        {
                            TASK_LOOK_AT_PED(  /* PLAYER_PED_ID */ sub_2847(), iParam0->_fU316, -1, 0 );
                        }
                    }
                    else if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )) == 0)
                    {
                        TASK_LOOK_AT_COORD(  /* PLAYER_PED_ID */ sub_2847(), iParam0->_fU100, -1, 0 );
                    }
                    iParam0->_fU340 = 1;
                    if ((iParam0->_fU72 == 0) AND ((iParam0->_fU68 == 1) AND ((iParam0->_fU64 == 1) AND (iParam0->_fU8 == 2))))
                    {
                        iParam0->_fU72 = 1;
                    }
                    iParam0->_fU8 = 1;
                }
                if ((iParam0->_fU328 == 0) AND (iParam0->_fU324 == 1))
                {
                    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )) == 0)
                    {
                        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2847(), 1 );
                        iParam0->_fU328 = 1;
                    }
                }
            }
            else if ((iParam0->_fU4 == 1) || (iParam0->_fU4 == 3))
            {
                ;
            }
            else if (iParam0->_fU8 != 0)
            {
                if (iParam0->_fU320 == 1)
                {
                     /* P_ENABLEPOIGLINT */ sub_7095( iParam0, 0 );
                }
            }
            if (iParam0->_fU8 == 2)
            {
                if ((iParam0->_fU4 == 2) || (iParam0->_fU4 == 1))
                {
                     /* P_ENABLEPOIINTERACTIONTEXT */ sub_7314( iParam0, 0 );
                }
            }
            if (iParam0->_fU340)
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )) == 0)
                {
                    TASK_CLEAR_LOOK_AT(  /* PLAYER_PED_ID */ sub_2847() );
                    iParam0->_fU340 = 0;
                }
            }
            if ((iParam0->_fU328 == 1) AND (iParam0->_fU324 == 1))
            {
                if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2847() )) == 0)
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2847(), 0 );
                    iParam0->_fU328 = 0;
                }
            }
            if (iParam0->_fU332 == 1)
            {
                 /* P_ENABLEPOIINTERACTIONTEXT */ sub_7314( iParam0, 0 );
            }
            iParam0->_fU8 = 0;;;
        }
    }
    return 0;
}

/* F_HASACTIONBEENPRESSED */ int sub_78867()
{
    if ((IS_CONTROL_JUST_PRESSED( 0, 30 )) == 1)
    {
        return 1;
    }
    return 0;
}

/* P_CLEANUP_ENEMIES_NOT_IN_CONCESSIONS */ void sub_80282()
{
    int I;

    for ( I = 0; I < g_U2632; I++ )
    {
        if (NOT (IS_PED_IN_GAMEPLAY_HELPER_BOX( g_U2632[I], ref l_U969._fU0 )))
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Cleaning ped not in concessions area.", 0 );
             /* CLEANPED */ sub_6531( g_U2632[I] );
        }
    }
    for ( I = 0; I < g_U2760; I++ )
    {
        if (NOT (IS_PED_IN_GAMEPLAY_HELPER_BOX( g_U2760[I], ref l_U969._fU0 )))
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Cleaning ped not in concessions area.", 0 );
             /* CLEANPED */ sub_6531( g_U2760[I] );
        }
    }
    for ( I = 0; I < g_U2474; I++ )
    {
        if (NOT (IS_PED_IN_GAMEPLAY_HELPER_BOX( g_U2474[I], ref l_U969._fU0 )))
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Cleaning ped not in concessions area.", 0 );
             /* CLEANPED */ sub_6531( g_U2474[I] );
        }
    }
    for ( I = 0; I < g_U2588; I++ )
    {
        if (NOT (IS_PED_IN_GAMEPLAY_HELPER_BOX( g_U2588[I], ref l_U969._fU0 )))
        {
             /* WRITESCRIPTLOG */ sub_1157( "AT", "Cleaning ped not in concessions area.", 0 );
             /* CLEANPED */ sub_6531( g_U2588[I] );
        }
    }
    return;
}

/* P_HANDLE_PLACING_AND_TESTING */ void sub_80922()
{
    if (l_U1354)
    {
        l_U134 = 3;
        l_U135 = 1;
         /* CLEANOBJECT */ sub_6667( l_U136 );
         /* CLEANOBJECT */ sub_6667( l_U143 );
         /* CLEANOBJECT */ sub_6667( l_U150 );
         /* CLEANOBJECT */ sub_6667( l_U151 );
         /* P_CREATE_GATE_OBJECTS */ sub_52761();
        if (DOES_OBJECT_EXIST( l_U143 ))
        {
            SET_OBJECT_VISIBLE( l_U143, 1 );
        }
         /* P_ENABLE_POI */ sub_7036( ref l_U176, 1 );
        l_U1354 = 0;
    }
    if (l_U1355)
    {
         /* CLEANOBJECT */ sub_6667( l_U420 );
         /* CLEANOBJECT */ sub_6667( l_U421 );
        l_U420 =  /* CREATEOBJECTNOOFFSET */ sub_49784( -2043642572, l_U422, l_U425, 0, 0, 0 );
        if (DOES_OBJECT_EXIST( l_U420 ))
        {
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U420, "ap_bathroom" );
        }
        l_U421 =  /* CREATEOBJECTNOOFFSET */ sub_49784( -2043642572, l_U428, l_U431, 0, 0, 0 );
        if (DOES_OBJECT_EXIST( l_U421 ))
        {
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U421, "GtaMloRoom_depart" );
        }
        l_U1355 = 0;
    }
    if (l_U1356)
    {
        if (DOES_OBJECT_EXIST( g_U2467 ))
        {
            SET_OBJECT_COLLISION( g_U2467, 0 );
        }
        l_U1356 = 0;
    }
    return;
}

/* P_RELEASE_DEPARTURES_ASSETS */ void sub_81337()
{
     /* WRITESCRIPTLOG */ sub_1157( "AT", "P_RELEASE_DEPARTURES_ASSETS", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_81426( ref l_U1012, ref g_U1030 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_60986( 640993624, ref g_U1030 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_60986( 920743876, ref g_U1030 );
     /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_60986( -1022450266, ref g_U1030 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_81574( 57534114, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_81574( -1013714740, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_81574( -1464892298, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_81574( -612753081, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_81574( 724901397, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_81574( -378310276, ref g_U1247 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_81999( "npc_pstl_cover_grenade", ref g_U1429 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_81999( "npc_rifle_cover_grenade", ref g_U1429 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_82411( "SCRIPT_MISSION\S_AIR_DEPARTURE_01", ref g_U1950 );
    if (g_U830 >= 3)
    {
        RELEASE_MOVIE( 0 );
    }
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_81999( "PROP_BUTTON", ref g_U1429 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_81426(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_60986( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_81574(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5440( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_81999(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5440( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_82411(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5440( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

