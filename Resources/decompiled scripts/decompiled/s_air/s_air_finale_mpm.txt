void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U55 = -1;
    l_U56 = {64536, 64536, 64536};
    l_U78 = 0;
    l_U79 = 0;
    l_U80 = 1500;
    l_U117 = "MID_09_FIN_concat";
    l_U154 = 0;
    l_U155 = 1;
    l_U156 = 1;
    l_U157 = 0;
    l_U159 = {0.30000000, 0.00000000, 0.86000000};
    l_U162 = 175.00000000;
    l_U196 = {0.36400000, 3.00000000, 0.59400000};
    l_U199 = {0.00000000, 0.00000000, 179.99700000};
    l_U202 = {-0.40000000, -100.00000000, 0.70000000};
    l_U205 = {-0.08000000, -0.75000000, 0.00000000};
    l_U208 = 250;
    l_U227 = 50;
    l_U237 = 500;
    l_U247 = 2500;
    l_U309 = 250;
    l_U310 = {-1035.00000000, -538.00000000, -5.87400000};
    l_U313 = {0.00000000, 0.00000000, 0.00000000};
    l_U515 = {-1028.08000000, -547.35800000, -5.89600000};
    l_U527 = 24750;
    l_U528 = 13.00000000;
    l_U1265 = {-1035.00000000, -538.00000000, -5.87400000};
    l_U1268 = {-1035.00000000, -426.90000000, -5.87400000};
    l_U1610 = -1;
    l_U1642 = 0;
    l_U1643 = 0;
    l_U1644 = 0;
     /* WRITESCRIPTLOG */ sub_739( "SA", "Script s_air_Finale_MPM.sc is starting up...", 0 );
    l_U154 = 1;
     /* P_INITIALIZE_ARRAYS */ sub_863();
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_2563();
         /* P_HANDLE_DEBUG */ sub_11705();
        if (l_U157 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_16331();
        }
        WAIT( 0 );
    }
    if (g_U861[7]._fU40 == 3)
    {
         /* P_MPM_CLEANUP_ALL */ sub_5624( 1 );
    }
    else
    {
         /* P_MPM_CLEANUP_ALL */ sub_5624( 0 );
    }
     /* P_MPM_RELEASE_ASSETS */ sub_60748();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_air_Finale_MPM" );
     /* WRITESCRIPTLOG */ sub_739( "SA", "Script s_air_Finale_MPM.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_739(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_INITIALIZE_ARRAYS */ void sub_863()
{
    l_U1586[0] = g_U2375;
    l_U1586[1] = g_U2376;
    l_U1586[2] = g_U2377;
    l_U1586[3] = g_U2378;
    l_U1586[4] = g_U2379;
    l_U1586[5] = g_U2380;
    l_U1586[6] = -1880103805;
    l_U1586[7] = g_U828;
    l_U1586[8] = -1409914275;
    l_U1586[9] = g_U2384;
    l_U1586[10] = g_U2385;
    l_U1586[11] = g_U2386;
    l_U1586[12] = g_U2387;
    l_U1586[13] = g_U2381;
    l_U1586[14] = g_U2382;
    l_U1586[15] = g_U2383;
    l_U1603[0] = 57534114;
    l_U1603[1] = 1478009203;
    l_U1603[2] = -1464892298;
    l_U1603[3] = -612753081;
    l_U1603[4] = -862236369;
    l_U1603[5] = -184942895;
    l_U1323[0] = {-1.20000000, -0.50000000, 1.00000000};
    l_U1323[1] = {0.40000000, -2.50000000, 1.00000000};
    l_U1323[2] = {0.00000000, -4.50000000, 1.00000000};
    l_U1333[0] = 180.00000000;
    l_U1333[1] = -90.00000000;
    l_U1333[2] = -90.00000000;
    l_U1319[0] = -1464892298;
    l_U1319[1] = -612753081;
    l_U1319[2] = 57534114;
    l_U1475[0] = 0;
    l_U1475[1] = 1;
    l_U1475[2] = 1;
    l_U1475[3] = 1;
    l_U1475[4] = 2;
    l_U1475[5] = 2;
    l_U1475[6] = 2;
    l_U1445[0] = {1.00000000, 0.90000000, 0.95000000};
    l_U1445[1] = {-1.00000000, -5.70000000, 0.95000000};
    l_U1445[2] = {-1.00000000, -7.00000000, 0.95000000};
    l_U1445[3] = {-1.00000000, 6.00000000, 0.95000000};
    l_U1445[4] = {-0.20000000, -7.00000000, 0.95000000};
    l_U1445[5] = {-1.00000000, -5.50000000, 0.95000000};
    l_U1445[6] = {-1.00000000, -1.00000000, 0.95000000};
    l_U1467[0] = -70.00000000;
    l_U1467[1] = 120.00000000;
    l_U1467[2] = 90.00000000;
    l_U1467[3] = 90.00000000;
    l_U1467[4] = 100.00000000;
    l_U1467[5] = 76.00000000;
    l_U1467[6] = 90.00000000;
    l_U1483[0] = 12;
    l_U1483[1] = 3;
    l_U1483[2] = 8;
    l_U1483[3] = 4;
    l_U1483[4] = 11;
    l_U1483[5] = 5;
    l_U1483[6] = 6;
    l_U1499[0] = 3711131;
    l_U1499[1] = 3711131;
    l_U1499[2] = 280965399;
    l_U1499[3] = 525284907;
    l_U1499[4] = 280965399;
    l_U1499[5] = 426620576;
    l_U1499[6] = -2117698134;
    l_U1507[0] = {0.10000000, 0.30000000, -0.95000000};
    l_U1507[1] = {0.20000000, 0.10000000, -0.95000000};
    l_U1507[2] = {0.10000000, -0.20000000, -0.95000000};
    l_U1507[3] = {-0.20000000, 0.10000000, -0.95000000};
    l_U1507[4] = {0.10000000, -0.10000000, -0.95000000};
    l_U1507[5] = {-0.20000000, 0.10000000, -0.95000000};
    l_U1507[6] = {0.10000000, 0.10000000, -0.95000000};
    l_U1529[0] = {80.00000000, 0.00000000, 0.00000000};
    l_U1529[1] = {-80.00000000, 0.00000000, 0.00000000};
    l_U1529[2] = {80.00000000, 0.00000000, 0.00000000};
    l_U1529[3] = {-80.00000000, 0.00000000, 0.00000000};
    l_U1529[4] = {80.00000000, 0.00000000, 0.00000000};
    l_U1529[5] = {80.00000000, 0.00000000, 0.00000000};
    l_U1529[6] = {80.00000000, 0.00000000, 0.00000000};
    l_U248[0]._fU44 = {2.00000000, -17.00000000, 1.80000000};
    l_U248[0]._fU56 = {0.00000000, 0.00000000, -90.00000000};
    l_U248[0]._fU40 = 1.00000000;
    l_U248[0]._fU36 = 0;
    l_U248[1]._fU44 = {2.00000000, -11.50000000, 1.80000000};
    l_U248[1]._fU56 = {0.00000000, 0.00000000, -90.00000000};
    l_U248[1]._fU40 = 1.00000000;
    l_U248[1]._fU36 = 300;
    l_U248[2]._fU44 = {2.00000000, -5.80000000, 1.80000000};
    l_U248[2]._fU56 = {0.00000000, 0.00000000, -90.00000000};
    l_U248[2]._fU40 = 1.00000000;
    l_U248[2]._fU36 = 600;
    l_U316._fU332 = 1;
    l_U316._fU348 = 0;
    l_U316._fU352 = 1;
    l_U316._fU356 = 1;
    l_U316._fU360 = 0;
    l_U1066._fU332 = 0;
    l_U1066._fU348 = 1;
    l_U1066._fU352 = 1;
    l_U1066._fU356 = 1;
    l_U1066._fU360 = 1;
    return;
}

/* P_HANDLE_FAILURE */ void sub_2563()
{
    if (g_U830 == 8)
    {
        switch (l_U157)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_2765()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
            {
                l_U157 = 1;
                 /* WRITESCRIPTLOG */ sub_739( "SA", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_3283())
            {
                l_U157 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_3343( 0 )) == 1)
            {
                l_U157 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
            {
                if ((g_U861[9]._fU40 != 4) AND (g_U861[9]._fU40 != 0))
                {
                     /* WRITESCRIPTLOG */ sub_739( "GA", "Shutting down script for MCE_BECKER checkpoint.", 0 );
                     /* P_RESET_CHECKPOINT_THREAD */ sub_4921( ref g_U861[9] );
                    SET_EXITFLAG_FOR_SCRIPT( g_U861[9]._fU32 );
                    g_U846[9] = 0;
                }
                l_U157 = 3;
                 /* WRITESCRIPTLOG */ sub_739( "SA", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
             /* P_MPM_HANDLE_TRAM_SLOWING_DOWN */ sub_5069( ref l_U518, l_U528 );
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_739( "SA", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_2702() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_2702(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2664() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2664(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
             /* P_MPM_CLEANUP_ALL */ sub_5624( 1 );
            l_U157 = 4;
             /* WRITESCRIPTLOG */ sub_739( "SA", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_739( "SA", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_7035( ref l_U118,  /* PLAYER_PED_ID */ sub_2664() );
            l_U156 = 0;
            l_U157 = 5;
             /* WRITESCRIPTLOG */ sub_739( "SA", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_739( "SA", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U154 = 1;
            l_U157 = 0;
             /* WRITESCRIPTLOG */ sub_739( "SA", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_2664()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_2702() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_2702()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_2765()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2664(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_2702(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_2702(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_2664() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_2664(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_3283()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_3343(int iParam0)
{
    iParam0 = 1;
    switch (l_U79)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_3425( ref l_U81 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
            {
                l_U80 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_3559( ref l_U81, l_U80, 1, 1 );
             /* STARTTIMER */ sub_3709( ref l_U81 );
        }
        if ( /* ISTIMERDONE */ sub_3842( ref l_U81 ))
        {
             /* WRITESCRIPTLOG */ sub_739( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_2702() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_2702(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U79 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U79 = 2;
            }
            else
            {
                l_U79 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_739( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_4343();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_739( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_4343();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_3425(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_3559(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_3709(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_3842(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_4343()
{
     /* WRITESCRIPTLOG */ sub_739( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_4418( ref l_U81 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_2702() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_2702(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U78 = 0;
    l_U78 = l_U78;
    l_U79 = 0;
    return;
}

/* RESETTIMER */ void sub_4418(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_4921(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_MPM_HANDLE_TRAM_SLOWING_DOWN */ void sub_5069(unknown uParam0, unknown uParam1)
{
    unknown uVar4;

    uVar4 =  /* FLERP */ sub_5296( uParam1, 0.00000000,  /* GETTIMERPERCENTAGE */ sub_5121( uParam0 ) );
     /* P_SET_TRAM_SPEED */ sub_5350( l_U316._fU0, uVar4 );
    if ( /* ISTIMERDONE */ sub_3842( uParam0 ))
    {
         /* P_SET_TRAM_SPEED */ sub_5350( l_U316._fU0, 0.00000000 );
    }
    return;
}

/* GETTIMERPERCENTAGE */ void sub_5121(int iParam0)
{
    int iVar3;

    if (iParam0->_fU28)
    {
        iVar3 = TIMERA();
    }
    else
    {
        iVar3 = TIMERB();
    }
    return  /* CLAMP */ sub_5223( (TO_FLOAT( iVar3 - iParam0->_fU0 )) / (TO_FLOAT( iParam0->_fU12 )), 0.00000000, 1.00000000 );
}

/* CLAMP */ void sub_5223(float fParam0, float fParam1, float fParam2)
{
    float Result;

    Result = fParam0;
    if (fParam0 < fParam1)
    {
        Result = fParam1;
    }
    else if (fParam0 > fParam2)
    {
        Result = fParam2;
    }
    return Result;
}

/* FLERP */ float sub_5296(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return ((1.00000000 - uParam2) * uParam0) + (uParam1 * uParam2);
}

/* P_SET_TRAM_SPEED */ void sub_5350(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_VEHICLE_DEAD( uParam0 )))
    {
        SET_TRAIN_SPEED( uParam0, uParam1 );
        SET_TRAIN_CRUISE_SPEED( uParam0, uParam1 );
    }
    return;
}

/* P_MPM_CLEANUP_ALL */ void sub_5624(boolean bParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_CLEANUP_ALL", 0 );
    SET_CAM_VIEW_MODE( 1 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    FORCE_QUICK_DEATH_CAMERAS( 0 );
     /* CLEANPEDARRAY */ sub_5714( ref l_U1315 );
     /* CLEANPEDARRAY */ sub_5714( ref l_U1437 );
    if (bParam0)
    {
         /* P_T2_CLEANUP_TRAM */ sub_5888( ref l_U316 );
    }
    for ( I = 0; I < l_U1271; I++ )
    {
        STOP_PARTICLE_FX_LOOPED( l_U1271[I] );
    }
     /* P_T2_CLEANUP_TRAM */ sub_5888( ref l_U1066 );
     /* CLEANPLACEMENTARRAY */ sub_6289( ref l_U1553 );
     /* CLEANPLACEMENTARRAY */ sub_6289( ref l_U1491 );
     /* CLEANPLACEMENT */ sub_6344( g_U805._fU0 );
    ISEQ_TERMINATE( -1317042002 );
     /* P_STOP_SP_CHALLENGES */ sub_6458( bParam0 );
    for ( I = 0; I < l_U530; I++ )
    {
        GAMEPLAY_HELPER_BOX_DESTROY( ref l_U530[I]._fU0 );
    }
    for ( I = 0; I < l_U798; I++ )
    {
        GAMEPLAY_HELPER_BOX_DESTROY( ref l_U798[I]._fU0 );
    }
    STOP_SCRIPT_STREAM( l_U1610 );
    if (CUTSCENE_IS_LOADED( l_U117 ))
    {
        CLEAR_NAMED_CUTSCENE( l_U117 );
    }
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
    {
        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2664(), 0 );
        SET_PED_ALLOWED_TO_DUCK(  /* PLAYER_PED_ID */ sub_2664(), 1 );
        SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_2702(), 1 );
    }
    SET_PLAYER_SHOOTDODGE_GET_UP_STATE( 0 );
    RESET_FORCED_AIM_INTENTION_DIRECTION();
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_6822( ref l_U1611 );
    return;
}

/* CLEANPEDARRAY */ void sub_5714(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_5764( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_5764(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* P_T2_CLEANUP_TRAM */ void sub_5888(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_T2_CLEANUP_TRAM", 0 );
     /* CLEANOBJECT */ sub_5954( iParam0->_fU12 );
     /* CLEANOBJECT */ sub_5954( iParam0->_fU16 );
     /* CLEANOBJECT */ sub_5954( iParam0->_fU20 );
     /* CLEANOBJECT */ sub_5954( iParam0->_fU32 );
     /* CLEANOBJECT */ sub_5954( iParam0->_fU28 );
     /* CLEANOBJECT */ sub_5954( iParam0->_fU32 );
     /* CLEANOBJECTARRAY */ sub_6068( iParam0 + 36 );
     /* CLEANOBJECTARRAY */ sub_6068( iParam0 + 48 );
     /* CLEANOBJECTARRAY */ sub_6068( iParam0 + 60 );
     /* CLEANTRAIN */ sub_6171( iParam0->_fU0 );
    return;
}

/* CLEANOBJECT */ void sub_5954(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANOBJECTARRAY */ void sub_6068(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANOBJECT */ sub_5954( (uParam0^)[I] );
    }
    return;
}

/* CLEANTRAIN */ void sub_6171(unknown uParam0)
{
    if (DOES_VEHICLE_EXIST( uParam0 ))
    {
        DELETE_MISSION_TRAIN( uParam0 );
    }
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_6289(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_6344( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_6344(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_6458(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_739( "CCB", "P_STOP_SP_CHALLENGES", 0 );
    if (bParam0)
    {
        ;
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_739( "CCB", "Stopping the Finale_Tram context...", 0 );
        END_CONTEXT( "Finale_Tram" );
    }
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_6822(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_7035(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_739( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_7254( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_8418( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8732( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9211( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8732( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9211( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8732( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9211( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9527( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9211( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_9527( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_9211( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_10099( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_10301( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_2664(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_739( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_7254(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7316( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_7316(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_8418(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_8732(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9136( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_9136(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_9211(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_9527(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_9136( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_10099(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_10301(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7316( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_10399( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_10399(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_DEBUG */ void sub_11705()
{
    int I;
    char[16] cVar3;
    int J;
    char[16] cVar8;

    if (NOT l_U1642)
    {
        START_WIDGET_GROUP( "MPM" );
        ADD_WIDGET_BOOL( "Set player on empty tram", ref l_U1643 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U159, "Player start position", 1036831949 );
        ADD_WIDGET_FLOAT_SLIDER( "Player rotation", ref l_U162, -180.00000000, 180.00000000, 0.10000000 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U515, "Tram start position", 1036831949 );
        ADD_WIDGET_FLOAT_SLIDER( "Tram Start Speed", ref l_U528, 0.00000000, 20.00000000, 0.10000000 );
        ADD_WIDGET_INT_SLIDER( "Tram brake time", ref l_U527, 0, 60000, 500 );
        START_WIDGET_GROUP( "Blendout" );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U196, "Cam offset", 1036831949 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U199, "Cam rotation", 1036831949 );
        ADD_WIDGET_BOOL( "Grab cam offset", ref l_U1644 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U205, "Forced aim direction", 1036831949 );
        ADD_WIDGET_INT_SLIDER( "Gameplay cam interp", ref l_U208, 0, 10000, 1 );
        ADD_WIDGET_INT_SLIDER( "Wait for gameplay cam", ref l_U227, 0, 10000, 1 );
        ADD_WIDGET_INT_SLIDER( "Bullet time delay", ref l_U237, 0, 10000, 1 );
        ADD_WIDGET_INT_SLIDER( "Bullet time length", ref l_U247, 0, 5000, 1 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U202, "Aim offset", 1036831949 );
        ADD_WIDGET_INT_SLIDER( "Explosion Delay", ref l_U309, 0, 10000, 1 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U310, "Explosion position", 1036831949 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U313, "Explosion rotation", 1036831949 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "MPM UFE" );
        for ( I = 0; I < 3; I++ )
        {
            StrCopy( ref cVar3, "UFE ", 16 );
            ConcatString(ref cVar3, I, 16);
            START_WIDGET_GROUP( ref cVar3 );
             /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U1323[I], "Position", 1036831949 );
            ADD_WIDGET_FLOAT_SLIDER( "Rotation", ref l_U1333[I], -360.00000000, 360.00000000, 0.10000000 );
            STOP_WIDGET_GROUP();
        }
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Dead UFE" );
        for ( J = 0; J < 7; J++ )
        {
            StrCopy( ref cVar8, "Dead UFE ", 16 );
            ConcatString(ref cVar8, J, 16);
            START_WIDGET_GROUP( ref cVar8 );
             /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U1445[J], "Position", 1036831949 );
            ADD_WIDGET_FLOAT_SLIDER( "Rotation", ref l_U1467[J], -360.00000000, 360.00000000, 0.10000000 );
             /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U1507[J], "Weapon Position Offset", 1036831949 );
             /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U1529[J], "Weapon Rotation", 1036831949 );
            STOP_WIDGET_GROUP();
        }
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Crashed tram" );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_11829( ref l_U1268, "Post-explosion position", 1036831949 );
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        l_U1642 = 1;
    }
    if (l_U1643)
    {
         /* P_MPM_CLEANUP_ALL */ sub_5624( 0 );
         /* P_T2_CREATE_TRAM */ sub_13075( ref l_U316, l_U515, 0, 0 );
         /* P_SET_PED_ON_TRAM */ sub_16012( l_U316._fU0,  /* PLAYER_PED_ID */ sub_2664(), l_U159, l_U162 );
        l_U154 = 0;
        l_U1643 = 0;
    }
    if (l_U1644)
    {
        l_U196 = {(vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_GAMEPLAY_CAM_COORD())) - (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( l_U316._fU4 )))};
        l_U199 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_GAMEPLAY_CAM_ROT()};
        l_U1644 = 0;
    }
    return;
}

/* P_ADD_WIDGET_VECTOR_SLIDER */ void sub_11829(int iParam0, unknown uParam1, unknown uParam2)
{
    START_WIDGET_GROUP( uParam1 );
    ADD_WIDGET_FLOAT_SLIDER( "x", iParam0 + 0, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "y", iParam0 + 4, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "z", iParam0 + 8, 60536, 5000, uParam2 );
    STOP_WIDGET_GROUP();
    return;
}

/* P_T2_CREATE_TRAM */ void sub_13075(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4, unknown uParam5)
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_T2_CREATE_TRAM", 0 );
    iParam0->_fU0 =  /* F_CREATE_TRAM */ sub_13175( uParam1, uParam5, iParam0->_fU332, iParam0->_fU348, iParam0->_fU352, iParam0->_fU356, iParam0->_fU360, 0 );
     /* P_SET_TRAM_SPEED */ sub_5350( iParam0->_fU0, 0.00000000 );
    if (NOT (IS_VEHICLE_DEAD( iParam0->_fU0 )))
    {
        iParam0->_fU8 = GET_TRAIN_CABOOSE( iParam0->_fU0 );
        iParam0->_fU4 = GET_TRAIN_CARRIAGE( iParam0->_fU0, 1 );
        if (iParam0->_fU332 == 0)
        {
            if (bParam4)
            {
                iParam0->_fU12 =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2378, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
            }
            iParam0->_fU24 =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2381, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        }
        else if (bParam4)
        {
            iParam0->_fU12 =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2379, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        }
        iParam0->_fU24 =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2382, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );;
        if (bParam4)
        {
            ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU12, iParam0->_fU0, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
            SET_OBJECT_COLLISION( iParam0->_fU12, 1 );
        }
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU24, iParam0->_fU0, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        iParam0->_fU36[0] =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2384, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        iParam0->_fU36[1] =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2385, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU36[0], iParam0->_fU0, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU36[1], iParam0->_fU0, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        if (NOT (IS_STRING_NULL( uParam5 )))
        {
            if (bParam4)
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU12, uParam5 );
            }
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU24, uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU36[0], uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU36[1], uParam5 );
        }
    }
    if (NOT (IS_VEHICLE_DEAD( iParam0->_fU4 )))
    {
        if (bParam4)
        {
            iParam0->_fU16 =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2380, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
            ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU16, iParam0->_fU4, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
            SET_OBJECT_COLLISION( iParam0->_fU16, 1 );
        }
        iParam0->_fU28 =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2383, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU28, iParam0->_fU4, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        iParam0->_fU48[0] =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2386, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        iParam0->_fU48[1] =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2387, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU48[0], iParam0->_fU4, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU48[1], iParam0->_fU4, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        if (NOT (IS_STRING_NULL( uParam5 )))
        {
            if (bParam4)
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU16, uParam5 );
            }
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU28, uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU48[0], uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU48[1], uParam5 );
        }
    }
    if (NOT (IS_VEHICLE_DEAD( iParam0->_fU8 )))
    {
        if (iParam0->_fU332 == 0)
        {
            if (bParam4)
            {
                iParam0->_fU20 =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2379, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
            }
            iParam0->_fU32 =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2382, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        }
        else if (bParam4)
        {
            iParam0->_fU20 =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2378, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        }
        iParam0->_fU32 =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2381, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );;
        if (bParam4)
        {
            ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU20, iParam0->_fU8, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
            SET_OBJECT_COLLISION( iParam0->_fU20, 1 );
        }
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU32, iParam0->_fU8, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        iParam0->_fU60[0] =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2384, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        iParam0->_fU60[1] =  /* CREATEOBJECTNOOFFSET */ sub_13836( g_U2385, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU60[0], iParam0->_fU8, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU60[1], iParam0->_fU8, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        if (NOT (IS_STRING_NULL( uParam5 )))
        {
            if (bParam4)
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU20, uParam5 );
            }
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU32, uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU60[0], uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU60[1], uParam5 );
        }
    }
    return;
}

/* F_CREATE_TRAM */ void sub_13175(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, boolean bParam5, boolean bParam6, boolean bParam7, boolean bParam8, boolean bParam9)
{
    unknown Result;
    unknown uVar13;
    unknown uVar14;

     /* WRITESCRIPTLOG */ sub_739( "GA", "F_CREATE_TRAM start", 0 );
    Result = CREATE_MISSION_TRAIN( uParam4, uParam0, 1 );
    if (bParam9)
    {
        while (NOT (DOES_VEHICLE_EXIST( Result )))
        {
             /* WRITESCRIPTLOG */ sub_739( "GA", "Waiting for tram to exist.", 0 );
            WAIT( 0 );
        }
    }
    if (NOT (IS_VEHICLE_DEAD( Result )))
    {
        SET_TRAIN_LEAVES_STATION( Result );
        SET_TRAIN_SPEED( Result, 0.00000000 );
        SET_TRAIN_CRUISE_SPEED( Result, 0.00000000 );
        SET_TRAIN_STOPS_FOR_STATIONS( Result, 0 );
        if (NOT (IS_STRING_NULL( uParam3 )))
        {
            SET_ROOM_FOR_VEHICLE_BY_NAME( Result, uParam3 );
        }
        SET_VEHICLE_EXTRA( Result, 3, NOT bParam5 );
        SET_VEHICLE_EXTRA( Result, 4, NOT bParam7 );
        SET_VEHICLE_EXTRA( Result, 5, NOT bParam6 );
        SET_VEHICLE_EXTRA( Result, 6, NOT bParam8 );
        uVar13 = GET_TRAIN_CARRIAGE( Result, 1 );
        uVar14 = GET_TRAIN_CABOOSE( Result );
    }
    if (NOT (IS_VEHICLE_DEAD( uVar13 )))
    {
        if (NOT (IS_STRING_NULL( uParam3 )))
        {
            SET_ROOM_FOR_VEHICLE_BY_NAME( uVar13, uParam3 );
        }
        SET_VEHICLE_EXTRA( uVar13, 3, NOT bParam5 );
        SET_VEHICLE_EXTRA( uVar13, 4, NOT bParam7 );
        SET_VEHICLE_EXTRA( uVar13, 5, NOT bParam6 );
        SET_VEHICLE_EXTRA( uVar13, 6, NOT bParam8 );
    }
    if (NOT (IS_VEHICLE_DEAD( uVar14 )))
    {
        if (NOT (IS_STRING_NULL( uParam3 )))
        {
            SET_ROOM_FOR_VEHICLE_BY_NAME( uVar14, uParam3 );
        }
        SET_VEHICLE_EXTRA( uVar14, 3, NOT bParam5 );
        SET_VEHICLE_EXTRA( uVar14, 4, NOT bParam7 );
        SET_VEHICLE_EXTRA( uVar14, 5, NOT bParam6 );
        SET_VEHICLE_EXTRA( uVar14, 6, NOT bParam8 );
    }
    return Result;
}

/* CREATEOBJECTNOOFFSET */ void sub_13836(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_13969( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* LOADMODEL */ void sub_13969(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_9136( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_SET_PED_ON_TRAM */ void sub_16012(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    unknown uVar8;
    float fVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;

     /* WRITESCRIPTLOG */ sub_739( "GA", "P_SET_PED_ON_TRAM start", 0 );
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_VEHICLE_DEAD( uParam0 ))))
    {
        uVar8 = GET_VEHICLE_HEADING( uParam0 );
        fVar9 = uVar8 + uParam5;
        uVar10 = {((vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( uParam0 ))) + (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", VECTOR_ROTATE_AXIS( uParam2, uVar8, "z" )))) - (vector( 0.00000000, 0.00000000, 1.00000000))};
        SET_PED_COORDS( uParam1, uVar10, 1 );
        SET_PED_HEADING( uParam1, fVar9 );
    }
     /* WRITESCRIPTLOG */ sub_739( "GA", "P_SET_PED_ON_TRAM end", 0 );
    return;
}

/* P_HANDLE_EVENTS */ void sub_16331()
{
    int iVar2;
    unknown uVar3;
    unknown uVar4;

    iVar2 = l_U154;
    switch (l_U154)
    {
        case 0:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
        case 1:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
        }
         /* P_INITIALIZE_SCRIPT_DATA */ sub_16621();
         /* P_SET_STATIC_DATA */ sub_16722();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U154 = 2;
        break;
        case 2:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        }
         /* P_MPM_REQUEST_PERSISTENT_ASSETS */ sub_17369();
         /* P_MPM_REQUEST_NONPERSISTENT_ASSETS */ sub_26303();
        l_U154 = 3;
        break;
        case 3:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        }
        if (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_31579( ref g_U1950 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_31165( ref g_U1368 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_30774( ref g_U1429 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_30372( ref g_U1247 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_29975( ref g_U1030 ))))))
        {
            if ((NOT l_U118._fU0) AND (g_U829 == 8))
            {
                l_U154 = 4;
            }
            else
            {
                l_U154 = 6;
            }
        }
        break;
        case 4:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        }
        l_U156 = 0;
        g_U846[8] = 1;
        if (( /* HAS_SAVEFILE_LOADED */ sub_32085( ref l_U118 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_9527(  /* PLAYER_PED_ID */ sub_2664(), -1464892298, 50, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_8732(  /* PLAYER_PED_ID */ sub_2664(), -612753081, 1, 50, 0 );
            l_U154 = 5;
             /* WRITESCRIPTLOG */ sub_739( "CR", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U154 = 6;
             /* WRITESCRIPTLOG */ sub_739( "CR", "eCheckpointState = CP_CREATE_TRAMS", 0 );
        }
        break;
        case 5:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 1 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 ) )))
            {
                g_U830 = 8;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_32670( ref l_U118, g_U830,  /* PLAYER_PED_ID */ sub_2664(), g_U2014[8], g_U2129[8], g_U2168[8], g_U2207[8], 1 );
                l_U154 = 6;
            }
        }
        break;
        case 6:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_CREATE_TRAMS", 0 );
             /* P_T2_CREATE_TRAM */ sub_13075( ref l_U316, l_U515, 0, 0 );
             /* P_SET_TRAM_SPEED */ sub_5350( l_U316._fU0, 0.00000000 );
             /* P_T2_CREATE_TRAM */ sub_13075( ref l_U1066, l_U1265, 0, 0 );
             /* P_SET_TRAM_SPEED */ sub_5350( l_U1066._fU0, 0.00000000 );
        }
        if ( /* F_MPM_DOES_TRAM_EXIST */ sub_37405())
        {
             /* P_MPM_CREATE_PLACEMENTS */ sub_37506();
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_39180( ref l_U530[0], "TRAM_ENGINE_EXIT_1", l_U316._fU0, 3.00000000, 2.98000000, 0.00000000, 2.50000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_39180( ref l_U530[1], "TRAM_ENGINE_EXIT_2", l_U316._fU0, 3.00000000, -2.98000000, 0.00000000, 2.50000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_39180( ref l_U530[2], "TRAM_CARRIAGE_EXIT_1", l_U316._fU4, -3.00000000, 2.48000000, 0.00000000, 2.50000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_39180( ref l_U530[3], "TRAM_CARRIAGE_EXIT_2", l_U316._fU4, -3.00000000, -3.48000000, 0.00000000, 2.50000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_39180( ref l_U530[4], "TRAM_CABOOSE_EXIT_1", l_U316._fU8, -3.00000000, 2.98000000, 0.00000000, 2.50000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_39180( ref l_U530[5], "TRAM_CABOOSE_EXIT_2", l_U316._fU8, -3.00000000, -2.98000000, 0.00000000, 2.50000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATETRIGGERREGION */ sub_39908( ref l_U657, ref l_U530 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_39180( ref l_U798[0], "TRAM_ENGINE_FORCE_WALK_1", l_U316._fU0, 0.00000000, 2.98000000, 0.00000000, 5.00000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_39180( ref l_U798[1], "TRAM_ENGINE_FORCE_WALK_2", l_U316._fU0, 0.00000000, -2.98000000, 0.00000000, 5.00000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_39180( ref l_U798[2], "TRAM_CARRIAGE_FORCE_WALK_1", l_U316._fU4, 0.00000000, 2.48000000, 0.00000000, 5.00000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_39180( ref l_U798[3], "TRAM_CARRIAGE_FORCE_WALK_2", l_U316._fU4, 0.00000000, -3.48000000, 0.00000000, 5.00000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_39180( ref l_U798[4], "TRAM_CABOOSE_FORCE_WALK_1", l_U316._fU8, 0.00000000, 2.98000000, 0.00000000, 5.00000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_39180( ref l_U798[5], "TRAM_CABOOSE_FORCE_WALK_2", l_U316._fU8, 0.00000000, -2.98000000, 0.00000000, 5.00000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATETRIGGERREGION */ sub_39908( ref l_U925, ref l_U798 );
            l_U154 = 7;
        }
        break;
        case 7:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_CREATE_PEDS", 0 );
            l_U1344 = 1;
            l_U1343 = 0;
            l_U1552 = 1;
            l_U1551 = 0;
        }
        if ( /* F_MPM_SPAWN_UFE */ sub_40884())
        {
            if ( /* F_MPM_SPAWN_DEAD_UFE */ sub_43203())
            {
                l_U154 = 8;
            }
        }
        break;
        case 8:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        if (g_U846[8] == 1)
        {
            if (l_U156)
            {
                if (CUTSCENE_IS_LOADED( l_U117 ))
                {
                    l_U154 = 9;
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_739( "SA", "Waiting for MID 09 to load ...", 0 );
                }
            }
            else
            {
                l_U154 = 9;
            }
        }
        break;
        case 9:
        if (l_U155 == 1)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_MID_09", 0 );
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_50814( ref l_U90, l_U117, 43798, 45821, 47278, 47693, 47742, 50759, 250, 0 );
             /* CUTSYS_SETCUTSCENELOADEXTERIORONSKIP */ sub_51349( ref l_U90, g_U2014[8] );
            if (l_U156 == 1)
            {
                l_U90._fU4 = 2;
            }
            else
            {
                l_U90._fU4 = 7;
            }
        }
         /* CUTSYS_HANDLECUTSCENE */ sub_51476( ref l_U90 );
        if (l_U90._fU4 == 9)
        {
            l_U154 = 10;
        }
        break;
        case 10:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_MPM", 0 );
            if (g_U830 != 8)
            {
                g_U830 = 8;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_32670( ref l_U118, g_U830,  /* PLAYER_PED_ID */ sub_2664(), g_U2014[8], g_U2129[8], g_U2168[8], g_U2207[8], 1 );
            }
            l_U164 = 0;
            l_U163 = 0;
             /* DISABLETIMER */ sub_53495( ref l_U238 );
             /* P_SET_TRAM_SPEED */ sub_5350( l_U316._fU0, l_U528 );
             /* P_SET_TRAM_SPEED */ sub_5350( l_U1066._fU0, l_U528 );
             /* P_CREATE_AND_START_TIMER */ sub_53583( ref l_U518, l_U527 );
             /* P_CREATE_AND_START_TIMER */ sub_53583( ref l_U228, l_U237 );
             /* P_CREATE_AND_START_TIMER */ sub_53583( ref l_U300, l_U309 );
             /* DISABLETIMER */ sub_53495( ref l_U218 );
            CLEAR_NAMED_CUTSCENE( l_U117 );
            DO_SCREEN_FADE_IN( 0 );
        }
         /* P_MPM_HANDLE_BULLET_CAM */ sub_53703();
         /* P_MPM_HANDLE_TRAM_SLOWING_DOWN */ sub_5069( ref l_U518, l_U528 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_54201( ref l_U1315, -1054867456, 0, 1 );
         /* P_TRAIN_SAFETY_KILL_PLAYER */ sub_54407( l_U316._fU0 );
        if (((g_U861[7]._fU40 == 4) || (g_U861[7]._fU40 == 0)) AND ((l_U164) AND (NOT g_U861[9]._fU36)))
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "Starting Becker script", 0 );
            g_U861[9]._fU36 = 1;
        }
        if (( /* F_MPM_IS_BLENDOUT_FINISHED */ sub_54855()) AND (NOT l_U164))
        {
             /* P_MPM_SET_PLAYER_PRONE */ sub_54953();
             /* P_CREATE_AND_START_TIMER */ sub_53583( ref l_U209, l_U227 );
            l_U164 = 1;
        }
        if ( /* ISTIMERDONE */ sub_3842( ref l_U209 ))
        {
             /* NIS_RETURN_TO_GAMEPLAY_CAM */ sub_55301( l_U208, 1, 0, g_U2168[8], g_U2207[8], 0 );
             /* NIS_POST_SETUP */ sub_53121( 1, 0 );
        }
        if ( /* ISTIMERDONE */ sub_3842( ref l_U218 ))
        {
            RESET_FORCED_AIM_INTENTION_DIRECTION();
        }
        if ( /* ISTIMERDONE */ sub_3842( ref l_U300 ))
        {
             /* P_MPM_TRIGGER_EXPLOSION */ sub_55469();
        }
        else if (l_U300._fU16)
        {
             /* P_HANDLE_SHATTERED_GLASS_EFFECTS */ sub_56211();
        }
        if ( /* ISTIMERDONE */ sub_3842( ref l_U228 ))
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "Activating bullet time", 0 );
             /* P_MPM_START_MPM */ sub_56487();
             /* P_CREATE_AND_START_TIMER */ sub_53583( ref l_U238, l_U247 );
            l_U163 = 1;
        }
        if ( /* ISTIMERDONE */ sub_3842( ref l_U238 ))
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "Deactivating bullet time", 0 );
             /* P_MPM_FINISH_MPM */ sub_56684();
        }
        if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_53754( ref l_U1315 )) == 0)
        {
             /* P_MPM_FINISH_MPM */ sub_56684();
            if (NOT l_U518._fU16)
            {
                 /* WRITESCRIPTLOG */ sub_739( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_3 mood. Fade in 5 sec", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_3", "FINALE_01_3", 0.00000000, 5000, 7000, -1082130432, 0 );
            }
            l_U154 = 11;
        }
        break;
        case 11:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_WAIT_FOR_BULLET_CAM", 0 );
        }
         /* P_MPM_HANDLE_TRAM_SLOWING_DOWN */ sub_5069( ref l_U518, l_U528 );
        if ((NOT IS_LAST_MAN_STANDING_ACTIVE()) AND (NOT (IS_BULLET_CAMERA_RUNNING( 0 ))))
        {
            l_U154 = 12;
        }
        break;
        case 12:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_WAIT_FOR_DOORS", 0 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
            BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 0 );
             /* DISABLETIMER */ sub_53495( ref l_U1558 );
             /* DISABLETIMER */ sub_53495( ref l_U1567 );
            l_U529 = 0;
             /* P_CREATE_AND_START_TIMER */ sub_53583( ref l_U1621, 2000 );
             /* DISABLETIMER */ sub_53495( ref l_U1630 );
        }
         /* P_MPM_HANDLE_TRAM_SLOWING_DOWN */ sub_5069( ref l_U518, l_U528 );
        if ((NOT ( /* F_IS_PED_PLAYING_SPEECH */ sub_57343(  /* PLAYER_PED_ID */ sub_2664() ))) AND ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND (NOT l_U518._fU16)))
        {
            if ( /* ISTIMERDONE */ sub_3842( ref l_U1621 ))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_57457( "SAIR_THTRMSLWS", ref l_U1611 );
            }
        }
        if ((l_U518._fU16) AND (NOT l_U529))
        {
             /* P_CREATE_AND_START_TIMER */ sub_53583( ref l_U1558, 2000 );
            PLAY_SOUND_FROM_VEHICLE( -1, "VEHICLES_TRAIN_SUBWAY_DOOR_TONE", l_U316._fU4 );
            l_U529 = 1;
        }
        if ( /* ISTIMERDONE */ sub_3842( ref l_U1558 ))
        {
             /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_58788( ref l_U316._fU0, 1.50000000, 1, 0 );
             /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_58788( ref l_U316._fU4, 1.50000000, 0, 0 );
             /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_58788( ref l_U316._fU8, 1.50000000, 0, 0 );
             /* WRITESCRIPTLOG */ sub_739( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_2 mood. Fade in 7 sec", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_2", "FINALE_01_2", 0.00000000, 7000, 10000, -1082130432, 0 );
             /* P_CREATE_AND_START_TIMER */ sub_53583( ref l_U1567, 1000 );
             /* P_CREATE_AND_START_TIMER */ sub_53583( ref l_U1630, 1000 );
        }
        if ((NOT ( /* F_IS_PED_PLAYING_SPEECH */ sub_57343(  /* PLAYER_PED_ID */ sub_2664() ))) AND (NOT (IS_BULLET_CAMERA_RUNNING( 0 ))))
        {
            if ( /* ISTIMERDONE */ sub_3842( ref l_U1630 ))
            {
                l_U1639[0] = "SAIR_TTRMSTPS1";
                l_U1639[1] = "SAIR_TTRMSTPS1";
                 /* P_SPEECH_PLAY_RANDOM_MONOLOGUE */ sub_59179( ref l_U1639, ref l_U1611 );
            }
        }
        if ((l_U1567._fU20) || ((l_U1567._fU16) || ( /* ISTIMERDONE */ sub_3842( ref l_U1567 ))))
        {
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() ))) AND ( /* F_ISPLAYERINTRIGGERREGION */ sub_59347( ref l_U925, 0 )))
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2664(), 1 );
                SET_PED_ALLOWED_TO_DUCK(  /* PLAYER_PED_ID */ sub_2664(), 0 );
                SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_2702(), 0 );
            }
            else
            {
                SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_2664(), 0 );
                SET_PED_ALLOWED_TO_DUCK(  /* PLAYER_PED_ID */ sub_2664(), 1 );
                SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_2702(), 1 );
            }
        }
        if ((l_U1567._fU16) || ( /* ISTIMERDONE */ sub_3842( ref l_U1567 )))
        {
            if ( /* F_ISPLAYERINTRIGGERREGION */ sub_59347( ref l_U657, 0 ))
            {
                l_U154 = 13;
            }
        }
        break;
        case 13:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_WAIT_FOR_HOLSTER", 0 );
             /* NIS_PRE_SETUP */ sub_49488( 1, 0, 0, 1 );
             /* DISABLETIMER */ sub_53495( ref l_U1576 );
            l_U1585 = 0;
        }
        if ( /* F_HOLSTERRIFLEORDUALANDDRAWPISTOL_ASYNC */ sub_59894( ref uVar3, ref uVar4, ref l_U1585, 0 ))
        {
             /* P_CREATE_AND_START_TIMER */ sub_53583( ref l_U1576, 250 );
        }
        if ( /* ISTIMERDONE */ sub_3842( ref l_U1576 ))
        {
            l_U154 = 14;
        }
        break;
        case 14:
        if (l_U155)
        {
             /* WRITESCRIPTLOG */ sub_739( "SA", "eCheckpointState = CP_FINISHED", 0 );
             /* P_T2_SET_1403_TRAM */ sub_60499( ref l_U316 );
            g_U846[9] = 1;
        }
        if ((g_U830 == 9) || (NOT HAS_CUTSCENE_FINISHED()))
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U154 = 0;
        }
        break;
    }
    if (l_U154 != iVar2)
    {
        l_U155 = 1;
    }
    else
    {
        l_U155 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_16621()
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U155 = 1;
    l_U158 = 0;
    l_U1557 = 0;
    return;
}

/* P_SET_STATIC_DATA */ void sub_16722()
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_SET_STATIC_DATA", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16814( ref l_U1275[0], g_U2014[8], 0.00000000, -244610902, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16814( ref l_U1275[1], g_U2014[8], 0.00000000, 215628944, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16814( ref l_U1275[2], g_U2014[8], 0.00000000, 566158225, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16814( ref l_U1345[0], g_U2014[8], 0.00000000, 1447570344, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16814( ref l_U1345[1], g_U2014[8], 0.00000000, 1152757315, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16814( ref l_U1345[2], g_U2014[8], 0.00000000, 1854613990, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16814( ref l_U1345[3], g_U2014[8], 0.00000000, -119132553, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16814( ref l_U1345[4], g_U2014[8], 0.00000000, -1347471989, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16814( ref l_U1345[5], g_U2014[8], 0.00000000, 1403297832, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_16814( ref l_U1345[6], g_U2014[8], 0.00000000, 1949885446, 7, 3, 2, 0, 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_16814(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_MPM_REQUEST_PERSISTENT_ASSETS */ void sub_17369()
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_REQUEST_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_17472( ref l_U1586, ref g_U1030 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_20394( ref l_U1603, ref g_U1247 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22441( "LEVEL_S_FIN_CP_08", ref g_U1429 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_24352( "SCRIPT_MISSION\S_AIRPORT_TRAM", ref g_U1950 );
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_REQUEST_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_17472(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_17545( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_17545(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_17612( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17870( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_17612(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17870( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17870( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17870( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19401( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17870( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17870( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_17870(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17931( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_17931(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_19401(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_20394(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_20468( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_20468(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_20522( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20783( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_20522(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20783( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20783( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20783( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19401( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20783( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20783( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_20783(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17931( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_22441(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_22493( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22745( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_22493(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22745( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22745( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22745( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19401( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22745( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22745( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_22745(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17931( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_24352(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_24405( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24660( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_24405(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24660( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24660( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24660( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19401( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24660( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24660( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_24660(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17931( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_MPM_REQUEST_NONPERSISTENT_ASSETS */ void sub_26303()
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_REQUEST_NONPERSISTENT_ASSETS start", 0 );
    if ((l_U156) AND (g_U829 != 8))
    {
         /* LOADSEAMLESSCUTSCENE */ sub_26428( l_U117, 0 );
    }
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26777( -1317042002, ref g_U1368 );
    l_U1610 =  /* F_REQUEST_SCRIPT_STREAM */ sub_29576( ref g_U2443 );
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_REQUEST_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_26428(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_26777(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_26838( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27088( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_26838(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27088( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27088( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27088( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27088( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_19401( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_19401( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27088( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_27088( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_27088(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17931( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_REQUEST_SCRIPT_STREAM */ int sub_29576(unknown uParam0)
{
    int Result;

     /* WRITESCRIPTLOG */ sub_739( "SA", "F_REQUEST_SCRIPT_STREAM start", 0 );
    for ( Result = 0; Result < 3; Result++ )
    {
        if ((GET_SCRIPT_STREAM_STATE( "ANY_STREAM", Result )) == 0)
        {
            DISPLAYF( "Loading stream {0} into slot {1}", 2, 1537, uParam0, 513, Result );
            REQUEST_SCRIPT_STREAM( uParam0, Result );
            return Result;
        }
    }
     /* WRITESCRIPTLOG */ sub_739( "SA", "F_REQUEST_SCRIPT_STREAM end", 0 );
    return -1;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_29975(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_30372(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_30774(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_31165(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_31579(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_32085(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_739( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_7035( uParam0,  /* PLAYER_PED_ID */ sub_2664() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_32670(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_739( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_739( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_10301( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_32961( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_33438( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_33438( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33698( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_33438( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33698( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33698( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_33438( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33698( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33698( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33698( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_33438( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33698( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33698( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33698( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33698( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_35278( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_739( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_32961(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_7316( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_739( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_739( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_33438(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_33698(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_35278(int iParam0)
{
     /* WRITE_STRING */ sub_9136( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_35366( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_35443( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_35443( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_35443( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_35443( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_35443( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_36313( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU52 );
     /* WRITE_STRING */ sub_9136( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU96 );
     /* WRITE_STRING */ sub_9136( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU100 );
     /* WRITE_STRING */ sub_9136( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU104 );
     /* WRITE_STRING */ sub_9136( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU108 );
     /* WRITE_STRING */ sub_9136( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU112 );
     /* WRITE_STRING */ sub_9136( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU116 );
     /* WRITE_STRING */ sub_9136( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU120 );
     /* WRITE_STRING */ sub_9136( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU124 );
     /* WRITE_STRING */ sub_9136( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU128 );
     /* WRITE_STRING */ sub_9136( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_35612( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_35612( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_35612( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_35366(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_35443(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_35612(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_36313(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* F_MPM_DOES_TRAM_EXIST */ int sub_37405()
{
    if ((DOES_VEHICLE_EXIST( l_U316._fU8 )) AND ((DOES_VEHICLE_EXIST( l_U316._fU4 )) AND (DOES_VEHICLE_EXIST( l_U316._fU0 ))))
    {
        return 1;
    }
    return 0;
}

/* P_MPM_CREATE_PLACEMENTS */ void sub_37506()
{
    vector[6] vVar2;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    int[0] iVar21;
    int I;

     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_CREATE_PLACEMENTS start", 0 );
    array(ref vVar2, 6);
    vVar2[0] = {-1.32000000, -8.35000000, 0.94500000};
    vVar2[1] = {-1.56000000, -8.35000000, 1.20700000};
    vVar2[2] = {-1.58000000, -8.35000000, 0.94500000};
    vVar2[3] = {-1.34000000, -8.35000000, 1.20700000};
    vVar2[4] = {-1.47000000, -8.35000000, 1.20700000};
    vVar2[5] = {-1.45000000, -8.35000000, 0.94500000};
    array(ref iVar21, 6);
    for ( I = 0; I < iVar21; I++ )
    {
        iVar21[I] = 1;
    }
     /* P_CREATE_TRAM_PAINKILLERS */ sub_37785( ref l_U1553, ref vVar2, ref iVar21, l_U316._fU4, 0 );
     /* P_CREATE_S_AIR_GG_PD_03 */ sub_38242();
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_CREATE_PLACEMENTS end", 0 );
    return;
}

/* P_CREATE_TRAM_PAINKILLERS */ void sub_37785(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    vector vVar7;
    unknown uVar10;
    int I;
    vector vVar12;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;

    if (NOT (IS_VEHICLE_DEAD( uParam3 )))
    {
        vVar7 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( uParam3 )};
        uVar10 = GET_VEHICLE_HEADING( uParam3 );
        for ( I = 0; I < (uParam0^); I++ )
        {
            if ((uParam2^)[I])
            {
                if (DOES_PLACEMENT_EXIST( (uParam0^)[I] ))
                {
                     /* CLEANPLACEMENT */ sub_6344( (uParam0^)[I] );
                }
                vVar12 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", VECTOR_ROTATE_AXIS( (uParam1^)[I], uVar10, "z" )};
                uVar15 = {vVar12 + vVar7};
                (uParam0^)[I] =  /* CREATEPLACEMENT */ sub_37995( -4072149, uVar15, 0.00000000, 0.00000000, 0.00000000, 1, 1, 0, 1119092736 );
                if ((DOES_PLACEMENT_EXIST( (uParam0^)[I] )) AND (NOT (IS_STRING_NULL( uParam4 ))))
                {
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( (uParam0^)[I], uParam4 );
                }
            }
        }
    }
    return;
}

/* CREATEPLACEMENT */ void sub_37995(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_CREATE_S_AIR_GG_PD_03 */ void sub_38242()
{
     /* WRITESCRIPTLOG */ sub_739( "CO", "P_CREATE_S_AIR_GG_PD_03", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_38370( ref g_U805, g_U828, 339779568, 1838346573, -1026.67000000, -502.18000000, -4.80000000, 0.00000000, 0.00000000, 1.00000000, "" );
     /* P_CREATECOLLECTIBLE */ sub_38527( ref g_U805 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_38370(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_739( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_38527(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_739( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_38610( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_739( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_739( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_38610( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_6344( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_37995( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_739( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_739( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_38610(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ void sub_39180(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    if ((DOES_VEHICLE_EXIST( uParam2 )) == 1)
    {
        if (((IS_VEHICLE_DEAD( uParam2 )) == 0) || ((IS_VEHICLE_DEAD( uParam2 )) == 1))
        {
            GAMEPLAY_HELPER_BOX_CREATE_VEHICLE_ATTACHED( 1, iParam0 + 0, uParam2, uParam3, uParam6, uParam7, uParam8, uParam9, uParam12, uParam13 );
            iParam0->_fU72 = {uParam3};
        }
    }
    else
    {
        DISPLAYF( "[SA]### ERROR: Trying to attach a vehicle attached trigger to a vehicle that doesn't exist: {} ###", 1, 1281, iParam0 + 0 );
    }
    return;
}

/* P_CREATETRIGGERREGION */ void sub_39908(int iParam0, unknown uParam1)
{
    int iVar4;
    int I;

    iVar4 = (uParam1^);
    if (iVar4 > 6)
    {
         /* WRITESCRIPTLOG */ sub_739( "[SA]", "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
        SCRIPT_ASSERT( "P_CreateTriggerRegion() ERRROR: max number of trigger boxes exceeded.", 0 );
    }
    for ( I = 0; I < iVar4; I++ )
    {
        iParam0->_fU0[I] = {(uParam1^)[I]};
    }
    iParam0->_fU508 = iVar4;
    iParam0->_fU548 = 0;
    iParam0->_fU552 = 0;
    iParam0->_fU556 = 0;
    iParam0->_fU560 = 0;
    return;
}

/* F_MPM_SPAWN_UFE */ int sub_40884()
{
    char[64] cVar2;

    switch (l_U1344)
    {
        case 1:
        l_U1343 = 0;
        l_U1344 = 2;
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_MPM_UFE[", 64 );
        ConcatString(ref cVar2, l_U1343, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        l_U1315[l_U1343] =  /* CREATEPED */ sub_41040( ref l_U1275[l_U1343] );
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() ))) AND (NOT (IS_PED_DEAD( l_U1315[l_U1343] ))))
        {
             /* F_GIVEPEDWEAPON */ sub_9527( l_U1315[l_U1343], l_U1319[l_U1343], 25000, 0, 0 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U1315[l_U1343], 1 );
            SET_PED_CAN_RAGDOLL( l_U1315[l_U1343], 0 );
        }
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_41890( l_U1315[l_U1343], ref l_U1337 );
         /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_42676( ref l_U1315[l_U1343], ref g_U2411, 6.00000000, 10.00000000 );
        l_U1343++;
        if (l_U1343 >= l_U1315)
        {
            l_U1344 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_42847( ref l_U1315, "UFE" );
         /* P_DEACTIVATEPEDARRAY */ sub_42981( ref l_U1315 );
        l_U1344 = 4;
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* CREATEPED */ void sub_41040(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_13969( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_41531( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_41632( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_41531(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_41632(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_41890(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_9136( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_42060( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_42060( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_SETUP_AI_GROUP */ void sub_42060(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* P_SET_PED_TEMPLATE_AND_RANGES */ void sub_42676(unknown uParam0, unknown uParam1, float fParam2, float fParam3)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_42847(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_DEACTIVATEPEDARRAY */ void sub_42981(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_43035( (uParam0^)[I] );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_43035(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* F_MPM_SPAWN_DEAD_UFE */ int sub_43203()
{
    char[64] cVar2;

    switch (l_U1552)
    {
        case 1:
        l_U1551 = 0;
        l_U1552 = 2;
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_MPM_DeadUFE[", 64 );
        ConcatString(ref cVar2, l_U1551, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        l_U1437[l_U1551] =  /* CREATEPED */ sub_41040( ref l_U1345[l_U1551] );
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() ))) AND (NOT (IS_PED_DEAD( l_U1437[l_U1551] ))))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U1437[l_U1551], 1 );
        }
        l_U1551++;
        if (l_U1551 >= l_U1437)
        {
            l_U1552 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_42847( ref l_U1437, "Dead_UFE" );
         /* P_DEACTIVATEPEDARRAY */ sub_42981( ref l_U1437 );
        l_U1552 = 4;
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* F_MPM_MID_09_PRECUTSCENE_SETUP */ int sub_43798()
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "F_MPM_MID_09_PRECUTSCENE_SETUP - START", 0 );
     /* P_SET_TRAM_SPEED */ sub_5350( g_U3756._fU0, 0.00000000 );
     /* P_SET_TRAM_SPEED */ sub_5350( g_U3955._fU0, 0.00000000 );
     /* P_MPM_SETUP_UFE */ sub_43927();
     /* P_MPM_SETUP_DEAD_UFE */ sub_44261();
     /* WRITESCRIPTLOG */ sub_739( "SA", "F_MPM_MID_09_PRECUTSCENE_SETUP - END", 0 );
    return 1;
}

/* P_MPM_SETUP_UFE */ void sub_43927()
{
    int I;

     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_ACTIVATE_UFE start", 0 );
    for ( I = 0; I < 3; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U1315[I] )))
        {
             /* P_ACTIVATEPED */ sub_44036( l_U1315[I] );
             /* P_SET_PED_ON_TRAM */ sub_16012( l_U316._fU0, l_U1315[I], l_U1323[I], l_U1333[I] );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U1315[I], 1 );
        }
    }
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_ACTIVATE_UFE end", 0 );
    return;
}

/* P_ACTIVATEPED */ void sub_44036(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_MPM_SETUP_DEAD_UFE */ void sub_44261()
{
    int I;
    unknown uVar3;

     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_ACTIVATE_DEAD_UFE start", 0 );
    for ( I = 0; I < 7; I++ )
    {
        if ( /* ISPEDVALID */ sub_44359( l_U1437[I], 0 ))
        {
             /* P_ACTIVATEPED */ sub_44036( l_U1437[I] );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U1437[I], 1 );
            switch (l_U1475[I])
            {
                case 0:
                uVar3 = l_U316._fU0;
                break;
                case 1:
                uVar3 = l_U316._fU4;
                break;
                case 2:
                uVar3 = l_U316._fU8;
                break;
            }
            if ((NOT (IS_VEHICLE_DEAD( uVar3 ))) AND (NOT (IS_PED_DEAD( l_U1437[I] ))))
            {
                ATTACH_PED_TO_VEHICLE( l_U1437[I], uVar3, 0, l_U1445[I], l_U1467[I], 360.00000000, 0, 0, 0, 1 );
                 /* P_CREATE_DEAD_BODY */ sub_44691( l_U1437[I], l_U1483[I] );
                l_U1491[I] =  /* CREATEPLACEMENT */ sub_37995( l_U1499[I], (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( l_U1437[I] ))) + l_U1507[I], l_U1529[I], 0, 0, 0, 1119092736 );
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_ACTIVATE_DEAD_UFE end", 0 );
    return;
}

/* ISPEDVALID */ void sub_44359(unknown uParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((DOES_PED_EXIST( uParam0 )) == 1)
    {
        Result = 1;
    }
    else
    {
        Result = 0;
    }
    if (Result == 1)
    {
        if ((IS_PED_DEAD( uParam0 )) == 1)
        {
            if (iParam1 == 1)
            {
                Result = 1;
            }
            else
            {
                Result = 0;
            }
        }
        else
        {
            Result = 1;
        }
    }
    return Result;
}

/* P_CREATE_DEAD_BODY */ void sub_44691(unknown uParam0, unknown uParam1)
{
    char[32] cVar4;
    char[32] cVar12;

    StrCopy( ref cVar4, "DAM_DEAD", 32 );
    switch (uParam1)
    {
        case 0:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
        case 1:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_02", 32 );
        break;
        case 2:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_03", 32 );
        break;
        case 3:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_01", 32 );
        break;
        case 4:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_02", 32 );
        break;
        case 5:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_03", 32 );
        break;
        case 6:
        StrCopy( ref cVar12, "MED_DEAD_POSE_BACK_04", 32 );
        break;
        case 7:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_01", 32 );
        break;
        case 8:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_02", 32 );
        break;
        case 9:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_03", 32 );
        break;
        case 10:
        StrCopy( ref cVar12, "MED_DEAD_POSE_RIGHT_04", 32 );
        break;
        case 11:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_01", 32 );
        break;
        case 12:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_02", 32 );
        break;
        case 13:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_03", 32 );
        break;
        case 14:
        StrCopy( ref cVar12, "MED_DEAD_POSE_LEFT_04", 32 );
        break;
        case 15:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_01", 32 );
        break;
        case 16:
        StrCopy( ref cVar12, "MED_DEAD_POSE_SIT_02", 32 );
        break;
        default:
        StrCopy( ref cVar12, "MED_DEAD_POSE_FRONT_01", 32 );
        break;
    }
    REQUEST_ANIM_DICT( ref cVar4, 0 );
    "[doubled result, dropped if not asigned]";
    while (NOT (HAS_ANIM_DICT_LOADED( ref cVar4, 0 )))
    {
        WAIT( 0 );
         /* WRITE_STRING */ sub_9136( "Waiting for anim dict to load..." );
    }
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        ENABLE_PED_PAIN( uParam0, 0 );
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP( uParam0, 1 );
        SET_PED_CORPSE_FROM_ANIM( uParam0, ref cVar4, ref cVar12, 1.00000000, 1 );
    }
    return;
}

/* P_MPM_MID_09_REGISTER */ void sub_45821()
{
     /* WRITESCRIPTLOG */ sub_739( "MF", "P_MPM_MID_09_REGISTER - START", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
    {
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_2664(), g_U2014[8], g_U2129[8] );
         /* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ sub_45946( 1 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 ), "W_PI_Clt1911_Aa_H", 0 );
        CUTSCENE_REGISTER_ISEQ( -1317042002 );
        ISEQ_REGISTER_ENTITY( -1317042002, "Max",  /* PLAYER_PED_ID */ sub_2664(), 0 );
    }
    if (NOT (IS_PED_DEAD( l_U1315[0] )))
    {
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "A_UFE_Sold_D", -244610902 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( l_U1315[0], 0, 0 ), "W_PI_Glk18_Aa_H", 0 );
    }
    if (NOT (IS_PED_DEAD( l_U1315[1] )))
    {
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "A_UFE_Sold_D^1", 215628944 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( l_U1315[1], 0, 0 ), "W_PI_Glk18_Aa_H^1", 0 );
    }
    if (NOT (IS_PED_DEAD( l_U1315[2] )))
    {
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "A_UFE_Sold_D^2", 566158225 );
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( GET_WEAPON_FROM_HAND( l_U1315[2], 0, 0 ), "W_SG_Spas_Aa_H", 0 );
    }
    if (NOT (IS_VEHICLE_DEAD( g_U3756._fU0 )))
    {
        REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE( g_U3756._fU0, "monorail", 0 );
    }
    if (NOT (IS_VEHICLE_DEAD( g_U3756._fU4 )))
    {
        REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE( g_U3756._fU4, "monorail3", 0 );
    }
    if (NOT (IS_VEHICLE_DEAD( g_U3756._fU8 )))
    {
        REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE( g_U3756._fU8, "monorail2", 0 );
    }
    if (NOT (IS_VEHICLE_DEAD( g_U3955._fU0 )))
    {
        REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE( g_U3955._fU0, "monorail2^1", 0 );
    }
    if (NOT (IS_VEHICLE_DEAD( g_U3955._fU4 )))
    {
        REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE( g_U3955._fU4, "monorail3^1", 0 );
    }
    if (NOT (IS_VEHICLE_DEAD( g_U3955._fU8 )))
    {
        REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE( g_U3955._fU8, "monorail^1", 0 );
    }
     /* WRITESCRIPTLOG */ sub_739( "MF", "P_MPM_MID_09_REGISTER - END", 0 );
    return;
}

/* P_EQUIP_PLAYER_WITH_SINGLE_HANDED_WEAPON */ void sub_45946(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )) == 0)
    {
        iVar3 = 0;
        uVar4 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 0)
        {
            iVar3 = 1;
        }
        if ((( /* IS_WEAPON_SINGLE_HANDED */ sub_46069( uVar4 )) == 0) AND ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1))
        {
            iVar3 = 1;
        }
        if (iVar3 == 1)
        {
            uVar5 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_46304();
            if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_2664(), uVar5, 0, uParam0 );
            }
        }
    }
    return;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_46069(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_46304()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_46069( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* P_MPM_MID_09_HANDLE_CUTSCENE */ void sub_47278()
{
    if (l_U90._fU52)
    {
         /* P_MPM_SETUP_WEATHER_TOD */ sub_47333();
    }
    if (NOT l_U158)
    {
        if (GET_CUTSCENE_TIME_MS() >= 12000)
        {
             /* WRITESCRIPTLOG */ sub_739( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_3_4 mood. Fade in 0 sec", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_3_4", "FINALE_01_3_4", 0.00000000, 0, 4000, -1082130432, 0 );
            l_U158 = 1;
        }
    }
    return;
}

/* P_MPM_SETUP_WEATHER_TOD */ void sub_47333()
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_SETUP_WEATHER_TOD", 0 );
     /* P_SET_WEATHER_TOD_6CLOUDY */ sub_47406();
    return;
}

/* P_SET_WEATHER_TOD_6CLOUDY */ void sub_47406()
{
    SET_WEATHER_TRANSITION_IMMEDIATE( 1 );
    SET_WEATHER_TYPE_NOW_PERSIST( "CLOUDY" );
    FREEZE_TIME_OF_DAY( 6, 0 );
    return;
}

/* CUTSYS_DEFAULT_POSTCUTSCENE */ int sub_47693()
{
    return 1;
}

/* P_MPM_MID_09_PREPARE_BLENDOUT */ void sub_47742()
{
     /* WRITESCRIPTLOG */ sub_739( "MF", "P_MPM_MID_09_PREPARE_BLENDOUT", 0 );
    if (l_U156)
    {
         /* P_T2_CLEAN_MID09_TRAMS */ sub_47837();
        STOP_SCRIPT_STREAM( g_U4950 );
    }
    else
    {
         /* F_MPM_MID_09_PRECUTSCENE_SETUP */ sub_43798();
    }
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() ))) AND (l_U156))
    {
        APPLY_PLAYER_PRELOAD_VARIATION(  /* PLAYER_PED_ID */ sub_2664(), 0 );
    }
    if ((NOT (IS_VEHICLE_DEAD( l_U316._fU4 ))) AND ((NOT (IS_VEHICLE_DEAD( l_U316._fU0 ))) AND ( /* ISPEDVALID */ sub_44359(  /* PLAYER_PED_ID */ sub_2664(), 0 ))))
    {
        if ( /* F_ISPLAYERHOLDINGRIFLE */ sub_48042())
        {
             /* F_HOLSTER_PLAYER_RIFLE */ sub_48363( 1 );
             /* P_UNHOLSTER_PLAYER_PISTOL_RIGHT */ sub_48821( 1 );
        }
         /* P_MAX_RELOAD_WEAPONS */ sub_49158();
        SET_PED_CONSUMING_AMMO(  /* PLAYER_PED_ID */ sub_2664(), 0 );
        PED_SET_ACTION_INTENTION(  /* PLAYER_PED_ID */ sub_2664(), 47, -1, 0.00000000, 0.00000000, 0.00000000 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
        {
            ATTACH_PED_TO_VEHICLE(  /* PLAYER_PED_ID */ sub_2664(), l_U316._fU4, 0, l_U159, l_U162, 360.00000000, 0, 0, 0, 1 );
        }
        if (NOT l_U156)
        {
            ISEQ_REGISTER_ENTITY( -1317042002, "Max",  /* PLAYER_PED_ID */ sub_2664(), 0 );
        }
        ISEQ_START( -1317042002 );
         /* NIS_PRE_SETUP */ sub_49488( 1, 0, 0, 1 );
         /* NIS_CREATE_STATIC_CAM */ sub_49688( ref l_U165, l_U196, l_U199, 45, 60000 );
        ATTACH_CAM_TO_VEHICLE( l_U165._fU0, l_U316._fU4, l_U196, 1 );
         /* NIS_PLAY_CAM */ sub_49951( ref l_U165 );
         /* P_MPM_ACTIVATE_UFE */ sub_50109();
        PLAY_SCRIPT_STREAM_FRONTEND( l_U1610 );
         /* P_MPM_START_GAMEPLAY */ sub_50260();
    }
    if (NOT AUDIO_IS_MUSIC_PLAYING())
    {
         /* WRITESCRIPTLOG */ sub_739( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_3_4 mood. Fade in 0 sec", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_3_4", "FINALE_01_3_4", 0.00000000, 0, 4000, -1082130432, 0 );
    }
    return;
}

/* P_T2_CLEAN_MID09_TRAMS */ void sub_47837()
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_T2_CLEAN_MID09_TRAMS", 0 );
     /* P_T2_CLEANUP_TRAM */ sub_5888( ref g_U3756 );
     /* P_T2_CLEANUP_TRAM */ sub_5888( ref g_U3955 );
    return;
}

/* F_ISPLAYERHOLDINGRIFLE */ int sub_48042()
{
    int[18] iVar2;
    unknown uVar21;
    int I;

    array(ref iVar2, 18);
    iVar2[0] = -1013714740;
    iVar2[1] = -1074756423;
    iVar2[2] = 1308526797;
    iVar2[3] = 840671040;
    iVar2[4] = 57534114;
    iVar2[5] = 724901397;
    iVar2[6] = 1992962408;
    iVar2[7] = 319712764;
    iVar2[8] = 427207702;
    iVar2[9] = -110877124;
    iVar2[10] = 1224272620;
    iVar2[11] = 10648147;
    iVar2[12] = -2075384407;
    iVar2[13] = 1478009203;
    iVar2[14] = 434544317;
    iVar2[15] = -168327769;
    iVar2[16] = -184942895;
    iVar2[17] = 514118749;
    uVar21 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 );
    if (GET_DOES_WEAPON_EXIST( uVar21 ))
    {
        for ( I = 0; I < iVar2; I++ )
        {
            if ((GET_WEAPON_TYPE( uVar21 )) == iVar2[I])
            {
                return 1;
            }
        }
    }
    return 0;
}

/* F_HOLSTER_PLAYER_RIFLE */ void sub_48363(unknown uParam0)
{
    unknown Result;

    Result = nil;
    if ( /* F_IS_WEAPON_TYPE_RIFLE */ sub_48416( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 ) ))
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 );
        SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0, uParam0 );
    }
    return Result;
}

/* F_IS_WEAPON_TYPE_RIFLE */ int sub_48416(unknown uParam0)
{
    int iVar3;
    int[25] iVar4;
    int I;

    iVar3 = GET_WEAPON_TYPE( uParam0 );
    array(ref iVar4, 25);
    iVar4[0] = 162573582;
    iVar4[1] = -1659006841;
    iVar4[2] = 879300975;
    iVar4[3] = 377623895;
    iVar4[4] = 319712764;
    iVar4[5] = 427207702;
    iVar4[6] = -110877124;
    iVar4[7] = -1013714740;
    iVar4[8] = -1074756423;
    iVar4[9] = 1308526797;
    iVar4[10] = 840671040;
    iVar4[11] = 57534114;
    iVar4[12] = 724901397;
    iVar4[13] = 1992962408;
    iVar4[14] = -1312131151;
    iVar4[15] = 434544317;
    iVar4[16] = -168327769;
    iVar4[17] = -184942895;
    iVar4[18] = 514118749;
    iVar4[19] = 1478009203;
    iVar4[20] = 1224272620;
    iVar4[21] = 10648147;
    iVar4[22] = -1787162676;
    iVar4[23] = -2075384407;
    iVar4[24] = 1001413062;
    for ( I = 0; I < iVar4; I++ )
    {
        if (iVar3 == iVar4[I])
        {
            return 1;
        }
    }
    return 0;
}

/* P_UNHOLSTER_PLAYER_PISTOL_RIGHT */ void sub_48821(unknown uParam0)
{
    if (NOT (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 ) )))
    {
        if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 1 ) ))
        {
            SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_2664(), GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 1 ), 0, uParam0 );
        }
        else if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 0 ) ))
        {
            SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_2664(), GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 0 ), 0, uParam0 );
        }
        else
        {
            SCRIPT_ASSERT( "Can't unholster weapon, no gun found in left or right holster!", 0 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "CAN'T UNHOLSTER PISTOL! Weapon already in RIGHT hand.", 0 );
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_49158()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_2664(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_2664(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* NIS_PRE_SETUP */ void sub_49488(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_2702(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_2664(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_2664() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_2664(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* NIS_CREATE_STATIC_CAM */ void sub_49688(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_3559( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref l_U39, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* NIS_PLAY_CAM */ void sub_49951(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    if (iParam0->_fU92 == 1)
    {
        SET_CAM_ACTIVE_WITH_INTERP( iParam0->_fU0, iParam0->_fU120, iParam0->_fU88, iParam0->_fU100, iParam0->_fU104 );
    }
    else
    {
        SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    }
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_3709( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* P_MPM_ACTIVATE_UFE */ void sub_50109()
{
    int I;

    for ( I = 0; I < 3; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U1315[I] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U1315[I], 0 );
            REGISTER_TARGET( l_U1315[I],  /* PLAYER_PED_ID */ sub_2664() );
            SET_PED_CAN_RAGDOLL( l_U1315[I], 1 );
        }
    }
    return;
}

/* P_MPM_START_GAMEPLAY */ void sub_50260()
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_START_GAMEPLAY start", 0 );
    SET_INSTANT_FIRE_FORCED( 1 );
    BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
    SET_CAM_VIEW_MODE( 0 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2168[8], 0.00000000, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2207[8], 0.00000000, 0 );
    SET_CAMERA_OVERRIDE( "PRONE_AIM_CAMERA", "PRONE_AIM_CAMERA", 0, 0, 0 );
    FORCE_QUICK_DEATH_CAMERAS( 1 );
     /* P_START_SP_CHALLENGES */ sub_50455();
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_START_GAMEPLAY end", 0 );
    return;
}

/* P_START_SP_CHALLENGES */ void sub_50455()
{
     /* WRITESCRIPTLOG */ sub_739( "CCB", "P_START_SP_CHALLENGES", 0 );
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDOUT */ int sub_50759()
{
    return 1;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_50814(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_739( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_51038( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 50935, 50985, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_50935()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_50985()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_51038(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_SETCUTSCENELOADEXTERIORONSKIP */ void sub_51349(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    iParam0->_fU68 = 1;
    iParam0->_fU72 = 0;
    iParam0->_fU84 = {uParam1};
    iParam0->_fU24 = 1;
    return;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_51476(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_739( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_739( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_739( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_739( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_739( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_739( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_26428( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_739( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_49488( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_49488( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_739( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_52741( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_49488( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_53121( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_53121( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_52741(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_53121(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_2702(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_2664(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_49158();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* DISABLETIMER */ void sub_53495(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_53583(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_3559( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_3709( uParam0 );
    return;
}

/* P_MPM_HANDLE_BULLET_CAM */ void sub_53703()
{
    int iVar2;

    if (NOT l_U1557)
    {
        if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_53754( ref l_U1315 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_739( "GA", "Assigning bullet cam.", 0 );
            iVar2 =  /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_53913( ref l_U1315 );
            if (NOT (iVar2 == nil))
            {
                SET_BULLET_CAM_PREF( iVar2, "ALL_LMS_01", "ALL_LMS_01", "ALL_LMS_01", "ALL_LMS_01", 0, 0, 0, 0, 0, 0, 0, 0 );
            }
            l_U1557 = 1;
        }
    }
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_53754(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_53913(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_53754( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_54201(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_54267( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_54267(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_5764( uParam0 );
            }
        }
    }
    return;
}

/* P_TRAIN_SAFETY_KILL_PLAYER */ void sub_54407(unknown uParam0)
{
    if ((NOT (IS_VEHICLE_DEAD( uParam0 ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() ))))
    {
        if (( /* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ sub_54489(  /* PLAYER_PED_ID */ sub_2664(), "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( uParam0 ) )) > 75.00000000)
        {
            PRINTSTRING( "Killing ped for not being in train." );
             /* P_KILL_PED */ sub_54660(  /* PLAYER_PED_ID */ sub_2664() );
        }
    }
    return;
}

/* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ void sub_54489(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    else
    {
        return -1.00000000;
    }
    return VDIST( uVar6, uParam1 );
}

/* P_KILL_PED */ void sub_54660(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* F_MPM_IS_BLENDOUT_FINISHED */ int sub_54855()
{
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
    {
        if ((PED_GET_ACTION_INTENTION_STATUS(  /* PLAYER_PED_ID */ sub_2664(), 47 )) == 1)
        {
            return 1;
        }
    }
    return 0;
}

/* P_MPM_SET_PLAYER_PRONE */ void sub_54953()
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_SET_PLAYER_PRONE", 0 );
    if ((NOT (IS_VEHICLE_DEAD( l_U316._fU0 ))) AND ( /* ISPEDVALID */ sub_44359(  /* PLAYER_PED_ID */ sub_2664(), 0 )))
    {
        START_PLAYER_SHOOTDODGE( 0.00000000, 0.00000000, 0.00000000, 1, 1, 0, 0 );
        PED_FINISH_ACTION_INTENTION(  /* PLAYER_PED_ID */ sub_2664(), 47 );
        SET_PLAYER_SHOOTDODGE_GET_UP_STATE( 1 );
        SET_FORCED_AIM_INTENTION_DIRECTION( l_U205 );
        SET_CAMERA_OVERRIDE( "PRONE_AIM_CAMERA", "PRONE_AIM_CAMERA", 0, 0, 0 );
        CAMERA_ENABLE_SHOULDER_MODE( 0 );
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_2702(), 0, 0 );
        REENABLE_PLAYER_INPUT( 14 );
        REENABLE_PLAYER_INPUT( 15 );
        REENABLE_PLAYER_INPUT( 16 );
        REENABLE_PLAYER_INPUT( 17 );
        REENABLE_PLAYER_INPUT( 4 );
        SET_CROSSHAIR_PULSE();
    }
    return;
}

/* NIS_RETURN_TO_GAMEPLAY_CAM */ void sub_55301(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, float fParam4, unknown uParam5)
{
    SET_CAM_SIDE_LEFT( uParam2 );
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam3, 1065353216, 0 );
    }
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( fParam4, 1065353216, 0 );
    }
    RENDER_SCRIPT_CAMS( 0, uParam1, uParam0, uParam5 );
    return;
}

/* P_MPM_TRIGGER_EXPLOSION */ void sub_55469()
{
    int I;

     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_TRIGGER_EXPLOSION", 0 );
     /* TELEPORTTRAIN */ sub_55555( l_U1066._fU0, l_U1268 );
     /* P_SET_TRAM_SPEED */ sub_5350( l_U1066._fU0, 0.00000000 );
    START_PARTICLE_FX_NON_LOOPED_AT_COORD( "FIN_Explo_Tram_S", l_U310, l_U313, 1065353216 );
    for ( I = 0; I < l_U248; I++ )
    {
         /* CREATETIMER */ sub_3559( ref l_U248[I]._fU0, l_U248[I]._fU36, 1, 0 );
         /* STARTTIMER */ sub_3709( ref l_U248[I]._fU0 );
    }
    if (NOT (IS_PED_DEAD( l_U1315[0] )))
    {
        PED_SET_ACTION_INTENTION( l_U1315[0], 1, 1000, 0.00000000, 0.00000000, 0.00000000 );
    }
    if (NOT (IS_PED_DEAD( l_U1315[1] )))
    {
        SET_PED_TO_RAGDOLL_WITH_EXPLOSION( l_U1315[1], 1000, 2000, l_U310 );
    }
    if (NOT (IS_PED_DEAD( l_U1315[2] )))
    {
        SET_PED_TO_RAGDOLL_WITH_EXPLOSION( l_U1315[2], 1000, 1500, l_U310 );
    }
    if (NOT (IS_VEHICLE_DEAD( l_U1066._fU0 )))
    {
        l_U1271[0] = START_PARTICLE_FX_LOOPED_ON_VEHICLE( "Fire_Gas_Pump_Burn_S", l_U1066._fU0, 0.00000000, 5.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1.00000000 );
        l_U1271[1] = START_PARTICLE_FX_LOOPED_ON_VEHICLE( "Fire_Gas_Pump_Burn_S", l_U1066._fU0, 0.00000000, -3.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 2.00000000 );
        l_U1271[2] = START_PARTICLE_FX_LOOPED_ON_VEHICLE( "Fire_Gas_Pump_Burn_S", l_U1066._fU4, 0.00000000, 0.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 3.00000000 );
    }
    DAMAGE_GLASS_IN_RADIUS( l_U310, 100.00000000, 0.20000000 );
    return;
}

/* TELEPORTTRAIN */ void sub_55555(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    if (NOT (IS_VEHICLE_DEAD( uParam0 )))
    {
        SET_MISSION_TRAIN_COORDS( uParam0, uParam1 );
    }
    return;
}

/* P_HANDLE_SHATTERED_GLASS_EFFECTS */ void sub_56211()
{
    int I;

    for ( I = 0; I < l_U248; I++ )
    {
        if ( /* ISTIMERDONE */ sub_3842( ref l_U248[I]._fU0 ))
        {
             /* WRITESCRIPTLOG */ sub_739( "AT", "Starting shattered glass effect!", 0 );
            START_PARTICLE_FX_NON_LOOPED_ON_VEHICLE( "FIN_RF_Glass_Window_S", l_U316._fU0, l_U248[I]._fU44, l_U248[I]._fU56, l_U248[I]._fU40 );
        }
    }
    return;
}

/* P_MPM_START_MPM */ void sub_56487()
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_START_MPM", 0 );
    if (GET_ADRENALINE_AMT() < 0.10000000)
    {
        SET_ADRENALINE_AMT( 0.10000000 );
    }
    ACTIVATE_BULLET_TIME( 0, 1065353216, 1 );
    ENABLE_MPM( 1 );
    ENABLE_ALL_ADRENALINE( 0 );
    return;
}

/* P_MPM_FINISH_MPM */ void sub_56684()
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_FINISH_MPM", 0 );
    if ( /* ISPEDVALID */ sub_44359(  /* PLAYER_PED_ID */ sub_2664(), 0 ))
    {
        SET_PED_CONSUMING_AMMO(  /* PLAYER_PED_ID */ sub_2664(), 1 );
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_2702(), 1, 0 );
        DEACTIVATE_BULLET_TIME( 0, 0 );
        ENABLE_MPM( 0 );
        ENABLE_ALL_ADRENALINE( 1 );
        CAMERA_ENABLE_SHOULDER_MODE( 1 );
        SET_CAMERA_OVERRIDE( "", "", 0, 1, 1 );
        SET_PLAYER_SHOOTDODGE_GET_UP_STATE( 0 );
        DETACH_PED(  /* PLAYER_PED_ID */ sub_2664(), 0 );
        RESET_FORCED_AIM_INTENTION_DIRECTION();
    }
    return;
}

/* F_IS_PED_PLAYING_SPEECH */ int sub_57343(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return IS_ANY_SPEECH_PLAYING( uParam0 );
    }
    return 0;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_57457(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_6822( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_57516( 0,  /* PLAYER_PED_ID */ sub_2664(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_57516( 1,  /* PLAYER_PED_ID */ sub_2664(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_57769( uParam0, uParam1, 8, 1 );
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_57516(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_57769(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_57814( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_57814(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_57901( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_57901(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_57953( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_58471( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_57953(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_58471(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_TRAIN_OPEN_CLOSE_DOORS */ void sub_58788(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    if (NOT (IS_VEHICLE_DEAD( (uParam0^) )))
    {
        FORCE_TRAIN_DOOR_OPEN_CLOSE( (uParam0^), uParam1, uParam2, 1, uParam3 );
    }
    return;
}

/* P_SPEECH_PLAY_RANDOM_MONOLOGUE */ void sub_59179(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;

     /* WRITESCRIPTLOG */ sub_739( "SA", "P_PLAY_RANDOM_MONOLOGUE", 0 );
    uVar4 = (uParam0^);
    SET_RANDOM_SEED( GET_REAL_GAME_TIMER() );
    uVar5 = GET_RANDOM_INT_IN_RANGE( 0, uVar4 );
     /* P_SPEECH_PLAY_MONOLOGUE */ sub_57457( (uParam0^)[uVar5], uParam1 );
    return;
}

/* F_ISPLAYERINTRIGGERREGION */ void sub_59347(int iParam0, unknown uParam1)
{
    int Result;
    int I;
    int J;

    Result = 0;
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_2664() )))
    {
        for ( I = 0; I < iParam0->_fU508; I++ )
        {
            if ( /* F_ISPLAYERINTRIGGERBOX */ sub_59434( iParam0->_fU0[I] ))
            {
                Result = 1;
            }
        }
    }
    if ((uParam1) AND (Result))
    {
        for ( J = 0; J < iParam0->_fU508; J++ )
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( ref iParam0->_fU0[J]._fU0, 0 );
        }
    }
    iParam0->_fU548 = 1;
    return Result;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_59434(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_59477(  /* PLAYER_PED_ID */ sub_2664(), uParam0 );
}

/* F_ISPEDINTRIGGERBOX */ int sub_59477(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* F_HOLSTERRIFLEORDUALANDDRAWPISTOL_ASYNC */ int sub_59894(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown uVar6;

    switch ((uParam2^))
    {
        case 0:
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 );
        if ( /* F_ISPLAYERHOLDINGRIFLE */ sub_48042())
        {
            (uParam0^) = 1;
            SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0, uParam3 );
            (uParam2^) = 1;
        }
        else
        {
            (uParam2^) = 2;
        }
        break;
        case 1:
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 );
        if (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
        {
            uVar6 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 2 );
            if (GET_DOES_WEAPON_EXIST( uVar6 ))
            {
                (uParam2^) = 4;
            }
        }
        break;
        case 2:
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar6 ))
        {
            (uParam1^) = 1;
            SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 1, uParam3 );
            (uParam2^) = 3;
        }
        else
        {
            (uParam2^) = 4;
        }
        break;
        case 3:
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 1, 0 );
        if (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
        {
            (uParam2^) = 4;
        }
        break;
        case 4:
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 );
        if (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
        {
            uVar6 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 0 );
            if (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
            {
                uVar6 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_2664(), 1 );
            }
            SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_2664(), uVar6, 0, uParam3 );
        }
        (uParam2^) = 5;
        break;
        case 5:
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_2664(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar6 ))
        {
            (uParam2^) = 6;
            return 1;
        }
        break;
    }
    return 0;
}

/* P_T2_SET_1403_TRAM */ void sub_60499(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_739( "GA", "P_T2_SET_1403_TRAM", 0 );
    g_U4154._fU0 = iParam0->_fU0;
    g_U4154._fU4 = iParam0->_fU4;
    g_U4154._fU8 = iParam0->_fU8;
    return;
}

/* P_MPM_RELEASE_ASSETS */ void sub_60748()
{
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_RELEASE_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_60829( ref l_U1586, ref g_U1030 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_62059( ref l_U1603, ref g_U1247 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_62487( -1317042002, ref g_U1368 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_62892( "LEVEL_S_FIN_CP_08", ref g_U1429 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_63265( "SCRIPT_MISSION\S_AIRPORT_TRAM", ref g_U1950 );
     /* WRITESCRIPTLOG */ sub_739( "SA", "P_MPM_RELEASE_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_60829(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_60902( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_60902(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_61046( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_61046(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_62059(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_62133( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_62133(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_61046( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_62487(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_61046( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_62892(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_61046( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_63265(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_61046( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

