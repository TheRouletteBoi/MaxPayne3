void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U55 = -1;
    l_U56 = {64536, 64536, 64536};
    l_U78 = 0;
    l_U79 = 0;
    l_U80 = 1500;
    l_U126 = 0;
    l_U127 = 1;
    l_U128 = 1;
    l_U129 = 0;
    l_U175 = 0;
    l_U177 = -1;
    l_U178 = 500;
    l_U179 = 1500;
    l_U182 = {37.76000000, -127.31800000, -4.92500000};
    l_U203 = {46.88000000, -140.22000000, -0.85000000};
    l_U232 = {18.39700000, -148.99900000, -4.92500000};
    l_U250 = {22.62000000, -154.95000000, 3.35000000};
    l_U270 = {44.48900000, -140.60400000, -4.92500000};
    l_U288 = {40.09000000, -152.05000000, 1.64000000};
    l_U1208 = 0;
     /* WRITESCRIPTLOG */ sub_569( "AT", "Script s_air_BagProcessing.sc is starting up...", 0 );
     /* P_SETUP_ASSET_ARRAYS */ sub_687();
    l_U126 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_1145();
        if (l_U129 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_10691();
        }
         /* P_BP_DEBUG_TUNING_WIDGET */ sub_63797();
        WAIT( 0 );
    }
     /* P_CLEANUP_BAGPROCESS */ sub_3791();
     /* P_RELEASE_BAGPROCESS_ASSETS */ sub_64009();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_air_BagProcessing" );
     /* WRITESCRIPTLOG */ sub_569( "AT", "Script s_air_BagProcessing.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_569(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_SETUP_ASSET_ARRAYS */ void sub_687()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_SETUP_ASSET_ARRAYS", 0 );
    l_U1138[0] = 1019428403;
    l_U1138[1] = 1234657973;
    l_U1138[2] = g_U2390;
    l_U1138[3] = g_U2391;
    l_U1138[4] = g_U2392;
    l_U1138[5] = -1356105858;
    l_U1138[6] = 2074246725;
    l_U1138[7] = -1489681637;
    l_U1138[8] = 973119132;
    l_U1138[9] = -1120360638;
    l_U1138[10] = 806417555;
    l_U1138[11] = -429531874;
    l_U1138[12] = 39909470;
    l_U1138[13] = 834510946;
    l_U1138[14] = 1908100825;
    l_U1138[15] = 1204172069;
    l_U1138[16] = -1854748539;
    l_U1138[17] = 322522124;
    l_U1138[18] = -617923998;
    l_U1138[19] = 236492249;
    l_U1138[20] = -1804361075;
    l_U1138[21] = 1331861612;
    l_U1138[22] = -1441123717;
    l_U1138[23] = -1809700906;
    l_U1138[24] = -1434588675;
    l_U1138[25] = g_U823;
    l_U1138[26] = g_U824;
    l_U1138[27] = 431210337;
    return;
}

/* P_HANDLE_FAILURE */ void sub_1145()
{
    if (g_U830 == 1)
    {
        switch (l_U129)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_1347()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
            {
                l_U129 = 1;
                 /* WRITESCRIPTLOG */ sub_569( "AT", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_1865())
            {
                l_U129 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_1925( 0 )) == 1)
            {
                l_U129 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
            {
                l_U129 = 3;
                 /* WRITESCRIPTLOG */ sub_569( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_569( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1284() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1284(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1246() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1246(), 0 );
                }
            }
            if ((g_U861[2]._fU40 != 4) AND (g_U861[2]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_569( "CR", "Shutting down script for DESERTED_HALLWAYS.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_3672( ref g_U861[2] );
                SET_EXITFLAG_FOR_SCRIPT( g_U861[2]._fU32 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
             /* P_CLEANUP_BAGPROCESS */ sub_3791();
            l_U129 = 4;
             /* WRITESCRIPTLOG */ sub_569( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_569( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_5932( ref l_U90,  /* PLAYER_PED_ID */ sub_1246() );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "MILO_ap_bgsort", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "MILO_ap_bgsort", 0 ), GET_HASH_KEY( ref g_U2246 ) );
            l_U128 = 0;
            l_U129 = 5;
             /* WRITESCRIPTLOG */ sub_569( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_569( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U126 = 1;
            l_U129 = 0;
             /* WRITESCRIPTLOG */ sub_569( "AT", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_1246()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_1284() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_1284()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_1347()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_1246(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_1284(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_1284(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1246() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_1246(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_1865()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_1925(int iParam0)
{
    iParam0 = 1;
    switch (l_U79)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_2007( ref l_U81 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
            {
                l_U80 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_2141( ref l_U81, l_U80, 1, 1 );
             /* STARTTIMER */ sub_2291( ref l_U81 );
        }
        if ( /* ISTIMERDONE */ sub_2424( ref l_U81 ))
        {
             /* WRITESCRIPTLOG */ sub_569( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1284() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1284(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U79 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U79 = 2;
            }
            else
            {
                l_U79 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_569( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_2925();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_569( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_2925();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_2007(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_2141(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_2291(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2424(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_2925()
{
     /* WRITESCRIPTLOG */ sub_569( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_3000( ref l_U81 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_1284() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1284(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U78 = 0;
    l_U78 = l_U78;
    l_U79 = 0;
    return;
}

/* RESETTIMER */ void sub_3000(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_3672(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_BAGPROCESS */ void sub_3791()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_CLEANUP_BAGPROCESS", 0 );
    ISEQ_TERMINATE( 1393495999 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3879( 1393495999, ref g_U1368 );
    ISEQ_TERMINATE( -1853239632 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3879( -1853239632, ref g_U1368 );
    if (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "FINALE_ONESHOT_01" ))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
     /* CLEANOBJECT */ sub_5012( l_U307 );
     /* CLEANOBJECT */ sub_5012( l_U308 );
     /* CLEANOBJECT */ sub_5012( l_U309 );
     /* CLEANOBJECT */ sub_5012( l_U181 );
     /* CLEANOBJECT */ sub_5012( l_U231 );
     /* CLEANOBJECT */ sub_5012( l_U269 );
     /* CLEANOBJECTARRAY */ sub_5120( ref l_U194 );
     /* CLEANOBJECTARRAY */ sub_5120( ref l_U244 );
     /* CLEANOBJECTARRAY */ sub_5120( ref l_U282 );
     /* CLEANPEDARRAY */ sub_5218( ref l_U1111 );
     /* CLEANPEDARRAY */ sub_5218( ref l_U533 );
     /* CLEANPED */ sub_5268( l_U716 );
     /* CLEANPEDARRAY */ sub_5218( ref l_U731 );
     /* CLEANPLACEMENTARRAY */ sub_5404( ref l_U1039 );
     /* CLEANPLACEMENT */ sub_5459( g_U715._fU0 );
     /* CLEANPLACEMENT */ sub_5459( g_U733._fU0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_5566( ref l_U1128 );
     /* P_STOP_SP_CHALLENGES */ sub_5659();
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_3879(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4017( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_4017(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* CLEANOBJECT */ void sub_5012(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANOBJECTARRAY */ void sub_5120(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANOBJECT */ sub_5012( (uParam0^)[I] );
    }
    return;
}

/* CLEANPEDARRAY */ void sub_5218(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_5268( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_5268(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_5404(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_5459( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_5459(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_5566(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* P_STOP_SP_CHALLENGES */ void sub_5659()
{
     /* WRITESCRIPTLOG */ sub_569( "CCB", "P_STOP_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_569( "CCB", "Stopping the Finale_Baggage context...", 0 );
    END_CONTEXT( "Finale_Baggage" );
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_5932(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_569( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_6151( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_7315( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7629( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8108( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7629( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8108( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7629( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8108( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8424( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8108( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8424( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8108( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_8996( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_9198( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1246(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_569( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_6151(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6213( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_6213(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_7315(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_7629(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_8033( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_8033(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_8108(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_8424(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_8033( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_8996(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_9198(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6213( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_9296( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_9296(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_10691()
{
    int iVar2;
    int I;
    int iVar4;

    iVar2 = l_U126;
     /* P_HANDLE_SP_CHALLENGES */ sub_10726();
    switch (l_U126)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_569( "AT", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_11810();
         /* P_INITIALIZE_SP_CHALLENGES */ sub_12127();
         /* P_SET_STATIC_DATA */ sub_12730();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U126 = 2;
         /* WRITESCRIPTLOG */ sub_569( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_569( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_BAGPROCESS_PERSISTENT_ASSETS */ sub_16541();
         /* P_REQUEST_BAGPROCESS_NONPERSISTENT_ASSETS */ sub_23546();
        l_U126 = 3;
         /* WRITESCRIPTLOG */ sub_569( "AT", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_30477( ref g_U1368 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_30086( ref g_U1429 )) AND (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_29712( ref g_U1950 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_29310( ref g_U1247 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_28913( ref g_U1030 ))))))
        {
            g_U831[1] = 1;
            if ((NOT l_U90._fU0) AND ((g_U829 == 0) || (g_U829 == 1)))
            {
                l_U126 = 4;
                 /* WRITESCRIPTLOG */ sub_569( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
            }
            else
            {
                l_U126 = 6;
                 /* WRITESCRIPTLOG */ sub_569( "AT", "eCheckpointState = CP_PRE_BINK_SETUP", 0 );
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_569( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        if (g_U829 != 0)
        {
            l_U128 = 0;
        }
        g_U846[1] = 1;
        if (( /* HAS_SAVEFILE_LOADED */ sub_31151( ref l_U90 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_8424(  /* PLAYER_PED_ID */ sub_1246(), 456708483, 21, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7629(  /* PLAYER_PED_ID */ sub_1246(), -1464892298, 1, 100, 0 );
            l_U126 = 5;
             /* WRITESCRIPTLOG */ sub_569( "CR", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U126 = 6;
             /* WRITESCRIPTLOG */ sub_569( "CR", "eCheckpointState = CP_PRE_BINK_SETUP", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1246(), 1 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1246(), 0, 0 ) )))
            {
                g_U830 = 1;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_31656( ref l_U90, g_U830,  /* PLAYER_PED_ID */ sub_1246(), g_U2014[1], g_U2129[1], g_U2168[1], g_U2207[1], 0 );
                l_U126 = 6;
                 /* WRITESCRIPTLOG */ sub_569( "AT", "eCheckpointState = CP_PRE_BINK_SETUP", 0 );
            }
        }
        break;
        case 6:
        if (l_U127)
        {
            l_U689 = 1;
            l_U1115 = 1;
             /* P_BP_LUGGAGE_BELTS_CREATE */ sub_36337();
        }
        if ( /* F_SETUP_BP_VIG01_PEDS */ sub_37878())
        {
            if ( /* F_SETUP_BP_WAVE1_ENEMIES */ sub_39622())
            {
                if (l_U128)
                {
                    if (CUTSCENE_IS_LOADED( "14_01_finale_concat" ))
                    {
                        l_U126 = 7;
                         /* WRITESCRIPTLOG */ sub_569( "GA", "eCheckpointState = CP_HANDLE_CUTSCENES", 0 );
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_569( "GA", "Waiting for 14_01_finale_concat to load.", 0 );
                    }
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_569( "AT", "eCheckpointState = CP_HANDLE_CUTSCENES", 0 );
                    l_U126 = 7;
                }
            }
        }
        break;
        case 7:
        if (l_U127)
        {
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_48244( ref l_U1042, "14_01_finale_concat", 41617, 41953, 42380, 42953, 43011, 46899, 250, 0 );
             /* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ sub_48791( ref l_U1042, "MILO_ap_bgsort", ref g_U2246 );
            if (l_U128)
            {
                l_U1042._fU4 = 1;
            }
            else
            {
                l_U1042._fU4 = 7;
            }
             /* P_CREATE_PLACEMENTS */ sub_48919();
             /* P_BP_SETUP_DOORS */ sub_50224();
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_51850( ref l_U1042 ))
        {
            if (g_U830 != 1)
            {
                g_U830 = 1;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_31656( ref l_U90, g_U830,  /* PLAYER_PED_ID */ sub_1246(), g_U2014[1], g_U2129[1], g_U2168[1], g_U2207[1], 0 );
            }
             /* P_SETUP_BP_STAIRWELL_ENEMY */ sub_53860();
             /* STARTTIMER */ sub_2291( ref l_U185 );
             /* STARTTIMER */ sub_2291( ref l_U235 );
             /* STARTTIMER */ sub_2291( ref l_U273 );
             /* P_START_SP_CHALLENGES */ sub_54214();
             /* WRITESCRIPTLOG */ sub_569( "AT", "eCheckpointState = CP_GAMEPLAY", 0 );
            l_U126 = 8;
        }
        break;
        case 8:
        if (l_U127)
        {
            l_U775 = 1;
             /* P_DEACTIVATEPED */ sub_39401( l_U533[8] );
             /* P_DEACTIVATEPED */ sub_39401( l_U533[9] );
             /* P_DEACTIVATEPED */ sub_39401( l_U533[10] );
            RESET_FORCED_AIM_INTENTION_DIRECTION();
            RESET_FORCED_FORWARD_DIRECTION();
            g_U861[2]._fU36 = 1;
             /* STARTTIMER */ sub_2291( ref l_U707 );
        }
         /* P_SNAP_DOOR_SHUT */ sub_54576();
        if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( l_U506._fU0, l_U506._fU4 ) ))
        {
            if (DOOR_GET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( l_U506._fU0, l_U506._fU4 ) ))
            {
                DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( l_U506._fU0, l_U506._fU4 ), 0 );
            }
        }
        if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( l_U499._fU0, l_U499._fU4 ) ))
        {
            if (DOOR_GET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( l_U499._fU0, l_U499._fU4 ) ))
            {
                DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( l_U499._fU0, l_U499._fU4 ), 0 );
            }
        }
         /* P_BP_HANDLE_LUGGAGE_CREATION */ sub_55284();
         /* P_BP_HANDLE_LUGGAGE_CLEANUP */ sub_56129();
         /* P_HANDLE_PLAYER_DEATH_IN_BAGGAGE_GATES */ sub_56338();
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_56625( ref l_U533, -1054867456, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_56625( ref l_U731, -1054867456, 0, 1 );
         /* P_PED_Z_SAFETY_CHECK */ sub_56691( l_U716, -1054867456, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_56625( ref l_U1111, -1054867456, 0, 1 );
        if ((l_U707._fU20) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))))
        {
            if ((IS_PED_SHOOTING(  /* PLAYER_PED_ID */ sub_1246() )) || ( /* ISTIMERDONE */ sub_2424( ref l_U707 )))
            {
                 /* P_BP_WAVE1_GROUND_ENEMIES_FIRE_BLANKS */ sub_46669( 0 );
                 /* DISABLETIMER */ sub_56936( ref l_U707 );
            }
        }
        if (l_U775 != 4)
        {
             /* F_SETUP_BP_UPSTAIRS_REINFORCEMENTS */ sub_56993();
        }
        if (l_U850._fU64)
        {
             /* P_HANDLE_VIG01_CLEANUP */ sub_57833();
            if ((NOT l_U1117) AND (((l_U871._fU64) || ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_46960( ref l_U871, 0 ))) || (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_58000( ref l_U1111 )) == 1)))
            {
                 /* P_ACTIVATE_BAGGAGE_WAVE1_CATWALK_ENEMY */ sub_58693();
                l_U1117 = 1;
            }
        }
        if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_59127( l_U829 )))
        {
            if (NOT l_U705)
            {
                if ((IS_PED_DEAD( l_U533[3] )) AND ((IS_PED_DEAD( l_U533[2] )) AND (IS_PED_DEAD( l_U533[1] ))))
                {
                     /* P_ACTIVATE_BAGGAGE_WAVE1_CATWALK_REINFORCEMENTS */ sub_59252();
                    l_U705 = 1;
                }
            }
        }
        if ((NOT l_U730) AND ((NOT l_U934._fU64) AND ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_46960( ref l_U892, 0 ))))
        {
             /* P_ACTIVATE_BAGGAGE_STAIRWELL_ENEMY */ sub_59510();
            l_U730 = 1;
        }
        if (l_U775 == 4)
        {
            if (((NOT l_U913._fU64) AND ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_46960( ref l_U934, 0 ))) || ((NOT l_U934._fU64) AND ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_46960( ref l_U913, 0 ))))
            {
                if (NOT (IS_PED_DEAD( l_U716 )))
                {
                     /* WRITESCRIPTLOG */ sub_569( "AT", "Removed lock to cover on pi_BP_Stairwell", 0 );
                }
                l_U175 = 1;
                if ( /* F_ISPLAYERINTRIGGERBOX */ sub_59127( l_U913 ))
                {
                     /* P_SPAWN_CONTROL_BOOTH_ENEMY */ sub_60260();
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_569( "AT", "Player coming from ladder. Cleaning control booth guy.", 0 );
                     /* CLEANPED */ sub_5268( l_U533[8] );
                }
                for ( I = 0; I < l_U533; I++ )
                {
                     /* P_REMOVEALLTETHERSFROMPED */ sub_60603( l_U533[I] );
                }
                if (NOT l_U705)
                {
                    if (IS_PED_DEAD( l_U533[0] ))
                    {
                         /* P_ACTIVATE_BAGGAGE_WAVE1_CATWALK_REINFORCEMENTS */ sub_59252();
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_569( "AT", "Original catwalk enemy still alive. Skipping reinforcements.", 0 );
                         /* CLEANPED */ sub_5268( l_U533[4] );
                         /* CLEANPED */ sub_5268( l_U533[5] );
                    }
                     /* WRITESCRIPTLOG */ sub_569( "AT", "No need for additional reinforcements. Cleaning [9] and [10].", 0 );
                     /* CLEANPED */ sub_5268( l_U533[9] );
                     /* CLEANPED */ sub_5268( l_U533[10] );
                    l_U705 = 1;
                }
                else if ((IS_PED_DEAD( l_U533[5] )) AND ((IS_PED_DEAD( l_U533[4] )) AND (IS_PED_DEAD( l_U533[0] ))))
                {
                     /* WRITESCRIPTLOG */ sub_569( "AT", "All peds on catwalk are dead!", 0 );
                     /* P_SPAWN_ADDITIONAL_UPSTAIRS_ENEMIES */ sub_61045();
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_569( "AT", "No need for reinforcements. Cleaning [9] and [10].", 0 );
                     /* CLEANPED */ sub_5268( l_U533[9] );
                     /* CLEANPED */ sub_5268( l_U533[10] );
                }
            }
        }
        else if (( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_46960( ref l_U934, 0 )) || ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_46960( ref l_U913, 0 )))
        {
            SCRIPT_ASSERT( "Player made it upstairs before enemies were spawned! Check your script!", 0 );
        }
        if ((l_U934._fU64) || (l_U913._fU64))
        {
             /* P_HANDLE_REINFORCEMENT_WAVES */ sub_61631();
        }
        if (l_U913._fU64)
        {
            if (NOT l_U706)
            {
                if (( /* F_ISPLAYERINTRIGGERBOX */ sub_59127( l_U976 )) || ( /* F_ISPLAYERINTRIGGERBOX */ sub_59127( l_U997 )))
                {
                    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))) AND (NOT (IS_PED_DEAD( l_U533[8] ))))
                    {
                         /* WRITESCRIPTLOG */ sub_569( "AT", "Unlocking control booth guy.", 0 );
                        SET_PED_COMBAT_ATTRIBUTES( l_U533[8], 8192, 1 );
                        SET_PED_FLAG_LOCK_TO_COVER( l_U533[8], 0 );
                        TASK_COMBAT_PED( l_U533[8],  /* PLAYER_PED_ID */ sub_1246() );
                    }
                    l_U706 = 1;
                }
            }
        }
        iVar4 = ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_58000( ref l_U533 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_58000( ref l_U731 ));
        if (l_U730)
        {
            if (NOT (IS_PED_DEAD( l_U716 )))
            {
                iVar4++;
            }
        }
        if ((NOT ((l_U934._fU64) || (l_U913._fU64))) AND ( /* F_CAN_PLAYER_HELP_TRIGGER */ sub_62950()))
        {
            if ((NOT l_U1189._fU16) AND (NOT l_U1189._fU20))
            {
                 /* STARTTIMER */ sub_2291( ref l_U1189 );
            }
            if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_59127( l_U829 )))
            {
                if ( /* ISTIMERDONE */ sub_2424( ref l_U1189 ))
                {
                    ;
                }
            }
        }
        if (iVar4 == 1)
        {
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_63234( ref l_U533 );
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_63234( ref l_U731 );
            if (NOT (IS_PED_DEAD( l_U716 )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( l_U716 )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( l_U716, 1 );
                }
            }
        }
        if (NOT l_U800)
        {
            if (iVar4 == 0)
            {
                 /* WRITESCRIPTLOG */ sub_569( "GA", "Playing audio music one shot FINALE_ONESHOT_01", 0 );
                AUDIO_MUSIC_PLAY_ONESHOT();
                l_U800 = 1;
            }
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_46960( ref l_U1018, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_569( "AT", "Triggering checkpoint end!", 0 );
            g_U846[2] = 1;
            l_U126 = 9;
        }
        break;
        case 9:
        if ((NOT HAS_CUTSCENE_FINISHED()) || (g_U830 == 2))
        {
             /* WRITESCRIPTLOG */ sub_569( "AT", "eCheckpointState = CP_FINISHED", 0 );
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U126 = 0;
             /* WRITESCRIPTLOG */ sub_569( "AT", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
    }
    if (l_U126 != iVar2)
    {
        l_U127 = 1;
    }
    else
    {
        l_U127 = 0;
    }
    return;
}

/* P_HANDLE_SP_CHALLENGES */ void sub_10726()
{
    switch (l_U1167)
    {
        case 0:
         /* P_CREATETRIGGERBOX */ sub_10876( ref l_U1168, "TRIGGER_RADIATION_DAMAGE", 37.01000000, -139.53000000, -2.40000000, 2.00000000, 3.70000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
         /* WRITESCRIPTLOG */ sub_569( "CCB", "eRadiationDamage - STATE_CHALLENGE_IDLE", 0 );
        l_U1167 = 1;
        break;
        case 1:
        if (l_U126 >= 8)
        {
            if ( /* F_ISPEDINTRIGGERBOX */ sub_11066(  /* PLAYER_PED_ID */ sub_1246(), l_U1168 ))
            {
                if (( /* F_HAS_PED_BEEN_KILLED_BY_PED */ sub_11231( l_U716,  /* PLAYER_PED_ID */ sub_1246() )) || (( /* F_HAS_ANY_PED_IN_ARRAY_BEEN_KILLED_BY_PED */ sub_11152( ref l_U731,  /* PLAYER_PED_ID */ sub_1246() )) || ( /* F_HAS_ANY_PED_IN_ARRAY_BEEN_KILLED_BY_PED */ sub_11152( ref l_U533,  /* PLAYER_PED_ID */ sub_1246() ))))
                {
                    if (SCRIPT_VAR_HASH_EXISTS( -747971530 ))
                    {
                         /* WRITESCRIPTLOG */ sub_569( "CCB", "The player killed a ped while in the trigger...", 0 );
                        SCRIPT_VAR_HASH_SET_INT( -747971530, 1 );
                    }
                    else
                    {
                         /* WRITESCRIPTLOG */ sub_569( "CCB", "The RadiationDamage script variable is NOT valid!!!", 0 );
                    }
                     /* WRITESCRIPTLOG */ sub_569( "CCB", "eRadiationDamage - STATE_CHALLENGE_COMPLETE", 0 );
                    l_U1167 = 2;
                }
            }
        }
        break;
        case 2: break;
    }
    return;
}

/* P_CREATETRIGGERBOX */ void sub_10876(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* F_ISPEDINTRIGGERBOX */ int sub_11066(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* F_HAS_ANY_PED_IN_ARRAY_BEEN_KILLED_BY_PED */ int sub_11152(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ( /* F_HAS_PED_BEEN_KILLED_BY_PED */ sub_11231( (uParam0^)[I], uParam1 ))
        {
            return 1;
        }
    }
    return 0;
}

/* F_HAS_PED_BEEN_KILLED_BY_PED */ int sub_11231(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        if (DOES_PED_EXIST( uParam0 ))
        {
            if (IS_PED_DEAD( uParam0 ))
            {
                if (HAS_PED_BEEN_DAMAGED_BY_PED( uParam0, uParam1, 0 ))
                {
                    return 1;
                }
            }
        }
    }
    return 0;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_11810()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U127 = 1;
    l_U1069 = 0;
    l_U1070 = 0;
    l_U176 = 1;
    l_U705 = 0;
    l_U730 = 0;
    l_U1117 = 0;
    l_U1127 = 0;
    l_U180 = 0;
    l_U706 = 0;
    l_U800 = 0;
    l_U175 = 0;
     /* CREATETIMER */ sub_2141( ref l_U185, 8000, 1, 0 );
     /* CREATETIMER */ sub_2141( ref l_U235, 8000, 1, 0 );
     /* CREATETIMER */ sub_2141( ref l_U273, 8000, 1, 0 );
     /* CREATETIMER */ sub_2141( ref l_U801, 100, 1, 0 );
     /* CREATETIMER */ sub_2141( ref l_U801, 100, 1, 0 );
     /* CREATETIMER */ sub_2141( ref l_U801, 100, 1, 0 );
     /* CREATETIMER */ sub_2141( ref l_U707, 3000, 1, 0 );
     /* CREATETIMER */ sub_2141( ref l_U1118, 6000, 1, 0 );
     /* CREATETIMER */ sub_2141( ref l_U1189, 3000, 1, 0 );
    l_U689 = 0;
    l_U690 = 0;
    l_U775 = 0;
    l_U776 = 0;
    l_U1115 = 0;
    l_U1116 = 0;
    return;
}

/* P_INITIALIZE_SP_CHALLENGES */ void sub_12127()
{
     /* WRITESCRIPTLOG */ sub_569( "CCB", "P_INITIALIZE_SP_CHALLENGES", 0 );
    l_U1167 = 0;
    if (NOT (SCRIPT_VAR_HASH_EXISTS( -747971530 )))
    {
         /* WRITESCRIPTLOG */ sub_569( "CCB", "Creating the RadiationDamage script variable...", 0 );
        SCRIPT_VAR_HASH_ADD_INT( -747971530 );
        DISPLAYF( "[CCB] ### The current RadiationDamage value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -747971530 ) );
        if (SCRIPT_VAR_HASH_EXISTS( -747971530 ))
        {
             /* WRITESCRIPTLOG */ sub_569( "CCB", "The RadiationDamage script variable was successfully created...", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_569( "CCB", "The RadiationDamage script variable is NOT valid!!!", 0 );
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_569( "CCB", "The RadiationDamage script variable was already created...", 0 );
        SCRIPT_VAR_HASH_SET_INT( -747971530, 0 );
        DISPLAYF( "[CCB] ### The current RadiationDamage value is: {} ###", 1, 513, SCRIPT_VAR_HASH_GET_INT( -747971530 ) );
    }
    return;
}

/* P_SET_STATIC_DATA */ void sub_12730()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_SET_STATIC_DATA", 0 );
    l_U130[1] = {42.35000000, -152.21000000, 2.69000000};
    l_U130[0] = {33.76000000, -152.52000000, 2.68000000};
    l_U130[2] = {49.38000000, -130.00000000, 1.71000000};
    l_U130[4] = {30.80000000, -105.46000000, 1.01000000};
    l_U130[3] = {42.56000000, -111.85000000, 2.64000000};
    l_U130[5] = {11.40000000, -130.73000000, 2.63000000};
    l_U149[1] = -18.00000000;
    l_U149[0] = -18.00000000;
    l_U149[2] = 94.00000000;
    l_U149[4] = -170.00000000;
    l_U149[3] = -170.00000000;
    l_U149[5] = -67.00000000;
    l_U781[1] = {42.49000000, -148.57000000, 2.66000000};
    l_U781[0] = {33.73000000, -148.22000000, 2.66000000};
    l_U781[2] = {45.18000000, -130.62000000, 1.67000000};
    l_U781[4] = {34.99000000, -115.76000000, 2.69000000};
    l_U781[3] = {42.52000000, -116.06000000, 2.69000000};
    l_U781[5] = {24.60000000, -130.33000000, 2.60000000};
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U310, "TB_BELT1_START", 47.07000000, -139.60000000, -1.60000000, 3.06000000, 2.65000000, 2.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U394, "TB_BELT1_END", 27.45000000, -153.00000000, -0.11000000, 3.06000000, 2.65000000, 2.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U331, "TB_BELT2_START", 22.74000000, -159.92000000, 2.52000000, 3.06000000, 2.65000000, 2.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U415, "TB_BELT2_END", 14.38000000, -124.50000000, -1.09000000, 3.06000000, 2.65000000, 2.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U352, "TB_BELT3_START", 39.53000000, -152.18000000, -0.11000000, 3.06000000, 2.65000000, 2.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U436, "TB_BELT3_END", 46.63000000, -126.85000000, -1.74000000, 3.06000000, 2.65000000, 2.50000000, 0.00000000, 0.00000000, -17.16000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U373, "TB_BELT4_START", 18.39000000, -148.44000000, -2.49000000, 3.06000000, 2.65000000, 2.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U1018, "TB_END_BAGHANDLE", 17.40000000, -130.51000000, 2.59000000, 4.31000000, 2.51000000, 2.27000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U850, "TB_TRIGGER_WAVE1_CATWALK", 30.87000000, -148.22000000, -2.51000000, 19.95000000, 2.65000000, 3.94000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U871, "TB_TRIGGER_WAVE1_GROUND", 32.24000000, -146.15000000, -2.47000000, 23.35000000, 2.81000000, 3.90000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U892, "TB_TRIGGER_STAIRS_ENEMY", 32.12000000, -105.54000000, 0.83000000, 3.12000000, 6.08000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U913, "TB_TRIGGER_FROM_STAIRS1", 36.81000000, -115.67000000, 2.55000000, 2.89000000, 8.06000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U934, "TRIGGER_REINFORCEMENTS_FROM_LADDER", 36.81000000, -148.38000000, 2.55000000, 2.89000000, 8.06000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U955, "TB_SIDE_WITH_STAIRS", 33.02000000, -117.20000000, -2.50000000, 26.78000000, 24.90000000, 10.22000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U976, "TB_SIDE_WITH_LADDER", 33.02000000, -140.80000000, -2.50000000, 20.34000000, 24.90000000, 10.22000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U997, "TB_CONTROL_BOOTH", 22.72000000, -129.40000000, 1.94000000, 27.61000000, 7.68000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_10876( ref l_U829, "TB_CHECK_ENEMIES_UPSTAIRS", 33.02000000, -130.37000000, 1.58000000, 40.96000000, 24.90000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14582( ref l_U703, "TETH_LOWER_ENEMIES", 32.71000000, -121.56000000, -2.49000000, 14.13000000, 23.34000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14582( ref l_U828, "TETH_UPSTAIRS", 33.02000000, -130.37000000, 1.58000000, 40.96000000, 24.90000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_14582( ref l_U704, "TETH_MIDDLE_CATWALK", 35.18000000, -130.31000000, 1.46000000, 2.89000000, 17.96000000, 3.50000000, 0.00000000, 0.00000000, -90.00000000, 1 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U1071[0], 41.57000000, -129.98000000, 1.67000000, 90.00000000, -637267772, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U1071[1], 38.68000000, -131.18000000, 1.67000000, 90.00000000, -1633470976, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U1071[2], 38.64000000, -130.26000000, 1.67000000, 90.00000000, 59173978, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U545[0], 19.40000000, -130.30000000, 2.60000000, -129.00000000, -161827325, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U545[1], 34.07000000, -112.37000000, -2.36000000, 193.73910000, -1952024941, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U545[2], 34.12000000, -106.02000000, 1.01000000, 193.73910000, 691321937, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U545[3], 30.46000000, -107.75000000, 1.02000000, 193.73910000, 604663975, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U545[4], 6.24000000, -130.69000000, 2.63000000, -95.00000000, -161827325, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U545[5], 16.28000000, -130.81000000, 2.63000000, -95.00000000, 691321937, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U545[6], 25.96000000, -126.44000000, -2.39000000, 193.73910000, 691321937, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U545[7], 37.06000000, -125.33000000, -2.39000000, 193.73910000, 604663975, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U545[8], 23.44000000, -128.78000000, 2.60000000, -120.00000000, -1952024941, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U545[9], 23.74000000, -130.50000000, 2.60000000, -120.00000000, -161827325, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U545[10], 23.17000000, -129.75000000, 2.60000000, -120.00000000, 691321937, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U717, 42.10000000, -134.21000000, 1.69000000, 185.43540000, 604663975, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U735[0], l_U130[1] + (vector( 0.00000000, 0.01000000, 0.00000000)), l_U149[1], 604663975, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U735[1], l_U130[1] + (vector( 0.00000000, 0.02000000, 0.00000000)), l_U149[1], 691321937, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_14846( ref l_U735[2], l_U130[1] + (vector( 0.00000000, 0.03000000, 0.00000000)), l_U149[1], -161827325, 7, 3, 2, 0, 0 );
    l_U691[0] = -862236369;
    l_U691[1] = -1013714740;
    l_U691[2] = -1013714740;
    l_U691[3] = -862236369;
    l_U691[4] = -1013714740;
    l_U691[5] = -1013714740;
    l_U691[6] = -1013714740;
    l_U691[7] = -1013714740;
    l_U691[8] = -862236369;
    l_U691[9] = -1013714740;
    l_U691[10] = -862236369;
    l_U777[0] = -1013714740;
    l_U777[1] = -862236369;
    l_U777[2] = -1013714740;
    l_U206[0] = {37.01000000, -146.59000000, -1.49000000};
    l_U206[1] = {37.03000000, -142.29000000, -1.49000000};
    l_U206[2] = {37.04000000, -132.17000000, -1.49000000};
    l_U206[3] = {34.51000000, -130.67000000, -1.49000000};
    l_U206[4] = {31.61000000, -132.35000000, -1.49000000};
    l_U206[5] = {30.03000000, -135.25000000, -1.49000000};
    l_U206[6] = {29.55000000, -138.20000000, -1.49000000};
    l_U206[7] = {30.34000000, -140.44000000, -1.49000000};
    l_U253[0] = {22.68000000, -151.19000000, 2.49000000};
    l_U253[1] = {22.61000000, -144.34000000, 1.92000000};
    l_U253[2] = {22.66000000, -140.57000000, 1.75000000};
    l_U253[3] = {22.57000000, -135.34000000, 0.16000000};
    l_U253[4] = {22.61000000, -132.07000000, -0.28000000};
    l_U291[0] = {39.23000000, -149.40000000, 1.09000000};
    l_U291[1] = {39.16000000, -144.31000000, 1.15000000};
    l_U291[2] = {39.25000000, -140.52000000, 1.04000000};
    l_U291[3] = {39.16000000, -137.20000000, -0.20000000};
    l_U291[4] = {39.08000000, -134.22000000, -1.00000000};
    return;
}

/* P_CREATETETHERBOX */ void sub_14582(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_14846(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_REQUEST_BAGPROCESS_PERSISTENT_ASSETS */ void sub_16541()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_REQUEST_BAGPROCESS_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_16658( ref l_U1138, ref g_U1030 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_19607( "SCRIPT_MISSION\S_AIR_BAGGAGE", ref g_U1950 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21510( -1013714740, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21510( -1464892298, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21510( 456708483, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_21510( -862236369, ref g_U1247 );
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_REQUEST_BAGPROCESS_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_16658(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_16731( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_16731(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_16798( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17056( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_16798(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17056( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17056( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17056( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18587( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17056( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17056( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_17056(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17117( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_17117(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_18587(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_19607(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_19660( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_19915( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_19660(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_19915( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_19915( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_19915( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18587( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_19915( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_19915( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_19915(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17117( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_21510(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_21564( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21825( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_21564(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21825( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21825( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21825( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18587( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21825( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_21825( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_21825(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17117( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_BAGPROCESS_NONPERSISTENT_ASSETS */ void sub_23546()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_REQUEST_BAGPROCESS_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_23670( 1393495999, ref g_U1368 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_23670( -1853239632, ref g_U1368 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_26503( "LEVEL_S_FIN_CP_01", ref g_U1429 );
    AUDIO_MUSIC_REQUEST_ONESHOT( "FINALE_ONESHOT_01", 0 );
    if ((l_U128) AND (g_U829 == 0))
    {
         /* WRITESCRIPTLOG */ sub_569( "AT", "Requesting cutscene assets ...", 0 );
         /* LOADSEAMLESSCUTSCENE */ sub_28492( "14_01_finale_concat", 0 );
    }
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_23670(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_23731( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_23981( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_23731(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_23981( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_23981( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_23981( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_23981( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_18587( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_18587( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_23981( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_23981( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_23981(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17117( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_26503(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_26555( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_26807( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_26555(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_26807( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_26807( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_26807( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_18587( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_26807( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_26807( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_26807(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17117( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_28492(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_28913(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_29310(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_29712(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_30086(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_30477(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_31151(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_569( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_5932( uParam0,  /* PLAYER_PED_ID */ sub_1246() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_31656(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_569( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_569( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_9198( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_31947( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32424( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32424( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32684( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32424( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32684( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32684( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32424( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32684( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32684( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32684( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32424( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32684( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32684( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32684( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32684( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_34264( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_569( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_31947(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6213( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_569( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_569( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_32424(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_32684(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_34264(int iParam0)
{
     /* WRITE_STRING */ sub_8033( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_34352( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_34429( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_34429( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_34429( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_34429( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_34429( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_35299( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU52 );
     /* WRITE_STRING */ sub_8033( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU96 );
     /* WRITE_STRING */ sub_8033( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU100 );
     /* WRITE_STRING */ sub_8033( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU104 );
     /* WRITE_STRING */ sub_8033( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU108 );
     /* WRITE_STRING */ sub_8033( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU112 );
     /* WRITE_STRING */ sub_8033( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU116 );
     /* WRITE_STRING */ sub_8033( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU120 );
     /* WRITE_STRING */ sub_8033( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU124 );
     /* WRITE_STRING */ sub_8033( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU128 );
     /* WRITE_STRING */ sub_8033( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_34598( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_34598( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_34598( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_34352(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_34429(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_34598(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_35299(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_BP_LUGGAGE_BELTS_CREATE */ void sub_36337()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_BP_LUGGAGE_BELTS_CREATE - START", 0 );
    l_U181 =  /* CREATEOBJECTMOVER */ sub_36469( g_U2390, l_U182, 0.00000000, 0.00000000, 0.00000000, 0, 0, "APBS_BELT01.dat", 0 );
    FREEZE_OBJECT_POSITION( l_U181, 1 );
    ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U181, ref g_U2246 );
    SET_MOVER_SPEED( l_U181, 1.00000000, 0.00000000 );
    l_U231 =  /* CREATEOBJECTMOVER */ sub_36469( g_U2391, l_U232, 0.00000000, 0.00000000, 0.00000000, 0, 0, "APBS_BELT02.dat", 0 );
    FREEZE_OBJECT_POSITION( l_U231, 1 );
    ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U231, ref g_U2246 );
    SET_MOVER_SPEED( l_U231, 1.00000000, 0.00000000 );
    l_U269 =  /* CREATEOBJECTMOVER */ sub_36469( g_U2392, l_U270, 0.00000000, 0.00000000, 0.00000000, 0, 0, "APBS_BELT03.dat", 0 );
    FREEZE_OBJECT_POSITION( l_U269, 1 );
    ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U269, ref g_U2246 );
    SET_MOVER_SPEED( l_U269, 1.00000000, 0.00000000 );
    l_U307 =  /* CREATEOBJECTNOOFFSET */ sub_37337( 431210337, 32.20600000, -148.29000000, 0.43000000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( l_U307, 1 );
    SET_OBJECT_VISIBLE( l_U307, 0 );
    SET_OBJECT_COLLIDE_WITH_OTHER_OBJECTS( l_U307, 0 );
    l_U308 =  /* CREATEOBJECTNOOFFSET */ sub_37337( 431210337, 44.64800000, -129.33700000, -1.40200000, 0.00000000, 0.00000000, 90.00000000, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( l_U308, 1 );
    SET_OBJECT_VISIBLE( l_U308, 0 );
    SET_OBJECT_COLLIDE_WITH_OTHER_OBJECTS( l_U308, 0 );
    l_U309 =  /* CREATEOBJECTNOOFFSET */ sub_37337( 431210337, 19.64800000, -128.00000000, -1.00000000, 0.00000000, 0.00000000, 90.00000000, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( l_U309, 1 );
    SET_OBJECT_VISIBLE( l_U309, 0 );
    SET_OBJECT_COLLIDE_WITH_OTHER_OBJECTS( l_U309, 0 );
    return;
}

/* CREATEOBJECTMOVER */ void sub_36469(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object mover with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_36605( uParam0, 1 );
    }
    Result = CREATE_OBJECT_MOVER( uParam0, uParam1, NOT bParam7, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* LOADMODEL */ void sub_36605(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_8033( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_37337(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_36605( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* F_SETUP_BP_VIG01_PEDS */ int sub_37878()
{
    char[64] cVar2;

    switch (l_U1115)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_569( "AT", "e_BP_SpawnVIG01 = ENTITY_STATE_INIT", 0 );
        l_U1116 = 0;
        l_U1115 = 2;
         /* WRITESCRIPTLOG */ sub_569( "AT", "e_BP_SpawnVIG01 = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_BP_VIG01[", 64 );
        ConcatString(ref cVar2, l_U1116, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        l_U1111[l_U1116] =  /* CREATEPED */ sub_38143( ref l_U1071[l_U1116] );
        if (NOT (IS_PED_DEAD( l_U1111[l_U1116] )))
        {
            SET_PED_RELATIONSHIP_GROUP( l_U1111[l_U1116], 1 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U1111[l_U1116], 1 );
            SET_ROOM_FOR_PED_BY_NAME( l_U1111[l_U1116], ref g_U2246 );
            SET_PED_STAND_GROUND_ON_PLAYER_IMPACT( l_U1111[l_U1116], 1 );
            SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT( l_U1111[l_U1116], 0 );
            SET_PED_RESIST_TO_OBJECT_COLLISION( l_U1111[l_U1116], 1 );
            "[doubled result, dropped if not asigned]";
            "[doubled result, dropped if not asigned]";
            if ((IS_GERMAN_VERSION()) || (IS_JAPANESE_GAME()))
            {
                SET_PED_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP( l_U1111[l_U1116], 0, 0 );
                SET_PED_GORE_FROM_PLAYER( l_U1111[l_U1116], 0 );
            }
            else
            {
                SET_PED_AS_ONE_SHOT_KILL( l_U1111[l_U1116], 1 );
            }
        }
        l_U1116++;
        if (l_U1116 >= l_U1111)
        {
            l_U1115 = 3;
             /* WRITESCRIPTLOG */ sub_569( "AT", "e_BP_SpawnVIG01 = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_39213( ref l_U1111, "VIG01" );
         /* P_DEACTIVATEPEDARRAY */ sub_39347( ref l_U1111 );
        l_U1115 = 4;
         /* WRITESCRIPTLOG */ sub_569( "AT", "e_BP_SpawnVIG01 = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* CREATEPED */ void sub_38143(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_36605( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_38634( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_38735( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_38634(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_38735(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_39213(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_DEACTIVATEPEDARRAY */ void sub_39347(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_39401( (uParam0^)[I] );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_39401(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* F_SETUP_BP_WAVE1_ENEMIES */ int sub_39622()
{
    char[64] cVar2;
    unknown uVar18;

    switch (l_U689)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_569( "AT", "e_BP_SpawnBaggageWave1 = ENTITY_STATE_INIT", 0 );
         /* P_SETUP_AI_GROUP */ sub_39769( ref l_U527, 1056964608, 0 );
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U527._fU0, 1 );
        l_U690 = 0;
        l_U689 = 2;
         /* WRITESCRIPTLOG */ sub_569( "AT", "e_BP_SpawnBaggageWave1 = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_BP_Baggage_Wave1[", 64 );
        ConcatString(ref cVar2, l_U690, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        l_U533[l_U690] =  /* CREATEPED */ sub_38143( ref l_U545[l_U690] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_40355( l_U533[l_U690], ref l_U527 );
        uVar18 =  /* F_GIVEPEDWEAPON */ sub_8424( l_U533[l_U690], l_U691[l_U690], 25000, 0, 0 );
        if (l_U691[l_U690] != -862236369)
        {
             /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_40800( ref uVar18, 13, 1 );
            if (GET_DOES_WEAPON_EXIST( uVar18 ))
            {
                SET_LASER_SIGHT_ATTACHMENT( uVar18, -938171172 );
            }
        }
        if (NOT (IS_PED_DEAD( l_U533[l_U690] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U533[l_U690], 1 );
            SET_PED_AI_TEMPLATE( l_U533[l_U690], "AIT_EXPERT" );
            if ((l_U690 > 5) || (l_U690 < 4))
            {
                SET_ROOM_FOR_PED_BY_NAME( l_U533[l_U690], ref g_U2246 );
            }
            else
            {
                SET_ROOM_FOR_PED_BY_NAME( l_U533[l_U690], ref g_U2254 );
            }
        }
         /* P_DEACTIVATEPED */ sub_39401( l_U533[l_U690] );
        l_U690++;
        if (l_U690 >= l_U533)
        {
            l_U689 = 3;
             /* WRITESCRIPTLOG */ sub_569( "AT", "e_BP_SpawnBaggageWave1 = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_39213( ref l_U533, "WAVE1" );
        l_U689 = 4;
         /* WRITESCRIPTLOG */ sub_569( "AT", "e_BP_SpawnBaggageWave1 = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_39769(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_40355(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_8033( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_39769( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_39769( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ void sub_40800(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (GET_DOES_WEAPON_EXIST( (uParam0^) ))
    {
        if (bParam2)
        {
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
        else
        {
            TOGGLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
            ENABLE_WEAPON_ATTACHMENT( (uParam0^), uParam1, bParam2 );
        }
    }
    return;
}

/* F_1401_PRE */ int sub_41617()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "F_1401_Pre", 0 );
    if (IS_CUSTOM_PLAYER_VARIATION() == 0)
    {
         /* P_MAKEAIRPORTMAXA_V2 */ sub_41683(  /* PLAYER_PED_ID */ sub_1246() );
    }
    return 1;
}

/* P_MAKEAIRPORTMAXA_V2 */ void sub_41683(unknown uParam0)
{
    DISPLAYF( "[SP] P_MakeAirportMaxA_V2", 0 );
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_COMPONENT_VARIATION( uParam0, 0, 0, 12, 0 );
        SET_PED_COMPONENT_VARIATION( uParam0, 1, 8, 3, 0 );
        SET_PED_COMPONENT_VARIATION( uParam0, 2, 31, 0, 0 );
        SET_PED_COMPONENT_VARIATION( uParam0, 3, 3, 2, 0 );
        SET_PED_COMPONENT_VARIATION( uParam0, 4, 2, 0, 0 );
        SET_PED_COMPONENT_VARIATION( uParam0, 5, 1, 0, 0 );
        SET_PED_COMPONENT_VARIATION( uParam0, 6, 1, 1, 0 );
        SET_PED_COMPONENT_VARIATION( uParam0, 7, 0, 0, 0 );
        SET_PED_COMPONENT_VARIATION( uParam0, 8, 1, 2, 0 );
        SET_PED_COMPONENT_VARIATION( uParam0, 9, 0, 0, 0 );
        SET_PED_COMPONENT_VARIATION( uParam0, 11, 0, 0, 0 );
        SET_PED_COMPONENT_VARIATION( uParam0, 12, 1, 0, 0 );
    }
    return;
}

/* P_1401_REGISTER */ void sub_41953()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_1401_Register", 0 );
     /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_42011( 0 );
    CUTSCENE_ENABLE_SKIP( 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
    {
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_1246(), g_U2014[1], g_U2129[1] );
        ISEQ_REGISTER_ENTITY( -1853239632, "Max",  /* PLAYER_PED_ID */ sub_1246(), 0 );
        CUTSCENE_REGISTER_ISEQ( -1853239632 );
    }
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_42011(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1246(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1246(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1246(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1246(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_1246(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* P_1401_HANDLECUTSCENE */ void sub_42380()
{
    if (l_U1042._fU52)
    {
         /* P_SET_WEATHER_TOD_SUNNY */ sub_42428();
         /* WRITESCRIPTLOG */ sub_569( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_1 mood. Fade in 3 sec", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_1", "FINALE_01_1", 0.00000000, 3000, 4000, -1082130432, 0 );
        SET_PED_PROP_INDEX(  /* PLAYER_PED_ID */ sub_1246(), 2, 2, 0, 255 );
    }
     /* WRITE_INT */ sub_34598( GET_CUTSCENE_TIME_MS() );
    if (NOT l_U1069)
    {
        if (GET_CUTSCENE_TIME_MS() >= 4177)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
            {
                 /* WRITESCRIPTLOG */ sub_569( "GA", "Making Max be airport variation B", 0 );
                APPLY_PLAYER_PRELOAD_VARIATION(  /* PLAYER_PED_ID */ sub_1246(), 2 );
                CLEAR_PED_PROP(  /* PLAYER_PED_ID */ sub_1246(), 2 );
                l_U1069 = 1;
            }
        }
    }
    if (NOT l_U1070)
    {
        if (GET_CUTSCENE_TIME_MS() >= 15286)
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
            {
                 /* WRITESCRIPTLOG */ sub_569( "GA", "Rolling up sleeves...", 0 );
                if (IS_CUSTOM_PLAYER_VARIATION() == 0)
                {
                    SET_PED_COMPONENT_VARIATION(  /* PLAYER_PED_ID */ sub_1246(), 2, 15, 0, 0 );
                    SET_PED_COMPONENT_VARIATION(  /* PLAYER_PED_ID */ sub_1246(), 5, 3, 0, 0 );
                }
                l_U1070 = 1;
            }
        }
    }
    return;
}

/* P_SET_WEATHER_TOD_SUNNY */ void sub_42428()
{
    SET_WEATHER_TRANSITION_IMMEDIATE( 1 );
    SET_WEATHER_TYPE_NOW_PERSIST( "SUNNY" );
    FREEZE_TIME_OF_DAY( 9, 0 );
    return;
}

/* F_1401_POST */ int sub_42953()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "F_1401_Post", 0 );
    return 1;
}

/* P_1401_PREPAREBLENDOUT */ void sub_43011()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_1401_PrepareBlendout", 0 );
    if (NOT (ISEQ_QUERY_STATE( -1853239632, 3 )))
    {
        ISEQ_REGISTER_ENTITY( -1853239632, "Max",  /* PLAYER_PED_ID */ sub_1246(), 0 );
         /* TELEPORTPED */ sub_43148(  /* PLAYER_PED_ID */ sub_1246(), g_U2014[1], g_U2129[1] );
        ISEQ_START( -1853239632 );
    }
    SET_FORCED_AIM_INTENTION_DIRECTION( 0.00381000, 0.99784800, -0.06545400 );
    SET_FORCED_FORWARD_DIRECTION( 0.00000000, 1.00000000, 0.00000000 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1246(), 1 );
    CAMERA_PLAY_ANIMATED( "LEVEL_S_FIN_CP_01", "B_OUT_14_01_FIN_FWD_CAM", 0, 0, 0, 0, 0.00000000, 0, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2168[1], 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2207[1], 1065353216, 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_5566( ref l_U1128 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_43425( 0,  /* PLAYER_PED_ID */ sub_1246(), "MAX", ref l_U1128, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_43425( 1, l_U533[0], "M14_UFE_09_MUS", ref l_U1128, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_43707( "SAIR_VIG01", ref l_U1128, 8, 1 );
     /* P_BP_CREATE_INTIAL_LUGGAGE */ sub_44605();
    if (NOT AUDIO_IS_MUSIC_PLAYING())
    {
         /* WRITESCRIPTLOG */ sub_569( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_1 mood. Fade in 0 sec", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_1", "FINALE_01_1", 0.00000000, 0, 4000, -1082130432, 0 );
    }
     /* P_ACTIVATE_BAGGAGE_WAVE1_GROUND_ENEMIES */ sub_45361();
     /* P_BP_WAVE1_GROUND_ENEMIES_FIRE_BLANKS */ sub_46669( 1 );
    return;
}

/* TELEPORTPED */ void sub_43148(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_43425(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_43707(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_43752( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_43752(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_43839( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_43839(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_43891( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_44409( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_43891(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_44409(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_BP_CREATE_INTIAL_LUGGAGE */ void sub_44605()
{
    int I;

     /* WRITESCRIPTLOG */ sub_569( "AT", "P_BP_CREATE_INTIAL_LUGGAGE", 0 );
    for ( I = 0; I < 8; I++ )
    {
        l_U194[I] =  /* CREATEOBJECTNOOFFSET */ sub_37337( l_U1138[GET_RANDOM_INT_IN_RANGE( 5, 26 )], l_U206[I], 0.00000000, 0.00000000, GET_RANDOM_FLOAT_IN_RANGE( 0.00000000, 360.00000000 ), 0, 0, 0 );
         /* P_BP_SETUP_SINGLE_LUGGAGE */ sub_44775( l_U194[I] );
    }
    for ( I = 0; I < 5; I++ )
    {
        l_U244[I] =  /* CREATEOBJECTNOOFFSET */ sub_37337( l_U1138[GET_RANDOM_INT_IN_RANGE( 5, 26 )], l_U253[I], 0.00000000, 0.00000000, GET_RANDOM_FLOAT_IN_RANGE( 0.00000000, 360.00000000 ), 0, 0, 0 );
         /* P_BP_SETUP_SINGLE_LUGGAGE */ sub_44775( l_U244[I] );
    }
    for ( I = 0; I < 5; I++ )
    {
        l_U282[I] =  /* CREATEOBJECTNOOFFSET */ sub_37337( l_U1138[GET_RANDOM_INT_IN_RANGE( 5, 26 )], l_U291[I], 0.00000000, 0.00000000, GET_RANDOM_FLOAT_IN_RANGE( 0.00000000, 360.00000000 ), 0, 0, 0 );
         /* P_BP_SETUP_SINGLE_LUGGAGE */ sub_44775( l_U282[I] );
    }
    return;
}

/* P_BP_SETUP_SINGLE_LUGGAGE */ void sub_44775(unknown uParam0)
{
    if ((DOES_OBJECT_EXIST( uParam0 )) == 1)
    {
         /* APPLYGRAVITYTOOBJECT */ sub_44832( uParam0, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( uParam0, ref g_U2246 );
    }
    return;
}

/* APPLYGRAVITYTOOBJECT */ void sub_44832(unknown uParam0, boolean bParam1)
{
    if ((DOES_OBJECT_EXIST( uParam0 )) == 1)
    {
        if (bParam1)
        {
            SET_ACTIVATE_FRAG_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN( uParam0, 1 );
        }
        else
        {
            SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN( uParam0, 1 );
        }
        FREEZE_OBJECT_POSITION( uParam0, 0 );
        SET_OBJECT_DYNAMIC( uParam0, 1 );
    }
    return;
}

/* P_ACTIVATE_BAGGAGE_WAVE1_GROUND_ENEMIES */ void sub_45361()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;

     /* WRITESCRIPTLOG */ sub_569( "AT", "P_ACTIVATE_BAGGAGE_WAVE1_GROUND_ENEMIES", 0 );
     /* P_ACTIVATEPED */ sub_45474( l_U533[1] );
     /* P_ACTIVATEPED */ sub_45474( l_U533[2] );
     /* P_ACTIVATEPED */ sub_45474( l_U533[3] );
     /* P_ACTIVATEPED */ sub_45474( l_U533[6] );
     /* P_ACTIVATEPED */ sub_45474( l_U533[7] );
    if ((NOT (IS_PED_DEAD( l_U533[1] ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))))
    {
        REGISTER_TARGET( l_U533[1],  /* PLAYER_PED_ID */ sub_1246() );
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 27.04932000, -126.06180000, -2.40180200, 3, 20000, 0.25000000, 256, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_MOVE_TO_COVER_COORDS( 0, 41.31000000, -118.76000000, -2.39000000, 0 );
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( l_U533[1], uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
    }
     /* P_TETHERPED */ sub_45832( ref l_U703, l_U533[1], 1 );
    if ((NOT (IS_PED_DEAD( l_U533[2] ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))))
    {
        REGISTER_TARGET( l_U533[2],  /* PLAYER_PED_ID */ sub_1246() );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 36.04885000, -126.30040000, -2.40166800, 3, 20000, 0.25000000, 256, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_MOVE_TO_COVER_COORDS( 0, 33.59000000, -122.60000000, -2.39000000, 0 );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( l_U533[2], uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
     /* P_TETHERPED */ sub_45832( ref l_U703, l_U533[2], 1 );
    if ((NOT (IS_PED_DEAD( l_U533[3] ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))))
    {
        REGISTER_TARGET( l_U533[3],  /* PLAYER_PED_ID */ sub_1246() );
        OPEN_SEQUENCE_TASK( ref uVar4 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, 31.58467000, -117.59920000, -2.35866500, 3, 20000, 0.25000000, 256, 0 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_MOVE_TO_COVER_COORDS( 0, 31.58467000, -117.59920000, -2.35866500, 0 );
        CLOSE_SEQUENCE_TASK( uVar4 );
        TASK_PERFORM_SEQUENCE( l_U533[3], uVar4 );
        CLEAR_SEQUENCE_TASK( uVar4 );
    }
     /* P_TETHERPED */ sub_45832( ref l_U703, l_U533[3], 1 );
    if ((NOT (IS_PED_DEAD( l_U533[6] ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))))
    {
        REGISTER_TARGET( l_U533[6],  /* PLAYER_PED_ID */ sub_1246() );
        OPEN_SEQUENCE_TASK( ref uVar5 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_SNAP_TO_COVER( 0, "GenCover", "11F0ECBE_12B5B201_Popover2", 0 );
        CLOSE_SEQUENCE_TASK( uVar5 );
        TASK_PERFORM_SEQUENCE( l_U533[6], uVar5 );
        CLEAR_SEQUENCE_TASK( uVar5 );
    }
     /* P_TETHERPED */ sub_45832( ref l_U703, l_U533[6], 1 );
    if ((NOT (IS_PED_DEAD( l_U533[7] ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))))
    {
        REGISTER_TARGET( l_U533[7],  /* PLAYER_PED_ID */ sub_1246() );
        OPEN_SEQUENCE_TASK( ref uVar6 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_SNAP_TO_COVER( 0, "GenCover", "11F0ECBE_49D44F4_Popover2", 0 );
        CLOSE_SEQUENCE_TASK( uVar6 );
        TASK_PERFORM_SEQUENCE( l_U533[7], uVar6 );
        CLEAR_SEQUENCE_TASK( uVar6 );
    }
     /* P_TETHERPED */ sub_45832( ref l_U703, l_U533[7], 1 );
    return;
}

/* P_ACTIVATEPED */ void sub_45474(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_TETHERPED */ void sub_45832(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_BP_WAVE1_GROUND_ENEMIES_FIRE_BLANKS */ void sub_46669(boolean bParam0)
{
    int I;
    unknown uVar4;

     /* WRITESCRIPTLOG */ sub_569( "SA", "P_BP_WAVE1_GROUND_ENEMIES_FIRE_BLANKS", 0 );
    for ( I = 0; I <= 10; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U533[I] )))
        {
            uVar4 = GET_WEAPON_FROM_HAND( l_U533[I], 0, 0 );
            if (GET_DOES_WEAPON_EXIST( uVar4 ))
            {
                if (bParam0)
                {
                    SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar4, 100 );
                }
                else
                {
                    SET_WEAPON_CHANCE_TO_FIRE_BLANKS( uVar4, 0 );
                }
            }
        }
    }
    return;
}

/* F_1401_HANDLEBLENDOUT */ int sub_46899()
{
    int I;

    if (l_U1042._fU52)
    {
        DO_SCREEN_FADE_IN( 0 );
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_46960( ref l_U850, 0 ))
    {
         /* P_ACTIVATE_VIG01 */ sub_47095();
    }
    if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_46960( ref l_U871, 0 ))
    {
        ;
    }
    for ( I = 8; I <= 10; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U533[I] )))
        {
            if (IS_PED_VISIBLE( l_U533[I] ))
            {
                SET_PED_VISIBLE( l_U533[I], 0 );
            }
        }
    }
    if (CAMERA_ANIMATED_CURRENT_TIME() > ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_FIN_CP_01", "B_OUT_14_01_FIN_FWD_CAM" )) - 1000))
    {
        if (NOT l_U180)
        {
             /* WRITESCRIPTLOG */ sub_569( "AT", "Stopping animated blendout camera.", 0 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2168[1], 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2207[1], 1065353216, 0 );
            CAMERA_ANIMATED_STOP( 1000, 1 );
            l_U180 = 1;
        }
    }
    if ((l_U180) AND ((ISEQ_QUERY_ENTITY_STATE( -1853239632, "Max", 6 )) || (ISEQ_QUERY_ENTITY_STATE( -1853239632, "Max", 5 ))))
    {
         /* WRITESCRIPTLOG */ sub_569( "AT", "Blendout returning as finished!", 0 );
         /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_47890( "LEVEL_S_FIN_CP_01", ref g_U1429 );
        return 1;
    }
    return 0;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_46960(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_11066(  /* PLAYER_PED_ID */ sub_1246(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* P_ACTIVATE_VIG01 */ void sub_47095()
{
    int I;

     /* WRITESCRIPTLOG */ sub_569( "AT", "P_ACTIVATE_VIG01", 0 );
     /* P_ACTIVATEPEDARRAY */ sub_47158( ref l_U1111 );
    I_SEQUENCE_REGISTER_ENTITY( "VIG_01_FIN", "ESCORTED_HANDLER2", l_U1111[0], 0 );
    I_SEQUENCE_REGISTER_ENTITY( "VIG_01_FIN", "ESCORTED_HANDLER3", l_U1111[1], 0 );
    I_SEQUENCE_REGISTER_ENTITY( "VIG_01_FIN", "ESCORTED_HANDLER4", l_U1111[2], 0 );
    for ( I = 0; I < l_U1111; I++ )
    {
         /* TELEPORTPED */ sub_43148( l_U1111[I], l_U1071[I]._fU0, l_U1071[I]._fU12 );
    }
     /* STARTTIMER */ sub_2291( ref l_U1118 );
    I_SEQUENCE_START( "VIG_01_FIN" );
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_47158(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_45474( (uParam0^)[I] );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_47890(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4017( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_48244(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_569( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_48468( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 48365, 48415, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_48365()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_48415()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_48468(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ void sub_48791(int iParam0, unknown uParam1, unknown uParam2)
{
    iParam0->_fU68 = 1;
    iParam0->_fU72 = 1;
    iParam0->_fU76 = uParam1;
    iParam0->_fU80 = uParam2;
    iParam0->_fU24 = 1;
    return;
}

/* P_CREATE_PLACEMENTS */ void sub_48919()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_CREATE_PLACEMENTS", 0 );
    l_U1039[0] =  /* CREATEPLACEMENT */ sub_49028( -4072149, 18.59000000, -128.37000000, 3.49000000, 0.00000000, 0.00000000, 30.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U1039[0] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U1039[0], ref g_U2246 );
    }
     /* P_CREATE_S_AIR_GG_RG_01 */ sub_49245();
     /* P_CREATE_S_AIR_GG_RG_02 */ sub_50059();
    return;
}

/* CREATEPLACEMENT */ void sub_49028(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_CREATE_S_AIR_GG_RG_01 */ void sub_49245()
{
     /* WRITESCRIPTLOG */ sub_569( "CO", "P_CREATE_S_AIR_GG_RG_01", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_49380( ref g_U715, g_U823, -499258628, -588732074, 31.21000000, -148.99000000, 1.71000000, 1.50000000, 0.00000000, 1.50000000, "ap_bgsort" );
     /* P_CREATECOLLECTIBLE */ sub_49537( ref g_U715 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_49380(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_569( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_49537(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_569( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_49620( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_569( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_569( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_49620( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_5459( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_49028( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_569( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_569( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_49620(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_CREATE_S_AIR_GG_RG_02 */ void sub_50059()
{
     /* WRITESCRIPTLOG */ sub_569( "CO", "P_CREATE_S_AIR_GG_RG_02", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_49380( ref g_U733, g_U824, -739750319, -225520478, 22.72000000, -116.06000000, 1.04000000, 1.50000000, 0.00000000, 1.00000000, "ap_bgsort" );
     /* P_CREATECOLLECTIBLE */ sub_49537( ref g_U733 );
    return;
}

/* P_BP_SETUP_DOORS */ void sub_50224()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_BP_SETUP_DOORS", 0 );
     /* P_CREATEDOORSTRUCT */ sub_50323( ref l_U457, 760387943, 43.14810000, -114.09210000, 3.71904000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_50397( ref l_U457, 0, 90 );
     /* P_SETDOORAUTOCLOSE */ sub_50734( ref l_U457, 1 );
     /* P_CLOSEDOOR */ sub_50819( ref l_U457, 0 );
     /* P_CREATEDOORSTRUCT */ sub_50323( ref l_U464, 760387943, 48.42640000, -130.88770000, 2.73917000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_50397( ref l_U464, 0, 90 );
     /* P_SETDOORAUTOCLOSE */ sub_50734( ref l_U464, 1 );
     /* P_CLOSEDOOR */ sub_50819( ref l_U464, 0 );
     /* P_CREATEDOORSTRUCT */ sub_50323( ref l_U471, 1055112793, 43.11937000, -150.26560000, 3.71774000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_50397( ref l_U471, 65446, 0 );
     /* P_SETDOORAUTOCLOSE */ sub_50734( ref l_U471, 1 );
     /* P_CLOSEDOOR */ sub_50819( ref l_U471, 0 );
     /* P_CREATEDOORSTRUCT */ sub_50323( ref l_U478, 1055112793, 33.20069000, -150.26560000, 3.71774000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_50397( ref l_U478, 0, 90 );
     /* P_SETDOORAUTOCLOSE */ sub_50734( ref l_U478, 1 );
     /* P_CLOSEDOOR */ sub_50819( ref l_U478, 0 );
     /* P_CREATEDOORSTRUCT */ sub_50323( ref l_U492, 760387943, 33.49704000, -114.09210000, 3.71904000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_50397( ref l_U492, -110.00000000, 110.00000000 );
     /* P_OPENDOOR */ sub_51274( ref l_U492, 0, 1, 1.00000000 );
     /* P_SETDOORLATCH */ sub_51438( ref l_U492, 1 );
     /* P_CREATEDOORSTRUCT */ sub_50323( ref l_U485, 760387943, 33.49704000, -114.22520000, -1.24649000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_50397( ref l_U485, -95.00000000, 95.00000000 );
     /* P_SETDOORLATCH */ sub_51438( ref l_U485, 1 );
     /* P_OPENDOOR */ sub_51274( ref l_U485, 1, 1, 1.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_50323( ref l_U520, -177757171, 24.92715000, -131.56010000, 3.72785000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_50323( ref l_U513, 1854128078, 24.92715000, -129.15390000, 3.72785000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_OPENDOOR */ sub_51274( ref l_U520, 1, 1, 1065353216 );
     /* P_OPENDOOR */ sub_51274( ref l_U513, 0, 1, 1065353216 );
     /* P_SETDOORLATCH */ sub_51438( ref l_U520, 1 );
     /* P_SETDOORLATCH */ sub_51438( ref l_U513, 1 );
     /* P_CREATEDOORSTRUCT */ sub_50323( ref l_U506, -1922786508, 18.07308000, -131.86230000, 3.72785000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_50323( ref l_U499, 1393752228, 18.07308000, -129.45620000, 3.72785000, 0.00000000, 0.00000000, 0.00000000 );
    return;
}

/* P_CREATEDOORSTRUCT */ void sub_50323(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

/* P_SETDOORMINMAXLIMIT */ void sub_50397(int iParam0, float fParam1, float fParam2)
{
    if (( /* F_DOESDOOREXIST */ sub_50432( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_50516( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        PRINTSTRING( "[SP]### Error: Door fMinLimit greater than fMaxLimit (default min:-81.0 max:81.0) ###" );
        PRINTNL();
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_50432(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_50516(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORAUTOCLOSE */ void sub_50734(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_50432( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_50516( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_CLOSEDOOR */ void sub_50819(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_50432( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_50516( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* P_OPENDOOR */ void sub_51274(int iParam0, int iParam1, int iParam2, unknown uParam3)
{
    float fVar6;

    if (( /* F_DOESDOOREXIST */ sub_50432( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_50516( iParam0 );
    }
    fVar6 = 0.00000000;
    if (iParam1 == 1)
    {
        fVar6 = uParam3;
    }
    else
    {
        fVar6 = -uParam3;
    }
    if (iParam2 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, fVar6 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar6 );
    }
    return;
}

/* P_SETDOORLATCH */ void sub_51438(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_50432( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_50516( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_51850(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_569( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_569( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_569( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_569( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_569( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_569( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_28492( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_569( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_52741( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_52741( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_569( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_42011( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_52741( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_53401( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_53401( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* NIS_PRE_SETUP */ void sub_52741(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1284(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_1246(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_1246() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1246(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* NIS_POST_SETUP */ void sub_53401(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_1284(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_1246(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_53499();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_53499()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1246(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_1246(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1246(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_1246(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_SETUP_BP_STAIRWELL_ENEMY */ void sub_53860()
{
    char[64] cVar2;
    unknown uVar18;

     /* WRITESCRIPTLOG */ sub_569( "AT", "Creating stairwell enemy!", 0 );
    StrCopy( ref cVar2, "Creating pi_BP_Stairwell", 64 );
    PRINTSTRING( ref cVar2 );
    PRINTNL();
    l_U716 =  /* CREATEPED */ sub_38143( ref l_U717 );
     /* P_QUICK_ADD_PED_TO_GROUP */ sub_40355( l_U716, ref l_U527 );
    uVar18 =  /* F_GIVEPEDWEAPON */ sub_8424( l_U716, -1013714740, 25000, 0, 0 );
     /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_40800( ref uVar18, 13, 1 );
    if (GET_DOES_WEAPON_EXIST( uVar18 ))
    {
        SET_LASER_SIGHT_ATTACHMENT( uVar18, -938171172 );
    }
    if (NOT (IS_PED_DEAD( l_U716 )))
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U716, 1 );
        SET_PED_AI_TEMPLATE( l_U716, "AIT_EXPERT" );
        SET_ROOM_FOR_PED_BY_NAME( l_U716, ref g_U2246 );
        SET_PED_NAME_DEBUG( l_U716, "STAIRWELL" );
    }
     /* P_DEACTIVATEPED */ sub_39401( l_U716 );
    return;
}

/* P_START_SP_CHALLENGES */ void sub_54214()
{
     /* WRITESCRIPTLOG */ sub_569( "CCB", "P_START_SP_CHALLENGES", 0 );
     /* WRITESCRIPTLOG */ sub_569( "CCB", "Starting the Finale context...", 0 );
    START_CONTEXT( "Finale" );
     /* WRITESCRIPTLOG */ sub_569( "CCB", "Starting the Finale_Baggage context...", 0 );
    START_CONTEXT( "Finale_Baggage" );
    return;
}

/* P_SNAP_DOOR_SHUT */ void sub_54576()
{
    if ((ABSF(  /* F_GETDOOROPENRATIO */ sub_54609( ref l_U457 ) )) > 0.10000000)
    {
         /* WRITESCRIPTLOG */ sub_569( "AT", "Slamming dsSpawnBox_Left shut!", 0 );
        DOOR_FIND_CLOSEST_SET_FORCE_CLOSE( l_U457._fU0, l_U457._fU4, 1, 0 );
    }
    if ((ABSF(  /* F_GETDOOROPENRATIO */ sub_54609( ref l_U464 ) )) > 0.10000000)
    {
         /* WRITESCRIPTLOG */ sub_569( "AT", "Slamming dsSpawnBox_Centre shut!", 0 );
        DOOR_FIND_CLOSEST_SET_FORCE_CLOSE( l_U464._fU0, l_U464._fU4, 1, 0 );
    }
    if ((ABSF(  /* F_GETDOOROPENRATIO */ sub_54609( ref l_U471 ) )) > 0.10000000)
    {
         /* WRITESCRIPTLOG */ sub_569( "AT", "Slamming dsSpawnBox_Right shut!", 0 );
        DOOR_FIND_CLOSEST_SET_FORCE_CLOSE( l_U471._fU0, l_U471._fU4, 1, 0 );
    }
    if ((ABSF(  /* F_GETDOOROPENRATIO */ sub_54609( ref l_U478 ) )) > 0.10000000)
    {
         /* WRITESCRIPTLOG */ sub_569( "AT", "Slamming dsSpawnBox_RightMost shut!", 0 );
        DOOR_FIND_CLOSEST_SET_FORCE_CLOSE( l_U478._fU0, l_U478._fU4, 1, 0 );
    }
    return;
}

/* F_GETDOOROPENRATIO */ void sub_54609(int iParam0)
{
    int iVar3;
    float Result;

    if (( /* F_DOESDOOREXIST */ sub_50432( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_50516( iParam0 );
    }
    iVar3 = 0;
    Result = 0.00000000;
    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar3, ref Result );
    return Result;
}

/* P_BP_HANDLE_LUGGAGE_CREATION */ void sub_55284()
{
    if (( /* F_BP_FIND_FREE_LUGGAGE_SPOT */ sub_55326( 1 )) != l_U177)
    {
        if (( /* ISTIMERDONE */ sub_2424( ref l_U185 )) == 1)
        {
             /* P_BP_CREATE_LUGGAGE */ sub_55621( 1,  /* F_BP_FIND_FREE_LUGGAGE_SPOT */ sub_55326( 1 ) );
             /* STARTTIMER */ sub_2291( ref l_U185 );
        }
    }
    if (( /* F_BP_FIND_FREE_LUGGAGE_SPOT */ sub_55326( 2 )) != l_U177)
    {
        if (( /* ISTIMERDONE */ sub_2424( ref l_U235 )) == 1)
        {
             /* P_BP_CREATE_LUGGAGE */ sub_55621( 2,  /* F_BP_FIND_FREE_LUGGAGE_SPOT */ sub_55326( 2 ) );
             /* STARTTIMER */ sub_2291( ref l_U235 );
        }
    }
    if (( /* F_BP_FIND_FREE_LUGGAGE_SPOT */ sub_55326( 3 )) != l_U177)
    {
        if (( /* ISTIMERDONE */ sub_2424( ref l_U273 )) == 1)
        {
             /* P_BP_CREATE_LUGGAGE */ sub_55621( 3,  /* F_BP_FIND_FREE_LUGGAGE_SPOT */ sub_55326( 3 ) );
             /* STARTTIMER */ sub_2291( ref l_U273 );
        }
    }
    return;
}

/* F_BP_FIND_FREE_LUGGAGE_SPOT */ void sub_55326(int iParam0)
{
    int Result;

    if (iParam0 == 1)
    {
        Result = 0;
        for ( Result = 0; Result < l_U194; Result++ )
        {
            if (NOT (DOES_OBJECT_EXIST( l_U194[Result] )))
            {
                return Result;
            }
        }
    }
    else if (iParam0 == 2)
    {
        Result = 0;
        for ( Result = 0; Result < l_U244; Result++ )
        {
            if (NOT (DOES_OBJECT_EXIST( l_U244[Result] )))
            {
                return Result;
            }
        }
    }
    else if (iParam0 == 3)
    {
        Result = 0;
        for ( Result = 0; Result < l_U282; Result++ )
        {
            if (NOT (DOES_OBJECT_EXIST( l_U282[Result] )))
            {
                return Result;
            }
        }
    };;;
    return l_U177;
}

/* P_BP_CREATE_LUGGAGE */ void sub_55621(int iParam0, unknown uParam1)
{
    if (iParam0 == 1)
    {
        if (NOT (DOES_OBJECT_EXIST( l_U194[uParam1] )))
        {
            l_U194[uParam1] =  /* CREATEOBJECTNOOFFSET */ sub_37337( l_U1138[GET_RANDOM_INT_IN_RANGE( 5, 26 )], l_U203, 0.00000000, 0.00000000, GET_RANDOM_FLOAT_IN_RANGE( 0.00000000, 360.00000000 ), 0, 0, 0 );
             /* P_BP_SETUP_SINGLE_LUGGAGE */ sub_44775( l_U194[uParam1] );
        }
    }
    else if (iParam0 == 2)
    {
        if (NOT (DOES_OBJECT_EXIST( l_U244[uParam1] )))
        {
            l_U244[uParam1] =  /* CREATEOBJECTNOOFFSET */ sub_37337( l_U1138[GET_RANDOM_INT_IN_RANGE( 5, 26 )], l_U250, 0.00000000, 0.00000000, GET_RANDOM_FLOAT_IN_RANGE( 0.00000000, 360.00000000 ), 0, 0, 0 );
             /* P_BP_SETUP_SINGLE_LUGGAGE */ sub_44775( l_U244[uParam1] );
        }
    }
    else if (iParam0 == 3)
    {
        if (NOT (DOES_OBJECT_EXIST( l_U282[uParam1] )))
        {
            l_U282[uParam1] =  /* CREATEOBJECTNOOFFSET */ sub_37337( l_U1138[GET_RANDOM_INT_IN_RANGE( 5, 26 )], l_U288, 0.00000000, 0.00000000, GET_RANDOM_FLOAT_IN_RANGE( 0.00000000, 360.00000000 ), 0, 0, 0 );
             /* P_BP_SETUP_SINGLE_LUGGAGE */ sub_44775( l_U282[uParam1] );
        }
    };;;
    return;
}

/* P_BP_HANDLE_LUGGAGE_CLEANUP */ void sub_56129()
{
     /* P_LUGGAGE_CLEAN */ sub_56179( ref l_U194, l_U394 );
     /* P_LUGGAGE_CLEAN */ sub_56179( ref l_U244, l_U415 );
     /* P_LUGGAGE_CLEAN */ sub_56179( ref l_U282, l_U436 );
    return;
}

/* P_LUGGAGE_CLEAN */ void sub_56179(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_OBJECT_EXIST( (uParam0^)[I] ))
        {
            if (IS_OBJECT_IN_GAMEPLAY_HELPER_BOX( (uParam0^)[I], ref uParam1._fU0 ))
            {
                 /* CLEANOBJECT */ sub_5012( (uParam0^)[I] );
            }
        }
    }
    return;
}

/* P_HANDLE_PLAYER_DEATH_IN_BAGGAGE_GATES */ void sub_56338()
{
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() )))
    {
        if (( /* F_ISPEDINTRIGGERBOX */ sub_11066(  /* PLAYER_PED_ID */ sub_1246(), l_U373 )) || (( /* F_ISPEDINTRIGGERBOX */ sub_11066(  /* PLAYER_PED_ID */ sub_1246(), l_U436 )) || (( /* F_ISPEDINTRIGGERBOX */ sub_11066(  /* PLAYER_PED_ID */ sub_1246(), l_U352 )) || (( /* F_ISPEDINTRIGGERBOX */ sub_11066(  /* PLAYER_PED_ID */ sub_1246(), l_U415 )) || (( /* F_ISPEDINTRIGGERBOX */ sub_11066(  /* PLAYER_PED_ID */ sub_1246(), l_U331 )) || (( /* F_ISPEDINTRIGGERBOX */ sub_11066(  /* PLAYER_PED_ID */ sub_1246(), l_U394 )) || ( /* F_ISPEDINTRIGGERBOX */ sub_11066(  /* PLAYER_PED_ID */ sub_1246(), l_U310 ))))))))
        {
             /* WRITESCRIPTLOG */ sub_569( "AT", "Player is in baggage spawn/cleanup. Killing him.", 0 );
            SET_PED_HEALTH(  /* PLAYER_PED_ID */ sub_1246(), 0, 0 );
        }
    }
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_56625(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_56691( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_56691(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_5268( uParam0 );
            }
        }
    }
    return;
}

/* DISABLETIMER */ void sub_56936(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* F_SETUP_BP_UPSTAIRS_REINFORCEMENTS */ int sub_56993()
{
    char[64] cVar2;
    unknown uVar18;

    switch (l_U775)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_569( "AT", "e_BP_SpawnUpstairsReinforcements = ENTITY_STATE_INIT", 0 );
        l_U776 = 0;
        l_U775 = 2;
         /* WRITESCRIPTLOG */ sub_569( "AT", "e_BP_SpawnUpstairsReinforcements = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_BP_UpstairsReinforcements[", 64 );
        ConcatString(ref cVar2, l_U776, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        l_U731[l_U776] =  /* CREATEPED */ sub_38143( ref l_U735[l_U776] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_40355( l_U731[l_U776], ref l_U527 );
        uVar18 =  /* F_GIVEPEDWEAPON */ sub_8424( l_U731[l_U776], l_U777[l_U776], 25000, 0, 0 );
        if (l_U777[l_U776] != -862236369)
        {
             /* MAL_TOGGLEWEAPONATTACHMENTTOWEAPON */ sub_40800( ref uVar18, 13, 1 );
            if (GET_DOES_WEAPON_EXIST( uVar18 ))
            {
                SET_LASER_SIGHT_ATTACHMENT( uVar18, -938171172 );
            }
        }
        if (NOT (IS_PED_DEAD( l_U731[l_U776] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U731[l_U776], 1 );
            SET_PED_AI_TEMPLATE( l_U731[l_U776], "AIT_EXPERT" );
            SET_ROOM_FOR_PED_BY_NAME( l_U731[l_U776], ref g_U2246 );
        }
         /* P_DEACTIVATEPED */ sub_39401( l_U731[l_U776] );
        l_U776++;
        if (l_U776 >= l_U731)
        {
            l_U775 = 3;
             /* WRITESCRIPTLOG */ sub_569( "AT", "e_BP_SpawnUpstairsReinforcements = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_39213( ref l_U731, "REINFORCEMENT" );
        l_U775 = 4;
         /* WRITESCRIPTLOG */ sub_569( "AT", "e_BP_SpawnUpstairsReinforcements = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_HANDLE_VIG01_CLEANUP */ void sub_57833()
{
    int I;
    char[64] cVar3;

    if ( /* ISTIMERDONE */ sub_2424( ref l_U1118 ))
    {
        for ( I = 0; I < l_U1111; I++ )
        {
            if (NOT (IS_PED_DEAD( l_U1111[I] )))
            {
                StrCopy( ref cVar3, "Cleaning pi_BP_VIG01[", 64 );
                ConcatString(ref cVar3, I, 64);
                ConcatString(ref cVar3, "]", 64);
                 /* WRITESCRIPTLOG */ sub_569( "AT", ref cVar3, 0 );
                 /* CLEANPED */ sub_5268( l_U1111[I] );
            }
        }
    }
    if ((NOT l_U1127) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_58000( ref l_U1111 )) == 0))
    {
         /* WRITESCRIPTLOG */ sub_569( "AT", "VIG 01 is done. Unloading M_AP_EMP_A.", 0 );
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_58187( 1234657973, ref g_U1030 );
        l_U1127 = 1;
    }
    return;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_58000(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_58187(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4017( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_ACTIVATE_BAGGAGE_WAVE1_CATWALK_ENEMY */ void sub_58693()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "Tasking first catwalk enemy.", 0 );
     /* P_ACTIVATEPED */ sub_45474( l_U533[0] );
     /* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ sub_58823( ref l_U533[0], 28.79000000, -130.29000000, 1.67000000, 0 );
     /* P_TETHERPED */ sub_45832( ref l_U704, l_U533[0], 1 );
    return;
}

/* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ void sub_58823(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4)
{
    unknown uVar7;

     /* WRITESCRIPTLOG */ sub_569( "AT", "P_TASK_ENEMY_TO_COORDS_THEN_COMBAT", 0 );
    if ((NOT (IS_PED_DEAD( (uParam0^) ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))))
    {
        REGISTER_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_1246() );
        OPEN_SEQUENCE_TASK( ref uVar7 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        if (bParam4)
        {
            TASK_GO_STRAIGHT_TO_COORD( 0, uParam1, 3, 20000 );
        }
        else
        {
            TASK_FOLLOW_NAV_MESH_TO_COORD( 0, uParam1, 3, 20000, 1048576000, 0, 0 );
        }
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_1246() );
        CLOSE_SEQUENCE_TASK( uVar7 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar7 );
        CLEAR_SEQUENCE_TASK( uVar7 );
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_59127(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_11066(  /* PLAYER_PED_ID */ sub_1246(), uParam0 );
}

/* P_ACTIVATE_BAGGAGE_WAVE1_CATWALK_REINFORCEMENTS */ void sub_59252()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "Reinforcing the catwalk.", 0 );
     /* P_ACTIVATEPED */ sub_45474( l_U533[4] );
     /* P_ACTIVATEPED */ sub_45474( l_U533[5] );
     /* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ sub_58823( ref l_U533[0], 39.33061000, -130.29520000, 1.67082500, 0 );
     /* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ sub_58823( ref l_U533[4], 33.60610000, -130.63620000, 1.67082500, 0 );
     /* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ sub_58823( ref l_U533[5], 29.69028000, -130.45920000, 1.67089500, 0 );
    return;
}

/* P_ACTIVATE_BAGGAGE_STAIRWELL_ENEMY */ void sub_59510()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_ACTIVATE_BAGGAGE_STAIRWELL_ENEMY", 0 );
     /* P_ACTIVATEPED */ sub_45474( l_U716 );
     /* P_TASK_ENEMY_TO_COVER_THEN_COMBAT */ sub_59660( ref l_U716, l_U717._fU0, "ap_sec2", "Corner_Position13", 0, 0, 0 );
     /* P_TETHERPED */ sub_45832( ref l_U828, l_U716, 1 );
    if ((NOT (IS_PED_DEAD( l_U716 ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))))
    {
        REGISTER_TARGET( l_U716,  /* PLAYER_PED_ID */ sub_1246() );
    }
    return;
}

/* P_TASK_ENEMY_TO_COVER_THEN_COMBAT */ void sub_59660(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, boolean bParam6, boolean bParam7, unknown uParam8)
{
    unknown uVar11;

     /* WRITESCRIPTLOG */ sub_569( "AT", "P_TASK_ENEMY_TO_COVER_THEN_COMBAT", 0 );
    if ((NOT (IS_PED_DEAD( (uParam0^) ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))))
    {
        REGISTER_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_1246() );
        OPEN_SEQUENCE_TASK( ref uVar11 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        if (bParam6)
        {
            TASK_FOLLOW_NAV_MESH_TO_COORD( 0, uParam1, 3, 20000, 0.25000000, 256, 0 );
        }
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        if (NOT bParam7)
        {
            if ((NOT (IS_STRING_NULL( uParam5 ))) AND (NOT (IS_STRING_NULL( uParam4 ))))
            {
                TASK_COMBAT_MOVE_TO_COVER( 0, uParam4, uParam5, 0 );
            }
            else
            {
                TASK_COMBAT_MOVE_TO_COVER_COORDS( 0, uParam1, 0 );
            }
        }
        else if ((NOT (IS_STRING_NULL( uParam5 ))) AND (NOT (IS_STRING_NULL( uParam4 ))))
        {
            TASK_COMBAT_MOVE_TO_COVER_TACTICAL( 0, uParam4, uParam5, uParam8, 0 );
        }
        else
        {
            TASK_COMBAT_MOVE_TO_COVER_TACTICAL_COORDS( 0, uParam1, uParam8, 0 );
        }
        CLOSE_SEQUENCE_TASK( uVar11 );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar11 );
        CLEAR_SEQUENCE_TASK( uVar11 );
    }
    return;
}

/* P_SPAWN_CONTROL_BOOTH_ENEMY */ void sub_60260()
{
    unknown uVar2;

     /* P_ACTIVATEPED */ sub_45474( l_U533[8] );
    if ((NOT (IS_PED_DEAD( l_U533[8] ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))))
    {
        REGISTER_TARGET( l_U533[8],  /* PLAYER_PED_ID */ sub_1246() );
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_SNAP_TO_COVER( 0, "GenCover", "11F0ECBE_7A30B613_Corner2", 0 );
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( l_U533[8], uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
        SET_PED_FLAG_LOCK_TO_COVER( l_U533[8], 1 );
    }
    return;
}

/* P_REMOVEALLTETHERSFROMPED */ void sub_60603(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        RESET_PED_TETHERING( uParam0 );
    }
    return;
}

/* P_SPAWN_ADDITIONAL_UPSTAIRS_ENEMIES */ void sub_61045()
{
    unknown uVar2;
    unknown uVar3;

     /* P_ACTIVATEPED */ sub_45474( l_U533[9] );
     /* P_ACTIVATEPED */ sub_45474( l_U533[10] );
    if ((NOT (IS_PED_DEAD( l_U533[9] ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))))
    {
        REGISTER_TARGET( l_U533[9],  /* PLAYER_PED_ID */ sub_1246() );
        OPEN_SEQUENCE_TASK( ref uVar2 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_MOVE_TO_COVER_COORDS( 0, 38.83000000, -130.48000000, 1.67000000,  /* PLAYER_PED_ID */ sub_1246() );
        CLOSE_SEQUENCE_TASK( uVar2 );
        TASK_PERFORM_SEQUENCE( l_U533[9], uVar2 );
        CLEAR_SEQUENCE_TASK( uVar2 );
    }
    if ((NOT (IS_PED_DEAD( l_U533[10] ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_1246() ))))
    {
        REGISTER_TARGET( l_U533[10],  /* PLAYER_PED_ID */ sub_1246() );
        OPEN_SEQUENCE_TASK( ref uVar3 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_MOVE_TO_COVER_COORDS( 0, 31.24000000, -130.16000000, 1.67000000,  /* PLAYER_PED_ID */ sub_1246() );
        CLOSE_SEQUENCE_TASK( uVar3 );
        TASK_PERFORM_SEQUENCE( l_U533[10], uVar3 );
        CLEAR_SEQUENCE_TASK( uVar3 );
    }
    return;
}

/* P_HANDLE_REINFORCEMENT_WAVES */ void sub_61631()
{
    int iVar2;
    int iVar3;

    iVar2 = l_U175;
    switch (l_U175)
    {
        case 0: break;
        case 1:
        if (l_U176)
        {
             /* P_CREATE_AND_START_TIMER */ sub_61745( ref l_U801, 500 );
             /* P_CREATE_AND_START_TIMER */ sub_61745( ref l_U810, 1500 );
        }
        if ( /* ISTIMERDONE */ sub_2424( ref l_U801 ))
        {
             /* TELEPORTPED */ sub_43148( l_U731[0], l_U130[2], l_U149[2] );
             /* WRITESCRIPTLOG */ sub_569( "AT", "Activating pi_BP_UpstairsReinforcements[0].", 0 );
             /* P_ACTIVATEPED */ sub_45474( l_U731[0] );
             /* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ sub_58823( ref l_U731[0], l_U781[2], 0 );
        }
        if ( /* ISTIMERDONE */ sub_2424( ref l_U810 ))
        {
            if ( /* F_ISPLAYERINTRIGGERBOX */ sub_59127( l_U955 ))
            {
                iVar3 = 1;
            }
            else
            {
                iVar3 = 4;
            }
             /* TELEPORTPED */ sub_43148( l_U731[1], l_U130[iVar3], l_U149[iVar3] );
             /* WRITESCRIPTLOG */ sub_569( "AT", "Activating pi_BP_UpstairsReinforcements[1].", 0 );
             /* P_ACTIVATEPED */ sub_45474( l_U731[1] );
             /* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ sub_58823( ref l_U731[1], l_U781[iVar3], 1 );
        }
        if ((l_U810._fU16) AND ((l_U801._fU16) AND (( /* F_GET_NUM_PEDS_IN_TRIGGERBOX */ sub_62132( ref l_U731, l_U829 )) == 1)))
        {
             /* WRITESCRIPTLOG */ sub_569( "AT", "rwCurrentWave = REINFORCEMENT_WAVE2", 0 );
            l_U175 = 2;
        }
        break;
        case 2:
        if (l_U176)
        {
             /* P_CREATE_AND_START_TIMER */ sub_61745( ref l_U801, 1100 );
        }
        if ( /* ISTIMERDONE */ sub_2424( ref l_U801 ))
        {
            if (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_59127( l_U997 )))
            {
                iVar3 = 5;
            }
            else
            {
                iVar3 = 2;
            }
             /* TELEPORTPED */ sub_43148( l_U731[2], l_U130[iVar3], l_U149[iVar3] );
            if (iVar3 == 5)
            {
                if (NOT (IS_PED_DEAD( l_U731[2] )))
                {
                    SET_ROOM_FOR_PED_BY_NAME( l_U731[2], ref g_U2254 );
                }
            }
             /* WRITESCRIPTLOG */ sub_569( "AT", "Activating pi_BP_UpstairsReinforcements[2].", 0 );
             /* P_ACTIVATEPED */ sub_45474( l_U731[2] );
             /* P_TASK_ENEMY_TO_COORDS_THEN_COMBAT */ sub_58823( ref l_U731[2], l_U781[5], 0 );
        }
        if ((l_U801._fU16) AND (( /* F_GET_NUM_PEDS_IN_TRIGGERBOX */ sub_62132( ref l_U731, l_U829 )) == 1))
        {
             /* WRITESCRIPTLOG */ sub_569( "AT", "rwCurrentWave = REINFORCEMENT_COMPLETE", 0 );
            l_U175 = 3;
        }
        break;
        case 3: break;
    }
    if (l_U175 != iVar2)
    {
        l_U176 = 1;
    }
    else
    {
        l_U176 = 0;
    }
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_61745(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_2141( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_2291( uParam0 );
    return;
}

/* F_GET_NUM_PEDS_IN_TRIGGERBOX */ void sub_62132(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    int I;
    int Result;

    Result = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if (( /* F_ISPEDINTRIGGERBOX */ sub_11066( (uParam0^)[I], uParam1 )) == 1)
        {
            Result++;
        }
    }
    return Result;
}

/* F_CAN_PLAYER_HELP_TRIGGER */ int sub_62950()
{
    if ((IS_PED_DEAD( l_U533[7] )) AND ((IS_PED_DEAD( l_U533[6] )) AND ((IS_PED_DEAD( l_U533[5] )) AND ((IS_PED_DEAD( l_U533[4] )) AND ((IS_PED_DEAD( l_U533[3] )) AND ((IS_PED_DEAD( l_U533[2] )) AND ((IS_PED_DEAD( l_U533[1] )) AND (IS_PED_DEAD( l_U533[0] )))))))))
    {
        return 1;
    }
    return 0;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_63234(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_58000( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_BP_DEBUG_TUNING_WIDGET */ void sub_63797()
{
    if (NOT l_U1208)
    {
        START_WIDGET_GROUP( "Animated Camera Tuning" );
        ADD_WIDGET_INT_SLIDER( "Animated Camera Stop Time", ref l_U178, 0, 6000, 1 );
        ADD_WIDGET_INT_SLIDER( "Animated Camera Interp Time", ref l_U179, 0, 6000, 1 );
        STOP_WIDGET_GROUP();
        l_U1208 = 1;
    }
    return;
}

/* P_RELEASE_BAGPROCESS_ASSETS */ void sub_64009()
{
     /* WRITESCRIPTLOG */ sub_569( "AT", "P_RELEASE_BAGPROCESS_ASSETS", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_64098( ref l_U1138, ref g_U1030 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_64230( "SCRIPT_MISSION\S_AIR_BAGGAGE", ref g_U1950 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_64578( -1013714740, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_64578( -1464892298, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_64578( 456708483, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_64578( -862236369, ref g_U1247 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_47890( "LEVEL_S_FIN_CP_01", ref g_U1429 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_64098(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_58187( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_64230(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4017( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_64578(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_4017( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

