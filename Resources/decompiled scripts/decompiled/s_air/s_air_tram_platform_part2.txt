void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U55 = -1;
    l_U56 = {64536, 64536, 64536};
    l_U78 = 0;
    l_U79 = 0;
    l_U80 = 1500;
    l_U126 = 0;
    l_U127 = 1;
    l_U128 = 1;
    l_U129 = 0;
    l_U132 = {-81.84300000, 92.47200000, -4.07800000};
    l_U135 = {0.00000000, -2.00000000, 0.00000000};
    l_U138 = {-1.50000000, -1.40000000, 1.00000000};
    l_U141 = 90.00000000;
    l_U279 = 2000;
    l_U376 = 7.00000000;
    l_U377 = 50.00000000;
    l_U394 = 5000;
    l_U567 = 2000;
    l_U596 = 3000;
    l_U606 = 2000;
    l_U607 = 1500;
    l_U626 = 1000;
    l_U658 = 8.00000000;
    l_U659 = 8.00000000;
    l_U660 = 4.00000000;
    l_U680 = 3000;
    l_U748 = 4000;
    l_U759 = 3000;
    l_U769 = 4000;
    l_U771 = {-69.51894000, 138.47970000, -4.66799000};
    l_U903 = 650;
    l_U904 = 2250;
    l_U905 = 0;
    l_U906 = 0;
    l_U907 = 0;
     /* WRITESCRIPTLOG */ sub_672( "SA", "Script s_air_Tram_Platform.sc is starting up...", 0 );
    l_U126 = 1;
     /* P_INITIALIZE_ARRAYS */ sub_796();
    if (g_U829 == 5)
    {
         /* P_TP_SETUP_DOORS */ sub_2349();
    }
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_3196();
         /* P_HANDLE_DEBUG */ sub_13415();
        if (l_U129 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_15012();
             /* P_TP_HANDLE_BULLET_CAM */ sub_69805();
        }
         /* P_TP_HANDLE_LIGHTS */ sub_70093();
         /* P_TP_HANDLE_SUICIDE_DOOR_SOUNDS */ sub_70197();
         /* P_TP_HANDLE_PLAYER_PICKUP_SNIPER_RIFLE */ sub_70563();
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_70895( ref l_U232, -1054867456, 0, 1 );
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_70895( ref l_U336, -1054867456, 0, 1 );
         /* P_PED_ARRAY_PLATFORM_SAFETY_CHECK */ sub_71114( ref l_U232 );
         /* P_PED_ARRAY_PLATFORM_SAFETY_CHECK */ sub_71114( ref l_U336 );
        WAIT( 0 );
    }
    if (g_U861[4]._fU40 == 3)
    {
         /* P_TPP2_CLEANUP_ALL */ sub_5664( 0 );
    }
    else
    {
         /* P_TPP2_CLEANUP_ALL */ sub_5664( 1 );
    }
     /* P_TPP2_RELEASE_ASSETS */ sub_71388();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_air_Tram_Platform_Part2" );
     /* WRITESCRIPTLOG */ sub_672( "SA", "Script s_air_Tram_Platform.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_672(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_INITIALIZE_ARRAYS */ void sub_796()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_INITIALIZE_ARRAYS", 0 );
    l_U704[0] = -1880103805;
    l_U704[1] = g_U2375;
    l_U704[2] = g_U2376;
    l_U704[3] = g_U2377;
    l_U704[4] = g_U2378;
    l_U704[5] = g_U2379;
    l_U704[6] = g_U2380;
    l_U704[7] = g_U2396;
    l_U704[8] = -576031449;
    l_U704[9] = -338998251;
    l_U704[10] = 2042458963;
    l_U704[11] = 1751830702;
    l_U704[12] = g_U2394;
    l_U704[13] = g_U2395;
    l_U704[14] = 2070806350;
    l_U704[15] = -340235727;
    l_U704[16] = -1409914275;
    l_U704[17] = -1589640354;
    l_U704[18] = g_U2384;
    l_U704[19] = g_U2385;
    l_U704[20] = g_U2386;
    l_U704[21] = g_U2387;
    l_U704[22] = g_U2381;
    l_U704[23] = g_U2382;
    l_U704[24] = g_U2383;
    l_U730[0] = -184942895;
    l_U730[1] = 57534114;
    l_U730[2] = -612753081;
    l_U730[3] = -1464892298;
    l_U730[4] = 1478009203;
    l_U730[5] = 724901397;
    l_U730[6] = 2090054632;
    l_U730[7] = -1986694060;
    l_U142[0] = {-70.36733000, 46.23283000, -5.89565800};
    l_U142[1] = {-70.74962000, 52.16768000, -5.89565800};
    l_U142[2] = {-70.66848000, 63.03588000, -5.89565800};
    l_U142[3] = {-70.39780000, 69.41042000, -5.89565800};
    l_U142[4] = {-70.95245000, 80.50426000, -5.89565800};
    l_U142[5] = {-71.21555000, 86.48540000, -5.89565800};
    l_U142[6] = {-89.12000000, 46.33000000, -5.88000000};
    l_U142[7] = {-89.24000000, 52.36000000, -5.88000000};
    l_U142[8] = {-89.52000000, 63.47000000, -5.88000000};
    l_U142[9] = {-89.16000000, 69.28000000, -5.88000000};
    l_U142[10] = {-89.25000000, 80.52000000, -5.88000000};
    l_U142[11] = {-89.77000000, 86.52000000, -5.88000000};
    l_U255[0] = -612753081;
    l_U255[1] = 57534114;
    l_U255[2] = 1478009203;
    l_U255[3] = 57534114;
    l_U237[0] = 1;
    l_U237[1] = 1;
    l_U237[2] = 2;
    l_U237[3] = 2;
    l_U242[0] = {-1.00000000, 3.00000000, 0.90000000};
    l_U242[1] = {-1.20000000, -3.50000000, 0.90000000};
    l_U242[2] = {-1.20000000, 3.00000000, 0.90000000};
    l_U242[3] = {-1.20000000, -3.50000000, 0.90000000};
    l_U260[0] = "B0BB2A54_1A7BC40E_Corner1";
    l_U260[1] = "Corner_Position02";
    l_U260[2] = "B0BB2A54_9C79663B_Popover1";
    l_U260[3] = "B0BB2A54_EB738302_Corner2";
    l_U265[0] = 2;
    l_U265[1] = 1;
    l_U265[2] = 0;
    l_U265[3] = 0;
    l_U359[0] = -184942895;
    l_U359[1] = 1478009203;
    l_U359[2] = -612753081;
    l_U359[3] = 57534114;
    l_U341[0] = 0;
    l_U341[1] = 1;
    l_U341[2] = 1;
    l_U341[3] = 2;
    l_U346[0] = {-1.20000000, -3.50000000, 0.90000000};
    l_U346[1] = {-1.00000000, 3.00000000, 0.90000000};
    l_U346[2] = {-1.20000000, -3.50000000, 0.90000000};
    l_U346[3] = {-1.20000000, -3.50000000, 0.90000000};
    l_U364[0] = "Corner_Position03";
    l_U364[1] = "B0BB2A54_B7CF7EB3_Popover1";
    l_U364[2] = "B0BB2A54_162BD872_Corner1";
    l_U364[3] = "B0BB2A54_FEF10CF9_Corner2";
    l_U369[0] = 1;
    l_U369[1] = 2;
    l_U369[2] = 0;
    l_U369[3] = 0;
    return;
}

/* P_TP_SETUP_DOORS */ void sub_2349()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_SETUP_DOORS", 0 );
     /* P_CREATEDOORSTRUCT */ sub_2449( ref g_U2804, -1193094906, -78.32187000, 92.00945000, -3.33296000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_2528( ref g_U2804, -85.00000000, 85.00000000 );
     /* P_CLOSEDOOR */ sub_2865( ref g_U2804, 1 );
     /* P_SETDOORAUTOCLOSE */ sub_3009( ref g_U2804, 1 );
     /* P_CREATEDOORSTRUCT */ sub_2449( ref g_U2811, -1654726147, -75.92067000, 92.00945000, -3.33296000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_2528( ref g_U2811, -85.00000000, 85.00000000 );
     /* P_CLOSEDOOR */ sub_2865( ref g_U2811, 1 );
     /* P_SETDOORAUTOCLOSE */ sub_3009( ref g_U2811, 1 );
    return;
}

/* P_CREATEDOORSTRUCT */ void sub_2449(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

/* P_SETDOORMINMAXLIMIT */ void sub_2528(int iParam0, float fParam1, float fParam2)
{
    if (( /* F_DOESDOOREXIST */ sub_2563( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_2647( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        PRINTSTRING( "[SP]### Error: Door fMinLimit greater than fMaxLimit (default min:-81.0 max:81.0) ###" );
        PRINTNL();
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_2563(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_2647(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_CLOSEDOOR */ void sub_2865(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_2563( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_2647( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* P_SETDOORAUTOCLOSE */ void sub_3009(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_2563( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_2647( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_HANDLE_FAILURE */ void sub_3196()
{
    if (g_U830 == 5)
    {
        switch (l_U129)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_3398()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
            {
                l_U129 = 1;
                 /* WRITESCRIPTLOG */ sub_672( "SA", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_3916())
            {
                l_U129 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_3976( 0 )) == 1)
            {
                l_U129 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
            {
                l_U129 = 3;
                 /* WRITESCRIPTLOG */ sub_672( "SA", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_672( "SA", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_3335() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_3335(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_3297() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_3297(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
             /* P_TPP2_CLEANUP_ALL */ sub_5664( 0 );
            l_U129 = 4;
             /* WRITESCRIPTLOG */ sub_672( "SA", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_672( "SA", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_8562( ref l_U90,  /* PLAYER_PED_ID */ sub_3297() );
            if ((g_U861[6]._fU40 != 4) AND (g_U861[6]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_672( "SA", "Shutting down script for MCE_TRAM_FIGHT_PART_1.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_13156( ref g_U861[6] );
                SET_EXITFLAG_FOR_SCRIPT( g_U861[6]._fU32 );
            }
            l_U128 = 0;
            l_U129 = 5;
             /* WRITESCRIPTLOG */ sub_672( "SA", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_672( "SA", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U126 = 1;
            l_U129 = 0;
             /* WRITESCRIPTLOG */ sub_672( "SA", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_3297()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_3335() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_3335()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_3398()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_3297(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_3335(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_3335(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_3297() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_3297(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_3916()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_3976(int iParam0)
{
    iParam0 = 1;
    switch (l_U79)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_4058( ref l_U81 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
            {
                l_U80 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_4192( ref l_U81, l_U80, 1, 1 );
             /* STARTTIMER */ sub_4342( ref l_U81 );
        }
        if ( /* ISTIMERDONE */ sub_4475( ref l_U81 ))
        {
             /* WRITESCRIPTLOG */ sub_672( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_3335() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_3335(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U79 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U79 = 2;
            }
            else
            {
                l_U79 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_672( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_4976();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_672( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_4976();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_4058(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_4192(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_4342(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_4475(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_4976()
{
     /* WRITESCRIPTLOG */ sub_672( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_5051( ref l_U81 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_3335() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_3335(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U78 = 0;
    l_U78 = l_U78;
    l_U79 = 0;
    return;
}

/* RESETTIMER */ void sub_5051(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_TPP2_CLEANUP_ALL */ void sub_5664(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CLEANUP_ALL", 0 );
    STOP_SCRIPT_STREAM( l_U770 );
    ISEQ_TERMINATE( -1774213497 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_5758( -1774213497, ref g_U1368 );
     /* CLEANPEDARRAY */ sub_6825( ref l_U232 );
     /* CLEANPEDARRAY */ sub_6825( ref l_U336 );
    if (bParam0)
    {
         /* CLEANPEDARRAY */ sub_6825( ref g_U2822 );
         /* CLEANPEDARRAY */ sub_6825( ref g_U2880 );
    }
     /* CLEANPLACEMENT */ sub_7018( l_U131 );
     /* P_TP_CLEANUP_BUTTON */ sub_7078();
     /* P_TP_CLEANUP_LIGHTS */ sub_7218();
     /* P_TP_CLEANUP_SUICIDE_DOORS */ sub_7389();
     /* P_TP_CLEANUP_CONTROL_ROOM_PAINKILLERS */ sub_7563();
     /* P_TP_CLEANUP_ESCALATORS */ sub_7740();
     /* P_TP_CLEANUP_GATE */ sub_7901();
     /* P_T2_CLEANUP_TRAM */ sub_7984( ref g_U4353 );
     /* P_T2_CLEANUP_TRAM */ sub_7984( ref g_U4552 );
     /* P_T2_CLEAN_PLACEMENTS */ sub_8218();
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
    {
        SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_3335(), 1 );
        SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_3297(), 0 );
    }
    RESET_PED_MODEL_LOD_DISTANCES( -1880103805 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_8349( ref l_U661 );
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_5758(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5896( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_5896(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* CLEANPEDARRAY */ void sub_6825(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_6875( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_6875(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* CLEANPLACEMENT */ void sub_7018(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_TP_CLEANUP_BUTTON */ void sub_7078()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CLEAN_BUTTON", 0 );
     /* CLEANOBJECT */ sub_7146( g_U3013 );
     /* CLEANOBJECT */ sub_7146( g_U3014 );
    return;
}

/* CLEANOBJECT */ void sub_7146(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* P_TP_CLEANUP_LIGHTS */ void sub_7218()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CLEAN_LIGHTS", 0 );
     /* CLEANOBJECT */ sub_7146( g_U3028 );
     /* CLEANOBJECT */ sub_7146( g_U3029 );
     /* CLEANOBJECT */ sub_7146( g_U3030 );
     /* CLEANOBJECT */ sub_7146( g_U3031 );
     /* CLEANOBJECT */ sub_7146( g_U3032 );
     /* CLEANOBJECT */ sub_7146( g_U3033 );
     /* CLEANOBJECT */ sub_7146( g_U3034 );
     /* CLEANOBJECT */ sub_7146( g_U3035 );
     /* CLEANOBJECT */ sub_7146( g_U3036 );
     /* CLEANOBJECT */ sub_7146( g_U3037 );
    return;
}

/* P_TP_CLEANUP_SUICIDE_DOORS */ void sub_7389()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CLEAN_SUICIDE_DOORS", 0 );
     /* CLEANOBJECTARRAY */ sub_7470( ref g_U2969 );
     /* CLEANOBJECTARRAY */ sub_7470( ref g_U2990 );
    return;
}

/* CLEANOBJECTARRAY */ void sub_7470(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANOBJECT */ sub_7146( (uParam0^)[I] );
    }
    return;
}

/* P_TP_CLEANUP_CONTROL_ROOM_PAINKILLERS */ void sub_7563()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CLEAN_PAINKILLERS", 0 );
     /* CLEANPLACEMENTARRAY */ sub_7653( ref g_U2818 );
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_7653(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_7018( (uParam0^)[I] );
    }
    return;
}

/* P_TP_CLEANUP_ESCALATORS */ void sub_7740()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CLEANUP_ESCALATORS", 0 );
     /* CLEANOBJECT */ sub_7146( g_U3061 );
     /* CLEANOBJECT */ sub_7146( g_U3062 );
     /* CLEANOBJECT */ sub_7146( g_U3063 );
     /* CLEANOBJECT */ sub_7146( g_U3064 );
     /* CLEANOBJECT */ sub_7146( g_U3065 );
     /* CLEANOBJECT */ sub_7146( g_U3066 );
     /* CLEANOBJECT */ sub_7146( g_U3067 );
     /* CLEANOBJECT */ sub_7146( g_U3068 );
    return;
}

/* P_TP_CLEANUP_GATE */ void sub_7901()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CLEANUP_GATE", 0 );
     /* CLEANOBJECT */ sub_7146( g_U3069 );
    return;
}

/* P_T2_CLEANUP_TRAM */ void sub_7984(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_T2_CLEANUP_TRAM", 0 );
     /* CLEANOBJECT */ sub_7146( iParam0->_fU12 );
     /* CLEANOBJECT */ sub_7146( iParam0->_fU16 );
     /* CLEANOBJECT */ sub_7146( iParam0->_fU20 );
     /* CLEANOBJECT */ sub_7146( iParam0->_fU32 );
     /* CLEANOBJECT */ sub_7146( iParam0->_fU28 );
     /* CLEANOBJECT */ sub_7146( iParam0->_fU32 );
     /* CLEANOBJECTARRAY */ sub_7470( iParam0 + 36 );
     /* CLEANOBJECTARRAY */ sub_7470( iParam0 + 48 );
     /* CLEANOBJECTARRAY */ sub_7470( iParam0 + 60 );
     /* CLEANTRAIN */ sub_8147( iParam0->_fU0 );
    return;
}

/* CLEANTRAIN */ void sub_8147(unknown uParam0)
{
    if (DOES_VEHICLE_EXIST( uParam0 ))
    {
        DELETE_MISSION_TRAIN( uParam0 );
    }
    return;
}

/* P_T2_CLEAN_PLACEMENTS */ void sub_8218()
{
     /* CLEANPLACEMENTARRAY */ sub_7653( ref g_U3350 );
     /* CLEANPLACEMENT */ sub_7018( g_U3321 );
     /* CLEANPLACEMENT */ sub_7018( g_U3328 );
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_8349(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_8562(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_672( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_8781( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_9945( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10259( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10738( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10259( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10738( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10259( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10738( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_11054( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10738( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_11054( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_10738( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_11626( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_11828( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_3297(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_8781(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_8843( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_8843(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_9945(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_10259(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_10663( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_10663(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_10738(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_11054(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_10663( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_11626(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_11828(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_8843( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_11926( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_11926(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_13156(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_HANDLE_DEBUG */ void sub_13415()
{
    if (NOT l_U905)
    {
        START_WIDGET_GROUP( "Tram Platform - Part II" );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_13518( ref l_U138, "Max attach position", 1036831949 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_13518( ref g_U2966, "Player Tram Start Position", 1036831949 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_13518( ref g_U4951, "UFE Tram Start Position", 1036831949 );
        START_WIDGET_GROUP( "Mid 06" );
        ADD_WIDGET_INT_SLIDER( "Start tram arrival sound delay", ref l_U626, 0, 30000, 1 );
        ADD_WIDGET_INT_SLIDER( "Restore power delay", ref l_U607, 0, 30000, 1 );
        ADD_WIDGET_INT_SLIDER( "Start UFE tram delay", ref l_U748, 0, 30000, 1 );
        ADD_WIDGET_INT_SLIDER( "Start power restored speech", ref l_U680, 0, 30000, 1 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Tram arrival/departure" );
        ADD_WIDGET_FLOAT_SLIDER( "Max tram speed", ref g_U4955, 0.00000000, 1000.00000000, 0.10000000 );
        ADD_WIDGET_INT_SLIDER( "Power on delay", ref l_U606, 0, 60000, 500 );
        ADD_WIDGET_FLOAT_SLIDER( "Tram arrival speed", ref g_U4956, 0.00000000, 100.00000000, 0.10000000 );
        ADD_WIDGET_INT_SLIDER( "Tram slow down time", ref g_U4960, 1000, 60000, 500 );
        ADD_WIDGET_INT_SLIDER( "Tram speed up time", ref g_U4958, 1000, 60000, 500 );
        ADD_WIDGET_INT_SLIDER( "Delay between trams", ref g_U4959, 0, 60000, 500 );
        ADD_WIDGET_INT_SLIDER( "Start departing delay", ref g_U4957, 100, 60000, 500 );
        ADD_WIDGET_INT_SLIDER( "Start player tram delay", ref l_U769, 0, 120000, 1 );
        ADD_WIDGET_INT_SLIDER( "Start player tram sound delay", ref l_U759, 0, 120000, 1 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Grenade-throwing" );
        ADD_WIDGET_FLOAT_SLIDER( "Grenade throw pitch", ref l_U376, 0.00000000, 180.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Grenade throw speed", ref l_U377, 0.00000000, 180.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Control Room Button" );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_13518( ref g_U3015, "Button Position", 1036831949 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_13518( ref g_U3018, "Button Rotation", 1036831949 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_13518( ref g_U3021, "Button Light Position", 1036831949 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_13518( ref g_U3024, "Button Light Rotation", 1036831949 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Control room sniper rifle" );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_13518( ref l_U132, "Position", 1036831949 );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_13518( ref l_U135, "Rotation", 1036831949 );
        STOP_WIDGET_GROUP();
        ADD_WIDGET_FLOAT_SLIDER( "Min. distance to UFE Tram", ref l_U659, 0.00000000, 100.00000000, 0.10000000 );
        ADD_WIDGET_FLOAT_SLIDER( "Min. distance to Player Tram", ref l_U660, 0.00000000, 100.00000000, 0.10000000 );
        ADD_WIDGET_INT_SLIDER( "iCP_05ImageFX_01", ref l_U903, 0, 20000, 1000 );
        ADD_WIDGET_INT_SLIDER( "iCP_05ImageFX_02", ref l_U904, 0, 20000, 1000 );
        STOP_WIDGET_GROUP();
        l_U905 = 1;
    }
    return;
}

/* P_ADD_WIDGET_VECTOR_SLIDER */ void sub_13518(int iParam0, unknown uParam1, unknown uParam2)
{
    START_WIDGET_GROUP( uParam1 );
    ADD_WIDGET_FLOAT_SLIDER( "x", iParam0 + 0, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "y", iParam0 + 4, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "z", iParam0 + 8, 60536, 5000, uParam2 );
    STOP_WIDGET_GROUP();
    return;
}

/* P_HANDLE_EVENTS */ void sub_15012()
{
    int iVar2;
    unknown uVar3;

    iVar2 = l_U126;
    uVar3 =  /* PLAYER_PED_ID */ sub_3297();
    switch (l_U126)
    {
        case 0:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
        case 1:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
        }
         /* P_INITIALIZE_SCRIPT_DATA */ sub_15309();
         /* P_SET_STATIC_DATA */ sub_15863();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U126 = 2;
        break;
        case 2:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        }
         /* P_TPP2_REQUEST_PERSISTENT_ASSETS */ sub_17436();
         /* P_TPP2_REQUEST_NONPERSISTENT_ASSETS */ sub_26413();
        l_U126 = 3;
        break;
        case 3:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        }
        if (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_30650( ref g_U1368 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_30259( ref g_U1429 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_29857( ref g_U1247 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_29460( ref g_U1030 )))))
        {
            if ((NOT l_U90._fU0) AND (g_U829 == 5))
            {
                l_U126 = 4;
            }
            else
            {
                l_U126 = 6;
            }
        }
        break;
        case 4:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        }
        l_U128 = 0;
        g_U846[5] = 1;
         /* P_TP_ACTIVATE_ALL_CONTROL_ROOM_PAINKILLERS */ sub_31192();
        if (( /* HAS_SAVEFILE_LOADED */ sub_31418( ref l_U90 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_11054(  /* PLAYER_PED_ID */ sub_3297(), 1478009203, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10259(  /* PLAYER_PED_ID */ sub_3297(), -1464892298, 0, 50, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10259(  /* PLAYER_PED_ID */ sub_3297(), -612753081, 1, 50, 0 );
            l_U126 = 5;
             /* WRITESCRIPTLOG */ sub_672( "CR", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U126 = 6;
             /* WRITESCRIPTLOG */ sub_672( "CR", "eCheckpointState = CP_CREATE_TRAMS", 0 );
        }
        break;
        case 5:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_3297(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_3297(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 0 ) ))))
            {
                g_U830 = 5;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_32045( ref l_U90, g_U830,  /* PLAYER_PED_ID */ sub_3297(), g_U2014[5], g_U2129[5], g_U2168[5], g_U2207[5], 1 );
                l_U126 = 6;
            }
        }
        break;
        case 6:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_CREATE_TRAMS", 0 );
             /* P_T2_CREATE_TRAM */ sub_36731( ref g_U4552, g_U4552._fU80, 1, ref g_U2302 );
             /* P_T2_CREATE_TRAM */ sub_36731( ref g_U4353, g_U4353._fU80, 1, ref g_U2302 );
        }
        if (( /* F_TP_TRAM_EXISTS */ sub_39742( ref g_U4353 )) AND ( /* F_TP_TRAM_EXISTS */ sub_39742( ref g_U4552 )))
        {
             /* P_T2_ACTIVATE_ALL_PLACEMENTS */ sub_39842();
             /* P_T2_CREATE_PLACEMENTS */ sub_40038( ref g_U4353._fU4, ref g_U2302 );
            l_U126 = 7;
        }
        break;
        case 7:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_CREATE_PEDS", 0 );
            l_U282 = 0;
            l_U281 = 1;
            l_U375 = 0;
            l_U374 = 1;
        }
        if ( /* F_TPP2_SPAWN_UFE_WAVE_1 */ sub_41932())
        {
            if ( /* F_TPP2_SPAWN_UFE_WAVE_2 */ sub_44447())
            {
                l_U126 = 8;
            }
        }
        break;
        case 8:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        if (g_U846[5])
        {
             /* P_TP_CREATE_ESCALATORS */ sub_45182();
             /* P_TP_CREATE_GATE */ sub_46184( 1 );
             /* P_TP_CREATE_CONTROL_ROOM_PAINKILLERS */ sub_46526();
             /* P_TP_CREATE_SUICIDE_DOORS */ sub_46964();
             /* P_TP_CREATE_BUTTON */ sub_47669();
             /* P_TP_LIGHTS_OFF */ sub_47907();
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
            {
                if ((NOT (HAS_PED_GOT_SPECIFIC_WEAPON(  /* PLAYER_PED_ID */ sub_3297(), 724901397 ))) AND (g_U829 == 5))
                {
                     /* P_CREATE_SNIPER_RIFLE */ sub_48066();
                }
            }
            l_U126 = 9;
        }
        break;
        case 9:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_MID_06", 0 );
             /* P_TP_START_VIG_MID06_FIN */ sub_48288();
            SET_OBJECT_VISIBLE( g_U3014, 1 );
             /* NIS_CREATE_STATIC_CAM */ sub_50330( ref l_U774, -76.48170000, 97.07248000, -2.25864300, -25.75284000, -0.00001700, 114.48420000, 1110704128, 1000 );
             /* NIS_PLAY_CAM */ sub_50565( ref l_U774 );
            PLAY_SOUND_FRONTEND( -1, "S_AIR_TRAM_CONTROL_BUTTON_PRESS" );
             /* P_CREATE_AND_START_TIMER */ sub_50774( ref l_U608, l_U607 );
             /* P_CREATE_AND_START_TIMER */ sub_50774( ref l_U617, l_U626 );
             /* P_CREATE_AND_START_TIMER */ sub_50774( ref l_U739, l_U748 );
             /* P_CREATE_AND_START_TIMER */ sub_50774( ref l_U671, l_U680 );
            if (NOT AUDIO_IS_MUSIC_PLAYING())
            {
                 /* WRITESCRIPTLOG */ sub_672( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_2 mood. Fade in 0 sec", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_2", "FINALE_01_2", 0.00000000, 0, 1000, -1082130432, 0 );
            }
             /* P_TP_CLEANUP_CONCESSIONS_BODIES_IN_DOORWAY */ sub_51045();
            DO_SCREEN_FADE_IN( 0 );
        }
        if ( /* F_T2_DOES_TRAM_EXIST */ sub_51358( ref g_U4751 ))
        {
             /* P_TP_HANDLE_TRAM_SCRIPT_STREAMS */ sub_51456( ref g_U4751 );
             /* P_TP_HANDLE_TRAM_ARRIVE_DEPART */ sub_51674( ref g_U4751 );
        }
         /* P_TP_HANDLE_TRAM_ARRIVE_DEPART */ sub_51674( ref g_U4552 );
        if ( /* ISTIMERDONE */ sub_4475( ref l_U608 ))
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "Activating power", 0 );
             /* P_TP_POWER_ON */ sub_55630();
            SET_OBJECT_VISIBLE( g_U3014, 0 );
        }
        if ( /* ISTIMERDONE */ sub_4475( ref l_U617 ))
        {
            if (NOT (IS_VEHICLE_DEAD( g_U4552._fU0 )))
            {
                PLAY_SOUND_FROM_VEHICLE( -1, ref g_U2451, g_U4552._fU0 );
            }
        }
        if ( /* ISTIMERDONE */ sub_4475( ref l_U671 ))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_57266( "SAIR_MTTPWR", ref l_U661 );
        }
        if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_FIN_CP_05", "MID_06B_FIN_BUTTON_PRESS_CAM" )) - 25))
        {
             /* MAL_PEDPLAYERACTIONTREENODE */ sub_58617(  /* PLAYER_PED_ID */ sub_3297(), "/Global/VIG_MID06_FIN/vig_mid06_fin_seq/MAX/blendout" );
            WAIT( 0 );
             /* MAL_TELEPORTPLAYER */ sub_58723( -77.80000000, 96.50000000, -4.41700000, 180, 0, 0 );
            CAMERA_ANIMATED_STOP( 0, 0 );
            WAIT( 0 );
             /* NIS_RETURN_TO_GAMEPLAY_CAM */ sub_58910( 6000, 1, 0, 0, 0, 0 );
             /* P_TP_RESET_UFE_ROOM_NAMES */ sub_59036();
            if ( /* F_T2_DOES_TRAM_EXIST */ sub_51358( ref g_U4751 ))
            {
                g_U4751._fU72 = 4;
                g_U4751._fU76 = 1;
            }
        }
        if ( /* ISTIMERDONE */ sub_4475( ref l_U739 ))
        {
             /* P_ACTIVATEPEDARRAY */ sub_59352( ref l_U232 );
            g_U4552._fU72 = 0;
            g_U4552._fU76 = 1;
        }
         /* P_HANDLE_IMAGEFX_CP_05 */ sub_59556();
        if ((ISEQ_QUERY_ENTITY_STATE( -1774213497, "MAX", 6 )) || (ISEQ_QUERY_ENTITY_STATE( -1774213497, "MAX", 5 )))
        {
             /* P_TP_END_VIG_MID06_FIN */ sub_59814();
            l_U126 = 10;
        }
        break;
        case 10:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_TRAM_BACKUP_COMBAT", 0 );
            if (g_U830 != 5)
            {
                g_U830 = 5;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_32045( ref l_U90, g_U830,  /* PLAYER_PED_ID */ sub_3297(), g_U2014[5], g_U2129[5], g_U2168[5], g_U2207[5], 1 );
            }
             /* P_TPP2_START_GAMEPLAY */ sub_60422();
             /* P_TP_SETUP_AGA */ sub_60571();
             /* P_CREATE_AND_START_TIMER */ sub_50774( ref l_U671, l_U680 );
             /* P_CREATE_AND_START_TIMER */ sub_50774( ref l_U750, l_U759 );
             /* P_CREATE_AND_START_TIMER */ sub_50774( ref l_U760, l_U769 );
             /* DISABLETIMER */ sub_15424( ref l_U385 );
             /* P_T2_CLEANUP_TRAM */ sub_7984( ref g_U4751 );
            l_U749 = 0;
            l_U280 = 0;
        }
        if ((NOT g_U861[6]._fU36) AND ((g_U861[4]._fU40 == 4) || (g_U861[4]._fU40 == 0)))
        {
            g_U861[6]._fU36 = 1;
        }
         /* P_TP_HANDLE_TRAM_ARRIVE_DEPART */ sub_51674( ref g_U4353 );
         /* P_TP_HANDLE_TRAM_ARRIVE_DEPART */ sub_51674( ref g_U4552 );
        if (NOT l_U280)
        {
            if ((g_U4552._fU72 == 2) || (g_U4552._fU72 == 1))
            {
                 /* P_TP_UFE_WAVE_1_START_SUPPRESSING_FIRE */ sub_61178();
                l_U280 = 1;
            }
        }
        if ((g_U4552._fU76) AND (g_U4552._fU72 == 2))
        {
             /* P_TP_UFE_WAVE_1_ATTACK */ sub_61695();
             /* P_CREATE_AND_START_TIMER */ sub_50774( ref l_U270, l_U279 );
        }
        if ( /* ISTIMERDONE */ sub_4475( ref l_U750 ))
        {
            if (NOT (IS_VEHICLE_DEAD( g_U4353._fU0 )))
            {
                PLAY_SOUND_FROM_VEHICLE( -1, ref g_U2451, g_U4353._fU0 );
            }
        }
        if ( /* ISTIMERDONE */ sub_4475( ref l_U760 ))
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "Starting the player's tram", 0 );
             /* P_ACTIVATEPEDARRAY */ sub_59352( ref l_U336 );
            g_U4353._fU72 = 0;
            g_U4353._fU76 = 1;
            l_U749 = 1;
        }
        if (((l_U270._fU16) || ( /* ISTIMERDONE */ sub_4475( ref l_U270 ))) AND (g_U4552._fU72 == 2))
        {
            if ((NOT ( /* F_TPP2_ARE_ANY_UFE_INSIDE_UFE_TRAM */ sub_63596())) AND ((NOT ( /* F_TPP2_IS_PED_WITHIN_DISTANCE_TO_UFE_TRAM */ sub_63381( ref uVar3, l_U659 ))) AND (NOT ( /* F_TPP2_IS_PED_INSIDE_UFE_TRAM */ sub_63197( ref uVar3 )))))
            {
                g_U4552._fU72 = 3;
                g_U4552._fU76 = 1;
            }
        }
        if ((g_U4552._fU76) AND (g_U4552._fU72 == 4))
        {
            if (NOT (IS_VEHICLE_DEAD( g_U4552._fU0 )))
            {
                PLAY_SOUND_FROM_VEHICLE( -1, ref g_U2459, g_U4552._fU0 );
            }
        }
        if ((g_U4353._fU76) AND (g_U4353._fU72 == 2))
        {
             /* P_TP_UFE_WAVE_2_START_SUPPRESSING_FIRE */ sub_63900();
            if (NOT (IS_PED_DEAD( l_U232[1] )))
            {
                SET_PED_FLAG_LOCK_TO_COVER( l_U232[1], 0 );
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U232[1], 0 );
                 /* P_TETHERPED */ sub_61834( ref l_U565, l_U232[1], 1 );
            }
        }
        if ((g_U4353._fU76) AND (g_U4353._fU72 == 2))
        {
             /* P_TP_UFE_WAVE_2_ATTACK */ sub_64448();
             /* P_CREATE_AND_START_TIMER */ sub_50774( ref l_U385, l_U394 );
        }
        if ( /* ISTIMERDONE */ sub_4475( ref l_U385 ))
        {
             /* P_TP_START_AGA */ sub_64872();
            if (NOT (IS_PED_DEAD( l_U336[0] )))
            {
                SET_PED_FLAG_LOCK_TO_COVER( l_U336[0], 0 );
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U336[0], 0 );
                 /* P_TETHERPED */ sub_61834( ref l_U565, l_U336[0], 1 );
            }
        }
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() ))) AND (NOT l_U395))
        {
            if ((IS_PED_SHOOTING(  /* PLAYER_PED_ID */ sub_3297() )) || ((( /* F_GET_NUM_PEDS_SHOOTING_IN_ARRAY */ sub_65098( ref l_U232, 0, -1082130432 )) + ( /* F_GET_NUM_PEDS_SHOOTING_IN_ARRAY */ sub_65098( ref l_U336, 0, -1082130432 ))) > 0))
            {
                 /* WRITESCRIPTLOG */ sub_672( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_2_4 mood. Fade in 2 sec", 0 );
                AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_2_4", "FINALE_01_2_4", 0.00000000, 2000, 7000, -1082130432, 0 );
                l_U395 = 1;
            }
        }
        if ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65687( ref l_U336 )) == 0) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65687( ref l_U232 )) == 0))
        {
            if ( /* F_ISPEDINTRIGGERBOX */ sub_62834(  /* PLAYER_PED_ID */ sub_3297(), l_U396 ))
            {
                l_U126 = 12;
            }
            else if (NOT (IS_BULLET_CAMERA_RUNNING( 0 )))
            {
                l_U126 = 11;
            }
        }
        break;
        case 11:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_EVERYBODY_DEAD", 0 );
             /* P_CREATE_AND_START_TIMER */ sub_50774( ref l_U681, 1000 );
            l_U703 = 1;
        }
         /* P_TP_HANDLE_PAINKILLER_DIALOGUE */ sub_65954();
        if (g_U4353._fU72 == 2)
        {
            if ((NOT ( /* F_IS_PED_PLAYING_SPEECH */ sub_66384(  /* PLAYER_PED_ID */ sub_3297() ))) AND ( /* F_ISPEDINTRIGGERBOX */ sub_62834(  /* PLAYER_PED_ID */ sub_3297(), l_U396 )))
            {
                l_U126 = 13;
            }
        }
        break;
        case 12:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_WAIT_FOR_BULLET_CAM", 0 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
        }
        if (NOT (IS_BULLET_CAMERA_RUNNING( 0 )))
        {
            l_U126 = 13;
        }
        break;
        case 13:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_WAIT_FOR_TRAM_TO_DEPART", 0 );
            l_U770 =  /* F_REQUEST_SCRIPT_STREAM */ sub_66735( ref g_U2419 );
            g_U4353._fU72 = 3;
            g_U4353._fU76 = 1;
             /* NIS_PRE_SETUP */ sub_48373( 1, 0, 0, 1 );
             /* MAL_SETPEDVISIBLE */ sub_67026(  /* PLAYER_PED_ID */ sub_3297(), 0 );
             /* NIS_CREATE_STATIC_CAM */ sub_50330( ref l_U805, -75.46000000, 91.37000000, -4.04000000, 10.52000000, 0.00000000, -154.02000000, 45, 60000 );
             /* NIS_PLAY_STATIC_CAMERA */ sub_67304( ref l_U805 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
             /* P_CAM_SHAKE_CREATE_STRUCT */ sub_67437( ref l_U836, 4, 1.00000000, 10, -1, -1, 0, 0 );
             /* P_CAM_SHAKE_ACTIVATE */ sub_67978( ref l_U836 );
            if (NOT ( /* F_IS_PED_PLAYING_SPEECH */ sub_66384(  /* PLAYER_PED_ID */ sub_3297() )))
            {
                 /* P_SPEECH_PLAY_MONOLOGUE */ sub_57266( "SAIR_MXTRMSTR", ref l_U661 );
            }
             /* P_TP_CLEANUP_BODIES_IN_DOORWAY */ sub_68109();
             /* WRITESCRIPTLOG */ sub_672( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_2 mood. Fade in 7 sec", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_2", "FINALE_01_2", 0.00000000, 7000, 3000, -1082130432, 0 );
        }
         /* P_TP_HANDLE_TRAM_ARRIVE_DEPART */ sub_51674( ref g_U4353 );
         /* P_CAM_SHAKE_HANDLE */ sub_68623( ref l_U836 );
        if ((g_U4353._fU76) AND (g_U4353._fU72 == 4))
        {
            PLAY_SCRIPT_STREAM_FRONTEND( l_U770 );
        }
        if ( /* F_TRAIN_AT_NODE */ sub_53712( ref g_U4353._fU0, l_U771, 1073741824 ))
        {
             /* P_CAM_SHAKE_FORCE_DEACTIVATE */ sub_69237( ref l_U836, 0 );
             /* MAL_SETPEDVISIBLE */ sub_67026(  /* PLAYER_PED_ID */ sub_3297(), 1 );
            l_U126 = 14;
        }
        break;
        case 14:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "eCheckpointState = CP_FINISHED", 0 );
             /* P_T2_UPDATE_EXISTING_PLACEMENTS */ sub_69499();
            g_U846[6] = 1;
        }
        if (NOT HAS_CUTSCENE_FINISHED())
        {
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U126 = 0;
        }
        break;
    }
    if (l_U126 != iVar2)
    {
        l_U127 = 1;
    }
    else
    {
        l_U127 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_15309()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U281 = 0;
    l_U374 = 0;
    l_U127 = 1;
    l_U130 = 0;
    l_U280 = 0;
    l_U703 = 0;
     /* DISABLETIMER */ sub_15424( ref l_U693 );
    l_U395 = 0;
    g_U4353._fU80 = {-74.25000000, -6.75000000, -5.86000000};
    g_U4353._fU92 = {-375.27300000, 631.08000000, -5.86000000};
    g_U4353._fU104 = {-69.25000000, 83.48000000, -5.86000000};
    g_U4353._fU344 = g_U4956;
    g_U4353._fU336 = 0;
    g_U4353._fU340 = 0;
    g_U4353._fU332 = 0;
    g_U4353._fU72 = 2;
    g_U4353._fU76 = 1;
    g_U4353._fU348 = 0;
    g_U4353._fU352 = 0;
    g_U4353._fU356 = 0;
    g_U4353._fU360 = 0;
    g_U4552._fU80 = {-85.24000000, -6.75000000, -5.86000000};
    g_U4552._fU92 = {-74.97328000, 167.39750000, -4.24375000};
    g_U4552._fU104 = {-90.35000000, 83.48000000, -5.86000000};
    g_U4552._fU344 = g_U4956;
    g_U4552._fU336 = 1;
    g_U4552._fU340 = 0;
    g_U4552._fU332 = 1;
    g_U4552._fU72 = 2;
    g_U4552._fU76 = 1;
    g_U4552._fU348 = 0;
    g_U4552._fU352 = 0;
    g_U4552._fU356 = 0;
    g_U4552._fU360 = 0;
    AUD_SET_IS_POWER_ON( 0 );
    return;
}

/* DISABLETIMER */ void sub_15424(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* P_SET_STATIC_DATA */ void sub_15863()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_SET_STATIC_DATA", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15964( ref l_U179[0], -74.25000000, -5.14000000, -5.86000000, 0.00000000, -15567472, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15964( ref l_U179[1], -74.25000000, -5.14000000, -5.86000000, 0.00000000, 1087318400, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15964( ref l_U179[2], -74.25000000, -5.14000000, -5.86000000, 0.00000000, 1057900324, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15964( ref l_U179[3], -74.25000000, -5.14000000, -5.86000000, 0.00000000, 1340644225, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15964( ref l_U283[0], -85.24000000, -6.75000000, -5.86000000, 0.00000000, -1370475429, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15964( ref l_U283[1], -85.24000000, -6.75000000, -5.86000000, 0.00000000, -348475733, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15964( ref l_U283[2], -85.24000000, -6.75000000, -5.86000000, 0.00000000, 360847804, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_15964( ref l_U283[3], -85.24000000, -6.75000000, -5.86000000, 0.00000000, -1902917923, 7, 3, 2, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_16488( ref l_U396, "TRIGGER_INSIDE_TRAM", -68.79000000, 66.86000000, -4.89000000, 4.91000000, 47.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16488( ref l_U417, "TRIGGER_INSIDE_CONTROL_ROOM", -78.25000000, 94.73000000, -4.89000000, 7.52000000, 8.35000000, 3.00000000, 0.00000000, -0.00043713, -90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16488( ref l_U438[0], "TRIGGER_TRAM_ENTRANCE_0", -72.17000000, 46.23000000, -4.50000000, 3.00000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16488( ref l_U438[1], "TRIGGER_TRAM_ENTRANCE_1", -72.15000000, 52.17000000, -4.50000000, 3.00000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16488( ref l_U438[2], "TRIGGER_TRAM_ENTRANCE_2", -72.16000000, 63.38000000, -4.50000000, 3.00000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16488( ref l_U438[3], "TRIGGER_TRAM_ENTRANCE_3", -72.14000000, 69.41000000, -4.50000000, 3.00000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16488( ref l_U438[4], "TRIGGER_TRAM_ENTRANCE_4", -72.15000000, 80.55000000, -4.50000000, 3.00000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_16488( ref l_U438[5], "TRIGGER_TRAM_ENTRANCE_5", -72.17000000, 86.49000000, -4.50000000, 3.00000000, 2.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_17266( ref l_U565, "TETH_TP_PLATFORM", -76.57000000, 66.18000000, -4.47000000, 21.02000000, 64.57000000, 4.04000000, 0.00000000, 0.00000000, 0.00000000, 1 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_15964(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_16488(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_17266(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_TPP2_REQUEST_PERSISTENT_ASSETS */ void sub_17436()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_REQUEST_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_17539( ref l_U704, ref g_U1030 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_20461( ref l_U730, ref g_U1247 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22508( "LEVEL_S_FIN_CP_05", ref g_U1429 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_24419( "SCRIPT_MISSION\S_AIRPORT_TRAM", ref g_U1950 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_24419( "SCRIPT_MISSION\S_AIR_PLATFORM_01", ref g_U1950 );
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_REQUEST_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_17539(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_17612( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_17612(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_17679( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17937( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_17679(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17937( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17937( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17937( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19468( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17937( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_17937( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_17937(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17998( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_17998(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_19468(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_20461(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_20535( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_20535(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_20589( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20850( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_20589(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20850( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20850( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20850( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19468( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20850( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_20850( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_20850(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17998( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_22508(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_22560( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22812( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_22560(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22812( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22812( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22812( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19468( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22812( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22812( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_22812(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17998( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_24419(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_24472( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24727( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_24472(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24727( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24727( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24727( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_19468( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24727( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_24727( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_24727(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17998( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_TPP2_REQUEST_NONPERSISTENT_ASSETS */ void sub_26413()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_REQUEST_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_26523( -1774213497, ref g_U1368 );
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_REQUEST_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_26523(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_26584( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26834( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_26584(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26834( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26834( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26834( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26834( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_19468( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_19468( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26834( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_26834( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_26834(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_17998( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_29460(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_29857(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_30259(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_30650(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* P_TP_ACTIVATE_ALL_CONTROL_ROOM_PAINKILLERS */ void sub_31192()
{
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_ACTIVATE_ALL_CONTROL_ROOM_PAINKILLERS start", 0 );
    for ( I = 0; I < g_U2818; I++ )
    {
        g_U2820[I] = 1;
    }
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_ACTIVATE_ALL_CONTROL_ROOM_PAINKILLERS end", 0 );
    return;
}

/* HAS_SAVEFILE_LOADED */ int sub_31418(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_672( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_8562( uParam0,  /* PLAYER_PED_ID */ sub_3297() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_32045(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_672( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_672( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_11828( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_32336( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32813( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32813( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33073( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32813( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33073( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33073( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32813( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33073( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33073( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33073( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32813( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33073( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33073( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33073( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_33073( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_34653( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_672( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_32336(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_8843( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_672( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_672( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_32813(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_33073(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_34653(int iParam0)
{
     /* WRITE_STRING */ sub_10663( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_34741( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_34818( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_34818( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_34818( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_34818( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_34818( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_35688( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU52 );
     /* WRITE_STRING */ sub_10663( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU96 );
     /* WRITE_STRING */ sub_10663( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU100 );
     /* WRITE_STRING */ sub_10663( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU104 );
     /* WRITE_STRING */ sub_10663( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU108 );
     /* WRITE_STRING */ sub_10663( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU112 );
     /* WRITE_STRING */ sub_10663( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU116 );
     /* WRITE_STRING */ sub_10663( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU120 );
     /* WRITE_STRING */ sub_10663( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU124 );
     /* WRITE_STRING */ sub_10663( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU128 );
     /* WRITE_STRING */ sub_10663( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_34987( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_34987( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_34987( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_34741(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_34818(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_34987(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_35688(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* P_T2_CREATE_TRAM */ void sub_36731(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4, unknown uParam5)
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_T2_CREATE_TRAM", 0 );
    iParam0->_fU0 =  /* F_CREATE_TRAM */ sub_36831( uParam1, uParam5, iParam0->_fU332, iParam0->_fU348, iParam0->_fU352, iParam0->_fU356, iParam0->_fU360, 0 );
     /* P_SET_TRAM_SPEED */ sub_37387( iParam0->_fU0, 0.00000000 );
    if (NOT (IS_VEHICLE_DEAD( iParam0->_fU0 )))
    {
        iParam0->_fU8 = GET_TRAIN_CABOOSE( iParam0->_fU0 );
        iParam0->_fU4 = GET_TRAIN_CARRIAGE( iParam0->_fU0, 1 );
        if (iParam0->_fU332 == 0)
        {
            if (bParam4)
            {
                iParam0->_fU12 =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2378, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
            }
            iParam0->_fU24 =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2381, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        }
        else if (bParam4)
        {
            iParam0->_fU12 =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2379, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        }
        iParam0->_fU24 =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2382, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );;
        if (bParam4)
        {
            ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU12, iParam0->_fU0, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
            SET_OBJECT_COLLISION( iParam0->_fU12, 1 );
        }
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU24, iParam0->_fU0, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        iParam0->_fU36[0] =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2384, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        iParam0->_fU36[1] =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2385, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU36[0], iParam0->_fU0, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU36[1], iParam0->_fU0, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        if (NOT (IS_STRING_NULL( uParam5 )))
        {
            if (bParam4)
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU12, uParam5 );
            }
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU24, uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU36[0], uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU36[1], uParam5 );
        }
    }
    if (NOT (IS_VEHICLE_DEAD( iParam0->_fU4 )))
    {
        if (bParam4)
        {
            iParam0->_fU16 =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2380, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
            ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU16, iParam0->_fU4, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
            SET_OBJECT_COLLISION( iParam0->_fU16, 1 );
        }
        iParam0->_fU28 =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2383, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU28, iParam0->_fU4, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        iParam0->_fU48[0] =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2386, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        iParam0->_fU48[1] =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2387, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU48[0], iParam0->_fU4, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU48[1], iParam0->_fU4, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        if (NOT (IS_STRING_NULL( uParam5 )))
        {
            if (bParam4)
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU16, uParam5 );
            }
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU28, uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU48[0], uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU48[1], uParam5 );
        }
    }
    if (NOT (IS_VEHICLE_DEAD( iParam0->_fU8 )))
    {
        if (iParam0->_fU332 == 0)
        {
            if (bParam4)
            {
                iParam0->_fU20 =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2379, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
            }
            iParam0->_fU32 =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2382, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        }
        else if (bParam4)
        {
            iParam0->_fU20 =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2378, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        }
        iParam0->_fU32 =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2381, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );;
        if (bParam4)
        {
            ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU20, iParam0->_fU8, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
            SET_OBJECT_COLLISION( iParam0->_fU20, 1 );
        }
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU32, iParam0->_fU8, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        iParam0->_fU60[0] =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2384, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        iParam0->_fU60[1] =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2385, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU60[0], iParam0->_fU8, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU60[1], iParam0->_fU8, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        if (NOT (IS_STRING_NULL( uParam5 )))
        {
            if (bParam4)
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU20, uParam5 );
            }
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU32, uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU60[0], uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU60[1], uParam5 );
        }
    }
    return;
}

/* F_CREATE_TRAM */ void sub_36831(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, boolean bParam5, boolean bParam6, boolean bParam7, boolean bParam8, boolean bParam9)
{
    unknown Result;
    unknown uVar13;
    unknown uVar14;

     /* WRITESCRIPTLOG */ sub_672( "GA", "F_CREATE_TRAM start", 0 );
    Result = CREATE_MISSION_TRAIN( uParam4, uParam0, 1 );
    if (bParam9)
    {
        while (NOT (DOES_VEHICLE_EXIST( Result )))
        {
             /* WRITESCRIPTLOG */ sub_672( "GA", "Waiting for tram to exist.", 0 );
            WAIT( 0 );
        }
    }
    if (NOT (IS_VEHICLE_DEAD( Result )))
    {
        SET_TRAIN_LEAVES_STATION( Result );
        SET_TRAIN_SPEED( Result, 0.00000000 );
        SET_TRAIN_CRUISE_SPEED( Result, 0.00000000 );
        SET_TRAIN_STOPS_FOR_STATIONS( Result, 0 );
        if (NOT (IS_STRING_NULL( uParam3 )))
        {
            SET_ROOM_FOR_VEHICLE_BY_NAME( Result, uParam3 );
        }
        SET_VEHICLE_EXTRA( Result, 3, NOT bParam5 );
        SET_VEHICLE_EXTRA( Result, 4, NOT bParam7 );
        SET_VEHICLE_EXTRA( Result, 5, NOT bParam6 );
        SET_VEHICLE_EXTRA( Result, 6, NOT bParam8 );
        uVar13 = GET_TRAIN_CARRIAGE( Result, 1 );
        uVar14 = GET_TRAIN_CABOOSE( Result );
    }
    if (NOT (IS_VEHICLE_DEAD( uVar13 )))
    {
        if (NOT (IS_STRING_NULL( uParam3 )))
        {
            SET_ROOM_FOR_VEHICLE_BY_NAME( uVar13, uParam3 );
        }
        SET_VEHICLE_EXTRA( uVar13, 3, NOT bParam5 );
        SET_VEHICLE_EXTRA( uVar13, 4, NOT bParam7 );
        SET_VEHICLE_EXTRA( uVar13, 5, NOT bParam6 );
        SET_VEHICLE_EXTRA( uVar13, 6, NOT bParam8 );
    }
    if (NOT (IS_VEHICLE_DEAD( uVar14 )))
    {
        if (NOT (IS_STRING_NULL( uParam3 )))
        {
            SET_ROOM_FOR_VEHICLE_BY_NAME( uVar14, uParam3 );
        }
        SET_VEHICLE_EXTRA( uVar14, 3, NOT bParam5 );
        SET_VEHICLE_EXTRA( uVar14, 4, NOT bParam7 );
        SET_VEHICLE_EXTRA( uVar14, 5, NOT bParam6 );
        SET_VEHICLE_EXTRA( uVar14, 6, NOT bParam8 );
    }
    return Result;
}

/* P_SET_TRAM_SPEED */ void sub_37387(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_VEHICLE_DEAD( uParam0 )))
    {
        SET_TRAIN_SPEED( uParam0, uParam1 );
        SET_TRAIN_CRUISE_SPEED( uParam0, uParam1 );
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_37561(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_37694( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* LOADMODEL */ void sub_37694(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_10663( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* F_TP_TRAM_EXISTS */ int sub_39742(int iParam0)
{
    if ((DOES_VEHICLE_EXIST( iParam0->_fU8 )) AND ((DOES_VEHICLE_EXIST( iParam0->_fU4 )) AND (DOES_VEHICLE_EXIST( iParam0->_fU0 ))))
    {
        return 1;
    }
    return 0;
}

/* P_T2_ACTIVATE_ALL_PLACEMENTS */ void sub_39842()
{
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_T2_ACTIVATE_ALL_PLACEMENTS start", 0 );
    for ( I = 0; I < g_U3350; I++ )
    {
        g_U3353[I] = 1;
    }
    g_U3356 = 1;
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_T2_ACTIVATE_ALL_PLACEMENTS end", 0 );
    return;
}

/* P_T2_CREATE_PLACEMENTS */ void sub_40038(unknown uParam0, unknown uParam1)
{
    vector[3] vVar4;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_T2_CREATE_PLACEMENTS", 0 );
    array(ref vVar4, 3);
    vVar4[0] = {-1.50000000, -8.35000000, 0.94500000};
    vVar4[1] = {-1.45000000, -8.35000000, 1.20700000};
    vVar4[2] = {-1.35000000, -8.35000000, 1.20700000};
     /* P_CREATE_TRAM_PAINKILLERS */ sub_40196( ref g_U3350, ref vVar4, ref g_U3353, (uParam0^), uParam1 );
     /* P_T2_CREATE_AMMO_BAG */ sub_40669( uParam0, g_U3322, g_U3325, uParam1 );
     /* P_T2_CREATE_RIFLE */ sub_41490( uParam0, g_U3329, g_U3332, uParam1 );
    return;
}

/* P_CREATE_TRAM_PAINKILLERS */ void sub_40196(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    vector vVar7;
    unknown uVar10;
    int I;
    vector vVar12;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;

    if (NOT (IS_VEHICLE_DEAD( uParam3 )))
    {
        vVar7 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( uParam3 )};
        uVar10 = GET_VEHICLE_HEADING( uParam3 );
        for ( I = 0; I < (uParam0^); I++ )
        {
            if ((uParam2^)[I])
            {
                if (DOES_PLACEMENT_EXIST( (uParam0^)[I] ))
                {
                     /* CLEANPLACEMENT */ sub_7018( (uParam0^)[I] );
                }
                vVar12 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", VECTOR_ROTATE_AXIS( (uParam1^)[I], uVar10, "z" )};
                uVar15 = {vVar12 + vVar7};
                (uParam0^)[I] =  /* CREATEPLACEMENT */ sub_40406( -4072149, uVar15, 0.00000000, 0.00000000, 0.00000000, 1, 1, 0, 1119092736 );
                if ((DOES_PLACEMENT_EXIST( (uParam0^)[I] )) AND (NOT (IS_STRING_NULL( uParam4 ))))
                {
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( (uParam0^)[I], uParam4 );
                }
            }
        }
    }
    return;
}

/* CREATEPLACEMENT */ void sub_40406(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_T2_CREATE_AMMO_BAG */ void sub_40669(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    unknown uVar10;
    vector vVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_SPAWN_AMMO_BAG_AND_SNIPER_RIFLE", 0 );
    if (NOT (IS_VEHICLE_DEAD( (uParam0^) )))
    {
        if (DOES_PLACEMENT_EXIST( g_U3321 ))
        {
             /* CLEANPLACEMENT */ sub_7018( g_U3321 );
        }
        uVar10 = GET_VEHICLE_HEADING( (uParam0^) );
        vVar11 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", VECTOR_ROTATE_AXIS( uParam1, uVar10, "z" )};
        uVar14 = {vVar11 + (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( (uParam0^) )))};
        uVar17 = {uParam4};
        uVar17._fU8 +=  /* FDEGREESTORADIANS */ sub_40863( uVar10 );
        DISPLAYF( "P_T2_CREATE_AMMO_BAG() - Creating ammo bag at {0}, {1}, {2}", 3, 769, uVar14._fU0, 769, uVar14._fU4, 769, uVar14._fU8 );
        g_U3321 = CREATE_AMMOBAG_PLACEMENT_ROTATE( uVar14, uVar17, 10.00000000, 3.00000000, 0, 1119092736 );
        if (DOES_PLACEMENT_EXIST( g_U3321 ))
        {
             /* P_SETUP_AMMO_BAG_DEFAULTS */ sub_41073( g_U3321 );
            SET_AMMOBAG_ENABLED( g_U3321, 1 );
            if (NOT (IS_STRING_NULL( uParam7 )))
            {
                ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U3321, uParam7 );
            }
        }
    }
    return;
}

/* FDEGREESTORADIANS */ float sub_40863(unknown uParam0)
{
    return uParam0 * (3.14159300 / 180.00000000);
}

/* P_SETUP_AMMO_BAG_DEFAULTS */ void sub_41073(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        SET_AMMOBAG_REGEN_TIME( uParam0, 10.00000000 );
        SET_AMMOBAG_REGEN_RANGE( uParam0, 3.00000000 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1088031219, 45 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 954369040, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1138793073, 95 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1087746638, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1295933220, 30 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1383321053, 85 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1481241171, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1889644301, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -790090695, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1742569970, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1575030772, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1622373246, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 558118158, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1701914198, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1126469201, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 936600426, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 205668857, 0 );
    }
    return;
}

/* P_T2_CREATE_RIFLE */ void sub_41490(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    unknown uVar10;
    vector vVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;

    if ((g_U3356) AND (NOT (IS_VEHICLE_DEAD( (uParam0^) ))))
    {
        if (DOES_PLACEMENT_EXIST( g_U3328 ))
        {
             /* CLEANPLACEMENT */ sub_7018( g_U3328 );
        }
        uVar10 = GET_VEHICLE_HEADING( (uParam0^) );
        vVar11 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", VECTOR_ROTATE_AXIS( uParam1, uVar10, "z" )};
        uVar14 = {vVar11 + (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( (uParam0^) )))};
        uVar17 = {uParam4};
        uVar17._fU8 +=  /* FDEGREESTORADIANS */ sub_40863( uVar10 );
        DISPLAYF( "P_T2_CREATE_RIFLE() - Creating rifle at {0}, {1}, {2}", 3, 769, uVar14._fU0, 769, uVar14._fU4, 769, uVar14._fU8 );
        g_U3328 =  /* CREATEPLACEMENT */ sub_40406( 1216559076, uVar14, uVar17, 0, 0, 0, 1119092736 );
        uVar20 = GET_PICKUP_FROM_PLACEMENT( g_U3328 );
        if ((DOES_PLACEMENT_EXIST( g_U3328 )) AND (NOT (IS_STRING_NULL( uParam7 ))))
        {
            ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U3328, uParam7 );
        }
    }
    return;
}

/* F_TPP2_SPAWN_UFE_WAVE_1 */ int sub_41932()
{
    char[64] cVar2;
    unknown uVar18;
    unknown uVar19;

    switch (l_U281)
    {
        case 1:
        l_U282 = 0;
        l_U281 = 2;
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_TP_TramUFE_Wave1[", 64 );
        ConcatString(ref cVar2, l_U282, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        uVar18 = l_U282;
        l_U232[uVar18] =  /* CREATEPED */ sub_42111( ref l_U179[uVar18] );
        if (NOT (IS_PED_DEAD( l_U232[uVar18] )))
        {
             /* F_GIVEPEDWEAPON */ sub_11054( l_U232[uVar18], l_U255[uVar18], 25000, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10259( l_U232[uVar18], -1986694060, 5, 1, 0 );
            SET_PED_ALERTNESS( l_U232[uVar18], 3 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U232[uVar18], 1 );
            SET_ROOM_FOR_PED_BY_NAME( l_U232[uVar18], ref g_U2302 );
        }
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_42978( l_U232[uVar18], ref l_U378 );
         /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_43762( ref l_U232[uVar18], ref g_U2403, -1082130432, -1082130432 );
        switch (l_U237[uVar18])
        {
            case 0:
            uVar19 = g_U4552._fU0;
            break;
            case 1:
            uVar19 = g_U4552._fU4;
            break;
            case 2:
            uVar19 = g_U4552._fU8;
            break;
        }
        if (NOT (IS_VEHICLE_DEAD( uVar19 )))
        {
            ATTACH_PED_TO_VEHICLE( l_U232[uVar18], uVar19, 0, l_U242[uVar18], 90.00000000, 0.00000000, 0, 0, 0, 1 );
        }
        l_U282++;
        if (l_U282 >= l_U232)
        {
            l_U281 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_44091( ref l_U232, "TramUFE_Wave1" );
         /* P_DEACTIVATEPEDARRAY */ sub_44225( ref l_U232 );
        l_U281 = 4;
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* CREATEPED */ void sub_42111(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_37694( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_42602( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_42703( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_42602(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_42703(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_42978(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_10663( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_43148( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_43148( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_SETUP_AI_GROUP */ void sub_43148(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* P_SET_PED_TEMPLATE_AND_RANGES */ void sub_43762(unknown uParam0, unknown uParam1, float fParam2, float fParam3)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_44091(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_DEACTIVATEPEDARRAY */ void sub_44225(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_44279( (uParam0^)[I] );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_44279(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* F_TPP2_SPAWN_UFE_WAVE_2 */ int sub_44447()
{
    char[64] cVar2;
    unknown uVar18;
    unknown uVar19;

    switch (l_U374)
    {
        case 1:
        l_U375 = 0;
        l_U374 = 2;
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_TP_TramUFE_Wave2[", 64 );
        ConcatString(ref cVar2, l_U375, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        uVar18 = l_U375;
        l_U336[uVar18] =  /* CREATEPED */ sub_42111( ref l_U283[uVar18] );
        if (NOT (IS_PED_DEAD( l_U336[uVar18] )))
        {
             /* F_GIVEPEDWEAPON */ sub_11054( l_U336[uVar18], l_U359[uVar18], 25000, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_10259( l_U336[uVar18], -1986694060, 5, 1, 0 );
            SET_PED_ALERTNESS( l_U336[uVar18], 3 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U336[uVar18], 1 );
            SET_ROOM_FOR_PED_BY_NAME( l_U336[uVar18], ref g_U2302 );
        }
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_42978( l_U336[uVar18], ref l_U378 );
         /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_43762( ref l_U336[uVar18], ref g_U2403, -1082130432, -1082130432 );
        switch (l_U341[uVar18])
        {
            case 0:
            uVar19 = g_U4353._fU0;
            break;
            case 1:
            uVar19 = g_U4353._fU4;
            break;
            case 2:
            uVar19 = g_U4353._fU8;
            break;
        }
        if (NOT (IS_VEHICLE_DEAD( uVar19 )))
        {
            ATTACH_PED_TO_VEHICLE( l_U336[uVar18], uVar19, 0, l_U346[uVar18], 90.00000000, 0.00000000, 0, 0, 0, 1 );
        }
        l_U375++;
        if (l_U375 >= l_U336)
        {
            l_U374 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_44091( ref l_U336, "TramUFE_Wave2" );
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U378._fU0, 1 );
         /* P_DEACTIVATEPEDARRAY */ sub_44225( ref l_U336 );
        l_U374 = 4;
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_TP_CREATE_ESCALATORS */ void sub_45182()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CREATE_ESCALATORS", 0 );
     /* P_CREATE_ESCALATOR */ sub_45298( ref g_U3061, ref g_U3065, -81.63000000, 28.35000000, -2.17000000, 0.00000000, 0.00000000, 180.00000000, 1, ref g_U2302 );
     /* P_CREATE_ESCALATOR */ sub_45298( ref g_U3062, ref g_U3066, -78.15000000, 28.35000000, -2.17000000, 0.00000000, 0.00000000, 180.00000000, 0, ref g_U2302 );
     /* P_CREATE_ESCALATOR */ sub_45298( ref g_U3063, ref g_U3067, -81.63000000, 8.50000000, 2.20000000, 0.00000000, 0.00000000, 180.00000000, 1, ref g_U2294 );
     /* P_CREATE_ESCALATOR */ sub_45298( ref g_U3064, ref g_U3068, -78.15000000, 8.50000000, 2.20000000, 0.00000000, 0.00000000, 180.00000000, 0, ref g_U2294 );
    return;
}

/* P_CREATE_ESCALATOR */ void sub_45298(unknown uParam0, unknown uParam1, vector vParam2, unknown uParam5, unknown uParam6, unknown uParam7, boolean bParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_672( "AT", "P_CREATE_ESCALATOR", 0 );
    (uParam0^) =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2394, vParam2, uParam5, 0, 0, 0 );
    (uParam1^) =  /* CREATEOBJECTMOVER */ sub_45414( g_U2395, vParam2 - (vector( 0.00000000, 0.00000000, 2.38000000)), uParam5, 0, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( (uParam0^) ))
    {
        PLAY_OBJECT_ANIM( (uParam0^), "AP_EscSil_N1_Ad_H", "ap_anim", 0.00000000, 1, 0 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( (uParam0^), uParam9 );
        FREEZE_OBJECT_POSITION( (uParam0^), 1 );
        if (bParam8)
        {
            SET_OBJECT_ANIM_SPEED( (uParam0^), "AP_EscSil_N1_Ad_H", "ap_anim", 1.00000000 );
        }
        else
        {
            SET_OBJECT_ANIM_SPEED( (uParam0^), "AP_EscSil_N1_Ad_H", "ap_anim", -1.00000000 );
        }
    }
    if (DOES_OBJECT_EXIST( (uParam1^) ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( (uParam1^), uParam9 );
        FREEZE_OBJECT_POSITION( (uParam1^), 1 );
        if (bParam8)
        {
            SET_MOVER_SPEED( (uParam1^), 1.00000000, 1.00000000 );
        }
        else
        {
            SET_MOVER_SPEED( (uParam1^), -1.00000000, -1.00000000 );
        }
    }
    return;
}

/* CREATEOBJECTMOVER */ void sub_45414(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object mover with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_37694( uParam0, 1 );
    }
    Result = CREATE_OBJECT_MOVER( uParam0, uParam1, NOT bParam7, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* P_TP_CREATE_GATE */ void sub_46184(boolean bParam0)
{
     /* WRITESCRIPTLOG */ sub_672( "AT", "P_CREATE_GATE", 0 );
    g_U3069 =  /* CREATEOBJECTNOOFFSET */ sub_37561( 2070806350, g_U3070, 0.00000000, 0.00000000, g_U3073, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( g_U3069 ))
    {
        FREEZE_OBJECT_POSITION( g_U3069, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U3069, ref g_U2302 );
        SET_OBJECT_AS_PATH_OBSTACLE( g_U3069 );
        if (bParam0)
        {
            SET_OBJECT_COLLISION( g_U3069, 1 );
        }
        else
        {
            SET_OBJECT_COLLISION( g_U3069, 0 );
             /* MAL_PLAYOBJECTANIM */ sub_46414( g_U3069, "SECGATEBASE", "ap_anim", 0.00000000, 0.65000000 );
        }
    }
    return;
}

/* MAL_PLAYOBJECTANIM */ void sub_46414(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        PLAY_OBJECT_ANIM( uParam0, uParam1, uParam2, 0.00000000, 0, 1 );
        SET_OBJECT_ANIM_CURRENT_TIME( uParam0, uParam1, uParam2, uParam4 );
        SET_OBJECT_ANIM_SPEED( uParam0, uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_TP_CREATE_CONTROL_ROOM_PAINKILLERS */ void sub_46526()
{
    vector[3] vVar2;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    vector[3] vVar12;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CREATE_PAINKILLERS start", 0 );
    array(ref vVar2, 3);
    vVar2[0] = {-74.14300000, 96.53500000, -2.86200000};
    vVar2[1] = {-74.14300000, 96.41600000, -3.14500000};
    vVar2[2] = {-74.14300000, 96.61600000, -3.14500000};
    array(ref vVar12, 3);
    vVar12[0] = {0.00000000, 0.00000000, 0.60000000};
    vVar12[1] = {0.00000000, 0.00000000, 2.60000000};
    vVar12[2] = {0.00000000, 0.00000000, 0.00000000};
    for ( I = 0; I < g_U2818; I++ )
    {
        if ((NOT (DOES_PLACEMENT_EXIST( g_U2818[I] ))) AND (g_U2820[I]))
        {
            g_U2818[I] =  /* CREATEPLACEMENT */ sub_40406( -4072149, vVar2[I], vVar12[I], 1, 1, 0, 1119092736 );
            if (DOES_PLACEMENT_EXIST( g_U2818[I] ))
            {
                ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U2818[I], ref g_U2302 );
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CREATE_PAINKILLERS end", 0 );
    return;
}

/* P_TP_CREATE_SUICIDE_DOORS */ void sub_46964()
{
    vector[6] vVar2;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    vector[6] vVar21;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;
    unknown uVar36;
    unknown uVar37;
    unknown uVar38;
    unknown uVar39;
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CREATE_SUICIDE_DOORS start", 0 );
    array(ref vVar2, 6);
    vVar2[0] = {-72.03000000, 46.24000000, -4.47000000};
    vVar2[1] = {-72.03000000, 52.21000000, -4.47000000};
    vVar2[2] = {-72.03000000, 63.37000000, -4.47000000};
    vVar2[3] = {-72.03000000, 69.35000000, -4.47000000};
    vVar2[4] = {-72.03000000, 80.50000000, -4.47000000};
    vVar2[5] = {-72.03000000, 86.49000000, -4.47000000};
    array(ref vVar21, 6);
    vVar21[0] = {-87.73000000, 46.25000000, -4.47000000};
    vVar21[1] = {-87.73000000, 52.21000000, -4.47000000};
    vVar21[2] = {-87.73000000, 63.37000000, -4.47000000};
    vVar21[3] = {-87.73000000, 69.35000000, -4.47000000};
    vVar21[4] = {-87.73000000, 80.52000000, -4.47000000};
    vVar21[5] = {-87.73000000, 86.51000000, -4.47000000};
    for ( I = 0; I < 6; I++ )
    {
        if (NOT (DOES_OBJECT_EXIST( g_U2969[I] )))
        {
            g_U2969[I] =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2396, vVar2[I], 0.00000000, 0.00000000, 90.00000000, 0, 0, 0 );
            if (DOES_OBJECT_EXIST( g_U2969[I] ))
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U2969[I], ref g_U2302 );
            }
        }
        if (NOT (DOES_OBJECT_EXIST( g_U2990[I] )))
        {
            g_U2990[I] =  /* CREATEOBJECTNOOFFSET */ sub_37561( g_U2396, vVar21[I], 0.00000000, 0.00000000, 90.00000000, 0, 0, 0 );
            if (DOES_OBJECT_EXIST( g_U2990[I] ))
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U2990[I], ref g_U2302 );
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CREATE_SUICIDE_DOORS end", 0 );
    return;
}

/* P_TP_CREATE_BUTTON */ void sub_47669()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CREATE_BUTTON", 0 );
    if (NOT (DOES_OBJECT_EXIST( g_U3013 )))
    {
        g_U3013 =  /* CREATEOBJECTNOOFFSET */ sub_37561( -576031449, g_U3015, g_U3018, 0, 0, 0 );
        FREEZE_OBJECT_POSITION( g_U3013, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U3013, ref g_U2302 );
    }
    if (NOT (DOES_OBJECT_EXIST( g_U3014 )))
    {
        g_U3014 =  /* CREATEOBJECTNOOFFSET */ sub_37561( -338998251, g_U3021, g_U3024, 0, 0, 0 );
        FREEZE_OBJECT_POSITION( g_U3014, 1 );
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U3014, ref g_U2302 );
        SET_OBJECT_VISIBLE( g_U3014, 0 );
    }
    return;
}

/* P_TP_LIGHTS_OFF */ void sub_47907()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_LIGHTS_OFF start", 0 );
    g_U3041 = 0;
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_LIGHTS_OFF end", 0 );
    return;
}

/* P_CREATE_SNIPER_RIFLE */ void sub_48066()
{
    unknown uVar2;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_CREATE_SNIPER_RIFLE", 0 );
    l_U131 =  /* CREATEPLACEMENT */ sub_40406( 1216559076, l_U132, l_U135, 0, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U131 ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U131, ref g_U2302 );
        uVar2 = GET_PICKUP_FROM_PLACEMENT( l_U131 );
    }
    return;
}

/* P_TP_START_VIG_MID06_FIN */ void sub_48288()
{
    unknown uVar2;

     /* WRITESCRIPTLOG */ sub_672( "GA", "P_TP_START_VIG_MID06_FIN start", 0 );
     /* NIS_PRE_SETUP */ sub_48373( 1, 0, 0, 1 );
     /* P_HOLSTERRIFLEORDUALANDDRAWPISTOL */ sub_48552( ref uVar2, ref uVar2, 1, 0 );
     /* TELEPORTPED */ sub_49906(  /* PLAYER_PED_ID */ sub_3297(), g_U2014[5], g_U2129[5] );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
    {
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_3297(), 1 );
        ISEQ_REGISTER_ENTITY( -1774213497, "Max",  /* PLAYER_PED_ID */ sub_3297(), 0 );
    }
    ISEQ_START( -1774213497 );
    CAMERA_PLAY_ANIMATED( "LEVEL_S_FIN_CP_05", "MID_06B_FIN_BUTTON_PRESS_CAM", 1, -79.00500000, 97.64300000, -3.19800000, -185.06000000, 0, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2168[5], 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2207[5], 1065353216, 0 );
     /* CREATETIMER */ sub_4192( ref l_U885, l_U903, 1, 0 );
     /* STARTTIMER */ sub_4342( ref l_U885 );
     /* CREATETIMER */ sub_4192( ref l_U894, l_U904, 1, 0 );
     /* STARTTIMER */ sub_4342( ref l_U894 );
     /* WRITESCRIPTLOG */ sub_672( "GA", "P_TP_START_VIG_MID06_FIN end", 0 );
    return;
}

/* NIS_PRE_SETUP */ void sub_48373(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_3335(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_3297(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_3297() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_3297(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_HOLSTERRIFLEORDUALANDDRAWPISTOL */ void sub_48552(unknown uParam0, unknown uParam1, unknown uParam2, boolean bParam3)
{
    unknown uVar6;

    uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 0 );
    if (GET_DOES_WEAPON_EXIST( uVar6 ))
    {
        if ( /* F_ISPLAYERHOLDINGRIFLE */ sub_48628())
        {
            (uParam0^) = 1;
            SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 0, uParam2 );
            uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 0 );
            if (bParam3)
            {
                 /* WRITESCRIPTLOG */ sub_672( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: Waiting for player to holster RIFLE in right hand...", "###" );
                while (GET_DOES_WEAPON_EXIST( uVar6 ))
                {
                    WAIT( 0 );
                    uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 0 );
                }
            }
             /* WRITESCRIPTLOG */ sub_672( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: ...right hand RIFLE holstered!", "###" );
        }
    }
    uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 1, 0 );
    if (GET_DOES_WEAPON_EXIST( uVar6 ))
    {
        (uParam1^) = 1;
        SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 1, uParam2 );
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 1, 0 );
        if (bParam3)
        {
             /* WRITESCRIPTLOG */ sub_672( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: Waiting for player to holster gun in LEFT hand...", "###" );
            while (GET_DOES_WEAPON_EXIST( uVar6 ))
            {
                WAIT( 0 );
                uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 1, 0 );
            }
        }
         /* WRITESCRIPTLOG */ sub_672( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: ...LEFT hand gun holstered!", "###" );
    }
    uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 0 );
    if (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
    {
        uVar6 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_3297(), 0 );
        if (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
        {
            uVar6 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_3297(), 1 );
        }
        SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_3297(), uVar6, 0, uParam2 );
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 0 );
        if (bParam3)
        {
             /* WRITESCRIPTLOG */ sub_672( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: Waiting for player to draw gun from HOLSTER...", "###" );
            while (NOT (GET_DOES_WEAPON_EXIST( uVar6 )))
            {
                WAIT( 0 );
                uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 0 );
            }
        }
         /* WRITESCRIPTLOG */ sub_672( "MSWW", "P_HolsterRifleOrDualAndDrawPistol: ...gun drawn from HOLSTER!", "###" );
    }
    return;
}

/* F_ISPLAYERHOLDINGRIFLE */ int sub_48628()
{
    int[18] iVar2;
    unknown uVar21;
    int I;

    array(ref iVar2, 18);
    iVar2[0] = -1013714740;
    iVar2[1] = -1074756423;
    iVar2[2] = 1308526797;
    iVar2[3] = 840671040;
    iVar2[4] = 57534114;
    iVar2[5] = 724901397;
    iVar2[6] = 1992962408;
    iVar2[7] = 319712764;
    iVar2[8] = 427207702;
    iVar2[9] = -110877124;
    iVar2[10] = 1224272620;
    iVar2[11] = 10648147;
    iVar2[12] = -2075384407;
    iVar2[13] = 1478009203;
    iVar2[14] = 434544317;
    iVar2[15] = -168327769;
    iVar2[16] = -184942895;
    iVar2[17] = 514118749;
    uVar21 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 0 );
    if (GET_DOES_WEAPON_EXIST( uVar21 ))
    {
        for ( I = 0; I < iVar2; I++ )
        {
            if ((GET_WEAPON_TYPE( uVar21 )) == iVar2[I])
            {
                return 1;
            }
        }
    }
    return 0;
}

/* TELEPORTPED */ void sub_49906(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* NIS_CREATE_STATIC_CAM */ void sub_50330(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_4192( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref l_U39, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* NIS_PLAY_CAM */ void sub_50565(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    if (iParam0->_fU92 == 1)
    {
        SET_CAM_ACTIVE_WITH_INTERP( iParam0->_fU0, iParam0->_fU120, iParam0->_fU88, iParam0->_fU100, iParam0->_fU104 );
    }
    else
    {
        SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    }
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_4342( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_50774(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_4192( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_4342( uParam0 );
    return;
}

/* P_TP_CLEANUP_CONCESSIONS_BODIES_IN_DOORWAY */ void sub_51045()
{
    int J;
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CLEANUP_CONCESSIONS_BODIES_IN_DOORWAY start", 0 );
    for ( J = 0; J < l_U438; J++ )
    {
        for ( I = 0; I < g_U2880; I++ )
        {
            if ((IS_PED_IN_GAMEPLAY_HELPER_BOX( g_U2880[I], ref l_U438[J]._fU0 )) AND (IS_PED_DEAD( g_U2880[I] )))
            {
                 /* CLEANPED */ sub_6875( g_U2880[I] );
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CLEANUP_CONCESSIONS_BODIES_IN_DOORWAY end", 0 );
    return;
}

/* F_T2_DOES_TRAM_EXIST */ int sub_51358(int iParam0)
{
    if ((DOES_VEHICLE_EXIST( iParam0->_fU8 )) AND ((DOES_VEHICLE_EXIST( iParam0->_fU4 )) AND (DOES_VEHICLE_EXIST( iParam0->_fU0 ))))
    {
        return 1;
    }
    return 0;
}

/* P_TP_HANDLE_TRAM_SCRIPT_STREAMS */ void sub_51456(int iParam0)
{
    if ((iParam0->_fU76) AND (iParam0->_fU72 == 0))
    {
        DISPLAYF( "Playing script sound {0}", 1, 1281, ref g_U2451 );
        PLAY_SOUND_FROM_VEHICLE( -1, ref g_U2451, iParam0->_fU0 );
    }
    if ((iParam0->_fU76) AND (iParam0->_fU72 == 4))
    {
        DISPLAYF( "Playing script sound {0}", 1, 1281, ref g_U2459 );
        PLAY_SOUND_FROM_VEHICLE( -1, ref g_U2459, iParam0->_fU0 );
    }
    return;
}

/* P_TP_HANDLE_TRAM_ARRIVE_DEPART */ void sub_51674(int iParam0)
{
    int iVar3;

    iVar3 = iParam0->_fU72;
    switch (iParam0->_fU72)
    {
        case 2:
        if (iParam0->_fU76)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "Tram State = eTRAM_IDLE", 0 );
        }
        break;
        case 3:
        if (iParam0->_fU76)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "Tram State = eTRAM_CLOSE_DOORS", 0 );
             /* P_TP_TRAM_DOORS_CLOSE */ sub_51917( iParam0, 0 );
             /* P_TP_SUICIDE_DOORS_CLOSE */ sub_52500( iParam0->_fU336 );
             /* CREATETIMER */ sub_4192( iParam0 + 116, g_U4957, 1, 0 );
             /* STARTTIMER */ sub_4342( iParam0 + 116 );
            if (NOT (IS_VEHICLE_DEAD( iParam0->_fU4 )))
            {
                PLAY_SOUND_FROM_VEHICLE( -1, "VEHICLES_TRAIN_SUBWAY_DOORS_CLOSE", iParam0->_fU4 );
            }
        }
        if ( /* ISTIMERDONE */ sub_4475( iParam0 + 116 ))
        {
            iParam0->_fU72 = 4;
        }
        break;
        case 4:
        if (iParam0->_fU76)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "Tram State = eTRAM_DEPARTING", 0 );
             /* CREATETIMER */ sub_4192( iParam0 + 152, g_U4958, 1, 0 );
             /* STARTTIMER */ sub_4342( iParam0 + 152 );
        }
         /* F_TP_HANDLE_TRAM_SPEEDING_UP */ sub_53367( iParam0, iParam0->_fU344 );
        if ( /* F_TRAIN_AT_NODE */ sub_53712( iParam0 + 0, iParam0->_fU92, 1073741824 ))
        {
            iParam0->_fU72 = 5;
        }
        break;
        case 5:
        if (iParam0->_fU76)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "Tram State = eTRAM_CLEANUP", 0 );
        }
         /* P_T2_CLEANUP_TRAM */ sub_7984( iParam0 );
        if (iParam0->_fU340)
        {
            iParam0->_fU72 = 6;
        }
        else
        {
            iParam0->_fU72 = 2;
        }
        break;
        case 6:
        if (iParam0->_fU76)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "Tram State = eTRAM_WAITING", 0 );
             /* CREATETIMER */ sub_4192( iParam0 + 188, g_U4959, 1, 0 );
             /* STARTTIMER */ sub_4342( iParam0 + 188 );
        }
        if ( /* ISTIMERDONE */ sub_4475( iParam0 + 188 ))
        {
            iParam0->_fU72 = 7;
        }
        break;
        case 7:
        if (iParam0->_fU76)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "Tram State = eTRAM_SPAWN", 0 );
             /* P_T2_CREATE_TRAM */ sub_36731( iParam0, iParam0->_fU80, 1, 0 );
        }
        if ( /* F_TP_TRAM_EXISTS */ sub_39742( iParam0 ))
        {
            iParam0->_fU72 = 0;
        }
        break;
        case 0:
        if (iParam0->_fU76)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "Tram State = eTRAM_ARRIVING", 0 );
             /* CREATETIMER */ sub_4192( iParam0 + 224, g_U4960, 1, 0 );
             /* STARTTIMER */ sub_4342( iParam0 + 224 );
             /* DISABLETIMER */ sub_15424( iParam0 + 260 );
             /* CREATETIMER */ sub_4192( iParam0 + 296, g_U4960 - 3000, 1, 0 );
             /* STARTTIMER */ sub_4342( iParam0 + 296 );
        }
        if ((NOT (IS_VEHICLE_DEAD( iParam0->_fU4 ))) AND ( /* ISTIMERDONE */ sub_4475( iParam0 + 296 )))
        {
            PLAY_SOUND_FROM_VEHICLE( -1, "VEHICLES_TRAIN_SUBWAY_DOOR_TONE", iParam0->_fU4 );
        }
        if ((NOT (ref iParam0->_fU260->_fU20)) AND (ref iParam0->_fU224->_fU20))
        {
            if ( /* F_TP_HANDLE_TRAM_SLOWING_DOWN */ sub_54363( iParam0, iParam0->_fU344, iParam0->_fU104 ))
            {
                iParam0->_fU72 = 1;
            }
        }
        break;
        case 1:
        if (iParam0->_fU76)
        {
             /* WRITESCRIPTLOG */ sub_672( "SA", "Tram State = eTRAM_OPEN_DOORS", 0 );
             /* P_TP_TRAM_DOORS_OPEN */ sub_54607( iParam0, 0 );
             /* P_TP_SUICIDE_DOORS_OPEN */ sub_54832( iParam0->_fU336 );
             /* CREATETIMER */ sub_4192( iParam0 + 260, g_U4961, 1, 0 );
             /* STARTTIMER */ sub_4342( iParam0 + 260 );
        }
        if ( /* ISTIMERDONE */ sub_4475( iParam0 + 260 ))
        {
            iParam0->_fU72 = 2;
        }
        break;
    }
    if (iParam0->_fU72 != iVar3)
    {
        iParam0->_fU76 = 1;
    }
    else
    {
        iParam0->_fU76 = 0;
    }
    return;
}

/* P_TP_TRAM_DOORS_CLOSE */ void sub_51917(int iParam0, unknown uParam1)
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_TRAM_DOORS_CLOSE", 0 );
    if (iParam0->_fU332 == 0)
    {
         /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_52012( iParam0 + 0, 0.00000000, 0, uParam1 );
         /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_52012( iParam0 + 4, 0.00000000, 0, uParam1 );
         /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_52012( iParam0 + 8, 0.00000000, 1, uParam1 );
    }
    else if (iParam0->_fU332 == 1)
    {
         /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_52012( iParam0 + 0, 0.00000000, 1, uParam1 );
         /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_52012( iParam0 + 4, 0.00000000, 0, uParam1 );
         /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_52012( iParam0 + 8, 0.00000000, 0, uParam1 );
    }
     /* P_TP_TOGGLE_TRAM_DOOR_COVER */ sub_52197( iParam0, 1 );
    return;
}

/* P_TRAIN_OPEN_CLOSE_DOORS */ void sub_52012(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    if (NOT (IS_VEHICLE_DEAD( (uParam0^) )))
    {
        FORCE_TRAIN_DOOR_OPEN_CLOSE( (uParam0^), uParam1, uParam2, 1, uParam3 );
    }
    return;
}

/* P_TP_TOGGLE_TRAM_DOOR_COVER */ void sub_52197(int iParam0, unknown uParam1)
{
    int[2] iVar4;
    int[2] iVar7;
    int[2] iVar10;

    array(ref iVar4, 2);
    iVar4[0] = 8;
    iVar4[1] = 11;
     /* P_TP_ENABLE_TRAM_CAR_COVER */ sub_52261( iParam0->_fU0, ref iVar4, uParam1 );
    array(ref iVar7, 2);
    iVar7[0] = 7;
    iVar7[1] = 9;
     /* P_TP_ENABLE_TRAM_CAR_COVER */ sub_52261( iParam0->_fU4, ref iVar7, uParam1 );
    array(ref iVar10, 2);
    iVar10[0] = 5;
    iVar10[1] = 9;
     /* P_TP_ENABLE_TRAM_CAR_COVER */ sub_52261( iParam0->_fU8, ref iVar10, uParam1 );
    return;
}

/* P_TP_ENABLE_TRAM_CAR_COVER */ void sub_52261(unknown uParam0, unknown uParam1, unknown uParam2)
{
    char[24] cVar5;
    int I;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    if (NOT (IS_VEHICLE_DEAD( uParam0 )))
    {
        StrCopy( ref cVar5, "VEH-", 24 );
        ConcatString(ref cVar5, uParam0, 24);
        ConcatString(ref cVar5, "-", 24);
        for ( I = 0; I < (uParam1^); I++ )
        {
            StrCopy( ref uVar12, 8, cVar5, 6);
            ConcatString(ref uVar12, (uParam1^)[I], 32);
            ENABLE_NORMAL_LINE( "DYNAMIC", ref uVar12, uParam2 );
        }
    }
    return;
}

/* P_TP_SUICIDE_DOORS_CLOSE */ void sub_52500(boolean bParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_672( "GA", "P_TP_SUICIDE_DOORS_CLOSE start", 0 );
    for ( I = 0; I < 6; I++ )
    {
        if (bParam0)
        {
            if (DOES_OBJECT_EXIST( g_U2990[I] ))
            {
                PLAY_OBJECT_ANIM( g_U2990[I], "ap_TramDoors_Anim", "ap_anim", 1000.00000000, 0, 1 );
                SET_OBJECT_ANIM_CURRENT_TIME( g_U2990[I], "ap_TramDoors_Anim", "ap_anim", 1.00000000 );
                SET_OBJECT_ANIM_SPEED( g_U2990[I], "ap_TramDoors_Anim", "ap_anim", -g_U3011 );
                PLAY_SOUND_FROM_OBJECT( -1, "S_AIRPORT_TRAM_PLATFORM_DOOR_CLOSE", g_U2990[I] );
                g_U2997[I] = 1;
            }
        }
        else if (DOES_OBJECT_EXIST( g_U2969[I] ))
        {
            PLAY_OBJECT_ANIM( g_U2969[I], "ap_TramDoors_Anim", "ap_anim", 1000.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( g_U2969[I], "ap_TramDoors_Anim", "ap_anim", 1.00000000 );
            SET_OBJECT_ANIM_SPEED( g_U2969[I], "ap_TramDoors_Anim", "ap_anim", -g_U3011 );
            PLAY_SOUND_FROM_OBJECT( -1, "S_AIRPORT_TRAM_PLATFORM_DOOR_CLOSE", g_U2990[I] );
            g_U2976[I] = 1;
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "GA", "P_TP_SUICIDE_DOORS_CLOSE end", 0 );
    return;
}

/* F_TP_HANDLE_TRAM_SPEEDING_UP */ int sub_53367(int iParam0, unknown uParam1)
{
    unknown uVar4;

    uVar4 =  /* FLERP */ sub_53596( 0.00000000, uParam1,  /* GETTIMERPERCENTAGE */ sub_53421( iParam0 + 152 ) );
     /* P_SET_TRAM_SPEED */ sub_37387( iParam0->_fU0, uVar4 );
    if ( /* ISTIMERDONE */ sub_4475( iParam0 + 152 ))
    {
         /* P_SET_TRAM_SPEED */ sub_37387( iParam0->_fU0, uParam1 );
        return 1;
    }
    return 0;
}

/* GETTIMERPERCENTAGE */ void sub_53421(int iParam0)
{
    int iVar3;

    if (iParam0->_fU28)
    {
        iVar3 = TIMERA();
    }
    else
    {
        iVar3 = TIMERB();
    }
    return  /* CLAMP */ sub_53523( (TO_FLOAT( iVar3 - iParam0->_fU0 )) / (TO_FLOAT( iParam0->_fU12 )), 0.00000000, 1.00000000 );
}

/* CLAMP */ void sub_53523(float fParam0, float fParam1, float fParam2)
{
    float Result;

    Result = fParam0;
    if (fParam0 < fParam1)
    {
        Result = fParam1;
    }
    else if (fParam0 > fParam2)
    {
        Result = fParam2;
    }
    return Result;
}

/* FLERP */ float sub_53596(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return ((1.00000000 - uParam2) * uParam0) + (uParam1 * uParam2);
}

/* F_TRAIN_AT_NODE */ void sub_53712(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, float fParam4)
{
    int Result;

    Result = 0;
    if (NOT (IS_VEHICLE_DEAD( (uParam0^) )))
    {
        if ((GET_DISTANCE_BETWEEN_COORDS( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( (uParam0^) ), uParam1, 1 )) <= fParam4)
        {
            Result = 1;
        }
    }
    return Result;
}

/* F_TP_HANDLE_TRAM_SLOWING_DOWN */ int sub_54363(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;

    uVar7 =  /* FLERP */ sub_53596( uParam1, 0.00000000,  /* GETTIMERPERCENTAGE */ sub_53421( iParam0 + 224 ) );
     /* P_SET_TRAM_SPEED */ sub_37387( iParam0->_fU0, uVar7 );
    if (NOT (IS_VEHICLE_DEAD( iParam0->_fU0 )))
    {
        uVar8 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( iParam0->_fU0 )};
    }
    if ((uVar8._fU4 >= uParam2._fU4) || ( /* ISTIMERDONE */ sub_4475( iParam0 + 224 )))
    {
         /* P_SET_TRAM_SPEED */ sub_37387( iParam0->_fU0, 0.00000000 );
        return 1;
    }
    return 0;
}

/* P_TP_TRAM_DOORS_OPEN */ void sub_54607(int iParam0, unknown uParam1)
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_TRAM_DOORS_OPEN", 0 );
    if (iParam0->_fU332 == 0)
    {
         /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_52012( iParam0 + 0, 1.50000000, 0, uParam1 );
         /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_52012( iParam0 + 4, 1.50000000, 0, uParam1 );
         /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_52012( iParam0 + 8, 1.50000000, 1, uParam1 );
    }
    else if (iParam0->_fU332 == 1)
    {
         /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_52012( iParam0 + 0, 1.50000000, 1, uParam1 );
         /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_52012( iParam0 + 4, 1.50000000, 0, uParam1 );
         /* P_TRAIN_OPEN_CLOSE_DOORS */ sub_52012( iParam0 + 8, 1.50000000, 0, uParam1 );
    }
     /* P_TP_TOGGLE_TRAM_DOOR_COVER */ sub_52197( iParam0, 1 );
    return;
}

/* P_TP_SUICIDE_DOORS_OPEN */ void sub_54832(boolean bParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_672( "GA", "P_TP_SUICIDE_DOORS_OPEN start", 0 );
    for ( I = 0; I < 6; I++ )
    {
        if (bParam0)
        {
            if (DOES_OBJECT_EXIST( g_U2990[I] ))
            {
                PLAY_OBJECT_ANIM( g_U2990[I], "ap_TramDoors_Anim", "ap_anim", 1000.00000000, 0, 1 );
                SET_OBJECT_ANIM_CURRENT_TIME( g_U2990[I], "ap_TramDoors_Anim", "ap_anim", 0.00000000 );
                SET_OBJECT_ANIM_SPEED( g_U2990[I], "ap_TramDoors_Anim", "ap_anim", g_U3011 );
                PLAY_SOUND_FROM_OBJECT( -1, "S_AIRPORT_TRAM_PLATFORM_DOOR_OPEN", g_U2990[I] );
                g_U2997[I] = 1;
            }
        }
        else if (DOES_OBJECT_EXIST( g_U2969[I] ))
        {
            PLAY_OBJECT_ANIM( g_U2969[I], "ap_TramDoors_Anim", "ap_anim", 1000.00000000, 0, 1 );
            SET_OBJECT_ANIM_CURRENT_TIME( g_U2969[I], "ap_TramDoors_Anim", "ap_anim", 0.00000000 );
            SET_OBJECT_ANIM_SPEED( g_U2969[I], "ap_TramDoors_Anim", "ap_anim", g_U3011 );
            PLAY_SOUND_FROM_OBJECT( -1, "S_AIRPORT_TRAM_PLATFORM_DOOR_OPEN", g_U2969[I] );
            g_U2976[I] = 1;
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "GA", "P_TP_SUICIDE_DOORS_OPEN end", 0 );
    return;
}

/* P_TP_POWER_ON */ void sub_55630()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_POWER_ON start", 0 );
     /* P_TP_LIGHTS_ON */ sub_55689();
    PLAY_SOUND_FRONTEND( -1, "S_AIRPORT_TRAM_POWER_ON" );
    AUD_SET_IS_POWER_ON( 1 );
     /* P_START_ESCALATOR */ sub_56235( ref g_U3061, ref g_U3065, 1 );
     /* P_START_ESCALATOR */ sub_56235( ref g_U3062, ref g_U3066, 0 );
     /* P_START_ESCALATOR */ sub_56235( ref g_U3063, ref g_U3067, 1 );
     /* P_START_ESCALATOR */ sub_56235( ref g_U3064, ref g_U3068, 0 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_PLAT1_ESCALATOR_02", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_PLAT1_ESCALATOR_02_ENDS_01", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_PLAT1_ESCALATOR_02_ENDS_02", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_PLAT1_ESCALATOR_02_STAIR_HITS_01", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_PLAT1_ESCALATOR_02_STAIR_HITS_02", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_PLAT1_ESCALATOR_02_STAIR_HITS_03", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_PLAT1_ESCALATOR_02_STAIR_HITS_04", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_CAFE_ESCALATOR_01", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_CAFE_ESCALATOR_01_ENDS_01", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_CAFE_ESCALATOR_01_ENDS_02", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_CAFE_ESCALATOR_01_STAIR_HITS_01", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_CAFE_ESCALATOR_01_STAIR_HITS_02", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_CAFE_ESCALATOR_01_STAIR_HITS_03", 1 );
    ENABLE_STATIC_EMITTER( "S_AIR_SE_CAFE_ESCALATOR_01_STAIR_HITS_04", 1 );
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_POWER_ON end", 0 );
    return;
}

/* P_TP_LIGHTS_ON */ void sub_55689()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_LIGHTS_ON start", 0 );
     /* P_TP_CREATE_LIGHT */ sub_55759( ref g_U3028, 2042458963 );
     /* P_TP_CREATE_LIGHT */ sub_55759( ref g_U3029, 1244233750 );
     /* P_TP_CREATE_LIGHT */ sub_55759( ref g_U3030, 1952011381 );
    if (DOES_OBJECT_EXIST( g_U3037 ))
    {
         /* CLEANOBJECT */ sub_7146( g_U3037 );
    }
    g_U3034 =  /* CREATEOBJECTNOOFFSET */ sub_37561( -340235727, g_U3038, g_U649, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( g_U3034, 1 );
    ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U3034, ref g_U2302 );
    g_U3035 =  /* CREATEOBJECTNOOFFSET */ sub_37561( 1356137923, g_U3038, g_U649, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( g_U3035, 1 );
    ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U3035, ref g_U2302 );
    g_U3036 =  /* CREATEOBJECTNOOFFSET */ sub_37561( 2123751748, g_U3038, g_U649, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( g_U3036, 1 );
    ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( g_U3036, ref g_U2302 );
    g_U3041 = 1;
    CLEAR_TIMECYCLE_MODIFIER();
    SET_TIMECYCLE_MODIFIER( "departureB" );
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_LIGHTS_ON end", 0 );
    return;
}

/* P_TP_CREATE_LIGHT */ void sub_55759(unknown uParam0, unknown uParam1)
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CREATE_LIGHTS", 0 );
    (uParam0^) =  /* CREATEOBJECTNOOFFSET */ sub_37561( uParam1, g_U3038, g_U649, 0, 0, 0 );
    FREEZE_OBJECT_POSITION( (uParam0^), 1 );
    ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( (uParam0^), ref g_U2302 );
    return;
}

/* P_START_ESCALATOR */ void sub_56235(unknown uParam0, unknown uParam1, boolean bParam2)
{
    if (bParam2)
    {
        SET_OBJECT_ANIM_SPEED( (uParam0^), "AP_EscSil_N1_Ad_H", "ap_anim", 1.00000000 );
        SET_MOVER_SPEED( (uParam1^), 1.00000000, 1.00000000 );
    }
    else
    {
        SET_OBJECT_ANIM_SPEED( (uParam0^), "AP_EscSil_N1_Ad_H", "ap_anim", -1.00000000 );
        SET_MOVER_SPEED( (uParam1^), -1.00000000, -1.00000000 );
    }
    return;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_57266(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_8349( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_57325( 0,  /* PLAYER_PED_ID */ sub_3297(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_57325( 1,  /* PLAYER_PED_ID */ sub_3297(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_57578( uParam0, uParam1, 8, 1 );
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_57325(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_57578(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_57623( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_57623(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_57710( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_57710(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_57762( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_58280( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_57762(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_58280(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* MAL_PEDPLAYERACTIONTREENODE */ void sub_58617(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        PED_ACTION_TREE_PLAY_NODE( uParam0, uParam1 );
    }
    return;
}

/* MAL_TELEPORTPLAYER */ void sub_58723(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    unknown uVar8;

    uVar8 =  /* PLAYER_PED_ID */ sub_3297();
     /* MAL_TELEPORTPED */ sub_58770( uVar8, uParam0, uParam3 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam4, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( uParam5, 1065353216, 0 );
    return;
}

/* MAL_TELEPORTPED */ void sub_58770(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* NIS_RETURN_TO_GAMEPLAY_CAM */ void sub_58910(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, float fParam4, unknown uParam5)
{
    SET_CAM_SIDE_LEFT( uParam2 );
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( uParam3, 1065353216, 0 );
    }
    if (fParam4 != -1E8)
    {
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( fParam4, 1065353216, 0 );
    }
    RENDER_SCRIPT_CAMS( 0, uParam1, uParam0, uParam5 );
    return;
}

/* P_TP_RESET_UFE_ROOM_NAMES */ void sub_59036()
{
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_RESET_UFE_ROOM_NAMES start", 0 );
    for ( I = 0; I < 4; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U232[I] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U232[I], ref g_U2302 );
        }
    }
    for ( I = 0; I < 4; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U336[I] )))
        {
            SET_ROOM_FOR_PED_BY_NAME( l_U336[I], ref g_U2302 );
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_RESET_UFE_ROOM_NAMES end", 0 );
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_59352(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_59404( (uParam0^)[I] );
    }
    return;
}

/* P_ACTIVATEPED */ void sub_59404(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_HANDLE_IMAGEFX_CP_05 */ void sub_59556()
{
    if ( /* ISTIMERDONE */ sub_4475( ref l_U885 ))
    {
        PLAY_IMAGEFX( "TRIPLE_INTERLACE_HOLD_HARD", 4, 0 );
        PLAY_IMAGEFX( "FLASH_RED", 4, 0 );
    }
    if ( /* ISTIMERDONE */ sub_4475( ref l_U894 ))
    {
        PLAY_IMAGEFX( "FLICKER_VIBRATE_INTERLACE_01", 4, 0 );
        PLAY_IMAGEFX( "FLICKER_VIBRATE_INTERLACE_01", 4, 0 );
    }
    return;
}

/* P_TP_END_VIG_MID06_FIN */ void sub_59814()
{
     /* WRITESCRIPTLOG */ sub_672( "GA", "P_TP_END_VIG_MID06_FIN start", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
    {
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_3297(), 0 );
    }
     /* NIS_POST_SETUP */ sub_59924( 1, 1 );
     /* WRITESCRIPTLOG */ sub_672( "GA", "P_TP_END_VIG_MID06_FIN end", 0 );
    return;
}

/* NIS_POST_SETUP */ void sub_59924(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_3335(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_3297(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_60022();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_60022()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_3297(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_3297(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_TPP2_START_GAMEPLAY */ void sub_60422()
{
     /* WRITESCRIPTLOG */ sub_672( "GA", "P_START_GAMEPLAY start", 0 );
    SET_PED_MODEL_LOD_DISTANCES( -1880103805, 10.00000000, 100.00000000 );
    DO_SCREEN_FADE_IN( 0 );
     /* NIS_POST_SETUP */ sub_59924( 1, 1 );
     /* WRITESCRIPTLOG */ sub_672( "GA", "P_START_GAMEPLAY end", 0 );
    return;
}

/* P_TP_SETUP_AGA */ void sub_60571()
{
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_SETUP_AGA", 0 );
    l_U384 = PEDGROUPTASK_ADVANCE_CREATE( l_U378._fU0 );
    for ( I = 0; I < 4; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U232[I] )))
        {
            PEDGROUPTASK_ADVANCE_ASSIGNPED( l_U378._fU0, l_U384, l_U232[I] );
        }
    }
    for ( I = 0; I < 4; I++ )
    {
        if (NOT (IS_PED_DEAD( l_U336[I] )))
        {
            PEDGROUPTASK_ADVANCE_ASSIGNPED( l_U378._fU0, l_U384, l_U336[I] );
        }
    }
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
    {
        PEDGROUPTASK_ADVANCE_SETTARGET_PED( l_U378._fU0, l_U384,  /* PLAYER_PED_ID */ sub_3297() );
    }
    PEDGROUPTASK_ADVANCE_SETTIMETOHIDE( l_U378._fU0, l_U384, 2.00000000 );
    PEDGROUPTASK_ADVANCE_SETTIMETOIDLE( l_U378._fU0, l_U384, 1.00000000 );
    PEDGROUPTASK_ADVANCE_SETTIMERANGEFORALLPEDSTOSTARTFIRING( l_U378._fU0, l_U384, 3.00000000 );
    PEDGROUPTASK_ADVANCE_SETNUMPEDSTOADVANCE( l_U378._fU0, l_U384, 3 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
    {
        PEDGROUPTASK_ADVANCE_SETTARGET_PED( l_U378._fU0, l_U384,  /* PLAYER_PED_ID */ sub_3297() );
        SET_PED_NUM_CHARGERS_OVERRIDE(  /* PLAYER_PED_ID */ sub_3297(), 0 );
    }
    return;
}

/* P_TP_UFE_WAVE_1_START_SUPPRESSING_FIRE */ void sub_61178()
{
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_UFE_WAVE_1_START_SUPPRESSING_FIRE start", 0 );
    for ( I = 0; I < 4; I++ )
    {
        if ( /* ISPEDVALID */ sub_61309( l_U232[I], 0 ))
        {
            if (l_U265[I] == 1)
            {
                SET_PED_FLAG_LOCK_TO_COVER( l_U232[I], 1 );
                REGISTER_TARGET( l_U232[I],  /* PLAYER_PED_ID */ sub_3297() );
                TASK_COMBAT_SNAP_TO_COVER_TACTICAL( l_U232[I], "ap_sec4", l_U260[I], 1,  /* PLAYER_PED_ID */ sub_3297() );
                WAIT( 0 );
                if (NOT (IS_PED_DEAD( l_U232[I] )))
                {
                    DETACH_PED( l_U232[I], 0 );
                    SET_PED_FORCE_START_FIRING_FROM_COVER( l_U232[I] );
                }
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_UFE_WAVE_1_START_SUPPRESSING_FIRE end", 0 );
    return;
}

/* ISPEDVALID */ void sub_61309(unknown uParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((DOES_PED_EXIST( uParam0 )) == 1)
    {
        Result = 1;
    }
    else
    {
        Result = 0;
    }
    if (Result == 1)
    {
        if ((IS_PED_DEAD( uParam0 )) == 1)
        {
            if (iParam1 == 1)
            {
                Result = 1;
            }
            else
            {
                Result = 0;
            }
        }
        else
        {
            Result = 1;
        }
    }
    return Result;
}

/* P_TP_UFE_WAVE_1_ATTACK */ void sub_61695()
{
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_UFE_WAVE_1_ATTACK start", 0 );
    for ( I = 0; I < 4; I++ )
    {
        if ( /* ISPEDVALID */ sub_61309( l_U232[I], 0 ))
        {
            if (l_U265[I] == 0)
            {
                 /* P_TETHERPED */ sub_61834( ref l_U565, l_U232[I], 1 );
                DETACH_PED( l_U232[I], 0 );
                 /* P_TPP2_UFE_EXIT_TRAM */ sub_61945( ref l_U232[I], 0 );
                SET_PED_SUGGESTED_COVER_POINT( l_U232[I], "GenCover", l_U260[I] );
            }
            else if (l_U265[I] == 2)
            {
                 /* P_TETHERPED */ sub_61834( ref l_U565, l_U232[I], 1 );
                DETACH_PED( l_U232[I], 0 );
                 /* P_TPP2_UFE_EXIT_TRAM */ sub_61945( ref l_U232[I],  /* F_ISPEDINTRIGGERBOX */ sub_62834(  /* PLAYER_PED_ID */ sub_3297(), l_U417 ) );
                SET_PED_SUGGESTED_COVER_POINT( l_U232[I], "GenCover", l_U260[I] );
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_UFE_WAVE_1_ATTACK end", 0 );
    return;
}

/* P_TETHERPED */ void sub_61834(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_TPP2_UFE_EXIT_TRAM */ void sub_61945(unknown uParam0, boolean bParam1)
{
    int iVar4;
    float fVar5;
    int I;
    float fVar7;
    vector vVar8;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_UFE_EXIT_TRAM start", 0 );
    iVar4 = 0;
    fVar5 = 999.00000000;
    if ( /* ISPEDVALID */ sub_61309( (uParam0^), 0 ))
    {
        for ( I = 0; I < 12; I++ )
        {
            fVar7 =  /* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ sub_62065( (uParam0^), l_U142[I] );
            if (fVar7 < fVar5)
            {
                fVar5 = fVar7;
                iVar4 = I;
            }
        }
        if (iVar4 < 6)
        {
            vVar8 = {GET_RANDOM_FLOAT_IN_RANGE( -5.00000000, -3.00000000 ), 0.00000000, 0.00000000};
        }
        else
        {
            vVar8 = {GET_RANDOM_FLOAT_IN_RANGE( 3.00000000, 5.00000000 ), 0.00000000, 0.00000000};
        }
        uVar11 = {l_U142[iVar4] + vVar8};
        DISPLAYF( "Sending UFE to tram exit {0}, {1}, {2}", 3, 769, l_U142[iVar4]._fU0, 769, l_U142[iVar4]._fU4, 769, l_U142[iVar4]._fU8 );
        SET_RANDOM_SEED( GET_GAME_TIMER() );
        OPEN_SEQUENCE_TASK( ref uVar14 );
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
        TASK_PAUSE( 0, GET_RANDOM_INT_IN_RANGE( 0, 1000 ) );
        TASK_FOLLOW_NAV_MESH_TO_COORD( 0, l_U142[iVar4], 3, 5000, 0.01000000, 0, 0 );
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED( 0, uVar11,  /* PLAYER_PED_ID */ sub_3297(), 3, 1, 0.50000000, 0, 0, 0 );
        if (bParam1)
        {
            TASK_SELECT_WEAPON_TO_HAND( 0, GET_WEAPON_FROM_HOLSTER( (uParam0^), 5 ), 0 );
            TASK_SHOOT_AT_COORD( 0, -80.10491000, 94.72768000, -4.42173800, 1000, 1566631136, 0, 0 );
        }
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
        TASK_COMBAT_PED( 0,  /* PLAYER_PED_ID */ sub_3297() );
        CLOSE_SEQUENCE_TASK( uVar14 );
        REGISTER_TARGET( (uParam0^),  /* PLAYER_PED_ID */ sub_3297() );
        TASK_PERFORM_SEQUENCE( (uParam0^), uVar14 );
        CLEAR_SEQUENCE_TASK( uVar14 );
        if (bParam1)
        {
            SET_PED_COMBAT_ATTRIBUTES( (uParam0^), 512, 1 );
            SET_PED_PROJECTILE_OVERRIDE_PARAMETERS( (uParam0^), 0, l_U376, l_U377, 0, 0 );
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_UFE_EXIT_TRAM end", 0 );
    return;
}

/* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ void sub_62065(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    else
    {
        return -1.00000000;
    }
    return VDIST( uVar6, uParam1 );
}

/* F_ISPEDINTRIGGERBOX */ int sub_62834(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* F_TPP2_IS_PED_INSIDE_UFE_TRAM */ int sub_63197(unknown uParam0)
{
    if ((NOT (IS_VEHICLE_DEAD( g_U4552._fU8 ))) AND ((NOT (IS_VEHICLE_DEAD( g_U4552._fU4 ))) AND ((NOT (IS_VEHICLE_DEAD( g_U4552._fU0 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))))
    {
        if ((IS_PED_INSIDE_TRAIN( (uParam0^), g_U4552._fU8 )) || ((IS_PED_INSIDE_TRAIN( (uParam0^), g_U4552._fU4 )) || (IS_PED_INSIDE_TRAIN( (uParam0^), g_U4552._fU0 ))))
        {
            return 1;
        }
    }
    return 0;
}

/* F_TPP2_IS_PED_WITHIN_DISTANCE_TO_UFE_TRAM */ int sub_63381(unknown uParam0, float fParam1)
{
    if ((NOT (IS_VEHICLE_DEAD( g_U4552._fU8 ))) AND ((NOT (IS_VEHICLE_DEAD( g_U4552._fU4 ))) AND ((NOT (IS_VEHICLE_DEAD( g_U4552._fU0 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))))
    {
        if ((( /* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ sub_62065( (uParam0^), "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( g_U4552._fU8 ) )) <= fParam1) || ((( /* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ sub_62065( (uParam0^), "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( g_U4552._fU4 ) )) <= fParam1) || (( /* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ sub_62065( (uParam0^), "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( g_U4552._fU0 ) )) <= fParam1)))
        {
            return 1;
        }
    }
    return 0;
}

/* F_TPP2_ARE_ANY_UFE_INSIDE_UFE_TRAM */ int sub_63596()
{
    int I;

    for ( I = 0; I < 4; I++ )
    {
        if ( /* ISPEDVALID */ sub_61309( l_U232[I], 0 ))
        {
            if ( /* F_TPP2_IS_PED_INSIDE_UFE_TRAM */ sub_63197( ref l_U232[I] ))
            {
                return 1;
            }
        }
    }
    for ( I = 0; I < 4; I++ )
    {
        if ( /* ISPEDVALID */ sub_61309( l_U336[I], 0 ))
        {
            if ( /* F_TPP2_IS_PED_INSIDE_UFE_TRAM */ sub_63197( ref l_U336[I] ))
            {
                return 1;
            }
        }
    }
    return 0;
}

/* P_TP_UFE_WAVE_2_START_SUPPRESSING_FIRE */ void sub_63900()
{
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_UFE_WAVE_2_START_SUPPRESSING_FIRE start", 0 );
    for ( I = 0; I < 4; I++ )
    {
        if ( /* ISPEDVALID */ sub_61309( l_U336[I], 0 ))
        {
            if (l_U369[I] == 1)
            {
                if ( /* F_ISPEDINTRIGGERBOX */ sub_62834(  /* PLAYER_PED_ID */ sub_3297(), l_U417 ))
                {
                    SET_PED_FLAG_LOCK_TO_COVER( l_U336[I], 1 );
                    REGISTER_TARGET( l_U336[I],  /* PLAYER_PED_ID */ sub_3297() );
                    SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U336[I], 1 );
                    TASK_COMBAT_SNAP_TO_COVER_TACTICAL( l_U336[I], "ap_sec4", l_U364[I], 0,  /* PLAYER_PED_ID */ sub_3297() );
                    WAIT( 0 );
                    if (NOT (IS_PED_DEAD( l_U336[I] )))
                    {
                        DETACH_PED( l_U336[I], 0 );
                    }
                }
                else
                {
                     /* P_TETHERPED */ sub_61834( ref l_U565, l_U336[I], 1 );
                    DETACH_PED( l_U336[I], 0 );
                     /* P_TPP2_UFE_EXIT_TRAM */ sub_61945( ref l_U336[I], 0 );
                }
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_UFE_WAVE_2_START_SUPPRESSING_FIRE end", 0 );
    return;
}

/* P_TP_UFE_WAVE_2_ATTACK */ void sub_64448()
{
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_ACTIVATE_BACKUP_UFE start", 0 );
    for ( I = 0; I < 4; I++ )
    {
        if ( /* ISPEDVALID */ sub_61309( l_U336[I], 0 ))
        {
            if (l_U369[I] == 0)
            {
                 /* P_TETHERPED */ sub_61834( ref l_U565, l_U336[I], 1 );
                DETACH_PED( l_U336[I], 0 );
                 /* P_TPP2_UFE_EXIT_TRAM */ sub_61945( ref l_U336[I], 0 );
                SET_PED_SUGGESTED_COVER_POINT( l_U336[I], "GenCover", l_U364[I] );
            }
            else if (l_U369[I] == 2)
            {
                 /* P_TETHERPED */ sub_61834( ref l_U565, l_U336[I], 1 );
                DETACH_PED( l_U336[I], 0 );
                 /* P_TPP2_UFE_EXIT_TRAM */ sub_61945( ref l_U336[I],  /* F_ISPEDINTRIGGERBOX */ sub_62834(  /* PLAYER_PED_ID */ sub_3297(), l_U417 ) );
                SET_PED_SUGGESTED_COVER_POINT( l_U336[I], "GenCover", l_U364[I] );
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_ACTIVATE_BACKUP_UFE end", 0 );
    return;
}

/* P_TP_START_AGA */ void sub_64872()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_START_AGA start", 0 );
    PEDGROUPTASK_ADVANCE_TRIGGER_MOVE( l_U378._fU0, l_U384 );
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_START_AGA end", 0 );
    return;
}

/* F_GET_NUM_PEDS_SHOOTING_IN_ARRAY */ void sub_65098(unknown uParam0, boolean bParam1, float fParam2)
{
    int iVar5;
    int Result;
    int I;
    int iVar8;

    Result = 0;
    iVar8 = (uParam0^) - 1;
    for ( I = 0; I <= iVar8; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            iVar5 = 1;
            if (bParam1)
            {
                if ((IS_SPHERE_VISIBLE( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( (uParam0^)[I] ), 1.00000000, 0 )) == 0)
                {
                    iVar5 = 0;
                }
            }
            if (fParam2 > 0.00000000)
            {
                if (( /* GET_DISTANCE_BETWEEN_PEDS */ sub_65261(  /* PLAYER_PED_ID */ sub_3297(), (uParam0^)[I], 1 )) > fParam2)
                {
                    iVar5 = 0;
                }
            }
            if ((iVar5) AND (IS_PED_SHOOTING( (uParam0^)[I] )))
            {
                Result++;
            }
        }
    }
    return Result;
}

/* GET_DISTANCE_BETWEEN_PEDS */ void sub_65261(unknown uParam0, unknown uParam1, boolean bParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar5 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        uVar8 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    }
    if (bParam2)
    {
        return VDIST( uVar5, uVar8 );
        break;
    }
    return VDIST( uVar5._fU0, uVar5._fU4, 0, uVar8._fU0, uVar8._fU4, 0 );
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_65687(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* P_TP_HANDLE_PAINKILLER_DIALOGUE */ void sub_65954()
{
    int iVar2;
    int I;

    iVar2 = 0;
    for ( I = 0; I < g_U2818; I++ )
    {
        if (DOES_PLACEMENT_EXIST( g_U2818[I] ))
        {
            iVar2++;
        }
    }
    for ( I = 0; I < g_U3350; I++ )
    {
        if (DOES_PLACEMENT_EXIST( g_U3350[I] ))
        {
            iVar2++;
        }
    }
    if (iVar2 < l_U702)
    {
         /* P_CREATE_AND_START_TIMER */ sub_50774( ref l_U693, 500 );
    }
    if ((NOT ( /* F_IS_PED_PLAYING_SPEECH */ sub_66384(  /* PLAYER_PED_ID */ sub_3297() ))) AND ((NOT ( /* IS_SPEECH_CURRENTLY_PLAYING */ sub_66159( l_U661 ))) AND ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ( /* ISTIMERDONE */ sub_4475( ref l_U693 )))))
    {
         /* P_SPEECH_PLAY_MONOLOGUE */ sub_57266( "SAIR_MFFKNPLS", ref l_U661 );
    }
    l_U702 = iVar2;
    return;
}

/* IS_SPEECH_CURRENTLY_PLAYING */ int sub_66159(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    if (NOT ( /* IS_SCRIPT_SPEECH_STRUCT_VALID */ sub_66202( uParam0 )))
    {
        return 0;
    }
    if ((g_U11[uParam0._fU4] == 2) || ((g_U11[uParam0._fU4] == 1) || (IS_SCRIPTED_CONVERSATION_ONGOING( uParam0._fU4 ))))
    {
        if (uParam0._fU8 == g_U6[uParam0._fU4])
        {
            return 1;
        }
    }
    return 0;
}

/* IS_SCRIPT_SPEECH_STRUCT_VALID */ boolean sub_66202(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
    int iVar12;

    if (uParam0._fU4 < 0)
    {
        return 0;
    }
    iVar12 = GET_CHECK_HASH_FROM_CONVERSATION_ID( uParam0._fU4 );
    return (uParam0._fU16 == iVar12) AND (iVar12 != 0);
}

/* F_IS_PED_PLAYING_SPEECH */ int sub_66384(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return IS_ANY_SPEECH_PLAYING( uParam0 );
    }
    return 0;
}

/* F_REQUEST_SCRIPT_STREAM */ int sub_66735(unknown uParam0)
{
    int Result;

     /* WRITESCRIPTLOG */ sub_672( "SA", "F_REQUEST_SCRIPT_STREAM start", 0 );
    for ( Result = 0; Result < 3; Result++ )
    {
        if ((GET_SCRIPT_STREAM_STATE( "ANY_STREAM", Result )) == 0)
        {
            DISPLAYF( "Loading stream {0} into slot {1}", 2, 1537, uParam0, 513, Result );
            REQUEST_SCRIPT_STREAM( uParam0, Result );
            return Result;
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "SA", "F_REQUEST_SCRIPT_STREAM end", 0 );
    return -1;
}

/* MAL_SETPEDVISIBLE */ void sub_67026(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_VISIBLE( uParam0, uParam1 );
    }
    else
    {
         /* MAL_WRITESCRIPTLOG */ sub_67132( "MAL_SetPedVisible DOES NOT HAVE VALID PED!" );
    }
    return;
}

/* MAL_WRITESCRIPTLOG */ void sub_67132(unknown uParam0)
{
    unknown uVar3;

    uVar3 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar3, 1537, "MSWW", 1537, uParam0, 1537, "###" );
    return;
}

/* NIS_PLAY_STATIC_CAMERA */ void sub_67304(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_4342( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* P_CAM_SHAKE_CREATE_STRUCT */ void sub_67437(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    if (iParam0->_fU168 == 0)
    {
         /* P_CAM_SHAKE_SET_SHAKE_TYPE */ sub_67493( iParam0, uParam1 );
        iParam0->_fU192 = uParam1;
        iParam0->_fU36 = uParam2;
        iParam0->_fU148 = uParam3;
        iParam0->_fU152 = uParam4;
        iParam0->_fU156 = uParam5;
        iParam0->_fU160 = uParam7;
        iParam0->_fU176 = uParam6;
    }
     /* RESETTIMER */ sub_5051( iParam0 + 40 );
     /* RESETTIMER */ sub_5051( iParam0 + 76 );
     /* RESETTIMER */ sub_5051( iParam0 + 112 );
    iParam0->_fU172 = iParam0->_fU176;
    iParam0->_fU164 = 0;
    iParam0->_fU168 = 1;
    iParam0->_fU184 = 0;
    iParam0->_fU188 = 0;
    return;
}

/* P_CAM_SHAKE_SET_SHAKE_TYPE */ void sub_67493(int iParam0, unknown uParam1)
{
    switch (uParam1)
    {
        case 1:
        StrCopy( ref iParam0->_fU4, "SMALL_EXPLOSION_SHAKE", 32 );
        break;
        case 2:
        StrCopy( ref iParam0->_fU4, "MEDIUM_EXPLOSION_SHAKE", 32 );
        break;
        case 3:
        StrCopy( ref iParam0->_fU4, "LARGE_EXPLOSION_SHAKE", 32 );
        break;
        case 4:
        StrCopy( ref iParam0->_fU4, "HAND_SHAKE", 32 );
        break;
        case 5:
        StrCopy( ref iParam0->_fU4, "JOLT_SHAKE", 32 );
        break;
        case 6:
        StrCopy( ref iParam0->_fU4, "VIBRATE_SHAKE", 32 );
        break;
        case 7:
        StrCopy( ref iParam0->_fU4, "WOBBLY_SHAKE", 32 );
        break;
    }
    iParam0->_fU0 = iParam0->_fU192;
    return;
}

/* P_CAM_SHAKE_ACTIVATE */ void sub_67978(int iParam0)
{
     /* RESETTIMER */ sub_5051( iParam0 + 40 );
     /* RESETTIMER */ sub_5051( iParam0 + 76 );
     /* RESETTIMER */ sub_5051( iParam0 + 112 );
    iParam0->_fU172 = 1;
    iParam0->_fU164 = 0;
    return;
}

/* P_TP_CLEANUP_BODIES_IN_DOORWAY */ void sub_68109()
{
    int J;
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CLEANUP_BODIES_IN_DOORWAY start", 0 );
    for ( J = 0; J < l_U438; J++ )
    {
        for ( I = 0; I < 4; I++ )
        {
            if ((IS_PED_IN_GAMEPLAY_HELPER_BOX( l_U232[I], ref l_U438[J]._fU0 )) AND (IS_PED_DEAD( l_U232[I] )))
            {
                 /* CLEANPED */ sub_6875( l_U232[I] );
            }
        }
        for ( I = 0; I < 4; I++ )
        {
            if ((IS_PED_IN_GAMEPLAY_HELPER_BOX( l_U336[I], ref l_U438[J]._fU0 )) AND (IS_PED_DEAD( l_U336[I] )))
            {
                 /* CLEANPED */ sub_6875( l_U336[I] );
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_CLEANUP_BODIES_IN_DOORWAY end", 0 );
    return;
}

/* P_CAM_SHAKE_HANDLE */ void sub_68623(int iParam0)
{
    if (iParam0->_fU172 == 1)
    {
        if (iParam0->_fU164 == 0)
        {
             /* CREATETIMER */ sub_4192( iParam0 + 40, iParam0->_fU148, 1, 0 );
             /* STARTTIMER */ sub_4342( iParam0 + 40 );
            if (iParam0->_fU152 > 0)
            {
                 /* CREATETIMER */ sub_4192( iParam0 + 76, iParam0->_fU152, 1, 0 );
                 /* STARTTIMER */ sub_4342( iParam0 + 76 );
            }
            iParam0->_fU164 = 1;
        }
        if ( /* ISTIMERDONE */ sub_4475( iParam0 + 40 ))
        {
             /* WRITESCRIPTLOG */ sub_672( "ML", "P_HANDLE_CAM_SHAKE is shaking the camera", "---" );
             /* P_SHAKE_CAM */ sub_68852( iParam0 + 4, iParam0->_fU36 );
            if (iParam0->_fU156 > 0)
            {
                 /* CREATETIMER */ sub_4192( iParam0 + 112, iParam0->_fU156, 1, 0 );
                 /* STARTTIMER */ sub_4342( iParam0 + 112 );
            }
        }
        if ( /* ISTIMERDONE */ sub_4475( iParam0 + 112 ))
        {
             /* P_SHAKE_CAM */ sub_68852( iParam0 + 4, iParam0->_fU36 );
             /* CREATETIMER */ sub_4192( iParam0 + 112, iParam0->_fU156, 1, 0 );
             /* STARTTIMER */ sub_4342( iParam0 + 112 );
        }
        if ( /* ISTIMERDONE */ sub_4475( iParam0 + 76 ))
        {
             /* WRITESCRIPTLOG */ sub_672( "ML", "P_HANDLE_CAM_SHAKE is done shaking the camera", "---" );
            STOP_CAM_SHAKING( GET_RENDERING_CAM(), iParam0->_fU160 );
            STOP_GAMEPLAY_CAM_SHAKING( iParam0 + 4, iParam0->_fU160 );
             /* RESETTIMER */ sub_5051( iParam0 + 112 );
            iParam0->_fU172 = 0;
        }
    }
    return;
}

/* P_SHAKE_CAM */ void sub_68852(unknown uParam0, unknown uParam1)
{
    SHAKE_CAM( GET_RENDERING_CAM(), uParam0, uParam1 );
    SHAKE_GAMEPLAY_CAM( uParam0, uParam1 );
    return;
}

/* P_CAM_SHAKE_FORCE_DEACTIVATE */ void sub_69237(int iParam0, int iParam1)
{
    if (iParam0->_fU172 == 1)
    {
        if (iParam1 == 1)
        {
            STOP_CAM_SHAKING( GET_RENDERING_CAM(), iParam1 );
            STOP_GAMEPLAY_CAM_SHAKING( iParam0 + 4, iParam1 );
        }
        else
        {
            STOP_CAM_SHAKING( GET_RENDERING_CAM(), iParam0->_fU160 );
            STOP_GAMEPLAY_CAM_SHAKING( iParam0 + 4, iParam0->_fU160 );
        }
         /* RESETTIMER */ sub_5051( iParam0 + 40 );
         /* RESETTIMER */ sub_5051( iParam0 + 76 );
         /* RESETTIMER */ sub_5051( iParam0 + 112 );
        iParam0->_fU172 = 0;
    }
    return;
}

/* P_T2_UPDATE_EXISTING_PLACEMENTS */ void sub_69499()
{
    int I;

     /* WRITESCRIPTLOG */ sub_672( "SA", "P_T2_UPDATE_EXISTING_PLACEMENTS start", 0 );
    for ( I = 0; I < g_U3350; I++ )
    {
        g_U3353[I] = DOES_PLACEMENT_EXIST( g_U3350[I] );
    }
    g_U3356 = DOES_PLACEMENT_EXIST( g_U3328 );
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_T2_UPDATE_EXISTING_PLACEMENTS end", 0 );
    return;
}

/* P_TP_HANDLE_BULLET_CAM */ void sub_69805()
{
    int iVar2;

    if ((l_U374 == 4) AND (l_U281 == 4))
    {
        iVar2 = ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65687( ref l_U232 )) + ( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65687( ref l_U336 ));
        if ((NOT l_U130) AND (iVar2 == 1))
        {
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_69901( ref l_U232 );
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_69901( ref l_U336 );
            l_U130 = 1;
        }
    }
    return;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_69901(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65687( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_TP_HANDLE_LIGHTS */ void sub_70093()
{
    if ((DOES_OBJECT_EXIST( g_U3031 )) AND (DOES_OBJECT_EXIST( g_U3028 )))
    {
        if (g_U3041)
        {
             /* CLEANOBJECT */ sub_7146( g_U3031 );
        }
        else
        {
             /* CLEANOBJECT */ sub_7146( g_U3028 );
        }
    }
    return;
}

/* P_TP_HANDLE_SUICIDE_DOOR_SOUNDS */ void sub_70197()
{
    int I;

    for ( I = 0; I < 6; I++ )
    {
        if ((DOES_OBJECT_EXIST( g_U2969[I] )) AND (g_U2976[I]))
        {
            if (NOT (IS_OBJECT_PLAYING_ANIM( g_U2969[I], "ap_TramDoors_Anim", "ap_anim" )))
            {
                DISPLAYF( "Stopping Player suicide door sound {0}", 1, 513, I );
                g_U2976[I] = 0;
            }
        }
        if ((DOES_OBJECT_EXIST( g_U2990[I] )) AND (g_U2997[I]))
        {
            if (NOT (IS_OBJECT_PLAYING_ANIM( g_U2990[I], "ap_TramDoors_Anim", "ap_anim" )))
            {
                DISPLAYF( "Stopping UFE suicide door sound {0}", 1, 513, I );
                g_U2997[I] = 0;
            }
        }
    }
    return;
}

/* P_TP_HANDLE_PLAYER_PICKUP_SNIPER_RIFLE */ void sub_70563()
{
    unknown uVar2;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_3297() )))
    {
        if (HAS_PED_GOT_SPECIFIC_WEAPON(  /* PLAYER_PED_ID */ sub_3297(), -2075384407 ))
        {
            REMOVE_PED_WEAPON(  /* PLAYER_PED_ID */ sub_3297(), GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 0 ) );
             /* F_GIVEPEDWEAPON */ sub_11054(  /* PLAYER_PED_ID */ sub_3297(), 1224272620, 50, 0, 0 );
            g_U3075 = 0;
        }
        if (NOT g_U3075)
        {
            if (HAS_PED_GOT_SPECIFIC_WEAPON(  /* PLAYER_PED_ID */ sub_3297(), 1224272620 ))
            {
                uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_3297(), 0, 0 );
                if (GET_DOES_WEAPON_EXIST( uVar2 ))
                {
                     /* WRITESCRIPTLOG */ sub_672( "SA", "Applying laser sight to the player's sniper rifle.", 0 );
                    ENABLE_WEAPON_ATTACHMENT( uVar2, 13, 1 );
                    TOGGLE_WEAPON_ATTACHMENT( uVar2, 13, 0 );
                    SET_LASER_SIGHT_ATTACHMENT( uVar2, -12373631 );
                    g_U3075 = 1;
                }
            }
        }
    }
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_70895(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_70961( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_70961(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_6875( uParam0 );
            }
        }
    }
    return;
}

/* P_PED_ARRAY_PLATFORM_SAFETY_CHECK */ void sub_71114(unknown uParam0)
{
    int I;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( (uParam0^)[I] )};
            if (uVar4._fU4 > 110.00000000)
            {
                 /* P_KILL_PED */ sub_71233( (uParam0^)[I] );
            }
        }
    }
    return;
}

/* P_KILL_PED */ void sub_71233(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* P_TPP2_RELEASE_ASSETS */ void sub_71388()
{
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_RELEASE_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_71469( ref l_U704, ref g_U1030 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_72017( ref l_U730, ref g_U1247 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_72460( "LEVEL_S_FIN_CP_05", ref g_U1429 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_72833( "SCRIPT_MISSION\S_AIRPORT_TRAM", ref g_U1950 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_72833( "SCRIPT_MISSION\S_AIR_PLATFORM_01", ref g_U1950 );
     /* WRITESCRIPTLOG */ sub_672( "SA", "P_TP_RELEASE_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_71469(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_71542( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_71542(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5896( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_72017(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_72091( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_72091(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5896( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_72460(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5896( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_72833(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_5896( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

