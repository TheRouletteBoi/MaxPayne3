void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U55 = -1;
    l_U56 = {64536, 64536, 64536};
    l_U78 = 0;
    l_U79 = 0;
    l_U80 = 1500;
    l_U126 = 0;
    l_U127 = 1;
    l_U128 = 1;
    l_U129 = 0;
    l_U130 = {1.50000000, 4.00000000, 1.00000000};
    l_U133 = 180.00000000;
    l_U135 = 302;
    l_U136 = 8000.00000000;
    l_U137 = 1.50000000;
    l_U138 = {-730.48000000, 2230.15000000, -4.74000000};
    l_U141 = {-768.20000000, 2218.27000000, -4.74000000};
    l_U274 = 0.20000000;
    l_U275 = {-468.52000000, 2235.45000000, -4.24000000};
    l_U278 = {11.89000000, 0.00000000, -130.14000000};
    l_U281 = {-395.11000000, 2212.84000000, -5.86000000};
    l_U284 = {-401.45000000, 2201.51000000, -5.86000000};
    l_U287 = 35.00000000;
    l_U288 = 3500;
    l_U648 = "MID_08_FIN_concat";
    l_U650 = 250;
    l_U651 = 1500;
    l_U653 = -1;
    l_U724 = 0.02400000;
    l_U725 = 428;
    l_U726 = 902;
    l_U727 = 0.01500000;
    l_U728 = 100;
    l_U729 = 100;
    l_U730 = 100;
    l_U731 = 100;
    l_U732 = 100;
    l_U733 = 250;
    l_U753 = 1500;
    l_U754 = 0;
     /* WRITESCRIPTLOG */ sub_767( "SA", "Script s_air_Tram_2_Part2.sc is starting up...", 0 );
    l_U126 = 1;
    if (g_U829 == 7)
    {
         /* TELEPORTPED */ sub_1014(  /* PLAYER_PED_ID */ sub_903(), g_U2014[7], g_U2129[7] );
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_903(), 1 );
    }
     /* P_T2P2_INIT_ARRAYS */ sub_1098();
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_2202();
         /* P_HANDLE_DEBUG */ sub_10684();
        if (l_U129 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_12191();
        }
        WAIT( 0 );
    }
    if (g_U861[6]._fU40 == 3)
    {
         /* P_T2P2_CLEANUP_ALL */ sub_4581( 0 );
    }
    else
    {
         /* P_T2P2_CLEANUP_ALL */ sub_4581( 1 );
    }
     /* P_T2P2_RELEASE_ASSETS */ sub_67011();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_air_Tram_2_Part2" );
     /* WRITESCRIPTLOG */ sub_767( "SA", "Script s_air_Tram_2_Part2.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_767(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* PLAYER_PED_ID */ int sub_903()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_941() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_941()
{
    return GET_PLAYER_ID();
}

/* TELEPORTPED */ void sub_1014(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* P_T2P2_INIT_ARRAYS */ void sub_1098()
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_INIT_ARRAYS", 0 );
    l_U594[0] = g_U2375;
    l_U594[1] = g_U2376;
    l_U594[2] = g_U2377;
    l_U594[3] = g_U2378;
    l_U594[4] = g_U2379;
    l_U594[5] = g_U2380;
    l_U594[6] = -1880103805;
    l_U594[7] = 1232833631;
    l_U594[8] = -1409914275;
    l_U594[9] = -1589640354;
    l_U594[10] = g_U2384;
    l_U594[11] = g_U2385;
    l_U594[12] = g_U2386;
    l_U594[13] = g_U2387;
    l_U594[14] = g_U2381;
    l_U594[15] = g_U2382;
    l_U594[16] = g_U2383;
    l_U612[0] = 57534114;
    l_U612[1] = -184942895;
    l_U612[2] = -1464892298;
    l_U612[3] = -612753081;
    l_U612[4] = 2090054632;
    l_U612[5] = -1986694060;
    l_U612[6] = 724901397;
    l_U612[7] = 1478009203;
    l_U305[0] = {0.00000000, -4.00000000, 1.00000000};
    l_U309[0] = -184942895;
    l_U399[0] = 0;
    l_U399[1] = 0;
    l_U399[2] = 0;
    l_U399[3] = 0;
    l_U399[4] = 1;
    l_U399[5] = 1;
    l_U406[0] = {2.00000000, 3.50000000, 0.90000000};
    l_U406[1] = {-1.50000000, 3.50000000, 0.90000000};
    l_U406[2] = {2.00000000, -2.00000000, 0.90000000};
    l_U406[3] = {-1.50000000, -3.40000000, 0.90000000};
    l_U406[4] = {2.10000000, 3.40000000, 0.90000000};
    l_U406[5] = {-1.50000000, 1.50000000, 0.90000000};
    l_U425[0] = 180.00000000;
    l_U425[1] = 0.00000000;
    l_U425[2] = 180.00000000;
    l_U425[3] = 0.00000000;
    l_U425[4] = 180.00000000;
    l_U425[5] = 0.00000000;
    l_U446[0] = 12;
    l_U446[1] = 0;
    l_U446[2] = 14;
    l_U446[3] = 4;
    l_U446[4] = 14;
    l_U446[5] = 6;
    l_U453[0] = -184942895;
    l_U453[1] = -1013714740;
    l_U453[2] = 1478009203;
    l_U453[3] = 57534114;
    l_U453[4] = 1478009203;
    l_U453[5] = 57534114;
    l_U517[0] = 6000;
    l_U517[1] = 13000;
    l_U517[2] = 10000;
    l_U517[3] = 5000;
    l_U517[4] = 2000;
    l_U517[5] = 3000;
    l_U534[0] = {0.00000000, -3.00000000, 3.10000000};
    l_U534[1] = {0.00000000, 3.50000000, 3.10000000};
    l_U534[2] = {0.00000000, -2.50000000, 2.90000000};
    l_U534[3] = {0.00000000, 4.00000000, 2.90000000};
    l_U547[0] = 1;
    l_U547[1] = 1;
    l_U547[2] = 0;
    l_U547[3] = 0;
    l_U589[0] = 6000;
    l_U589[1] = 1500;
    l_U589[2] = 5000;
    l_U589[3] = 7000;
    return;
}

/* P_HANDLE_FAILURE */ void sub_2202()
{
    if (g_U830 == 7)
    {
        switch (l_U129)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_2315()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
            {
                l_U129 = 1;
                 /* WRITESCRIPTLOG */ sub_767( "SA", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_2833())
            {
                l_U129 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_2893( 0 )) == 1)
            {
                l_U129 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
            {
                l_U129 = 3;
                 /* WRITESCRIPTLOG */ sub_767( "SA", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_767( "SA", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_941() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_941(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_903() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_903(), 0 );
                }
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
             /* P_T2P2_CLEANUP_ALL */ sub_4581( 0 );
            l_U129 = 4;
             /* WRITESCRIPTLOG */ sub_767( "SA", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_767( "SA", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_5838( ref l_U90,  /* PLAYER_PED_ID */ sub_903() );
            if ((g_U861[8]._fU40 != 4) AND (g_U861[8]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_767( "SA", "Shutting down script for MCE_FINALE_MPM.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_10425( ref g_U861[8] );
                SET_EXITFLAG_FOR_SCRIPT( g_U861[8]._fU32 );
            }
            l_U128 = 0;
            l_U129 = 5;
             /* WRITESCRIPTLOG */ sub_767( "SA", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_767( "SA", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U126 = 1;
            l_U129 = 0;
             /* WRITESCRIPTLOG */ sub_767( "SA", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* RESTARTING_CHECKPOINT */ int sub_2315()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_903(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_941(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_941(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_903() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_903(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_2833()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_2893(int iParam0)
{
    iParam0 = 1;
    switch (l_U79)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_2975( ref l_U81 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
            {
                l_U80 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_3109( ref l_U81, l_U80, 1, 1 );
             /* STARTTIMER */ sub_3259( ref l_U81 );
        }
        if ( /* ISTIMERDONE */ sub_3392( ref l_U81 ))
        {
             /* WRITESCRIPTLOG */ sub_767( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_941() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_941(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U79 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U79 = 2;
            }
            else
            {
                l_U79 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_767( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_3893();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_767( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_3893();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_2975(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_3109(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_3259(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_3392(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_3893()
{
     /* WRITESCRIPTLOG */ sub_767( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_3968( ref l_U81 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_941() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_941(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U78 = 0;
    l_U78 = l_U78;
    l_U79 = 0;
    return;
}

/* RESETTIMER */ void sub_3968(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_T2P2_CLEANUP_ALL */ void sub_4581(boolean bParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_CLEANUP_ALL", 0 );
    ISEQ_TERMINATE( 1364028685 );
    ISEQ_TERMINATE( -144347219 );
    ISEQ_TERMINATE( -651807953 );
     /* CLEANPEDARRAY */ sub_4684( ref l_U303 );
     /* CLEANPEDARRAY */ sub_4684( ref l_U392 );
     /* P_T2_CLEAN_PLACEMENTS */ sub_4847();
     /* CLEANVEHICLE */ sub_5052( l_U134 );
    if (NOT bParam0)
    {
         /* P_T2_CLEANUP_TRAM */ sub_5133( ref g_U3358 );
         /* P_T2_CLEANUP_TRAM */ sub_5133( ref g_U3557 );
        STOP_SCRIPT_STREAM( g_U4950 );
    }
    for ( I = 0; I < 3; I++ )
    {
        GAMEPLAY_HELPER_BOX_DESTROY( ref l_U654[I]._fU0 );
    }
    for ( I = 0; I < 3; I++ )
    {
        GAMEPLAY_HELPER_BOX_DESTROY( l_U718[I]._fU0 );
    }
    RESET_PED_MODEL_LOD_DISTANCES( -1880103805 );
    if (CUTSCENE_IS_LOADED( l_U648 ))
    {
        CLEAR_NAMED_CUTSCENE( l_U648 );
    }
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_5625( ref l_U734 );
    return;
}

/* CLEANPEDARRAY */ void sub_4684(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_4734( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_4734(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* P_T2_CLEAN_PLACEMENTS */ void sub_4847()
{
     /* CLEANPLACEMENTARRAY */ sub_4885( ref g_U3350 );
     /* CLEANPLACEMENT */ sub_4940( g_U3321 );
     /* CLEANPLACEMENT */ sub_4940( g_U3328 );
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_4885(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_4940( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_4940(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* CLEANVEHICLE */ void sub_5052(unknown uParam0)
{
    if (IS_VEHICLE_DEAD( uParam0 ))
    {
        ;
    }
    if (DOES_VEHICLE_EXIST( uParam0 ))
    {
        DELETE_VEHICLE( ref uParam0 );
    }
    return;
}

/* P_T2_CLEANUP_TRAM */ void sub_5133(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2_CLEANUP_TRAM", 0 );
     /* CLEANOBJECT */ sub_5199( iParam0->_fU12 );
     /* CLEANOBJECT */ sub_5199( iParam0->_fU16 );
     /* CLEANOBJECT */ sub_5199( iParam0->_fU20 );
     /* CLEANOBJECT */ sub_5199( iParam0->_fU32 );
     /* CLEANOBJECT */ sub_5199( iParam0->_fU28 );
     /* CLEANOBJECT */ sub_5199( iParam0->_fU32 );
     /* CLEANOBJECTARRAY */ sub_5313( iParam0 + 36 );
     /* CLEANOBJECTARRAY */ sub_5313( iParam0 + 48 );
     /* CLEANOBJECTARRAY */ sub_5313( iParam0 + 60 );
     /* CLEANTRAIN */ sub_5416( iParam0->_fU0 );
    return;
}

/* CLEANOBJECT */ void sub_5199(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANOBJECTARRAY */ void sub_5313(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANOBJECT */ sub_5199( (uParam0^)[I] );
    }
    return;
}

/* CLEANTRAIN */ void sub_5416(unknown uParam0)
{
    if (DOES_VEHICLE_EXIST( uParam0 ))
    {
        DELETE_MISSION_TRAIN( uParam0 );
    }
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_5625(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_5838(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_767( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_6057( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_7221( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7535( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8014( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7535( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8014( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7535( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8014( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8330( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8014( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_8330( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_8014( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_8902( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_9104( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_903(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_767( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_6057(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6119( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_6119(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_7221(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_7535(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_7939( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_7939(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_8014(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_8330(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_7939( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_8902(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_9104(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6119( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_9202( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_9202(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_10425(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_HANDLE_DEBUG */ void sub_10684()
{
    int I;
    char[16] cVar3;
    char[32] cVar7;
    char[32] cVar15;
    char[32] cVar23;
    char[32] cVar31;

    if (NOT l_U754)
    {
        START_WIDGET_GROUP( "Tram 2, Part 2" );
         /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_10778( ref l_U130, "Max attach position", 1036831949 );
        START_WIDGET_GROUP( "MID 08 Blendin" );
        ADD_WIDGET_FLOAT_SLIDER( "Helicopter skip time", ref l_U136, 0, 1E9, 500 );
        ADD_WIDGET_FLOAT_SLIDER( "Helicopter playback speed", ref l_U137, 0, 1000.00000000, 0.10000000 );
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Rappellers" );
        START_WIDGET_GROUP( "Delays" );
        for ( I = 0; I < 6; I++ )
        {
            StrCopy( ref cVar3, "", 16 );
            ConcatString(ref cVar3, I, 16);
            ADD_WIDGET_INT_SLIDER( ref cVar3, ref l_U517[I], 0, 60000, 1 );
        }
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        for ( I = 0; I < 1; I++ )
        {
            StrCopy( ref cVar7, "Mid 08 UFE ", 32 );
            ConcatString(ref cVar7, I, 32);
            ConcatString(ref cVar7, " attach position", 32);
             /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_10778( ref l_U305[I], ref cVar7, 1036831949 );
        }
        for ( I = 0; I < 6; I++ )
        {
            StrCopy( ref cVar15, "Rapel UFE", 32 );
            ConcatString(ref cVar15, I, 32);
            ConcatString(ref cVar15, "attach position", 32);
             /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_10778( ref l_U406[I], ref cVar15, 1036831949 );
        }
        ADD_WIDGET_INT_SLIDER( "Animated Cam Stop Time", ref l_U650, 0, 1000000, 50 );
        ADD_WIDGET_INT_SLIDER( "Animated Cam Blend Time", ref l_U651, 0, 1000000, 50 );
        START_WIDGET_GROUP( "Smoke Grenades" );
        START_WIDGET_GROUP( "Offsets" );
        for ( I = 0; I < 4; I++ )
        {
            StrCopy( ref cVar23, "", 32 );
            ConcatString(ref cVar23, I, 32);
             /* P_ADD_WIDGET_VECTOR_SLIDER */ sub_10778( ref l_U534[I], ref cVar23, 1036831949 );
        }
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Delays" );
        for ( I = 0; I < 4; I++ )
        {
            StrCopy( ref cVar31, "", 32 );
            ConcatString(ref cVar31, I, 32);
            ADD_WIDGET_INT_SLIDER( ref cVar31, ref l_U589[I], 0, 10000, 1 );
        }
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        START_WIDGET_GROUP( "Tram Shake" );
        ADD_WIDGET_FLOAT_SLIDER( "Horizontal shake", ref l_U724, 0, 1.00000000, 0.00100000 );
        ADD_WIDGET_INT_SLIDER( "Horizontal shake min frequency", ref l_U725, 0, 10000, 1 );
        ADD_WIDGET_INT_SLIDER( "Horizontal shake max frequency", ref l_U726, 0, 10000, 1 );
        ADD_WIDGET_FLOAT_SLIDER( "Vertical shake", ref l_U727, 0, 1.00000000, 0.00100000 );
        ADD_WIDGET_INT_SLIDER( "Vertical shake upwards min frequency", ref l_U728, 0, 2000, 1 );
        ADD_WIDGET_INT_SLIDER( "Vertical shake upwards max frequency", ref l_U729, 0, 2000, 1 );
        ADD_WIDGET_INT_SLIDER( "Vertical shake downwards min frequency", ref l_U730, 0, 2000, 1 );
        ADD_WIDGET_INT_SLIDER( "Vertical shake downwards max frequency", ref l_U731, 0, 2000, 1 );
        ADD_WIDGET_INT_SLIDER( "Vertical shake minimum delay", ref l_U732, 0, 2000, 1 );
        ADD_WIDGET_INT_SLIDER( "Vertical shake maximum delay", ref l_U733, 0, 2000, 1 );
        STOP_WIDGET_GROUP();
        STOP_WIDGET_GROUP();
        l_U754 = 1;
    }
    return;
}

/* P_ADD_WIDGET_VECTOR_SLIDER */ void sub_10778(int iParam0, unknown uParam1, unknown uParam2)
{
    START_WIDGET_GROUP( uParam1 );
    ADD_WIDGET_FLOAT_SLIDER( "x", iParam0 + 0, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "y", iParam0 + 4, 60536, 5000, uParam2 );
    ADD_WIDGET_FLOAT_SLIDER( "z", iParam0 + 8, 60536, 5000, uParam2 );
    STOP_WIDGET_GROUP();
    return;
}

/* P_HANDLE_EVENTS */ void sub_12191()
{
    int iVar2;
    unknown uVar3;
    unknown uVar4;

    iVar2 = l_U126;
    switch (l_U126)
    {
        case 0:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_IDLE", 0 );
        }
        break;
        case 1:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
        }
         /* P_INITIALIZE_SCRIPT_DATA */ sub_12465();
         /* P_SET_STATIC_DATA */ sub_12590();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U126 = 2;
        break;
        case 2:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        }
         /* P_T2P2_REQUEST_PERSISTENT_ASSETS */ sub_13165();
         /* P_T2P2_REQUEST_NONPERSISTENT_ASSETS */ sub_24088();
        l_U126 = 3;
        break;
        case 3:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        }
        if (( /* F_STREAMREQ_VEHICLE_RECORDING_IS_LOADED */ sub_30151( ref g_U1638 )) AND (( /* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ sub_29777( ref g_U1950 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_29363( ref g_U1368 )) AND (( /* F_STREAMREQ_ACTION_TREE_IS_LOADED */ sub_28985( ref g_U1783 )) AND (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_28594( ref g_U1429 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_28192( ref g_U1247 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_27795( ref g_U1030 ))))))))
        {
            if ((NOT l_U90._fU0) AND (g_U829 == 7))
            {
                l_U126 = 4;
            }
            else
            {
                l_U126 = 6;
            }
        }
        break;
        case 4:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        }
        l_U128 = 0;
        g_U846[7] = 1;
         /* P_T2_ALLOW_ALL_TRAM_UFE_TO_SPAWN */ sub_30699();
         /* P_T2_ACTIVATE_ALL_PLACEMENTS */ sub_30887();
        if (( /* HAS_SAVEFILE_LOADED */ sub_31077( ref l_U90 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_8330(  /* PLAYER_PED_ID */ sub_903(), 57534114, 200, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7535(  /* PLAYER_PED_ID */ sub_903(), -1464892298, 0, 50, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7535(  /* PLAYER_PED_ID */ sub_903(), -612753081, 1, 50, 0 );
            l_U126 = 5;
             /* WRITESCRIPTLOG */ sub_767( "CR", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U126 = 6;
             /* WRITESCRIPTLOG */ sub_767( "CR", "eCheckpointState = CP_CREATE_TRAMS", 0 );
        }
        break;
        case 5:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_903(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_903(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_903(), 0, 0 ) ))))
            {
                g_U830 = 7;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_31704( ref l_U90, g_U830,  /* PLAYER_PED_ID */ sub_903(), g_U2014[7], g_U2129[7], g_U2168[7], g_U2207[7], 1 );
                l_U126 = 6;
            }
        }
        break;
        case 6:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_CREATE_TRAMS", 0 );
            if (l_U128)
            {
                l_U134 =  /* CREATEVEHICLE */ sub_36409( 1232833631, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
                 /* P_START_VEHICLE_PLAYBACK */ sub_36983( l_U134, l_U135, 0.00000000, l_U136, 0 );
            }
            else
            {
                 /* P_T2P2_INIT_TRAM_ARRAYS */ sub_37401();
                 /* P_T2_CREATE_TRAM */ sub_37594( ref g_U3358, l_U138, 0, 0 );
                 /* P_T2_CREATE_TRAM */ sub_37594( ref g_U3557, l_U141, 0, 0 );
            }
        }
        if (( /* F_T2_DOES_TRAM_EXIST */ sub_40358( ref g_U3557 )) AND ( /* F_T2_DOES_TRAM_EXIST */ sub_40358( ref g_U3358 )))
        {
            l_U126 = 7;
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "Waiting for trams to exist....", 0 );
        }
        break;
        case 7:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_CREATE_PEDS", 0 );
            l_U311 = 1;
            l_U312 = 0;
            l_U460 = 1;
            l_U461 = 0;
        }
        if ( /* F_T2P2_SPAWN_MID08_UFE */ sub_40603())
        {
            if ( /* F_T2P2_SPAWN_RAPEL_UFE */ sub_42907())
            {
                l_U126 = 8;
            }
        }
        break;
        case 8:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_WAITING_TO_ACTIVATE", 0 );
        }
        if (g_U846[7])
        {
            if (l_U128)
            {
                if (CUTSCENE_IS_LOADED( l_U648 ))
                {
                    l_U126 = 9;
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_767( "SA", "Waiting for MID 08 to load ...", 0 );
                }
            }
            else
            {
                l_U126 = 9;
            }
        }
        break;
        case 9:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_MID_08", 0 );
             /* P_T2P2_SETUP_WEATHER_TOD */ sub_43593();
             /* P_T2P2_INIT_TRAM_ARRAYS */ sub_37401();
            if (g_U3357)
            {
                 /* CUTSYS_CREATECUTSCENEWITHBLENDOUTANDBLENDIN */ sub_58081( ref l_U621, l_U648, 43788, 43900, 44953, 45343, 45438, 50095, 55327, 56675, 250, 0 );
            }
            else
            {
                 /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_58577( ref l_U621, l_U648, 43788, 43900, 44953, 45343, 45438, 50095, 250, 0 );
            }
             /* CUTSYS_SETCUTSCENELOADEXTERIORONSKIP */ sub_58854( ref l_U621, g_U2014[7] );
             /* P_CREATE_AND_START_TIMER */ sub_49494( ref l_U744, l_U753 );
            if (l_U128)
            {
                l_U621._fU4 = 2;
                l_U621._fU104 = 0;
            }
            else
            {
                l_U621._fU4 = 7;
            }
        }
        if ( /* ISTIMERDONE */ sub_3392( ref l_U744 ))
        {
            PLAY_IMAGEFX( "FLASH_WHITE", 4, 1 );
            PLAY_IMAGEFX( "FLICKER_VIBRATE_INTERLACE_01", 4, 1 );
            PLAY_IMAGEFX( "FLICKER_VIBRATE_INTERLACE_01", 4, 1 );
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_59123( ref l_U621 ))
        {
            l_U126 = 10;
        }
        break;
        case 10:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_GAMEPLAY", 0 );
            if (g_U830 != 7)
            {
                g_U830 = 7;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_31704( ref l_U90, g_U830,  /* PLAYER_PED_ID */ sub_903(), g_U2014[7], g_U2129[7], g_U2168[7], g_U2207[7], 1 );
            }
            if (NOT l_U128)
            {
                STOP_SCRIPT_STREAM( l_U653 );
                PLAY_SCRIPT_STREAM_FRONTEND( g_U4950 );
            }
             /* P_T2P2_MID08_UFE_START_COMBAT */ sub_61497();
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_61844( ref l_U654[0], "TRIGGER_T2_ENGINE", g_U3358._fU0, 0.00000000, -0.90000000, -0.10000000, 4.00000000, 15.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_61844( ref l_U654[1], "TRIGGER_T2_CARRIAGE", g_U3358._fU4, 0.00000000, -0.40000000, -0.10000000, 4.00000000, 17.50000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ sub_61844( ref l_U654[2], "TRIGGER_T2_CABOOSE", g_U3358._fU8, 0.00000000, -1.20000000, -0.10000000, 4.00000000, 15.50000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTETHERBOX */ sub_62377( ref l_U718[0], "TETHER_T2_ENGINE", g_U3358._fU0, 0.00000000, -0.90000000, -0.10000000, 4.00000000, 15.00000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTETHERBOX */ sub_62377( ref l_U718[1], "TETHER_T2_CARRIAGE", g_U3358._fU4, 0.00000000, -0.40000000, -0.10000000, 4.00000000, 17.50000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
             /* P_CREATEVEHICLEATTACHEDTETHERBOX */ sub_62377( ref l_U718[2], "TETHER_T2_CABOOSE", g_U3358._fU8, 0.00000000, -1.20000000, -0.10000000, 4.00000000, 15.50000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1, 1 );
            l_U649 = 0;
            CLEAR_NAMED_CUTSCENE( l_U648 );
        }
         /* P_T2P2_HANDLE_TRAMS_SHAKING */ sub_51620();
        if (NOT l_U649)
        {
            if (HAS_CUTSCENE_UNLOADED())
            {
                 /* WRITESCRIPTLOG */ sub_767( "SA", "Starting pre-load of Finale MPM.", 0 );
                g_U861[8]._fU36 = 1;
                l_U649 = 1;
            }
        }
         /* P_T2_HANDLE_UFE_TRAM_SPEED */ sub_62938( ref g_U3557, ref g_U3358, g_U3320 );
         /* P_T2P2_HANDLE_UFE_REGISTER_TARGET */ sub_63580();
         /* P_T2P2_HANDLE_SMOKE_GRENADES */ sub_54719();
         /* P_T2P2_HANDLE_SEND_RAPPEL_UFE_TO_COVER */ sub_53083();
        if (NOT ( /* F_T2P2_ARE_ALL_RAPPELLERS_ACTIVATED */ sub_53681()))
        {
             /* P_T2P2_HANDLE_ACTIVATE_RAPEL_UFE */ sub_53786();
        }
        if ((l_U723) AND ( /* F_ISPEDINTRIGGERBOX */ sub_63834(  /* PLAYER_PED_ID */ sub_903(), l_U654[0] )))
        {
             /* P_T2P2_UNLOCK_UFE_IN_TRIGGER */ sub_63924( ref l_U654[0] );
            l_U723 = 0;
        }
        if ((l_U722) AND ( /* F_ISPEDINTRIGGERBOX */ sub_63834(  /* PLAYER_PED_ID */ sub_903(), l_U654[1] )))
        {
             /* P_T2P2_UNLOCK_UFE_IN_TRIGGER */ sub_63924( ref l_U654[1] );
             /* P_T2P2_UNLOCK_UFE_IN_TRIGGER */ sub_63924( ref l_U654[2] );
            l_U722 = 0;
        }
         /* P_TRAIN_SAFETY_KILL_PLAYER */ sub_64220( g_U3358._fU0 );
         /* P_TRAIN_SAFETY_KILL_PED_ARRAY */ sub_64570( ref l_U303, g_U3358._fU0 );
         /* P_TRAIN_SAFETY_KILL_PED_ARRAY */ sub_64570( ref l_U392, g_U3358._fU0 );
        if ( /* F_T2P2_ARE_ALL_RAPPELLERS_ACTIVATED */ sub_53681())
        {
             /* P_T2P2_HANDLE_BULLET_CAMS */ sub_64826();
             /* P_T2P2_HANDLE_UFE_RUSH_MAX */ sub_65722( ref l_U524[0] );
             /* P_T2P2_HANDLE_UFE_RUSH_MAX */ sub_65722( ref l_U524[1] );
        }
        uVar3 =  /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65043( ref l_U303 );
        uVar4 =  /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65043( ref l_U392 );
        if (( /* F_T2P2_ARE_ALL_RAPPELLERS_ACTIVATED */ sub_53681()) AND ((( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65043( ref l_U392 )) == 0) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65043( ref l_U303 )) == 0)))
        {
            l_U126 = 11;
        }
        break;
        case 11:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_BULLET_CAM_ACTVE", 0 );
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
        }
        if (NOT (IS_BULLET_CAMERA_RUNNING( 0 )))
        {
            l_U126 = 12;
        }
        break;
        case 12:
        if (l_U127)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "eCheckpointState = CP_FINISHED", 0 );
             /* P_T2_SET_MID09_TRAMS */ sub_66721( ref g_U3358, ref g_U3557 );
            g_U846[8] = 1;
        }
        if (NOT HAS_CUTSCENE_FINISHED())
        {
            ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
            SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
            l_U126 = 0;
        }
        break;
    }
    if (l_U126 != iVar2)
    {
        l_U127 = 1;
    }
    else
    {
        l_U127 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_12465()
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U127 = 1;
    l_U652 = 0;
    l_U723 = 1;
    l_U722 = 1;
    l_U524[0] = -1;
    l_U524[1] = -1;
    return;
}

/* P_SET_STATIC_DATA */ void sub_12590()
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_SET_STATIC_DATA", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12682( ref l_U289[0], g_U2014[7], 0.00000000, 342447784, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12682( ref l_U313[0], 0.00000000, 0.00000000, 0.00000000, 0.00000000, -1198496143, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12682( ref l_U313[1], 0.00000000, 0.00000000, 0.00000000, 0.00000000, 808432064, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12682( ref l_U313[2], 0.00000000, 0.00000000, 0.00000000, 0.00000000, 13699698, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12682( ref l_U313[3], 0.00000000, 0.00000000, 0.00000000, 0.00000000, -1087936842, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12682( ref l_U313[4], 0.00000000, 0.00000000, 0.00000000, 0.00000000, -411386070, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_12682( ref l_U313[5], 0.00000000, 0.00000000, 0.00000000, 0.00000000, 186524748, 7, 3, 2, 0, 0 );
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_12682(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_T2P2_REQUEST_PERSISTENT_ASSETS */ void sub_13165()
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_REQUEST_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_13270( ref l_U594, ref g_U1030 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ sub_16192( ref l_U612, ref g_U1247 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_18239( "level_s_fin_cp_07", ref g_U1429 );
     /* P_STREAMREQ_AUDIO_BANK_INSERT */ sub_20150( "SCRIPT_MISSION\S_AIRPORT_TRAM", ref g_U1950 );
     /* P_STREAMREQ_VEHICLE_RECORDING_INSERT */ sub_22053( l_U135, ref g_U1638 );
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_REQUEST_PERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_13270(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_13343( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_13343(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_13410( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_13668( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_13410(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_13668( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_13668( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_13668( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_15199( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_13668( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_13668( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_13668(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_13729( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_13729(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_15199(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT_ARRAY */ void sub_16192(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_16266( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_16266(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_16320( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_16581( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_16320(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_16581( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_16581( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_16581( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_15199( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_16581( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_16581( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_16581(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_13729( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_18239(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_18291( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18543( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_18291(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18543( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18543( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18543( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_15199( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18543( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_18543( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_18543(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_13729( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_INSERT */ void sub_20150(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ sub_20203( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing AUDIO_BANK asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 64 );
        (uParam1^)[iVar4]._fU64 = 1;
         /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20458( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_AUDIO_BANK_IS_INDEX_AVAILABLE */ int sub_20203(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU64 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20458( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is already loading!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20458( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (IS_SCRIPT_AUDIO_BANK_LOADED( ref (uParam1^)[Result]._fU0, 1 ))
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The AUDIO_BANK asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20458( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The AUDIO_BANK is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The AUDIO_BANK asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 64 );
                    (uParam1^)[Result]._fU64 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_15199( ref (uParam1^)[Result]._fU68 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU64 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The AUDIO_BANK is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The AUDIO_BANK asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20458( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU64 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (IS_SCRIPT_AUDIO_BANK_LOADED( uParam0, 1 ))
        {
            DISPLAYF( "[CCB] ### The AUDIO_BANK is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The AUDIO_BANK is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing AUDIO_BANK: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 64 );
            (uParam1^)[iVar6]._fU64 = 3;
             /* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ sub_20458( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The AUDIO_BANK - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_AUDIO_BANK_THREADID_SET_ID */ void sub_20458(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_13729( uParam2, ref (uParam1^)[uParam0]._fU68 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU68[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The AUDIO_BANK asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_VEHICLE_RECORDING_INSERT */ void sub_22053(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_VEHICLE_RECORDING_IS_INDEX_AVAILABLE */ sub_22113( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing VEHICLE_RECORDING asset name: {} ###", 1, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ sub_22383( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_VEHICLE_RECORDING_IS_INDEX_AVAILABLE */ int sub_22113(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The VEHICLE_RECORDING is being requested: {} ###", 1, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The VEHICLE_RECORDING asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ sub_22383( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The VEHICLE_RECORDING is loading: {} ###", 1, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The VEHICLE_RECORDING asset is already loading!!!", 0 );
                 /* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ sub_22383( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_VEHICLE_RECORDING_BEEN_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The VEHICLE_RECORDING is already loaded: {} ###", 1, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The VEHICLE_RECORDING asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ sub_22383( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The VEHICLE_RECORDING is being requested: {} ###", 1, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The VEHICLE_RECORDING asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = -1;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_15199( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The VEHICLE_RECORDING is being removed: {} ###", 1, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The VEHICLE_RECORDING asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ sub_22383( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_VEHICLE_RECORDING_BEEN_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The VEHICLE_RECORDING is already loaded: {} ###", 1, 513, iParam0 );
            DISPLAYF( "The VEHICLE_RECORDING is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing VEHICLE_RECORDING: {} ###", 1, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ sub_22383( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The VEHICLE_RECORDING - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_VEHICLE_RECORDING_THREADID_SET_ID */ void sub_22383(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_13729( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The VEHICLE_RECORDING asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_T2P2_REQUEST_NONPERSISTENT_ASSETS */ void sub_24088()
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_REQUEST_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_24200( 1364028685, ref g_U1368 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_24200( -144347219, ref g_U1368 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_24200( -651807953, ref g_U1368 );
    g_U4950 =  /* F_REQUEST_SCRIPT_STREAM */ sub_27027( ref g_U2427 );
    WAIT( 0 );
    l_U653 =  /* F_REQUEST_SCRIPT_STREAM */ sub_27027( ref g_U2435 );
     /* LOADSEAMLESSCUTSCENE */ sub_27311( l_U648, 0 );
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_REQUEST_NONPERSISTENT_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_24200(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_24261( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24511( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_24261(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24511( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24511( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24511( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24511( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_15199( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_15199( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24511( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_24511( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_24511(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_13729( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_REQUEST_SCRIPT_STREAM */ int sub_27027(unknown uParam0)
{
    int Result;

     /* WRITESCRIPTLOG */ sub_767( "SA", "F_REQUEST_SCRIPT_STREAM start", 0 );
    for ( Result = 0; Result < 3; Result++ )
    {
        if ((GET_SCRIPT_STREAM_STATE( "ANY_STREAM", Result )) == 0)
        {
            DISPLAYF( "Loading stream {0} into slot {1}", 2, 1537, uParam0, 513, Result );
            REQUEST_SCRIPT_STREAM( uParam0, Result );
            return Result;
        }
    }
     /* WRITESCRIPTLOG */ sub_767( "SA", "F_REQUEST_SCRIPT_STREAM end", 0 );
    return -1;
}

/* LOADSEAMLESSCUTSCENE */ void sub_27311(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_27795(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_28192(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_28594(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ACTION_TREE_IS_LOADED */ int sub_28985(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for ACTION_TREE to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_29363(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_AUDIO_BANK_IS_LOADED */ int sub_29777(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU64 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be requested: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to load: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU64 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for AUDIO_BANK to be removed: {}", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_VEHICLE_RECORDING_IS_LOADED */ int sub_30151(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the VEHICLE_RECORDING to be requested: {} ###", 1, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the VEHICLE_RECORDING to load: {} ###", 1, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the VEHICLE_RECORDING to be removed: {} ###", 1, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* P_T2_ALLOW_ALL_TRAM_UFE_TO_SPAWN */ void sub_30699()
{
    int I;

     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2_ALLOW_ALL_TRAM_UFE_TO_SPAWN start", 0 );
    for ( I = 0; I < 7; I++ )
    {
        g_U3214[I] = 1;
    }
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2_ALLOW_ALL_TRAM_UFE_TO_SPAWN end", 0 );
    return;
}

/* P_T2_ACTIVATE_ALL_PLACEMENTS */ void sub_30887()
{
    int I;

     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2_ACTIVATE_ALL_PLACEMENTS start", 0 );
    for ( I = 0; I < g_U3350; I++ )
    {
        g_U3353[I] = 1;
    }
    g_U3356 = 1;
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2_ACTIVATE_ALL_PLACEMENTS end", 0 );
    return;
}

/* HAS_SAVEFILE_LOADED */ int sub_31077(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_767( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_5838( uParam0,  /* PLAYER_PED_ID */ sub_903() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_31704(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_767( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_767( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_9104( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_31995( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32472( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32472( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32732( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32472( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32732( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32732( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32472( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32732( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32732( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32732( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_32472( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32732( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32732( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32732( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_32732( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_34312( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_767( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_31995(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_6119( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_767( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_767( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_32472(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_32732(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_34312(int iParam0)
{
     /* WRITE_STRING */ sub_7939( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_34400( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_34477( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_34477( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_34477( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_34477( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_34477( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_35347( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU52 );
     /* WRITE_STRING */ sub_7939( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU96 );
     /* WRITE_STRING */ sub_7939( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU100 );
     /* WRITE_STRING */ sub_7939( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU104 );
     /* WRITE_STRING */ sub_7939( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU108 );
     /* WRITE_STRING */ sub_7939( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU112 );
     /* WRITE_STRING */ sub_7939( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU116 );
     /* WRITE_STRING */ sub_7939( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU120 );
     /* WRITE_STRING */ sub_7939( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU124 );
     /* WRITE_STRING */ sub_7939( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU128 );
     /* WRITE_STRING */ sub_7939( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_34646( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_34646( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_34646( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_34400(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_34477(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_34646(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_35347(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* CREATEVEHICLE */ void sub_36409(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, int iParam5, unknown uParam6, unknown uParam7)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a vehicle with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_36536( uParam0, 1 );
    }
    Result = CREATE_VEHICLE( uParam0, uParam1, uParam4, uParam6, uParam7 );
    if (iParam5 == 1)
    {
        while ((DOES_VEHICLE_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for vehicle to exist: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if (DOES_VEHICLE_EXIST( Result ))
    {
        SET_PETROLTANK_BURN_RATE( Result, 125.00000000 );
    }
    return Result;
}

/* LOADMODEL */ void sub_36536(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_7939( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_START_VEHICLE_PLAYBACK */ void sub_36983(unknown uParam0, unknown uParam1, unknown uParam2, float fParam3, boolean bParam4)
{
    if (NOT (IS_VEHICLE_DEAD( uParam0 )))
    {
        if (IS_PLAYBACK_GOING_ON_FOR_VEHICLE( uParam0 ))
        {
            STOP_PLAYBACK_RECORDED_VEHICLE( uParam0 );
        }
    }
     /* LOADVEHICLERECORDING */ sub_37061( uParam1, 1 );
    if (NOT (IS_VEHICLE_DEAD( uParam0 )))
    {
        START_PLAYBACK_RECORDED_VEHICLE( uParam0, uParam1 );
        SET_PLAYBACK_SPEED( uParam0, uParam2 );
        if (fParam3 > 0.00000000)
        {
            SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE( uParam0, fParam3 );
        }
    }
    if (bParam4)
    {
        while ((NOT (IS_PLAYBACK_GOING_ON_FOR_VEHICLE( uParam0 ))) AND (NOT (IS_VEHICLE_DEAD( uParam0 ))))
        {
             /* WRITE_STRING */ sub_7939( "Waiting for vehicle to start playing recorded path." );
            WAIT( 0 );
        }
    }
    return;
}

/* LOADVEHICLERECORDING */ void sub_37061(unknown uParam0, int iParam1)
{
    REQUEST_VEHICLE_RECORDING( uParam0 );
    if (iParam1 == 1)
    {
        while ((HAS_VEHICLE_RECORDING_BEEN_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a recording to be loaded: Rec# {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* P_T2P2_INIT_TRAM_ARRAYS */ void sub_37401()
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_INIT_TRAM_ARRAYS", 0 );
    g_U3358._fU332 = 0;
    g_U3358._fU348 = 1;
    g_U3358._fU352 = 0;
    g_U3358._fU356 = 1;
    g_U3358._fU360 = 1;
    g_U3557._fU332 = 1;
    g_U3557._fU348 = 0;
    g_U3557._fU352 = 1;
    g_U3557._fU356 = 1;
    g_U3557._fU360 = 0;
    return;
}

/* P_T2_CREATE_TRAM */ void sub_37594(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, boolean bParam4, unknown uParam5)
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2_CREATE_TRAM", 0 );
    iParam0->_fU0 =  /* F_CREATE_TRAM */ sub_37694( uParam1, uParam5, iParam0->_fU332, iParam0->_fU348, iParam0->_fU352, iParam0->_fU356, iParam0->_fU360, 0 );
     /* P_SET_TRAM_SPEED */ sub_38250( iParam0->_fU0, 0.00000000 );
    if (NOT (IS_VEHICLE_DEAD( iParam0->_fU0 )))
    {
        iParam0->_fU8 = GET_TRAIN_CABOOSE( iParam0->_fU0 );
        iParam0->_fU4 = GET_TRAIN_CARRIAGE( iParam0->_fU0, 1 );
        if (iParam0->_fU332 == 0)
        {
            if (bParam4)
            {
                iParam0->_fU12 =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2378, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
            }
            iParam0->_fU24 =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2381, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        }
        else if (bParam4)
        {
            iParam0->_fU12 =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2379, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        }
        iParam0->_fU24 =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2382, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );;
        if (bParam4)
        {
            ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU12, iParam0->_fU0, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
            SET_OBJECT_COLLISION( iParam0->_fU12, 1 );
        }
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU24, iParam0->_fU0, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        iParam0->_fU36[0] =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2384, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        iParam0->_fU36[1] =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2385, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU36[0], iParam0->_fU0, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU36[1], iParam0->_fU0, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        if (NOT (IS_STRING_NULL( uParam5 )))
        {
            if (bParam4)
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU12, uParam5 );
            }
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU24, uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU36[0], uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU36[1], uParam5 );
        }
    }
    if (NOT (IS_VEHICLE_DEAD( iParam0->_fU4 )))
    {
        if (bParam4)
        {
            iParam0->_fU16 =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2380, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
            ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU16, iParam0->_fU4, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
            SET_OBJECT_COLLISION( iParam0->_fU16, 1 );
        }
        iParam0->_fU28 =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2383, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU28, iParam0->_fU4, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        iParam0->_fU48[0] =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2386, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        iParam0->_fU48[1] =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2387, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU48[0], iParam0->_fU4, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU48[1], iParam0->_fU4, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        if (NOT (IS_STRING_NULL( uParam5 )))
        {
            if (bParam4)
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU16, uParam5 );
            }
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU28, uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU48[0], uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU48[1], uParam5 );
        }
    }
    if (NOT (IS_VEHICLE_DEAD( iParam0->_fU8 )))
    {
        if (iParam0->_fU332 == 0)
        {
            if (bParam4)
            {
                iParam0->_fU20 =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2379, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
            }
            iParam0->_fU32 =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2382, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        }
        else if (bParam4)
        {
            iParam0->_fU20 =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2378, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        }
        iParam0->_fU32 =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2381, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );;
        if (bParam4)
        {
            ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU20, iParam0->_fU8, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
            SET_OBJECT_COLLISION( iParam0->_fU20, 1 );
        }
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU32, iParam0->_fU8, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        iParam0->_fU60[0] =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2384, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        iParam0->_fU60[1] =  /* CREATEOBJECTNOOFFSET */ sub_38424( g_U2385, uParam1, 0.00000000, 0.00000000, 0.00000000, 0, 0, 0 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU60[0], iParam0->_fU8, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        ATTACH_OBJECT_TO_VEHICLE( iParam0->_fU60[1], iParam0->_fU8, 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000 );
        if (NOT (IS_STRING_NULL( uParam5 )))
        {
            if (bParam4)
            {
                ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU20, uParam5 );
            }
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU32, uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU60[0], uParam5 );
            ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU60[1], uParam5 );
        }
    }
    return;
}

/* F_CREATE_TRAM */ void sub_37694(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, boolean bParam5, boolean bParam6, boolean bParam7, boolean bParam8, boolean bParam9)
{
    unknown Result;
    unknown uVar13;
    unknown uVar14;

     /* WRITESCRIPTLOG */ sub_767( "GA", "F_CREATE_TRAM start", 0 );
    Result = CREATE_MISSION_TRAIN( uParam4, uParam0, 1 );
    if (bParam9)
    {
        while (NOT (DOES_VEHICLE_EXIST( Result )))
        {
             /* WRITESCRIPTLOG */ sub_767( "GA", "Waiting for tram to exist.", 0 );
            WAIT( 0 );
        }
    }
    if (NOT (IS_VEHICLE_DEAD( Result )))
    {
        SET_TRAIN_LEAVES_STATION( Result );
        SET_TRAIN_SPEED( Result, 0.00000000 );
        SET_TRAIN_CRUISE_SPEED( Result, 0.00000000 );
        SET_TRAIN_STOPS_FOR_STATIONS( Result, 0 );
        if (NOT (IS_STRING_NULL( uParam3 )))
        {
            SET_ROOM_FOR_VEHICLE_BY_NAME( Result, uParam3 );
        }
        SET_VEHICLE_EXTRA( Result, 3, NOT bParam5 );
        SET_VEHICLE_EXTRA( Result, 4, NOT bParam7 );
        SET_VEHICLE_EXTRA( Result, 5, NOT bParam6 );
        SET_VEHICLE_EXTRA( Result, 6, NOT bParam8 );
        uVar13 = GET_TRAIN_CARRIAGE( Result, 1 );
        uVar14 = GET_TRAIN_CABOOSE( Result );
    }
    if (NOT (IS_VEHICLE_DEAD( uVar13 )))
    {
        if (NOT (IS_STRING_NULL( uParam3 )))
        {
            SET_ROOM_FOR_VEHICLE_BY_NAME( uVar13, uParam3 );
        }
        SET_VEHICLE_EXTRA( uVar13, 3, NOT bParam5 );
        SET_VEHICLE_EXTRA( uVar13, 4, NOT bParam7 );
        SET_VEHICLE_EXTRA( uVar13, 5, NOT bParam6 );
        SET_VEHICLE_EXTRA( uVar13, 6, NOT bParam8 );
    }
    if (NOT (IS_VEHICLE_DEAD( uVar14 )))
    {
        if (NOT (IS_STRING_NULL( uParam3 )))
        {
            SET_ROOM_FOR_VEHICLE_BY_NAME( uVar14, uParam3 );
        }
        SET_VEHICLE_EXTRA( uVar14, 3, NOT bParam5 );
        SET_VEHICLE_EXTRA( uVar14, 4, NOT bParam7 );
        SET_VEHICLE_EXTRA( uVar14, 5, NOT bParam6 );
        SET_VEHICLE_EXTRA( uVar14, 6, NOT bParam8 );
    }
    return Result;
}

/* P_SET_TRAM_SPEED */ void sub_38250(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_VEHICLE_DEAD( uParam0 )))
    {
        SET_TRAIN_SPEED( uParam0, uParam1 );
        SET_TRAIN_CRUISE_SPEED( uParam0, uParam1 );
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_38424(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_36536( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* F_T2_DOES_TRAM_EXIST */ int sub_40358(int iParam0)
{
    if ((DOES_VEHICLE_EXIST( iParam0->_fU8 )) AND ((DOES_VEHICLE_EXIST( iParam0->_fU4 )) AND (DOES_VEHICLE_EXIST( iParam0->_fU0 ))))
    {
        return 1;
    }
    return 0;
}

/* F_T2P2_SPAWN_MID08_UFE */ int sub_40603()
{
    char[64] cVar2;

    switch (l_U311)
    {
        case 1:
        l_U312 = 0;
        l_U311 = 2;
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_T2P2_Mid08UFE[", 64 );
        ConcatString(ref cVar2, l_U312, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        l_U303[l_U312] =  /* CREATEPED */ sub_40772( ref l_U289[l_U312] );
        if (NOT (IS_PED_DEAD( l_U303[l_U312] )))
        {
             /* F_GIVEPEDWEAPON */ sub_8330( l_U303[l_U312], l_U309[l_U312], 25000, 0, 0 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U303[l_U312], 1 );
        }
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_41588( l_U303[l_U312], ref l_U527 );
         /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_42374( ref l_U303[l_U312], ref g_U2403, 2.00000000, 5.00000000 );
        l_U312++;
        if (l_U312 >= l_U303)
        {
            l_U311 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_42551( ref l_U303, "MID08_UFE" );
         /* P_DEACTIVATEPEDARRAY */ sub_42685( ref l_U303 );
        l_U311 = 4;
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* CREATEPED */ void sub_40772(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_36536( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_41263( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_41364( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* SETPEDDEFAULTSTATS */ void sub_41263(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_41364(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_41588(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_7939( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_41758( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_41758( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_SETUP_AI_GROUP */ void sub_41758(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* P_SET_PED_TEMPLATE_AND_RANGES */ void sub_42374(unknown uParam0, unknown uParam1, float fParam2, float fParam3)
{
    if (NOT (IS_PED_DEAD( (uParam0^) )))
    {
        SET_PED_AI_TEMPLATE( (uParam0^), uParam1 );
        if (fParam2 > -1)
        {
            SET_PED_COMBAT_RANGE_MIN( (uParam0^), fParam2 );
        }
        if (fParam3 > -1)
        {
            SET_PED_COMBAT_RANGE_MAX( (uParam0^), fParam3 );
        }
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_42551(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_DEACTIVATEPEDARRAY */ void sub_42685(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_42739( (uParam0^)[I] );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_42739(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* F_T2P2_SPAWN_RAPEL_UFE */ int sub_42907()
{
    char[64] cVar2;

    switch (l_U460)
    {
        case 1:
        l_U461 = 0;
        l_U460 = 2;
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_T2P2_RappelUFE[", 64 );
        ConcatString(ref cVar2, l_U461, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        l_U392[l_U461] =  /* CREATEPED */ sub_40772( ref l_U313[l_U461] );
        if (NOT (IS_PED_DEAD( l_U392[l_U461] )))
        {
             /* F_GIVEPEDWEAPON */ sub_8330( l_U392[l_U461], l_U453[l_U461], 25000, 0, 0 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U392[l_U461], 1 );
        }
        l_U432[l_U461] = 0;
        l_U439[l_U461] = 0;
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_41588( l_U392[l_U461], ref l_U527 );
         /* P_SET_PED_TEMPLATE_AND_RANGES */ sub_42374( ref l_U392[l_U461], ref g_U2403, 2.00000000, 30.00000000 );
        l_U461++;
        if (l_U461 >= l_U392)
        {
            l_U460 = 3;
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_42551( ref l_U392, "RAPEL_UFE" );
         /* P_DEACTIVATEPEDARRAY */ sub_42685( ref l_U392 );
        l_U460 = 4;
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_T2P2_SETUP_WEATHER_TOD */ void sub_43593()
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_SETUP_WEATHER_TOD", 0 );
     /* P_SET_WEATHER_TOD_12EXTRASUNNY */ sub_43668();
    return;
}

/* P_SET_WEATHER_TOD_12EXTRASUNNY */ void sub_43668()
{
    SET_WEATHER_TRANSITION_IMMEDIATE( 1 );
    SET_WEATHER_TYPE_NOW_PERSIST( "EXTRASUNNY" );
    FREEZE_TIME_OF_DAY( 12, 0 );
    return;
}

/* F_MID_08_PRE_CUTSCENE */ int sub_43788()
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_MID_08_PRE_CUTSCENE", 0 );
     /* P_SET_TRAM_SPEED */ sub_38250( g_U3358._fU0, 0.00000000 );
     /* P_SET_TRAM_SPEED */ sub_38250( g_U3557._fU0, 0.00000000 );
    return 1;
}

/* P_MID08_REGISTER */ void sub_43900()
{
    char[32] cVar2;

     /* WRITESCRIPTLOG */ sub_767( "SA", "P_MID08_REGISTER", 0 );
    CUTSCENE_ENABLE_SKIP( 0 );
    if ((NOT (IS_VEHICLE_DEAD( g_U3358._fU8 ))) AND ( /* ISPEDVALID */ sub_43973(  /* PLAYER_PED_ID */ sub_903(), 0 )))
    {
        StrCopy( ref cVar2, "VEH-", 32 );
        ConcatString(ref cVar2, g_U3358._fU8, 32);
        ConcatString(ref cVar2, "-5", 32);
        CUTSCENE_REGISTER_PED_ATTACH_TO_VEHICLE(  /* PLAYER_PED_ID */ sub_903(), g_U3358._fU8, 0, 1.45400000, 2.57300000, 0.85000000, 90.00000000, 360.00000000, 0, 0 );
        CUTSCENE_REGISTER_SET_PLAYER_IN_COVER( "DYNAMIC", ref cVar2, 1, 0 );
        CUTSCENE_SET_COVER_CAMERA_DIRECTION( g_U2168[7], g_U2207[7] );
        ISEQ_REGISTER_ENTITY( 1364028685, "Max",  /* PLAYER_PED_ID */ sub_903(), 0 );
        CUTSCENE_REGISTER_ISEQ( 1364028685 );
    }
    if (NOT (IS_PED_DEAD( l_U303[0] )))
    {
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "A_UFE_Sold_D", 342447784 );
    }
    if (NOT (IS_PED_DEAD( l_U392[0] )))
    {
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "A_UFE_Sold_D^1", -1198496143 );
    }
    if (NOT (IS_PED_DEAD( l_U392[1] )))
    {
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "A_UFE_Sold_D^2", 808432064 );
    }
    if (NOT (IS_PED_DEAD( l_U392[2] )))
    {
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "A_UFE_Sold_D^3", 13699698 );
    }
    if (NOT (IS_VEHICLE_DEAD( l_U134 )))
    {
        REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE( l_U134, "heli_ufe", 0 );
    }
    if (NOT (IS_VEHICLE_DEAD( g_U3358._fU0 )))
    {
        SET_VEHICLE_EXTRA( g_U3358._fU0, 3, NOT g_U3358._fU348 );
        SET_VEHICLE_EXTRA( g_U3358._fU0, 4, NOT g_U3358._fU356 );
        SET_VEHICLE_EXTRA( g_U3358._fU0, 5, NOT g_U3358._fU352 );
        SET_VEHICLE_EXTRA( g_U3358._fU0, 6, NOT g_U3358._fU360 );
        REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE( g_U3358._fU0, "monorail", 0 );
    }
    if (NOT (IS_VEHICLE_DEAD( g_U3358._fU4 )))
    {
        SET_VEHICLE_EXTRA( g_U3358._fU4, 3, NOT g_U3358._fU348 );
        SET_VEHICLE_EXTRA( g_U3358._fU4, 4, NOT g_U3358._fU356 );
        SET_VEHICLE_EXTRA( g_U3358._fU4, 5, NOT g_U3358._fU352 );
        SET_VEHICLE_EXTRA( g_U3358._fU4, 6, NOT g_U3358._fU360 );
        REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE( g_U3358._fU4, "monorail3", 0 );
    }
    if (NOT (IS_VEHICLE_DEAD( g_U3358._fU8 )))
    {
        SET_VEHICLE_EXTRA( g_U3358._fU8, 3, NOT g_U3358._fU348 );
        SET_VEHICLE_EXTRA( g_U3358._fU8, 4, NOT g_U3358._fU356 );
        SET_VEHICLE_EXTRA( g_U3358._fU8, 5, NOT g_U3358._fU352 );
        SET_VEHICLE_EXTRA( g_U3358._fU8, 6, NOT g_U3358._fU360 );
        REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE( g_U3358._fU8, "monorail2", 0 );
    }
    return;
}

/* ISPEDVALID */ void sub_43973(unknown uParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((DOES_PED_EXIST( uParam0 )) == 1)
    {
        Result = 1;
    }
    else
    {
        Result = 0;
    }
    if (Result == 1)
    {
        if ((IS_PED_DEAD( uParam0 )) == 1)
        {
            if (iParam1 == 1)
            {
                Result = 1;
            }
            else
            {
                Result = 0;
            }
        }
        else
        {
            Result = 1;
        }
    }
    return Result;
}

/* P_MID_08_HANDLE_PLAYING */ void sub_44953()
{
    if (l_U621._fU52)
    {
        STOP_SCRIPT_STREAM( l_U653 );
        PLAY_SCRIPT_STREAM_FRONTEND( g_U4950 );
    }
    if (NOT (IS_VEHICLE_DEAD( l_U134 )))
    {
        SET_VEHICLE_ENGINE_ON( l_U134, 1, 1 );
        SET_HELI_BLADES_FULL_SPEED( l_U134 );
    }
     /* TELEPORTTRAIN */ sub_45084( g_U3358._fU0, l_U138 );
    if (NOT l_U652)
    {
        if (GET_CUTSCENE_TIME_MS() >= 4036)
        {
             /* WRITESCRIPTLOG */ sub_767( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_2_4 mood. Fade in 0 sec", 0 );
            AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_2_4", "FINALE_01_2_4", 0.00000000, 0, 0, -1082130432, 0 );
            l_U652 = 1;
        }
    }
    return;
}

/* TELEPORTTRAIN */ void sub_45084(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    if (NOT (IS_VEHICLE_DEAD( uParam0 )))
    {
        SET_MISSION_TRAIN_COORDS( uParam0, uParam1 );
    }
    return;
}

/* F_T2P2_MID08_POSTCUTSCENE */ int sub_45343()
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_MID08_PostCutsene", 0 );
     /* CLEANVEHICLE */ sub_5052( l_U134 );
    return 1;
}

/* P_T2P2_MID08_PREPAREBLENDOUT */ void sub_45438()
{
    char[32] cVar2;

     /* WRITESCRIPTLOG */ sub_767( "GA", "P_T2P2_MID08_PrepareBlendout start", 0 );
     /* P_T2_CREATE_PLACEMENTS */ sub_45534( ref g_U3358._fU4, 0 );
     /* TELEPORTTRAIN */ sub_45084( g_U3358._fU0, l_U138 );
     /* TELEPORTTRAIN */ sub_45084( g_U3557._fU0, l_U141 );
    if ((NOT (IS_VEHICLE_DEAD( g_U3358._fU8 ))) AND (NOT l_U128))
    {
        FREEZE_PED_POSITION(  /* PLAYER_PED_ID */ sub_903(), 0 );
        ATTACH_PED_TO_VEHICLE(  /* PLAYER_PED_ID */ sub_903(), g_U3358._fU8, 0, 1.45400000, 2.57300000, 0.85000000, 90.00000000, 360.00000000, 0, 0, 0, 1 );
        WAIT( 0 );
        StrCopy( ref cVar2, "VEH-", 32 );
        ConcatString(ref cVar2, g_U3358._fU8, 32);
        ConcatString(ref cVar2, "-5", 32);
        SNAP_PLAYER_TO_COVERPOINT(  /* PLAYER_ID */ sub_941(), "DYNAMIC", ref cVar2, 0 );
        DISPLAYF( "SNAPPING PLAYER TO COVER POINT {0} ", 1, 1281, ref cVar2 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
        {
            ISEQ_REGISTER_ENTITY( 1364028685, "Max",  /* PLAYER_PED_ID */ sub_903(), 0 );
            ISEQ_START( 1364028685 );
        }
    }
     /* F_HOLSTER_PLAYER_RIFLE */ sub_47628( 1 );
     /* P_UNHOLSTER_PLAYER_PISTOL_RIGHT */ sub_48086( 1 );
     /* P_T2P2_ACTIVATE_MID08_UFE */ sub_48423();
     /* P_T2P1_OPEN_EMERGENCY_HATCHES */ sub_49091();
     /* P_T2P2_START_RAPPELLER_ACTIVATION */ sub_49372();
     /* P_T2P2_START_SMOKE_GRENADES */ sub_49576();
    CAMERA_PLAY_ANIMATED_ATTACHED_VEHICLE( "LEVEL_S_FIN_CP_07", "B_OUT_MID_08_FIN_A_CAM", 0.27500000, -4.11200000, 1.30000000, 0, g_U3358._fU8, 0, 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
    {
        SET_PED_COLLISION(  /* PLAYER_PED_ID */ sub_903(), 0 );
    }
    if (NOT AUDIO_IS_MUSIC_PLAYING())
    {
         /* WRITESCRIPTLOG */ sub_767( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_2_4 mood. Fade in 0 sec", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_2_4", "FINALE_01_2_4", 0.00000000, 0, 0, -1082130432, 0 );
    }
     /* WRITESCRIPTLOG */ sub_767( "GA", "P_T2P2_MID08_PrepareBlendout end", 0 );
    return;
}

/* P_T2_CREATE_PLACEMENTS */ void sub_45534(unknown uParam0, unknown uParam1)
{
    vector[3] vVar4;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2_CREATE_PLACEMENTS", 0 );
    array(ref vVar4, 3);
    vVar4[0] = {-1.50000000, -8.35000000, 0.94500000};
    vVar4[1] = {-1.45000000, -8.35000000, 1.20700000};
    vVar4[2] = {-1.35000000, -8.35000000, 1.20700000};
     /* P_CREATE_TRAM_PAINKILLERS */ sub_45692( ref g_U3350, ref vVar4, ref g_U3353, (uParam0^), uParam1 );
     /* P_T2_CREATE_AMMO_BAG */ sub_46165( uParam0, g_U3322, g_U3325, uParam1 );
     /* P_T2_CREATE_RIFLE */ sub_46986( uParam0, g_U3329, g_U3332, uParam1 );
    return;
}

/* P_CREATE_TRAM_PAINKILLERS */ void sub_45692(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    vector vVar7;
    unknown uVar10;
    int I;
    vector vVar12;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;

    if (NOT (IS_VEHICLE_DEAD( uParam3 )))
    {
        vVar7 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( uParam3 )};
        uVar10 = GET_VEHICLE_HEADING( uParam3 );
        for ( I = 0; I < (uParam0^); I++ )
        {
            if ((uParam2^)[I])
            {
                if (DOES_PLACEMENT_EXIST( (uParam0^)[I] ))
                {
                     /* CLEANPLACEMENT */ sub_4940( (uParam0^)[I] );
                }
                vVar12 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", VECTOR_ROTATE_AXIS( (uParam1^)[I], uVar10, "z" )};
                uVar15 = {vVar12 + vVar7};
                (uParam0^)[I] =  /* CREATEPLACEMENT */ sub_45902( -4072149, uVar15, 0.00000000, 0.00000000, 0.00000000, 1, 1, 0, 1119092736 );
                if ((DOES_PLACEMENT_EXIST( (uParam0^)[I] )) AND (NOT (IS_STRING_NULL( uParam4 ))))
                {
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( (uParam0^)[I], uParam4 );
                }
            }
        }
    }
    return;
}

/* CREATEPLACEMENT */ void sub_45902(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_T2_CREATE_AMMO_BAG */ void sub_46165(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    unknown uVar10;
    vector vVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

     /* WRITESCRIPTLOG */ sub_767( "SA", "P_TP_SPAWN_AMMO_BAG_AND_SNIPER_RIFLE", 0 );
    if (NOT (IS_VEHICLE_DEAD( (uParam0^) )))
    {
        if (DOES_PLACEMENT_EXIST( g_U3321 ))
        {
             /* CLEANPLACEMENT */ sub_4940( g_U3321 );
        }
        uVar10 = GET_VEHICLE_HEADING( (uParam0^) );
        vVar11 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", VECTOR_ROTATE_AXIS( uParam1, uVar10, "z" )};
        uVar14 = {vVar11 + (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( (uParam0^) )))};
        uVar17 = {uParam4};
        uVar17._fU8 +=  /* FDEGREESTORADIANS */ sub_46359( uVar10 );
        DISPLAYF( "P_T2_CREATE_AMMO_BAG() - Creating ammo bag at {0}, {1}, {2}", 3, 769, uVar14._fU0, 769, uVar14._fU4, 769, uVar14._fU8 );
        g_U3321 = CREATE_AMMOBAG_PLACEMENT_ROTATE( uVar14, uVar17, 10.00000000, 3.00000000, 0, 1119092736 );
        if (DOES_PLACEMENT_EXIST( g_U3321 ))
        {
             /* P_SETUP_AMMO_BAG_DEFAULTS */ sub_46569( g_U3321 );
            SET_AMMOBAG_ENABLED( g_U3321, 1 );
            if (NOT (IS_STRING_NULL( uParam7 )))
            {
                ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U3321, uParam7 );
            }
        }
    }
    return;
}

/* FDEGREESTORADIANS */ float sub_46359(unknown uParam0)
{
    return uParam0 * (3.14159300 / 180.00000000);
}

/* P_SETUP_AMMO_BAG_DEFAULTS */ void sub_46569(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        SET_AMMOBAG_REGEN_TIME( uParam0, 10.00000000 );
        SET_AMMOBAG_REGEN_RANGE( uParam0, 3.00000000 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1088031219, 45 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 954369040, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1138793073, 95 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1087746638, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1295933220, 30 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1383321053, 85 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1481241171, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1889644301, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -790090695, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1742569970, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1575030772, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1622373246, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 558118158, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, -1701914198, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 1126469201, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 936600426, 0 );
        SET_AMMOBAG_AMMO_AMOUNT( uParam0, 205668857, 0 );
    }
    return;
}

/* P_T2_CREATE_RIFLE */ void sub_46986(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    unknown uVar10;
    vector vVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;

    if ((g_U3356) AND (NOT (IS_VEHICLE_DEAD( (uParam0^) ))))
    {
        if (DOES_PLACEMENT_EXIST( g_U3328 ))
        {
             /* CLEANPLACEMENT */ sub_4940( g_U3328 );
        }
        uVar10 = GET_VEHICLE_HEADING( (uParam0^) );
        vVar11 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", VECTOR_ROTATE_AXIS( uParam1, uVar10, "z" )};
        uVar14 = {vVar11 + (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( (uParam0^) )))};
        uVar17 = {uParam4};
        uVar17._fU8 +=  /* FDEGREESTORADIANS */ sub_46359( uVar10 );
        DISPLAYF( "P_T2_CREATE_RIFLE() - Creating rifle at {0}, {1}, {2}", 3, 769, uVar14._fU0, 769, uVar14._fU4, 769, uVar14._fU8 );
        g_U3328 =  /* CREATEPLACEMENT */ sub_45902( 1216559076, uVar14, uVar17, 0, 0, 0, 1119092736 );
        uVar20 = GET_PICKUP_FROM_PLACEMENT( g_U3328 );
        if ((DOES_PLACEMENT_EXIST( g_U3328 )) AND (NOT (IS_STRING_NULL( uParam7 ))))
        {
            ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( g_U3328, uParam7 );
        }
    }
    return;
}

/* F_HOLSTER_PLAYER_RIFLE */ void sub_47628(unknown uParam0)
{
    unknown Result;

    Result = nil;
    if ( /* F_IS_WEAPON_TYPE_RIFLE */ sub_47681( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_903(), 0, 0 ) ))
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_903(), 0, 0 );
        SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_903(), 0, 0, uParam0 );
    }
    return Result;
}

/* F_IS_WEAPON_TYPE_RIFLE */ int sub_47681(unknown uParam0)
{
    int iVar3;
    int[25] iVar4;
    int I;

    iVar3 = GET_WEAPON_TYPE( uParam0 );
    array(ref iVar4, 25);
    iVar4[0] = 162573582;
    iVar4[1] = -1659006841;
    iVar4[2] = 879300975;
    iVar4[3] = 377623895;
    iVar4[4] = 319712764;
    iVar4[5] = 427207702;
    iVar4[6] = -110877124;
    iVar4[7] = -1013714740;
    iVar4[8] = -1074756423;
    iVar4[9] = 1308526797;
    iVar4[10] = 840671040;
    iVar4[11] = 57534114;
    iVar4[12] = 724901397;
    iVar4[13] = 1992962408;
    iVar4[14] = -1312131151;
    iVar4[15] = 434544317;
    iVar4[16] = -168327769;
    iVar4[17] = -184942895;
    iVar4[18] = 514118749;
    iVar4[19] = 1478009203;
    iVar4[20] = 1224272620;
    iVar4[21] = 10648147;
    iVar4[22] = -1787162676;
    iVar4[23] = -2075384407;
    iVar4[24] = 1001413062;
    for ( I = 0; I < iVar4; I++ )
    {
        if (iVar3 == iVar4[I])
        {
            return 1;
        }
    }
    return 0;
}

/* P_UNHOLSTER_PLAYER_PISTOL_RIGHT */ void sub_48086(unknown uParam0)
{
    if (NOT (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_903(), 0, 0 ) )))
    {
        if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_903(), 1 ) ))
        {
            SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_903(), GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_903(), 1 ), 0, uParam0 );
        }
        else if (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_903(), 0 ) ))
        {
            SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_903(), GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_903(), 0 ), 0, uParam0 );
        }
        else
        {
            SCRIPT_ASSERT( "Can't unholster weapon, no gun found in left or right holster!", 0 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "CAN'T UNHOLSTER PISTOL! Weapon already in RIGHT hand.", 0 );
    }
    return;
}

/* P_T2P2_ACTIVATE_MID08_UFE */ void sub_48423()
{
    int I;

     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_ACTIVATE_MID08_UFE start", 0 );
    for ( I = 0; I < 1; I++ )
    {
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() ))) AND (NOT (IS_PED_DEAD( l_U303[I] ))))
        {
             /* P_ACTIVATEPED */ sub_48563( l_U303[I] );
            SET_PED_COMBAT_ATTRIBUTES( l_U303[I], 8192, 1 );
            SET_PED_COMBAT_ATTRIBUTES( l_U303[I], 1, 0 );
            SET_PED_FORCED_TO_WALK( l_U303[I], 1 );
            PED_SET_ACTION_INTENTION( l_U303[I], 60, 1000, 0.00000000, 0.00000000, 0.00000000 );
        }
         /* P_SET_PED_ON_TRAM */ sub_48799( g_U3358._fU4, l_U303[I], l_U305[I], 180.00000000 );
    }
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_ACTIVATE_MID08_UFE end", 0 );
    return;
}

/* P_ACTIVATEPED */ void sub_48563(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* P_SET_PED_ON_TRAM */ void sub_48799(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5)
{
    unknown uVar8;
    float fVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;

     /* WRITESCRIPTLOG */ sub_767( "GA", "P_SET_PED_ON_TRAM start", 0 );
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_VEHICLE_DEAD( uParam0 ))))
    {
        uVar8 = GET_VEHICLE_HEADING( uParam0 );
        fVar9 = uVar8 + uParam5;
        uVar10 = {((vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( uParam0 ))) + (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", VECTOR_ROTATE_AXIS( uParam2, uVar8, "z" )))) - (vector( 0.00000000, 0.00000000, 1.00000000))};
        SET_PED_COORDS( uParam1, uVar10, 1 );
        SET_PED_HEADING( uParam1, fVar9 );
    }
     /* WRITESCRIPTLOG */ sub_767( "GA", "P_SET_PED_ON_TRAM end", 0 );
    return;
}

/* P_T2P1_OPEN_EMERGENCY_HATCHES */ void sub_49091()
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P1_OPEN_EMERGENCY_HATCHES", 0 );
    if (NOT (IS_VEHICLE_DEAD( g_U3358._fU0 )))
    {
        SET_VEHICLE_EXTRA( g_U3358._fU0, 1, 1 );
        SET_VEHICLE_EXTRA( g_U3358._fU0, 2, 1 );
    }
    if (NOT (IS_VEHICLE_DEAD( g_U3358._fU4 )))
    {
        SET_VEHICLE_EXTRA( g_U3358._fU4, 1, 1 );
        SET_VEHICLE_EXTRA( g_U3358._fU4, 2, 1 );
    }
    if (NOT (IS_VEHICLE_DEAD( g_U3358._fU8 )))
    {
        SET_VEHICLE_EXTRA( g_U3358._fU8, 1, 1 );
        SET_VEHICLE_EXTRA( g_U3358._fU8, 2, 1 );
        SET_VEHICLE_EXTRA( g_U3358._fU8, 1, 0 );
        SET_VEHICLE_EXTRA( g_U3358._fU8, 2, 0 );
    }
    return;
}

/* P_T2P2_START_RAPPELLER_ACTIVATION */ void sub_49372()
{
    int I;

     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_START_RAPPELLER_ACTIVATION", 0 );
    for ( I = 0; I < 6; I++ )
    {
         /* P_CREATE_AND_START_TIMER */ sub_49494( ref l_U462[I], l_U517[I] );
    }
    return;
}

/* P_CREATE_AND_START_TIMER */ void sub_49494(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_3109( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_3259( uParam0 );
    return;
}

/* P_T2P2_START_SMOKE_GRENADES */ void sub_49576()
{
    int I;

     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_START_SMOKE_GRENADES start", 0 );
    for ( I = 0; I < 4; I++ )
    {
         /* P_CREATE_AND_START_TIMER */ sub_49494( ref l_U552[I], l_U589[I] );
    }
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_START_SMOKE_GRENADES end", 0 );
    return;
}

/* F_T2P2_MID08_HANDLEBLENDOUT */ int sub_50095()
{
    if (l_U621._fU52)
    {
         /* P_T2P2_START_GAMEPLAY */ sub_50149();
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
        {
            DETACH_PED(  /* PLAYER_PED_ID */ sub_903(), 0 );
        }
         /* P_SET_TRAM_SPEED */ sub_38250( g_U3358._fU0, g_U3320 );
         /* P_SET_TRAM_SPEED */ sub_38250( g_U3557._fU0, g_U3320 );
        if (l_U128)
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_50394( "SAIR_MX2GYLFT", ref l_U734 );
        }
        DO_SCREEN_FADE_IN( 0 );
    }
     /* P_T2P2_HANDLE_TRAMS_SHAKING */ sub_51620();
     /* P_T2P2_HANDLE_SEND_RAPPEL_UFE_TO_COVER */ sub_53083();
    if (NOT ( /* F_T2P2_ARE_ALL_RAPPELLERS_ACTIVATED */ sub_53681()))
    {
         /* P_T2P2_HANDLE_ACTIVATE_RAPEL_UFE */ sub_53786();
    }
     /* P_T2P2_HANDLE_SMOKE_GRENADES */ sub_54719();
    if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() ))) AND (NOT (IS_PED_DEAD( l_U303[0] ))))
    {
        REGISTER_TARGET( l_U303[0],  /* PLAYER_PED_ID */ sub_903() );
    }
    if (CAMERA_ANIMATED_CURRENT_TIME() >= ((CAMERA_ANIMATED_LENGTH( "LEVEL_S_FIN_CP_07", "B_OUT_MID_08_FIN_A_CAM" )) - l_U650))
    {
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2168[7], 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2207[7], 1065353216, 0 );
        CAMERA_ANIMATED_STOP( l_U651, 1 );
         /* WRITESCRIPTLOG */ sub_767( "SA", "MID_08_FINALE blendout finished.", 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
        {
            SET_PED_COLLISION(  /* PLAYER_PED_ID */ sub_903(), 1 );
        }
        return 1;
    }
    return 0;
}

/* P_T2P2_START_GAMEPLAY */ void sub_50149()
{
     /* WRITESCRIPTLOG */ sub_767( "GA", "P_START_GAMEPLAY start", 0 );
    SET_CAM_VIEW_MODE( 0 );
    SET_PED_MODEL_LOD_DISTANCES( -1880103805, 10.00000000, 100.00000000 );
    FORCE_QUICK_DEATH_CAMERAS( 1 );
     /* WRITESCRIPTLOG */ sub_767( "GA", "P_START_GAMEPLAY end", 0 );
    return;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_50394(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_5625( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_50453( 0,  /* PLAYER_PED_ID */ sub_903(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_50453( 1,  /* PLAYER_PED_ID */ sub_903(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_50706( uParam0, uParam1, 8, 1 );
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_50453(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_50706(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_50751( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_50751(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_50838( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_50838(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_50890( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_51408( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_50890(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_51408(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_T2P2_HANDLE_TRAMS_SHAKING */ void sub_51620()
{
    int I;

    for ( I = 0; I < 3; I++ )
    {
        g_U3358._fU364[I] = l_U727;
        g_U3358._fU380[I] = l_U724;
        g_U3557._fU364[I] = l_U727;
        g_U3557._fU380[I] = l_U724;
    }
    g_U3358._fU396 = l_U728;
    g_U3358._fU400 = l_U729;
    g_U3358._fU404 = l_U730;
    g_U3358._fU408 = l_U731;
    g_U3358._fU412 = l_U732;
    g_U3358._fU416 = l_U733;
    g_U3358._fU420 = l_U725;
    g_U3358._fU424 = l_U726;
    g_U3557._fU396 = l_U728;
    g_U3557._fU400 = l_U729;
    g_U3557._fU404 = l_U730;
    g_U3557._fU408 = l_U731;
    g_U3557._fU412 = l_U732;
    g_U3557._fU416 = l_U733;
    g_U3557._fU420 = l_U725;
    g_U3557._fU424 = l_U726;
     /* P_T2_HANDLE_TRAM_SHAKE */ sub_51983( ref g_U3358 );
     /* P_T2_HANDLE_TRAM_SHAKE */ sub_51983( ref g_U3557 );
    return;
}

/* P_T2_HANDLE_TRAM_SHAKE */ void sub_51983(int iParam0)
{
    int I;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    float fVar7;
    unknown uVar8;

    for ( I = 0; I < 3; I++ )
    {
        if ((iParam0->_fU428[I]._fU16) || ((NOT iParam0->_fU428[I]._fU20) || ( /* ISTIMERDONE */ sub_3392( ref iParam0->_fU428[I] ))))
        {
            iParam0->_fU764[I] = NOT iParam0->_fU764[I];
            if (iParam0->_fU764[I])
            {
                uVar4 = GET_RANDOM_INT_IN_RANGE( iParam0->_fU404, iParam0->_fU408 );
                 /* CREATETIMER */ sub_3109( ref iParam0->_fU428[I], uVar4, 1, 0 );
                 /* STARTTIMER */ sub_3259( ref iParam0->_fU428[I] );
            }
            else if ( /* ISTIMERDONE */ sub_3392( ref iParam0->_fU540[I] ))
            {
                uVar4 = GET_RANDOM_INT_IN_RANGE( iParam0->_fU396, iParam0->_fU400 );
                 /* CREATETIMER */ sub_3109( ref iParam0->_fU428[I], uVar4, 1, 0 );
                 /* STARTTIMER */ sub_3259( ref iParam0->_fU428[I] );
            }
            else if (NOT iParam0->_fU540[I]._fU20)
            {
                 /* CREATETIMER */ sub_3109( ref iParam0->_fU540[I], GET_RANDOM_INT_IN_RANGE( iParam0->_fU412, iParam0->_fU416 ), 1, 0 );
                 /* STARTTIMER */ sub_3259( ref iParam0->_fU540[I] );
            };;;
        }
        if ((iParam0->_fU652[I]._fU16) || ((NOT iParam0->_fU652[I]._fU20) || ( /* ISTIMERDONE */ sub_3392( ref iParam0->_fU652[I] ))))
        {
            uVar5 = GET_RANDOM_INT_IN_RANGE( iParam0->_fU420, iParam0->_fU424 );
             /* CREATETIMER */ sub_3109( ref iParam0->_fU652[I], uVar5, 1, 0 );
             /* STARTTIMER */ sub_3259( ref iParam0->_fU652[I] );
            iParam0->_fU780[I] = NOT iParam0->_fU780[I];
        }
        uVar6 =  /* F_T2_GET_TRAM_CAR */ sub_52467( iParam0, I );
        if (NOT (IS_VEHICLE_DEAD( uVar6 )))
        {
            if (iParam0->_fU540[I]._fU20)
            {
                fVar7 = 0;
            }
            else if (iParam0->_fU764[I])
            {
                fVar7 =  /* FLERP */ sub_52834( iParam0->_fU364[I], 0,  /* GETTIMERPERCENTAGE */ sub_52659( ref iParam0->_fU428[I] ) );
            }
            else
            {
                fVar7 =  /* FLERP */ sub_52834( 0, iParam0->_fU364[I],  /* GETTIMERPERCENTAGE */ sub_52659( ref iParam0->_fU428[I] ) );
            }
            if (iParam0->_fU780[I])
            {
                uVar8 =  /* FLERP */ sub_52834( -iParam0->_fU380[I], iParam0->_fU380[I],  /* GETTIMERPERCENTAGE */ sub_52659( ref iParam0->_fU652[I] ) );
            }
            else
            {
                uVar8 =  /* FLERP */ sub_52834( iParam0->_fU380[I], -iParam0->_fU380[I],  /* GETTIMERPERCENTAGE */ sub_52659( ref iParam0->_fU652[I] ) );
            }
            SET_TRAIN_SHAKE( uVar6, fVar7, uVar8, 0 );
        }
    }
    return;
}

/* F_T2_GET_TRAM_CAR */ void sub_52467(int iParam0, unknown uParam1)
{
    unknown Result;

    switch (uParam1)
    {
        case 0:
        Result = iParam0->_fU0;
        break;
        case 1:
        Result = iParam0->_fU4;
        break;
        case 2:
        Result = iParam0->_fU8;
        break;
    }
    return Result;
}

/* GETTIMERPERCENTAGE */ void sub_52659(int iParam0)
{
    int iVar3;

    if (iParam0->_fU28)
    {
        iVar3 = TIMERA();
    }
    else
    {
        iVar3 = TIMERB();
    }
    return  /* CLAMP */ sub_52761( (TO_FLOAT( iVar3 - iParam0->_fU0 )) / (TO_FLOAT( iParam0->_fU12 )), 0.00000000, 1.00000000 );
}

/* CLAMP */ void sub_52761(float fParam0, float fParam1, float fParam2)
{
    float Result;

    Result = fParam0;
    if (fParam0 < fParam1)
    {
        Result = fParam1;
    }
    else if (fParam0 > fParam2)
    {
        Result = fParam2;
    }
    return Result;
}

/* FLERP */ float sub_52834(unknown uParam0, unknown uParam1, unknown uParam2)
{
    return ((1.00000000 - uParam2) * uParam0) + (uParam1 * uParam2);
}

/* P_T2P2_HANDLE_SEND_RAPPEL_UFE_TO_COVER */ void sub_53083()
{
    int I;
    boolean bVar3;
    boolean bVar4;
    unknown uVar5;
    unknown uVar6;
    char[24] cVar7;
    unknown uVar13;
    unknown uVar14;

    for ( I = 0; I < 6; I++ )
    {
        if ((NOT l_U439[I]) AND (l_U432[I]))
        {
            bVar3 = (I mod 2) == 0;
            bVar4 = false;
            if (bVar3)
            {
                if ((ISEQ_QUERY_ENTITY_STATE( -144347219, "VIG07_GMED_1", 6 )) || (ISEQ_QUERY_ENTITY_STATE( -144347219, "VIG07_GMED_1", 5 )))
                {
                    bVar4 = true;
                }
            }
            else if ((ISEQ_QUERY_ENTITY_STATE( -651807953, "VIG07_GMED_2", 6 )) || (ISEQ_QUERY_ENTITY_STATE( -651807953, "VIG07_GMED_2", 5 )))
            {
                bVar4 = true;
            }
            if (bVar4)
            {
                uVar5 = l_U392[I];
                uVar6 =  /* F_T2_GET_TRAM_CAR */ sub_52467( ref g_U3358, l_U399[I] );
                if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() ))) AND ((NOT (IS_PED_DEAD( uVar5 ))) AND (NOT (IS_VEHICLE_DEAD( uVar6 )))))
                {
                    StrCopy( ref cVar7, "VEH-", 24 );
                    ConcatString(ref cVar7, uVar6, 24);
                    ConcatString(ref cVar7, "-", 24);
                    ConcatString(ref cVar7, l_U446[I], 24);
                    DISPLAYF( "Sending UFE {0} to cover point {1}", 2, 513, I, 1281, ref cVar7 );
                    OPEN_SEQUENCE_TASK( ref uVar13 );
                    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 1 );
                    TASK_COMBAT_MOVE_TO_COVER( 0, "DYNAMIC", ref cVar7,  /* PLAYER_PED_ID */ sub_903() );
                    TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( 0, 0 );
                    CLOSE_SEQUENCE_TASK( uVar13 );
                    CLEAR_PED_TASKS( uVar5 );
                    TASK_PERFORM_SEQUENCE( uVar5, uVar13 );
                    CLEAR_SEQUENCE_TASK( uVar13 );
                    switch (l_U399[I])
                    {
                        case 0:
                        uVar14 = l_U723;
                        break;
                        case 1:
                        uVar14 = l_U722;
                        break;
                    }
                    SET_PED_FLAG_LOCK_TO_COVER( uVar5, uVar14 );
                    l_U439[I] = 1;
                }
            }
        }
    }
    return;
}

/* F_T2P2_ARE_ALL_RAPPELLERS_ACTIVATED */ int sub_53681()
{
    int I;

    for ( I = 0; I < 6; I++ )
    {
        if (NOT l_U432[I])
        {
            return 0;
        }
    }
    return 1;
}

/* P_T2P2_HANDLE_ACTIVATE_RAPEL_UFE */ void sub_53786()
{
    int iVar2;
    int iVar3;
    int I;
    unknown uVar5;
    boolean bVar6;
    unknown uVar7;

    iVar2 = ISEQ_GET_STATE( -144347219 );
    if ((iVar2 == 0) || (iVar2 == 6))
    {
         /* LOADISEQ */ sub_53865( -144347219, 0 );
    }
    iVar3 = ISEQ_GET_STATE( -651807953 );
    if ((iVar3 == 0) || (iVar3 == 6))
    {
         /* LOADISEQ */ sub_53865( -651807953, 0 );
    }
    for ( I = 0; I < 6; I++ )
    {
        if ((l_U462[I]._fU16) || ( /* ISTIMERDONE */ sub_3392( ref l_U462[I] )))
        {
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() ))) AND (NOT (IS_PED_DEAD( l_U392[I] ))))
            {
                uVar5 = l_U392[I];
                bVar6 = (I mod 2) == 0;
                if (((iVar3 == 2) AND (NOT bVar6)) || ((iVar2 == 2) AND (bVar6)))
                {
                    DISPLAYF( "Activating rappeller {0}", 1, 513, I );
                     /* DISABLETIMER */ sub_54362( ref l_U462[I] );
                     /* P_ACTIVATEPED */ sub_48563( uVar5 );
                    SET_PED_ALERTNESS( uVar5, 3 );
                    REGISTER_TARGET( uVar5,  /* PLAYER_PED_ID */ sub_903() );
                    uVar7 =  /* F_T2_GET_TRAM_CAR */ sub_52467( ref g_U3358, l_U399[I] );
                     /* P_SET_PED_ON_TRAM */ sub_48799( uVar7, uVar5, l_U406[I], l_U425[I] );
                     /* P_TETHERPED */ sub_54504( ref l_U718[l_U399[I]], uVar5, 1 );
                    if (bVar6)
                    {
                        ISEQ_REGISTER_ENTITY( -144347219, "VIG07_GMED_1", uVar5, 0 );
                        ISEQ_START( -144347219 );
                    }
                    else
                    {
                        ISEQ_REGISTER_ENTITY( -651807953, "VIG07_GMED_2", uVar5, 0 );
                        ISEQ_START( -651807953 );
                    }
                    l_U432[I] = 1;
                    return;
                }
            }
        }
    }
    return;
}

/* LOADISEQ */ void sub_53865(unknown uParam0, int iParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;

    if ((ISEQ_DOES_EXIST( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The interactive sequence you are trying to load does not exist!!!!", 0 );
    }
    if ((ISEQ_IS_LOADED( uParam0 )) == 0)
    {
        ISEQ_REQUEST( uParam0 );
        ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
        if (iParam1 == 1)
        {
            while ((ISEQ_QUERY_STATE( uParam0, 1 )) == 1)
            {
                DISPLAYF( "[SP]### Waiting for interactive sequence to be loaded: {0} {1} ###", 2, 1281, ref uVar4, 513, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* DISABLETIMER */ void sub_54362(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* P_TETHERPED */ void sub_54504(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* P_T2P2_HANDLE_SMOKE_GRENADES */ void sub_54719()
{
    int I;
    unknown uVar3;
    unknown uVar4;
    vector vVar5;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;

    for ( I = 0; I < 4; I++ )
    {
        if ( /* ISTIMERDONE */ sub_3392( ref l_U552[I] ))
        {
            uVar3 =  /* F_T2_GET_TRAM_CAR */ sub_52467( ref g_U3358, l_U547[I] );
            if (NOT (IS_VEHICLE_DEAD( uVar3 )))
            {
                uVar4 = GET_VEHICLE_HEADING( uVar3 );
                vVar5 = {(vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( uVar3 ))) + (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", VECTOR_ROTATE_AXIS( l_U534[I], uVar4, "z" )))};
                uVar8 = {vVar5 - (vector( 0.00000000, 0.00000000, 4.00000000))};
                SHOOT_SINGLE_BULLET_BETWEEN_COORDS( vVar5, uVar8, 0, 1, -1986694060, 0 );
                DISPLAYF( "Shooting a smoke grenade between {0}, {1}, {2} and {3}, {4}, {5}", 6, 769, vVar5.x, 769, vVar5.y, 769, vVar5.z, 769, uVar8._fU0, 769, uVar8._fU4, 769, uVar8._fU8 );
            }
        }
    }
    return;
}

/* P_T2P2_MID08_PREPAREBLENDIN */ void sub_55327()
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_MID08_PrepareBlendin", 0 );
     /* TELEPORTTRAIN */ sub_45084( g_U3358._fU0, l_U281 );
     /* P_SET_TRAM_SPEED */ sub_38250( g_U3358._fU0, l_U287 );
     /* TELEPORTTRAIN */ sub_45084( g_U3557._fU0, l_U284 );
     /* P_SET_TRAM_SPEED */ sub_38250( g_U3557._fU0, l_U287 );
     /* P_SET_VEHICLE_PLAYBACK_SPEED */ sub_55488( l_U134, l_U137 );
     /* P_CAM_SHAKE_CREATE_STRUCT */ sub_55597( ref l_U175[0], 4, 2.00000000, 10, -1, -1, 0, 0 );
     /* P_CAM_SHAKE_ACTIVATE */ sub_56143( ref l_U175[0] );
     /* P_CAM_SHAKE_CREATE_STRUCT */ sub_55597( ref l_U175[1], 1, 0.00000000, 1, 100000, 400, 0, 0 );
     /* P_CAM_SHAKE_ACTIVATE */ sub_56143( ref l_U175[1] );
     /* NIS_CREATE_STATIC_CAM */ sub_56303( ref l_U144, l_U275, l_U278, 45, l_U288 );
     /* NIS_PLAY_STATIC_CAMERA */ sub_56538( ref l_U144 );
    PLAY_SCRIPT_STREAM_FRONTEND( l_U653 );
    DO_SCREEN_FADE_IN( 0 );
    return;
}

/* P_SET_VEHICLE_PLAYBACK_SPEED */ void sub_55488(unknown uParam0, unknown uParam1)
{
    if (NOT (IS_VEHICLE_DEAD( uParam0 )))
    {
        if (IS_PLAYBACK_GOING_ON_FOR_VEHICLE( uParam0 ))
        {
            SET_PLAYBACK_SPEED( uParam0, uParam1 );
        }
    }
    return;
}

/* P_CAM_SHAKE_CREATE_STRUCT */ void sub_55597(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    if (iParam0->_fU168 == 0)
    {
         /* P_CAM_SHAKE_SET_SHAKE_TYPE */ sub_55653( iParam0, uParam1 );
        iParam0->_fU192 = uParam1;
        iParam0->_fU36 = uParam2;
        iParam0->_fU148 = uParam3;
        iParam0->_fU152 = uParam4;
        iParam0->_fU156 = uParam5;
        iParam0->_fU160 = uParam7;
        iParam0->_fU176 = uParam6;
    }
     /* RESETTIMER */ sub_3968( iParam0 + 40 );
     /* RESETTIMER */ sub_3968( iParam0 + 76 );
     /* RESETTIMER */ sub_3968( iParam0 + 112 );
    iParam0->_fU172 = iParam0->_fU176;
    iParam0->_fU164 = 0;
    iParam0->_fU168 = 1;
    iParam0->_fU184 = 0;
    iParam0->_fU188 = 0;
    return;
}

/* P_CAM_SHAKE_SET_SHAKE_TYPE */ void sub_55653(int iParam0, unknown uParam1)
{
    switch (uParam1)
    {
        case 1:
        StrCopy( ref iParam0->_fU4, "SMALL_EXPLOSION_SHAKE", 32 );
        break;
        case 2:
        StrCopy( ref iParam0->_fU4, "MEDIUM_EXPLOSION_SHAKE", 32 );
        break;
        case 3:
        StrCopy( ref iParam0->_fU4, "LARGE_EXPLOSION_SHAKE", 32 );
        break;
        case 4:
        StrCopy( ref iParam0->_fU4, "HAND_SHAKE", 32 );
        break;
        case 5:
        StrCopy( ref iParam0->_fU4, "JOLT_SHAKE", 32 );
        break;
        case 6:
        StrCopy( ref iParam0->_fU4, "VIBRATE_SHAKE", 32 );
        break;
        case 7:
        StrCopy( ref iParam0->_fU4, "WOBBLY_SHAKE", 32 );
        break;
    }
    iParam0->_fU0 = iParam0->_fU192;
    return;
}

/* P_CAM_SHAKE_ACTIVATE */ void sub_56143(int iParam0)
{
     /* RESETTIMER */ sub_3968( iParam0 + 40 );
     /* RESETTIMER */ sub_3968( iParam0 + 76 );
     /* RESETTIMER */ sub_3968( iParam0 + 112 );
    iParam0->_fU172 = 1;
    iParam0->_fU164 = 0;
    return;
}

/* NIS_CREATE_STATIC_CAM */ void sub_56303(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    iParam0->_fU4 = {uParam4};
    iParam0->_fU16 = {uParam1};
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    iParam0->_fU84 = uParam8;
    iParam0->_fU88 = 0;
    iParam0->_fU92 = 0;
    iParam0->_fU40 = 0;
    iParam0->_fU44 = 0;
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    iParam0->_fU96 = 0;
     /* CREATETIMER */ sub_3109( iParam0 + 48, uParam8, 1, 0 );
    iParam0->_fU0 = CREATE_CAM_WITH_PARAMS( ref l_U39, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 1 );
    SET_CAM_PARAMS( iParam0->_fU0, iParam0->_fU16, iParam0->_fU4, iParam0->_fU28, 0, 1, 1 );
    return;
}

/* NIS_PLAY_STATIC_CAMERA */ void sub_56538(int iParam0)
{
    RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
    SET_CAM_ACTIVE( iParam0->_fU0, 1 );
    RENDER_SCRIPT_CAMS( 1, 0, 3000, 0 );
     /* STARTTIMER */ sub_3259( iParam0 + 48 );
    iParam0->_fU32 = 1;
    iParam0->_fU40 = 1;
    return;
}

/* F_T2P2_MID08_HANDLEBLENDIN */ int sub_56675()
{
    unknown uVar2;
    unknown uVar3;

    if (l_U621._fU52)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
        {
            SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_903(), 0 );
        }
    }
    if (NOT (IS_VEHICLE_DEAD( l_U134 )))
    {
        SET_VEHICLE_ENGINE_ON( l_U134, 1, 1 );
        SET_HELI_BLADES_FULL_SPEED( l_U134 );
    }
    if (NOT (IS_VEHICLE_DEAD( g_U3358._fU4 )))
    {
        uVar2 = GET_DISTANCE_BETWEEN_COORDS( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( g_U3358._fU4 ), l_U275, 1 );
        uVar3 =  /* FSMOOTHSTEP */ sub_56865( 30.00000000, 5.00000000, uVar2 );
        l_U175[1]._fU36 =  /* FLERP */ sub_52834( 0.00000000, 0.20000000, uVar3 );
    }
     /* P_CAM_SHAKE_HANDLE_ARRAY */ sub_56964( ref l_U175 );
    if ( /* NIS_IS_SHOT_FINISHED */ sub_57591( ref l_U144, 1 ))
    {
         /* P_CAM_SHAKE_FORCE_DEACTIVATE_ARRAY */ sub_57757( ref l_U175, 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
        {
            SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_903(), 1 );
        }
        return 1;
    }
    return 0;
}

/* FSMOOTHSTEP */ void sub_56865(unknown uParam0, unknown uParam1, unknown uParam2)
{
    float fVar5;

    fVar5 = (uParam2 - uParam0) / (uParam1 - uParam0);
    return  /* CLAMP */ sub_52761( fVar5, 0.00000000, 1.00000000 );
}

/* P_CAM_SHAKE_HANDLE_ARRAY */ void sub_56964(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_CAM_SHAKE_HANDLE */ sub_57023( ref (uParam0^)[I] );
    }
    return;
}

/* P_CAM_SHAKE_HANDLE */ void sub_57023(int iParam0)
{
    if (iParam0->_fU172 == 1)
    {
        if (iParam0->_fU164 == 0)
        {
             /* CREATETIMER */ sub_3109( iParam0 + 40, iParam0->_fU148, 1, 0 );
             /* STARTTIMER */ sub_3259( iParam0 + 40 );
            if (iParam0->_fU152 > 0)
            {
                 /* CREATETIMER */ sub_3109( iParam0 + 76, iParam0->_fU152, 1, 0 );
                 /* STARTTIMER */ sub_3259( iParam0 + 76 );
            }
            iParam0->_fU164 = 1;
        }
        if ( /* ISTIMERDONE */ sub_3392( iParam0 + 40 ))
        {
             /* WRITESCRIPTLOG */ sub_767( "ML", "P_HANDLE_CAM_SHAKE is shaking the camera", "---" );
             /* P_SHAKE_CAM */ sub_57252( iParam0 + 4, iParam0->_fU36 );
            if (iParam0->_fU156 > 0)
            {
                 /* CREATETIMER */ sub_3109( iParam0 + 112, iParam0->_fU156, 1, 0 );
                 /* STARTTIMER */ sub_3259( iParam0 + 112 );
            }
        }
        if ( /* ISTIMERDONE */ sub_3392( iParam0 + 112 ))
        {
             /* P_SHAKE_CAM */ sub_57252( iParam0 + 4, iParam0->_fU36 );
             /* CREATETIMER */ sub_3109( iParam0 + 112, iParam0->_fU156, 1, 0 );
             /* STARTTIMER */ sub_3259( iParam0 + 112 );
        }
        if ( /* ISTIMERDONE */ sub_3392( iParam0 + 76 ))
        {
             /* WRITESCRIPTLOG */ sub_767( "ML", "P_HANDLE_CAM_SHAKE is done shaking the camera", "---" );
            STOP_CAM_SHAKING( GET_RENDERING_CAM(), iParam0->_fU160 );
            STOP_GAMEPLAY_CAM_SHAKING( iParam0 + 4, iParam0->_fU160 );
             /* RESETTIMER */ sub_3968( iParam0 + 112 );
            iParam0->_fU172 = 0;
        }
    }
    return;
}

/* P_SHAKE_CAM */ void sub_57252(unknown uParam0, unknown uParam1)
{
    SHAKE_CAM( GET_RENDERING_CAM(), uParam0, uParam1 );
    SHAKE_GAMEPLAY_CAM( uParam0, uParam1 );
    return;
}

/* NIS_IS_SHOT_FINISHED */ int sub_57591(int iParam0, boolean bParam1)
{
    if (bParam1 == 1)
    {
        if (NOT iParam0->_fU44)
        {
            if ((ref iParam0->_fU48->_fU16) || ( /* ISTIMERDONE */ sub_3392( iParam0 + 48 )))
            {
                iParam0->_fU44 = 1;
                iParam0->_fU36 = 1;
                return 1;
            }
        }
    }
    if (NOT bParam1)
    {
        if ((ref iParam0->_fU48->_fU16) || ( /* ISTIMERDONE */ sub_3392( iParam0 + 48 )))
        {
            iParam0->_fU36 = 1;
            return 1;
        }
    }
    return 0;
}

/* P_CAM_SHAKE_FORCE_DEACTIVATE_ARRAY */ void sub_57757(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_CAM_SHAKE_FORCE_DEACTIVATE */ sub_57828( ref (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_CAM_SHAKE_FORCE_DEACTIVATE */ void sub_57828(int iParam0, int iParam1)
{
    if (iParam0->_fU172 == 1)
    {
        if (iParam1 == 1)
        {
            STOP_CAM_SHAKING( GET_RENDERING_CAM(), iParam1 );
            STOP_GAMEPLAY_CAM_SHAKING( iParam0 + 4, iParam1 );
        }
        else
        {
            STOP_CAM_SHAKING( GET_RENDERING_CAM(), iParam0->_fU160 );
            STOP_GAMEPLAY_CAM_SHAKING( iParam0 + 4, iParam0->_fU160 );
        }
         /* RESETTIMER */ sub_3968( iParam0 + 40 );
         /* RESETTIMER */ sub_3968( iParam0 + 76 );
         /* RESETTIMER */ sub_3968( iParam0 + 112 );
        iParam0->_fU172 = 0;
    }
    return;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUTANDBLENDIN */ void sub_58081(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
     /* WRITESCRIPTLOG */ sub_767( "MSWW", "CutSys_CreateCutsceneWithBlendOutAndBlendIn", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_58231( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam11, 1, uParam6, uParam7, 1, uParam8, uParam9, uParam10 );
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_58231(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_58577(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_767( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_58231( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 58698, 58748, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_58698()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_58748()
{
    return 1;
}

/* CUTSYS_SETCUTSCENELOADEXTERIORONSKIP */ void sub_58854(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    iParam0->_fU68 = 1;
    iParam0->_fU72 = 0;
    iParam0->_fU84 = {uParam1};
    iParam0->_fU24 = 1;
    return;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_59123(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_767( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_767( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_767( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_767( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_767( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_767( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_27311( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_767( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_60014( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_60014( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_767( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_60558( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_60014( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_60938( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_60938( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* NIS_PRE_SETUP */ void sub_60014(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_941(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_903(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_903() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_903(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_60558(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_903(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_903(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_903(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_903(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_903(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_60938(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_941(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_903(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_61036();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_61036()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_903(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_903(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_903(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_903(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_T2P2_MID08_UFE_START_COMBAT */ void sub_61497()
{
    int I;

     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_MID08_UFE_START_COMBAT start", 0 );
    for ( I = 0; I < 1; I++ )
    {
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() ))) AND (NOT (IS_PED_DEAD( l_U303[I] ))))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U303[I], 0 );
            REGISTER_TARGET( l_U303[I],  /* PLAYER_PED_ID */ sub_903() );
            TASK_COMBAT_PED( l_U303[I],  /* PLAYER_PED_ID */ sub_903() );
        }
    }
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_MID08_UFE_START_COMBAT end", 0 );
    return;
}

/* P_CREATEVEHICLEATTACHEDTRIGGERBOX */ void sub_61844(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    if ((DOES_VEHICLE_EXIST( uParam2 )) == 1)
    {
        if (((IS_VEHICLE_DEAD( uParam2 )) == 0) || ((IS_VEHICLE_DEAD( uParam2 )) == 1))
        {
            GAMEPLAY_HELPER_BOX_CREATE_VEHICLE_ATTACHED( 1, iParam0 + 0, uParam2, uParam3, uParam6, uParam7, uParam8, uParam9, uParam12, uParam13 );
            iParam0->_fU72 = {uParam3};
        }
    }
    else
    {
        DISPLAYF( "[SA]### ERROR: Trying to attach a vehicle attached trigger to a vehicle that doesn't exist: {} ###", 1, 1281, iParam0 + 0 );
    }
    return;
}

/* P_CREATEVEHICLEATTACHEDTETHERBOX */ void sub_62377(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    if ((DOES_VEHICLE_EXIST( uParam2 )) == 1)
    {
        if (((IS_VEHICLE_DEAD( uParam2 )) == 0) || ((IS_VEHICLE_DEAD( uParam2 )) == 1))
        {
            GAMEPLAY_HELPER_BOX_CREATE_VEHICLE_ATTACHED( 2, iParam0->_fU0, uParam2, uParam3, uParam6, uParam7, uParam8, uParam9, uParam12, uParam13 );
        }
    }
    else
    {
        DISPLAYF( "[SA]### ERROR: Trying to attach a vehicle attached tether to a vehicle that doesn't exist: {} ###", 1, 1537, iParam0->_fU0 );
    }
    return;
}

/* P_T2_HANDLE_UFE_TRAM_SPEED */ void sub_62938(int iParam0, int iParam1, unknown uParam2)
{
    int iVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    float fVar12;

    iVar5 = g_U3335;
    switch (g_U3335)
    {
        case 0:
        if (g_U3336)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "UFE tram is speeding up.", 0 );
            g_U3339 = g_U3338;
             /* CREATETIMER */ sub_3109( ref g_U3340, g_U3349, 1, 0 );
             /* STARTTIMER */ sub_3259( ref g_U3340 );
        }
        g_U3338 =  /* FLERP */ sub_52834( g_U3339, uParam2 + 1.00000000,  /* GETTIMERPERCENTAGE */ sub_52659( ref g_U3340 ) );
        break;
        case 1:
        if (g_U3336)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "UFE tram is slowing down.", 0 );
            g_U3339 = g_U3338;
             /* CREATETIMER */ sub_3109( ref g_U3340, g_U3349, 1, 0 );
             /* STARTTIMER */ sub_3259( ref g_U3340 );
        }
        g_U3338 =  /* FLERP */ sub_52834( g_U3339, uParam2 - 1.00000000,  /* GETTIMERPERCENTAGE */ sub_52659( ref g_U3340 ) );
        break;
        case 2:
        if (g_U3336)
        {
             /* WRITESCRIPTLOG */ sub_767( "SA", "UFE tram is matching speed.", 0 );
            g_U3339 = g_U3338;
             /* CREATETIMER */ sub_3109( ref g_U3340, g_U3349, 1, 0 );
             /* STARTTIMER */ sub_3259( ref g_U3340 );
        }
        g_U3338 =  /* FLERP */ sub_52834( g_U3339, uParam2,  /* GETTIMERPERCENTAGE */ sub_52659( ref g_U3340 ) );
        break;
    }
     /* P_SET_TRAM_SPEED */ sub_38250( iParam0->_fU0, g_U3338 );
    if ((NOT (IS_VEHICLE_DEAD( iParam0->_fU4 ))) AND (NOT (IS_VEHICLE_DEAD( iParam1->_fU4 ))))
    {
        uVar6 = {(vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( iParam1->_fU4 ))) - (vector( "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( iParam0->_fU4 )))};
        uVar9 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_FORWARD_VECTOR( iParam1->_fU4 )};
        fVar12 = GET_ANGLE_BETWEEN_2D_VECTORS( uVar9._fU0, uVar9._fU4, uVar6._fU0, uVar6._fU4 );
        if (fVar12 > 110.00000000)
        {
            g_U3335 = 1;
        }
        else if (fVar12 < 60.00000000)
        {
            g_U3335 = 0;
        }
    }
    if (g_U3335 != iVar5)
    {
        g_U3336 = 1;
    }
    else
    {
        g_U3336 = 0;
    }
    return;
}

/* P_T2P2_HANDLE_UFE_REGISTER_TARGET */ void sub_63580()
{
    int I;

    for ( I = 0; I < 1; I++ )
    {
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() ))) AND (NOT (IS_PED_DEAD( l_U303[I] ))))
        {
            REGISTER_TARGET( l_U303[I],  /* PLAYER_PED_ID */ sub_903() );
        }
    }
    for ( I = 0; I < 6; I++ )
    {
        if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() ))) AND (NOT (IS_PED_DEAD( l_U392[I] ))))
        {
            REGISTER_TARGET( l_U392[I],  /* PLAYER_PED_ID */ sub_903() );
        }
    }
    return;
}

/* F_ISPEDINTRIGGERBOX */ int sub_63834(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_T2P2_UNLOCK_UFE_IN_TRIGGER */ void sub_63924(unknown uParam0)
{
    int I;

     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_UNLOCK_UFE_IN_TRIGGER start", 0 );
    for ( I = 0; I < 6; I++ )
    {
        if ( /* F_ISPEDINTRIGGERBOX */ sub_63834( l_U392[I], (uParam0^) ))
        {
            SET_PED_FLAG_LOCK_TO_COVER( l_U392[I], 0 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U392[I], 0 );
        }
    }
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_UNLOCK_UFE_IN_TRIGGER end", 0 );
    return;
}

/* P_TRAIN_SAFETY_KILL_PLAYER */ void sub_64220(unknown uParam0)
{
    if ((NOT (IS_VEHICLE_DEAD( uParam0 ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() ))))
    {
        if (( /* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ sub_64302(  /* PLAYER_PED_ID */ sub_903(), "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( uParam0 ) )) > 75.00000000)
        {
            PRINTSTRING( "Killing ped for not being in train." );
             /* P_KILL_PED */ sub_64473(  /* PLAYER_PED_ID */ sub_903() );
        }
    }
    return;
}

/* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ void sub_64302(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    else
    {
        return -1.00000000;
    }
    return VDIST( uVar6, uParam1 );
}

/* P_KILL_PED */ void sub_64473(unknown uParam0)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        STOP_PED_SPEAKING( uParam0, 1 );
        SET_PED_HEALTH( uParam0, 0, 0 );
        SET_PED_CORPSE( uParam0, 0 );
    }
    return;
}

/* P_TRAIN_SAFETY_KILL_PED_ARRAY */ void sub_64570(unknown uParam0, unknown uParam1)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if ((NOT (IS_VEHICLE_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^)[I] ))))
        {
            if (NOT (IS_PED_PROCESSING_FROZEN( (uParam0^)[I] )))
            {
                if (( /* GET_DISTANCE_BETWEEN_PED_AND_VECTOR */ sub_64302( (uParam0^)[I], "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_VEHICLE_COORDS( uParam1 ) )) > 75.00000000)
                {
                    PRINTSTRING( "Killing ped for not being in train. Ped " );
                     /* WRITE_INT */ sub_34646( I );
                     /* CLEANPED */ sub_4734( (uParam0^)[I] );
                }
            }
        }
    }
    return;
}

/* P_T2P2_HANDLE_BULLET_CAMS */ void sub_64826()
{
    int iVar2;
    int iVar3;

    if ( /* F_IS_PED_ARRAY_DEFEATED */ sub_64869( ref l_U303, 1 ))
    {
        BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
        iVar2 =  /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_65344( ref l_U392 );
        if (NOT (iVar2 == nil))
        {
            SET_BULLET_CAM_PREF( iVar2, "ALL_LMS_01", "ALL_LMS_01", "ALL_LMS_01", "ALL_LMS_01", 0, 0, 0, 0, 0, 0, 0, 0 );
        }
    }
    if ( /* F_IS_PED_ARRAY_DEFEATED */ sub_64869( ref l_U392, 0 ))
    {
        BULLET_CAMERA_TRACK_UNTIL_GROUNDED( 1 );
        iVar3 =  /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_65344( ref l_U303 );
        if (NOT (iVar3 == nil))
        {
            SET_BULLET_CAM_PREF( iVar3, "ALL_LMS_01", "ALL_LMS_01", "ALL_LMS_01", "ALL_LMS_01", 0, 0, 0, 0, 0, 0, 0, 0 );
        }
    }
    return;
}

/* F_IS_PED_ARRAY_DEFEATED */ int sub_64869(unknown uParam0, boolean bParam1)
{
    if (( /* F_HAS_PED_ARRAY_SPAWNED */ sub_64908( uParam0, 0 )) == 1)
    {
        if (NOT bParam1)
        {
            if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65043( uParam0 )) == 0)
            {
                return 1;
            }
        }
        if (bParam1)
        {
            if (( /* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ sub_65176( uParam0 )) == (uParam0^))
            {
                return 1;
            }
        }
    }
    return 0;
}

/* F_HAS_PED_ARRAY_SPAWNED */ void sub_64908(unknown uParam0, boolean bParam1)
{
    int I;
    int Result;

    Result = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
        if ((DOES_PED_EXIST( (uParam0^)[I] )) == 1)
        {
            Result = 1;
            if (NOT bParam1)
            {
                return 1;
            }
        }
        else
        {
            Result = 0;
        }
    }
    return Result;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_65043(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_GET_NUM_DEAD_PEDS_IN_ARRAY */ void sub_65176(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            if (IS_PED_DEAD( (uParam0^)[I] ))
            {
                Result++;
            }
        }
    }
    return Result;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_65344(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_65043( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* P_T2P2_HANDLE_UFE_RUSH_MAX */ void sub_65722(unknown uParam0)
{
    boolean bVar3;

    bVar3 = false;
    if ((uParam0^) < 0)
    {
        bVar3 = true;
    }
    else if (IS_PED_DEAD( l_U392[(uParam0^)] ))
    {
        bVar3 = true;
    }
    if (bVar3)
    {
        (uParam0^) =  /* F_T2P2_GET_CLOSEST_NON_RUSHING_UFE */ sub_65814();
        if ((uParam0^) > -1)
        {
            DISPLAYF( "Sending UFE {0} to rush Max", 1, 513, (uParam0^) );
             /* P_REMOVEALLTETHERSFROMPED */ sub_66313( l_U392[(uParam0^)] );
            if (NOT (IS_PED_DEAD( l_U392[(uParam0^)] )))
            {
                SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U392[(uParam0^)], 0 );
                SET_PED_FLAG_LOCK_TO_COVER( l_U392[(uParam0^)], 0 );
                SET_PED_COMBAT_ATTRIBUTES( l_U392[(uParam0^)], 8192, 1 );
            }
        }
    }
    return;
}

/* F_T2P2_GET_CLOSEST_NON_RUSHING_UFE */ void sub_65814()
{
    float fVar2;
    int Result;
    int I;
    float fVar5;

     /* WRITESCRIPTLOG */ sub_767( "SA", "F_T2P2_GET_CLOSEST_UFE start", 0 );
    fVar2 = 9999.00000000;
    Result = -1;
    for ( I = 0; I < 6; I++ )
    {
        if ((NOT (I == l_U524[1])) AND (NOT (I == l_U524[0])))
        {
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_903() ))) AND (NOT (IS_PED_DEAD( l_U392[I] ))))
            {
                fVar5 =  /* GET_DISTANCE_BETWEEN_PEDS */ sub_66006(  /* PLAYER_PED_ID */ sub_903(), l_U392[I], 1 );
                if (fVar5 < fVar2)
                {
                    fVar2 = fVar5;
                    Result = I;
                }
            }
        }
    }
     /* WRITESCRIPTLOG */ sub_767( "SA", "F_T2P2_GET_CLOSEST_UFE end", 0 );
    return Result;
}

/* GET_DISTANCE_BETWEEN_PEDS */ void sub_66006(unknown uParam0, unknown uParam1, boolean bParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar5 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
    }
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        uVar8 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    }
    if (bParam2)
    {
        return VDIST( uVar5, uVar8 );
        break;
    }
    return VDIST( uVar5._fU0, uVar5._fU4, 0, uVar8._fU0, uVar8._fU4, 0 );
}

/* P_REMOVEALLTETHERSFROMPED */ void sub_66313(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        RESET_PED_TETHERING( uParam0 );
    }
    return;
}

/* P_T2_SET_MID09_TRAMS */ void sub_66721(int iParam0, int iParam1)
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2_SET_MID09_TRAMS", 0 );
    g_U3756._fU0 = iParam0->_fU0;
    g_U3756._fU4 = iParam0->_fU4;
    g_U3756._fU8 = iParam0->_fU8;
    g_U3955._fU0 = iParam1->_fU0;
    g_U3955._fU4 = iParam1->_fU4;
    g_U3955._fU8 = iParam1->_fU8;
    return;
}

/* P_T2P2_RELEASE_ASSETS */ void sub_67011()
{
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_RELEASE_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_67094( ref l_U594, ref g_U1030 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ sub_68324( ref l_U612, ref g_U1247 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_68767( "level_s_fin_cp_07", ref g_U1429 );
     /* P_STREAMREQ_AUDIO_BANK_REMOVE */ sub_69140( "SCRIPT_MISSION\S_AIRPORT_TRAM", ref g_U1950 );
     /* P_STREAMREQ_VEHICLE_RECORDING_REMOVE */ sub_69488( l_U135, ref g_U1638 );
     /* WRITESCRIPTLOG */ sub_767( "SA", "P_T2P2_RELEASE_ASSETS end", 0 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_67094(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_67167( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_67167(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_67311( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_67311(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE_ARRAY */ void sub_68324(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_68398( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_68398(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_67311( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_68767(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_67311( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_AUDIO_BANK_REMOVE */ void sub_69140(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU64 == 1) || (((uParam1^)[I]._fU64 == 2) || ((uParam1^)[I]._fU64 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_67311( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU68 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU64 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a AUDIO_BANK asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_VEHICLE_RECORDING_REMOVE */ void sub_69488(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_67311( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a VEHICLE_RECORDING asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

