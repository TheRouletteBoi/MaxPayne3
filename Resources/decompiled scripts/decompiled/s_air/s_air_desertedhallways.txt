void main()
{
    l_U0 = 1;
    l_U1 = 144;
    l_U2 = 0;
    l_U3 = 1;
    l_U4 = 0;
    l_U5 = 1.00000000;
    l_U6 = -5.00000000;
    l_U7 = 0;
    l_U8 = 0;
    l_U9 = 0;
    l_U13 = 42;
    l_U14 = 0;
    l_U15 = 0;
    l_U16 = 0;
    l_U17 = 0;
    l_U18 = 0;
    l_U19 = 90.00000000;
    l_U20 = {0.00000000, 0.00000000, 0.00000000};
    l_U23 = {0.00000000, 0.00000000, 0.00000000};
    l_U26 = 0;
    l_U27 = 0;
    l_U28 = 0;
    l_U29 = 0;
    l_U30 = 0;
    l_U31 = 0;
    l_U32 = nil;
    l_U33 = {0.00000000, 0.00000000, 0.00000000};
    l_U36 = 0;
    l_U37 = 0;
    l_U38 = 0;
    StrCopy( ref l_U39, "DEFAULT_SCRIPTED_CAMERA", 32 );
    StrCopy( ref l_U47, "DEFAULT_SPLINE_CAMERA", 32 );
    l_U74 = 0;
    l_U75 = 0;
    l_U76 = 1500;
    l_U86 = -1;
    l_U87 = {64536, 64536, 64536};
    l_U126 = 0;
    l_U127 = 1;
    l_U128 = 1;
    l_U129 = 0;
    l_U216 = 1500;
    l_U217 = 2000;
    l_U563 = 45000;
    l_U564 = 70000;
    l_U697 = 0;
    l_U698 = 0;
    l_U699 = 1;
     /* WRITESCRIPTLOG */ sub_456( "AT", "Script s_air_DesertedHallways.sc is starting up...", 0 );
     /* P_SETUP_ASSET_ARRAYS */ sub_574();
    l_U126 = 1;
    while (NOT IS_EXITFLAG_SET())
    {
         /* P_HANDLE_FAILURE */ sub_725();
        if (l_U129 == 0)
        {
             /* P_HANDLE_EVENTS */ sub_10077();
        }
        WAIT( 0 );
    }
     /* P_CLEANUP_DESERTEDHALLWAYS */ sub_3423();
     /* P_RELEASE_DESERTEDHALLWAYS_ASSETS */ sub_51344();
    SET_EXITFLAG_RESPONSE();
    SET_SCRIPT_AS_NO_LONGER_NEEDED( "s_air_DesertedHallways" );
     /* WRITESCRIPTLOG */ sub_456( "AT", "Script s_air_DesertedHallways.sc is terminating...", 0 );
    return;
}

/* WRITESCRIPTLOG */ void sub_456(unknown uParam0, unknown uParam1, string sParam2)
{
    unknown uVar5;

    if (IS_STRING_NULL( sParam2 ))
    {
        sParam2 = "###";
    }
    uVar5 = GET_REAL_GAME_TIMER();
    DISPLAYF( "[{0}][{1}]{3} {2} {3}", 4, 513, uVar5, 1537, uParam0, 1537, uParam1, 1537, sParam2 );
    return;
}

/* P_SETUP_ASSET_ARRAYS */ void sub_574()
{
    l_U721[0] = 2004595611;
    l_U721[1] = -1409914275;
    l_U721[2] = -24365917;
    l_U721[3] = -90187428;
    l_U721[4] = 1798479363;
    l_U721[5] = -1489459326;
    l_U721[6] = g_U825;
    return;
}

/* P_HANDLE_FAILURE */ void sub_725()
{
    if (g_U830 == 2)
    {
        switch (l_U129)
        {
            case 0:
            if (( /* RESTARTING_CHECKPOINT */ sub_927()) || (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
            {
                l_U129 = 1;
                 /* WRITESCRIPTLOG */ sub_456( "AT", "eFailState = FAIL_WAITING_FOR_PLAYER", 0 );
            }
            break;
            case 1:
            if ( /* IS_RESTART_ACTIVE */ sub_1445())
            {
                l_U129 = 3;
            }
            else if (( /* F_CHECK_QUIT_RETRY */ sub_1505( 0 )) == 1)
            {
                l_U129 = 2;
            }
            break;
            case 2:
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
            {
                l_U129 = 3;
                 /* WRITESCRIPTLOG */ sub_456( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            }
            break;
            case 3:
             /* WRITESCRIPTLOG */ sub_456( "AT", "eFailState = FAIL_CLEANUP_ALL", 0 );
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() ))) AND (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_864() ))))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_864(), 0, 0 );
                if (GET_IS_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_826() ))
                {
                    SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_826(), 0 );
                }
            }
            if ((g_U861[3]._fU40 != 4) AND (g_U861[3]._fU40 != 0))
            {
                 /* WRITESCRIPTLOG */ sub_456( "GA", "Shutting down script for DEPARTURES.", 0 );
                 /* P_RESET_CHECKPOINT_THREAD */ sub_3245( ref g_U861[3] );
                SET_EXITFLAG_FOR_SCRIPT( g_U861[3]._fU32 );
            }
            DO_SCREEN_FADE_OUT( 0 );
            DESTROY_ALL_CAMS();
            RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
            AUDIO_MUSIC_SUSPEND( 500 );
            if (CUTSCENE_IS_LOADED( "MID_03_FIN_concat" ))
            {
                CLEAR_NAMED_CUTSCENE( "MID_03_FIN_concat" );
            }
             /* P_CLEANUP_DESERTEDHALLWAYS */ sub_3423();
            l_U129 = 4;
             /* WRITESCRIPTLOG */ sub_456( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
            break;
            case 4:
             /* WRITESCRIPTLOG */ sub_456( "AT", "eFailState = FAIL_RESTORE_PLAYER", 0 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_5318( ref l_U90,  /* PLAYER_PED_ID */ sub_826() );
            SET_INTERIOR_ACTIVE( GET_INTERIOR_FROM_NAME( "MILO_ap_mhalls", 0 ), 1, 0 );
            LOAD_SCENE_FOR_ROOM_BY_KEY( GET_INTERIOR_FROM_NAME( "MILO_ap_mhalls", 0 ), GET_HASH_KEY( ref g_U2254 ) );
            l_U128 = 0;
            l_U129 = 5;
             /* WRITESCRIPTLOG */ sub_456( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            break;
            case 5:
             /* WRITESCRIPTLOG */ sub_456( "AT", "eFailState = FAIL_RESTART_CHECKPOINT", 0 );
            l_U126 = 1;
            l_U129 = 0;
             /* WRITESCRIPTLOG */ sub_456( "AT", "eFailState = FAIL_IDLE", 0 );
            break;
        }
    }
    return;
}

/* PLAYER_PED_ID */ int sub_826()
{
    if (DOES_MAIN_PLAYER_EXIST())
    {
        return GET_PLAYER_PED(  /* PLAYER_ID */ sub_864() );
    }
    return 0;
}

/* PLAYER_ID */ void sub_864()
{
    return GET_PLAYER_ID();
}

/* RESTARTING_CHECKPOINT */ int sub_927()
{
    if (HAS_SELECTED_RETRY_CHECKPOINT())
    {
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (HAS_CUTSCENE_FINISHED() == 0)
        {
            return 0;
        }
        l_U0 = 0;
        g_U648 = 1;
        DO_SCREEN_FADE_OUT( 0 );
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 1 );
        TERMINATE_GAME_BULLET_CAMERA();
        if (IS_ANIMATED_CAMERA_PLAYING())
        {
            CAMERA_ANIMATED_STOP( 0, 0 );
        }
        STOP_ALL_SCRIPTED_CONVERSATIONS( 0 );
        DEACTIVATE_BULLET_TIME( 1, 0 );
        END_POSTFX_BLENDER( 0, 0 );
        END_POSTFX_BLENDER( 2, 0 );
        END_POSTFX_BLENDER( 3, 0 );
        END_POSTFX_BLENDER( 4, 0 );
        END_POSTFX_BLENDER( 5, 0 );
        END_POSTFX_BLENDER( 7, 0 );
        END_POSTFX_BLENDER( 9, 0 );
        END_POSTFX_BLENDER( 10, 0 );
        END_POSTFX_BLENDER( 11, 0 );
        END_POSTFX_BLENDER( 12, 0 );
        END_POSTFX_BLENDER( 13, 0 );
        END_POSTFX_BLENDER( 14, 0 );
        END_POSTFX_BLENDER( 15, 0 );
        END_POSTFX_BLENDER( 16, 0 );
        STOP_ALL_IMAGEFX( 0 );
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
        {
            SET_PED_FORCED_TO_WALK(  /* PLAYER_PED_ID */ sub_826(), 0 );
            SET_PLAYER_FORCED_AIM(  /* PLAYER_ID */ sub_864(), 0, 0 );
            SET_PLAYER_CAN_USE_SHOOTDODGE(  /* PLAYER_ID */ sub_864(), 1 );
            if ((IS_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_826() )) == 0)
            {
                SET_PED_VISIBLE(  /* PLAYER_PED_ID */ sub_826(), 1 );
            }
        }
        CLEAR_PRINTS();
        CLEAR_HELP();
        SET_INTERACTIONTEXT_VISIBLE( 0 );
        RENDER_SCRIPT_CAMS( 0, 0, 3000, 0 );
        DESTROY_ALL_CAMS();
        AUDIO_MUSIC_SUSPEND( 500 );
        return 1;
    }
    return 0;
}

/* IS_RESTART_ACTIVE */ void sub_1445()
{
    return g_U648;
}

/* F_CHECK_QUIT_RETRY */ int sub_1505(int iParam0)
{
    iParam0 = 1;
    switch (l_U75)
    {
        case 0:
        if (NOT ( /* HASTIMERBEENACTIVATED */ sub_1587( ref l_U77 )))
        {
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
            {
                l_U76 = 2000;
                ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 1 );
            }
             /* CREATETIMER */ sub_1721( ref l_U77, l_U76, 1, 1 );
             /* STARTTIMER */ sub_1871( ref l_U77 );
        }
        if ( /* ISTIMERDONE */ sub_2004( ref l_U77 ))
        {
             /* WRITESCRIPTLOG */ sub_456( "NS", " show fail/retry text", 0 );
            if ((IS_DEATH_PANEL_WIPE_ALLOWED()) AND (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
            {
                if ((IS_BULLET_CAMERA_RUNNING( 0 )) == 0)
                {
                    if (IS_SCREEN_FADED_OUT())
                    {
                        DO_SCREEN_FADE_IN( 0 );
                    }
                }
                ENABLE_DEATHHELPERTEXT( 1, 1, 0 );
            }
            else if (IS_SCREEN_FADED_OUT())
            {
                DO_SCREEN_FADE_IN( 0 );
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            else
            {
                ENABLE_DEATHHELPERTEXT( 1, iParam0, 0 );
            }
            if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_864() )))
            {
                SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_864(), 0, 0 );
            }
            DISPLAY_HUD( 0 );
            l_U75 = 1;
        }
        break;
        case 1:
        if ((((NOT IS_QUIT_CONFIRMING()) == 1) AND (IS_BUTTON_JUST_PRESSED( 0, 501 ))) || ((N_1855335259()) || (IS_CONTROL_JUST_PRESSED( 2, 82 ))))
        {
            if (IS_QUIT_CONFIRMING() == 1)
            {
                l_U75 = 2;
            }
            else
            {
                l_U75 = 3;
            }
        }
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_456( "NS", "Player will QUIT", 0 );
         /* P_POSTQUITRETRYCLEANUP */ sub_2505();
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
        START_PANEL_WIPE( 0, 6 );
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        RETURN_TO_TITLESCREEN( 0 );
        break;
        case 3:
         /* WRITESCRIPTLOG */ sub_456( "NS", "Player will RETRY", 0 );
        if (IS_IN_NYMINUTE_MODE())
        {
            SWITCH_TO_LEVEL( GET_INDEX_OF_CURRENT_LEVEL() );
        }
        if (iParam0 == 1)
        {
            DO_SCREEN_FADE_OUT( 0 );
        }
         /* P_POSTQUITRETRYCLEANUP */ sub_2505();
        return 1;
        break;
    }
    return 0;
}

/* HASTIMERBEENACTIVATED */ int sub_1587(int iParam0)
{
    if (iParam0->_fU20 == 1)
    {
        return 1;
    }
    if (iParam0->_fU16 == 1)
    {
        return 1;
    }
    return 0;
}

/* CREATETIMER */ void sub_1721(int iParam0, unknown uParam1, boolean bParam2, int iParam3)
{
    if (bParam2)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam3 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU12 = uParam1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = bParam2;
    iParam0->_fU32 = iParam3;
    iParam0->_fU8 = 0;
    return;
}

/* STARTTIMER */ void sub_1871(int iParam0)
{
    if (NOT iParam0->_fU20)
    {
        iParam0->_fU20 = 1;
        iParam0->_fU16 = 0;
        if (iParam0->_fU28)
        {
            iParam0->_fU0 = TIMERA();
        }
        else
        {
            iParam0->_fU0 = TIMERB();
        }
        if (iParam0->_fU32 == 1)
        {
            iParam0->_fU0 = TIMERSYSTEM();
        }
        iParam0->_fU4 = iParam0->_fU0;
    }
    return;
}

/* ISTIMERDONE */ int sub_2004(int iParam0)
{
    if (iParam0->_fU16)
    {
        return 0;
    }
    else if (NOT iParam0->_fU20)
    {
        return 0;
    }
    if (iParam0->_fU28)
    {
        iParam0->_fU4 = TIMERA();
    }
    else
    {
        iParam0->_fU4 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU4 = TIMERSYSTEM();
    }
    if ((iParam0->_fU4 - iParam0->_fU0) >= iParam0->_fU12)
    {
        iParam0->_fU16 = 1;
        iParam0->_fU20 = 0;
        return 1;
        break;
    }
    return 0;
}

/* P_POSTQUITRETRYCLEANUP */ void sub_2505()
{
     /* WRITESCRIPTLOG */ sub_456( "NS", "P_PostFailRetryCleanup", 0 );
     /* RESETTIMER */ sub_2580( ref l_U77 );
    ENABLE_DEATHHELPERTEXT( 0, 0, 2000 );
    SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_864() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_864(), 1, 0 );
    }
    DISPLAY_HUD( 1 );
    l_U74 = 0;
    l_U74 = l_U74;
    l_U75 = 0;
    return;
}

/* RESETTIMER */ void sub_2580(int iParam0)
{
    if (iParam0->_fU28)
    {
        iParam0->_fU0 = TIMERA();
    }
    else
    {
        iParam0->_fU0 = TIMERB();
    }
    if (iParam0->_fU32 == 1)
    {
        iParam0->_fU0 = TIMERSYSTEM();
    }
    iParam0->_fU4 = iParam0->_fU0;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    return;
}

/* P_RESET_CHECKPOINT_THREAD */ void sub_3245(int iParam0)
{
    iParam0->_fU36 = 0;
    iParam0->_fU40 = 0;
    return;
}

/* P_CLEANUP_DESERTEDHALLWAYS */ void sub_3423()
{
     /* WRITESCRIPTLOG */ sub_456( "AT", "P_CLEANUP_DESERTEDHALLWAYS", 0 );
     /* CLEANPLACEMENTARRAY */ sub_3506( ref l_U513 );
     /* CLEANPLACEMENT */ sub_3561( g_U751._fU0 );
    ISEQ_TERMINATE( 713966355 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3673( 713966355, ref g_U1368 );
    ISEQ_TERMINATE( 1888524188 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3673( 1888524188, ref g_U1368 );
    ISEQ_TERMINATE( -527946023 );
     /* P_STREAMREQ_ISEQ_REMOVE */ sub_3673( -527946023, ref g_U1368 );
    if (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "FINALE_ONESHOT_02" ))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
    if (AUDIO_MUSIC_IS_ONESHOT_PREPARED( "FINALE_ONESHOT_03" ))
    {
        AUDIO_MUSIC_STOP_ONESHOT();
    }
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
     /* CLEANOBJECT */ sub_4880( l_U519 );
     /* CLEANOBJECT */ sub_4880( l_U520 );
     /* CLEANOBJECT */ sub_4880( l_U521 );
     /* CLEANOBJECT */ sub_4880( l_U522 );
     /* CLEANOBJECT */ sub_4880( l_U523 );
     /* CLEANPEDARRAY */ sub_4978( ref l_U218 );
    if ((CUTSCENE_NAMED_IS_LOADING( "MID_02_FIN" )) || (CUTSCENE_IS_LOADED( "MID_02_FIN" )))
    {
        CLEAR_NAMED_CUTSCENE( "MID_02_FIN" );
    }
    return;
}

/* CLEANPLACEMENTARRAY */ void sub_3506(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* CLEANPLACEMENT */ sub_3561( (uParam0^)[I] );
    }
    return;
}

/* CLEANPLACEMENT */ void sub_3561(unknown uParam0)
{
    if ((DOES_PLACEMENT_EXIST( uParam0 )) == 1)
    {
        REMOVE_PLACEMENT( uParam0 );
    }
    return;
}

/* P_STREAMREQ_ISEQ_REMOVE */ void sub_3673(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (ISEQ_DOES_EXIST( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3811( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a ISEQ asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        SCRIPT_ASSERT( "The eTempAssetName ISEQ is NOT valid!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ int sub_3811(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            ;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if ((uParam1^)[I] == iParam0)
            {
                DISPLAYF( "[CCB] ### The THREADID index matches the asset requested for removal: {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
            else if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID index is in use and is active: {} ###", 1, 513, (uParam1^)[I] );
                Result = I;
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is in use, but is no longer active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL: {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    return -1;
}

/* CLEANOBJECT */ void sub_4880(unknown uParam0)
{
    if (DOES_OBJECT_EXIST( uParam0 ))
    {
        DELETE_OBJECT( ref uParam0 );
    }
    return;
}

/* CLEANPEDARRAY */ void sub_4978(unknown uParam0)
{
    int I;

    I = 0;
    for ( I = 0; I < (uParam0^); I++ )
    {
         /* CLEANPED */ sub_5028( (uParam0^)[I] );
    }
    return;
}

/* CLEANPED */ void sub_5028(unknown uParam0)
{
    if (DOES_PED_EXIST( uParam0 ))
    {
        if ((NOT (IS_PED_DEAD( uParam0 ))) || (IS_PED_DEAD( uParam0 )))
        {
            REMOVE_ALL_PED_WEAPONS( uParam0 );
            DELETE_PED( ref uParam0 );
        }
    }
    return;
}

/* P_RESTORE_PLAYER_DATA_CHECKPOINT */ void sub_5318(int iParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    int iVar9;
    int iVar10;
    int iVar11;
    unknown uVar12;
    unknown uVar13;

     /* WRITESCRIPTLOG */ sub_456( "GA", "Restoring the player to the checkpoint - Start", 0 );
    if (l_U0)
    {
        INCREMENT_CHECKPOINT_ATTEMPT();
    }
    g_U648 = 0;
    if (iParam0->_fU0 == 0)
    {
        SCRIPT_ASSERT( "ERROR: Trying to restore a checkpoint that hasn't been saved!!!", 0 );
    }
     /* CLOSE_CURRENT_LEVEL_CONTEXT */ sub_5537( iParam0->_fU52 );
    if (SCRIPT_VAR_EXISTS( "SV_LOAD_CNT" ))
    {
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", (SCRIPT_VAR_GET_INT( "SV_LOAD_CNT" )) + 1 );
    }
    else
    {
        SCRIPT_VAR_ADD_INT( "SV_LOAD_CNT" );
        SCRIPT_VAR_SET_INT( "SV_LOAD_CNT", 1 );
    }
    CLEAR_KILL_STREAK_RECORDS();
    AUDIO_MUSIC_SUSPEND( 0 );
    DEACTIVATE_BULLET_TIME( 1, 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    REMOVE_ALL_ENVIRONMENT_BLOOD();
    RESET_BLOOD_EFFECTS();
    REMOVE_ALL_GLINTS();
    RESET_DESTROYED_COVER();
    RESET_ALL_PTFX();
    uVar4 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam1 )};
    CLEAR_AREA( iParam0->_fU4, 10000.00000000, 1 );
    if (NOT (IS_PED_DEAD( uParam1 )))
    {
        SET_PED_COORDS( uParam1, iParam0->_fU4, 1 );
         /* LOADCOLLISIONFORPED */ sub_6701( uParam1 );
        SET_PED_HEADING( uParam1, iParam0->_fU16 );
    }
    CLEAR_AREA( uVar4, 3.00000000, 1 );
    LOAD_SCENE( iParam0->_fU4 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0.00000000, 1065353216, 0 );
    iParam0->_fU28 = GET_PED_MAX_HEALTH( uParam1 );
    SET_PED_HEALTH( uParam1, iParam0->_fU28, 0 );
    RESET_PED_GORE( uParam1 );
    RESET_PED_VISIBLE_DAMAGE( uParam1 );
    REMOVE_ALL_PED_WEAPONS( uParam1 );
    if (NOT (iParam0->_fU56 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7015( uParam1, iParam0->_fU56, 0, iParam0->_fU76, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7494( uVar7, iParam0 + 96, iParam0 + 100 );
    }
    if (NOT (iParam0->_fU60 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7015( uParam1, iParam0->_fU60, 1, iParam0->_fU80, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7494( uVar7, iParam0 + 104, iParam0 + 108 );
    }
    if (NOT (iParam0->_fU64 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7015( uParam1, iParam0->_fU64, 2, iParam0->_fU84, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7494( uVar7, iParam0 + 112, iParam0 + 116 );
    }
    if (NOT (iParam0->_fU68 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_7810( uParam1, iParam0->_fU68, iParam0->_fU88, 0, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7494( uVar7, iParam0 + 120, iParam0 + 124 );
    }
    if (NOT (iParam0->_fU72 == -1569615261))
    {
        uVar7 =  /* F_GIVEPEDWEAPON */ sub_7810( uParam1, iParam0->_fU72, iParam0->_fU92, 1, 1 );
         /* P_RESTORE_WEAPON_ATTACHMENTS */ sub_7494( uVar7, iParam0 + 128, iParam0 + 132 );
    }
    if (l_U0 == 1)
    {
        if ((IS_PED_DEAD( uParam1 )) == 0)
        {
            if (iParam0->_fU68 != -1569615261)
            {
                uVar7 = GET_WEAPON_FROM_HAND( uParam1, 0, 0 );
                if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
                {
                    uVar8 = GET_WEAPON_TYPE( uVar7 );
                    if (( /* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ sub_8382( uVar8 )) == 1)
                    {
                        iVar9 = GET_MAX_AMMO_IN_HAND_CLIP_MP( uParam1, 0 );
                        iVar10 = iParam0->_fU88;
                        if (iVar10 < iVar9)
                        {
                            iVar11 = iVar9 - iVar10;
                            ADD_AMMO_TO_PED( uParam1, uVar8, iVar11, 0 );
                            SET_WEAPON_AMMO_IN_CLIP( uVar7, iVar9 );
                        }
                    }
                }
            }
        }
    }
     /* START_NEW_LEVEL_CONTEXT */ sub_8584( iParam0->_fU52 );
    SET_ADRENALINE_AMT( iParam0->_fU32 );
    if (GET_ADRENALINE_AMT() < 0.20000000)
    {
        SET_ADRENALINE_AMT( 0.20000000 );
    }
    SET_PAYNEKILLER_AMT( iParam0->_fU36 );
    SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_826(), 0 );
    GET_TIME_OF_DAY( ref uVar12, ref uVar13 );
    if (iParam0->_fU140 == 1)
    {
        FREEZE_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    else
    {
        RELEASE_TIME_OF_DAY();
        SET_TIME_OF_DAY( iParam0->_fU40, iParam0->_fU44 );
    }
    SET_PED_SWEAT( uParam1, iParam0->_fU136, -1.00000000 );
    RESTORE_PICKUPS();
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( iParam0->_fU20, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( iParam0->_fU24, 1065353216, 0 );
    HANDLE_CHECKPOINT_RESTART();
    if (l_U0)
    {
        ADJUST_AMMO_ATTEMPTS();
        ADJUST_PAIN_KILLERS_ATTEMPTS();
    }
    l_U0 = 1;
    DISPLAY_HUD( 1 );
    if (IS_DEATH_PANEL_WIPE_ALLOWED())
    {
        if (IS_BULLET_CAMERA_WIPE_STOPPED())
        {
            RESUME_BULLET_CAMERA_WIPE_ON_FADEIN();
        }
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "Restoring the player to the checkpoint - End", 0 );
    return;
}

/* CLOSE_CURRENT_LEVEL_CONTEXT */ void sub_5537(unknown uParam0)
{
    int iVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    iVar3 = 0;
    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        iVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_5599( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, iVar3, 513, uParam0 );
    END_CONTEXT( ref uVar4 );
    return;
}

/* GET_MISSION_INDEX_FROM_NAME */ int sub_5599(unknown uParam0)
{
    if (ARE_STRINGS_EQUAL( uParam0, "s_air" ))
    {
        return 21;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_beach" ))
    {
        return 22;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_boat" ))
    {
        return 10;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_booze" ))
    {
        return 0;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_busdep" ))
    {
        return 17;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_cemet" ))
    {
        return 15;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_club" ))
    {
        return 5;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_clubride" ))
    {
        return 4;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fashion" ))
    {
        return 3;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav0" ))
    {
        return 13;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav1" ))
    {
        return 14;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fav2" ))
    {
        return 16;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_fire" ))
    {
        return 12;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_hotel" ))
    {
        return 19;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_intro" ))
    {
        return 1;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_marina" ))
    {
        return 9;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc" ))
    {
        return 7;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_nyc2" ))
    {
        return 8;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_office" ))
    {
        return 11;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_pana" ))
    {
        return 18;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_police" ))
    {
        return 20;
    }
    else if (ARE_STRINGS_EQUAL( uParam0, "s_stad" ))
    {
        return 6;
    }
    else
    {
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
        PRINTSTRING( uParam0 );
    };;;;;;;;;;;;;;;;;;;;;;
    return 99;
}

/* LOADCOLLISIONFORPED */ void sub_6701(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        uVar3 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        SET_LOAD_COLLISION_FOR_PED_FLAG( uParam0, 1 );
        SET_PED_COORDS_NO_OFFSET( uParam0, uVar3 );
        FREEZE_PED_POSITION( uParam0, 1 );
        REQUEST_COLLISION_AT_COORD( uVar3 );
        if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
        {
            FREEZE_PED_POSITION( uParam0, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPONTOHOLSTER */ void sub_7015(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's holster MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HOLSTER( uParam0, uParam1, uParam3, uParam2 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HOLSTER( uParam0, uParam2 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_7419( "[SP]### (F_GivePedWeaponToHolster) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* WRITE_STRING */ void sub_7419(unknown uParam0)
{
    PRINTSTRING( uParam0 );
    PRINTNL();
    return;
}

/* P_RESTORE_WEAPON_ATTACHMENTS */ void sub_7494(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        if (IS_BIT_SET( (uParam1^), I ))
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 1 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, IS_BIT_SET( (uParam2^), I ) );
        }
        else
        {
            ENABLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
            TOGGLE_WEAPON_ATTACHMENT( uParam0, I, 0 );
        }
    }
    return;
}

/* F_GIVEPEDWEAPON */ void sub_7810(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, int iParam4)
{
    unknown Result;

    if ((HAS_WEAPON_LOADED( uParam1 )) == 0)
    {
        SCRIPT_ASSERT( "The weapon model you are giving to the ped's hand MUST BE PRELOADED!!!!", 0 );
    }
    Result = nil;
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        Result = GIVE_WEAPON_TO_PED_HAND( uParam0, uParam1, uParam2, uParam3 );
        if (iParam4 == 1)
        {
            Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
            while (NOT (GET_DOES_WEAPON_EXIST( Result )))
            {
                WAIT( 0 );
                if ((IS_PED_DEAD( uParam0 )) == 0)
                {
                    Result = GET_WEAPON_FROM_HAND( uParam0, uParam3, 0 );
                    DISPLAYF( "[SP]### Waiting for a weapon to exist: {} ###", 1, 513, uParam1 );
                }
            }
        }
    }
    else
    {
         /* WRITE_STRING */ sub_7419( "[SP]### (F_GivePedWeapon) Error: Trying to give a dead ped a weapon. ###" );
    }
    return Result;
}

/* F_CAN_GIVE_AMMO_TO_REGULAR_WEAPON_TYPE */ int sub_8382(unknown uParam0)
{
    int iVar3;

    iVar3 = GET_WEAPONTYPE_AMMO( uParam0 );
    if ((iVar3 == -1383321053) || ((iVar3 == -1295933220) || ((iVar3 == 1138793073) || (iVar3 == -1088031219))))
    {
        return 1;
    }
    return 0;
}

/* START_NEW_LEVEL_CONTEXT */ void sub_8584(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
    {
        uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_5599( ref uVar20 );
    }
    STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, uParam0 );
     /* CLEAR_GG_CONTEXTS */ sub_8682( uVar3 );
    START_CONTEXT( ref uVar4 );
    return;
}

/* CLEAR_GG_CONTEXTS */ void sub_8682(int iParam0)
{
    if (iParam0 != 3)
    {
        END_CONTEXT( "S_FAS_GG_PT" );
    }
    if (iParam0 != 5)
    {
        END_CONTEXT( "S_CLB_GG_M3" );
        END_CONTEXT( "S_CLB_MS" );
    }
    if (iParam0 != 6)
    {
        END_CONTEXT( "S_STA_GG_M1" );
        END_CONTEXT( "S_STA_GG_M81" );
    }
    if (iParam0 != 7)
    {
        END_CONTEXT( "S_NY1_GG_19" );
    }
    if (iParam0 != 8)
    {
        END_CONTEXT( "S_NY2_GG_40" );
        END_CONTEXT( "S_NY2_GG_M5" );
    }
    if (iParam0 != 9)
    {
        END_CONTEXT( "S_MAR_GG_LM" );
        END_CONTEXT( "S_MAR_GG_9M" );
    }
    if (iParam0 != 11)
    {
        END_CONTEXT( "S_OFF_GG_MD" );
    }
    if (iParam0 != 14)
    {
        END_CONTEXT( "S_FV1_GG_SP" );
        END_CONTEXT( "S_FV1_GG_SA" );
    }
    if (iParam0 != 15)
    {
        END_CONTEXT( "S_NYC_GG_6M" );
        END_CONTEXT( "S_NYC_GG_A9" );
    }
    if (iParam0 != 16)
    {
        END_CONTEXT( "S_FV2_GG_D5" );
        END_CONTEXT( "S_FV2_GG_97" );
    }
    if (iParam0 != 17)
    {
        END_CONTEXT( "S_BUS_GG_M4" );
        END_CONTEXT( "S_BUS_GG_FN" );
    }
    if (iParam0 != 18)
    {
        END_CONTEXT( "S_PAN_GG_AK" );
        END_CONTEXT( "S_PAN_GG_SS" );
    }
    if (iParam0 != 19)
    {
        END_CONTEXT( "S_HOT_GG_G3" );
        END_CONTEXT( "S_HOT_GG_LA" );
    }
    if (iParam0 != 20)
    {
        END_CONTEXT( "S_POL_GG_G6" );
        END_CONTEXT( "S_POL_GG_RP" );
        END_CONTEXT( "S_POL_GG_MP" );
    }
    if (iParam0 != 21)
    {
        END_CONTEXT( "S_AIR_GG_RG" );
        END_CONTEXT( "S_AIR_GG_PD" );
    }
    return;
}

/* P_HANDLE_EVENTS */ void sub_10077()
{
    int iVar2;
    int I;
    int J;

    iVar2 = l_U126;
    switch (l_U126)
    {
        case 0: break;
        case 1:
         /* WRITESCRIPTLOG */ sub_456( "AT", "eCheckpointState = CP_INITIALIZE_SCRIPT_DATA", 0 );
         /* P_INITIALIZE_SCRIPT_DATA */ sub_10275();
         /* P_SET_STATIC_DATA */ sub_10629();
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH( 1 );
        l_U126 = 2;
         /* WRITESCRIPTLOG */ sub_456( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
        break;
        case 2:
         /* WRITESCRIPTLOG */ sub_456( "AT", "eCheckpointState = CP_INITIAL_REQUEST_ASSETS", 0 );
         /* P_REQUEST_DESERTEDHALLWAYS_PERSISTENT_ASSETS */ sub_14364();
         /* P_REQUEST_DESERTEDHALLWAYS_NONPERSISTENT_ASSETS */ sub_19382();
        l_U126 = 3;
         /* WRITESCRIPTLOG */ sub_456( "AT", "eCheckpointState = CP_INITIAL_LOADING_ASSETS", 0 );
        break;
        case 3:
        if (( /* F_STREAMREQ_ANIM_DICT_IS_LOADED */ sub_25941( ref g_U1429 )) AND (( /* F_STREAMREQ_ISEQ_IS_LOADED */ sub_25527( ref g_U1368 )) AND (( /* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ sub_25125( ref g_U1247 )) AND ( /* F_STREAMREQ_MODELNAMES_IS_LOADED */ sub_24728( ref g_U1030 )))))
        {
            g_U831[2] = 1;
            if ((NOT l_U90._fU0) AND (g_U829 == 2))
            {
                 /* WRITESCRIPTLOG */ sub_456( "AT", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
                l_U126 = 4;
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_456( "AT", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
                l_U126 = 6;
            }
        }
        break;
        case 4:
         /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_LEVEL_LOAD_SCRIPT_SETUP", 0 );
        l_U128 = 0;
        g_U846[2] = 1;
        if (( /* HAS_SAVEFILE_LOADED */ sub_26574( ref l_U90 )) == 0)
        {
             /* F_GIVEPEDWEAPON */ sub_7810(  /* PLAYER_PED_ID */ sub_826(), 57534114, 50, 0, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7015(  /* PLAYER_PED_ID */ sub_826(), -1464892298, 0, 50, 0 );
             /* F_GIVEPEDWEAPONTOHOLSTER */ sub_7015(  /* PLAYER_PED_ID */ sub_826(), -612753081, 1, 50, 0 );
            l_U126 = 5;
             /* WRITESCRIPTLOG */ sub_456( "CR", "eCheckpointState = CP_LEVEL_LOAD_WAIT_FOR_PLAYER_WEAPONS", 0 );
        }
        else
        {
            l_U126 = 6;
             /* WRITESCRIPTLOG */ sub_456( "CR", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
        }
        break;
        case 5:
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
        {
            if ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_826(), 1 ) )) AND ((GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_826(), 0 ) )) AND (GET_DOES_WEAPON_EXIST( GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 0, 0 ) ))))
            {
                g_U830 = 3;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_27125( ref l_U90, g_U830,  /* PLAYER_PED_ID */ sub_826(), g_U2014[2], g_U2129[2], g_U2168[2], g_U2207[2], 0 );
                l_U126 = 6;
                 /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
            }
        }
        break;
        case 6:
        if (l_U127)
        {
            l_U290 = 1;
        }
        if ( /* F_SETUP_HALLWAY_UFE */ sub_31802())
        {
            l_U126 = 7;
             /* WRITESCRIPTLOG */ sub_456( "GA", "eCheckpointState = CP_PRESPAWN_ENEMIES", 0 );
        }
        break;
        case 7:
        if (g_U846[2])
        {
            if (l_U128)
            {
                if (CUTSCENE_IS_LOADED( "MID_02_FIN" ))
                {
                     /* WRITESCRIPTLOG */ sub_456( "AT", "eCheckpointState = CP_MID_02", 0 );
                    l_U126 = 8;
                }
                else
                {
                     /* WRITESCRIPTLOG */ sub_456( "AT", "Waiting for MID_02 to load ...", 0 );
                }
            }
            else
            {
                 /* WRITESCRIPTLOG */ sub_456( "AT", "eCheckpointState = CP_MID_02", 0 );
                l_U126 = 8;
            }
        }
        break;
        case 8:
        if (l_U127)
        {
             /* P_CREATE_PLACEMENTS */ sub_35022();
             /* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ sub_40305( ref l_U643, "MID_02_FIN", 36283, 36336, 37164, 38553, 38645, 39922, 250, 0 );
             /* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ sub_40852( ref l_U643, "MILO_ap_mhalls", ref g_U2254 );
            if (l_U128)
            {
                l_U643._fU4 = 2;
            }
            else
            {
                l_U643._fU4 = 7;
            }
        }
        if ( /* CUTSYS_HANDLECUTSCENE */ sub_40984( ref l_U643 ))
        {
            if (g_U830 != 2)
            {
                g_U830 = 2;
                 /* P_SAVE_PLAYER_DATA_CHECKPOINT */ sub_27125( ref l_U90, g_U830,  /* PLAYER_PED_ID */ sub_826(), g_U2014[2], g_U2129[2], g_U2168[2], g_U2207[2], 1 );
            }
             /* LOADSEAMLESSCUTSCENE */ sub_24272( "14_FIN_RANDOM1_CONCAT", 0 );
            l_U126 = 9;
             /* WRITESCRIPTLOG */ sub_456( "AT", "eCheckpointState = CP_GAMEPLAY", 0 );
        }
        break;
        case 9:
        if (((g_U861[1]._fU40 == 4) || (g_U861[1]._fU40 == 0)) AND (NOT g_U861[3]._fU36))
        {
             /* P_START_CHECKPOINT_THREAD */ sub_43228( ref g_U861[3] );
        }
        if (DOES_OBJECT_EXIST( DOOR_FIND_CLOSEST( l_U408._fU0, l_U408._fU4 ) ))
        {
            if (DOOR_GET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( l_U408._fU0, l_U408._fU4 ) ))
            {
                DOOR_SET_IS_AFFECTED_BY_BULLETS( DOOR_FIND_CLOSEST( l_U408._fU0, l_U408._fU4 ), 0 );
            }
        }
         /* P_PED_ARRAY_Z_SAFETY_CHECK */ sub_43391( ref l_U218, -1054867456, 0, 1 );
        if (NOT l_U304)
        {
            if ( /* F_HAD_MAX_ALERTED_UFE */ sub_43601())
            {
                 /* P_START_HALLWAY_UFE_FIGHT */ sub_44237();
                 /* WRITESCRIPTLOG */ sub_456( "GA", "Playing audio music one shot FINALE_ONESHOT_02", 0 );
                AUDIO_MUSIC_PLAY_ONESHOT();
                l_U304 = 1;
            }
        }
        if ((NOT l_U305) AND ( /* F_ISPLAYERINTRIGGERBOX */ sub_44813( l_U352 )))
        {
             /* WRITESCRIPTLOG */ sub_456( "AT", "Enemies can enter bathroom.", 0 );
            for ( I = 0; I < l_U218; I++ )
            {
                 /* P_TETHERPED */ sub_34097( ref l_U351, l_U218[I], 1 );
            }
            l_U305 = 1;
        }
        else if ((l_U305) AND (NOT ( /* F_ISPLAYERINTRIGGERBOX */ sub_44813( l_U352 ))))
        {
             /* WRITESCRIPTLOG */ sub_456( "AT", "Enemies must leave bathroom.", 0 );
            for ( J = 0; J < l_U218; J++ )
            {
                 /* P_REMOVETETHERFROMPED */ sub_45140( ref l_U351, l_U218[J] );
            }
            l_U305 = 0;
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_45246( ref l_U306, 0 ))
        {
            if ((NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() ))) AND (NOT (IS_PED_DEAD( l_U218[2] ))))
            {
                SET_PED_FLAG_LOCK_TO_COVER( l_U218[2], 0 );
                TASK_COMBAT_PED( l_U218[2],  /* PLAYER_PED_ID */ sub_826() );
            }
            AUDIO_MUSIC_REQUEST_ONESHOT( "FINALE_ONESHOT_03", 0 );
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_45246( ref l_U327, 0 ))
        {
            if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
            {
                if (NOT (IS_PED_DEAD( l_U218[3] )))
                {
                    SET_PED_FLAG_LOCK_TO_COVER( l_U218[3], 0 );
                    TASK_COMBAT_PED( l_U218[3],  /* PLAYER_PED_ID */ sub_826() );
                    SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218[3], 0 );
                }
                if (NOT (IS_PED_DEAD( l_U218[4] )))
                {
                    SET_PED_FLAG_LOCK_TO_COVER( l_U218[4], 0 );
                    TASK_COMBAT_PED( l_U218[4],  /* PLAYER_PED_ID */ sub_826() );
                    SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218[4], 0 );
                }
            }
        }
        if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_45664( ref l_U218 )) == 1)
        {
             /* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ sub_45788( ref l_U218 );
        }
        if ((NOT l_U524) AND (((ABSF(  /* F_GETDOOROPENRATIO */ sub_45970( ref l_U408 ) )) > 0.10000000) || ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_45246( ref l_U130, 0 ))))
        {
             /* P_ACTIVATE_VIG02 */ sub_46088();
            PLAY_IMAGEFX( "DISTORT_INTERLACE_MIDDLE_RIGHT", 4, 1 );
            if (CUTSCENE_IS_LOADED( "14_FIN_RANDOM1_concat" ))
            {
                CLEAR_NAMED_CUTSCENE( "14_FIN_RANDOM1_concat" );
                l_U698 = 1;
            }
            if (l_U698 == 0)
            {
                 /* LOADSEAMLESSCUTSCENE */ sub_24272( "MID_03_FIN_concat", 0 );
            }
            l_U524 = 1;
        }
        if (l_U698 == 1)
        {
            if ((CUTSCENE_IS_LOADED( "14_FIN_RANDOM1_concat" )) == 0)
            {
                 /* LOADSEAMLESSCUTSCENE */ sub_24272( "MID_03_FIN_concat", 0 );
            }
        }
        if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_47040( ref l_U193,  /* PLAYER_PED_ID */ sub_826(), 0 ))
        {
            PLAY_IMAGEFX( "FLASH_WHITE_3", 4, 1 );
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_45246( ref l_U151, 0 ))
        {
             /* P_CLOSEDOOR */ sub_38735( ref l_U408, 0 );
            l_U214 = 1;
        }
        if (l_U214)
        {
             /* P_DH_HANDLE_CLEANUP_OFFSCREEN_UFE */ sub_47236();
        }
        if (l_U699 == 1)
        {
            if (IS_BULLET_CAMERA_TO_GAMEPLAY_ALLOWED())
            {
                if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_45664( ref l_U218 )) == 0)
                {
                    if ( /* F_ISPEDINTRIGGERBOX */ sub_44856(  /* PLAYER_PED_ID */ sub_826(), l_U373 ))
                    {
                         /* WRITESCRIPTLOG */ sub_456( "NS", "Enabling bullet-cam to gameplay.", 0 );
                        ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 0, 0 );
                        l_U699 = 0;
                    }
                }
            }
        }
        if (HAS_EXPLORATION_ITEM_BEEN_FOUND( "sfav0_Anders2" ))
        {
            if ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_45664( ref l_U218 )) == 0))
            {
                if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_45246( ref l_U373, 0 ))
                {
                     /* CUTSYS_CREATESTANDALONECUTSCENE */ sub_48384( ref l_U670, "14_FIN_RANDOM1_CONCAT", 36283, 47617, 48097, 48147, 250, 0 );
                    l_U670._fU4 = 2;
                    l_U697 = 1;
                }
            }
        }
        if (l_U697 == 1)
        {
            if ( /* CUTSYS_HANDLECUTSCENE */ sub_40984( ref l_U670 ))
            {
                 /* STARTTIMER */ sub_1871( ref l_U700 );
                l_U697 = 0;
            }
        }
        if ((HAS_CUTSCENE_FINISHED()) AND ((NOT (IS_BULLET_CAMERA_RUNNING( 0 ))) AND ((NOT ( /* F_IS_PED_PLAYING_SPEECH */ sub_48721(  /* PLAYER_PED_ID */ sub_826() ))) AND (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_45664( ref l_U218 )) == 0))))
        {
             /* P_DH_HANDLE_OUT_OF_COMBAT_DIALOGUE */ sub_48818();
        }
        if ( /* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ sub_45246( ref l_U172, 0 ))
        {
             /* WRITESCRIPTLOG */ sub_456( "AT", "eCheckpointState = CP_FINISHED", 0 );
            g_U846[3] = 1;
            l_U126 = 10;
        }
        break;
        case 10:
        SET_EXITFLAG_FOR_SCRIPT( GET_ID_OF_THIS_THREAD() );
        l_U126 = 0;
         /* WRITESCRIPTLOG */ sub_456( "AT", "eCheckpointState = CP_IDLE", 0 );
        break;
    }
    if (l_U126 != iVar2)
    {
        l_U127 = 1;
    }
    else
    {
        l_U127 = 0;
    }
    return;
}

/* P_INITIALIZE_SCRIPT_DATA */ void sub_10275()
{
     /* WRITESCRIPTLOG */ sub_456( "AT", "P_INITIALIZE_SCRIPT_DATA", 0 );
    l_U127 = 1;
    l_U720 = 0;
    l_U304 = 0;
    l_U524 = 0;
    l_U215 = 0;
    l_U305 = 0;
    l_U214 = 0;
    l_U697 = 0;
    l_U698 = 0;
    l_U699 = 1;
    l_U709 = 0;
     /* CREATETIMER */ sub_1721( ref l_U700, 1500, 1, 0 );
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_10434( ref l_U525 );
     /* DISABLETIMER */ sub_10531( ref l_U535 );
     /* DISABLETIMER */ sub_10531( ref l_U544 );
     /* DISABLETIMER */ sub_10531( ref l_U554 );
     /* DISABLETIMER */ sub_10531( ref l_U569 );
    l_U553 = 0;
    l_U578 = 0;
    l_U568 = 0;
    return;
}

/* RESET_SCRIPT_SPEECH_STRUCT */ void sub_10434(int iParam0)
{
    iParam0->_fU4 = -1;
    iParam0->_fU16 = 0;
    iParam0->_fU20 = 0;
    iParam0->_fU24 = 0;
    iParam0->_fU28 = 0;
    iParam0->_fU32 = 0;
    iParam0->_fU36 = 0;
    return;
}

/* DISABLETIMER */ void sub_10531(int iParam0)
{
    iParam0->_fU20 = 0;
    iParam0->_fU16 = 0;
    return;
}

/* P_SET_STATIC_DATA */ void sub_10629()
{
     /* WRITESCRIPTLOG */ sub_456( "AT", "P_SET_STATIC_DATA", 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_10728( ref l_U224[0], 7.97000000, -143.80000000, 4.43000000, 5.00000000, -1481985412, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_10728( ref l_U224[1], 7.93262200, -159.88480000, 4.42978000, 207.33750000, 2086003218, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_10728( ref l_U224[2], 4.72185600, -148.13770000, 4.42978000, 284.09670000, -850069950, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_10728( ref l_U224[3], -6.34552200, -146.32850000, 4.41817200, 206.84620000, -666693278, 7, 3, 2, 0, 0 );
     /* P_CREATEPEDSTRUCTWITHNAME */ sub_10728( ref l_U224[4], -5.55468600, -150.56040000, 4.40778400, 257.14690000, 1764689719, 7, 3, 2, 0, 0 );
     /* P_CREATETRIGGERBOX */ sub_11105( ref l_U130, "TRIGGER_VIG02", -22.82000000, -151.59000000, 4.38000000, 0.61000000, 1.39000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11105( ref l_U193, "TB_ImageFX_VIG02", -28.86000000, -155.10000000, 4.38000000, 2.00000000, 2.00000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11105( ref l_U151, "TB_CLOSE_BATHROOM_DOOR", -27.30000000, -151.65000000, 4.38000000, 2.93000000, 10.90000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11105( ref l_U172, "TRIGGER_END_HALLWAYS", -36.43000000, -151.94000000, 4.38000000, 3.06000000, 12.27000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11105( ref l_U306, "TB_UNLOCK_ENEMIES1", 7.93000000, -143.42000000, 4.44000000, 4.00000000, 2.10000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11105( ref l_U327, "TB_UNLOCK_ENEMIES2", 0.70000000, -148.70000000, 4.44000000, 2.49000000, 2.97000000, 3.50000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11105( ref l_U352, "TB_PLAYER_IN_BATHROOM", -6.52000000, -139.42000000, 0.00000000, 15.49000000, 9.57000000, 8.07000000, 0.00043874, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11105( ref l_U600, "TB_BACK_OFFICE_SPEECH", 13.46000000, -146.20000000, 4.51000000, 5.27000000, 13.95000000, 3.00000000, 0.00000000, 0.00000000, 0.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11105( ref l_U621, "TB_BACK_BATHROOM_SPEECH", -29.36000000, -151.67000000, 4.51000000, 11.29000000, 11.00000000, 3.00000000, 0.00044622, 0.00000000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11105( ref l_U579, "TB_BACK_DOOR_SPEECH", -16.19000000, -149.95000000, 4.44000000, 6.59000000, 8.76000000, 3.64000000, 0.00000000, 0.00000000, 90.00000000, 1 );
     /* P_CREATETRIGGERBOX */ sub_11105( ref l_U373, "TB_START_LOCKERROOM_CUT", -1.67000000, -140.12000000, 0.00000000, 1.47000000, 1.56000000, 8.07000000, 0.00043874, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12078( ref l_U348, "TETH_TO_HALLWAYS_1", -2.78000000, -153.65000000, 0.00000000, 38.02000000, 18.27000000, 8.07000000, 0.00043874, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12078( ref l_U349, "TETH_TO_HALLWAYS_2", 9.31000000, -139.42000000, 0.00000000, 15.97000000, 18.27000000, 8.07000000, 0.00043874, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12078( ref l_U350, "TETH_TO_HALLWAYS_3", 1.02000000, -130.80000000, 0.00000000, 34.80000000, 4.44000000, 8.07000000, 0.00043874, 0.00000000, 0.00000000, 1 );
     /* P_CREATETETHERBOX */ sub_12078( ref l_U351, "TETH_TO_HALLWAYS_4", -6.52000000, -139.42000000, 0.00000000, 15.49000000, 9.57000000, 8.07000000, 0.00043874, 0.00000000, 0.00000000, 1 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U394, -1922786508, 18.07309000, -131.86230000, 3.73785000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U401, 1393752228, 18.07309000, -129.46590000, 3.73785000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U408, 160797987, -22.81339000, -151.00030000, 5.52200000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_12589( ref l_U408, 65446, 0 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U422, -270116481, 3.99842000, -131.90530000, 3.76038000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_12971( ref l_U422, 1 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U415, -2112979507, 3.99842000, -129.50070000, 3.76035000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_12971( ref l_U415, 1 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U429, 1155617511, 10.05162000, -140.17040000, 5.56070000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_12589( ref l_U429, -70.00000000, 70.00000000 );
     /* P_SETDOORLATCH */ sub_13242( ref l_U429, 1 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U436, 1155617511, 10.06162000, -146.16040000, 5.56070000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORMINMAXLIMIT */ sub_12589( ref l_U436, -70.00000000, 70.00000000 );
     /* P_SETDOORLATCH */ sub_13242( ref l_U436, 1 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U450, -270116481, 9.66369000, -153.18320000, 5.53038000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U443, -2112979507, 7.25910000, -153.18320000, 5.53035000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SET_DOORS_ONE_WAY */ sub_13491( ref l_U443, ref l_U450 );
     /* P_SETDOORAUTOCLOSE */ sub_13552( ref l_U450, 1 );
     /* P_SETDOORAUTOCLOSE */ sub_13552( ref l_U443, 1 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U464, -270116481, -5.30550000, -151.27560000, 5.56119000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U457, -2112979507, -7.70648000, -151.27760000, 5.55797000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SET_DOORS_ONE_WAY */ sub_13491( ref l_U457, ref l_U464 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U471, 160797987, 10.00310000, -157.13060000, 5.52978000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U485, 1393752228, 9.66261000, -162.22240000, 5.52978000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U478, -758884735, 7.25238000, -162.22240000, 5.52978000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_12971( ref l_U471, 1 );
     /* P_SETDOORLOCKED */ sub_12971( ref l_U485, 1 );
     /* P_SETDOORLOCKED */ sub_12971( ref l_U478, 1 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U492, 2026809072, -1.43120000, -140.81750000, 5.49670000, 0.00000000, 0.00000000, 0.00000000 );
     /* P_SETDOORLOCKED */ sub_12971( ref l_U492, 1 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U499, 1856048740, -14.10721000, -147.50900000, 5.53014000, 0, 0, 0 );
     /* P_SETDOORMINMAXLIMIT */ sub_12589( ref l_U499, -100.00000000, 0.00000000 );
     /* P_CREATEDOORSTRUCT */ sub_12424( ref l_U506, 1856048740, -14.10721000, -149.90680000, 5.53014000, 0, 0, 0 );
     /* P_SETDOORMINMAXLIMIT */ sub_12589( ref l_U506, 0.00000000, 100.00000000 );
    l_U292[0] = 57534114;
    l_U292[1] = 57534114;
    l_U292[2] = -1464892298;
    l_U292[3] = -612753081;
    l_U292[4] = -1464892298;
    l_U565[0] = "SAIR_MSHTHTF1";
    l_U565[1] = "SAIR_MSHTHTF2";
    return;
}

/* P_CREATEPEDSTRUCTWITHNAME */ void sub_10728(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    iParam0->_fU0 = {uParam1};
    iParam0->_fU20 = uParam5;
    iParam0->_fU12 = uParam4;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU36 = uParam8;
    iParam0->_fU32 = uParam9;
    iParam0->_fU44 = 0;
    iParam0->_fU16 = GET_SCENE_PED_MODEL( uParam5 );
    iParam0->_fU48 = uParam10;
    return;
}

/* P_CREATETRIGGERBOX */ void sub_11105(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    StrCopy( ref iParam0->_fU0, uParam1, 64 );
    iParam0->_fU64 = 0;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = {uParam2};
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 1, iParam0 + 0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATETETHERBOX */ void sub_12078(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11)
{
    iParam0->_fU0 = uParam1;
    GAMEPLAY_HELPER_BOX_ANGLED_CREATE( 2, iParam0->_fU0, uParam2, uParam5, uParam6, uParam7, uParam8, uParam11 );
    return;
}

/* P_CREATEDOORSTRUCT */ void sub_12424(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU4 = {uParam2};
    iParam0->_fU16 = {uParam5};
    return;
}

/* P_SETDOORMINMAXLIMIT */ void sub_12589(int iParam0, float fParam1, float fParam2)
{
    if (( /* F_DOESDOOREXIST */ sub_12624( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12708( iParam0 );
    }
    if (fParam1 > fParam2)
    {
        PRINTSTRING( "[SP]### Error: Door fMinLimit greater than fMaxLimit (default min:-81.0 max:81.0) ###" );
        PRINTNL();
    }
    else
    {
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN( iParam0->_fU0, iParam0->_fU4, fParam1 );
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX( iParam0->_fU0, iParam0->_fU4, fParam2 );
    }
    return;
}

/* F_DOESDOOREXIST */ int sub_12624(int iParam0)
{
    int iVar3;

    iVar3 = DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS( iParam0->_fU4, 1.00000000, iParam0->_fU0 );
    if (iVar3 == 1)
    {
        return 1;
    }
    return 0;
}

/* P_PRINTDOORNOTEXIST */ void sub_12708(unknown uParam0)
{
    (uParam0^) = {(uParam0^)};
    return;
}

/* P_SETDOORLOCKED */ void sub_12971(int iParam0, int iParam1)
{
    int iVar4;
    float fVar5;

    if (( /* F_DOESDOOREXIST */ sub_12624( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12708( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
    }
    else
    {
        iVar4 = 0;
        fVar5 = 0.00000000;
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar4, ref fVar5 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, fVar5 );
    }
    return;
}

/* P_SETDOORLATCH */ void sub_13242(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_12624( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12708( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_LATCH( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_SET_DOORS_ONE_WAY */ void sub_13491(unknown uParam0, unknown uParam1)
{
     /* P_SETDOORMINMAXLIMIT */ sub_12589( uParam0, 0, 90 );
     /* P_SETDOORMINMAXLIMIT */ sub_12589( uParam1, 65446, 0 );
     /* P_SETDOORAUTOCLOSE */ sub_13552( uParam0, 1 );
     /* P_SETDOORAUTOCLOSE */ sub_13552( uParam1, 1 );
    return;
}

/* P_SETDOORAUTOCLOSE */ void sub_13552(int iParam0, unknown uParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_12624( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12708( iParam0 );
    }
    DOOR_FIND_CLOSEST_SET_AUTO_CLOSE( iParam0->_fU0, iParam0->_fU4, uParam1 );
    return;
}

/* P_REQUEST_DESERTEDHALLWAYS_PERSISTENT_ASSETS */ void sub_14364()
{
     /* WRITESCRIPTLOG */ sub_456( "AT", "P_REQUEST_DESERTEDHALLWAYS_PERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ sub_14493( ref l_U721, ref g_U1030 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_17416( 57534114, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_17416( -1464892298, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_INSERT */ sub_17416( -612753081, ref g_U1247 );
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT_ARRAY */ void sub_14493(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_INSERT */ sub_14566( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_INSERT */ void sub_14566(unknown uParam0, unknown uParam1)
{
    int iVar4;

    if (IS_MODEL_IN_CDIMAGE( uParam0 ))
    {
        iVar4 =  /* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ sub_14633( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar4 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar4 );
            PRINTNL();
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            (uParam1^)[iVar4]._fU0 = uParam0;
            (uParam1^)[iVar4]._fU4 = 1;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14891( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Inserting MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_INDEX_AVAILABLE */ int sub_14633(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14891( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is loading: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is already loading!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14891( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_MODEL_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                     /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14891( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The MODEL_NAME is being requested: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The MODEL_NAME asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16422( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The MODEL_NAME is being removed: {!f1} ###", 2, 1, -874832622, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The MODEL_NAME asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14891( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_MODEL_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The MODEL_NAME is already loaded: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            SCRIPT_ASSERT( "The MODEL_NAME is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ sub_14891( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The MODEL_NAMES - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_MODELNAMES_THREADID_SET_ID */ void sub_14891(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14952( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The MODEL_NAME asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ int sub_14952(int iParam0, unknown uParam1)
{
    int I;
    int Result;

    Result = -1;
    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if ((uParam1^)[I] == nil)
        {
            Result = I;
        }
        else
        {
            DISPLAYF( "[CCB] ### The THREADID index is being used: {} ###", 1, 513, I );
            if (IS_THREAD_ACTIVE( (uParam1^)[I] ))
            {
                DISPLAYF( "[CCB] ### The THREADID is active: {} ###", 1, 513, (uParam1^)[I] );
                if ((uParam1^)[I] == iParam0)
                {
                    DISPLAYF( "The THREADID was already requested by this thread!!!", 0 );
                    DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                    (uParam1^)[I] = nil;
                    Result = I;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The THREADID index was requested by another thread!!! {} ###", 1, 513, I );
                }
            }
            else
            {
                DISPLAYF( "[CCB] ### The THREADID is NOT active!!! {} ###", 1, 513, (uParam1^)[I] );
                DISPLAYF( "[CCB] ### Resetting the THREADID index value to NULL. {} ###", 1, 513, I );
                (uParam1^)[I] = nil;
                Result = I;
            }
        }
    }
    if (NOT (Result == -1))
    {
        return Result;
    }
    SCRIPT_ASSERT( "There are no THREADID indices available for insert!!!", 0 );
    return -1;
}

/* P_STREAMREQ_THREADID_RESET */ void sub_16422(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        (uParam0^)[I] = nil;
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_INSERT */ void sub_17416(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ sub_17470( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, uParam0 );
        (uParam1^)[iVar4]._fU0 = uParam0;
        (uParam1^)[iVar4]._fU4 = 1;
         /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17731( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_INDEX_AVAILABLE */ int sub_17470(int iParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17731( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is loading: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is already loading!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17731( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if (HAS_WEAPON_LOADED( iParam0 ))
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The WEAPON_TYPE asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17731( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The WEAPON_TYPE is being requested: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The WEAPON_TYPE asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    (uParam1^)[Result]._fU0 = 0;
                    (uParam1^)[Result]._fU4 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16422( ref (uParam1^)[Result]._fU8 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                DISPLAYF( "[CCB] ### The WEAPON_TYPE is being removed: {!f1} ###", 2, 1, 199730165, 513, (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The WEAPON_TYPE asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17731( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_WEAPON_LOADED( iParam0 ))
        {
            DISPLAYF( "[CCB] ### The WEAPON_TYPE is already loaded: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            DISPLAYF( "The WEAPON_TYPE asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing WEAPON_TYPE: {!f1} ###", 2, 1, 199730165, 513, iParam0 );
            (uParam1^)[iVar6]._fU0 = iParam0;
            (uParam1^)[iVar6]._fU4 = 3;
             /* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ sub_17731( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The WEAPON_TYPE - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_WEAPON_TYPE_THREADID_SET_ID */ void sub_17731(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14952( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The WEAPON_TYPE asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_REQUEST_DESERTEDHALLWAYS_NONPERSISTENT_ASSETS */ void sub_19382()
{
     /* WRITESCRIPTLOG */ sub_456( "AT", "P_REQUEST_DESERTEDHALLWAYS_NONPERSISTENT_ASSETS start", 0 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_19518( 713966355, ref g_U1368 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_19518( 1888524188, ref g_U1368 );
     /* P_STREAMREQ_ISEQ_INSERT */ sub_19518( -527946023, ref g_U1368 );
     /* P_STREAMREQ_ANIM_DICT_INSERT */ sub_22365( "LEVEL_S_FIN_CP_02", ref g_U1429 );
    if ((l_U128) AND (g_U829 != 2))
    {
         /* LOADSEAMLESSCUTSCENE */ sub_24272( "MID_02_FIN", 0 );
    }
    else
    {
         /* LOADSEAMLESSCUTSCENE */ sub_24272( "14_FIN_RANDOM1_CONCAT", 0 );
    }
    return;
}

/* P_STREAMREQ_ISEQ_INSERT */ void sub_19518(unknown uParam0, unknown uParam1)
{
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    int iVar12;

    if (ISEQ_DOES_EXIST( uParam0 ))
    {
        iVar12 =  /* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ sub_19579( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
        if (iVar12 >= 0)
        {
            DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
            PRINTINT( iVar12 );
            PRINTNL();
            ISEQ_GET_NAME( 32, ref uVar4, uParam0 );
            DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar4 );
            (uParam1^)[iVar12]._fU0 = uParam0;
            (uParam1^)[iVar12]._fU4 = 1;
             /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_19829( iVar12, uParam1, GET_ID_OF_THIS_THREAD() );
        }
    }
    else
    {
        SCRIPT_ASSERT( "[CCB] ### The eTempAssetName ISEQ is NOT valid!!! ###", 0 );
    }
    return;
}

/* F_STREAMREQ_ISEQ_IS_INDEX_AVAILABLE */ int sub_19579(int iParam0, unknown uParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    int Result;
    int iVar14;

    iVar14 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU4 == 1)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_19829( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 2)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is loading: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_19829( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 3)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                if ((uParam1^)[Result]._fU0 != 0)
                {
                    if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 2 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                        DISPLAYF( "The ISEQ asset is already loaded!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_19829( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 1 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is already loading: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset is currently loading!!!", 0 );
                         /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_19829( Result, uParam1, uParam2 );
                        return -1;
                    }
                    else if (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 6 ))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### Re-requesting ISEQ: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already TERMINATED!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                        return Result;
                    }
                    else if ((ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 5 )) || (ISEQ_QUERY_STATE( (uParam1^)[Result]._fU0, 4 )))
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ status is LOADED but the asset is already interrupted or shutting down!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_16422( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    }
                    else
                    {
                        ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                        DISPLAYF( "[CCB] ### The ISEQ is being requested: {} ###", 1, 1281, ref uVar5 );
                        SCRIPT_ASSERT( "The ISEQ asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                        (uParam1^)[Result]._fU0 = 0;
                        (uParam1^)[Result]._fU4 = 0;
                         /* P_STREAMREQ_THREADID_RESET */ sub_16422( ref (uParam1^)[Result]._fU8 );
                        return Result;
                    };;;;
                }
                else
                {
                    SCRIPT_ASSERT( "Trying to update the state of a DUMMY_SEQUENCE!!!", 0 );
                }
            }
        }
        else if ((uParam1^)[Result]._fU4 == 4)
        {
            if ((uParam1^)[Result]._fU0 == iParam0)
            {
                ISEQ_GET_NAME( 32, ref uVar5, (uParam1^)[Result]._fU0 );
                DISPLAYF( "[CCB] ### The ISEQ is being removed: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_19829( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU4 == 0)
        {
            iVar14 = Result;
        };;;;;
    }
    if (NOT (iVar14 == -1))
    {
        if (iParam0 != 0)
        {
            if ((ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 3 )) || (ISEQ_QUERY_STATE( (uParam1^)[iVar14]._fU0, 2 )))
            {
                ISEQ_GET_NAME( 32, ref uVar5, iParam0 );
                DISPLAYF( "[CCB] ### The ISEQ is already loaded: {} ###", 1, 1281, ref uVar5 );
                SCRIPT_ASSERT( "The ISEQ asset is already loaded, but the asset status flag was not set!!!", 0 );
                DISPLAYF( "[CCB] ### Storing ISEQ: {} ###", 1, 1281, ref uVar5 );
                (uParam1^)[iVar14]._fU0 = iParam0;
                (uParam1^)[iVar14]._fU4 = 3;
                 /* P_STREAMREQ_ISEQ_THREADID_SET_ID */ sub_19829( iVar14, uParam1, uParam2 );
                return -1;
            }
            else
            {
                return iVar14;
            }
        }
        else
        {
            SCRIPT_ASSERT( "Trying to check if index is available for a DUMMY_SEQUENCE!!!", 0 );
        }
    }
    SCRIPT_ASSERT( "The ISEQ - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ISEQ_THREADID_SET_ID */ void sub_19829(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14952( uParam2, ref (uParam1^)[uParam0]._fU8 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU8[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ISEQ asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_INSERT */ void sub_22365(unknown uParam0, unknown uParam1)
{
    int iVar4;

    iVar4 =  /* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ sub_22417( uParam0, uParam1, GET_ID_OF_THIS_THREAD() );
    if (iVar4 >= 0)
    {
        DISPLAYF( "[CCB] ### Found NULL array index: ###", 0 );
        PRINTINT( iVar4 );
        PRINTNL();
        DISPLAYF( "[CCB] ### Storing ANIM_DICT asset name: {} ###", 1, 1537, uParam0 );
        StrCopy( ref (uParam1^)[iVar4]._fU0, uParam0, 32 );
        (uParam1^)[iVar4]._fU32 = 1;
         /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22669( iVar4, uParam1, GET_ID_OF_THIS_THREAD() );
    }
    return;
}

/* F_STREAMREQ_ANIM_DICT_IS_INDEX_AVAILABLE */ int sub_22417(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int Result;
    int iVar6;

    iVar6 = -1;
    for ( Result = 0; Result <= ((uParam1^) - 1); Result++ )
    {
        if ((uParam1^)[Result]._fU32 == 1)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being requested!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22669( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 2)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is loading: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is already loading!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22669( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 3)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    DISPLAYF( "The ANIM_DICT asset is already loaded!!!", 0 );
                     /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22669( Result, uParam1, uParam2 );
                    return -1;
                }
                else
                {
                    DISPLAYF( "[CCB] ### The ANIM_DICT is being requested: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                    SCRIPT_ASSERT( "The ANIM_DICT asset status is loaded, but the asset is currently NOT loaded!!!", 0 );
                    StrCopy( ref (uParam1^)[Result]._fU0, "", 32 );
                    (uParam1^)[Result]._fU32 = 0;
                     /* P_STREAMREQ_THREADID_RESET */ sub_16422( ref (uParam1^)[Result]._fU36 );
                    return Result;
                }
            }
        }
        else if ((uParam1^)[Result]._fU32 == 4)
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[Result]._fU0, uParam0 ))
            {
                DISPLAYF( "[CCB] ### The ANIM_DICT is being removed: {} ###", 1, 1281, ref (uParam1^)[Result]._fU0 );
                SCRIPT_ASSERT( "The ANIM_DICT asset is currently being removed!!!", 0 );
                 /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22669( Result, uParam1, uParam2 );
                return -1;
            }
        }
        else if ((uParam1^)[Result]._fU32 == 0)
        {
            iVar6 = Result;
        };;;;;
    }
    if (NOT (iVar6 == -1))
    {
        if (HAS_ANIM_DICT_LOADED( uParam0, 0 ))
        {
            DISPLAYF( "[CCB] ### The ANIM_DICT is already loaded: {} ###", 1, 1537, uParam0 );
            DISPLAYF( "The ANIM_DICT asset is already loaded, but the asset status flag was not set!!!", 0 );
            DISPLAYF( "[CCB] ### Storing ANIM_DICT: {} ###", 1, 1537, uParam0 );
            StrCopy( ref (uParam1^)[iVar6]._fU0, uParam0, 32 );
            (uParam1^)[iVar6]._fU32 = 1;
             /* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ sub_22669( iVar6, uParam1, uParam2 );
            return -1;
        }
        else
        {
            return iVar6;
        }
    }
    SCRIPT_ASSERT( "The ANIM_DICT - STREAMREQ array is full!!!", 0 );
    return -1;
}

/* P_STREAMREQ_ANIM_DICT_THREADID_SET_ID */ void sub_22669(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int iVar5;

    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_INSERT */ sub_14952( uParam2, ref (uParam1^)[uParam0]._fU36 );
    if (iVar5 >= 0)
    {
        DISPLAYF( "[CCB] ### Storing the THREADID: {} ###", 1, 513, uParam2 );
        (uParam1^)[uParam0]._fU36[iVar5] = uParam2;
    }
    else
    {
        SCRIPT_ASSERT( "The ANIM_DICT asset thread indices are NOT available!!!", 0 );
    }
    return;
}

/* LOADSEAMLESSCUTSCENE */ void sub_24272(unknown uParam0, int iParam1)
{
    if (HAS_CUTSCENE_LOADED())
    {
        if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
        {
            SCRIPT_ASSERT( "Another cutscene is already loaded.  You can only load one cutscene into memory.  Your current cutscene will not load into memory.", 0 );
        }
    }
    if (NOT (CUTSCENE_IS_LOADED( uParam0 )))
    {
        PRE_STREAM_SEAMLESS_CUTSCENE( uParam0 );
        if (iParam1 == 1)
        {
            while ((CUTSCENE_IS_LOADED( uParam0 )) == 0)
            {
                DISPLAYF( "[SP]### Waiting for seamless cutscene to load: {} ###", 1, 1537, uParam0 );
                WAIT( 0 );
            }
        }
    }
    return;
}

/* F_STREAMREQ_MODELNAMES_IS_LOADED */ int sub_24728(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be requested: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to load: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for MODEL_NAME to be removed: {!f1}", 2, 1, -874832622, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_WEAPON_TYPE_IS_LOADED */ int sub_25125(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be requested: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to load: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            DISPLAYF( "[CCB] ### Waiting for WEAPON_TYPE to be removed: {!f1}", 2, 1, 199730165, 513, (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ISEQ_IS_LOADED */ int sub_25527(unknown uParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU4 == 1)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be requested: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 2)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to load: {} ###", 1, 1281, ref uVar3 );
            return 0;
        }
        else if ((uParam0^)[I]._fU4 == 4)
        {
            ISEQ_GET_NAME( 32, ref uVar3, (uParam0^)[I]._fU0 );
            DISPLAYF( "[CCB]### Waiting for the ISEQ to be removed: {} ###", 1, 1281, ref uVar3 );
            return 0;
        };;;
    }
    return 1;
}

/* F_STREAMREQ_ANIM_DICT_IS_LOADED */ int sub_25941(unknown uParam0)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        if ((uParam0^)[I]._fU32 == 1)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be requested: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 2)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to load: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        }
        else if ((uParam0^)[I]._fU32 == 4)
        {
            DISPLAYF( "[CCB]### Waiting for the ANIM_DICT to be removed: {} ###", 1, 1281, ref (uParam0^)[I]._fU0 );
            return 0;
        };;;
    }
    return 1;
}

/* HAS_SAVEFILE_LOADED */ int sub_26574(unknown uParam0)
{
     /* WRITESCRIPTLOG */ sub_456( "rw", "HAS_SAVEFILE_LOADED()", 0 );
    if (IS_ARCADE_MODE_ACTIVE())
    {
        return 0;
    }
    if (HAS_LOAD_JUST_OCCURRED())
    {
        if ((GET_CHECKPOINT_SELECTED() == 1) || (GET_CHECKPOINT_SELECTED() == 0))
        {
            return 0;
        }
        else
        {
            l_U0 = 0;
            CHECKPOINT_STORAGE_LOAD( uParam0, l_U1 );
             /* P_RESTORE_PLAYER_DATA_CHECKPOINT */ sub_5318( uParam0,  /* PLAYER_PED_ID */ sub_826() );
        }
        if (IS_IN_STORY_MODE())
        {
            START_CONTEXT( "LEVEL" );
        }
        return 1;
    }
    return 0;
}

/* P_SAVE_PLAYER_DATA_CHECKPOINT */ void sub_27125(int iParam0, int iParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, int iParam9)
{
    int iVar12;
    int iVar13;
    int iVar14;
    int iVar15;
    int iVar16;

     /* WRITESCRIPTLOG */ sub_456( "GA", "Saving the player data for checkpoint - Start", 0 );
    if ((IS_PED_DEAD( uParam2 )) == 0)
    {
         /* WRITESCRIPTLOG */ sub_456( "SP", "Saving to scripted data...", 0 );
        RESET_CHECKPOINT_ATTEMPTS();
        if (SCRIPT_VAR_EXISTS( "SV_SAVE_CNT" ))
        {
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", (SCRIPT_VAR_GET_INT( "SV_SAVE_CNT" )) + 1 );
        }
        else
        {
            SCRIPT_VAR_ADD_INT( "SV_SAVE_CNT" );
            SCRIPT_VAR_SET_INT( "SV_SAVE_CNT", 1 );
        }
         /* START_NEW_LEVEL_CONTEXT */ sub_8584( iParam1 );
         /* CLOSE_OLD_LEVEL_CONTEXT */ sub_27416( iParam1 );
        iParam0->_fU52 = iParam1;
        iParam0->_fU4 = {uParam3};
        iParam0->_fU16 = uParam6;
        iParam0->_fU20 = uParam7;
        iParam0->_fU24 = uParam8;
        iParam0->_fU28 = GET_PED_HEALTH( uParam2 );
        iParam0->_fU56 = -1569615261;
        iParam0->_fU60 = -1569615261;
        iParam0->_fU64 = -1569615261;
        iParam0->_fU68 = -1569615261;
        iParam0->_fU72 = -1569615261;
        iParam0->_fU76 = 0;
        iParam0->_fU80 = 0;
        iParam0->_fU84 = 0;
        iParam0->_fU88 = 0;
        iParam0->_fU92 = 0;
        iVar12 = GET_WEAPON_FROM_HAND( uParam2, 0, 0 );
        iVar13 = GET_WEAPON_FROM_HAND( uParam2, 1, 0 );
        iVar14 = GET_WEAPON_FROM_HOLSTER( uParam2, 0 );
        iVar15 = GET_WEAPON_FROM_HOLSTER( uParam2, 1 );
        iVar16 = GET_WEAPON_FROM_HOLSTER( uParam2, 2 );
        if (GET_DOES_WEAPON_EXIST( iVar12 ))
        {
            iParam0->_fU68 = GET_WEAPON_TYPE( iVar12 );
            iParam0->_fU88 = (GET_WEAPON_AMMO( iVar12 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar12 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_27893( iVar12, iParam0 + 120, iParam0 + 124 );
        }
        if (GET_DOES_WEAPON_EXIST( iVar13 ))
        {
            iParam0->_fU72 = GET_WEAPON_TYPE( iVar13 );
            iParam0->_fU92 = (GET_WEAPON_AMMO( iVar13 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar13 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_27893( iVar13, iParam0 + 128, iParam0 + 132 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28153( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar13 ) ))
                {
                    iParam0->_fU92 = GET_WEAPON_AMMO_IN_CLIP( iVar12 );
                }
            }
        }
        if ((iVar14 != iVar13) AND ((iVar14 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar14 ))))
        {
            iParam0->_fU56 = GET_WEAPON_TYPE( iVar14 );
            iParam0->_fU76 = (GET_WEAPON_AMMO( iVar14 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar14 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_27893( iVar14, iParam0 + 96, iParam0 + 100 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28153( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28153( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar14 ) ))
                {
                    iParam0->_fU76 = GET_WEAPON_AMMO_IN_CLIP( iVar14 );
                }
            }
        }
        if ((iVar15 != iVar13) AND ((iVar15 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar15 ))))
        {
            iParam0->_fU60 = GET_WEAPON_TYPE( iVar15 );
            iParam0->_fU80 = (GET_WEAPON_AMMO( iVar15 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar15 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_27893( iVar15, iParam0 + 104, iParam0 + 108 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28153( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28153( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28153( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar15 ) ))
                {
                    iParam0->_fU80 = GET_WEAPON_AMMO_IN_CLIP( iVar15 );
                }
            }
        }
        if ((iVar16 != iVar13) AND ((iVar16 != iVar12) AND (GET_DOES_WEAPON_EXIST( iVar16 ))))
        {
            iParam0->_fU64 = GET_WEAPON_TYPE( iVar16 );
            iParam0->_fU84 = (GET_WEAPON_AMMO( iVar16 )) + (GET_WEAPON_AMMO_IN_CLIP( iVar16 ));
             /* P_SAVE_WEAPON_ATTACHMENTS */ sub_27893( iVar16, iParam0 + 112, iParam0 + 116 );
            if (GET_DOES_WEAPON_EXIST( iVar12 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28153( GET_WEAPON_TYPE( iVar12 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar13 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28153( GET_WEAPON_TYPE( iVar13 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar14 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28153( GET_WEAPON_TYPE( iVar14 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
            if (GET_DOES_WEAPON_EXIST( iVar15 ))
            {
                if ( /* F_WEAPONS_SAME_AMMO */ sub_28153( GET_WEAPON_TYPE( iVar15 ), GET_WEAPON_TYPE( iVar16 ) ))
                {
                    iParam0->_fU84 = GET_WEAPON_AMMO_IN_CLIP( iVar16 );
                }
            }
        }
        SAVE_PICKUPS();
        iParam0->_fU32 = GET_ADRENALINE_AMT();
        iParam0->_fU36 = GET_PAYNEKILLER_AMT();
        GET_TIME_OF_DAY( iParam0 + 40, iParam0 + 44 );
        iParam0->_fU140 = IS_TIME_OF_DAY_FROZEN();
        iParam0->_fU136 = GET_PED_SWEAT( uParam2 );
        if (iParam9 == 1)
        {
            if (IS_MAGDEMO() == 0)
            {
                ENABLE_CHECKPOINT_ICON();
            }
        }
        if (iParam1 >= 0)
        {
             /* P_PRINT_CHECKPOINT_DATA */ sub_29733( iParam0 );
            iParam0->_fU0 = 1;
            if (IS_ARCADE_MODE_ACTIVE() == 0)
            {
                CHECKPOINT_STORAGE_SAVE( iParam0, l_U1, iParam0->_fU52 );
                REQUEST_SAVE();
            }
        }
        if (IS_ARCADE_MODE_ACTIVE())
        {
            UPDATE_ARCADE_CHECK_POINT( iParam0->_fU52 );
        }
    }
    else
    {
        SCRIPT_ASSERT( "Error: Player is dead while saving a checkpoint!!!", 0 );
    }
     /* WRITESCRIPTLOG */ sub_456( "GA", "Saving the player data for checkpoint - End", 0 );
    return;
}

/* CLOSE_OLD_LEVEL_CONTEXT */ void sub_27416(int iParam0)
{
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;
    unknown uVar20;
    unknown uVar21;
    unknown uVar22;
    unknown uVar23;
    unknown uVar24;
    unknown uVar25;
    unknown uVar26;
    unknown uVar27;
    unknown uVar28;
    unknown uVar29;
    unknown uVar30;
    unknown uVar31;
    unknown uVar32;
    unknown uVar33;
    unknown uVar34;
    unknown uVar35;

    if (iParam0 >= 0)
    {
        if (GET_NAME_OF_CURRENT_LEVEL( 64, ref uVar20 ))
        {
            uVar3 =  /* GET_MISSION_INDEX_FROM_NAME */ sub_5599( ref uVar20 );
        }
        STRING_FORMAT( 64, ref uVar4, "M_{}_L_{}", 2, 513, uVar3, 513, iParam0 - 1 );
         /* WRITESCRIPTLOG */ sub_456( "TEH", "Ending context", 0 );
         /* WRITESCRIPTLOG */ sub_456( "TEH", "Ending context", 0 );
        END_CONTEXT( ref uVar4 );
    }
    return;
}

/* P_SAVE_WEAPON_ATTACHMENTS */ void sub_27893(unknown uParam0, unknown uParam1, unknown uParam2)
{
    int I;

    for ( I = 0; I < 26; I++ )
    {
        CLEAR_BIT( uParam1, I );
        CLEAR_BIT( uParam2, I );
        if (IS_WEAPON_ATTACHMENT_ENABLED( uParam0, I ))
        {
            SET_BIT( uParam1, I );
            if (IS_WEAPON_ATTACHMENT_TOGGLED( uParam0, I ))
            {
                SET_BIT( uParam2, I );
            }
        }
    }
    return;
}

/* F_WEAPONS_SAME_AMMO */ void sub_28153(int iParam0, int iParam1)
{
    int Result;

    Result = 0;
    if ((iParam0 == -612753081) || ((iParam0 == 68019059) || ((iParam0 == 456708483) || ((iParam0 == -862236369) || (iParam0 == 406496141)))))
    {
        if ((iParam1 == -612753081) || ((iParam1 == 68019059) || ((iParam1 == 456708483) || ((iParam1 == -862236369) || (iParam1 == 406496141)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 724901397) || ((iParam0 == 57534114) || ((iParam0 == 1308526797) || ((iParam0 == -1074756423) || (iParam0 == -1013714740)))))
    {
        if ((iParam1 == 724901397) || ((iParam1 == 57534114) || ((iParam1 == 1308526797) || ((iParam1 == -1074756423) || (iParam1 == -1013714740)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 514118749) || ((iParam0 == -184942895) || ((iParam0 == -168327769) || ((iParam0 == 1845102363) || (iParam0 == 434544317)))))
    {
        if ((iParam1 == 514118749) || ((iParam1 == -184942895) || ((iParam1 == -168327769) || ((iParam1 == 1845102363) || (iParam1 == 434544317)))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -110877124) || (iParam0 == 319712764))
    {
        if ((iParam1 == -110877124) || (iParam1 == 319712764))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == -1464892298) || ((iParam0 == 1194438308) || ((iParam0 == -1404433099) || ((iParam0 == 1478009203) || ((iParam0 == -691403429) || (iParam0 == 1964270085))))))
    {
        if ((iParam1 == -1464892298) || ((iParam1 == 1194438308) || ((iParam1 == -1404433099) || ((iParam1 == 1478009203) || ((iParam1 == -691403429) || (iParam1 == 1964270085))))))
        {
            Result = 1;
        }
    }
    else if ((iParam0 == 10648147) || (iParam0 == 1224272620))
    {
        if ((iParam1 == 10648147) || (iParam1 == 1224272620))
        {
            Result = 1;
        }
    };;;;;;
    return Result;
}

/* P_PRINT_CHECKPOINT_DATA */ void sub_29733(int iParam0)
{
     /* WRITE_STRING */ sub_7419( "CHECKPOINT DATA" );
    PRINTSTRING( "---Position: " );
     /* WRITE_VECTOR */ sub_29821( iParam0->_fU4 );
    PRINTSTRING( "---Heading: " );
     /* WRITE_FLOAT */ sub_29898( iParam0->_fU16 );
    PRINTSTRING( "---fRelativeGameCamHeading: " );
     /* WRITE_FLOAT */ sub_29898( iParam0->_fU20 );
    PRINTSTRING( "---fRelativeGameCamPitch: " );
     /* WRITE_FLOAT */ sub_29898( iParam0->_fU24 );
    PRINTSTRING( "---nHealth: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU28 );
    PRINTSTRING( "---wtRightHolster: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU56 );
    PRINTSTRING( "---wtLeftHolster: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU60 );
    PRINTSTRING( "---wtRifleHolster: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU64 );
    PRINTSTRING( "---wtRightHand: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU68 );
    PRINTSTRING( "---wtLeftHand: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU72 );
    PRINTSTRING( "---nWeaponRightHolsterAmmo: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU76 );
    PRINTSTRING( "---nWeaponLeftHolsterAmmo: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU80 );
    PRINTSTRING( "---nWeaponRifleHolsterAmmo: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU84 );
    PRINTSTRING( "---nWeaponRightHandAmmo: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU88 );
    PRINTSTRING( "---nWeaponLeftHandAmmo: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU92 );
    PRINTSTRING( "---fAdrenaline: " );
     /* WRITE_FLOAT */ sub_29898( iParam0->_fU32 );
    PRINTSTRING( "---nPayneKillers: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU36 );
    PRINTSTRING( "---nHour: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU40 );
    PRINTSTRING( "---nMinute: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU44 );
    PRINTSTRING( "---fSweatAmount: " );
     /* WRITE_FLOAT */ sub_29898( iParam0->_fU136 );
    PRINTSTRING( "---bTimeFrozen: " );
     /* WRITE_BOOL */ sub_30768( iParam0->_fU140 );
    PRINTSTRING( "---checkpointIndex: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU52 );
     /* WRITE_STRING */ sub_7419( "---nRightHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU96 );
     /* WRITE_STRING */ sub_7419( "---nRightHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU100 );
     /* WRITE_STRING */ sub_7419( "---nLeftHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU104 );
     /* WRITE_STRING */ sub_7419( "---nLeftHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU108 );
     /* WRITE_STRING */ sub_7419( "---nRifleHolsterAttachmentEnabled: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU112 );
     /* WRITE_STRING */ sub_7419( "---nRifleHolsterAttachmentToggled: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU116 );
     /* WRITE_STRING */ sub_7419( "---nRightHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU120 );
     /* WRITE_STRING */ sub_7419( "---nRightHandAttachmentToggled: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU124 );
     /* WRITE_STRING */ sub_7419( "---nLeftHandAttachmentEnabled: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU128 );
     /* WRITE_STRING */ sub_7419( "---nLeftHandAttachmentToggled: " );
     /* WRITE_INT */ sub_30067( iParam0->_fU132 );
    PRINTSTRING( "[CHECKPOINT DATA SIZE]: " );
     /* WRITE_INT */ sub_30067( l_U1 );
    PRINTSTRING( "[CHECKPOINT DATA REF SIZE]: " );
     /* WRITE_INT */ sub_30067( 144 );
    return;
}

/* WRITE_VECTOR */ void sub_29821(unknown uParam0, unknown uParam1, unknown uParam2)
{
    PRINTVECTOR( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_FLOAT */ void sub_29898(unknown uParam0)
{
    PRINTFLOAT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_INT */ void sub_30067(unknown uParam0)
{
    PRINTINT( uParam0 );
    PRINTNL();
    return;
}

/* WRITE_BOOL */ void sub_30768(boolean bParam0)
{
    if (bParam0)
    {
        PRINTSTRING( "TRUE" );
    }
    else
    {
        PRINTSTRING( "FALSE" );
    }
    PRINTNL();
    return;
}

/* F_SETUP_HALLWAY_UFE */ int sub_31802()
{
    char[64] cVar2;
    unknown uVar18;

    switch (l_U290)
    {
        case 1:
         /* WRITESCRIPTLOG */ sub_456( "AT", "e_DH_SpawnUFE = ENTITY_STATE_INIT", 0 );
        l_U291 = 0;
         /* P_SETUP_AI_GROUP */ sub_31941( ref l_U298, 1056964608, 0 );
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF( l_U298._fU0, 1 );
        l_U290 = 2;
         /* WRITESCRIPTLOG */ sub_456( "AT", "e_DH_SpawnUFE = ENTITY_STATE_CREATING", 0 );
        break;
        case 2:
        StrCopy( ref cVar2, "Creating pi_DH_UFE[", 64 );
        ConcatString(ref cVar2, l_U291, 64);
        ConcatString(ref cVar2, "]", 64);
        PRINTSTRING( ref cVar2 );
        PRINTNL();
        l_U218[l_U291] =  /* CREATEPED */ sub_32469( ref l_U224[l_U291] );
         /* P_QUICK_ADD_PED_TO_GROUP */ sub_33445( l_U218[l_U291], ref l_U298 );
        uVar18 =  /* F_GIVEPEDWEAPON */ sub_7810( l_U218[l_U291], l_U292[l_U291], 25000, 0, 0 );
        if (NOT (IS_PED_DEAD( l_U218[l_U291] )))
        {
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218[l_U291], 1 );
            SET_PED_AI_TEMPLATE( l_U218[l_U291], "AIT_EXPERT" );
            if (l_U291 < 3)
            {
                SET_ROOM_FOR_PED_BY_NAME( l_U218[l_U291], ref g_U2254 );
            }
            else
            {
                SET_ROOM_FOR_PED_BY_NAME( l_U218[l_U291], "ap_lckhall" );
            }
            SET_PED_COMBAT_RANGE_MAX( l_U218[l_U291], 15.00000000 );
            SET_PED_COMBAT_RANGE_MIN( l_U218[l_U291], 1.00000000 );
            SET_PED_CAN_AVOID_DEATH_ZONES( l_U218[l_U291], 0 );
        }
         /* P_TETHERPED */ sub_34097( ref l_U348, l_U218[l_U291], 1 );
         /* P_TETHERPED */ sub_34097( ref l_U349, l_U218[l_U291], 1 );
         /* P_TETHERPED */ sub_34097( ref l_U350, l_U218[l_U291], 1 );
        l_U291++;
        if (l_U291 >= l_U218)
        {
            l_U290 = 3;
             /* WRITESCRIPTLOG */ sub_456( "AT", "e_DH_SpawnUFE = ENTITY_STATE_POST_CREATE_SETUP", 0 );
        }
        break;
        case 3:
         /* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ sub_34339( ref l_U218, "Hallway" );
         /* P_DEACTIVATEPEDARRAY */ sub_34473( ref l_U218 );
        l_U290 = 4;
         /* WRITESCRIPTLOG */ sub_456( "AT", "e_DH_SpawnUFE = ENTITY_STATE_COMPLETE", 0 );
        break;
        case 4:
        return 1;
        break;
    }
    return 0;
}

/* P_SETUP_AI_GROUP */ void sub_31941(int iParam0, unknown uParam1, boolean bParam2)
{
    iParam0->_fU4 = uParam1;
    iParam0->_fU0 = CREATE_GROUP( 3, 1 );
    if (bParam2)
    {
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP TOLD TO WAIT FOR GROUP TO EXIST ###" );
        PRINTNL();
        while (NOT (DOES_GROUP_EXIST( iParam0->_fU0 )))
        {
            WAIT( 0 );
            PRINTSTRING( "[MSWW]### GROUP ###" );
            PRINTNL();
        }
        PRINTSTRING( "[MSWW]### P_SETUP_AI_GROUP created group with ID: " );
        PRINTINT( iParam0->_fU0 );
        PRINTNL();
    }
    SET_GROUP_RATIO_FIRING_AT_VISIBLE( iParam0->_fU0, iParam0->_fU4 );
    SET_GROUP_RATIO_FIRING_AT_INVISIBLE( iParam0->_fU0, iParam0->_fU4 );
    if (iParam0->_fU8)
    {
        SET_GROUP_FORMATION( iParam0->_fU0, iParam0->_fU12 );
        SET_GROUP_FORMATION_SPACING( iParam0->_fU0, iParam0->_fU16 );
        SET_GROUP_FORMATION_MAX_MOVE_SPEED( iParam0->_fU0, iParam0->_fU20 );
    }
    return;
}

/* CREATEPED */ void sub_32469(int iParam0)
{
    int iVar3;

    iVar3 = 0;
    if (iParam0->_fU16 == 0)
    {
        if (iParam0->_fU20 != 0)
        {
            iVar3 = GET_SCENE_PED_MODEL( iParam0->_fU20 );
        }
    }
    else
    {
        iVar3 = iParam0->_fU16;
    }
    if ((HAS_MODEL_LOADED( iVar3 )) == 0)
    {
        SCRIPT_ASSERT( "Error: The model you are trying to create a ped with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_32651( iParam0->_fU16, 1 );
    }
    iParam0->_fU40 = CREATE_PED( iParam0->_fU24, iParam0->_fU16, iParam0->_fU0, iParam0->_fU12, 1, iParam0->_fU48 );
    if (((IS_PED_DEAD( iParam0->_fU40 )) == 0) AND ((DOES_PED_EXIST( iParam0->_fU40 )) == 1))
    {
        if (iParam0->_fU20 != 0)
        {
            SET_PERSISTENT_PED_VARIATION_ENUM( iParam0->_fU40, iParam0->_fU20 );
        }
        SET_PED_RELATIONSHIP_GROUP( iParam0->_fU40, iParam0->_fU28 );
        SET_PED_RELATIONSHIP( iParam0->_fU40, iParam0->_fU36, iParam0->_fU32 );
        SET_LOAD_COLLISION_FOR_PED_FLAG( iParam0->_fU40, 1 );
        SET_PED_COORDS_NO_OFFSET( iParam0->_fU40, "[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( iParam0->_fU40 ) );
        SET_PED_HEADING( iParam0->_fU40, iParam0->_fU12 );
        iParam0->_fU44 = 1;
    }
    else
    {
        SCRIPT_ASSERT( "Error: The ped you created doesn't exist or is dead!", 0 );
    }
     /* SETPEDDEFAULTSTATS */ sub_33200( iParam0->_fU40 );
     /* SETPEDDEFAULTTEMPLATE */ sub_33301( iParam0->_fU40 );
    return iParam0->_fU40;
}

/* LOADMODEL */ void sub_32651(unknown uParam0, boolean bParam1)
{
    if ((IS_MODEL_IN_CDIMAGE( uParam0 )) == 0)
    {
         /* WRITE_STRING */ sub_7419( "[SP]### ERROR! (LoadModel) Trying to load a model that isn't in the img! ###" );
    }
    REQUEST_MODEL( uParam0 );
    "[doubled result, dropped if not asigned]";
    if (bParam1)
    {
        while ((HAS_MODEL_LOADED( uParam0 )) == 0)
        {
            DISPLAYF( "[SP]### Waiting to load model: {!f1} : {1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return;
}

/* SETPEDDEFAULTSTATS */ void sub_33200(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_HEALTH( uParam0, 200, 0 );
        SET_PED_ACCURACY( uParam0, -729479261 );
    }
    return;
}

/* SETPEDDEFAULTTEMPLATE */ void sub_33301(unknown uParam0)
{
    if (((IS_PED_DEAD( uParam0 )) == 0) AND ((DOES_PED_EXIST( uParam0 )) == 1))
    {
        SET_PED_AI_TEMPLATE( uParam0, "AIT_DEFAULT_GENERIC" );
    }
    return;
}

/* P_QUICK_ADD_PED_TO_GROUP */ void sub_33445(unknown uParam0, int iParam1)
{
    int iVar4;
    unknown uVar5;

    if ((DOES_GROUP_EXIST( iParam1->_fU0 )) == 0)
    {
         /* WRITE_STRING */ sub_7419( "[SP]### Warning!!! Group does not exist. Creating new group specified attributes. ###" );
        if (iParam1->_fU4 > 0)
        {
             /* P_SETUP_AI_GROUP */ sub_31941( iParam1, iParam1->_fU4, 0 );
        }
        else
        {
             /* P_SETUP_AI_GROUP */ sub_31941( iParam1, 1056964608, 0 );
        }
    }
    else
    {
        PRINTSTRING( "[MSWW]### P_QUICK_ADD_PED_TO_GROUP adding ped to group with ID: " );
        PRINTINT( iParam1->_fU0 );
        PRINTNL();
    }
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        GET_GROUP_SIZE( iParam1->_fU0, ref iVar4, ref uVar5 );
        if (iVar4 == 0)
        {
            SET_PED_AS_GROUP_LEADER( uParam0, iParam1->_fU0 );
        }
        else
        {
            SET_PED_AS_GROUP_MEMBER( uParam0, iParam1->_fU0 );
        }
        SET_PED_NEVER_LEAVES_GROUP( uParam0, 1 );
    }
    return;
}

/* P_TETHERPED */ void sub_34097(int iParam0, unknown uParam1, unknown uParam2)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_ADD_BOX( uParam1, iParam0->_fU0 );
        SET_PED_TETHERING_OPTION( uParam1, uParam2 );
    }
    return;
}

/* GIVE_DEBUG_NAMES_TO_PEDS_IN_ARRAY */ void sub_34339(unknown uParam0, unknown uParam1)
{
    int I;
    char[32] cVar5;

    for ( I = 0; I < (uParam0^); I++ )
    {
        if (DOES_PED_EXIST( (uParam0^)[I] ))
        {
            StrCopy( ref cVar5, uParam1, 32 );
            ConcatString(ref cVar5, " ", 32);
            ConcatString(ref cVar5, I, 32);
            SET_PED_NAME_DEBUG( (uParam0^)[I], ref cVar5 );
        }
    }
    return;
}

/* P_DEACTIVATEPEDARRAY */ void sub_34473(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_DEACTIVATEPED */ sub_34527( (uParam0^)[I] );
    }
    return;
}

/* P_DEACTIVATEPED */ void sub_34527(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 1 );
        SET_PED_VISIBLE( uParam0, 0 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 0 );
        FREEZE_PED_POSITION( uParam0, 1 );
        SET_PED_COLLISION( uParam0, 0 );
        SET_PED_PROOFS( uParam0, 1, 1, 1, 1, 1 );
    }
    return;
}

/* P_CREATE_PLACEMENTS */ void sub_35022()
{
     /* WRITESCRIPTLOG */ sub_456( "AT", "P_CREATE_PLACEMENTS", 0 );
    l_U513[0] =  /* CREATEPLACEMENT */ sub_35131( -4072149, 12.02000000, -152.36000000, 5.18700000, 0.00000000, 0.00000000, 0.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U513[0] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U513[0], ref g_U2254 );
    }
    l_U513[2] =  /* CREATEPLACEMENT */ sub_35131( -4072149, -11.97000000, -137.89000000, 5.06000000, 0.00000000, 0.00000000, 30.00000000, 1, 0, 0, 1119092736 );
    if (DOES_PLACEMENT_EXIST( l_U513[2] ))
    {
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( l_U513[2], ref g_U2262 );
    }
     /* P_CREATE_S_AIR_GG_RG_03 */ sub_35445();
    return;
}

/* CREATEPLACEMENT */ void sub_35131(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, int iParam8, unknown uParam9, unknown uParam10)
{
    unknown Result;

    Result = CREATE_PLACEMENT_ROTATE( uParam0, uParam1, uParam4, uParam7, 0, uParam9, uParam10 );
    if (iParam8 == 1)
    {
        while ((DOES_PLACEMENT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for a placement to exist: {} ###", 1, 513, uParam0 );
            WAIT( 0 );
        }
    }
    return Result;
}

/* P_CREATE_S_AIR_GG_RG_03 */ void sub_35445()
{
     /* WRITESCRIPTLOG */ sub_456( "CO", "P_CREATE_S_AIR_GG_RG_03", 0 );
     /* P_CREATECOLLECTIBLESTRUCT */ sub_35579( ref g_U751, g_U825, -1097784413, 21328399, 0.17000000, -135.58000000, 4.48000000, 1.50000000, 0.00000000, 1.00000000, "ap_lckrm" );
     /* P_CREATECOLLECTIBLE */ sub_35736( ref g_U751 );
    return;
}

/* P_CREATECOLLECTIBLESTRUCT */ void sub_35579(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10)
{
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        iParam0->_fU4 = uParam1;
        iParam0->_fU8 = uParam2;
        iParam0->_fU12 = uParam3;
        iParam0->_fU16 = {uParam4};
        iParam0->_fU28 = {uParam7};
        StrCopy( ref iParam0->_fU40, uParam10, 32 );
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_456( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* P_CREATECOLLECTIBLE */ void sub_35736(int iParam0)
{
     /* WRITESCRIPTLOG */ sub_456( "CO", "P_CreateCollectible", 0 );
    if (NOT IS_ARCADE_MODE_ACTIVE())
    {
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_35819( iParam0->_fU12 )) == 1)
        {
             /* WRITESCRIPTLOG */ sub_456( "CO", "HAS BEEN COLLECTED.", 0 );
        }
        else
        {
             /* WRITESCRIPTLOG */ sub_456( "CO", "has never been collected.", 0 );
        }
        if (( /* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ sub_35819( iParam0->_fU12 )) == 0)
        {
             /* CLEANPLACEMENT */ sub_3561( iParam0->_fU0 );
            iParam0->_fU0 =  /* CREATEPLACEMENT */ sub_35131( iParam0->_fU8, iParam0->_fU16, iParam0->_fU28, 1, 0, 0, 1119092736 );
            if (NOT (IS_STRING_NULL( iParam0 + 40 )))
            {
                if ((DOES_PLACEMENT_EXIST( iParam0->_fU0 )) == 1)
                {
                     /* WRITESCRIPTLOG */ sub_456( "CO", "Added collectible to interior", 0 );
                    ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME( iParam0->_fU0, iParam0 + 40 );
                }
            }
        }
    }
    else
    {
         /* WRITESCRIPTLOG */ sub_456( "CO", "NO GOLDEN GUNS FOR ARCADE", 0 );
    }
    return;
}

/* F_HAS_COLLECTIBLE_BEEN_COLLECTED */ int sub_35819(unknown uParam0)
{
    unknown uVar3;
    float fVar4;

    if (IS_COLLECTABLE_ENABLED() == 0)
    {
        return 1;
    }
    uVar3 = uParam0;
    fVar4 = STAT_HASH_GET_FLOAT( uVar3 );
    if (ARE_SP_STATS_LOADED() == 1)
    {
        if ((STAT_HASH_EXISTS( uVar3 )) == 1)
        {
            if (fVar4 > 0.00000000)
            {
                return 1;
            }
        }
    }
    return 0;
}

/* CUTSYS_DEFAULT_PRECUTSCENESETUP */ int sub_36283()
{
    return 1;
}

/* P_MID_02_REGISTER */ void sub_36336()
{
    unknown uVar2;

     /* WRITESCRIPTLOG */ sub_456( "AT", "P_MID_02_REGISTER", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
    {
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_826(), g_U2014[2], g_U2129[2] );
        CUTSCENE_REGISTER_SET_PLAYER_IN_COVER( "GenCover", "11F0ECBE_C5841A20_Corner2", 1, 0 );
        CUTSCENE_SET_COVER_CAMERA_DIRECTION( g_U2168[2], g_U2207[2] );
        uVar2 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_36515();
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE( uVar2, "W_PI_Clt1911_Aa_H", 0 );
        }
        ISEQ_REGISTER_ENTITY( -527946023, "Max",  /* PLAYER_PED_ID */ sub_826(), 0 );
        CUTSCENE_REGISTER_ISEQ( -527946023 );
    }
    if (NOT (IS_PED_DEAD( l_U218[0] )))
    {
        ISEQ_REGISTER_ENTITY( 1888524188, "GMED0", l_U218[0], 0 );
        CUTSCENE_REGISTER_ISEQ( 1888524188 );
    }
    REGISTER_HIDE_ENTITY_AT_POSITION( l_U394._fU0, l_U394._fU4 );
    REGISTER_HIDE_ENTITY_AT_POSITION( l_U401._fU0, l_U401._fU4 );
    return;
}

/* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ int sub_36515()
{
    unknown Result;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )) == 0)
    {
        Result = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( Result )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_36619( Result )) == 1)
            {
                return Result;
            }
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            return uVar3;
        }
        uVar4 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_826(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar4 )) == 1)
        {
            return uVar4;
        }
        uVar5 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_826(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            return uVar5;
        }
    }
    return 0;
}

/* IS_WEAPON_SINGLE_HANDED */ int sub_36619(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == 1194438308) || ((iVar3 == -76667461) || ((iVar3 == -1404433099) || ((iVar3 == 1131969637) || ((iVar3 == -691403429) || ((iVar3 == 1845102363) || ((iVar3 == 150541352) || ((iVar3 == -820634585) || ((iVar3 == -612753081) || ((iVar3 == 811797242) || ((iVar3 == 68019059) || ((iVar3 == -1464892298) || ((iVar3 == 456708483) || ((iVar3 == -862236369) || (iVar3 == 406496141)))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* P_MID_02_HANDLECUTSCENE */ void sub_37164()
{
    unknown uVar2;

    if (l_U643._fU52)
    {
         /* P_PLAYER_HOLSTER_WEAPONS */ sub_37220( ref l_U729, 1, 1 );
         /* P_SET_TWO_HANDED_WEAPON_VISIBLE */ sub_38374( l_U729, 0 );
        uVar2 =  /* F_GET_SINGLE_HANDED_WEAPON_FROM_PLAYER */ sub_36515();
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_826(), uVar2, 0, 1 );
        }
    }
    return;
}

/* P_PLAYER_HOLSTER_WEAPONS */ void sub_37220(int iParam0, int iParam1, unknown uParam2)
{
    unknown uVar5;
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;
    unknown uVar9;
    unknown uVar10;
    unknown uVar11;
    unknown uVar12;
    unknown uVar13;

     /* RESET_WEAPON_CONFIG */ sub_37259( iParam0 );
    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )) == 0)
    {
        uVar5 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 0, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar5 )) == 1)
        {
            if (( /* IS_WEAPON_SINGLE_HANDED */ sub_36619( uVar5 )) == 1)
            {
                ref iParam0->_fU0->_fU0 = uVar5;
                ref iParam0->_fU0->_fU4 = GET_WEAPON_TYPE( uVar5 );
            }
            else if (( /* IS_WEAPON_TWO_HANDED */ sub_37504( uVar5 )) == 1)
            {
                ref iParam0->_fU24->_fU0 = uVar5;
                ref iParam0->_fU24->_fU4 = GET_WEAPON_TYPE( uVar5 );
            }
        }
        uVar6 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar6 )) == 1)
        {
            ref iParam0->_fU12->_fU0 = uVar6;
            ref iParam0->_fU12->_fU4 = GET_WEAPON_TYPE( uVar6 );
        }
        uVar7 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_826(), 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar7 )) == 1)
        {
            ref iParam0->_fU36->_fU0 = uVar7;
            ref iParam0->_fU36->_fU4 = GET_WEAPON_TYPE( uVar7 );
        }
        uVar8 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_826(), 1 );
        if ((GET_DOES_WEAPON_EXIST( uVar8 )) == 1)
        {
            ref iParam0->_fU48->_fU0 = uVar8;
            ref iParam0->_fU48->_fU4 = GET_WEAPON_TYPE( uVar8 );
        }
        uVar9 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_826(), 2 );
        if ((GET_DOES_WEAPON_EXIST( uVar9 )) == 1)
        {
            ref iParam0->_fU60->_fU0 = uVar9;
            ref iParam0->_fU60->_fU4 = GET_WEAPON_TYPE( uVar9 );
        }
    }
    if (iParam1 == 0)
    {
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )) == 0)
        {
            uVar10 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar10 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_826(), 0, 0, uParam2 );
            }
            uVar11 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 1, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar11 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_826(), 0, 1, uParam2 );
            }
        }
    }
    else if (iParam1 == 1)
    {
        if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )) == 0)
        {
            uVar12 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 0, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar12 )) == 1)
            {
                if (( /* IS_WEAPON_TWO_HANDED */ sub_37504( uVar12 )) == 1)
                {
                    SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_826(), 0, 0, uParam2 );
                }
            }
            uVar13 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 1, 0 );
            if ((GET_DOES_WEAPON_EXIST( uVar13 )) == 1)
            {
                SELECT_WEAPON_TO_HAND(  /* PLAYER_PED_ID */ sub_826(), 0, 1, uParam2 );
            }
        }
    }
    return;
}

/* RESET_WEAPON_CONFIG */ void sub_37259(int iParam0)
{
    ref iParam0->_fU0->_fU0 = 0;
    ref iParam0->_fU0->_fU4 = 0;
    ref iParam0->_fU12->_fU0 = 0;
    ref iParam0->_fU12->_fU4 = 0;
    ref iParam0->_fU24->_fU0 = 0;
    ref iParam0->_fU24->_fU4 = 0;
    ref iParam0->_fU36->_fU0 = 0;
    ref iParam0->_fU36->_fU4 = 0;
    ref iParam0->_fU48->_fU0 = 0;
    ref iParam0->_fU48->_fU4 = 0;
    ref iParam0->_fU60->_fU0 = 0;
    ref iParam0->_fU60->_fU4 = 0;
    return;
}

/* IS_WEAPON_TWO_HANDED */ int sub_37504(unknown uParam0)
{
    int iVar3;

    if ((GET_DOES_WEAPON_EXIST( uParam0 )) == 1)
    {
        iVar3 = GET_WEAPON_TYPE( uParam0 );
        if ((iVar3 == -2075384407) || ((iVar3 == 10648147) || ((iVar3 == 1224272620) || ((iVar3 == 1478009203) || ((iVar3 == 1964270085) || ((iVar3 == -110877124) || ((iVar3 == 427207702) || ((iVar3 == 319712764) || ((iVar3 == 514118749) || ((iVar3 == -184942895) || ((iVar3 == -168327769) || ((iVar3 == 434544317) || ((iVar3 == -1659006841) || ((iVar3 == 930042831) || ((iVar3 == 1001413062) || ((iVar3 == 377623895) || ((iVar3 == -1312131151) || ((iVar3 == -1787162676) || ((iVar3 == 724901397) || ((iVar3 == 57534114) || ((iVar3 == 840671040) || ((iVar3 == 1308526797) || ((iVar3 == -1074756423) || ((iVar3 == 1992962408) || (iVar3 == -1013714740)))))))))))))))))))))))))
        {
            return 1;
        }
    }
    return 0;
}

/* P_SET_TWO_HANDED_WEAPON_VISIBLE */ void sub_38374(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18)
{
    unknown uVar21;
    unknown uVar22;

    uVar21 = uParam0._fU24._fU0;
    if ((GET_DOES_WEAPON_EXIST( uVar21 )) == 1)
    {
        SET_WEAPON_VISIBLE( uVar21, uParam18 );
    }
    uVar22 = uParam0._fU60._fU0;
    if ((GET_DOES_WEAPON_EXIST( uVar22 )) == 1)
    {
        SET_WEAPON_VISIBLE( uVar22, uParam18 );
    }
    return;
}

/* P_MID_02_POST_CUTSCENE */ int sub_38553()
{
     /* WRITESCRIPTLOG */ sub_456( "SP", "P_MID_02_POST_CUTSCENE", 0 );
     /* P_SET_TWO_HANDED_WEAPON_VISIBLE */ sub_38374( l_U729, 1 );
    return 1;
}

/* P_PREPARE_MID_02_FIN_BLENDOUT */ void sub_38645()
{
    int I;

     /* WRITESCRIPTLOG */ sub_456( "AT", "P_PREPARE_MID_02_FIN_BLENDOUT", 0 );
     /* P_CLOSEDOOR */ sub_38735( ref l_U394, 1 );
     /* P_CLOSEDOOR */ sub_38735( ref l_U401, 1 );
     /* P_SETDOORLOCKED */ sub_12971( ref l_U394, 1 );
     /* P_SETDOORLOCKED */ sub_12971( ref l_U401, 1 );
     /* NIS_PRE_SETUP */ sub_38908( 1, 0, 0, 0 );
     /* P_ACTIVATEPEDARRAY */ sub_39087( ref l_U218 );
    if (NOT (ISEQ_QUERY_STATE( 1888524188, 3 )))
    {
        if (NOT (IS_PED_DEAD( l_U218[0] )))
        {
            ISEQ_REGISTER_ENTITY( 1888524188, "GMED0", l_U218[0], 0 );
        }
        ISEQ_START( 1888524188 );
    }
    for ( I = 0; I < l_U218; I++ )
    {
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218[I], 0 );
    }
    if (NOT (ISEQ_QUERY_STATE( -527946023, 3 )))
    {
        ISEQ_REGISTER_ENTITY( -527946023, "Max",  /* PLAYER_PED_ID */ sub_826(), 0 );
        SNAP_PLAYER_TO_COVERPOINT(  /* PLAYER_ID */ sub_864(), "GenCover", "11F0ECBE_C5841A20_Corner2", 0 );
         /* TELEPORTPED */ sub_39516(  /* PLAYER_PED_ID */ sub_826(), g_U2014[2], g_U2129[2] );
        SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2168[2], 1065353216, 0 );
        SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2207[2], 1065353216, 0 );
        ISEQ_START( -527946023 );
    }
    CAMERA_PLAY_ANIMATED( "LEVEL_S_FIN_CP_02", "B_OUT_MID_02_FIN_PSTL_CAM", 0, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0, 0 );
    if (NOT AUDIO_IS_MUSIC_PLAYING())
    {
         /* WRITESCRIPTLOG */ sub_456( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_1 mood. Fade in 0 sec", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_1", "FINALE_01_1", 0.00000000, 0, 4000, -1082130432, 0 );
    }
    AUDIO_MUSIC_REQUEST_ONESHOT( "FINALE_ONESHOT_02", 0 );
    return;
}

/* P_CLOSEDOOR */ void sub_38735(int iParam0, int iParam1)
{
    if (( /* F_DOESDOOREXIST */ sub_12624( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12708( iParam0 );
    }
    if (iParam1 == 1)
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 1, 0.00000000 );
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    else
    {
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, 0, 0.00000000 );
    }
    return;
}

/* NIS_PRE_SETUP */ void sub_38908(int iParam0, int iParam1, unknown uParam2, boolean bParam3)
{
    END_POSTFX_BLENDER( 12, 0 );
    if (bParam3)
    {
        STOP_ALL_IMAGEFX( 0 );
    }
    SET_WIDESCREEN_BORDERS( 1, 500 );
    DISPLAY_HUD( 0 );
    if (iParam0 == 1)
    {
        if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
        {
            SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_864(), 0, uParam2 );
            SET_PED_DUCKING(  /* PLAYER_PED_ID */ sub_826(), 0 );
            if (iParam1 == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATELY(  /* PLAYER_PED_ID */ sub_826() );
            }
            SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_826(), 1 );
        }
    }
    DEACTIVATE_BULLET_TIME( 1, 0 );
    return;
}

/* P_ACTIVATEPEDARRAY */ void sub_39087(unknown uParam0)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_ACTIVATEPED */ sub_39139( (uParam0^)[I] );
    }
    return;
}

/* P_ACTIVATEPED */ void sub_39139(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_FREEZE_PROCESSING( uParam0, 0 );
        SET_PED_VISIBLE( uParam0, 1 );
        SET_PED_VISIBLE_DURING_SEQUENCE( uParam0, 1 );
        FREEZE_PED_POSITION( uParam0, 0 );
        SET_PED_COLLISION( uParam0, 1 );
        SET_PED_PROOFS( uParam0, 0, 0, 0, 0, 0 );
    }
    return;
}

/* TELEPORTPED */ void sub_39516(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        SET_PED_COORDS( uParam0, uParam1, 1 );
        SET_PED_HEADING( uParam0, uParam4 );
    }
    return;
}

/* F_HANDLE_MID_02_FIN_BLENDOUT */ int sub_39922()
{
    if (l_U643._fU52)
    {
         /* P_CREATE_AND_START_TIMER */ sub_39984( ref l_U544, 1000 );
        DO_SCREEN_FADE_IN( 0 );
    }
    if (CAMERA_ANIMATED_CURRENT_TIME() > l_U217)
    {
        if (NOT l_U215)
        {
             /* WRITESCRIPTLOG */ sub_456( "AT", "Stopping animated blendout camera.", 0 );
            SET_GAMEPLAY_CAM_RELATIVE_HEADING( g_U2168[2], 1065353216, 0 );
            SET_GAMEPLAY_CAM_RELATIVE_PITCH( g_U2207[2], 1065353216, 0 );
            CAMERA_ANIMATED_STOP( l_U216, 1 );
            l_U215 = 1;
        }
    }
    if ((l_U215) AND ((ISEQ_QUERY_ENTITY_STATE( -527946023, "Max", 6 )) || (ISEQ_QUERY_ENTITY_STATE( -527946023, "Max", 5 ))))
    {
         /* WRITESCRIPTLOG */ sub_456( "AT", "Blendout returning as finished!", 0 );
        return 1;
    }
    return 0;
}

/* P_CREATE_AND_START_TIMER */ void sub_39984(unknown uParam0, unknown uParam1)
{
     /* CREATETIMER */ sub_1721( uParam0, uParam1, 1, 0 );
     /* STARTTIMER */ sub_1871( uParam0 );
    return;
}

/* CUTSYS_CREATECUTSCENEWITHBLENDOUT */ void sub_40305(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9)
{
     /* WRITESCRIPTLOG */ sub_456( "MSWW", "CutSys_CreateCutsceneWithBlendOut", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_40529( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam9, 1, uParam6, uParam7, 0, 40426, 40476, uParam8 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDIN */ void sub_40426()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDIN */ int sub_40476()
{
    return 1;
}

/* CUTSYS_PRIVATE_CREATECUTSCENE */ void sub_40529(int iParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13)
{
    iParam0->_fU0 = uParam1;
    iParam0->_fU8 = uParam2;
    iParam0->_fU12 = uParam3;
    iParam0->_fU16 = uParam4;
    iParam0->_fU20 = uParam5;
    iParam0->_fU24 = uParam6;
    iParam0->_fU28 = uParam7;
    iParam0->_fU32 = uParam8;
    iParam0->_fU36 = uParam9;
    iParam0->_fU40 = uParam10;
    iParam0->_fU44 = uParam11;
    iParam0->_fU48 = uParam12;
    iParam0->_fU52 = 1;
    iParam0->_fU56 = uParam13;
    iParam0->_fU60 = 1;
    iParam0->_fU64 = 1;
    iParam0->_fU68 = 0;
    iParam0->_fU72 = 0;
    iParam0->_fU76 = "Pants";
    iParam0->_fU80 = "Pants";
    iParam0->_fU84 = {0, 0, 0};
    iParam0->_fU100 = 1;
    iParam0->_fU104 = 1;
    return (iParam0^);
}

/* CUTSYS_SETCUTSCENELOADINTERIORONSKIP */ void sub_40852(int iParam0, unknown uParam1, unknown uParam2)
{
    iParam0->_fU68 = 1;
    iParam0->_fU72 = 1;
    iParam0->_fU76 = uParam1;
    iParam0->_fU80 = uParam2;
    iParam0->_fU24 = 1;
    return;
}

/* CUTSYS_HANDLECUTSCENE */ void sub_40984(int iParam0)
{
    int iVar3;
    int Result;
    unknown uVar5;

    iVar3 = iParam0->_fU4;
    Result = 0;
    switch (iParam0->_fU4)
    {
        case 0: break;
        case 1:
        if (IS_ARCADE_MODE_ACTIVE())
        {
             /* WRITESCRIPTLOG */ sub_456( "AT", "ARCADE MODE ACTIVE. SKIPPING BINK STATE.", "###" );
            iParam0->_fU4 = 2;
        }
        else if (iParam0->_fU52)
        {
             /* WRITESCRIPTLOG */ sub_456( "AT", "Setting CUTSCENE_SET_WAIT_FOR_MOVIE.", "###" );
            CUTSCENE_SET_WAIT_FOR_MOVIE( 9 );
            SET_TRANSITION_MOVIE_SKIPPABLE( 0 );
            iParam0->_fU96 = 0;
        }
        if (NOT iParam0->_fU96)
        {
            if (GET_NUMBER_OF_STREAMING_REQUESTS() == 0)
            {
                if (IS_SCREEN_FADED_OUT())
                {
                    DO_SCREEN_FADE_IN( 0 );
                }
                 /* WRITESCRIPTLOG */ sub_456( "AT", "Streaming requests complete! Cutscene can be skipped!", "###" );
                SET_TRANSITION_MOVIE_SKIPPABLE( 1 );
                iParam0->_fU96 = 1;
                break;
                iParam0->_fU12;
                break;
            }
        }
        if ((NOT IS_TRANSITION_MOVIE_PLAYING()) || (NOT CUTSCENE_IS_WAITING_FOR_MOVIE()))
        {
             /* WRITESCRIPTLOG */ sub_456( "AT", "Bink is complete! Playing cutscene!", "###" );
            iParam0->_fU4 = 5;
        }
        break;
        case 2:
        if (NOT HAS_CUTSCENE_LOADED())
        {
             /* WRITESCRIPTLOG */ sub_456( "MSWW", "CutSys reports cutscene not already loaded.", "###" );
        }
        else if ((NOT (CUTSCENE_IS_LOADED( iParam0->_fU0 ))) AND (HAS_CUTSCENE_LOADED()))
        {
             /* WRITESCRIPTLOG */ sub_456( "MSWW", "CutSys reports wrong cutscene is loaded.", "###" );
            CLEAR_NAMED_CUTSCENE( "ThisStringDoesNothing" );
            break;
        }
        if (CUTSCENE_IS_LOADED( iParam0->_fU0 ))
        {
            iParam0->_fU4 = 4;
        }
        else if (NOT CUTSCENE_IS_LOADING())
        {
             /* LOADSEAMLESSCUTSCENE */ sub_24272( iParam0->_fU0, 0 );
             /* WRITESCRIPTLOG */ sub_456( "MSWW", "CutSys trying to load cutscene.", "###" );
        }
        break;
        case 4:
        if (iParam0->_fU8)
        {
             /* NIS_PRE_SETUP */ sub_38908( iParam0->_fU60, 0, 0, iParam0->_fU104 );
            if (iParam0->_fU40)
            {
                iParam0->_fU4 = 3;
                break;
                iParam0->_fU44;
                break;
            }
            else
            {
                iParam0->_fU4 = 5;
                break;
                iParam0->_fU12;
                break;
            }
        }
        break;
        case 3:
        if (iParam0->_fU48)
        {
            iParam0->_fU4 = 5;
            break;
            iParam0->_fU12;
            break;
        }
        break;
        case 5:
         /* NIS_PRE_SETUP */ sub_38908( 1, 0, 0, iParam0->_fU104 );
        if (NOT iParam0->_fU100)
        {
            CUTSCENE_ENABLE_SKIP( 0 );
        }
         /* WRITESCRIPTLOG */ sub_456( "MSWW", "CUTSCENE SYSTEM STARTING CUTSCENE!", "###" );
        START_SEAMLESS_CUTSCENE();
        if (iParam0->_fU24)
        {
            CUTSCENE_DISABLE_FADE_IN_GAME_AT_END( 1 );
        }
        iParam0->_fU4 = 6;
        break;
        case 6:
        if (iParam0->_fU52)
        {
            DO_SCREEN_FADE_IN( iParam0->_fU56 );
        }
        if (HAS_CUTSCENE_FINISHED())
        {
            if (iParam0->_fU68)
            {
                if (WAS_CUTSCENE_SKIPPED())
                {
                    if (iParam0->_fU72)
                    {
                        uVar5 = GET_INTERIOR_FROM_NAME( iParam0->_fU76, 0 );
                        SET_INTERIOR_ACTIVE( uVar5, 1, 0 );
                        LOAD_SCENE_FOR_ROOM_BY_KEY( uVar5, GET_HASH_KEY( iParam0->_fU80 ) );
                    }
                    else
                    {
                        LOAD_SCENE( iParam0->_fU84 );
                    }
                }
            }
            if (iParam0->_fU64)
            {
                 /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_42249( 1 );
            }
            if (iParam0->_fU28)
            {
                iParam0->_fU4 = 8;
                break;
                iParam0->_fU32;
                break;
            }
            else
            {
                iParam0->_fU4 = 9;
            }
        }
        break;
        break;
        iParam0->_fU16;
        break;
        case 7:
         /* NIS_PRE_SETUP */ sub_38908( 1, 0, 0, iParam0->_fU104 );
        iParam0->_fU4 = 8;
        break;
        break;
        iParam0->_fU32;
        break;
        case 8:
        if (iParam0->_fU36)
        {
            iParam0->_fU4 = 9;
        }
        break;
        case 9:
        if (iParam0->_fU20)
        {
             /* NIS_POST_SETUP */ sub_42629( 1, 1 );
            iParam0->_fU4 = 0;
            Result = 1;
        }
        break;
        case 10:
         /* NIS_POST_SETUP */ sub_42629( 1, 1 );
        iParam0->_fU4 = 0;
        Result = 1;
        break;
    }
    if (iParam0->_fU4 != iVar3)
    {
        iParam0->_fU52 = 1;
    }
    else
    {
        iParam0->_fU52 = 0;
    }
    return Result;
}

/* P_SET_PLAYER_WEAPONS_VISIBLE */ void sub_42249(unknown uParam0)
{
    unknown uVar3;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
    {
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 0, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 1, 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_826(), 0 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_826(), 1 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
        uVar3 = GET_WEAPON_FROM_HOLSTER(  /* PLAYER_PED_ID */ sub_826(), 2 );
        if (GET_DOES_WEAPON_EXIST( uVar3 ))
        {
            SET_WEAPON_VISIBLE( uVar3, uParam0 );
        }
    }
    return;
}

/* NIS_POST_SETUP */ void sub_42629(boolean bParam0, boolean bParam1)
{
    SET_WIDESCREEN_BORDERS( 0, 500 );
    DISPLAY_HUD( 1 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_864(), 1, 0 );
        SET_PED_INVINCIBLE(  /* PLAYER_PED_ID */ sub_826(), 0 );
        if (bParam0)
        {
             /* P_MAX_RELOAD_WEAPONS */ sub_42727();
        }
    }
    PULSE_CROSSHAIR( 1 );
    if (bParam1)
    {
        DESTROY_ALL_CAMS();
    }
    return;
}

/* P_MAX_RELOAD_WEAPONS */ void sub_42727()
{
    unknown uVar2;
    unknown uVar3;
    unknown uVar4;
    unknown uVar5;

    if ((IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )) == 0)
    {
        uVar2 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 0, 0 );
        uVar3 = GET_WEAPON_FROM_HAND(  /* PLAYER_PED_ID */ sub_826(), 1, 0 );
        if ((GET_DOES_WEAPON_EXIST( uVar2 )) == 1)
        {
            uVar4 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_826(), 0 );
            SET_WEAPON_AMMO_IN_CLIP( uVar2, uVar4 );
        }
        if ((GET_DOES_WEAPON_EXIST( uVar3 )) == 1)
        {
            uVar5 = GET_MAX_AMMO_IN_HAND_CLIP_MP(  /* PLAYER_PED_ID */ sub_826(), 1 );
            SET_WEAPON_AMMO_IN_CLIP( uVar3, uVar5 );
        }
    }
    return;
}

/* P_START_CHECKPOINT_THREAD */ void sub_43228(int iParam0)
{
    iParam0->_fU36 = 1;
    return;
}

/* P_PED_ARRAY_Z_SAFETY_CHECK */ void sub_43391(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    int I;

    for ( I = 0; I < (uParam0^); I++ )
    {
         /* P_PED_Z_SAFETY_CHECK */ sub_43457( (uParam0^)[I], uParam1, uParam2, uParam3 );
    }
    return;
}

/* P_PED_Z_SAFETY_CHECK */ void sub_43457(unknown uParam0, float fParam1, int iParam2, boolean bParam3)
{
    unknown uVar6;
    unknown uVar7;
    unknown uVar8;

    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        uVar6 = {"[doubled result, dropped if not asigned]", "[doubled result, dropped if not asigned]", GET_PED_COORDS( uParam0 )};
        if (uVar6._fU8 < fParam1)
        {
            if (iParam2 == 1)
            {
                SET_PED_HEALTH( uParam0, 0, 0 );
            }
            if (bParam3)
            {
                 /* CLEANPED */ sub_5028( uParam0 );
            }
        }
    }
    return;
}

/* F_HAD_MAX_ALERTED_UFE */ int sub_43601()
{
    unknown uVar2;

    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
    {
        uVar2 =  /* PLAYER_PED_ID */ sub_826();
        if (HAS_SHOT_BEEN_FIRED_IN_AREA( g_U2014[3], 25.00000000, 1, ref uVar2 ))
        {
             /* WRITESCRIPTLOG */ sub_456( "AT", "Shots fired! Alerting UFE!", 0 );
            return 1;
        }
        if ((IS_PED_DEAD( l_U218[0] )) || ( /* F_IS_PED_AWARE_OF_PED */ sub_43749( ref l_U218[0],  /* PLAYER_PED_ID */ sub_826(), 1, 1, 1, 1, 1 )))
        {
             /* WRITESCRIPTLOG */ sub_456( "AT", "pi_DH_UFE[0] is aware of Max! Alerting UFE!", 0 );
            return 1;
        }
    }
    return 0;
}

/* F_IS_PED_AWARE_OF_PED */ int sub_43749(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, int iParam6)
{
    if ((NOT (IS_PED_DEAD( uParam1 ))) AND (NOT (IS_PED_DEAD( (uParam0^) ))))
    {
        if ((uParam3) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 1 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_456( "MF", "ped has SEEN target ped", 0 );
            }
            return 1;
        }
        else if ((uParam4) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 8 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_456( "MF", "ped has BEEN SHOT AT by target ped", 0 );
            }
            return 1;
        }
        else if ((uParam2) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 2 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_456( "MF", "ped has HEARD target ped", 0 );
            }
            return 1;
        }
        else if ((uParam5) AND (GET_PED_AWARENESS_STATE( (uParam0^), uParam1, 4 )))
        {
            if (iParam6 == 1)
            {
                 /* WRITESCRIPTLOG */ sub_456( "MF", "ped has BEEN TOLD ABOUT target ped", 0 );
            }
            return 1;
        };;;;
    }
    return 0;
}

/* P_START_HALLWAY_UFE_FIGHT */ void sub_44237()
{
     /* WRITESCRIPTLOG */ sub_456( "AT", "P_ACTIVATE_HALLWAY_UFE", 0 );
    if (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() )))
    {
        if (NOT (IS_PED_DEAD( l_U218[0] )))
        {
            TASK_COMBAT_PED( l_U218[0],  /* PLAYER_PED_ID */ sub_826() );
        }
        if (NOT (IS_PED_DEAD( l_U218[1] )))
        {
            TASK_COMBAT_MOVE_TO_COVER_COORDS( l_U218[1], 9.42000000, -148.69000000, 4.44000000,  /* PLAYER_PED_ID */ sub_826() );
        }
        if (NOT (IS_PED_DEAD( l_U218[2] )))
        {
            TASK_COMBAT_MOVE_TO_COVER( l_U218[2], "GenCover", "11F0ECBE_F27807F8_Corner2", 0 );
            SET_PED_FLAG_LOCK_TO_COVER( l_U218[2], 1 );
        }
        if (NOT (IS_PED_DEAD( l_U218[3] )))
        {
            TASK_COMBAT_MOVE_TO_COVER( l_U218[3], "GenCover", "11F0ECBE_821FA7B9_Corner2", 0 );
            SET_PED_FLAG_LOCK_TO_COVER( l_U218[3], 1 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218[3], 1 );
        }
        if (NOT (IS_PED_DEAD( l_U218[4] )))
        {
            TASK_COMBAT_MOVE_TO_COVER( l_U218[4], "ap_sec2", "Corner_Position05", 0 );
            SET_PED_FLAG_LOCK_TO_COVER( l_U218[4], 1 );
            SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( l_U218[4], 1 );
        }
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOX */ void sub_44813(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20)
{
    return  /* F_ISPEDINTRIGGERBOX */ sub_44856(  /* PLAYER_PED_ID */ sub_826(), uParam0 );
}

/* F_ISPEDINTRIGGERBOX */ int sub_44856(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8, unknown uParam9, unknown uParam10, unknown uParam11, unknown uParam12, unknown uParam13, unknown uParam14, unknown uParam15, unknown uParam16, unknown uParam17, unknown uParam18, unknown uParam19, unknown uParam20, unknown uParam21)
{
    if ((IS_PED_DEAD( uParam0 )) == 0)
    {
        return IS_PED_IN_GAMEPLAY_HELPER_BOX( uParam0, ref uParam1._fU0 );
    }
    return 0;
}

/* P_REMOVETETHERFROMPED */ void sub_45140(int iParam0, unknown uParam1)
{
    if (((IS_PED_DEAD( uParam1 )) == 0) AND ((DOES_PED_EXIST( uParam1 )) == 1))
    {
        SET_PED_TETHERING_REMOVE_BOX( uParam1, iParam0->_fU0 );
    }
    return;
}

/* F_ISPLAYERINTRIGGERBOXFIRSTTIME */ void sub_45246(int iParam0, unknown uParam1)
{
    if (iParam0->_fU64 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU64 =  /* F_ISPEDINTRIGGERBOX */ sub_44856(  /* PLAYER_PED_ID */ sub_826(), (iParam0^) );
        if ((iParam0->_fU64) AND (uParam1))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU64;
}

/* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ void sub_45664(unknown uParam0)
{
    int Result;
    int I;
    int iVar5;

    Result = 0;
    iVar5 = (uParam0^) - 1;
    for ( I = 0; I <= iVar5; I++ )
    {
        if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
        {
            Result++;
        }
    }
    return Result;
}

/* F_ASSIGN_BULLET_CAM_TO_LAST_LIVING_PED */ void sub_45788(unknown uParam0)
{
    int I;

    if (( /* F_GET_NUM_LIVING_PEDS_IN_ARRAY */ sub_45664( uParam0 )) == 1)
    {
        for ( I = 0; I <= ((uParam0^) - 1); I++ )
        {
            if (NOT (IS_PED_DEAD( (uParam0^)[I] )))
            {
                if (NOT (GET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I] )))
                {
                    SET_PED_CAN_TRIGGER_BULLET_CAM( (uParam0^)[I], 1 );
                    return (uParam0^)[I];
                }
            }
        }
    }
    return nil;
}

/* F_GETDOOROPENRATIO */ void sub_45970(int iParam0)
{
    int iVar3;
    float Result;

    if (( /* F_DOESDOOREXIST */ sub_12624( iParam0 )) == 0)
    {
         /* P_PRINTDOORNOTEXIST */ sub_12708( iParam0 );
    }
    iVar3 = 0;
    Result = 0.00000000;
    GET_STATE_OF_CLOSEST_DOOR_OF_TYPE( iParam0->_fU0, iParam0->_fU4, ref iVar3, ref Result );
    return Result;
}

/* P_ACTIVATE_VIG02 */ void sub_46088()
{
     /* WRITESCRIPTLOG */ sub_456( "AT", "P_ACTIVATE_VIG02", 0 );
    l_U520 =  /* CREATEOBJECTNOOFFSET */ sub_46187( -24365917, -30.64000000, -151.30000000, 5.23000000, 0.00000000, 0.00000000, 90.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U520 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U520, ref g_U2270 );
    }
    l_U521 =  /* CREATEOBJECTNOOFFSET */ sub_46187( -90187428, -30.55000000, -151.00000000, 5.25400000, 0.00000000, -90.00000000, 140.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U521 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U521, ref g_U2270 );
    }
    l_U522 =  /* CREATEOBJECTNOOFFSET */ sub_46187( 1798479363, -30.44000000, -151.30000000, 5.20000000, 0.00000000, 0.00000000, 90.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U522 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U522, ref g_U2270 );
    }
    l_U523 =  /* CREATEOBJECTNOOFFSET */ sub_46187( -1489459326, -30.90000000, -151.30000000, 5.23300000, 90.00000000, 180.00000000, 110.00000000, 0, 0, 0 );
    if (DOES_OBJECT_EXIST( l_U523 ))
    {
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME( l_U523, ref g_U2270 );
    }
    return;
}

/* CREATEOBJECTNOOFFSET */ void sub_46187(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, boolean bParam7, int iParam8, unknown uParam9)
{
    unknown Result;

    if ((HAS_MODEL_LOADED( uParam0 )) == 0)
    {
        SCRIPT_ASSERT( "The model you are trying to create a object with MUST BE PRELOADED!!!!", 0 );
         /* LOADMODEL */ sub_32651( uParam0, 1 );
    }
    Result = CREATE_OBJECT_NO_OFFSET( uParam0, uParam1, NOT bParam7, uParam9 );
    if (iParam8 == 1)
    {
        while ((DOES_OBJECT_EXIST( Result )) == 0)
        {
            DISPLAYF( "[SP]### Waiting for an object to exist: {!f1} ###", 2, 1, -874832622, 513, uParam0 );
            WAIT( 0 );
        }
    }
    if ((DOES_OBJECT_EXIST( Result )) == 1)
    {
        SET_OBJECT_ROTATION( Result, uParam4 );
    }
    return Result;
}

/* F_ISPEDINTRIGGERBOXFIRSTTIME */ void sub_47040(int iParam0, unknown uParam1, unknown uParam2)
{
    if (iParam0->_fU68 == 1)
    {
        return 0;
    }
    else
    {
        iParam0->_fU68 =  /* F_ISPEDINTRIGGERBOX */ sub_44856( uParam1, (iParam0^) );
        if ((iParam0->_fU68) AND (uParam2))
        {
            GAMEPLAY_HELPER_BOX_SET_ENABLED( iParam0 + 0, 0 );
        }
    }
    return iParam0->_fU68;
}

/* P_DH_HANDLE_CLEANUP_OFFSCREEN_UFE */ void sub_47236()
{
    int I;

    for ( I = 0; I < l_U218; I++ )
    {
        if ((NOT (IS_PED_DEAD( l_U218[I] ))) AND (DOES_PED_EXIST( l_U218[I] )))
        {
            if (NOT (IS_PED_ON_SCREEN( l_U218[I], 1 )))
            {
                 /* CLEANPED */ sub_5028( l_U218[I] );
            }
        }
    }
    return;
}

/* P_14_FIN_RANDOM1_CONCAT_REGISTER */ void sub_47617()
{
     /* WRITESCRIPTLOG */ sub_456( "NS", "P_14_FIN_RANDOM1_CONCAT_REGISTER", 0 );
     /* KILL_ANY_MISSION_SPEECH */ sub_47709( 0 );
    if ((NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_864() ))) AND (NOT (IS_PED_DEAD(  /* PLAYER_PED_ID */ sub_826() ))))
    {
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE(  /* PLAYER_PED_ID */ sub_826(), "/Global/Player/PlayerRoot/PLAYER_INITIALIZE_LOCO" );
        CUTSCENE_REGISTER_PED_TELEPORT(  /* PLAYER_PED_ID */ sub_826(), -3.55700900, -142.74620000, 4.44546100, 124.96790000 );
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_864(), 0, 0 );
    }
     /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_42249( 0 );
    REGISTER_SCENE_PED_SEAMLESS_CUTSCENE( "Andr_Suit", -432012223 );
    CUTSCENE_ENABLE_SKIP( 0 );
    return;
}

/* KILL_ANY_MISSION_SPEECH */ void sub_47709(unknown uParam0)
{
    int I;

    for ( I = 0; I <= 3; I++ )
    {
        PRINTSTRING( "\n KILL_ANY_MISSION_SPEECH CALLED***************************************" );
        if (IS_SCRIPTED_CONVERSATION_ONGOING( I ))
        {
            if ((g_U1[I] <= 8) AND (g_U1[I] >= 4))
            {
                STOP_SCRIPTED_CONVERSATION( I, uParam0, 0 );
            }
        }
    }
    return;
}

/* CUTSYS_DEFAULT_HANDLECUTSCENE */ void sub_48097()
{
    return;
}

/* F_14_FIN_RANDOM1_CONCAT_POSTCUTSCENE */ int sub_48147()
{
     /* WRITESCRIPTLOG */ sub_456( "NS", "F_14_FIN_RANDOM1_CONCAT_PostCutscene", 0 );
    ALLOW_BULLET_CAMERA_TO_GAMEPLAY( 1, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_HEADING( 0, 1065353216, 0 );
    SET_GAMEPLAY_CAM_RELATIVE_PITCH( 0, 1065353216, 0 );
    if (NOT (IS_PLAYER_DEAD(  /* PLAYER_ID */ sub_864() )))
    {
        SET_PLAYER_CONTROL(  /* PLAYER_ID */ sub_864(), 1, 0 );
    }
     /* P_SET_PLAYER_WEAPONS_VISIBLE */ sub_42249( 1 );
    if (NOT (HAS_EXPLORATION_ITEM_BEEN_FOUND( "sair_Anders3" )))
    {
        FOUND_EXPLORATION_ITEM( "sair_Anders3" );
    }
    return 1;
}

/* CUTSYS_CREATESTANDALONECUTSCENE */ void sub_48384(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4, unknown uParam5, unknown uParam6, unknown uParam7)
{
     /* WRITESCRIPTLOG */ sub_456( "MSWW", "CutSys_CreateStandaloneCutscene", "###" );
    return  /* CUTSYS_PRIVATE_CREATECUTSCENE */ sub_40529( uParam0, uParam1, uParam2, uParam3, uParam4, uParam5, uParam7, 0, 48495, 48546, 0, 40426, 40476, uParam6 );
}

/* CUTSYS_DEFAULT_PREPAREBLENDOUT */ void sub_48495()
{
    return;
}

/* CUTSYS_DEFAULT_HANDLEBLENDOUT */ int sub_48546()
{
    return 1;
}

/* F_IS_PED_PLAYING_SPEECH */ int sub_48721(unknown uParam0)
{
    if (NOT (IS_PED_DEAD( uParam0 )))
    {
        return IS_ANY_SPEECH_PLAYING( uParam0 );
    }
    return 0;
}

/* P_DH_HANDLE_OUT_OF_COMBAT_DIALOGUE */ void sub_48818()
{
    int iVar2;
    int I;

    if ((NOT ( /* ISTIMERDONE */ sub_2004( ref l_U535 ))) AND (l_U535._fU20))
    {
        return;
    }
    if (NOT l_U553)
    {
         /* P_CREATE_AND_START_TIMER */ sub_39984( ref l_U554, 2000 );
         /* WRITESCRIPTLOG */ sub_456( "GA", "Starting FINALE_SONG_01 music track with FINALE_01_2 mood. Fade in 7 sec", 0 );
        AUDIO_MUSIC_FORCE_TRACK( "FINALE_SONG_01", "FINALE_01_2", "FINALE_01_2", 0.00000000, 7000, 3000, -1082130432, 0 );
         /* WRITESCRIPTLOG */ sub_456( "GA", "Playing audio music one shot FINALE_ONESHOT_03", 0 );
        AUDIO_MUSIC_PLAY_ONESHOT();
        l_U553 = 1;
    }
    if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_49142()))
    {
        if ( /* ISTIMERDONE */ sub_2004( ref l_U700 ))
        {
             /* P_SPEECH_PLAY_MONOLOGUE */ sub_49276( "SAIR_MX3RDENC", ref l_U710 );
        }
    }
    if (NOT l_U700._fU20)
    {
        if (NOT ( /* IS_ANY_SPEECH_CURRENTLY_PLAYING */ sub_49142()))
        {
            if ( /* ISTIMERDONE */ sub_2004( ref l_U554 ))
            {
                 /* P_DH_PLAY_OUT_OF_COMBAT_DIALOGUE */ sub_50546( "SAIR_AMKECR" );
                return;
            }
        }
        if (l_U554._fU16)
        {
            if (NOT l_U569._fU20)
            {
                 /* P_CREATE_AND_START_TIMER */ sub_39984( ref l_U569, GET_RANDOM_INT_IN_RANGE( l_U563, l_U564 ) );
            }
            if ( /* ISTIMERDONE */ sub_2004( ref l_U569 ))
            {
                if (l_U568 < l_U565)
                {
                     /* P_DH_PLAY_OUT_OF_COMBAT_DIALOGUE */ sub_50546( l_U565[l_U568] );
                    l_U568++;
                     /* P_CREATE_AND_START_TIMER */ sub_39984( ref l_U569, GET_RANDOM_INT_IN_RANGE( l_U563, l_U564 ) );
                    return;
                }
            }
            if (NOT l_U578)
            {
                if ((IS_SPHERE_VISIBLE( -22.58000000, -152.09000000, 5.41000000, 0.10000000, 1 )) AND ( /* F_ISPEDINTRIGGERBOX */ sub_44856(  /* PLAYER_PED_ID */ sub_826(), l_U579 )))
                {
                     /* P_DH_PLAY_OUT_OF_COMBAT_DIALOGUE */ sub_50546( "SAIR_MSDTDR" );
                    l_U578 = 1;
                    return;
                }
            }
            if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_47040( ref l_U600,  /* PLAYER_PED_ID */ sub_826(), 0 ))
            {
                 /* P_DH_PLAY_OUT_OF_COMBAT_DIALOGUE */ sub_50546( "SAIR_MSWTG" );
                return;
            }
            if ( /* F_ISPEDINTRIGGERBOXFIRSTTIME */ sub_47040( ref l_U621,  /* PLAYER_PED_ID */ sub_826(), 0 ))
            {
                 /* P_DH_PLAY_OUT_OF_COMBAT_DIALOGUE */ sub_50546( "SAIR_METBTRM" );
                return;
            }
            iVar2 = 0;
            for ( I = 0; I < l_U513; I++ )
            {
                if (DOES_PLACEMENT_EXIST( l_U513[I] ))
                {
                    iVar2++;
                }
            }
            if (((GET_RANDOM_FLOAT_IN_RANGE( 0.00000000, 1.00000000 )) < 0.50000000) AND (iVar2 < l_U642))
            {
                 /* P_DH_PLAY_OUT_OF_COMBAT_DIALOGUE */ sub_50546( "SAIR_MFFKNPLS" );
            }
            l_U642 = iVar2;
        }
    }
    return;
}

/* IS_ANY_SPEECH_CURRENTLY_PLAYING */ void sub_49142()
{
    int Result;
    int I;

    Result = 0;
    for ( I = 0; I <= 3; I++ )
    {
        Result = (IS_SCRIPTED_CONVERSATION_ONGOING( I )) || (Result);
    }
    return Result;
}

/* P_SPEECH_PLAY_MONOLOGUE */ void sub_49276(unknown uParam0, unknown uParam1)
{
     /* RESET_SCRIPT_SPEECH_STRUCT */ sub_10434( uParam1 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_49335( 0,  /* PLAYER_PED_ID */ sub_826(), "MAX", uParam1, 2, 0 );
     /* ADD_PED_FOR_SCRIPT_SPEECH */ sub_49335( 1,  /* PLAYER_PED_ID */ sub_826(), "MAX", uParam1, 2, 0 );
     /* PLAY_SINGLE_SPEECH */ sub_49588( uParam0, uParam1, 8, 1 );
    return;
}

/* ADD_PED_FOR_SCRIPT_SPEECH */ void sub_49335(int iParam0, unknown uParam1, unknown uParam2, int iParam3, unknown uParam4, unknown uParam5)
{
    if (iParam3->_fU32)
    {
        ;
    }
    else if (iParam3->_fU36 == 0)
    {
        iParam3->_fU36 = 1;
        iParam3->_fU4 = CREATE_NEW_SCRIPTED_CONVERSATION( uParam4 );
        if (iParam3->_fU4 == -1)
        {
            iParam3->_fU32 = 1;
        }
    }
    if ((iParam0 < 9) AND ((iParam0 >= 0) AND ((iParam3->_fU4 < 4) AND (iParam3->_fU4 >= 0))))
    {
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU0 = uParam1;
        g_U16[iParam3->_fU4]._fU16[iParam0]._fU4 = GET_HASH_KEY( uParam2 );
        if (NOT (IS_PED_INJURED( uParam1 )))
        {
            SET_PED_CAN_PLAY_AMBIENT_ANIMS( uParam1, uParam5 );
        }
    }
    return;
}

/* PLAY_SINGLE_SPEECH */ void sub_49588(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3)
{
    return  /* PLAY_SINGLE_SPEECH_FROM_BLOCK */ sub_49633( uParam0, ref g_U157._fU0, uParam1, uParam2, uParam3 );
}

/* PLAY_SINGLE_SPEECH_FROM_BLOCK */ void sub_49633(unknown uParam0, unknown uParam1, unknown uParam2, unknown uParam3, unknown uParam4)
{
    char[16] cVar7;
    char[12] cVar11;
    unknown uVar14;
    unknown uVar15;
    unknown uVar16;
    unknown uVar17;
    unknown uVar18;
    unknown uVar19;

    StrCopy( ref cVar7, uParam1, 16 );
    array(ref cVar11, 2);
    StrCopy( ref cVar11[0], uParam0, 16 );
    StrCopy( ref cVar11[1], "END", 16 );
    return  /* PLAYSPEECHMAIN */ sub_49720( ref cVar11, uParam2, uParam3, 0, 0, 0, 0, ref cVar7, uParam4 );
}

/* PLAYSPEECHMAIN */ int sub_49720(unknown uParam0, int iParam1, unknown uParam2, boolean bParam3, boolean bParam4, unknown uParam5, unknown uParam6, unknown uParam7, unknown uParam8)
{
    int I;
    unknown uVar12;
    unknown uVar13;

    if (iParam1->_fU4 == -1)
    {
        return 0;
    }
    iParam1->_fU0 = uParam2;
    if (NOT ( /* CANTHISSPEECHBEPLAYED */ sub_49772( iParam1 )))
    {
        return 0;
    }
    uVar12 = iParam1->_fU4;
    uVar13 = GET_HASH_KEY( ref (uParam0^)[0] );
    iParam1->_fU16 = uVar13;
    SET_CONVERSATION_CHECK_HASH( uVar12, uVar13 );
    g_U157._fU132 = 0;
    iParam1->_fU24 = 0;
    iParam1->_fU28 = uParam5;
    if (bParam3)
    {
        if (iParam1->_fU20)
        {
            iParam1->_fU20 = 0;
        }
    }
    else
    {
        iParam1->_fU20 = 0;
        if (bParam4)
        {
            iParam1->_fU12 = uParam6;
            iParam1->_fU20 = 0;
        }
        else
        {
            iParam1->_fU12 = 0;
            iParam1->_fU20 = 0;
        }
    }
    iParam1->_fU24 = bParam4;
    for ( I = 0; I <= 24; I++ )
    {
        StrCopy( ref g_U233[uVar12][I], "END", 16 );
    }
    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
        g_U233[uVar12][I] = {(uParam0^)[I]};
    }
    g_U192[uVar12] = {(iParam1^)};
     /* COPYHIDDENSPEECHSTUCT */ sub_50290( ref g_U16[uVar12], ref g_U157 );
    StrCopy( ref g_U16[uVar12]._fU0, uParam7, 16 );
    g_U16[uVar12]._fU136 = uParam8;
    g_U11[iParam1->_fU4] = 1;
    return 1;
}

/* CANTHISSPEECHBEPLAYED */ int sub_49772(int iParam0)
{
    switch (g_U11[iParam0->_fU4])
    {
        case 1:
        case 2:
        return 0;
        break;
    }
    if (IS_SCRIPTED_CONVERSATION_ONGOING( iParam0->_fU4 ))
    {
        if (g_U1[iParam0->_fU4] > iParam0->_fU0)
        {
            return 0;
        }
        STOP_SCRIPTED_CONVERSATION( iParam0->_fU4, 0, 0 );
    }
    g_U1[iParam0->_fU4] = iParam0->_fU0;
    g_U6[iParam0->_fU4]++;
    if (g_U6[iParam0->_fU4] > 100000)
    {
        g_U6[iParam0->_fU4] = 1;
    }
    iParam0->_fU8 = g_U6[iParam0->_fU4];
    return 1;
}

/* COPYHIDDENSPEECHSTUCT */ void sub_50290(int iParam0, int iParam1)
{
    int I;

    iParam0->_fU0 = {iParam1->_fU0};
    for ( I = 0; I <= 8; I++ )
    {
        iParam0->_fU92[I] = iParam1->_fU92[I];
    }
    iParam0->_fU132 = iParam1->_fU132;
    iParam0->_fU136 = iParam1->_fU136;
    return;
}

/* P_DH_PLAY_OUT_OF_COMBAT_DIALOGUE */ void sub_50546(unknown uParam0)
{
    DISPLAYF( "P_DH_PLAY_OUT_OF_COMBAT_DIALOGUE - Playing speech label {0}", 1, 1537, uParam0 );
     /* P_SPEECH_PLAY_MONOLOGUE */ sub_49276( uParam0, ref l_U525 );
     /* P_CREATE_AND_START_TIMER */ sub_39984( ref l_U535, 8000 );
    return;
}

/* P_RELEASE_DESERTEDHALLWAYS_ASSETS */ void sub_51344()
{
     /* WRITESCRIPTLOG */ sub_456( "AT", "P_RELEASE_DESERTEDHALLWAYS_ASSETS", 0 );
     /* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ sub_51445( ref l_U721, ref g_U1030 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_51994( 57534114, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_51994( -1464892298, ref g_U1247 );
     /* P_STREAMREQ_WEAPON_TYPE_REMOVE */ sub_51994( -612753081, ref g_U1247 );
     /* P_STREAMREQ_ANIM_DICT_REMOVE */ sub_52372( "LEVEL_S_FIN_CP_02", ref g_U1429 );
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE_ARRAY */ void sub_51445(unknown uParam0, unknown uParam1)
{
    int I;

    for ( I = 0; I <= ((uParam0^) - 1); I++ )
    {
         /* P_STREAMREQ_MODELNAMES_REMOVE */ sub_51518( (uParam0^)[I], uParam1 );
    }
    return;
}

/* P_STREAMREQ_MODELNAMES_REMOVE */ void sub_51518(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    if (IS_MODEL_IN_CDIMAGE( iParam0 ))
    {
        for ( I = 0; I <= ((uParam1^) - 1); I++ )
        {
            if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
            {
                if ((uParam1^)[I]._fU0 == iParam0)
                {
                    iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3811( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                    if (iVar5 == -1)
                    {
                        (uParam1^)[I]._fU4 = 4;
                        return;
                    }
                    else
                    {
                        DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                        DISPLAYF( "Trying to remove a MODEL_NAME asset that was requested by another thread!!!", 0 );
                        return;
                    }
                }
            }
        }
    }
    else
    {
        DISPLAYF( "[CCB] ### Removing MODEL_NAME: {!f1} ###", 2, 1, -874832622, 513, iParam0 );
        SCRIPT_ASSERT( "The asset is NOT in the image!!!", 0 );
    }
    return;
}

/* P_STREAMREQ_WEAPON_TYPE_REMOVE */ void sub_51994(int iParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU4 == 1) || (((uParam1^)[I]._fU4 == 2) || ((uParam1^)[I]._fU4 == 3)))
        {
            if ((uParam1^)[I]._fU0 == iParam0)
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3811( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU8 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU4 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a WEAPON_TYPE asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

/* P_STREAMREQ_ANIM_DICT_REMOVE */ void sub_52372(unknown uParam0, unknown uParam1)
{
    int I;
    int iVar5;

    for ( I = 0; I <= ((uParam1^) - 1); I++ )
    {
        if (((uParam1^)[I]._fU32 == 1) || (((uParam1^)[I]._fU32 == 2) || ((uParam1^)[I]._fU32 == 3)))
        {
            if (ARE_STRINGS_EQUAL( ref (uParam1^)[I]._fU0, uParam0 ))
            {
                iVar5 =  /* F_STREAMREQ_THREADID_IS_INDEX_AVAILABLE_FOR_REMOVE */ sub_3811( GET_ID_OF_THIS_THREAD(), ref (uParam1^)[I]._fU36 );
                if (iVar5 == -1)
                {
                    (uParam1^)[I]._fU32 = 4;
                    return;
                }
                else
                {
                    DISPLAYF( "[CCB] ### Requested ThreadID: {} ###", 1, 513, iVar5 );
                    DISPLAYF( "Trying to remove a ANIM_DICT asset that was requested by another thread!!!", 0 );
                    return;
                }
            }
        }
    }
    return;
}

